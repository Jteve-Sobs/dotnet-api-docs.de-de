<Type Name="RecognizedPhrase" FullName="System.Speech.Recognition.RecognizedPhrase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="532436c4bf4201c336f4d35a62ee5de8416d69f2" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70621742" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedPhrase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedPhrase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedPhrase" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedPhrase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedPhrase" />
  <TypeSignature Language="F#" Value="type RecognizedPhrase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{Text}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enthält ausführliche Informationen, die von der Spracherkennung generiert wurden, über die erkannte Eingabe.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse enthält ausführliche Informationen zu Wörtern und Ausdrücken, die während der sprach Erkennungs Vorgänge verarbeitet werden, einschließlich der folgenden:  
  
-   Die <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> -Eigenschaft verweist <xref:System.Speech.Recognition.Grammar> auf das-Objekt, das von der Erkennung zum Identifizieren der Eingabe verwendet wurde.  
  
-   Die <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> -Eigenschaft enthält den normalisierten Text für den Ausdruck.  
  
-   Die <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> -Eigenschaft verweist auf die semantischen Informationen, die im Ergebnis enthalten sind. Die semantischen Informationen sind ein Wörterbuch der Schlüsselnamen und zugeordneten semantischen Daten.  
  
-   Die <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> -Eigenschaft enthält eine geordnete Auflistung <xref:System.Speech.Recognition.RecognizedWordUnit> von-Objekten, die jedes erkannte Wort in der Eingabe darstellen. Jede Word-Einheit enthält das Anzeige Format, das lexikalische Format und die Informationen zur Aussprache für das entsprechende Wort.  
  
-   Die <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> -Eigenschaft enthält Informationen über die spezialisierte Wort Ersetzung.  
  
-   Die <xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A> - <xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A> Eigenschaft und die-Eigenschaft enthalten Informationen zu Erkennungs Alternativen, die über dieselbe oder ähnliche Aussprache verfügen.  
  
-   Der Wert der <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> -Eigenschaft gibt den Grad der Sicherheit an, der von der Spracherkennung zugewiesen wird, dass ein erkannter Ausdruck mit der Eingabe übereinstimmt.  
  
 Die Spracherkennung gibt Erkennungsergebnisse in einem <xref:System.Speech.Recognition.RecognitionResult> -Objekt zurück, das von <xref:System.Speech.Recognition.RecognizedPhrase>erbt. Die Eigenschaft Erkennungs <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> Ergebnis enthält eine geordnete Auflistung von <xref:System.Speech.Recognition.RecognizedPhrase> -Objekten, von denen jede eine mögliche Entsprechung für die Eingabe für die Erkennung ist.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Handler für ein <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>- <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>,- <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> oder-Ereignis und einige der Informationen, die <xref:System.Speech.Recognition.RecognitionResult> dem-Objekt zugeordnet sind. Die <xref:System.Speech.Recognition.RecognitionResult> -Klasse wird aus der <xref:System.Speech.Recognition.RecognizedPhrase> -Klasse abgeleitet.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
  </Docs>
  <Members>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen durch die Erkennung zugewiesenen Wert ab, der die Wahrscheinlichkeit angibt, dass ein <see cref="T:System.Speech.Recognition.RecognizedPhrase" />-Objekt mit einer angegebenen Eingabe übereinstimmt.</summary>
        <value>Eine relative Maßnahme der Sicherheit der richtigen Erkennung eines Ausdrucks. Der Wert liegt zwischen 0,0 und 1,0 (geringes bis hohes Vertrauen).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vertrauens Ergebnisse geben nicht die absolute Wahrscheinlichkeit an, dass ein Ausdruck ordnungsgemäß erkannt wurde. Stattdessen bieten Vertrauens Ergebnisse einen Mechanismus, mit dem die relative Genauigkeit mehrerer Erkennungs Alternativen für eine bestimmte Eingabe verglichen werden kann. Dadurch wird die Rückgabe des genauesten Erkennungs Ergebnisses ermöglicht. Wenn beispielsweise ein erkannter Ausdruck ein Vertrauens Ergebnis von 0,8 hat, bedeutet dies nicht, dass der Ausdruck eine Wahrscheinlichkeit von 80% hat, dass die richtige Entsprechung für die Eingabe vorliegt.  Dies bedeutet, dass es wahrscheinlicher ist, dass es sich bei dem Ausdruck um die richtige Entsprechung für die Eingabe handelt, als bei anderen Ergebnissen, bei denen die Vertrauenswürdigkeit kleiner 0,8 als  
  
 Ein eigenes Zuverlässigkeits Ergebnis ist nicht sinnvoll, es sei denn, es gibt alternative Ergebnisse, die mit dem gleichen Erkennungs Vorgang oder mit vorherigen erkenungen derselben Eingabe verglichen werden müssen. Die Werte werden verwendet, um alternative Kandidaten Ausdrücke zu ordnen, <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> die von <xref:System.Speech.Recognition.RecognitionResult> der-Eigenschaft für-Objekte zurückgegeben werden  
  
 Vertrauens Werte sind relativ und für jedes Erkennungs Modul eindeutig. Die von zwei verschiedenen Erkennungs Modulen zurückgegebenen Vertrauens Werte können nicht sinnvoll verglichen werden.  
  
 Eine Spracherkennungs-Engine kann gesprochenen Eingaben aus unterschiedlichen Gründen eine Bewertung mit geringem Vertrauen zuweisen, einschließlich Hintergrund Störungen, unformulieren Sprache oder unerwarteten Wörtern oder Wort Sequenzen. Wenn Ihre Anwendung eine <xref:System.Speech.Recognition.SpeechRecognitionEngine> -Instanz verwendet, können Sie den Vertrauensgrad ändern, mit dem Spracheingaben mit einer <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> der-Methoden akzeptiert oder abgelehnt werden. Die Vertrauens Schwellenwerte für die von <xref:System.Speech.Recognition.SpeechRecognizer>verwaltete freigegebene Erkennung werden einem Benutzerprofil zugeordnet und in der Windows-Registrierung gespeichert. Anwendungen sollten keine Änderungen an der Registrierung für die Eigenschaften der freigegebenen Erkennung schreiben.  
  
 Die <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> -Eigenschaft <xref:System.Speech.Recognition.RecognitionResult> des-Objekts enthält eine geordnete Auflistung <xref:System.Speech.Recognition.RecognizedPhrase> von-Objekten, von denen jede eine mögliche Entsprechung für die Eingabe für die Erkennung ist. Die Alternativen werden von der höchsten zur niedrigsten Zuverlässigkeit geordnet.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Handler für ein <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>- <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>,- <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> oder-Ereignis. Das Beispiel zeigt Informationen, die dem <xref:System.Speech.Recognition.RecognitionResult> -Objekt zugeordnet sind, von denen einige <xref:System.Speech.Recognition.RecognizedPhrase>von abgeleitet sind. Der Handler zeigt Vertrauens Ergebnisse für einen erkannten Ausdruck sowie für Erkennungs Alternativen an.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="ConstructSmlFromSemantics">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
      <MemberSignature Language="VB.NET" Value="Public Function ConstructSmlFromSemantics () As IXPathNavigable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::IXPathNavigable ^ ConstructSmlFromSemantics();" />
      <MemberSignature Language="F#" Value="member this.ConstructSmlFromSemantics : unit -&gt; System.Xml.XPath.IXPathNavigable" Usage="recognizedPhrase.ConstructSmlFromSemantics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.IXPathNavigable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein semantisches Markupsprachen-Dokument (SML )zu der semantischen Informationen im <see cref="T:System.Speech.Recognition.RecognizedPhrase" />-Objekt zurück.</summary>
        <returns>Gibt eine SML-Beschreibung der Semantik des <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> als ein Objekt zurück, in dem in <see href="https://msdn.microsoft.com/library/ms256115.aspx">XPath</see> navigiert werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Semantic Markup Language (SML) finden Sie in der [Semantik Markup-Sprachreferenz](https://msdn.microsoft.com/library/f9d83443-2cac-49bc-a447-210feda62f5d).  
  
   
  
## Examples  
 Im folgenden Beispiel gibt eine Methode eine Zeichenfolge zurück, die die SML für die Semantik eines erkannten Ausdrucks enthält.  
  
```  
private string GetSemanticsSML(RecognizedPhrase result)  
{  
  if (result.Semantics.Count > 0)  
  {  
    return result.ConstructSmlFromSemantics().CreateNavigator().OuterXml;  
  }  
  else  
  {  
    return null;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Grammar">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.Grammar Grammar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.Grammar Grammar" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammar As Grammar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::Grammar ^ Grammar { System::Speech::Recognition::Grammar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammar : System.Speech.Recognition.Grammar" Usage="System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Speech.Recognition.Grammar" /> ab, die von der Spracherkennung zum Zurückgeben der <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> verwendet wurde.</summary>
        <value>Das Grammatikobjekt, das die Spracherkennung verwendet, um die Eingabe zu identifizieren.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="HomophoneGroupId">
      <MemberSignature Language="C#" Value="public int HomophoneGroupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HomophoneGroupId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HomophoneGroupId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HomophoneGroupId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HomophoneGroupId : int" Usage="System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Bezeichner für die Homophongruppe für den Ausdruck ab.</summary>
        <value>Der Bezeichner für die Homophongruppe für den Ausdruck.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Spracherkennung weist allen Erkennungs Alternativen, die dieselbe Aussprache aufweisen, einen Gruppen Bezeichner zu. Für jede Alternative, bei der es sich um eine eindeutige Aussprache handelt, erstellt die Erkennung eine homophon-Gruppe. Die Spracherkennung generiert für jeden Erkennungs Vorgang eine neue Gruppe von bezeichlen, und die Bezeichner können nicht zum Vergleichen von Alternativen von aus separaten Erkennungs Vorgängen generierten verwendet werden.  
  
 Für ein Erkennungs Ergebnis, das die Alternativen "The Tale", "the Tail" und "The ALE" enthielt, würden die ersten beiden Alternativen z. b. zu einer homophon-Gruppe gehören, und die letzte Alternative wäre der einzige Member einer zweiten homophongruppe-Gruppe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      </Docs>
    </Member>
    <Member MemberName="Homophones">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Homophones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Homophones" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Homophones As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Homophones { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Homophones : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von Erkennungsalternativen ab, die über dieselbe Aussprache verfügen wie dieser erkannte Ausdruck.</summary>
        <value>Eine schreibgeschützte Auflistung von Erkennungsalternativen, die über dieselbe Aussprache verfügen wie dieser erkannte Ausdruck.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt alle anderen Erkennungs Alternativen zurück, die über dieselbe Aussprache verfügen wie dieser erkannte Ausdruck.  
  
 Beispielsweise würde für ein Erkennungs Ergebnis, das die Alternativen "The Tale" und "the Tail" enthielt, die Homophone-Auflistung für die erste Alternative "The Tale" den zweiten Ausdruck "the Tail" enthalten. Die Homophone-Auflistung für die zweite Alternative, "the Tail", würde den ersten Ausdruck "The Tale" enthalten.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementWordUnits">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementWordUnits As Collection(Of ReplacementText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ ReplacementWordUnits { System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReplacementWordUnits : System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft Informationen zu dem Text ab, der von der Spracherkennung als Teil der Sprache-zu-Text-Normalisierung geändert wurde.</summary>
        <value>Eine Auflistung der <see cref="T:System.Speech.Recognition.ReplacementText" />-Objekte, die Textabschnitte beschreiben, die die Spracherkennung ersetzt hat, als sie die erkannte Eingabe normalisierte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Rahmen des sprach Erkennungs Vorgangs normalisiert die Spracherkennung die erkannte Eingabe in ein Anzeige Formular.  
  
 Beispielsweise wird mit der gesprochenen Eingabe "20 fünf Dollar" ein Erkennungs Ergebnis generiert, bei dem <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> die-Eigenschaft die Wörter "zwanzig", "Five" und "Dollar" enthält und die <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> -Eigenschaft den Ausdruck "$25,00" enthält. Weitere Informationen zur Text Normalisierung finden Sie unter der <xref:System.Speech.Recognition.ReplacementText> -Klasse.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="T:System.Speech.Recognition.ReplacementText" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Semantics">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SemanticValue Semantics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SemanticValue Semantics" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Semantics As SemanticValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SemanticValue ^ Semantics { System::Speech::Recognition::SemanticValue ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Semantics : System.Speech.Recognition.SemanticValue" Usage="System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SemanticValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die semantischen Informationen ab, die dem erkannten Ausdruck zugeordnet sind.</summary>
        <value>Die semantischen Informationen, die dem erkannten Ausdruck zugeordnet sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine sprach Erkennungs Grammatik kann Semantik Informationen enthalten. Wenn eine Spracherkennung für eine solche Grammatik ein Erkennungs Ergebnis generiert, können die semantischen Informationen gemäß den Regeln der Grammatik und der Eingabe für die Erkennung im Erkennungs Ergebnis enthalten sein. Weitere Informationen zu Semantik Informationen finden Sie Untergrund Legendes zu [Semantik Ergebnissen](https://msdn.microsoft.com/library/2a9dbd8b-cf6d-42cd-bbb9-ca0b3e534005) und den <xref:System.Speech.Recognition.SemanticResultKey> Klassen und <xref:System.Speech.Recognition.SemanticResultValue> .  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine-Methode definiert, die bestimmte Semantik Informationen von einem erkannten Ausdruck abruft. Wenn diese Methode zurückgegeben wird, enthält Sie den Wert für den semantischen Schlüssel oder NULL, wenn der Wert nicht abgerufen wurde. Diese Methode überprüft nur die Schlüssel der obersten Ebene. Da die semantischen Informationen in einer Struktur von Werten enthalten sind, muss auf die Schlüssel auf niedrigerer Ebene über den zurückgegebenen semantischen Wert zugegriffen werden.  
  
```  
static bool TryGetSemanticValue(  
      RecognizedPhrase phrase, string key, out SemanticValue value)  
{  
  value = null;  
  bool found = phrase.Semantics.ContainsKey(key);  
  if (found)  
  {  
    value = phrase.Semantics[key];  
  }  
  
  return found;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
        <altmember cref="T:System.Speech.Recognition.SemanticValue" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den normalisierten Text ab, der von einer Spracherkennung aus einer erkannten Eingabe generiert wurde.</summary>
        <value>Der normalisierte Text, der von einer Spracherkennung aus einer erkannten Eingabe generiert wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Rahmen des sprach Erkennungs Vorgangs führt die Spracherkennung eine sprach-zu-Text-Normalisierung der erkannten Eingabe in ein Anzeige Formular aus.  
  
 Beispielsweise wird mit der gesprochenen Eingabe "20 fünf Dollar" ein Erkennungs Ergebnis generiert, bei dem <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> die-Eigenschaft die Wörter "zwanzig", "Five" und "Dollar" enthält und die <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> -Eigenschaft den Ausdruck "$25,00" enthält. Weitere Informationen zur Text Normalisierung finden <xref:System.Speech.Recognition.ReplacementText>Sie unter.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Words">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt; Words { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedWordUnit&gt; Words" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Words As ReadOnlyCollection(Of RecognizedWordUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ Words { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Words : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Wörter ab, die von einer Spracherkennung aus einer gültigen Eingabe generiert wurden.</summary>
        <value>Die Auflistung von <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />-Objekten, die durch eine Spracherkennung für eine bekannte Eingabe generiert wurden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft enthält die Wörter, die von der Spracherkennung erstellt werden, bevor die Spracherkennung des Ergebnisses durch die Erkennung der Erkennungsfunktion durchgeführt wird.  
  
 Beispielsweise wird mit der gesprochenen Eingabe "20 fünf Dollar" ein Erkennungs Ergebnis generiert, bei dem <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> die-Eigenschaft die Wörter "zwanzig", "Five" und "Dollar" enthält und die <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> -Eigenschaft den Ausdruck "$25,00" enthält. Weitere Informationen zur Text Normalisierung finden <xref:System.Speech.Recognition.ReplacementText>Sie unter.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      </Docs>
    </Member>
  </Members>
</Type>

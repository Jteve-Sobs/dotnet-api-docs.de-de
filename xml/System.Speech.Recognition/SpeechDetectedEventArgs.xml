<Type Name="SpeechDetectedEventArgs" FullName="System.Speech.Recognition.SpeechDetectedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b47b8bf195ffc4050ba4df4efb36a6b8aa856694" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37755787" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeechDetectedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechDetectedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechDetectedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechDetectedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type SpeechDetectedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="53192-101">Gibt Daten von <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" /> oder von <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />-Ereignissen zurück.</span>
      <span class="sxs-lookup">
        <span data-stu-id="53192-101">Returns data from <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" /> or <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" /> events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53192-102">Ein `SpeechDetected` Ereignis wird ausgelöst, durch die <xref:System.Speech.Recognition.SpeechRecognizer> und <xref:System.Speech.Recognition.SpeechRecognitionEngine> Klassen.</span><span class="sxs-lookup"><span data-stu-id="53192-102">A `SpeechDetected` event is raised by the <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.</span></span>  
  
 <span data-ttu-id="53192-103">**SpeechDetected** Ereignisse werden generiert, wenn es sich bei eine erkennungs-Engine Audioeingabe als menschliche Sprache identifizieren kann.</span><span class="sxs-lookup"><span data-stu-id="53192-103">**SpeechDetected** events are generated when a recognition engine can identify audio input as human speech.</span></span>  
  
 <span data-ttu-id="53192-104"><xref:System.Speech.Recognition.SpeechDetectedEventArgs> wird von <xref:System.EventArgs> abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="53192-104"><xref:System.Speech.Recognition.SpeechDetectedEventArgs> derives from <xref:System.EventArgs>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53192-105">Das folgende Beispiel erstellt einen Handler für <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected?displayProperty=nameWithType> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected?displayProperty=nameWithType> Ereignisse.</span><span class="sxs-lookup"><span data-stu-id="53192-105">The example below creates a handler for <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="53192-106">Der Handler Initialisiert eine Anzeige, jedes Mal, wenn Sprache erkannt und Statusinformationen, einschließlich audioposition angezeigt.</span><span class="sxs-lookup"><span data-stu-id="53192-106">The handler initializes a display every time speech is detected and displays status information, including audio position.</span></span>  
  
```  
_recognizer.SpeechDetected +=  
  delegate(object sender, SpeechDetectedEventArgs eventArgs)   
  {  
  
    // Clear previous recognition information.  
    _audioDeviceStatusLabel.Enabled = true;  
    _audioDeviceStatusLabel.Visible = true;  
    Utils.DisplayAudioInputFormat(_audioStateLabel, _recognizer);  
    Utils.DisplayRecognizerState(_recognizerStateLabel, _recognizer.State);  
    Utils.DisplaySpeechDetected(_speechDetectedLabel, eventArgs.AudioPosition);  
  };  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="53192-107">Ruft die Position im Audiostream ab, in der Sprache erkannt wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="53192-107">Gets the position in the audio stream where speech was detected.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="53192-108">Gibt den Speicherort eines erkannten Ausdrucks innerhalb des Sprachpuffers einer Erkennungs-Engine zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="53192-108">Returns the location of a detected phrase within a recognition engine’s speech buffer.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="53192-109">Das folgende Beispiel erstellt einen Handler für <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected?displayProperty=nameWithType> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected?displayProperty=nameWithType> Ereignisse.</span><span class="sxs-lookup"><span data-stu-id="53192-109">The example below creates a handler for <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="53192-110">Der Handler Initialisiert eine Anzeige, die jedes Mal Sprache erkannt und Statusinformationen, einschließlich audioposition angezeigt.</span><span class="sxs-lookup"><span data-stu-id="53192-110">The handler initializes a display each time speech is detected and displays status information, including audio position.</span></span>  
  
```  
_recognizer.SpeechDetected +=  
  delegate(object sender, SpeechDetectedEventArgs eventArgs)   
  {  
  
    // Clear previous recognition information.  
    _audioDeviceStatusLabel.Enabled = true;  
    _audioDeviceStatusLabel.Visible = true;  
    Utils.DisplayAudioInputFormat(_audioStateLabel, _recognizer);  
    Utils.DisplayRecognizerState(_recognizerStateLabel, _recognizer.State);  
    Utils.DisplaySpeechDetected(_speechDetectedLabel, eventArgs.AudioPosition);  
  };  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      </Docs>
    </Member>
  </Members>
</Type>
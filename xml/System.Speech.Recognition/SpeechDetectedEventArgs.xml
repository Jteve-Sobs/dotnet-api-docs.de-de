<Type Name="SpeechDetectedEventArgs" FullName="System.Speech.Recognition.SpeechDetectedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="319a6fac2a70dc60263255b2ed9c3276379768f5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30525614" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeechDetectedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechDetectedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechDetectedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechDetectedEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gibt Daten von <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" /> oder von <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />-Ereignissen zurück.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein `SpeechDetected` Ereignis wird ausgelöst, durch die <xref:System.Speech.Recognition.SpeechRecognizer> und <xref:System.Speech.Recognition.SpeechRecognitionEngine> Klassen.  
  
 **SpeechDetected** Ereignisse werden generiert, wenn ein Erkennungsmodul Audioeingabe als menschliche Sprache identifiziert werden kann.  
  
 <xref:System.Speech.Recognition.SpeechDetectedEventArgs> wird von <xref:System.EventArgs> abgeleitet.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt einen Handler für <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected?displayProperty=nameWithType> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected?displayProperty=nameWithType> Ereignisse. Der Handler Initialisiert eine Anzeige, jedes Mal, wenn Sprache erkannt wird, und zeigt Statusinformationen, einschließlich audioposition.  
  
```  
_recognizer.SpeechDetected +=  
  delegate(object sender, SpeechDetectedEventArgs eventArgs)   
  {  
  
    // Clear previous recognition information.  
    _audioDeviceStatusLabel.Enabled = true;  
    _audioDeviceStatusLabel.Visible = true;  
    Utils.DisplayAudioInputFormat(_audioStateLabel, _recognizer);  
    Utils.DisplayRecognizerState(_recognizerStateLabel, _recognizer.State);  
    Utils.DisplaySpeechDetected(_speechDetectedLabel, eventArgs.AudioPosition);  
  };  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Position im Audiostream ab, in der Sprache erkannt wurde.</summary>
        <value>Gibt den Speicherort eines erkannten Ausdrucks innerhalb des Sprachpuffers eines Erkennungsmoduls zurück.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel erstellt einen Handler für <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected?displayProperty=nameWithType> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected?displayProperty=nameWithType> Ereignisse. Der Handler Initialisiert eine Anzeige, die jedes Mal Spracherkennung erkannt und Statusinformationen, einschließlich audioposition angezeigt.  
  
```  
_recognizer.SpeechDetected +=  
  delegate(object sender, SpeechDetectedEventArgs eventArgs)   
  {  
  
    // Clear previous recognition information.  
    _audioDeviceStatusLabel.Enabled = true;  
    _audioDeviceStatusLabel.Visible = true;  
    Utils.DisplayAudioInputFormat(_audioStateLabel, _recognizer);  
    Utils.DisplayRecognizerState(_recognizerStateLabel, _recognizer.State);  
    Utils.DisplaySpeechDetected(_speechDetectedLabel, eventArgs.AudioPosition);  
  };  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="Choices" FullName="System.Speech.Recognition.Choices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="54e77a11bcf60a9714864aae7d18d87ad71dd8ff" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69145965" /></Metadata><TypeSignature Language="C#" Value="public class Choices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Choices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Choices" />
  <TypeSignature Language="VB.NET" Value="Public Class Choices" />
  <TypeSignature Language="C++ CLI" Value="public ref class Choices" />
  <TypeSignature Language="F#" Value="type Choices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Satz von Alternativen in den Einschränkungen einer Spracherkennungsgrammatik dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Speech.Recognition.Choices> -Objekt stellt eine Komponente eines Ausdrucks dar, die einen von mehreren Werten aufweisen kann. Verwenden Sie diese Klasse, wenn Sie eine sprach Erkennungs Grammatik <xref:System.Speech.Recognition.GrammarBuilder> aus einem-Objekt erstellen.  
  
 Ein <xref:System.Speech.Recognition.Choices> -Objekt könnte z. b. die Komponente *colorchoice* im Ausdruck "Ändern der Farbe in *colorchoice*" darstellen, wobei zulässige Werte für *colorchoice* "Red", "Green" oder "Blue" lauten.  
  
> [!NOTE]
>  Wenn Sie ein <xref:System.Speech.Recognition.Choices> -Objekt als optionale Komponente in einem Ausdruck verwenden möchten, <xref:System.Speech.Recognition.Choices> erstellen Sie das-Objekt, <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> und fügen Sie `maxRepeat` es einem-Objekt mit `minRepeat` und auf 0 bzw. 1 fest. Ausdrücke mit optionalen Komponenten können erkannt werden, unabhängig davon, ob die optionale Komponente gesprochen wird oder nicht.  
  
 Die <xref:System.Speech.Recognition.Choices> -Klasse erfüllt dieselbe Funktion wie das `one-of` von der [sprach Erkennungs Grammatik-Spezifikation (SRGS) Version 1,0](https://www.w3.org/TR/speech-grammar/) definierte XML-Element und ähnelt der <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> -Klasse im <xref:System.Speech.Recognition.SrgsGrammar> -Namespace.  
  
 Weitere Informationen zum Definieren einer sprach Erkennungs Grammatik finden Sie unter [Spracherkennung](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) und [Erstellen](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)von Grammatiken für Grammatiken.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine sprach Erkennungs Grammatik für den Ausdruck "Background on *colorchoice*festlegen" erstellt, wobei *colorchoice* eine der definierten Farben sein kann. <xref:System.Speech.Recognition.GrammarBuilder> Wird verwendet, um die Einschränkungen für die Grammatik zu definieren.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  colorChoice.Add(new string[] {"cyan", "yellow", "magenta"});  
  
  // Construct the phrase.  
  GrammarBuilder builder = new GrammarBuilder("Set background to");  
  builder.Append(colorChoice);  
  
  // Create a grammar for the phrase.  
  Grammar colorGrammar = new Grammar(builder);  
  colorGrammar.Name = "SetBackground";  
  
  return colorGrammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Sprach Erkennungs Grammatik-Spezifikation (SRGS)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.Choices" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können ein <xref:System.Speech.Recognition.Choices> -Objekt mithilfe eines Parameter losen Konstruktors (der ein leeres-Objekt zurückgibt), aus einer Gruppe <xref:System.String> von-Objekten oder aus einem Satz <xref:System.Speech.Recognition.GrammarBuilder> von-Objekten erstellen.  
  
 Da das <xref:System.Speech.Recognition.GrammarBuilder> -Objekt die implizite Konvertierung <xref:System.Speech.Recognition.SemanticResultValue> von <xref:System.Speech.Recognition.SemanticResultKey>und unter <xref:System.Speech.Recognition.Choices> stützt, kann ein mithilfe einer Umwandlung aus einem Array dieser Objekte erstellt werden.  
  
   
  
## Examples  
 Im folgenden Beispiel werden <xref:System.Speech.Recognition.Choices> -Objekte verwendet, um zwei Listen mit Alternativen zu erstellen.  
  
 Das erste <xref:System.Speech.Recognition.Choices> -Objekt wird aus einem Array von <xref:System.String> -Objekten erstellt. Das andere <xref:System.Speech.Recognition.Choices> Objekt wird aus einem Array von <xref:System.Speech.Recognition.GrammarBuilder> Objekten erstellt, die implizit durch eine Umwandlung konvertiert wurden.  
  
 Im Beispiel wird ein <xref:System.Speech.Recognition.GrammarBuilder> -Objekt verwendet, um mithilfe der <xref:System.Speech.Recognition.Choices> -Objekte und zwei zusätzlichen Zeichen folgen einen Ausdruck zu erstellen, der zum Erkennen von Spracheingaben in Form von "Anruf [contactllist] on [phoneType] Phone" verwendet werden kann, z. b. "Jane auf Mobiltelefon anrufen".  
  
```csharp
public GrammarBuilder ChoicesConstructor2 ()  
{  
    GrammarBuilder gb = new GrammarBuilder ();  
    Choices phoneType = new Choices (new string[] {"cell", "home", "work"});  
    Choices contactList = new Choices (new GrammarBuilder[] {(GrammarBuilder) "Mark", (GrammarBuilder) "Jane", (GrammarBuilder) "Frank"});  
    gb.Append ("Call");  
    gb.Append (contactList);  
    gb.Append ("on");  
    gb.Append (phoneType);  
    gb.Append ("phone");  
    return gb;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.Choices" />-Klasse, die einen leeren Satz von Alternativen enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor gibt einen gültigen, leeren Satz von Alternativen zurück. Sie können Alternativen mithilfe einer der <xref:System.Speech.Recognition.Choices.Add%2A> -Methoden hinzufügen.  
  
   
  
## Examples  
 Im folgenden Beispiel werden <xref:System.Speech.Recognition.Choices> - <xref:System.Speech.Recognition.GrammarBuilder> und-Objekte verwendet, um einen Ausdruck zu erstellen, der zum Erkennen von Spracheingaben verwendet werden kann, z. b. "callanne on your Cell" und "calljames on Your Work Phone". Im Beispiel werden implizite Umwandlungen <xref:System.Speech.Recognition.Choices> von <xref:System.String> und <xref:System.Speech.Recognition.GrammarBuilder>in verwendet.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Ein Array, das den Satz von Alternativen enthält.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.Choices" />-Klasse aus einem Array von einem oder mehreren <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede <xref:System.Speech.Recognition.GrammarBuilder> in`alternateChoices` definiert eine Alternative. Wenn `alternateChoices` ein leeres Array ist, gibt der Konstruktor einen leeren Satz von Alternativen zurück. Sie können Alternativen mithilfe einer der <xref:System.Speech.Recognition.Choices.Add%2A> -Methoden hinzufügen.  
  
 Der-Konstruktor löst <xref:System.ArgumentNullException> einen `alternateChoices` aus `null` , wenn gleich ist `null`oder wenn eines der Array Elemente ist.  
  
 Da die <xref:System.Speech.Recognition.GrammarBuilder> -Klasse Unterstützung für die implizite <xref:System.Speech.Recognition.Choices>Konvertierung <xref:System.Speech.Recognition.SemanticResultValue>von- <xref:System.Speech.Recognition.SemanticResultKey> ,- <xref:System.Speech.Recognition.GrammarBuilder> und-Objekten in-Instanzen bietet, kann dieser Konstruktor auch verwendet werden, um <xref:System.Speech.Recognition.Choices> eine zu erstellen. Objekt aus einer Liste beliebiger Kombinationen dieser Objekte.  
  
   
  
## Examples  
 Im folgenden Beispiel werden `Choices` - <xref:System.Speech.Recognition.GrammarBuilder> und-Objekte verwendet <xref:System.Speech.Recognition.Grammar> , um einen für Ausdrücke zu erstellen, z. b. "callanne on your Cell" und "calljames on Your Work Phone". Im Beispiel werden implizite Umwandlungen `Choices` von <xref:System.String> und <xref:System.Speech.Recognition.GrammarBuilder>in verwendet.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : string[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices phrases" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Ein Array, das den Satz von Alternativen enthält.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.Choices" />-Klasse aus einem Array von einem oder mehreren <see cref="T:System.String" />-Objekten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede <xref:System.String> in`phrases` definiert eine Alternative. Die Spracherkennungs-Engine kann eine beliebige der Elemente im Zeichen folgen Array verwenden, um Spracheingaben abzugleichen. Wenn `phrases` ein leeres Array ist, gibt der Konstruktor einen leeren Satz von Alternativen zurück. Sie können Alternativen mithilfe einer der <xref:System.Speech.Recognition.Choices.Add%2A> -Methoden hinzufügen.  
  
 Der-Konstruktor löst <xref:System.ArgumentNullException> einen `phrases` aus `null` , wenn ist oder eines der Array `null`Elemente ist. Der-Konstruktor löst <xref:System.ArgumentException> einen aus, wenn ein beliebiges Element im-Array eine leere Zeichenfolge ("") ist.  
  
   
  
## Examples  
 Im folgenden Beispiel werden <xref:System.Speech.Recognition.Choices> die <xref:System.Speech.Recognition.GrammarBuilder> -und-Objekte <xref:System.Speech.Recognition.Grammar> verwendet, um einen für die Ausdrücke zu erstellen, z. b. "callanne on your Cell" und "calljames on Your Work Phone". Im Beispiel werden implizite Umwandlungen `Choices` von <xref:System.String> und <xref:System.Speech.Recognition.GrammarBuilder>in verwendet.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt dem Satz von Alternativen Elemente hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Speech.Recognition.GrammarBuilder[] -&gt; unit" Usage="choices.Add alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Die <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekte, die diesem <see cref="T:System.Speech.Recognition.Choices" />-Objekt hinzugefügt werden sollen.</param>
        <summary>Fügt der Gruppe von Alternativen ein Array hinzu, das ein oder mehrere <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekte enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aufgrund der Unterstützung der impliziten Konvertierung <xref:System.Speech.Recognition.Choices>von <xref:System.Speech.Recognition.SemanticResultKey>-, <xref:System.Speech.Recognition.SemanticResultValue> -und <xref:System.Speech.Recognition.GrammarBuilder>-Objekten in können diese drei Klassen auch einer <xref:System.Speech.Recognition.Choices> -Instanz hinzugefügt werden.  
  
 Wenn `alternateChoices` ein leeres Array ist, aktualisiert diese Methode den Satz von Alternativen nicht.  
  
 Anwendungen können sowohl <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> als auch verwenden, um Alternativen zu <xref:System.Speech.Recognition.Choices> einem- <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> Objekt hinzuzufügen.  
  
 Diese Methode löst eine <xref:System.ArgumentNullException> aus `alternateChoices` , `null` wenn ist oder eines der Array Elemente `null`ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine sprach Erkennungs Grammatik für Ausdrücke wie "callanne on your Cell" und "calljames on Your Work Phone" erstellt. Im Beispiel werden beide über Ladungen der <xref:System.Speech.Recognition.Choices.Add%2A> -Methode verwendet, um die Grammatik zu erstellen.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="member this.Add : string[] -&gt; unit" Usage="choices.Add phrases" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Die Zeichenfolgen, die diesem <see cref="T:System.Speech.Recognition.Choices" />-Objekt hinzugefügt werden sollen.</param>
        <summary>Fügt der Gruppe von Alternativen ein Array hinzu, das ein oder mehrere <see cref="T:System.String" />-Objekte enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen können sowohl <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> als auch verwenden, um Alternativen zu <xref:System.Speech.Recognition.Choices> einem- <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> Objekt hinzuzufügen.  
  
 Wenn `phrases` ein leeres Array ist, aktualisiert diese Methode den Satz von Alternativen nicht.  
  
 Diese Methode löst eine <xref:System.ArgumentNullException> aus `phrases` , `null` wenn ist oder eines der Array Elemente `null`ist. Diese Methode löst eine <xref:System.ArgumentException> aus, wenn ein beliebiges Element im-Array die leere Zeichenfolge ("") ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine sprach Erkennungs Grammatik für Ausdrücke erstellt, die dem "callanne on your Cell" und "calljames on Your Work Phone" ähneln. Im Beispiel werden beide über Ladungen der <xref:System.Speech.Recognition.Choices.Add%2A> -Methode verwendet, um die Grammatik zu erstellen.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt aus diesem <see cref="T:System.Speech.Recognition.Choices" />-Objekt zurück.</summary>
        <returns>Ein <see cref="T:System.Speech.Recognition.GrammarBuilder" />, der diesem <see cref="T:System.Speech.Recognition.Choices" />-Objekt entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Speech.Recognition.GrammarBuilder> , der von dieser Methode zurückgegeben wird, entspricht einer der beiden folgenden.  
  
-   Aufrufen des <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> Konstruktors mit diesem-Objekt als-Parameter.  
  
-   Verwenden der impliziten oder expliziten Umwandlung dieses Objekts in ein <xref:System.Speech.Recognition.GrammarBuilder>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine sprach Erkennungs Grammatik zum Ändern der Hintergrundfarbe erstellt.  
  
```csharp  
  
private Grammar CreateColorChoice()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append(new Choices(new string[] {"Set", "Change"}));  
  gb.Append("background to");  
  gb.Append(colorChoice.ToGrammarBuilder());  
  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "modify background color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
  </Members>
</Type>

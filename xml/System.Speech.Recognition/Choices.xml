<Type Name="Choices" FullName="System.Speech.Recognition.Choices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4ceb6ba04ac6c11de88fb6f61708b6adbb682b36" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51890891" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Choices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Choices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Choices" />
  <TypeSignature Language="VB.NET" Value="Public Class Choices" />
  <TypeSignature Language="C++ CLI" Value="public ref class Choices" />
  <TypeSignature Language="F#" Value="type Choices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Satz von Alternativen in den Einschränkungen einer Spracherkennungsgrammatik dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Speech.Recognition.Choices> Objekt darstellt, eine Komponente eines Ausdrucks, die einen der folgenden Werte haben kann. Verwenden Sie diese Klasse beim Erstellen einer spracherkennungsgrammatik aus einem <xref:System.Speech.Recognition.GrammarBuilder> Objekt.  
  
 Z. B. eine <xref:System.Speech.Recognition.Choices> Objekt konnte die Komponente darstellen *ColorChoice* die Spalte "ändern Sie die Farbe, *ColorChoice*", wobei akzeptable Werte für *ColorChoice* sind "Rot" oder "Grün" oder "blue".  
  
> [!NOTE]
>  Verwenden einer <xref:System.Speech.Recognition.Choices> -Objekt als optionale Komponente in einem Ausdruck, erstellen Sie die <xref:System.Speech.Recognition.Choices> Objekt aus, und fügen sie eine <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> Objekt mit `minRepeat` und `maxRepeat` jeweils auf 0 und 1 festgelegt. Ausdrücke mit optionalen Komponenten können erkannt werden, und zwar unabhängig davon, ob die optionale Komponente gesprochen wird.  
  
 Die <xref:System.Speech.Recognition.Choices> Klasse dient die gleiche Funktion wie der `one-of` durch definiertes XML-Element der [Speech Recognition Grammar Specification (SRGS), Version 1.0](https://www.w3.org/TR/speech-grammar/) und ähnelt der <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> -Klasse in der <xref:System.Speech.Recognition.SrgsGrammar> Namespace.  
  
 Weitere Informationen zu der eine spracherkennungsgrammatik zu definieren, finden Sie unter [Spracherkennung](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) und ["grammarbuilder" Grammatiken erstellen](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für den Ausdruck, "Festlegen des Hintergrunds auf *ColorChoice*", wobei *ColorChoice* kann eine der definierten Farben. Die <xref:System.Speech.Recognition.GrammarBuilder> wird verwendet, um die Einschränkungen für die Grammatik zu definieren.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  colorChoice.Add(new string[] {"cyan", "yellow", "magenta"});  
  
  // Construct the phrase.  
  GrammarBuilder builder = new GrammarBuilder("Set background to");  
  builder.Append(colorChoice);  
  
  // Create a grammar for the phrase.  
  Grammar colorGrammar = new Grammar(builder);  
  colorGrammar.Name = "SetBackground";  
  
  return colorGrammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Speech Recognition-Grammatik-Spezifikation (SRGS)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.Choices" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kann eine <xref:System.Speech.Recognition.Choices> -Objekt mit einem Standard-Konstruktor (der ein leeres Objekt zurückgibt), aus einer Gruppe von <xref:System.String> Objekte oder aus <xref:System.Speech.Recognition.GrammarBuilder> Objekte.  
  
 Da die <xref:System.Speech.Recognition.GrammarBuilder> Objekt unterstützt die implizite Konvertierung von <xref:System.Speech.Recognition.SemanticResultValue> und <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices> aus einem Array dieser Objekte, die mithilfe einer Umwandlung konstruiert werden kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Speech.Recognition.Choices> Objekte zwei Listen mit alternativen zu erstellen.  
  
 Die erste <xref:System.Speech.Recognition.Choices> Objekt wird erstellt, aus einem Array von <xref:System.String> Objekte. Die andere <xref:System.Speech.Recognition.Choices> Objekt wird erstellt, aus einem Array von <xref:System.Speech.Recognition.GrammarBuilder> Objekte, die durch eine Umwandlung implizit konvertiert wurden.  
  
 Im Beispiel wird eine <xref:System.Speech.Recognition.GrammarBuilder> Objekt, das Zusammenstellen eines Ausdrucks, mit der <xref:System.Speech.Recognition.Choices> Objekte und zwei zusätzliche Zeichenfolgen, die verwendet werden können, für Spracherkennung Eingabe in Form von "Call [ContactlList] auf [PhoneType] Phone", z. B. "Aufruf Jane auf Handy".  
  
```  
public GrammarBuilder ChoicesContructor2 ()  
{  
    GrammarBuilder gb = new GrammarBuilder ();  
    Choices phoneType = new Choices (new string[] {"cell", "home", "work"});  
    Choices contactList = new Choices (new GrammarBuilder[] {(GrammarBuilder) "Mark", (GrammarBuilder) "Jane", (GrammarBuilder) "Frank"});  
    gb.Append ("Call");  
    gb.Append (contactList);  
    gb.Append ("on");  
    gb.Append (phoneType);  
    gb.Append ("phone");  
    return gb;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.Choices" />-Klasse, die einen leeren Satz von Alternativen enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor gibt einen gültigen ist, leeren Satz von alternativen zurück. Sie können mit einer der alternativen Hinzufügen der <xref:System.Speech.Recognition.Choices.Add%2A> Methoden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Speech.Recognition.Choices> und <xref:System.Speech.Recognition.GrammarBuilder> Objekte, um einen Ausdruck zu erstellen, die zur Erkennung von Spracheingabe wie z. B. "Call Anne auf ihr Zelle" und "Aufruf James auf seinem Telefon (geschäftlich)" verwendet werden kann. Im Beispiel wird die implizite Typumwandlungen aus dem <xref:System.Speech.Recognition.Choices> und <xref:System.String> zu <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Ein Array, das den Satz von Alternativen enthält.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.Choices" />-Klasse aus einem Array von einem oder mehreren <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede <xref:System.Speech.Recognition.GrammarBuilder> in `alternateChoices` definiert eine Alternative. Wenn `alternateChoices` ein leeres Array ist, wird der Konstruktor gibt einen leeren Satz von alternativen zurück. Sie können mit einer der alternativen Hinzufügen der <xref:System.Speech.Recognition.Choices.Add%2A> Methoden.  
  
 Der Konstruktor löst eine <xref:System.ArgumentNullException> beim `alternateChoices` ist `null` oder wenn eines der Elemente des Arrays sind `null`.  
  
 Da die <xref:System.Speech.Recognition.GrammarBuilder> -Klasse bietet Unterstützung für die implizite Konvertierung von <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultValue>, und <xref:System.Speech.Recognition.SemanticResultKey> Objekte <xref:System.Speech.Recognition.GrammarBuilder> Instanzen ordnungsgemäß mit Umwandlungen können diesen Konstruktor auch dienen zum Erstellen einer <xref:System.Speech.Recognition.Choices> ein Objekt aus einer Liste von eine beliebige Kombination dieser Objekte.  
  
   
  
## Examples  
 Im folgenden Beispiel wird `Choices` und <xref:System.Speech.Recognition.GrammarBuilder> Objekte zum Erstellen einer <xref:System.Speech.Recognition.Grammar> für formulierungen wie z. B. "Call Anne auf ihr Zelle" und "Aufruf James auf seinem Telefon (geschäftlich)". Im Beispiel wird die implizite Typumwandlungen aus dem `Choices` und <xref:System.String> zu <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : string[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices phrases" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Ein Array, das den Satz von Alternativen enthält.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.Choices" />-Klasse aus einem Array von einem oder mehreren <see cref="T:System.String" />-Objekten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede <xref:System.String> in `phrases` definiert eine Alternative. Die spracherkennungs-Engine können eines der Elemente in der Zeichenfolge Sie Spracheingabe übereinzustimmen. Wenn `phrases` ein leeres Array ist, wird der Konstruktor gibt einen leeren Satz von alternativen zurück. Sie können mit einer der alternativen Hinzufügen der <xref:System.Speech.Recognition.Choices.Add%2A> Methoden.  
  
 Der Konstruktor löst eine <xref:System.ArgumentNullException> beim `phrases` ist `null` oder eines der Elemente des Arrays sind `null`. Der Konstruktor löst eine <xref:System.ArgumentException> jedes Element im Array ist eine leere Zeichenfolge ("").  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Speech.Recognition.Choices> und <xref:System.Speech.Recognition.GrammarBuilder> Objekte zum Erstellen einer <xref:System.Speech.Recognition.Grammar> für die Ausdrücke wie "Aufruf Anne auf ihr Zelle" und "Aufruf James auf seinem Telefon (geschäftlich)". Im Beispiel wird die implizite Typumwandlungen aus dem `Choices` und <xref:System.String> zu <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt dem Satz von Alternativen Elemente hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Speech.Recognition.GrammarBuilder[] -&gt; unit" Usage="choices.Add alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Die <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekte, die diesem <see cref="T:System.Speech.Recognition.Choices" />-Objekt hinzugefügt werden sollen.</param>
        <summary>Fügt der Gruppe von Alternativen ein Array hinzu, das ein oder mehrere <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekte enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aufgrund der Unterstützung für die implizite Konvertierung von <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, und <xref:System.Speech.Recognition.SemanticResultValue> Objekte <xref:System.Speech.Recognition.GrammarBuilder>, können diese drei Klassen hinzugefügt werden, um eine <xref:System.Speech.Recognition.Choices> -Instanz.  
  
 Wenn `alternateChoices` ein leeres Array ist, wird diese Methode wird den Satz von alternativen nicht aktualisiert.  
  
 Anwendungen können sowohl <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> und <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> Alternativen zum Hinzufügen einer <xref:System.Speech.Recognition.Choices> Objekt.  
  
 Diese Methode löst eine <xref:System.ArgumentNullException> beim `alternateChoices` ist `null` oder eines der Elemente des Arrays sind `null`.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für formulierungen wie z. B. "Call Anne auf ihr Zelle" und "Aufruf James auf seinem Telefon (geschäftlich)". Im Beispiel wird verwendet, beide Überladungen der <xref:System.Speech.Recognition.Choices.Add%2A> Methode, um die Grammatik zu erstellen.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="member this.Add : string[] -&gt; unit" Usage="choices.Add phrases" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Die Zeichenfolgen, die diesem <see cref="T:System.Speech.Recognition.Choices" />-Objekt hinzugefügt werden sollen.</param>
        <summary>Fügt der Gruppe von Alternativen ein Array hinzu, das ein oder mehrere <see cref="T:System.String" />-Objekte enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen können sowohl <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> und <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> Alternativen zum Hinzufügen einer <xref:System.Speech.Recognition.Choices> Objekt.  
  
 Wenn `phrases` ein leeres Array ist, wird diese Methode aktualisiert nicht den Satz von alternativen.  
  
 Diese Methode löst eine <xref:System.ArgumentNullException> beim `phrases` ist `null` oder eines der Elemente des Arrays sind `null`. Diese Methode löst eine <xref:System.ArgumentException> jedes Element im Array ist die leere Zeichenfolge ("").  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik für Ausdrücke, die ähnlich wie "Aufruf Anne auf ihr Zelle" und "Aufruf James auf seinem Telefon (geschäftlich)". Im Beispiel wird verwendet, beide Überladungen der <xref:System.Speech.Recognition.Choices.Add%2A> Methode, um die Grammatik zu erstellen.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein <see cref="T:System.Speech.Recognition.GrammarBuilder" />-Objekt aus diesem <see cref="T:System.Speech.Recognition.Choices" />-Objekt zurück.</summary>
        <returns>Ein <see cref="T:System.Speech.Recognition.GrammarBuilder" />, der diesem <see cref="T:System.Speech.Recognition.Choices" />-Objekt entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Speech.Recognition.GrammarBuilder> zurückgegeben von dieser Methode ist äquivalent zu einer durch eine der folgenden.  
  
-   Aufrufen der <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> Konstruktor mit dem dieses Objekt als Parameter.  
  
-   Mithilfe der implizite oder explizite umwandeln dieses Objekts in eine <xref:System.Speech.Recognition.GrammarBuilder>.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine spracherkennungsgrammatik zum Ändern der Hintergrundfarbe.  
  
```csharp  
  
private Grammar CreateColorChoice()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append(new Choices(new string[] {"Set", "Change"}));  
  gb.Append("background to");  
  gb.Append(colorChoice.ToGrammarBuilder());  
  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "modify background color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
  </Members>
</Type>
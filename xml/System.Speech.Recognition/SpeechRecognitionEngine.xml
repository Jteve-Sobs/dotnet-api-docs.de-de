<Type Name="SpeechRecognitionEngine" FullName="System.Speech.Recognition.SpeechRecognitionEngine">
  <TypeSignature Language="C#" Value="public class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognitionEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognitionEngine&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognitionEngine : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="59c20-101">Stellt die Möglichkeit bereit, auf ein prozessinternes Spracherkennungsmodul zuzugreifen und dieses zu verwalten.</span><span class="sxs-lookup"><span data-stu-id="59c20-101">Provides the means to access and manage an in-process speech recognition engine.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-102">Sie können eine Instanz dieser Klasse für keines der installierten Spracherkennung erstellen.</span><span class="sxs-lookup"><span data-stu-id="59c20-102">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="59c20-103">Verwenden Sie zum Abrufen von Informationen über die Merkmale werden installiert die statische <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-103">To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="59c20-104">Diese Klasse ist für die Spracherkennung Recognition Module in-Process-Ausführung und ermöglicht die Steuerung über die verschiedenen Aspekte der Spracherkennung, wie folgt:</span><span class="sxs-lookup"><span data-stu-id="59c20-104">This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:</span></span>  
  
-   <span data-ttu-id="59c20-105">Um eine in-Process-Spracherkennung zu erstellen, verwenden Sie eines der <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="59c20-105">To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors.</span></span>  
  
-   <span data-ttu-id="59c20-106">Verwenden Sie zum Verwalten der Sprache Recognition Grammatiken der <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> Methoden, und die <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-106">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
-   <span data-ttu-id="59c20-107">Verwenden Sie zum Konfigurieren der Eingabe für die Erkennung der <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-107">To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method.</span></span>  
  
-   <span data-ttu-id="59c20-108">Um die Spracherkennung auszuführen, verwenden die <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-108">To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="59c20-109">Verwenden Sie zum Bearbeiten der Behandlung der Erkennung auf Ruhe oder unerwarteter Eingaben die <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="59c20-109">To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="59c20-110">Um die Anzahl der Stellvertreter die Erkennung gibt zu ändern, verwenden die <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-110">To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property.</span></span> <span data-ttu-id="59c20-111">Das Erkennungsmodul gibt Ergebnisse in einem <xref:System.Speech.Recognition.RecognitionResult> Objekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-111">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="59c20-112">Verwenden Sie zum Synchronisieren der Änderungen an die Erkennung der <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-112">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="59c20-113">Das Erkennungsmodul verwendet mehrere Threads, um Aufgaben auszuführen.</span><span class="sxs-lookup"><span data-stu-id="59c20-113">The recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="59c20-114">Verwenden Sie zum Emulieren der Eingabe für die Erkennung der <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-114">To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="59c20-115">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine> Objekt ist für die alleinige des Prozesses verwenden, die der Instanziierung des Objekts.</span><span class="sxs-lookup"><span data-stu-id="59c20-115">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object is for the sole use of the process that instantiated the object.</span></span> <span data-ttu-id="59c20-116">Im Gegensatz dazu, die <xref:System.Speech.Recognition.SpeechRecognizer> basiert auf eine einzelne Erkennung wie jede Anwendung, die sie verwenden möchte.</span><span class="sxs-lookup"><span data-stu-id="59c20-116">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59c20-117">Rufen Sie immer <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> , bevor Sie den letzten Verweis auf die von der Spracherkennung freigeben.</span><span class="sxs-lookup"><span data-stu-id="59c20-117">Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="59c20-118">Andernfalls werden die verwendeten Ressourcen werden nicht reserviert, bis der Garbage Collector des Erkennungsmodul-Objekts aufruft `Finalize` Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-119">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-119">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="59c20-120">Da in diesem Beispiel verwendet die `Multiple` Modus der <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> -Methode, er führt Recognition, bis Sie das Konsolenfenster schließen oder Beenden des Debuggens.</span><span class="sxs-lookup"><span data-stu-id="59c20-120">Because this example uses the `Multiple` mode of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method, it performs recognition until you close the console window or stop debugging.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59c20-121">Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="59c20-121">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-122">Für das Konstruieren einer <xref:System.Speech.Recognition.SpeechRecognitionEngine> -Instanz anhand einer der folgenden:</span><span class="sxs-lookup"><span data-stu-id="59c20-122">You can construct a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance from any of the following:</span></span>  
  
-   <span data-ttu-id="59c20-123">Die Standardeinstellung Spracherkennungsmoduls für das system</span><span class="sxs-lookup"><span data-stu-id="59c20-123">The default speech recognition engine for the system</span></span>  
  
-   <span data-ttu-id="59c20-124">Eine bestimmte Spracherkennungsmoduls an die von Ihnen anhand des Namens</span><span class="sxs-lookup"><span data-stu-id="59c20-124">A specific speech recognition engine that you specify by name</span></span>  
  
-   <span data-ttu-id="59c20-125">Die Standardeinstellung Spracherkennungsmoduls für ein Gebietsschema, die Sie angeben</span><span class="sxs-lookup"><span data-stu-id="59c20-125">The default speech recognition engine for a locale that you specify</span></span>  
  
-   <span data-ttu-id="59c20-126">Eine bestimmte Erkennungsmodul, die die Kriterien, die Sie angeben erfüllen, in einem <xref:System.Speech.Recognition.RecognizerInfo> Objekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-126">A specific recognition engine that meets the criteria that you specify in a <xref:System.Speech.Recognition.RecognizerInfo> object.</span></span>  
  
 <span data-ttu-id="59c20-127">Bevor die von der Spracherkennung ausführen kann, müssen Sie mindestens eine Sprache Recognition Grammatik laden und konfigurieren die Eingabe für die Erkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-127">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="59c20-128">Rufen Sie zum Laden einer Grammatik der <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-128">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="59c20-129">Um die Audioeingabe zu konfigurieren, verwenden Sie eine der folgenden Methoden:</span><span class="sxs-lookup"><span data-stu-id="59c20-129">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59c20-130">Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Klasse mithilfe des angegebenen Standardspracherkennungsmoduls für das System.</span><span class="sxs-lookup"><span data-stu-id="59c20-130">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-131">Bevor die von der Spracherkennung Spracherkennung beginnen kann, müssen Sie mindestens eine Anerkennung Grammatik laden und konfigurieren die Eingabe für die Erkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-131">Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="59c20-132">Rufen Sie zum Laden einer Grammatik der <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-132">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="59c20-133">Um die Audioeingabe zu konfigurieren, verwenden Sie eine der folgenden Methoden:</span><span class="sxs-lookup"><span data-stu-id="59c20-133">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="59c20-134">Das Gebietsschema, das die Spracherkennung unterstützen muss.</span><span class="sxs-lookup"><span data-stu-id="59c20-134">The locale that the speech recognizer must support.</span></span></param>
        <summary><span data-ttu-id="59c20-135">Initialisiert mithilfe des angegebenen Standardspracherkennungsmoduls für ein angegebenes Gebietsschema eine neue Instanz der <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="59c20-135">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for a specified locale.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-136">Übernehmen alle gültigen Sprache / Land-Codes, Microsoft Windows und die System.Speech-API.</span><span class="sxs-lookup"><span data-stu-id="59c20-136">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="59c20-137">Mit der Sprache, die im angegebenen Spracherkennung Ausführen der `CultureInfo` Argument, ein Spracherkennungsmodul, die Sprache / Land-Code installiert werden muss unterstützt.</span><span class="sxs-lookup"><span data-stu-id="59c20-137">To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="59c20-138">Die Spracherkennungsmoduls, die mit den im Lieferumfang von Microsoft Windows 7 arbeiten Sie mit der folgenden Sprache / Land-Codes.</span><span class="sxs-lookup"><span data-stu-id="59c20-138">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="59c20-139">en-GB.</span><span class="sxs-lookup"><span data-stu-id="59c20-139">en-GB.</span></span> <span data-ttu-id="59c20-140">Englisch (Großbritannien)</span><span class="sxs-lookup"><span data-stu-id="59c20-140">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="59c20-141">En-US.</span><span class="sxs-lookup"><span data-stu-id="59c20-141">en-US.</span></span> <span data-ttu-id="59c20-142">Englisch (Vereinigte Staaten)</span><span class="sxs-lookup"><span data-stu-id="59c20-142">English (United States)</span></span>  
  
-   <span data-ttu-id="59c20-143">de-DE.</span><span class="sxs-lookup"><span data-stu-id="59c20-143">de-DE.</span></span> <span data-ttu-id="59c20-144">Deutsch (Deutschland)</span><span class="sxs-lookup"><span data-stu-id="59c20-144">German (Germany)</span></span>  
  
-   <span data-ttu-id="59c20-145">es-ES.</span><span class="sxs-lookup"><span data-stu-id="59c20-145">es-ES.</span></span> <span data-ttu-id="59c20-146">Spanisch (Spanien)</span><span class="sxs-lookup"><span data-stu-id="59c20-146">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="59c20-147">fr-FR.</span><span class="sxs-lookup"><span data-stu-id="59c20-147">fr-FR.</span></span> <span data-ttu-id="59c20-148">Französisch (Frankreich)</span><span class="sxs-lookup"><span data-stu-id="59c20-148">French (France)</span></span>  
  
-   <span data-ttu-id="59c20-149">ja-JP.</span><span class="sxs-lookup"><span data-stu-id="59c20-149">ja-JP.</span></span> <span data-ttu-id="59c20-150">Japanisch (Japan)</span><span class="sxs-lookup"><span data-stu-id="59c20-150">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="59c20-151">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="59c20-151">zh-CN.</span></span> <span data-ttu-id="59c20-152">Chinesisch (China)</span><span class="sxs-lookup"><span data-stu-id="59c20-152">Chinese (China)</span></span>  
  
-   <span data-ttu-id="59c20-153">Zh-TW.</span><span class="sxs-lookup"><span data-stu-id="59c20-153">zh-TW.</span></span> <span data-ttu-id="59c20-154">Chinesisch (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="59c20-154">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="59c20-155">Zwei Buchstaben bestehende Sprache codes, z. B. "En", "fr", oder ""es endenden"sind ebenfalls zulässig.</span><span class="sxs-lookup"><span data-stu-id="59c20-155">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
 <span data-ttu-id="59c20-156">Bevor die von der Spracherkennung ausführen kann, müssen Sie mindestens eine Sprache Recognition Grammatik laden und konfigurieren die Eingabe für die Erkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-156">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="59c20-157">Rufen Sie zum Laden einer Grammatik der <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-157">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="59c20-158">Um die Audioeingabe zu konfigurieren, verwenden Sie eine der folgenden Methoden:</span><span class="sxs-lookup"><span data-stu-id="59c20-158">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-159">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die demonstriert den grundlegenden Spracherkennung und initialisiert ein von der Spracherkennung für das Gebietsschema En-US.</span><span class="sxs-lookup"><span data-stu-id="59c20-159">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer for the en-US locale.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59c20-160">Keine der installierten Spracherkennungen unterstützen das angegebene Gebietsschema, oder <paramref name="culture" /> ist die invariante Kultur.</span><span class="sxs-lookup"><span data-stu-id="59c20-160">None of the installed speech recognizers support the specified locale, or <paramref name="culture" /> is the invariant culture.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-161"><paramref name="Culture" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-161"><paramref name="Culture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Speech.Recognition.RecognizerInfo recognizerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.RecognizerInfo recognizerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Speech::Recognition::RecognizerInfo ^ recognizerInfo);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerInfo" Type="System.Speech.Recognition.RecognizerInfo" />
      </Parameters>
      <Docs>
        <param name="recognizerInfo"><span data-ttu-id="59c20-162">Die Informationen für die angegebene Spracherkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-162">The information for the specific speech recognizer.</span></span></param>
        <summary><span data-ttu-id="59c20-163">Initialisiert eine neue Instanz <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> mithilfe der Informationen in einem <see cref="T:System.Speech.Recognition.RecognizerInfo" />-Objekt, um die zu verwendende Erkennung anzugeben.</span><span class="sxs-lookup"><span data-stu-id="59c20-163">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> using the information in a <see cref="T:System.Speech.Recognition.RecognizerInfo" /> object to specify the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-164">Sie können eine Instanz dieser Klasse für keines der installierten Spracherkennung erstellen.</span><span class="sxs-lookup"><span data-stu-id="59c20-164">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="59c20-165">Verwenden Sie zum Abrufen von Informationen darüber, welche Merkmale werden installiert die <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-165">To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="59c20-166">Bevor die von der Spracherkennung ausführen kann, müssen Sie mindestens eine Sprache Recognition Grammatik laden und konfigurieren die Eingabe für die Erkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-166">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="59c20-167">Rufen Sie zum Laden einer Grammatik der <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-167">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="59c20-168">Um die Audioeingabe zu konfigurieren, verwenden Sie eine der folgenden Methoden:</span><span class="sxs-lookup"><span data-stu-id="59c20-168">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-169">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die demonstriert den grundlegenden Spracherkennung und initialisiert ein von der Spracherkennung die englische Sprache unterstützt.</span><span class="sxs-lookup"><span data-stu-id="59c20-169">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer that supports the English language.</span></span>  
  
```csharp  
 using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (string recognizerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string recognizerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recognizerId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::String ^ recognizerId);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recognizerId"><span data-ttu-id="59c20-170">Der Tokenname, den die Spracherkennung verwenden soll.</span><span class="sxs-lookup"><span data-stu-id="59c20-170">The token name of the speech recognizer to use.</span></span></param>
        <summary><span data-ttu-id="59c20-171">Initialisiert eine neue Instanz der <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Klasse mit einem Zeichenfolgenparameter, der den Namen der zu verwendenden Erkennung angibt.</span><span class="sxs-lookup"><span data-stu-id="59c20-171">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class with a string parameter that specifies the name of the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-172">Die token-Namen der Erkennung ist der Wert des der <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> Eigenschaft von der <xref:System.Speech.Recognition.RecognizerInfo> zurückgegebenes Objekt die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> Eigenschaft der Erkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-172">The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer.</span></span> <span data-ttu-id="59c20-173">Um eine Auflistung aller installierten Prüfer abzurufen, verwenden Sie die statische <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-173">To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="59c20-174">Bevor die von der Spracherkennung ausführen kann, müssen Sie mindestens eine Sprache Recognition Grammatik laden und konfigurieren die Eingabe für die Erkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-174">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="59c20-175">Rufen Sie zum Laden einer Grammatik der <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-175">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="59c20-176">Um die Audioeingabe zu konfigurieren, verwenden Sie eine der folgenden Methoden:</span><span class="sxs-lookup"><span data-stu-id="59c20-176">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-177">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende Spracherkennung veranschaulicht, und erstellt eine Instanz von der Spracherkennung Erkennungsmodul 8.0 für Windows (Englisch - USA).</span><span class="sxs-lookup"><span data-stu-id="59c20-177">The following example shows part of a console application that demonstrates basic speech recognition, and creates an instance of the Speech Recognizer 8.0 for Windows (English - US).</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an instance of the Microsoft Speech Recognizer 8.0 for  
      // Windows (English - US).  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine("MS-1033-80-DESK"))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized += new EventHandler(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="59c20-178">Keine Spracherkennung mit diesem Tokennamen ist installiert, oder <paramref name="recognizerId" /> ist die leere Zeichenfolge ("").</span><span class="sxs-lookup"><span data-stu-id="59c20-178">No speech recognizer with that token name is installed, or <paramref name="recognizerId" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-179"><paramref name="recognizerId" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-179"><paramref name="recognizerId" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-180">Ruft das Audioformat ab, das von <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> empfangen wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-180">Gets the format of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="59c20-181">Das Audioformat bei der Eingabe in die <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz oder <see langword="null" />, wenn die Eingabe nicht für die NULL-Eingabe konfiguriert ist oder auf diese gesetzt wurde.</span><span class="sxs-lookup"><span data-stu-id="59c20-181">The format of audio at the input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance, or <see langword="null" /> if the input is not configured or set to the null input.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-182">Um die Audioeingabe zu konfigurieren, verwenden Sie eine der folgenden Methoden:</span><span class="sxs-lookup"><span data-stu-id="59c20-182">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-183">Im folgenden Beispiel wird <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> abzurufen und Audioformat Daten anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="59c20-183">The example below uses <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> to obtain and display audio format data.</span></span>  
  
```  
static void DisplayAudioDeviceFormat(Label label, SpeechRecognitionEngine recognitionEngine)   
{  
  
  if (recognitionEngine != null && label != null)   
  {  
    label.Text = String.Format("Encoding Format:         {0}\n" +  
          "AverageBytesPerSecond    {1}\n" +  
          "BitsPerSample            {2}\n" +  
          "BlockAlign               {3}\n" +  
          "ChannelCount             {4}\n" +  
          "SamplesPerSecond         {5}",  
          recognitionEngine.AudioFormat.EncodingFormat.ToString(),  
          recognitionEngine.AudioFormat.AverageBytesPerSecond,  
          recognitionEngine.AudioFormat.BitsPerSample,  
          recognitionEngine.AudioFormat.BlockAlign,  
          recognitionEngine.AudioFormat.ChannelCount,  
          recognitionEngine.AudioFormat.SamplesPerSecond);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-184">Ruft den Level des Audiosignals ab, die von der <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> empfangen wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-184">Gets the level of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="59c20-185">Der Audiopegel der Eingabe an die Spracherkennung, von 0 bis 100.</span><span class="sxs-lookup"><span data-stu-id="59c20-185">The audio level of the input to the speech recognizer, from 0 through 100.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-186">Der Wert 0 stellt Ruhe und 100 steht für die maximale Eingabe Volume.</span><span class="sxs-lookup"><span data-stu-id="59c20-186">The value 0 represents silence, and 100 represents the maximum input volume.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-187">Wird ausgelöst, wenn das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> die Ebene seiner Audioeingabe meldet.</span><span class="sxs-lookup"><span data-stu-id="59c20-187">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> reports the level of its audio input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-188">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine> löst dieses Ereignis mehrere Male pro Sekunde.</span><span class="sxs-lookup"><span data-stu-id="59c20-188">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second.</span></span> <span data-ttu-id="59c20-189">Die Häufigkeit, mit der das Ereignis ausgelöst wird, hängt von dem Computer, auf dem die Anwendung ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-189">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="59c20-190">Verwenden Sie zum Abrufen der audio Ebene zum Zeitpunkt des Ereignisses die <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> Eigenschaft der zugeordneten <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="59c20-190">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="59c20-191">Um die aktuelle audio Ebene der Eingabe für die Erkennung zu erhalten, verwenden Sie der Erkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-191">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="59c20-192">Beim Erstellen eines <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated>-Delegaten geben Sie die Methode für die Ereignisbehandlung an.</span><span class="sxs-lookup"><span data-stu-id="59c20-192">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="59c20-193">Um dem Ereignishandler das Ereignis zuzuordnen, fügen Sie dem Ereignis eine Instanz des Delegaten hinzu.</span><span class="sxs-lookup"><span data-stu-id="59c20-193">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="59c20-194">Der Ereignishandler wird bei jedem Eintreten des Ereignisses aufgerufen, sofern der Delegat nicht entfernt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-194">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="59c20-195">Weitere Informationen über Delegaten für Ereignishandler finden Sie unter [Ereignissen und Delegaten](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="59c20-195">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-196">Das folgende Beispiel fügt einen Handler für das <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> Ereignis, um eine <xref:System.Speech.Recognition.SpeechRecognitionEngine> Objekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-196">The following example adds a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> event to a <xref:System.Speech.Recognition.SpeechRecognitionEngine> object.</span></span> <span data-ttu-id="59c20-197">Der Handler gibt die neue audio Ebene in der Konsole aus.</span><span class="sxs-lookup"><span data-stu-id="59c20-197">The handler outputs the new audio level to the console.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the SpeechRecognitionEngine object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
   new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-198">Ruft die aktuelle Position im Audiostream ab, die durch das Gerät generiert wird, das die <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> mit Eingaben versorgt.</span><span class="sxs-lookup"><span data-stu-id="59c20-198">Gets the current location in the audio stream being generated by the device that is providing input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="59c20-199">Die aktuelle Position im Audiostream, der durch das Eingabegerät generiert wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-199">The current location in the audio stream being generated by the input device.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-200">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> -Eigenschaft verweist auf das Eingabegerät Position in der generierten Audiostream.</span><span class="sxs-lookup"><span data-stu-id="59c20-200">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="59c20-201">Im Gegensatz dazu, die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> Eigenschaft verweist auf die Erkennung Position innerhalb der Audioeingabe.</span><span class="sxs-lookup"><span data-stu-id="59c20-201">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input.</span></span> <span data-ttu-id="59c20-202">Diese Positionen können unterschiedlich sein.</span><span class="sxs-lookup"><span data-stu-id="59c20-202">These positions can be different.</span></span> <span data-ttu-id="59c20-203">Z. B. wenn die Erkennung erhalten hat Eingabe nicht für die It hat noch erzeugt ein Erkennungsergebnis wird der Wert der die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> -Eigenschaft muss kleiner als der Wert von der <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-203">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-204">Im folgenden Beispiel verwendet die in-Process-Spracherkennung diktieren Grammatik Spracheingabe entsprechend an.</span><span class="sxs-lookup"><span data-stu-id="59c20-204">In the following example, the in-process speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="59c20-205">Einen Handler für das <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> Ereignis in die Konsole schreibt die <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> Wenn erkennt die von der Spracherkennung Sprache bei der Eingabe.</span><span class="sxs-lookup"><span data-stu-id="59c20-205">A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine for US English.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create a grammar for finding services in different cities.  
        Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
        Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
        GrammarBuilder findServices = new GrammarBuilder("Find");  
        findServices.Append(services);  
        findServices.Append("near");  
        findServices.Append(cities);  
  
        // Create a Grammar object from the GrammarBuilder and load it to the recognizer.  
        Grammar servicesGrammar = new Grammar(findServices);  
        recognizer.LoadGrammarAsync(servicesGrammar);  
  
        // Add handlers for events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position at the event: " + e.AudioPosition);  
      Console.WriteLine("  Current audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Current recognizer audio position: " +   
        recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("\nSpeech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-206">Wird ausgelöst, wenn das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> ein Problem im Audiosignal erkennt.</span><span class="sxs-lookup"><span data-stu-id="59c20-206">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects a problem in the audio signal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-207">Verwenden Sie zum Abrufen, welches Problem ist aufgetreten, der <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> Eigenschaft der zugeordneten <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="59c20-207">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="59c20-208">Beim Erstellen eines <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred>-Delegaten geben Sie die Methode für die Ereignisbehandlung an.</span><span class="sxs-lookup"><span data-stu-id="59c20-208">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="59c20-209">Um dem Ereignishandler das Ereignis zuzuordnen, fügen Sie dem Ereignis eine Instanz des Delegaten hinzu.</span><span class="sxs-lookup"><span data-stu-id="59c20-209">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="59c20-210">Der Ereignishandler wird bei jedem Eintreten des Ereignisses aufgerufen, sofern der Delegat nicht entfernt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-210">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="59c20-211">Weitere Informationen über Delegaten für Ereignishandler finden Sie unter [Ereignissen und Delegaten](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="59c20-211">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-212">Das folgende Beispiel definiert einen Ereignishandler, die sammelt Informationen über ein <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-212">The following example defines an event handler that gathers information about an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> event.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-213">Ruft den Status des von <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> empfangenen Audiosignals ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-213">Gets the state of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="59c20-214">Der Zustand der Audioeingabe für die Spracherkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-214">The state of the audio input to the speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-215">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> Eigenschaft darstellt, das audio Zustand mit einem Mitglied der <xref:System.Speech.Recognition.AudioState> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="59c20-215">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-216">Wird ausgelöst, wenn sich der Zustand im Audio, das von <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> empfangen wird, ändert.</span><span class="sxs-lookup"><span data-stu-id="59c20-216">Raised when the state changes in the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-217">Verwenden Sie zum Abrufen des audio Zustands zum Zeitpunkt des Ereignisses die <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> Eigenschaft der zugeordneten <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="59c20-217">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="59c20-218">Um den aktuellen audio-Status, der die Eingabe für die Erkennung zu erhalten, verwenden Sie der Erkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-218">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property.</span></span> <span data-ttu-id="59c20-219">Weitere Informationen zum audio-Status finden Sie unter der <xref:System.Speech.Recognition.AudioState> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="59c20-219">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="59c20-220">Beim Erstellen eines <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>-Delegaten geben Sie die Methode für die Ereignisbehandlung an.</span><span class="sxs-lookup"><span data-stu-id="59c20-220">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="59c20-221">Um dem Ereignishandler das Ereignis zuzuordnen, fügen Sie dem Ereignis eine Instanz des Delegaten hinzu.</span><span class="sxs-lookup"><span data-stu-id="59c20-221">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="59c20-222">Der Ereignishandler wird bei jedem Eintreten des Ereignisses aufgerufen, sofern der Delegat nicht entfernt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-222">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="59c20-223">Weitere Informationen über Delegaten für Ereignishandler finden Sie unter [Ereignissen und Delegaten](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="59c20-223">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-224">Im folgenden Beispiel wird einen Handler für das <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> Ereignis, um die Erkennung Schreiben des neuen <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> an die Konsole jedes Mal, wenn sie Änderungen, die mithilfe eines Members der <xref:System.Speech.Recognition.AudioState> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="59c20-224">The following example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> to the console each time it changes, using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder("On this farm he had a");  
        farm.Append(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="BabbleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan BabbleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BabbleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BabbleTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BabbleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-225">Ruft das Zeitintervall ab oder legt dieses fest, während dessen eine <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> Eingaben akzeptiert, welche nur Hintergrundgeräusche enthalten, bevor die Erkennung abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-225">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only background noise, before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="59c20-226">Die Dauer des Zeitintervalls.</span><span class="sxs-lookup"><span data-stu-id="59c20-226">The duration of the time interval.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-227">Jede von der Spracherkennung verfügt über einen Algorithmus, um die Unterscheidung zwischen Ruhe und Sprache.</span><span class="sxs-lookup"><span data-stu-id="59c20-227">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="59c20-228">Das Erkennungsmodul klassifiziert Hintergrundgeräuschen alle Ruhe-Eingabedatei, die die erste Regel aller der Erkennung nicht übereinstimmen geladen und der Sprache Recognition Grammatiken aktiviert.</span><span class="sxs-lookup"><span data-stu-id="59c20-228">The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="59c20-229">Wenn die Erkennung nur Hintergrundgeräuschen und Ruhe innerhalb des Timeoutintervalls Babble empfängt, schließt die Erkennung dieser Erkennungsvorgang ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-229">If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="59c20-230">Für asynchrone Erkennungsvorgänge, löst die Erkennung der <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> -Ereignis, in dem die <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> Eigenschaft ist `true`, und die <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> Eigenschaft ist `null`.</span><span class="sxs-lookup"><span data-stu-id="59c20-230">For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="59c20-231">Synchrone Erkennungsvorgänge Emulation und die Erkennung gibt `null`, anstatt eine gültige <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="59c20-231">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="59c20-232">Wenn das Timeout für die Babble auf 0 festgelegt ist, führt die Erkennung keine Babble Timeout-Überprüfung aus.</span><span class="sxs-lookup"><span data-stu-id="59c20-232">If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check.</span></span> <span data-ttu-id="59c20-233">Das Timeoutintervall kann es sich um einen nicht negativen Wert annehmen.</span><span class="sxs-lookup"><span data-stu-id="59c20-233">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="59c20-234">Der Standardwert beträgt 0 Sekunden.</span><span class="sxs-lookup"><span data-stu-id="59c20-234">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-235">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende Spracherkennung veranschaulicht, der festlegt der <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> und <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> Eigenschaften einer <xref:System.Speech.Recognition.SpeechRecognitionEngine> vor dem Initiieren der Spracherkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-235">The following example shows part of a console application that demonstrates basic speech recognition that sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="59c20-236">Handler für die Spracherkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> und <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> Ereignisse Ausgabe Ereignisinformationen in die Konsole zur Veranschaulichung der Funktion wie die <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> Eigenschaften eine <xref:System.Speech.Recognition.SpeechRecognitionEngine> auf Recognition Vorgänge auswirken.</span><span class="sxs-lookup"><span data-stu-id="59c20-236">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59c20-237">Diese Eigenschaft wird auf einen Wert kleiner als 0 Sekunden festgelegt.</span><span class="sxs-lookup"><span data-stu-id="59c20-237">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59c20-238">Gibt das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Objekt frei.</span><span class="sxs-lookup"><span data-stu-id="59c20-238">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59c20-239">Gibt das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Objekt frei.</span><span class="sxs-lookup"><span data-stu-id="59c20-239">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="59c20-240"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="59c20-240"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="59c20-241">Verwirft das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Objekt und gibt Ressourcen frei, die während der Sitzung verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="59c20-241">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object and releases resources used during the session.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59c20-242">Emuliert die Eingabe für die Spracherkennung. Dabei wird Text statt Audio für die synchrone Spracherkennung verwendet.</span><span class="sxs-lookup"><span data-stu-id="59c20-242">Emulates input to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-243">Diese Methoden der Audioeingabe System zu umgehen, und geben Sie Text an, um die Erkennung als <xref:System.String> Objekte oder als ein Array von <xref:System.Speech.Recognition.RecognizedWordUnit> Objekte.</span><span class="sxs-lookup"><span data-stu-id="59c20-243">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="59c20-244">Dies kann hilfreich sein, wenn Sie testen oder Debuggen einer Anwendung oder Grammatik.</span><span class="sxs-lookup"><span data-stu-id="59c20-244">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="59c20-245">Sie können z. B. Emulation verwenden, um zu bestimmen, ob ein Wort in einem Grammatik ist und welche Semantik zurückgegeben werden, wenn das Wort erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-245">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="59c20-246">Verwenden der <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> Methode Audioeingabe an die Spracherkennungsmoduls während Emulation Vorgänge deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="59c20-246">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="59c20-247">Die Spracherkennung Erkennungsmodul löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignisse wie bei der Erkennungsvorgang nicht emuliert wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-247">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="59c20-248">Das Erkennungsmodul neue Zeilen und zusätzlichen Leerraum ignoriert und Interpunktion als literal Eingabe behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-248">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59c20-249">Die <xref:System.Speech.Recognition.RecognitionResult> Objekt, die von der Spracherkennung generiert wurde als Antwort auf "emuliert" Eingabe hat den Wert der `null` für seine <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-249">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="59c20-250">Zum Emulieren der asynchronen Recognition verwenden die <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-250">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="59c20-251">Die Eingabe für den Erkennungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-251">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="59c20-252">Emuliert die Eingabe eines Ausdrucks für die Spracherkennung. Dabei wird Text statt Audio für die synchrone Spracherkennung verwendet.</span><span class="sxs-lookup"><span data-stu-id="59c20-252">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <returns><span data-ttu-id="59c20-253">Das Ergebnis für den Erkennungsvorgang oder <see langword="null" />, wenn der Vorgang nicht erfolgreich war oder die Erkennung nicht aktiviert ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-253">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-254">Die Spracherkennung Erkennungsmodul löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignisse wie bei der Erkennungsvorgang nicht emuliert wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-254">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="59c20-255">Die Merkmale, die mit Vista und Windows 7 ausgeliefert Groß-/Kleinschreibung ignorieren und Breite Zeichen, beim Anwenden der Grammatikregeln für den auf der input-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="59c20-255">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="59c20-256">Weitere Informationen über diese Art von Vergleich finden Sie unter der <xref:System.Globalization.CompareOptions> Enumerationswerte <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> und <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="59c20-256">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="59c20-257">Der Prüfer ist außerdem neue Zeilen und zusätzlichen Leerraum zu ignorieren und Interpunktion als literal Eingabe behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-257">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-258">Im folgenden Codebeispiel ist Teil einer Konsolenanwendung, die "emuliert" Eingabe, die zugehörigen Erkennungsergebnisse und die zugehörigen Ereignisse ausgelöst, die für die von der Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-258">The code example below is part of a console application that demonstrates emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="59c20-259">Im Beispiel wird die folgende Ausgabe generiert.</span><span class="sxs-lookup"><span data-stu-id="59c20-259">The example generates the following output.</span></span>  
  
```  
TestRecognize("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
...Recognition result text = Smith  
  
TestRecognize("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
...Recognition result text = Jones  
  
TestRecognize("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
...No recognition result.  
  
TestRecognize("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
...Recognition result text = mister Smith  
  
press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace Sre_EmulateRecognize  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Disable audio input to the recognizer.  
        recognizer.SetInputToNull();  
  
        // Add handlers for events raised by the EmulateRecognize method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
  
        // Start four synchronous emulated recognition operations.  
        TestRecognize(recognizer, "Smith");  
        TestRecognize(recognizer, "Jones");  
        TestRecognize(recognizer, "Mister");  
        TestRecognize(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for synchronous recognition.  
    private static void TestRecognize(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      Console.WriteLine("TestRecognize(\"{0}\")...", input);  
      RecognitionResult result =  
        recognizer.EmulateRecognize(input,CompareOptions.IgnoreCase);  
      if (result != null)  
      {  
        Console.WriteLine("...Recognition result text = {0}",  
          result.Text ?? "<null>");  
      }  
      else  
      {  
        Console.WriteLine("...No recognition result.");  
      }  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    // Handle events.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59c20-260">Die Erkennung hat keine geladenen Spracherkennungsgrammatiken.</span><span class="sxs-lookup"><span data-stu-id="59c20-260">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-261"><paramref name="inputText" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-261"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="59c20-262"><paramref name="inputText" /> ist die leere Zeichenfolge ("").</span><span class="sxs-lookup"><span data-stu-id="59c20-262"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="59c20-263">Ein Array von Worteinheiten, das die Eingabe für den Erkennungsvorgang enthält.</span><span class="sxs-lookup"><span data-stu-id="59c20-263">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="59c20-264">Eine bitweise Kombination der Enumerationswerte, die den Typ des Vergleichs beschreiben, der für den emulierten Erkennungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-264">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="59c20-265">Emuliert die Eingabe bestimmter Wörter für die Spracherkennung. Dabei wird Text statt Audio für die synchrone Spracherkennung verwendet und festgelegt, wie die Erkennung Unicode-Vergleich zwischen den Wörtern und den geladenen Spracherkennungsgrammatiken behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-265">Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="59c20-266">Das Ergebnis für den Erkennungsvorgang oder <see langword="null" />, wenn der Vorgang nicht erfolgreich war oder die Erkennung nicht aktiviert ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-266">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-267">Die Spracherkennung Erkennungsmodul löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignisse wie bei der Erkennungsvorgang nicht emuliert wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-267">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="59c20-268">Das Erkennungsmodul verwendet `compareOptions` Wenn der input-Ausdruck als Grammatikregeln anwendet.</span><span class="sxs-lookup"><span data-stu-id="59c20-268">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="59c20-269">Die Merkmale, die mit Vista und Windows 7 ausgeliefert Groß-/Kleinschreibung ignorieren, wenn die <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> oder <xref:System.Globalization.CompareOptions.IgnoreCase> Wert vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-269">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="59c20-270">Das Erkennungsmodul immer die Zeichenbreite ignoriert und nie vom Typ Kana ignoriert.</span><span class="sxs-lookup"><span data-stu-id="59c20-270">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="59c20-271">Das Erkennungsmodul auch neue Zeilen und zusätzliche Leerzeichen werden ignoriert und Interpunktion als literal Eingabe behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-271">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="59c20-272">Weitere Informationen zu der Zeichenbreite und Kanatyp, finden Sie unter der <xref:System.Globalization.CompareOptions> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="59c20-272">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59c20-273">Die Erkennung hat keine geladenen Spracherkennungsgrammatiken.</span><span class="sxs-lookup"><span data-stu-id="59c20-273">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-274"><paramref name="wordUnits" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-274"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="59c20-275"><paramref name="wordUnits" /> enthält mindestens ein <see langword="null" />-Element.</span><span class="sxs-lookup"><span data-stu-id="59c20-275"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="59c20-276"><paramref name="compareOptions" /> enthält das Flag <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> oder <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-276"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="59c20-277">Der Eingabebegriff für den Erkennungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-277">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="59c20-278">Eine bitweise Kombination der Enumerationswerte, die den Typ des Vergleichs beschreiben, der für den emulierten Erkennungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-278">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="59c20-279">Emuliert die Eingabe eines Ausdrucks für die Spracherkennung. Dabei wird Text statt Audio für die synchrone Spracherkennung verwendet und festgelegt, wie die Erkennung Unicode-Vergleich zwischen dem Ausdruck und den geladenen Spracherkennungsgrammatiken behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-279">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="59c20-280">Das Ergebnis für den Erkennungsvorgang oder <see langword="null" />, wenn der Vorgang nicht erfolgreich war oder die Erkennung nicht aktiviert ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-280">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-281">Die Spracherkennung Erkennungsmodul löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignisse wie bei der Erkennungsvorgang nicht emuliert wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-281">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="59c20-282">Das Erkennungsmodul verwendet `compareOptions` Wenn der input-Ausdruck als Grammatikregeln anwendet.</span><span class="sxs-lookup"><span data-stu-id="59c20-282">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="59c20-283">Die Merkmale, die mit Vista und Windows 7 ausgeliefert Groß-/Kleinschreibung ignorieren, wenn die <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> oder <xref:System.Globalization.CompareOptions.IgnoreCase> Wert vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-283">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="59c20-284">Das Erkennungsmodul immer die Zeichenbreite ignoriert und nie vom Typ Kana ignoriert.</span><span class="sxs-lookup"><span data-stu-id="59c20-284">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="59c20-285">Das Erkennungsmodul auch neue Zeilen und zusätzliche Leerzeichen werden ignoriert und Interpunktion als literal Eingabe behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-285">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="59c20-286">Weitere Informationen zu der Zeichenbreite und Kanatyp, finden Sie unter der <xref:System.Globalization.CompareOptions> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="59c20-286">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59c20-287">Die Erkennung hat keine geladenen Spracherkennungsgrammatiken.</span><span class="sxs-lookup"><span data-stu-id="59c20-287">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-288"><paramref name="inputText" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-288"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="59c20-289"><paramref name="inputText" /> ist die leere Zeichenfolge ("").</span><span class="sxs-lookup"><span data-stu-id="59c20-289"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="59c20-290"><paramref name="compareOptions" /> enthält das Flag <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> oder <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-290"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59c20-291">Emuliert die Eingabe für die Spracherkennung. Dabei wird Text statt Audio für die asynchrone Spracherkennung verwendet.</span><span class="sxs-lookup"><span data-stu-id="59c20-291">Emulates input to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-292">Diese Methoden der Audioeingabe System zu umgehen, und geben Sie Text an, um die Erkennung als <xref:System.String> Objekte oder als ein Array von <xref:System.Speech.Recognition.RecognizedWordUnit> Objekte.</span><span class="sxs-lookup"><span data-stu-id="59c20-292">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="59c20-293">Dies kann hilfreich sein, wenn Sie testen oder Debuggen einer Anwendung oder Grammatik.</span><span class="sxs-lookup"><span data-stu-id="59c20-293">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="59c20-294">Sie können z. B. Emulation verwenden, um zu bestimmen, ob ein Wort in einem Grammatik ist und welche Semantik zurückgegeben werden, wenn das Wort erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-294">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="59c20-295">Verwenden der <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> Methode Audioeingabe an die Spracherkennungsmoduls während Emulation Vorgänge deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="59c20-295">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="59c20-296">Die Spracherkennung Erkennungsmodul löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignisse wie bei der Erkennungsvorgang nicht emuliert wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-296">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="59c20-297">Wenn die Erkennung der asynchronen Recognition-Vorgang abgeschlossen ist, löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-297">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="59c20-298">Das Erkennungsmodul neue Zeilen und zusätzlichen Leerraum ignoriert und Interpunktion als literal Eingabe behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-298">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59c20-299">Die <xref:System.Speech.Recognition.RecognitionResult> Objekt, die von der Spracherkennung generiert wurde als Antwort auf "emuliert" Eingabe hat den Wert der `null` für seine <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-299">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="59c20-300">Zum emulieren synchrone Recognition verwenden die <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-300">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="59c20-301">Die Eingabe für den Erkennungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-301">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="59c20-302">Emuliert die Eingabe eines Ausdrucks für die Spracherkennung. Dabei wird Text statt Audio für die asynchrone Spracherkennung verwendet.</span><span class="sxs-lookup"><span data-stu-id="59c20-302">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-303">Die Spracherkennung Erkennungsmodul löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignisse wie bei der Erkennungsvorgang nicht emuliert wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-303">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="59c20-304">Wenn die Erkennung der asynchronen Recognition-Vorgang abgeschlossen ist, löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-304">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="59c20-305">Die Merkmale, die mit Vista und Windows 7 ausgeliefert Groß-/Kleinschreibung ignorieren und Breite Zeichen, beim Anwenden der Grammatikregeln für den auf der input-Ausdruck.</span><span class="sxs-lookup"><span data-stu-id="59c20-305">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="59c20-306">Weitere Informationen über diese Art von Vergleich finden Sie unter der <xref:System.Globalization.CompareOptions> Enumerationswerte <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> und <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="59c20-306">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="59c20-307">Der Prüfer ist außerdem neue Zeilen und zusätzlichen Leerraum zu ignorieren und Interpunktion als literal Eingabe behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-307">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-308">Im folgenden Codebeispiel ist Teil einer Konsolenanwendung, die asynchrone emulierten Eingabe, die zugeordneten Erkennungsergebnisse und die zugehörigen Ereignisse ausgelöst, die für die von der Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-308">The code example below is part of a console application that demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="59c20-309">Im Beispiel wird die folgende Ausgabe generiert.</span><span class="sxs-lookup"><span data-stu-id="59c20-309">The example generates the following output.</span></span>  
  
```  
  
TestRecognizeAsync("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = Smith  
 Done.  
  
TestRecognizeAsync("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
 EmulateRecognizeCompleted event raised.  
  Grammar = Jones; Text = Jones  
 Done.  
  
TestRecognizeAsync("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
 EmulateRecognizeCompleted event raised.  
  No recognition result available.  
 Done.  
  
TestRecognizeAsync("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = mister Smith  
 Done.  
  
press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SreEmulateRecognizeAsync  
{  
  class Program  
  {  
    // Indicate when an asynchronous operation is finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Configure the audio input.  
        recognizer.SetInputToNull();  
  
        // Add event handlers for the events raised by the  
        // EmulateRecognizeAsync method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHander);  
  
        // Start four asynchronous emulated recognition operations.  
        TestRecognizeAsync(recognizer, "Smith");  
        TestRecognizeAsync(recognizer, "Jones");  
        TestRecognizeAsync(recognizer, "Mister");  
        TestRecognizeAsync(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for asynchronous  
    // recognition.  
    private static void TestRecognizeAsync(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      completed = false;  
  
      Console.WriteLine("TestRecognizeAsync(\"{0}\")...", input);  
      recognizer.EmulateRecognizeAsync(input);  
  
      // Wait for the operation to complete.  
      while (!completed)  
      {  
        Thread.Sleep(333);  
      }  
  
      Console.WriteLine(" Done.");  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    // Handle events.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text );  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void EmulateRecognizeCompletedHander(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" EmulateRecognizeCompleted event raised.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("  {0} exception encountered: {1}:",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      else if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      else if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59c20-310">Die Erkennung hat keine geladenen Spracherkennungsgrammatiken, oder die Erkennung bearbeitet einen asynchronen Erkennungsvorgang, der noch nicht abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-310">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-311"><paramref name="inputText" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-311"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="59c20-312"><paramref name="inputText" /> ist die leere Zeichenfolge ("").</span><span class="sxs-lookup"><span data-stu-id="59c20-312"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="59c20-313">Ein Array von Worteinheiten, das die Eingabe für den Erkennungsvorgang enthält.</span><span class="sxs-lookup"><span data-stu-id="59c20-313">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="59c20-314">Eine bitweise Kombination der Enumerationswerte, die den Typ des Vergleichs beschreiben, der für den emulierten Erkennungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-314">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="59c20-315">Emuliert die Eingabe bestimmter Wörter für die freigegebene Spracherkennung. Dabei wird ein Array von <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />-Objekten statt Audio für die asynchrone Spracherkennung verwendet und festgelegt, wie die Erkennung Unicode-Vergleich zwischen den Wörtern und den geladenen Spracherkennungsgrammatiken behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-315">Emulates input of specific words to the speech recognizer, using an array of <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-316">Die Spracherkennung Erkennungsmodul löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignisse wie bei der Erkennungsvorgang nicht emuliert wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-316">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="59c20-317">Wenn die Erkennung der asynchronen Recognition-Vorgang abgeschlossen ist, löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-317">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="59c20-318">Das Erkennungsmodul verwendet `compareOptions` Wenn der input-Ausdruck als Grammatikregeln anwendet.</span><span class="sxs-lookup"><span data-stu-id="59c20-318">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="59c20-319">Die Merkmale, die mit Vista und Windows 7 ausgeliefert Groß-/Kleinschreibung ignorieren, wenn die <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> oder <xref:System.Globalization.CompareOptions.IgnoreCase> Wert vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-319">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="59c20-320">Der Prüfer immer die Zeichenbreite ignoriert und nie den Kanatyp ignorieren.</span><span class="sxs-lookup"><span data-stu-id="59c20-320">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="59c20-321">Der Prüfer ist außerdem neue Zeilen und zusätzlichen Leerraum zu ignorieren und Interpunktion als literal Eingabe behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-321">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="59c20-322">Weitere Informationen zu der Zeichenbreite und Kanatyp, finden Sie unter der <xref:System.Globalization.CompareOptions> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="59c20-322">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59c20-323">Die Erkennung hat keine geladenen Spracherkennungsgrammatiken, oder die Erkennung bearbeitet einen asynchronen Erkennungsvorgang, der noch nicht abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-323">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-324"><paramref name="wordUnits" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-324"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="59c20-325"><paramref name="wordUnits" /> enthält mindestens ein <see langword="null" />-Element.</span><span class="sxs-lookup"><span data-stu-id="59c20-325"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="59c20-326"><paramref name="compareOptions" /> enthält das Flag <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> oder <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-326"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="59c20-327">Der Eingabebegriff für den Erkennungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-327">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="59c20-328">Eine bitweise Kombination der Enumerationswerte, die den Typ des Vergleichs beschreiben, der für den emulierten Erkennungsvorgang verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-328">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="59c20-329">Emuliert die Eingabe eines Ausdrucks für die Spracherkennung. Dabei wird Text statt Audio für die asynchrone Spracherkennung verwendet und festgelegt, wie die Erkennung Unicode-Vergleich zwischen dem Ausdruck und den geladenen Spracherkennungsgrammatiken behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-329">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-330">Die Spracherkennung Erkennungsmodul löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignisse wie bei der Erkennungsvorgang nicht emuliert wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-330">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="59c20-331">Wenn die Erkennung der asynchronen Recognition-Vorgang abgeschlossen ist, löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-331">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="59c20-332">Das Erkennungsmodul verwendet `compareOptions` Wenn der input-Ausdruck als Grammatikregeln anwendet.</span><span class="sxs-lookup"><span data-stu-id="59c20-332">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="59c20-333">Die Merkmale, die mit Vista und Windows 7 ausgeliefert Groß-/Kleinschreibung ignorieren, wenn die <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> oder <xref:System.Globalization.CompareOptions.IgnoreCase> Wert vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-333">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="59c20-334">Der Prüfer immer die Zeichenbreite ignoriert und nie den Kanatyp ignorieren.</span><span class="sxs-lookup"><span data-stu-id="59c20-334">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="59c20-335">Der Prüfer ist außerdem neue Zeilen und zusätzlichen Leerraum zu ignorieren und Interpunktion als literal Eingabe behandelt.</span><span class="sxs-lookup"><span data-stu-id="59c20-335">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="59c20-336">Weitere Informationen zu der Zeichenbreite und Kanatyp, finden Sie unter der <xref:System.Globalization.CompareOptions> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="59c20-336">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59c20-337">Die Erkennung hat keine geladenen Spracherkennungsgrammatiken, oder die Erkennung bearbeitet einen asynchronen Erkennungsvorgang, der noch nicht abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-337">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-338"><paramref name="inputText" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-338"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="59c20-339"><paramref name="inputText" /> ist die leere Zeichenfolge ("").</span><span class="sxs-lookup"><span data-stu-id="59c20-339"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="59c20-340"><paramref name="compareOptions" /> enthält das Flag <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> oder <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-340"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-341">Wird ausgelöst, wenn das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> einen asynchronen Erkennungsvorgang einer emulierten Eingabe abschließt.</span><span class="sxs-lookup"><span data-stu-id="59c20-341">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation of emulated input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-342">Jede <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Methode startet einen asynchronen Recognition-Vorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-342">Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="59c20-343">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine> löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> Ereignis aus, wenn sie den asynchronen Vorgang abschließt.</span><span class="sxs-lookup"><span data-stu-id="59c20-343">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="59c20-344">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Vorgang auslösen kann die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignisse.</span><span class="sxs-lookup"><span data-stu-id="59c20-344">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events.</span></span> <span data-ttu-id="59c20-345">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> Ereignis ist die letzte einem solchen Fall, dass die Erkennung für einen angegebenen Vorgang löst.</span><span class="sxs-lookup"><span data-stu-id="59c20-345">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="59c20-346">Wenn "emuliert" Erkennung erfolgreich war, können Sie die Erkennungsergebnis mithilfe einer der folgenden zugreifen:</span><span class="sxs-lookup"><span data-stu-id="59c20-346">If emulated recognition was successful, you can access the recognition result using the either of the following:</span></span>  
  
-   <span data-ttu-id="59c20-347">Die <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> Eigenschaft in der <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> Objekt im Handler für das <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-347">The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
-   <span data-ttu-id="59c20-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> -Eigenschaft in der <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> Objekt im Handler für das <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="59c20-349">Wenn "emuliert" Erkennung nicht erfolgreich war, die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignis wird nicht ausgelöst, und die <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> wird null sein.</span><span class="sxs-lookup"><span data-stu-id="59c20-349">If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null.</span></span>  
  
 <span data-ttu-id="59c20-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> wird von <xref:System.ComponentModel.AsyncCompletedEventArgs> abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="59c20-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="59c20-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> wird von <xref:System.Speech.Recognition.RecognitionEventArgs> abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="59c20-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="59c20-352">Beim Erstellen eines <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>-Delegaten geben Sie die Methode für die Ereignisbehandlung an.</span><span class="sxs-lookup"><span data-stu-id="59c20-352">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="59c20-353">Um dem Ereignishandler das Ereignis zuzuordnen, fügen Sie dem Ereignis eine Instanz des Delegaten hinzu.</span><span class="sxs-lookup"><span data-stu-id="59c20-353">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="59c20-354">Der Ereignishandler wird bei jedem Eintreten des Ereignisses aufgerufen, sofern der Delegat nicht entfernt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-354">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="59c20-355">Weitere Informationen über Delegaten für Ereignishandler finden Sie unter [Ereignissen und Delegaten](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="59c20-355">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-356">Im folgende Beispiel ist Teil einer Konsolenanwendung, die lädt eine Spracherkennung Recognition Grammatik und asynchrone emulierten Eingabe, die zugeordneten Erkennungsergebnisse und die zugehörigen Ereignisse ausgelöst, die für die von der Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-356">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InProcessRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of an in-process recognizer.  
      using (SpeechRecognitionEngine recognizer =   
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call mathches the grammar  
        // and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Result of 1st call to EmulateRecognizeAsync = {0}",  
          e.Result.Text ?? "<no text>");  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("Result of 2nd call to EmulateRecognizeAsync = No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-357">Ruft das Ruheintervall auf oder legt dieses fest, welches die <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> am Ende von eindeutiger Eingabe akzeptieren wird, bevor ein Erkennungsvorgang finalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-357">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of unambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="59c20-358">Die Dauer des Ruheintervalls.</span><span class="sxs-lookup"><span data-stu-id="59c20-358">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-359">Die von der Spracherkennung verwendet dieses Timeoutintervall an, wenn die Eingabe Recognition eindeutig ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-359">The speech recognizer uses this timeout interval when the recognition input is unambiguous.</span></span> <span data-ttu-id="59c20-360">Z. B. für eine Sprache Recognition-Grammatik, mit der Erkennung von beidem unterstützt "neue Bitte game" oder "new Game", "neue Bitte game" ist eine eindeutige Eingabe, und "new Game" ist eine mehrdeutige Eingabe.</span><span class="sxs-lookup"><span data-stu-id="59c20-360">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="59c20-361">Diese Eigenschaft bestimmt, wie lange die Spracherkennungsmoduls für zusätzliche Eingabe-gewartet wird, vor dem Abschließen eines Erkennungsvorgangs.</span><span class="sxs-lookup"><span data-stu-id="59c20-361">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="59c20-362">Das Timeout-Intervall kann von 0 Sekunden auf 10 Sekunden, einschließlich sein.</span><span class="sxs-lookup"><span data-stu-id="59c20-362">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="59c20-363">Der Standardwert beträgt 150 Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="59c20-363">The default is 150 milliseconds.</span></span>  
  
 <span data-ttu-id="59c20-364">Um das Timeoutintervall für mehrdeutigen Eingaben festzulegen, verwenden die <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-364">To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59c20-365">Diese Eigenschaft wird auf einen Wert kleiner als 0 Sekunden oder größer als 10 Sekunden festgelegt.</span><span class="sxs-lookup"><span data-stu-id="59c20-365">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeoutAmbiguous">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeoutAmbiguous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeoutAmbiguous As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeoutAmbiguous { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-366">Ruft das Ruheintervall auf oder legt dieses fest, welches die <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> am Ende von mehrdeutiger Eingabe akzeptieren wird, bevor ein Erkennungsvorgang finalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-366">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of ambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="59c20-367">Die Dauer des Ruheintervalls.</span><span class="sxs-lookup"><span data-stu-id="59c20-367">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-368">Die von der Spracherkennung verwendet dieses Timeoutintervall an, wenn die Eingabe Recognition mehrdeutig ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-368">The speech recognizer uses this timeout interval when the recognition input is ambiguous.</span></span> <span data-ttu-id="59c20-369">Z. B. für eine Sprache Recognition-Grammatik, mit der Erkennung von beidem unterstützt "neue Bitte game" oder "new Game", "neue Bitte game" ist eine eindeutige Eingabe, und "new Game" ist eine mehrdeutige Eingabe.</span><span class="sxs-lookup"><span data-stu-id="59c20-369">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="59c20-370">Diese Eigenschaft bestimmt, wie lange die Spracherkennungsmoduls für zusätzliche Eingabe-gewartet wird, vor dem Abschließen eines Erkennungsvorgangs.</span><span class="sxs-lookup"><span data-stu-id="59c20-370">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="59c20-371">Das Timeout-Intervall kann von 0 Sekunden auf 10 Sekunden, einschließlich sein.</span><span class="sxs-lookup"><span data-stu-id="59c20-371">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="59c20-372">Der Standardwert beträgt 500 Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="59c20-372">The default is 500 milliseconds.</span></span>  
  
 <span data-ttu-id="59c20-373">Verwenden Sie zum Festlegen der Timeout-Intervall für die Eingabe eindeutig die <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-373">To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59c20-374">Diese Eigenschaft wird auf einen Wert kleiner als 0 Sekunden oder größer als 10 Sekunden festgelegt.</span><span class="sxs-lookup"><span data-stu-id="59c20-374">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-375">Ruft eine Auflistung der <see cref="T:System.Speech.Recognition.Grammar" />-Objekte ab, die in diese <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz geladen werden.</span><span class="sxs-lookup"><span data-stu-id="59c20-375">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <value><span data-ttu-id="59c20-376">Die Auflistung von <see cref="T:System.Speech.Recognition.Grammar" />-Objekten.</span><span class="sxs-lookup"><span data-stu-id="59c20-376">The collection of <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="59c20-377">Das folgende Beispiel gibt Informationen an die Konsole für jede Sprache Recognition-Grammatik, die derzeit von einer Spracherkennung geladen wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-377">The following example outputs information to the console for each speech recognition grammar that is currently loaded by a speech recognizer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="59c20-378">Kopieren Sie die Grammatik-Auflistung, um Fehler zu vermeiden, wenn die Auflistung geändert wird, während diese Methode listet die Elemente der Auflistung auf.</span><span class="sxs-lookup"><span data-stu-id="59c20-378">Copy the grammar collection to avoid errors if the collection is modified while this method enumerates the elements of the collection.</span></span>  
  
```csharp  
  
private static void ListGrammars(SpeechRecognitionEngine recognizer)  
{  
  string qualifier;  
  List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
  foreach (Grammar g in grammars)  
  {  
    qualifier = (g.Enabled) ? "enabled" : "disabled";  
  
    Console.WriteLine("Grammar {0} is loaded and is {1}.",  
      g.Name, qualifier);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="InitialSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan InitialSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan InitialSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan InitialSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-379">Ruft das Zeitintervall ab oder legt dieses fest, während eine <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> Eingaben akzeptiert, welche keine Geräusche enthalten, bevor die Erkennung abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-379">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only silence before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="59c20-380">Die Dauer des Ruheintervalls.</span><span class="sxs-lookup"><span data-stu-id="59c20-380">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-381">Jede von der Spracherkennung verfügt über einen Algorithmus, um die Unterscheidung zwischen Ruhe und Sprache.</span><span class="sxs-lookup"><span data-stu-id="59c20-381">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="59c20-382">Wenn die Eingabe für die Erkennung Ruhe innerhalb des Timeoutzeitraums anfängliche Ruhe ist, schließt die Erkennung dieser Erkennungsvorgang ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-382">If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="59c20-383">Für asynchrone Erkennungsvorgänge und Emulation, löst die Erkennung der <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> -Ereignis, in dem die <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> Eigenschaft ist `true`, und die <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> Eigenschaft ist `null`.</span><span class="sxs-lookup"><span data-stu-id="59c20-383">For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="59c20-384">Synchrone Erkennungsvorgänge Emulation und die Erkennung gibt `null`, anstatt eine gültige <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="59c20-384">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="59c20-385">Wenn das erste Ruhe-Timeout-Intervall auf 0 festgelegt ist, führt die Erkennung keine anfängliche Ruhe-Timeout-Überprüfung aus.</span><span class="sxs-lookup"><span data-stu-id="59c20-385">If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check.</span></span> <span data-ttu-id="59c20-386">Das Timeoutintervall kann es sich um einen nicht negativen Wert annehmen.</span><span class="sxs-lookup"><span data-stu-id="59c20-386">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="59c20-387">Der Standardwert beträgt 0 Sekunden.</span><span class="sxs-lookup"><span data-stu-id="59c20-387">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-388">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-388">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="59c20-389">Im Beispiel wird die <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> und <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> Eigenschaften einer <xref:System.Speech.Recognition.SpeechRecognitionEngine> vor dem Initiieren der Spracherkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-389">The example sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="59c20-390">Handler für die Spracherkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> und <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> Ereignisse Ausgabe Ereignisinformationen in die Konsole zu veranschaulichen, wie die <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> Eigenschaften des eine <xref:System.Speech.Recognition.SpeechRecognitionEngine> Eigenschaften wirken sich auf Erkennungsvorgänge.</span><span class="sxs-lookup"><span data-stu-id="59c20-390">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> properties affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="59c20-391">Diese Eigenschaft wird auf einen Wert kleiner als 0 Sekunden festgelegt.</span><span class="sxs-lookup"><span data-stu-id="59c20-391">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="InstalledRecognizers">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstalledRecognizers () As ReadOnlyCollection(Of RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizerInfo ^&gt; ^ InstalledRecognizers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59c20-392">Gibt Informationen für alle installierten Spracherkennungen auf dem aktuellen System zurück.</span><span class="sxs-lookup"><span data-stu-id="59c20-392">Returns information for all of the installed speech recognizers on the current system.</span></span></summary>
        <returns><span data-ttu-id="59c20-393">Eine schreibgeschützte Auflistung von <see cref="T:System.Speech.Recognition.RecognizerInfo" />-Objekten, die die installierten Erkennungen beschreiben.</span><span class="sxs-lookup"><span data-stu-id="59c20-393">A read-only collection of the <see cref="T:System.Speech.Recognition.RecognizerInfo" /> objects that describe the installed recognizers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-394">Verwenden Sie zum Abrufen von Informationen über die aktuellen Erkennung der <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-394">To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-395">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-395">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="59c20-396">Im Beispiel wird die zurückgegebene Auflistung der <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> Methode, um eine von der Spracherkennung zu ermitteln, die die englische Sprache unterstützt.</span><span class="sxs-lookup"><span data-stu-id="59c20-396">The example uses the collection returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method to find a speech recognizer that supports the English language.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="59c20-397">Das zu ladende Grammatikobjekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-397">The grammar object to load.</span></span></param>
        <summary><span data-ttu-id="59c20-398">Lädt synchron ein <see cref="T:System.Speech.Recognition.Grammar" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-398">Synchronously loads a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-399">Das Erkennungsmodul löst eine Ausnahme aus, wenn die <xref:System.Speech.Recognition.Grammar> Objekt bereits geladen wird, wird asynchron geladen oder konnte nicht in jeder Erkennungsmodul geladen.</span><span class="sxs-lookup"><span data-stu-id="59c20-399">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="59c20-400">Kann nicht geladen werden, die gleiche <xref:System.Speech.Recognition.Grammar> Objekt in mehreren Instanzen von <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span><span class="sxs-lookup"><span data-stu-id="59c20-400">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="59c20-401">Erstellen Sie stattdessen ein neues <xref:System.Speech.Recognition.Grammar> -Objekt für jedes <xref:System.Speech.Recognition.SpeechRecognitionEngine> Instanz.</span><span class="sxs-lookup"><span data-stu-id="59c20-401">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="59c20-402">Wenn die Erkennung ausgeführt wird, müssen Anwendungen verwenden <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> der Spracherkennungsmoduls vor dem Laden, entladen, aktivieren oder deaktivieren eine Grammatik anhalten.</span><span class="sxs-lookup"><span data-stu-id="59c20-402">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="59c20-403">Wenn Sie eine Grammatik laden, ist es standardmäßig aktiviert.</span><span class="sxs-lookup"><span data-stu-id="59c20-403">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="59c20-404">Verwenden Sie zum Deaktivieren einer geladenen Grammatik der <xref:System.Speech.Recognition.Grammar.Enabled%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-404">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="59c20-405">Beim Laden einer <xref:System.Speech.Recognition.Grammar> -Objekt asynchron, verwenden Sie die <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-405">To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-406">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-406">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="59c20-407">Das Beispiel erstellt eine <xref:System.Speech.Recognition.DictationGrammar> und lädt sie in einer von der Spracherkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-407">The example creates a <xref:System.Speech.Recognition.DictationGrammar> and loads it into a speech recognizer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-408"><paramref name="Grammar" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-408"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="59c20-409"><paramref name="Grammar" /> ist in keinem gültigen Zustand.</span><span class="sxs-lookup"><span data-stu-id="59c20-409"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="59c20-410">Die zu ladende Spracherkennungsgrammatik.</span><span class="sxs-lookup"><span data-stu-id="59c20-410">The speech recognition grammar to load.</span></span></param>
        <summary><span data-ttu-id="59c20-411">Lädt asynchron eine Spracherkennungsgrammatik.</span><span class="sxs-lookup"><span data-stu-id="59c20-411">Asynchronously loads a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-412">Beim Abschluss der Erkennung Laden einer <xref:System.Speech.Recognition.Grammar> -Objekt, löst es eine <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-412">When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="59c20-413">Das Erkennungsmodul löst eine Ausnahme aus, wenn die <xref:System.Speech.Recognition.Grammar> Objekt bereits geladen wird, wird asynchron geladen oder konnte nicht in jeder Erkennungsmodul geladen.</span><span class="sxs-lookup"><span data-stu-id="59c20-413">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="59c20-414">Kann nicht geladen werden, die gleiche <xref:System.Speech.Recognition.Grammar> Objekt in mehreren Instanzen von <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span><span class="sxs-lookup"><span data-stu-id="59c20-414">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="59c20-415">Erstellen Sie stattdessen ein neues <xref:System.Speech.Recognition.Grammar> -Objekt für jedes <xref:System.Speech.Recognition.SpeechRecognitionEngine> Instanz.</span><span class="sxs-lookup"><span data-stu-id="59c20-415">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="59c20-416">Wenn die Erkennung ausgeführt wird, müssen Anwendungen verwenden <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> der Spracherkennungsmoduls vor dem Laden, entladen, aktivieren oder deaktivieren eine Grammatik anhalten.</span><span class="sxs-lookup"><span data-stu-id="59c20-416">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="59c20-417">Wenn Sie eine Grammatik laden, ist es standardmäßig aktiviert.</span><span class="sxs-lookup"><span data-stu-id="59c20-417">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="59c20-418">Verwenden Sie zum Deaktivieren einer geladenen Grammatik der <xref:System.Speech.Recognition.Grammar.Enabled%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-418">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="59c20-419">Um eine Sprache Recognition Grammatik synchron zu laden, verwenden die <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-419">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-420"><paramref name="Grammar" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-420"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="59c20-421"><paramref name="Grammar" /> ist in keinem gültigen Zustand.</span><span class="sxs-lookup"><span data-stu-id="59c20-421"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="59c20-422">Der asynchrone Vorgang wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="59c20-422">The asynchronous operation was canceled.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-423">Wird ausgelöst, wenn das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> das asynchrone Laden eines <see cref="T:System.Speech.Recognition.Grammar" />-Objekts beendet.</span><span class="sxs-lookup"><span data-stu-id="59c20-423">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finishes the asynchronous loading of a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-424">Des Erkennungsmodul <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> Methode initiiert einen asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-424">The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="59c20-425">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine> löst dieses Ereignis, wenn sie den Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-425">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation.</span></span> <span data-ttu-id="59c20-426">Zum Abrufen der <xref:System.Speech.Recognition.Grammar> Objekt, das die Erkennung laden, verwenden Sie die <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> Eigenschaft der zugeordneten <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="59c20-426">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="59c20-427">Abrufen des aktuellen <xref:System.Speech.Recognition.Grammar> Objekte, die die Erkennung geladen wurde, verwenden Sie der Erkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-427">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="59c20-428">Wenn die Erkennung ausgeführt wird, müssen Anwendungen verwenden <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> der Spracherkennungsmoduls vor dem Laden, entladen, aktivieren oder deaktivieren eine Grammatik anhalten.</span><span class="sxs-lookup"><span data-stu-id="59c20-428">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="59c20-429">Beim Erstellen eines <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted>-Delegaten bestimmen Sie die Methode für die Ereignisbehandlung.</span><span class="sxs-lookup"><span data-stu-id="59c20-429">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="59c20-430">Um dem Ereignishandler das Ereignis zuzuordnen, fügen Sie dem Ereignis eine Instanz des Delegaten hinzu.</span><span class="sxs-lookup"><span data-stu-id="59c20-430">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="59c20-431">Der Ereignishandler wird bei jedem Eintreten des Ereignisses aufgerufen, sofern der Delegat nicht entfernt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-431">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="59c20-432">Weitere Informationen über Delegaten für Ereignishandler finden Sie unter [Ereignissen und Delegaten](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="59c20-432">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-433">Im folgende Beispiel erstellt ein in-Process-Spracherkennung und erstellt dann auf zwei Arten von Grammatiken für die Erkennung von bestimmten Wörtern und kostenlose diktieren annimmt.</span><span class="sxs-lookup"><span data-stu-id="59c20-433">The following example creates an in-process speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="59c20-434">Im Beispiel wird erstellt eine <xref:System.Speech.Recognition.Grammar> Objekt aus allen Grammatiken Recognition abgeschlossenen Spracherkennung asynchron lädt dann die <xref:System.Speech.Recognition.Grammar> -Objekte und die <xref:System.Speech.Recognition.SpeechRecognitionEngine> Instanz.</span><span class="sxs-lookup"><span data-stu-id="59c20-434">The example constructs a <xref:System.Speech.Recognition.Grammar> object from each of the completed speech recognition grammars, then asynchronously loads the <xref:System.Speech.Recognition.Grammar> objects to the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span> <span data-ttu-id="59c20-435">Handler für der Erkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> und <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Schreiben von Ereignissen in der Konsole den Namen des dem <xref:System.Speech.Recognition.Grammar> -Objekt, das verwendet wurde, um die Erkennung und den Text des Ergebnisses Recognition bzw. ausführen.</span><span class="sxs-lookup"><span data-stu-id="59c20-435">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events write to the console the name of the <xref:System.Speech.Recognition.Grammar> object that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and set its input.  
      recognizer = new SpeechRecognitionEngine();  
      recognizer.SetInputToDefaultAudioDevice();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted +=  
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Create the "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
      SemanticResultValue noValue =  
          new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create the "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Start asynchronous, continuous recognition.  
      recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-436">Ruft die Höchstzahl alternativer Erkennungsergebnisse ab oder legt diese fest, welche die <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> für jeden Erkennungsvorgang zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="59c20-436">Gets or sets the maximum number of alternate recognition results that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> returns for each recognition operation.</span></span></summary>
        <value><span data-ttu-id="59c20-437">Die Anzahl alternativer Ergebnisse, die zurückgegeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="59c20-437">The number of alternate results to return.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-438">Die <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> Eigenschaft von der <xref:System.Speech.Recognition.RecognitionResult> Klasse enthält die Auflistung der <xref:System.Speech.Recognition.RecognizedPhrase> Objekte, die mögliche Interpretationen der Eingabe darstellen.</span><span class="sxs-lookup"><span data-stu-id="59c20-438">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.</span></span>  
  
 <span data-ttu-id="59c20-439">Der Standardwert für <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> ist 10.</span><span class="sxs-lookup"><span data-stu-id="59c20-439">The default value for <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="59c20-440"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> ist auf einen Wert unter 0 (null) festgelegt.</span><span class="sxs-lookup"><span data-stu-id="59c20-440"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> is set to a value less than 0.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      </Docs>
    </Member>
    <Member MemberName="QueryRecognizerSetting">
      <MemberSignature Language="C#" Value="public object QueryRecognizerSetting (string settingName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QueryRecognizerSetting(string settingName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryRecognizerSetting (settingName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ QueryRecognizerSetting(System::String ^ settingName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="59c20-441">Der Name der Einstellung, die zurückgegeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="59c20-441">The name of the setting to return.</span></span></param>
        <summary><span data-ttu-id="59c20-442">Gibt die Werte von Einstellungen für das Erkennungsmodul zurück.</span><span class="sxs-lookup"><span data-stu-id="59c20-442">Returns the values of settings for the recognizer.</span></span></summary>
        <returns><span data-ttu-id="59c20-443">Der Wert der Einstellung.</span><span class="sxs-lookup"><span data-stu-id="59c20-443">The value of the setting.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-444">Erkennung Einstellungen können Zeichenfolge, 64-Bit-Ganzzahl oder Arbeitsspeicher-Adressdaten enthalten.</span><span class="sxs-lookup"><span data-stu-id="59c20-444">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="59c20-445">Die folgende Tabelle beschreibt die Einstellungen, die für eine Microsoft-Speech-API (SAPI) definiert sind – Erkennung kompatibel.</span><span class="sxs-lookup"><span data-stu-id="59c20-445">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="59c20-446">Die folgenden Einstellungen benötigen denselben Bereich für jeden Erkennungsmodul, die die Einstellung unterstützt.</span><span class="sxs-lookup"><span data-stu-id="59c20-446">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="59c20-447">Eine SAPI-kompatible Erkennungsmodul ist nicht erforderlich, diese Einstellungen unterstützt und kann andere Einstellungen unterstützen.</span><span class="sxs-lookup"><span data-stu-id="59c20-447">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="59c20-448">name</span><span class="sxs-lookup"><span data-stu-id="59c20-448">Name</span></span>|<span data-ttu-id="59c20-449">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="59c20-449">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="59c20-450">Gibt die Erkennung CPU-Auslastung an.</span><span class="sxs-lookup"><span data-stu-id="59c20-450">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="59c20-451">Der Bereich liegt zwischen 0 und 100.</span><span class="sxs-lookup"><span data-stu-id="59c20-451">The range is from 0 to 100.</span></span> <span data-ttu-id="59c20-452">Der Standardwert ist 50.</span><span class="sxs-lookup"><span data-stu-id="59c20-452">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="59c20-453">Gibt die Länge der Pause am Ende der Eingabe eindeutig an, bevor die von der Spracherkennung ein Erkennungsvorgangs abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-453">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="59c20-454">Der Bereich liegt zwischen 0 und 10.000 Millisekunden (ms).</span><span class="sxs-lookup"><span data-stu-id="59c20-454">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="59c20-455">Diese Einstellung bezieht sich auf der Erkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-455">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  <span data-ttu-id="59c20-456">Standard = 150ms.</span><span class="sxs-lookup"><span data-stu-id="59c20-456">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="59c20-457">Gibt die Länge der Pause am Ende der mehrdeutigen Eingaben an, bevor die von der Spracherkennung ein Erkennungsvorgangs abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-457">Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="59c20-458">Der Bereich liegt zwischen 0 und 10.000 ms.</span><span class="sxs-lookup"><span data-stu-id="59c20-458">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="59c20-459">Diese Einstellung bezieht sich auf der Erkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-459">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="59c20-460">Standard = 500 ms.</span><span class="sxs-lookup"><span data-stu-id="59c20-460">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="59c20-461">Gibt an, ob die Anpassung des Modells acoustic auf ON festgelegt ist (Wert = `1`) oder OFF (Wert = `0`).</span><span class="sxs-lookup"><span data-stu-id="59c20-461">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="59c20-462">Der Standardwert ist `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="59c20-462">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="59c20-463">Gibt an, ob die Anpassung im Hintergrund auf ON festgelegt ist (Wert = `1`) oder OFF (Wert = `0`), und speichert die Einstellung in der Registrierung.</span><span class="sxs-lookup"><span data-stu-id="59c20-463">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="59c20-464">Der Standardwert ist `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="59c20-464">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="59c20-465">Um eine Einstellung für die Erkennung zu aktualisieren, verwenden Sie eines der <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-465">To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-466">Im folgende Beispiel ist Teil einer Konsolenanwendung, die die Werte für eine Reihe von den Einstellungen für die Erkennung, die das Gebietsschema En-US unterstützt definierten ausgibt.</span><span class="sxs-lookup"><span data-stu-id="59c20-466">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="59c20-467">Im Beispiel wird die folgende Ausgabe generiert.</span><span class="sxs-lookup"><span data-stu-id="59c20-467">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation"  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        foreach (string setting in settings)  
        {  
          try  
          {  
            object value = recognizer.QueryRecognizerSetting(setting);  
            Console.WriteLine("  {0,-30} = {1}", setting, value);  
          }  
          catch  
          {  
            Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
              setting);  
          }  
        }  
      }  
      Console.WriteLine();  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-468"><paramref name="settingName" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-468"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="59c20-469"><paramref name="settingName" /> ist die leere Zeichenfolge ("").</span><span class="sxs-lookup"><span data-stu-id="59c20-469"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="59c20-470">Die Erkennung verfügt über keine Einstellung mit diesem Namen.</span><span class="sxs-lookup"><span data-stu-id="59c20-470">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Recognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59c20-471">Startet einen synchronen Spracherkennungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-471">Starts a synchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-472">Diese Methoden ausführen ein einzelnen, synchrone Erkennungsvorgangs an.</span><span class="sxs-lookup"><span data-stu-id="59c20-472">These methods perform a single, synchronous recognition operation.</span></span> <span data-ttu-id="59c20-473">Das Erkennungsmodul führt diesen Vorgang für seine geladen und aktiviert Speech Recognition Grammatiken.</span><span class="sxs-lookup"><span data-stu-id="59c20-473">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="59c20-474">Während eines Aufrufs an diese Methode kann die Erkennung der folgenden Ereignisse ausgelöst:</span><span class="sxs-lookup"><span data-stu-id="59c20-474">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="59c20-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected></span><span class="sxs-lookup"><span data-stu-id="59c20-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="59c20-476">Wird ausgelöst, wenn die Erkennung Eingabe erkennt, die sie als Sprache leichter identifizieren kann.</span><span class="sxs-lookup"><span data-stu-id="59c20-476">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="59c20-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized></span><span class="sxs-lookup"><span data-stu-id="59c20-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="59c20-478">Ausgelöst, wenn die Eingabe eine mehrdeutige Übereinstimmung mit einem aktiven Grammatiken erstellt.</span><span class="sxs-lookup"><span data-stu-id="59c20-478">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="59c20-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="59c20-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="59c20-480">Wird ausgelöst, wenn die Erkennung eines Erkennungsvorgangs schließt ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-480">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="59c20-481">Das Erkennungsmodul wird nicht ausgelöst. die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> Ereignis bei Verwendung einer der der <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-481">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 <span data-ttu-id="59c20-482">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> -Methoden zurückgeben einer <xref:System.Speech.Recognition.RecognitionResult> -Objekt, oder `null` , wenn der Vorgang nicht erfolgreich ist oder die Erkennung nicht aktiviert.</span><span class="sxs-lookup"><span data-stu-id="59c20-482">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods return a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful or the recognizer is not enabled.</span></span>  
  
 <span data-ttu-id="59c20-483">Eine synchrone Erkennungsvorgang kann aus den folgenden Gründen fehlschlagen:</span><span class="sxs-lookup"><span data-stu-id="59c20-483">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="59c20-484">Sprache wird nicht erkannt werden, bevor die Timeout-Intervalle für Ablaufen der <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> Eigenschaften oder für die `initialSilenceTimeout` Parameter von der <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-484">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties, or for the `initialSilenceTimeout` parameter of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> method.</span></span>  
  
-   <span data-ttu-id="59c20-485">Das Erkennungsmodul Spracherkennung erkennt jedoch findet keine Übereinstimmungen in einer seiner geladen und aktiviert <xref:System.Speech.Recognition.Grammar> Objekte.</span><span class="sxs-lookup"><span data-stu-id="59c20-485">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="59c20-486">Verwenden Sie zum Ändern, wie die Erkennung für die zeitliche Abfolge der Sprache oder Pausen in Bezug auf Erkennung behandelt, die <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="59c20-486">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="59c20-487">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine> benötigen mindestens ein <xref:System.Speech.Recognition.Grammar> Objekt vor dem Ausführen von Recognition geladen.</span><span class="sxs-lookup"><span data-stu-id="59c20-487">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="59c20-488">Um eine Sprache Recognition Grammatik zu laden, verwenden die <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-488">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="59c20-489">Um asynchrone Erkennung auszuführen, gehen die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-489">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize () As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59c20-490">Führt einen synchronen Spracherkennungsvorgang aus.</span><span class="sxs-lookup"><span data-stu-id="59c20-490">Performs a synchronous speech recognition operation.</span></span></summary>
        <returns><span data-ttu-id="59c20-491">Das Erkennungsergebnis für die Eingabe oder <see langword="null" />, wenn der Vorgang nicht erfolgreich war oder die Erkennung nicht aktiviert ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-491">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-492">Diese Methode führt eine einzelne Erkennungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-492">This method performs a single recognition operation.</span></span> <span data-ttu-id="59c20-493">Das Erkennungsmodul führt diesen Vorgang für seine geladen und aktiviert Speech Recognition Grammatiken.</span><span class="sxs-lookup"><span data-stu-id="59c20-493">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="59c20-494">Während eines Aufrufs an diese Methode kann die Erkennung der folgenden Ereignisse ausgelöst:</span><span class="sxs-lookup"><span data-stu-id="59c20-494">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="59c20-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected></span><span class="sxs-lookup"><span data-stu-id="59c20-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="59c20-496">Wird ausgelöst, wenn die Erkennung Eingabe erkennt, die sie als Sprache leichter identifizieren kann.</span><span class="sxs-lookup"><span data-stu-id="59c20-496">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="59c20-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized></span><span class="sxs-lookup"><span data-stu-id="59c20-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="59c20-498">Ausgelöst, wenn die Eingabe eine mehrdeutige Übereinstimmung mit einem aktiven Grammatiken erstellt.</span><span class="sxs-lookup"><span data-stu-id="59c20-498">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="59c20-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="59c20-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="59c20-500">Wird ausgelöst, wenn die Erkennung eines Erkennungsvorgangs schließt ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-500">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="59c20-501">Das Erkennungsmodul wird nicht ausgelöst. die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> Ereignis bei Verwendung dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-501">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="59c20-502">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> Methode gibt ein <xref:System.Speech.Recognition.RecognitionResult> -Objekt, oder `null` , wenn der Vorgang nicht erfolgreich ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-502">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="59c20-503">Eine synchrone Erkennungsvorgang kann aus den folgenden Gründen fehlschlagen:</span><span class="sxs-lookup"><span data-stu-id="59c20-503">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="59c20-504">Sprache wird nicht erkannt werden, bevor die Timeout-Intervalle für Ablaufen der <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="59c20-504">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="59c20-505">Das Erkennungsmodul Spracherkennung erkennt jedoch findet keine Übereinstimmungen in einer seiner geladen und aktiviert <xref:System.Speech.Recognition.Grammar> Objekte.</span><span class="sxs-lookup"><span data-stu-id="59c20-505">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="59c20-506">Um asynchrone Erkennung auszuführen, gehen die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-506">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-507">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-507">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="59c20-508">Das Beispiel erstellt eine <xref:System.Speech.Recognition.DictationGrammar>, lädt sie in einer in-Process-Spracherkennung und ein Erkennungsvorgang ausführt.</span><span class="sxs-lookup"><span data-stu-id="59c20-508">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Modify the initial silence time-out value.  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5);  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize();  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize (TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize(valuetype System.TimeSpan initialSilenceTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize (initialSilenceTimeout As TimeSpan) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize(TimeSpan initialSilenceTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialSilenceTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="initialSilenceTimeout"><span data-ttu-id="59c20-509">Das Zeitspanne, in der eine Spracherkennung eine tonlose Eingabe akzeptiert, bevor die Erkennung abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-509">The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.</span></span></param>
        <summary><span data-ttu-id="59c20-510">Führt einen synchronen Spracherkennungsvorgang mit einem angegebenen ursprünglichen Ruhetimeout aus.</span><span class="sxs-lookup"><span data-stu-id="59c20-510">Performs a synchronous speech recognition operation with a specified initial silence timeout period.</span></span></summary>
        <returns><span data-ttu-id="59c20-511">Das Erkennungsergebnis für die Eingabe oder <see langword="null" />, wenn der Vorgang nicht erfolgreich war oder die Erkennung nicht aktiviert ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-511">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-512">Wenn die Spracherkennungsmoduls Spracherkennung innerhalb des durch angegebenen Zeitintervalls erkennt `initialSilenceTimeout` Argument <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> eine einzelne Recognition durchgeführt und wird dann beendet.</span><span class="sxs-lookup"><span data-stu-id="59c20-512">If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> performs a single recognition operation and then terminates.</span></span>  <span data-ttu-id="59c20-513">Die `initialSilenceTimeout` Parameter hat Vorrang vor der Erkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-513">The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property.</span></span>  
  
 <span data-ttu-id="59c20-514">Während eines Aufrufs an diese Methode kann die Erkennung der folgenden Ereignisse ausgelöst:</span><span class="sxs-lookup"><span data-stu-id="59c20-514">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="59c20-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected></span><span class="sxs-lookup"><span data-stu-id="59c20-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="59c20-516">Wird ausgelöst, wenn die Erkennung Eingabe erkennt, die sie als Sprache leichter identifizieren kann.</span><span class="sxs-lookup"><span data-stu-id="59c20-516">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="59c20-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized></span><span class="sxs-lookup"><span data-stu-id="59c20-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="59c20-518">Ausgelöst, wenn die Eingabe eine mehrdeutige Übereinstimmung mit einem aktiven Grammatiken erstellt.</span><span class="sxs-lookup"><span data-stu-id="59c20-518">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="59c20-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="59c20-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="59c20-520">Wird ausgelöst, wenn die Erkennung eines Erkennungsvorgangs schließt ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-520">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="59c20-521">Das Erkennungsmodul wird nicht ausgelöst. die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> Ereignis bei Verwendung dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-521">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="59c20-522">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> Methode gibt ein <xref:System.Speech.Recognition.RecognitionResult> -Objekt, oder `null` , wenn der Vorgang nicht erfolgreich ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-522">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="59c20-523">Eine synchrone Erkennungsvorgang kann aus den folgenden Gründen fehlschlagen:</span><span class="sxs-lookup"><span data-stu-id="59c20-523">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="59c20-524">Sprache wird nicht erkannt werden, bevor die Timeout-Intervalle für Ablaufen der <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> oder für die `initialSilenceTimeout` Parameter.</span><span class="sxs-lookup"><span data-stu-id="59c20-524">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter.</span></span>  
  
-   <span data-ttu-id="59c20-525">Das Erkennungsmodul Spracherkennung erkennt jedoch findet keine Übereinstimmungen in einer seiner geladen und aktiviert <xref:System.Speech.Recognition.Grammar> Objekte.</span><span class="sxs-lookup"><span data-stu-id="59c20-525">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="59c20-526">Um asynchrone Erkennung auszuführen, gehen die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-526">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-527">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-527">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="59c20-528">Das Beispiel erstellt eine <xref:System.Speech.Recognition.DictationGrammar>, lädt sie in einer in-Process-Spracherkennung und ein Erkennungsvorgang ausführt.</span><span class="sxs-lookup"><span data-stu-id="59c20-528">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize(TimeSpan.FromSeconds(5));  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59c20-529">Startet einen asynchronen Spracherkennungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-529">Starts an asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-530">Diese Methoden führen Sie einzelne oder mehrere asynchrone Erkennungsvorgänge.</span><span class="sxs-lookup"><span data-stu-id="59c20-530">These methods perform single or multiple, asynchronous recognition operations.</span></span> <span data-ttu-id="59c20-531">Das Erkennungsmodul führt jeder Vorgang für seine geladen und aktiviert Speech Recognition Grammatiken.</span><span class="sxs-lookup"><span data-stu-id="59c20-531">The recognizer performs each operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="59c20-532">Während eines Aufrufs an diese Methode kann die Erkennung der folgenden Ereignisse ausgelöst:</span><span class="sxs-lookup"><span data-stu-id="59c20-532">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="59c20-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected></span><span class="sxs-lookup"><span data-stu-id="59c20-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="59c20-534">Wird ausgelöst, wenn die Erkennung Eingabe erkennt, die sie als Sprache leichter identifizieren kann.</span><span class="sxs-lookup"><span data-stu-id="59c20-534">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="59c20-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized></span><span class="sxs-lookup"><span data-stu-id="59c20-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="59c20-536">Ausgelöst, wenn die Eingabe eine mehrdeutige Übereinstimmung mit einem aktiven Grammatiken erstellt.</span><span class="sxs-lookup"><span data-stu-id="59c20-536">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="59c20-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="59c20-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="59c20-538">Wird ausgelöst, wenn die Erkennung eines Erkennungsvorgangs schließt ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-538">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="59c20-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted></span><span class="sxs-lookup"><span data-stu-id="59c20-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="59c20-540">Wird ausgelöst, wenn ein <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-540">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="59c20-541">Um das Ergebnis eines asynchronen Recognition Vorgangs abzurufen, fügen Sie einen Ereignishandler an des Erkennungsmodul <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-541">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="59c20-542">Das Erkennungsmodul löst dieses Ereignis, wenn eine synchrone oder asynchrone Erkennungsvorgang erfolgreich abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-542">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="59c20-543">Wenn Recognition nicht erfolgreich war, die <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> Eigenschaft auf <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> -Objekt, das Sie, in der Handler für zugreifen können die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> Ereignis werden `null`.</span><span class="sxs-lookup"><span data-stu-id="59c20-543">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="59c20-544">Eine asynchrone Erkennungsvorgang kann aus den folgenden Gründen fehlschlagen:</span><span class="sxs-lookup"><span data-stu-id="59c20-544">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="59c20-545">Sprache wird nicht erkannt werden, bevor die Timeout-Intervalle für Ablaufen der <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="59c20-545">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="59c20-546">Das Erkennungsmodul Spracherkennung erkennt jedoch findet keine Übereinstimmungen in einer seiner geladen und aktiviert <xref:System.Speech.Recognition.Grammar> Objekte.</span><span class="sxs-lookup"><span data-stu-id="59c20-546">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
-   <span data-ttu-id="59c20-547">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine> benötigen mindestens ein <xref:System.Speech.Recognition.Grammar> Objekt vor dem Ausführen von Recognition geladen.</span><span class="sxs-lookup"><span data-stu-id="59c20-547">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="59c20-548">Um eine Sprache Recognition Grammatik zu laden, verwenden die <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-548">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="59c20-549">Verwenden Sie zum Ändern, wie die Erkennung für die zeitliche Abfolge der Sprache oder Pausen in Bezug auf Erkennung behandelt, die <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="59c20-549">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="59c20-550">Um synchronen Erkennung auszuführen, gehen die <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-550">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59c20-551">Führt einen einzelnen, asynchronen Spracherkennungsvorgang aus.</span><span class="sxs-lookup"><span data-stu-id="59c20-551">Performs a single, asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-552">Diese Methode führt ein einzelnes, asynchrones Erkennungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-552">This method performs a single, asynchronous recognition operation.</span></span> <span data-ttu-id="59c20-553">Das Erkennungsmodul führt den Vorgang anhand seiner geladen und aktiviert Speech Recognition Grammatiken.</span><span class="sxs-lookup"><span data-stu-id="59c20-553">The recognizer performs the operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="59c20-554">Während eines Aufrufs an diese Methode kann die Erkennung der folgenden Ereignisse ausgelöst:</span><span class="sxs-lookup"><span data-stu-id="59c20-554">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="59c20-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected></span><span class="sxs-lookup"><span data-stu-id="59c20-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="59c20-556">Wird ausgelöst, wenn die Erkennung Eingabe erkennt, die sie als Sprache leichter identifizieren kann.</span><span class="sxs-lookup"><span data-stu-id="59c20-556">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="59c20-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized></span><span class="sxs-lookup"><span data-stu-id="59c20-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="59c20-558">Ausgelöst, wenn die Eingabe eine mehrdeutige Übereinstimmung mit einem aktiven Grammatiken erstellt.</span><span class="sxs-lookup"><span data-stu-id="59c20-558">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="59c20-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="59c20-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="59c20-560">Wird ausgelöst, wenn die Erkennung eines Erkennungsvorgangs schließt ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-560">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="59c20-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted></span><span class="sxs-lookup"><span data-stu-id="59c20-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="59c20-562">Wird ausgelöst, wenn ein <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-562">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="59c20-563">Um das Ergebnis eines asynchronen Recognition Vorgangs abzurufen, fügen Sie einen Ereignishandler an des Erkennungsmodul <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-563">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="59c20-564">Das Erkennungsmodul löst dieses Ereignis, wenn eine synchrone oder asynchrone Erkennungsvorgang erfolgreich abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-564">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="59c20-565">Wenn Recognition nicht erfolgreich war, die <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> Eigenschaft auf <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> -Objekt, das Sie, in der Handler für zugreifen können die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> Ereignis werden `null`.</span><span class="sxs-lookup"><span data-stu-id="59c20-565">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="59c20-566">Um synchronen Erkennung auszuführen, gehen die <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-566">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-567">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende asynchrone Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-567">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="59c20-568">Das Beispiel erstellt eine <xref:System.Speech.Recognition.DictationGrammar>, lädt sie in einer in-Process-Spracherkennung und führt eine asynchrone Erkennungsvorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-568">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one asynchronous recognition operation.</span></span> <span data-ttu-id="59c20-569">Ereignishandler sind angegeben, um zu veranschaulichen, die Ereignisse, die während des Vorgangs die Erkennung auslöst.</span><span class="sxs-lookup"><span data-stu-id="59c20-569">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[]   
        { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start an asynchronous  
        // recognition operation.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync (System.Speech.Recognition.RecognizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync(valuetype System.Speech.Recognition.RecognizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync (mode As RecognizeMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync(System::Speech::Recognition::RecognizeMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Speech.Recognition.RecognizeMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="59c20-570">Gibt an, ob einer oder mehrere Erkennungsvorgänge ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="59c20-570">Indicates whether to perform one or multiple recognition operations.</span></span></param>
        <summary><span data-ttu-id="59c20-571">Führt eine oder mehrere asynchrone Spracherkennungsvorgänge aus.</span><span class="sxs-lookup"><span data-stu-id="59c20-571">Performs one or more asynchronous speech recognition operations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-572">Wenn `mode` ist <xref:System.Speech.Recognition.RecognizeMode.Multiple>, die Erkennung weiterhin Recognition asynchrone Vorgänge, bis die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="59c20-572">If `mode` is <xref:System.Speech.Recognition.RecognizeMode.Multiple>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called.</span></span>  
  
 <span data-ttu-id="59c20-573">Während eines Aufrufs an diese Methode kann die Erkennung der folgenden Ereignisse ausgelöst:</span><span class="sxs-lookup"><span data-stu-id="59c20-573">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="59c20-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected></span><span class="sxs-lookup"><span data-stu-id="59c20-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="59c20-575">Wird ausgelöst, wenn die Erkennung Eingabe erkennt, die sie als Sprache leichter identifizieren kann.</span><span class="sxs-lookup"><span data-stu-id="59c20-575">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="59c20-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized></span><span class="sxs-lookup"><span data-stu-id="59c20-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="59c20-577">Ausgelöst, wenn die Eingabe eine mehrdeutige Übereinstimmung mit einem aktiven Grammatiken erstellt.</span><span class="sxs-lookup"><span data-stu-id="59c20-577">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="59c20-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="59c20-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="59c20-579">Wird ausgelöst, wenn die Erkennung eines Erkennungsvorgangs schließt ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-579">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="59c20-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted></span><span class="sxs-lookup"><span data-stu-id="59c20-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="59c20-581">Wird ausgelöst, wenn ein <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-581">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="59c20-582">Um das Ergebnis eines asynchronen Recognition Vorgangs abzurufen, fügen Sie einen Ereignishandler an des Erkennungsmodul <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-582">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="59c20-583">Das Erkennungsmodul löst dieses Ereignis, wenn eine synchrone oder asynchrone Erkennungsvorgang erfolgreich abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-583">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="59c20-584">Wenn Recognition nicht erfolgreich war, die <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> Eigenschaft auf <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> -Objekt, das Sie, in der Handler für zugreifen können die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> Ereignis werden `null`.</span><span class="sxs-lookup"><span data-stu-id="59c20-584">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="59c20-585">Eine asynchrone Erkennungsvorgang kann aus den folgenden Gründen fehlschlagen:</span><span class="sxs-lookup"><span data-stu-id="59c20-585">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="59c20-586">Sprache wird nicht erkannt werden, bevor die Timeout-Intervalle für Ablaufen der <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="59c20-586">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="59c20-587">Das Erkennungsmodul Spracherkennung erkennt jedoch findet keine Übereinstimmungen in einer seiner geladen und aktiviert <xref:System.Speech.Recognition.Grammar> Objekte.</span><span class="sxs-lookup"><span data-stu-id="59c20-587">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="59c20-588">Um synchronen Erkennung auszuführen, gehen die <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-588">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-589">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende asynchrone Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-589">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="59c20-590">Das Beispiel erstellt eine <xref:System.Speech.Recognition.DictationGrammar>, lädt sie in einer in-Process-Spracherkennung und mehrere asynchrone Recognition Vorgänge ausführt.</span><span class="sxs-lookup"><span data-stu-id="59c20-590">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs multiple asynchronous recognition operations.</span></span> <span data-ttu-id="59c20-591">Die asynchronen Vorgänge sind nach 30 Sekunden abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="59c20-591">The asynchronous operations are cancelled after 30 seconds.</span></span> <span data-ttu-id="59c20-592">Ereignishandler sind angegeben, um zu veranschaulichen, die Ereignisse, die während des Vorgangs die Erkennung auslöst.</span><span class="sxs-lookup"><span data-stu-id="59c20-592">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[] { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start asynchronous  
        // recognition.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 30 seconds, and then cancel asynchronous recognition.  
        Thread.Sleep(TimeSpan.FromSeconds(30));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncCancel">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncCancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59c20-593">Beendet die asynchrone Erkennung, ohne auf den Abschluss des aktuellen Erkennungsvorgangs zu warten.</span><span class="sxs-lookup"><span data-stu-id="59c20-593">Terminates asynchronous recognition without waiting for the current recognition operation to complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-594">Diese Methode schließt die asynchrone Recognition sofort ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-594">This method immediately finalizes asynchronous recognition.</span></span> <span data-ttu-id="59c20-595">Wenn die aktuelle asynchrone Erkennungsvorgang Eingabe empfängt, die Eingabe ist abgeschnitten, und der Vorgang abgeschlossen ist, mit der Eingabe vorhandene.</span><span class="sxs-lookup"><span data-stu-id="59c20-595">If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input.</span></span> <span data-ttu-id="59c20-596">Die Erkennung löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> Ereignis aus, wenn ein asynchroner Vorgang wird abgebrochen, und legt sie fest der <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> Eigenschaft von der <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> auf `true`.</span><span class="sxs-lookup"><span data-stu-id="59c20-596">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="59c20-597">Diese Methode bricht asynchrone Vorgänge gestartet, indem die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-597">This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="59c20-598">Verwenden, um asynchrone Recognition zu beenden, ohne das Abschneiden der Eingabe der <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-598">To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-599">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die die Verwendung von veranschaulicht die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-599">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span> <span data-ttu-id="59c20-600">Das Beispiel erstellt und lädt eine Spracherkennung Recognition-Grammatik, initiiert eine fortlaufende asynchrone Erkennungsvorgang und hält dann die 2 Sekunden, bevor sie den Vorgang abbricht.</span><span class="sxs-lookup"><span data-stu-id="59c20-600">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it cancels the operation.</span></span> <span data-ttu-id="59c20-601">Das Erkennungsmodul empfängt Eingaben aus der Datei c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="59c20-601">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="59c20-602">Ereignishandler sind angegeben, um zu veranschaulichen, die Ereignisse, die während des Vorgangs die Erkennung auslöst.</span><span class="sxs-lookup"><span data-stu-id="59c20-602">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then cancel the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncStop">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncStop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncStop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59c20-603">Deaktiviert die asynchrone Erkennung, nachdem der aktuelle Erkennungsvorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-603">Stops asynchronous recognition after the current recognition operation completes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-604">Diese Methode schließt die asynchrone Recognition ohne Abschneiden Eingabe ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-604">This method finalizes asynchronous recognition without truncating input.</span></span> <span data-ttu-id="59c20-605">Wenn die aktuelle asynchrone Erkennungsvorgang Eingabe empfängt, wird die Erkennung fortgesetzt, Eingaben angenommen werden, bis der aktuelle Recognition-Vorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-605">If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed.</span></span> <span data-ttu-id="59c20-606">Die Erkennung löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> Ereignis aus, wenn ein asynchroner Vorgang wird beendet, und legt sie fest der <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> Eigenschaft von der <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> auf `true`.</span><span class="sxs-lookup"><span data-stu-id="59c20-606">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="59c20-607">Diese Methode beendet die asynchrone Vorgänge gestartet, indem die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-607">This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="59c20-608">Verwenden, um sofort abzubrechen asynchronen Ansatz mit nur den vorhandenen Eingabe der <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-608">To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-609">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die die Verwendung von veranschaulicht die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-609">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span> <span data-ttu-id="59c20-610">Das Beispiel erstellt und lädt eine Spracherkennung Recognition-Grammatik, initiiert eine fortlaufende asynchrone Erkennungsvorgang und hält dann die 2 Sekunden, bevor sie den Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="59c20-610">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it stops the operation.</span></span> <span data-ttu-id="59c20-611">Das Erkennungsmodul empfängt Eingaben aus der Datei c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="59c20-611">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="59c20-612">Ereignishandler sind angegeben, um zu veranschaulichen, die Ereignisse, die während des Vorgangs die Erkennung auslöst.</span><span class="sxs-lookup"><span data-stu-id="59c20-612">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then stop the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncStop();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizeCompleted As EventHandler(Of RecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizeCompletedEventArgs ^&gt; ^ RecognizeCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-613">Wird ausgelöst, wenn das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> einen asynchronen Erkennungsvorgang abschließt.</span><span class="sxs-lookup"><span data-stu-id="59c20-613">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-614">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine> des Objekts <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> Methode initiiert einen asynchronen Recognition-Vorgang.</span><span class="sxs-lookup"><span data-stu-id="59c20-614">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation.</span></span> <span data-ttu-id="59c20-615">Wenn die Erkennung auf den asynchronen Vorgang abschließt, wird dieses Ereignis ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="59c20-615">When the recognizer finalizes the asynchronous operation, it raises this event.</span></span>  
  
 <span data-ttu-id="59c20-616">Der Handler für das <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> -Ereignis, die Sie zugreifen können die <xref:System.Speech.Recognition.RecognitionResult> in die <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> Objekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-616">Using the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object.</span></span> <span data-ttu-id="59c20-617">Wenn die Erkennung nicht erfolgreich war, <xref:System.Speech.Recognition.RecognitionResult> werden `null`.</span><span class="sxs-lookup"><span data-stu-id="59c20-617">If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`.</span></span> <span data-ttu-id="59c20-618">Um zu bestimmen, ob ein Timeout oder eine dienstunterbrechung Audioeingabe Recognition Fehler verursacht, können Sie die Eigenschaften für zugreifen <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, oder <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span><span class="sxs-lookup"><span data-stu-id="59c20-618">To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span></span>  
  
 <span data-ttu-id="59c20-619">Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Speech.Recognition.RecognizeCompletedEventArgs>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="59c20-619">See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information.</span></span>  
  
 <span data-ttu-id="59c20-620">Um die Details für die besten Kandidaten für die abgelehnte Recognition zu erhalten, fügen Sie einen Handler für das <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-620">To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event.</span></span>  
  
 <span data-ttu-id="59c20-621">Beim Erstellen eines <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>-Delegaten bestimmen Sie die Methode für die Ereignisbehandlung.</span><span class="sxs-lookup"><span data-stu-id="59c20-621">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="59c20-622">Um dem Ereignishandler das Ereignis zuzuordnen, fügen Sie dem Ereignis eine Instanz des Delegaten hinzu.</span><span class="sxs-lookup"><span data-stu-id="59c20-622">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="59c20-623">Der Ereignishandler wird bei jedem Eintreten des Ereignisses aufgerufen, sofern der Delegat nicht entfernt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-623">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="59c20-624">Weitere Informationen über Delegaten für Ereignishandler finden Sie unter [Ereignissen und Delegaten](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="59c20-624">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-625">Im folgende Beispiel erkennt Ausdrücke wie z. B. "Zeigt eine Liste der Künstler in der Kategorie jazz" oder "Alben Gospel anzeigen".</span><span class="sxs-lookup"><span data-stu-id="59c20-625">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="59c20-626">Im Beispiel wird einen Handler für das <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> Ereignis, um Informationen zu den Ergebnissen der Erkennung in der Konsole angezeigt.</span><span class="sxs-lookup"><span data-stu-id="59c20-626">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event to display information about the results of recognition in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted, error occurred during recognition: {0}", e.Error);  
        return;  
      }  
  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
  
      if (e.Result != null)  
      {  
        Console.WriteLine("RecognizeCompleted:");  
        Console.WriteLine("  Grammar: " + e.Result.Grammar.Name);  
        Console.WriteLine("  Recognized text: " + e.Result.Text);  
        Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
        Console.WriteLine("  Audio position: " + e.AudioPosition);  
      }  
  
      else  
      {  
        Console.WriteLine("RecognizeCompleted: No result.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded:  " + e.Grammar.Name);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-627">Ruft die aktuelle Position von <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> in der Audioeingabe ab, die verarbeitet wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-627">Gets the current location of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> in the audio input that it is processing.</span></span></summary>
        <value><span data-ttu-id="59c20-628">Die Position der Erkennung in der Audioeingabe, die sie verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="59c20-628">The position of the recognizer in the audio input that it is processing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-629">Die audioposition bezieht sich auf jede von der Spracherkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-629">The audio position is specific to each speech recognizer.</span></span> <span data-ttu-id="59c20-630">Der Nullwert eines Eingabedatenstroms wird hergestellt, wenn diese Option aktiviert ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-630">The zero value of an input stream is established when it is enabled.</span></span>  
  
 <span data-ttu-id="59c20-631">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> Eigenschaftenverweise der <xref:System.Speech.Recognition.SpeechRecognitionEngine> Position des Objekts in seine Audioeingabe.</span><span class="sxs-lookup"><span data-stu-id="59c20-631">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input.</span></span> <span data-ttu-id="59c20-632">Im Gegensatz dazu, die <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> Eigenschaft verweist auf das Eingabegerät Position in der generierten Audiostream.</span><span class="sxs-lookup"><span data-stu-id="59c20-632">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="59c20-633">Diese Positionen können unterschiedlich sein.</span><span class="sxs-lookup"><span data-stu-id="59c20-633">These positions can be different.</span></span> <span data-ttu-id="59c20-634">Z. B. wenn die Erkennung erhalten hat Eingabe nicht für die It hat noch erzeugt ein Erkennungsergebnis wird der Wert der die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> -Eigenschaft muss kleiner als der Wert von der <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-634">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-635">Ruft Informationen über die aktuelle Instanz von <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> ab.</span><span class="sxs-lookup"><span data-stu-id="59c20-635">Gets information about the current instance of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="59c20-636">Informationen über die aktuelle Spracherkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-636">Information about the current speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-637">Verwenden Sie zum Abrufen von Informationen für alle von der installierten Spracherkennung für das aktuelle System die <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-637">To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-638">Im folgenden Beispiel wird eine Teilliste der Daten für die aktuelle prozessintern Spracherkennungsmoduls.</span><span class="sxs-lookup"><span data-stu-id="59c20-638">The following example gets a partial list of data for the current in-process speech recognition engine.</span></span> <span data-ttu-id="59c20-639">Weitere Informationen finden Sie unter <xref:System.Speech.Recognition.RecognizerInfo>.</span><span class="sxs-lookup"><span data-stu-id="59c20-639">For more information, see <xref:System.Speech.Recognition.RecognizerInfo>.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace RecognitionEngine  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
        Console.WriteLine("Information for the current speech recognition engine:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-640">Wird ausgelöst, wenn ein aktives <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> angehalten wird, um Änderungen zu übernehmen.</span><span class="sxs-lookup"><span data-stu-id="59c20-640">Raised when a running <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pauses to accept modifications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-641">Anwendungen müssen verwenden <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> anhalten eine laufende Instanz von <xref:System.Speech.Recognition.SpeechRecognitionEngine> vor der Änderung der Einstellungen oder den zugehörigen <xref:System.Speech.Recognition.Grammar> Objekte.</span><span class="sxs-lookup"><span data-stu-id="59c20-641">Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="59c20-642">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine> löst dieses Ereignis, wenn er Änderungen akzeptieren kann.</span><span class="sxs-lookup"><span data-stu-id="59c20-642">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="59c20-643">Während beispielsweise die <xref:System.Speech.Recognition.SpeechRecognitionEngine> wird angehalten, Sie können zu laden, entladen, aktivieren und deaktivieren <xref:System.Speech.Recognition.Grammar> Objekte aus, und ändern Sie die Werte für die <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="59c20-643">For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties.</span></span> <span data-ttu-id="59c20-644">Weitere Informationen finden Sie unter der Methode <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>.</span><span class="sxs-lookup"><span data-stu-id="59c20-644">For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="59c20-645">Beim Erstellen eines <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>-Delegaten bestimmen Sie die Methode für die Ereignisbehandlung.</span><span class="sxs-lookup"><span data-stu-id="59c20-645">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="59c20-646">Um dem Ereignishandler das Ereignis zuzuordnen, fügen Sie dem Ereignis eine Instanz des Delegaten hinzu.</span><span class="sxs-lookup"><span data-stu-id="59c20-646">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="59c20-647">Der Ereignishandler wird bei jedem Eintreten des Ereignisses aufgerufen, sofern der Delegat nicht entfernt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-647">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="59c20-648">Weitere Informationen über Delegaten für Ereignishandler finden Sie unter [Ereignissen und Delegaten](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="59c20-648">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-649">Das folgende Beispiel zeigt eine Konsolenanwendung, die geladen und entladen wird <xref:System.Speech.Recognition.Grammar> Objekte.</span><span class="sxs-lookup"><span data-stu-id="59c20-649">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="59c20-650">Die Anwendung verwendet die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> Methode zum Anfordern der Spracherkennungsmoduls anhalten, damit sie ein Update empfangen kann.</span><span class="sxs-lookup"><span data-stu-id="59c20-650">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="59c20-651">Die Anwendung dann lädt oder Entlädt eine <xref:System.Speech.Recognition.Grammar> Objekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-651">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="59c20-652">Bei jeder Aktualisierung, einen Handler für <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> Ereignis schreibt den Namen und den Status der derzeit geladenen <xref:System.Speech.Recognition.Grammar> Objekte in die Konsole.</span><span class="sxs-lookup"><span data-stu-id="59c20-652">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="59c20-653">Wie Grammatiken geladen und entladen werden, erkennt die Anwendung zuerst die Namen der Farm Tieren auf die Namen von Tieren sowie die Namen der Früchte und dann nur die Namen von Früchten.</span><span class="sxs-lookup"><span data-stu-id="59c20-653">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59c20-654">Fordert an, dass die Erkennung anhält, um den Zustand zu aktualisieren.</span><span class="sxs-lookup"><span data-stu-id="59c20-654">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-655">Verwenden Sie diese Methode, um Änderungen an die Erkennung zu synchronisieren.</span><span class="sxs-lookup"><span data-stu-id="59c20-655">Use this method to synchronize changes to the recognizer.</span></span> <span data-ttu-id="59c20-656">Beispielsweise, wenn Sie laden oder Entladen von Spracherkennung Recognition Grammatik während die Erkennung Eingabe verarbeitet wird, verwenden Sie diese Methode und die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> Ereignis, um das Verhalten Ihrer Anwendung mit dem Status der Erkennung zu synchronisieren.</span><span class="sxs-lookup"><span data-stu-id="59c20-656">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="59c20-657">Wenn diese Methode aufgerufen wird, die Erkennung hält oder asynchrone Vorgänge abgeschlossen und generiert eine <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-657">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="59c20-658">Ein <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> -Ereignishandler können Sie den Status der Erkennung zwischen Erkennungsvorgänge ändern.</span><span class="sxs-lookup"><span data-stu-id="59c20-658">A <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span> <span data-ttu-id="59c20-659">Bei der Verarbeitung von <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> Ereignisse, die Erkennung angehalten, bis die Ereignishandler zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="59c20-659">When handling <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> events, the recognizer pauses until the event handler returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59c20-660">Wenn die Eingabe für die Erkennung geändert wird, bevor die Erkennung löst ist die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> Ereignis, die Anforderung wird verworfen.</span><span class="sxs-lookup"><span data-stu-id="59c20-660">If the input to the recognizer is changed before the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the request is discarded.</span></span>  
  
 <span data-ttu-id="59c20-661">Wenn diese Methode aufgerufen wird:</span><span class="sxs-lookup"><span data-stu-id="59c20-661">When this method is called:</span></span>  
  
-   <span data-ttu-id="59c20-662">Die Erkennung nicht Eingabe verarbeitet, generiert die Erkennung sofort die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-662">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="59c20-663">Das Erkennungsmodul Eingabe verarbeitet, der Pausen oder Hintergrundgeräuschen besteht, wird die Erkennung hält den Erkennungsvorgang und generiert die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-663">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="59c20-664">Das Erkennungsmodul Eingabe verarbeitet, die nicht der stille oder Hintergrundgeräuschen besteht, wird die Erkennung Erkennungsvorgang abgeschlossen und generiert dann das <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-664">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="59c20-665">Während die Erkennung verarbeitet die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> Ereignis:</span><span class="sxs-lookup"><span data-stu-id="59c20-665">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="59c20-666">Das Erkennungsmodul verarbeitet keine Eingabe, und der Wert von der <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> Eigenschaft bleibt unverändert.</span><span class="sxs-lookup"><span data-stu-id="59c20-666">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="59c20-667">Das Erkennungsmodul weiterhin erfassen, die Eingabe, und der Wert von der <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> -Eigenschaft ändern.</span><span class="sxs-lookup"><span data-stu-id="59c20-667">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property can change.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59c20-668">Fordert an, dass die Erkennung anhält, um den Zustand zu aktualisieren.</span><span class="sxs-lookup"><span data-stu-id="59c20-668">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-669">Bei die Erkennung generiert die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> -Ereignis der <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> Eigenschaft von der <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> ist `null`.</span><span class="sxs-lookup"><span data-stu-id="59c20-669">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="59c20-670">Um ein Benutzertoken bereitzustellen, verwenden Sie die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-670">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="59c20-671">Verwenden Sie zum Angeben eines audioposition-Offsets der <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-671">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-672">Das folgende Beispiel zeigt eine Konsolenanwendung, die geladen und entladen wird <xref:System.Speech.Recognition.Grammar> Objekte.</span><span class="sxs-lookup"><span data-stu-id="59c20-672">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="59c20-673">Die Anwendung verwendet die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> Methode zum Anfordern der Spracherkennungsmoduls anhalten, damit sie ein Update empfangen kann.</span><span class="sxs-lookup"><span data-stu-id="59c20-673">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="59c20-674">Die Anwendung dann lädt oder Entlädt eine <xref:System.Speech.Recognition.Grammar> Objekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-674">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="59c20-675">Bei jeder Aktualisierung, einen Handler für <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> Ereignis schreibt den Namen und den Status der derzeit geladenen <xref:System.Speech.Recognition.Grammar> Objekte in die Konsole.</span><span class="sxs-lookup"><span data-stu-id="59c20-675">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="59c20-676">Wie Grammatiken geladen und entladen werden, erkennt die Anwendung zuerst die Namen der Farm Tieren auf die Namen von Tieren sowie die Namen der Früchte und dann nur die Namen von Früchten.</span><span class="sxs-lookup"><span data-stu-id="59c20-676">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="59c20-677">Benutzerdefinierte Informationen, die Informationen für den Vorgang enthalten.</span><span class="sxs-lookup"><span data-stu-id="59c20-677">User-defined information that contains information for the operation.</span></span></param>
        <summary><span data-ttu-id="59c20-678">Fordert an, dass die Erkennung anhält, um den Zustand zu aktualisieren und stellt ein Benutzertoken für das zugeordnete Ereignis bereit.</span><span class="sxs-lookup"><span data-stu-id="59c20-678">Requests that the recognizer pauses to update its state and provides a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-679">Bei die Erkennung generiert die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> -Ereignis der <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> Eigenschaft von der <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> enthält den Wert des der `userToken` Parameter.</span><span class="sxs-lookup"><span data-stu-id="59c20-679">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="59c20-680">Verwenden Sie zum Angeben eines audioposition-Offsets der <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-680">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="59c20-681">Benutzerdefinierte Informationen, die Informationen für den Vorgang enthalten.</span><span class="sxs-lookup"><span data-stu-id="59c20-681">User-defined information that contains information for the operation.</span></span></param>
        <param name="audioPositionAheadToRaiseUpdate"><span data-ttu-id="59c20-682">Der Offset von der aktuellen <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />, um die Anforderung zu verzögern.</span><span class="sxs-lookup"><span data-stu-id="59c20-682">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> to delay the request.</span></span></param>
        <summary><span data-ttu-id="59c20-683">Fordert an, dass die Erkennung anhält, um den Zustand zu aktualisieren und stellt ein Offset für das zugeordnete Ereignis bereit.</span><span class="sxs-lookup"><span data-stu-id="59c20-683">Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-684">Das Erkennungsmodul initiiert die updateanforderung für die Erkennung nicht erst der Erkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> ist gleich den aktuellen <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span><span class="sxs-lookup"><span data-stu-id="59c20-684">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span></span>  
  
 <span data-ttu-id="59c20-685">Bei die Erkennung generiert die <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> -Ereignis der <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> Eigenschaft von der <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> enthält den Wert des der `userToken` Parameter.</span><span class="sxs-lookup"><span data-stu-id="59c20-685">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetInputToAudioStream (System.IO.Stream audioSource, System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToAudioStream(class System.IO.Stream audioSource, class System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToAudioStream (audioSource As Stream, audioFormat As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToAudioStream(System::IO::Stream ^ audioSource, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ audioFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
        <Parameter Name="audioFormat" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="59c20-686">Der Audioeingabestream.</span><span class="sxs-lookup"><span data-stu-id="59c20-686">The audio input stream.</span></span></param>
        <param name="audioFormat"><span data-ttu-id="59c20-687">Das Format der Audioeingabe.</span><span class="sxs-lookup"><span data-stu-id="59c20-687">The format of the audio input.</span></span></param>
        <summary><span data-ttu-id="59c20-688">Konfiguriert das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Objekt, um Eingaben von einem Audiostream zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="59c20-688">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from an audio stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-689">Wenn die Erkennung während eines Erkennungsvorgangs das Ende des Eingabestreams erreicht ist, schließt der Erkennungsvorgang ab, mit der Eingabe zur Verfügung.</span><span class="sxs-lookup"><span data-stu-id="59c20-689">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="59c20-690">Alle nachfolgenden Erkennungsvorgänge können eine Ausnahme generiert, es sei denn, Sie aktualisieren, dass die Eingabe für die Erkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-690">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-691">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-691">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="59c20-692">Im Beispiel wird die Eingabe aus einer Audiodatei example.wav, die die Ausdrücke enthält, "testen, testen eine zwei drei" und "Mister Cooper", die durch eine Pause getrennt.</span><span class="sxs-lookup"><span data-stu-id="59c20-692">The example uses input from an audio file, example.wav, that contains the phrases, "testing testing one two three" and "mister cooper", separated by a pause.</span></span> <span data-ttu-id="59c20-693">Im Beispiel wird die folgende Ausgabe generiert.</span><span class="sxs-lookup"><span data-stu-id="59c20-693">The example generates the following output.</span></span>  
  
```  
  
Starting asynchronous recognition...  
  Recognized text =  Testing testing 123  
  Recognized text =  Mr. Cooper  
  End of stream encountered.  
Done.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.IO;  
using System.Speech.AudioFormat;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InputExamples  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToAudioStream(  
          File.OpenRead(@"c:\temp\audioinput\example.wav"),  
          new SpeechAudioFormatInfo(  
            44100, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Perform recognition of the whole file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetInputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToDefaultAudioDevice();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59c20-694">Konfiguriert das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Objekt, um Eingaben vom StandardAudiogerät zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="59c20-694">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from the default audio device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="59c20-695">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die grundlegende Spracherkennung veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-695">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="59c20-696">Das Beispiel verwendet eine Ausgabe aus dem Standard-Audiogeräts, führt mehrere asynchrone Erkennungsvorgänge und wird beendet, wenn ein Benutzer den Ausdruck utters "exit".</span><span class="sxs-lookup"><span data-stu-id="59c20-696">The example uses output from the default audio device, performs multiple, asynchronous recognition operations, and exits when a user utters the phrase, "exit".</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace DefaultInput  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition has finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load the exit grammar.  
        Grammar exitGrammar = new Grammar(new GrammarBuilder("exit"));  
        exitGrammar.Name = "Exit Grammar";  
        recognizer.LoadGrammar(exitGrammar);  
  
        // Create and load the dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers to the recognizer.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Begin asynchronous recognition.  
        Console.WriteLine("Starting recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait for recognition to finish.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized:");  
      string grammarName = "<not available>";  
      if (e.Result.Grammar.Name != null &&  
        !e.Result.Grammar.Name.Equals(string.Empty))  
      {  
        grammarName = e.Result.Grammar.Name;  
      }  
      Console.WriteLine("    {0,-17} - {1}",  
        grammarName, e.Result.Text);  
  
      if (grammarName.Equals("Exit Grammar"))  
      {  
        ((SpeechRecognitionEngine)sender).RecognizeAsyncCancel();  
      }  
    }  
  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("  Recognition completed.");  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToNull">
      <MemberSignature Language="C#" Value="public void SetInputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59c20-697">Deaktiviert die Eingabe zur Spracherkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-697">Disables the input to the speech recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-698">Konfigurieren der <xref:System.Speech.Recognition.SpeechRecognitionEngine> Objekt für die keine Eingabe bei Verwendung der <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Methoden, oder wenn ein Erkennungsmodul vorübergehend offline dauert.</span><span class="sxs-lookup"><span data-stu-id="59c20-698">Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetInputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveFile(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="59c20-699">Der Pfad der Datei, die als Eingabe verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="59c20-699">The path of the file to use as input.</span></span></param>
        <summary><span data-ttu-id="59c20-700">Konfiguriert das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Objekt, um Eingaben von einer Datei im Waveform-Audioformat (.wav) zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="59c20-700">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a Waveform audio format (.wav) file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-701">Wenn während eines Erkennungsvorgangs das Ende der Eingabedatei für die Erkennung erreicht hat, schließt der Erkennungsvorgang ab, mit der Eingabe zur Verfügung.</span><span class="sxs-lookup"><span data-stu-id="59c20-701">If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="59c20-702">Alle nachfolgenden Erkennungsvorgänge können eine Ausnahme generiert, es sei denn, Sie aktualisieren, dass die Eingabe für die Erkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-702">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-703">Im folgenden Beispiel führt eine Erkennung für das Audio in eine WAV-Datei und den erkannten Text in die Konsole geschrieben.</span><span class="sxs-lookup"><span data-stu-id="59c20-703">The following example performs recognition on the audio in a .wav file and writes the recognized text to the console.</span></span>  
  
```  
using System;  
using System.IO;  
using System.Speech.Recognition;  
using System.Speech.AudioFormat;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
recognizer.SetInputToWaveFile(@"c:\temp\SampleWAVInput.wav");  
  
        // Attach event handlers for the results of recognition.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizeCompleted +=   
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
  
        // Perform recognition on the entire file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        while (!completed)  
        {  
          Console.ReadLine();  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
        e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetInputToWaveStream (System.IO.Stream audioSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveStream(class System.IO.Stream audioSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveStream (audioSource As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveStream(System::IO::Stream ^ audioSource);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="59c20-704">Der Stream, der die Audiodaten enthält.</span><span class="sxs-lookup"><span data-stu-id="59c20-704">The stream containing the audio data.</span></span></param>
        <summary><span data-ttu-id="59c20-705">Konfiguriert das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Objekt, um Eingaben von einem Stream zu erhalten, der Daten im Waveform-Audioformat (.wav) enthält.</span><span class="sxs-lookup"><span data-stu-id="59c20-705">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a stream that contains Waveform audio format (.wav) data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-706">Wenn die Erkennung während eines Erkennungsvorgangs das Ende des Eingabestreams erreicht ist, schließt der Erkennungsvorgang ab, mit der Eingabe zur Verfügung.</span><span class="sxs-lookup"><span data-stu-id="59c20-706">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="59c20-707">Alle nachfolgenden Erkennungsvorgänge können eine Ausnahme generiert, es sei denn, Sie aktualisieren, dass die Eingabe für die Erkennung.</span><span class="sxs-lookup"><span data-stu-id="59c20-707">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-708">Wird ausgelöst, wenn das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> eine Eingabe erkennt, die es als Sprache identifizieren kann.</span><span class="sxs-lookup"><span data-stu-id="59c20-708">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects input that it can identify as speech.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-709">Jede von der Spracherkennung verfügt über einen Algorithmus, um die Unterscheidung zwischen Ruhe und Sprache.</span><span class="sxs-lookup"><span data-stu-id="59c20-709">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="59c20-710">Wenn die <xref:System.Speech.Recognition.SpeechRecognitionEngine> führt ein Erkennungsvorgang Spracherkennung löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> Ereignis aus, wenn der Algorithmus die Eingabe als Sprache identifiziert.</span><span class="sxs-lookup"><span data-stu-id="59c20-710">When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event when its algorithm identifies the input as speech.</span></span> <span data-ttu-id="59c20-711">Die <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> Eigenschaft der zugeordneten <xref:System.Speech.Recognition.SpeechDetectedEventArgs> Objekt gibt an, Speicherort im Eingabedatenstrom, auf denen die Erkennung Spracherkennung erkannt.</span><span class="sxs-lookup"><span data-stu-id="59c20-711">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="59c20-712">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine> löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> Ereignis vor es keines löst der <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> Ereignisse.</span><span class="sxs-lookup"><span data-stu-id="59c20-712">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events.</span></span>  
  
 <span data-ttu-id="59c20-713">Weitere Informationen finden Sie unter der <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-713">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="59c20-714">Beim Erstellen eines <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>-Delegaten bestimmen Sie die Methode für die Ereignisbehandlung.</span><span class="sxs-lookup"><span data-stu-id="59c20-714">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="59c20-715">Um dem Ereignishandler das Ereignis zuzuordnen, fügen Sie dem Ereignis eine Instanz des Delegaten hinzu.</span><span class="sxs-lookup"><span data-stu-id="59c20-715">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="59c20-716">Der Ereignishandler wird bei jedem Eintreten des Ereignisses aufgerufen, sofern der Delegat nicht entfernt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-716">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="59c20-717">Weitere Informationen über Delegaten für Ereignishandler finden Sie unter [Ereignissen und Delegaten](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="59c20-717">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-718">Im folgende Beispiel ist Teil einer Konsolenanwendung für ein Flug Ursprungs- und Zielort Orte auswählen.</span><span class="sxs-lookup"><span data-stu-id="59c20-718">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="59c20-719">Die Anwendung erkennt Ausdrücke an, wie z. B. "Ich möchte von Miami aus Chicago, fliegen."</span><span class="sxs-lookup"><span data-stu-id="59c20-719">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="59c20-720">Im Beispiel wird die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> Ereignis Bericht die <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> jedes Mal Sprache erkannt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-720">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("  Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-721">Wird ausgelöst, wenn das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> ein Wort oder Wörter erkannt hat, die möglicherweise eine Komponente von mehreren vollständigen Ausdrücken in einer Grammatik sind.</span><span class="sxs-lookup"><span data-stu-id="59c20-721">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-722">Die <xref:System.Speech.Recognition.SpeechRecognitionEngine> generiert zahlreiche <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> Ereignisse, wie er versucht, einen input-Ausdruck zu identifizieren.</span><span class="sxs-lookup"><span data-stu-id="59c20-722">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> events as it attempts to identify an input phrase.</span></span> <span data-ttu-id="59c20-723">Sie erreichen den Text der teilweise erkannten Zeichenfolgen in die <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> Eigenschaft von der <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> Objekt im Handler für die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-723">You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event.</span></span> <span data-ttu-id="59c20-724">Diese Ereignisse behandeln wird in der Regel nur zum Debuggen nützlich.</span><span class="sxs-lookup"><span data-stu-id="59c20-724">Typically, handling these events is useful only for debugging.</span></span>  
  
 <span data-ttu-id="59c20-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> wird von <xref:System.Speech.Recognition.RecognitionEventArgs> abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="59c20-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="59c20-726">Weitere Informationen finden Sie unter der <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Eigenschaft und die <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-726">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="59c20-727">Beim Erstellen eines <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>-Delegaten bestimmen Sie die Methode für die Ereignisbehandlung.</span><span class="sxs-lookup"><span data-stu-id="59c20-727">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="59c20-728">Um dem Ereignishandler das Ereignis zuzuordnen, fügen Sie dem Ereignis eine Instanz des Delegaten hinzu.</span><span class="sxs-lookup"><span data-stu-id="59c20-728">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="59c20-729">Der Ereignishandler wird bei jedem Eintreten des Ereignisses aufgerufen, sofern der Delegat nicht entfernt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-729">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="59c20-730">Weitere Informationen über Delegaten für Ereignishandler finden Sie unter [Ereignissen und Delegaten](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="59c20-730">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-731">Im folgende Beispiel erkennt Ausdrücke wie z. B. "Die Liste der Künstler in der Kategorie" jazz "anzeigen".</span><span class="sxs-lookup"><span data-stu-id="59c20-731">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="59c20-732">Im Beispiel wird die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> Ereignis, um unvollständige Ausdruck Fragmente in der Konsole angezeigt, wie sie erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="59c20-732">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine();   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-733">Wird ausgelöst, wenn das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> eine Eingabe empfängt, die mit keinem seiner geladenen und aktivierten <see cref="T:System.Speech.Recognition.Grammar" />-Objekte übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="59c20-733">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that does not match any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-734">Das Erkennungsmodul löst dieses Ereignis aus, wenn es feststellt, dass die Eingabe mit ausreichend geladen und aktiviert entspricht keiner <xref:System.Speech.Recognition.Grammar> Objekte.</span><span class="sxs-lookup"><span data-stu-id="59c20-734">The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="59c20-735">Die <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> Eigenschaft von der <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> enthält die abgelehnte <xref:System.Speech.Recognition.RecognitionResult> Objekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-735">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="59c20-736">Können Sie den Handler für das <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> Ereignis abzurufenden Recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> , die abgelehnt wurden und ihre <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> Bewertungen.</span><span class="sxs-lookup"><span data-stu-id="59c20-736">You can use the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.</span></span>  
  
 <span data-ttu-id="59c20-737">Wenn die Anwendung Parallelität mit einer <xref:System.Speech.Recognition.SpeechRecognitionEngine> Instanz können Sie den Vertrauensgrad, welche Sprache Eingabe akzeptiert oder abgelehnt wird, mit einem der, Ändern der <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-737">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="59c20-738">Sie können ändern, wie die Spracherkennung auf nicht-Sprache Eingaben mithilfe reagiert die <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="59c20-738">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="59c20-739">Beim Erstellen eines <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>-Delegaten bestimmen Sie die Methode für die Ereignisbehandlung.</span><span class="sxs-lookup"><span data-stu-id="59c20-739">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="59c20-740">Um dem Ereignishandler das Ereignis zuzuordnen, fügen Sie dem Ereignis eine Instanz des Delegaten hinzu.</span><span class="sxs-lookup"><span data-stu-id="59c20-740">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="59c20-741">Der Ereignishandler wird bei jedem Eintreten des Ereignisses aufgerufen, sofern der Delegat nicht entfernt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-741">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="59c20-742">Weitere Informationen über Delegaten für Ereignishandler finden Sie unter [Ereignissen und Delegaten](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="59c20-742">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-743">Im folgende Beispiel erkennt Ausdrücke wie z. B. "Zeigt eine Liste der Künstler in der Kategorie jazz" oder "Alben Gospel anzeigen".</span><span class="sxs-lookup"><span data-stu-id="59c20-743">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="59c20-744">Im Beispiel wird einen Handler für das <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> Ereignis, um eine Benachrichtigung in der Konsole angezeigt, wenn die Spracherkennung Eingabe kann nicht zugeordnet werden, um den Inhalt der Grammatik mit ausreichenden <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> um einen erfolgreichen Erkennung zu erzeugen.</span><span class="sxs-lookup"><span data-stu-id="59c20-744">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> to produce a successful recognition.</span></span> <span data-ttu-id="59c20-745">Der Ereignishandler zeigt auch die Anerkennung Ergebnis <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> , die aufgrund von wenig vertrauensergebnisse abgelehnt wurden.</span><span class="sxs-lookup"><span data-stu-id="59c20-745">The handler also displays recognition result <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected because of low confidence scores.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
      foreach (RecognizedPhrase phrase in e.Result.Alternates)  
      {  
      Console.WriteLine("  Rejected phrase: " + phrase.Text);  
      Console.WriteLine("  Confidence score: " + phrase.Confidence);  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="59c20-746">Wird ausgelöst, wenn das <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> eine Eingabe empfängt, die mit einem seiner geladenen und aktivierten <see cref="T:System.Speech.Recognition.Grammar" />-Objekte übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="59c20-746">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that matches any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-747">Sie können eine mit einer der Erkennungsvorgang Initiieren der <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> oder <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-747">You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span> <span data-ttu-id="59c20-748">Das Erkennungsmodul löst die <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> -Ereignis, wenn es feststellt, dass die Eingabe mindesten einem der geladenen <xref:System.Speech.Recognition.Grammar> Objekte mit einen ausreichenden Grad an Vertrauen Recognition bilden.</span><span class="sxs-lookup"><span data-stu-id="59c20-748">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition.</span></span> <span data-ttu-id="59c20-749">Die <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> Eigenschaft von der <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> enthält die akzeptierte <xref:System.Speech.Recognition.RecognitionResult> Objekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-749">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="59c20-750">Handler des <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignisse erhalten dem erkannten Ausdruck als auch eine Liste der Recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> mit niedrigeren vertrauensergebnisse.</span><span class="sxs-lookup"><span data-stu-id="59c20-750">Handlers of <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores.</span></span>  
  
 <span data-ttu-id="59c20-751">Wenn die Anwendung Parallelität mit einer <xref:System.Speech.Recognition.SpeechRecognitionEngine> Instanz können Sie den Vertrauensgrad, welche Sprache Eingabe akzeptiert oder abgelehnt wird, mit einem der, Ändern der <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="59c20-751">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  <span data-ttu-id="59c20-752">Sie können ändern, wie die Spracherkennung auf nicht-Sprache Eingaben mithilfe reagiert die <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="59c20-752">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="59c20-753">Wenn die Erkennung Eingabe erhält, die eine Grammatik entspricht der <xref:System.Speech.Recognition.Grammar> Objekt auslösen kann seine <xref:System.Speech.Recognition.Grammar.SpeechRecognized> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-753">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="59c20-754">Die <xref:System.Speech.Recognition.Grammar> des Objekts <xref:System.Speech.Recognition.Grammar.SpeechRecognized> Ereignis wird ausgelöst, bevor der Spracherkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-754">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="59c20-755">Alle Aufgaben, die spezifisch für eine bestimmte Grammatik sollten immer ausgeführt werden, von einem Handler für das <xref:System.Speech.Recognition.Grammar.SpeechRecognized> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-755">Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="59c20-756">Beim Erstellen eines <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>-Delegaten bestimmen Sie die Methode für die Ereignisbehandlung.</span><span class="sxs-lookup"><span data-stu-id="59c20-756">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="59c20-757">Um dem Ereignishandler das Ereignis zuzuordnen, fügen Sie dem Ereignis eine Instanz des Delegaten hinzu.</span><span class="sxs-lookup"><span data-stu-id="59c20-757">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="59c20-758">Der Ereignishandler wird bei jedem Eintreten des Ereignisses aufgerufen, sofern der Delegat nicht entfernt wird.</span><span class="sxs-lookup"><span data-stu-id="59c20-758">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="59c20-759">Weitere Informationen über Delegaten für Ereignishandler finden Sie unter [Ereignissen und Delegaten](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="59c20-759">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-760">Das folgende Beispiel ist Teil einer Konsolenanwendung, die Spracherkennung Recognition Grammatik Konstrukte erstellt eine <xref:System.Speech.Recognition.Grammar> Objekt, und lädt sie in der <xref:System.Speech.Recognition.SpeechRecognitionEngine> Recognition ausführen.</span><span class="sxs-lookup"><span data-stu-id="59c20-760">The following example is part of a console application that creates speech recognition grammar, constructs a <xref:System.Speech.Recognition.Grammar> object, and loads it into the <xref:System.Speech.Recognition.SpeechRecognitionEngine> to perform recognition.</span></span> <span data-ttu-id="59c20-761">Im Beispiel wird veranschaulicht, Spracheingabe für eine <xref:System.Speech.Recognition.SpeechRecognitionEngine>, die zugeordneten Erkennungsergebnisse und die zugeordneten Ereignissen, die von der von der Spracherkennung ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="59c20-761">The example demonstrates speech input to a <xref:System.Speech.Recognition.SpeechRecognitionEngine>, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
 <span data-ttu-id="59c20-762">Eingabe gesprochen, z. B. "Ich möchte von Chicago nach Miami fliegen" ausgelöst werden ein <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-762">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="59c20-763">Sprechen den Ausdruck "Fliegen me aus Houston nach Chicago" wird nicht ausgelöst, eine <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="59c20-763">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="59c20-764">Im Beispiel wird einen Handler für das <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Ereignis anzuzeigenden erfolgreich erkannt wird, Ausdrücke und die Semantik, die sie in der Konsole enthalten.</span><span class="sxs-lookup"><span data-stu-id="59c20-764">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="59c20-765">Entlädt alle <see cref="T:System.Speech.Recognition.Grammar" />-Objekte aus des Erkennungsmodul.</span><span class="sxs-lookup"><span data-stu-id="59c20-765">Unloads all <see cref="T:System.Speech.Recognition.Grammar" /> objects from the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-766">Wenn zurzeit die Erkennung lädt einer <xref:System.Speech.Recognition.Grammar> asynchron ausgeführt wird, diese Methode wartet, bis die <xref:System.Speech.Recognition.Grammar> geladen wird, bevor alle Entladen der <xref:System.Speech.Recognition.Grammar> Objekte aus der <xref:System.Speech.Recognition.SpeechRecognitionEngine> Instanz.</span><span class="sxs-lookup"><span data-stu-id="59c20-766">If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="59c20-767">Verwenden Sie zum Entladen einer bestimmten Grammatik der <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-767">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-768">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die das synchrone laden und Entladen von Spracherkennung Recognition Grammatiken veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-768">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="59c20-769">Das zu entladene Grammatikobjekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-769">The grammar object to unload.</span></span></param>
        <summary><span data-ttu-id="59c20-770">Entlädt ein angegebenes <see cref="T:System.Speech.Recognition.Grammar" />-Objekt aus der <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="59c20-770">Unloads a specified <see cref="T:System.Speech.Recognition.Grammar" /> object from the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-771">Wenn die Erkennung ausgeführt wird, müssen die Anwendungen verwenden <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> Anhalten der <xref:System.Speech.Recognition.SpeechRecognitionEngine> -Instanz vor dem Laden, entladen, aktivieren oder Deaktivieren einer <xref:System.Speech.Recognition.Grammar> Objekt.</span><span class="sxs-lookup"><span data-stu-id="59c20-771">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="59c20-772">Alle entladen <xref:System.Speech.Recognition.Grammar> Objekte, verwenden die <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-772">To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-773">Das folgende Beispiel zeigt einen Teil einer Konsolenanwendung, die das synchrone laden und Entladen von Spracherkennung Recognition Grammatiken veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="59c20-773">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-774"><paramref name="Grammar" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-774"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="59c20-775">Die Grammatik wird nicht in dieses Erkennungsmodul geladen, oder das Erkennungsmodul lädt gerade die Grammatik asynchron.</span><span class="sxs-lookup"><span data-stu-id="59c20-775">The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateRecognizerSetting">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="59c20-776">Aktualisiert den Wert einer Einstellung für das Erkennungsmodul.</span><span class="sxs-lookup"><span data-stu-id="59c20-776">Updates the value of a setting for the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-777">Erkennung Einstellungen können Zeichenfolge, 64-Bit-Ganzzahl oder Arbeitsspeicher-Adressdaten enthalten.</span><span class="sxs-lookup"><span data-stu-id="59c20-777">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="59c20-778">Die folgende Tabelle beschreibt die Einstellungen, die für eine Microsoft-Speech-API (SAPI) definiert sind – Erkennung kompatibel.</span><span class="sxs-lookup"><span data-stu-id="59c20-778">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="59c20-779">Die folgenden Einstellungen benötigen denselben Bereich für jeden Erkennungsmodul, die die Einstellung unterstützt.</span><span class="sxs-lookup"><span data-stu-id="59c20-779">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="59c20-780">Eine SAPI-kompatible Erkennungsmodul ist nicht erforderlich, diese Einstellungen unterstützt und kann andere Einstellungen unterstützen.</span><span class="sxs-lookup"><span data-stu-id="59c20-780">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="59c20-781">name</span><span class="sxs-lookup"><span data-stu-id="59c20-781">Name</span></span>|<span data-ttu-id="59c20-782">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="59c20-782">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="59c20-783">Gibt die Erkennung CPU-Auslastung an.</span><span class="sxs-lookup"><span data-stu-id="59c20-783">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="59c20-784">Der Bereich liegt zwischen 0 und 100.</span><span class="sxs-lookup"><span data-stu-id="59c20-784">The range is from 0 to 100.</span></span> <span data-ttu-id="59c20-785">Der Standardwert ist 50.</span><span class="sxs-lookup"><span data-stu-id="59c20-785">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="59c20-786">Gibt die Länge der Pause am Ende der Eingabe eindeutig an, bevor die von der Spracherkennung ein Erkennungsvorgangs abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-786">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="59c20-787">Der Bereich liegt zwischen 0 und 10.000 Millisekunden (ms).</span><span class="sxs-lookup"><span data-stu-id="59c20-787">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="59c20-788">Diese Einstellung bezieht sich auf der Erkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-788">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span> <span data-ttu-id="59c20-789">Standard = 150ms.</span><span class="sxs-lookup"><span data-stu-id="59c20-789">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="59c20-790">Gibt die Länge der Pause in Millisekunden (ms) am Ende der mehrdeutigen Eingaben an, bevor die von der Spracherkennung ein Erkennungsvorgangs abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="59c20-790">Indicates the length of silence in milliseconds (ms) at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="59c20-791">Der Bereich liegt zwischen 0 und 10.000 ms.</span><span class="sxs-lookup"><span data-stu-id="59c20-791">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="59c20-792">Diese Einstellung bezieht sich auf der Erkennung <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="59c20-792">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="59c20-793">Standard = 500 ms.</span><span class="sxs-lookup"><span data-stu-id="59c20-793">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="59c20-794">Gibt an, ob die Anpassung des Modells acoustic auf ON festgelegt ist (Wert = `1`) oder OFF (Wert = `0`).</span><span class="sxs-lookup"><span data-stu-id="59c20-794">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="59c20-795">Der Standardwert ist `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="59c20-795">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="59c20-796">Gibt an, ob die Anpassung im Hintergrund auf ON festgelegt ist (Wert = `1`) oder OFF (Wert = `0`), und speichert die Einstellung in der Registrierung.</span><span class="sxs-lookup"><span data-stu-id="59c20-796">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="59c20-797">Der Standardwert ist `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="59c20-797">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="59c20-798">Um eine der Einstellungen für die Erkennung zurückzugeben, verwenden die <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="59c20-798">To return one of the recognizer's settings, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> method.</span></span>  
  
 <span data-ttu-id="59c20-799">Mit Ausnahme von `PersistedBackgroundAdaptation`, Eigenschaftswerte, die festlegen, mit der <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> Methoden behalten ihre Gültigkeit nur für die aktuelle Instanz von <xref:System.Speech.Recognition.SpeechRecognitionEngine>, nach denen sie auf die Standardeinstellungen zurückgesetzt.</span><span class="sxs-lookup"><span data-stu-id="59c20-799">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span>  
  
 <span data-ttu-id="59c20-800">Sie können ändern, wie die Spracherkennung auf nicht-Sprache Eingaben mithilfe reagiert die <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, und <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="59c20-800">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, int updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, int32 updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, int updatedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="59c20-801">Der Name der zu aktualisierenden Einstellung.</span><span class="sxs-lookup"><span data-stu-id="59c20-801">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="59c20-802">Der neue Wert der Einstellung.</span><span class="sxs-lookup"><span data-stu-id="59c20-802">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="59c20-803">Aktualisiert die angegebene Einstellung für die <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> mit dem angegebenen ganzzahligen Wert.</span><span class="sxs-lookup"><span data-stu-id="59c20-803">Updates the specified setting for the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> with the specified integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-804">Mit Ausnahme von `PersistedBackgroundAdaptation`, Eigenschaftswerte, die festlegen, mit der <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> Methode behalten ihre Gültigkeit nur für die aktuelle Instanz von <xref:System.Speech.Recognition.SpeechRecognitionEngine>, nach denen sie auf die Standardeinstellungen zurückgesetzt.</span><span class="sxs-lookup"><span data-stu-id="59c20-804">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="59c20-805">Finden Sie unter <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> Beschreibungen der unterstützten Einstellungen.</span><span class="sxs-lookup"><span data-stu-id="59c20-805">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59c20-806">Im folgende Beispiel ist Teil einer Konsolenanwendung, die die Werte für eine Reihe von den Einstellungen für die Erkennung, die das Gebietsschema En-US unterstützt definierten ausgibt.</span><span class="sxs-lookup"><span data-stu-id="59c20-806">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="59c20-807">Im Beispiel aktualisiert die Einstellungen für die Zuverlässigkeit und fragt dann die Erkennung, um die aktualisierten Werte zu überprüfen.</span><span class="sxs-lookup"><span data-stu-id="59c20-807">The example updates the confidence level settings, and then queries the recognizer to check the updated values.</span></span> <span data-ttu-id="59c20-808">Im Beispiel wird die folgende Ausgabe generiert.</span><span class="sxs-lookup"><span data-stu-id="59c20-808">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Updated settings:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 200  
  ComplexResponseSpeed           = 300  
  AdaptationOn                   = 0  
  PersistedBackgroundAdaptation  = 0  
  
Press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation",  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        // List the current settings.  
        ListSettings(recognizer);  
  
        // Change some of the settings.  
        recognizer.UpdateRecognizerSetting("ResponseSpeed", 200);  
        recognizer.UpdateRecognizerSetting("ComplexResponseSpeed", 300);  
        recognizer.UpdateRecognizerSetting("AdaptationOn", 1);  
        recognizer.UpdateRecognizerSetting("PersistedBackgroundAdaptation", 0);  
  
        Console.WriteLine("Updated settings:");  
        Console.WriteLine();  
  
        // List the updated settings.  
        ListSettings(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListSettings(SpeechRecognitionEngine recognizer)  
    {  
      foreach (string setting in settings)  
      {  
        try  
        {  
          object value = recognizer.QueryRecognizerSetting(setting);  
          Console.WriteLine("  {0,-30} = {1}", setting, value);  
        }  
        catch  
        {  
          Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
            setting);  
        }  
      }  
      Console.WriteLine();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-809"><paramref name="settingName" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-809"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="59c20-810"><paramref name="settingName" /> ist die leere Zeichenfolge ("").</span><span class="sxs-lookup"><span data-stu-id="59c20-810"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="59c20-811">Die Erkennung verfügt über keine Einstellung mit diesem Namen.</span><span class="sxs-lookup"><span data-stu-id="59c20-811">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, string updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, string updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, System::String ^ updatedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="59c20-812">Der Name der zu aktualisierenden Einstellung.</span><span class="sxs-lookup"><span data-stu-id="59c20-812">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="59c20-813">Der neue Wert der Einstellung.</span><span class="sxs-lookup"><span data-stu-id="59c20-813">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="59c20-814">Aktualisiert die angegebene Spracherkennungsmoduleinstellung mit dem angegebenen Zeichenfolgenwert.</span><span class="sxs-lookup"><span data-stu-id="59c20-814">Updates the specified speech recognition engine setting with the specified string value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59c20-815">Mit Ausnahme von `PersistedBackgroundAdaptation`, Eigenschaftswerte, die festlegen, mit der <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> Methode behalten ihre Gültigkeit nur für die aktuelle Instanz von <xref:System.Speech.Recognition.SpeechRecognitionEngine>, nach denen sie auf die Standardeinstellungen zurückgesetzt.</span><span class="sxs-lookup"><span data-stu-id="59c20-815">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="59c20-816">Finden Sie unter <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> Beschreibungen der unterstützten Einstellungen.</span><span class="sxs-lookup"><span data-stu-id="59c20-816">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59c20-817"><paramref name="settingName" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="59c20-817"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="59c20-818"><paramref name="settingName" /> ist die leere Zeichenfolge ("").</span><span class="sxs-lookup"><span data-stu-id="59c20-818"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="59c20-819">Die Erkennung verfügt über keine Einstellung mit diesem Namen.</span><span class="sxs-lookup"><span data-stu-id="59c20-819">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
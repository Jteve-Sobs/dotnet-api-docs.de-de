<Type Name="Utf8Parser" FullName="System.Buffers.Text.Utf8Parser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5d78780112fafda36f9e5cefd47832fcb7b0879e" /><Meta Name="ms.sourcegitcommit" Value="cfc0e4215fd0d259582ada2141878befd7c3c8c6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/12/2019" /><Meta Name="ms.locfileid" Value="67854581" /></Metadata><TypeSignature Language="C#" Value="public static class Utf8Parser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Utf8Parser extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.Text.Utf8Parser" />
  <TypeSignature Language="VB.NET" Value="Public Class Utf8Parser" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8Parser abstract sealed" />
  <TypeSignature Language="F#" Value="type Utf8Parser = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="63a19-101">Bietet statische Methoden zum Analysieren von UTF8-Zeichenfolgen in allgemeine Datentypen.</span><span class="sxs-lookup"><span data-stu-id="63a19-101">Provides static methods to parse Utf8 strings to common data types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out bool value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] bool&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Boolean, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-102">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-102">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-103">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-103">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-104">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-104">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-105">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-105">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-106">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-106">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-107">Analysiert einen <see cref="T:System.Boolean" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-107">Parses a <see cref="T:System.Boolean" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-108"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-108"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-109">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-109">Formats supported:</span></span> 

|<span data-ttu-id="63a19-110">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-110">Format string</span></span>|<span data-ttu-id="63a19-111">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-111">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="63a19-112">G (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-112">G (default)</span></span>|<span data-ttu-id="63a19-113">Wahr/falsch</span><span class="sxs-lookup"><span data-stu-id="63a19-113">True/False</span></span>|
|<span data-ttu-id="63a19-114">l</span><span class="sxs-lookup"><span data-stu-id="63a19-114">l</span></span>|<span data-ttu-id="63a19-115">Wahr/falsch</span><span class="sxs-lookup"><span data-stu-id="63a19-115">true/false</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out byte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Byte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Byte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-116">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-116">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-117">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-117">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-118">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-118">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-119">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-119">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-120">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-120">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-121">Analysiert einen <see cref="T:System.Byte" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-121">Parses a <see cref="T:System.Byte" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-122"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-122"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-123">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-123">Formats supported:</span></span> 

|<span data-ttu-id="63a19-124">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-124">Format string</span></span>|<span data-ttu-id="63a19-125">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-125">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="63a19-126">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-126">G/g (default)</span></span>| |
|<span data-ttu-id="63a19-127">D/d</span><span class="sxs-lookup"><span data-stu-id="63a19-127">D/d</span></span>|<span data-ttu-id="63a19-128">122</span><span class="sxs-lookup"><span data-stu-id="63a19-128">122</span></span>|
|<span data-ttu-id="63a19-129">N/n</span><span class="sxs-lookup"><span data-stu-id="63a19-129">N/n</span></span>|<span data-ttu-id="63a19-130">122</span><span class="sxs-lookup"><span data-stu-id="63a19-130">122</span></span>|       
|<span data-ttu-id="63a19-131">X/x</span><span class="sxs-lookup"><span data-stu-id="63a19-131">X/x</span></span>|<span data-ttu-id="63a19-132">7a</span><span class="sxs-lookup"><span data-stu-id="63a19-132">7a</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTime value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTime&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTime, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-133">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-133">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-134">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-134">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-135">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-135">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-136">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-136">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-137">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-137">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-138">Analysiert einen <see cref="T:System.DateTime" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-138">Parses a <see cref="T:System.DateTime" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-139"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-139"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-140">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-140">Formats supported:</span></span>

|<span data-ttu-id="63a19-141">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-141">Format string</span></span>|<span data-ttu-id="63a19-142">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-142">Example expected format</span></span>|<span data-ttu-id="63a19-143">Kommentare</span><span class="sxs-lookup"><span data-stu-id="63a19-143">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="63a19-144">G (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-144">G  (default)</span></span>|<span data-ttu-id="63a19-145">05/25/2017 10:30:15</span><span class="sxs-lookup"><span data-stu-id="63a19-145">05/25/2017 10:30:15</span></span>| |
|<span data-ttu-id="63a19-146">R</span><span class="sxs-lookup"><span data-stu-id="63a19-146">R</span></span>|<span data-ttu-id="63a19-147">Tue, 03 Januar 2017 08:08:05 Uhr GMT</span><span class="sxs-lookup"><span data-stu-id="63a19-147">Tue, 03 Jan 2017 08:08:05 GMT</span></span>|<span data-ttu-id="63a19-148">(RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="63a19-148">(RFC 1123)</span></span>|
|<span data-ttu-id="63a19-149">l</span><span class="sxs-lookup"><span data-stu-id="63a19-149">l</span></span>|<span data-ttu-id="63a19-150">tue, 03 Januar 2017 08:08:05 Uhr gmt</span><span class="sxs-lookup"><span data-stu-id="63a19-150">tue, 03 jan 2017 08:08:05 gmt</span></span>|<span data-ttu-id="63a19-151">(Kleinbuchstaben RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="63a19-151">(Lowercase RFC 1123)</span></span>|
|<span data-ttu-id="63a19-152">O</span><span class="sxs-lookup"><span data-stu-id="63a19-152">O</span></span>|<span data-ttu-id="63a19-153">2017-06-12T05:30:45.7680000-07:00</span><span class="sxs-lookup"><span data-stu-id="63a19-153">2017-06-12T05:30:45.7680000-07:00</span></span>|<span data-ttu-id="63a19-154">(Zurückführbar)</span><span class="sxs-lookup"><span data-stu-id="63a19-154">(Round-trippable)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTimeOffset value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTimeOffset&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTimeOffset, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-155">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-155">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-156">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-156">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-157">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-157">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-158">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-158">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-159">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-159">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-160">Analysiert einen <see cref="T:System.DateTimeOffset" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-160">Parses a <see cref="T:System.DateTimeOffset" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-161"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-161"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-162">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-162">Formats supported:</span></span>

|<span data-ttu-id="63a19-163">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-163">Format string</span></span>|<span data-ttu-id="63a19-164">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-164">Example expected format</span></span>|<span data-ttu-id="63a19-165">Kommentare</span><span class="sxs-lookup"><span data-stu-id="63a19-165">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="63a19-166">G (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-166">G  (default)</span></span>|<span data-ttu-id="63a19-167">05/25/2017 10:30:15</span><span class="sxs-lookup"><span data-stu-id="63a19-167">05/25/2017 10:30:15</span></span>| |
|<span data-ttu-id="63a19-168">R</span><span class="sxs-lookup"><span data-stu-id="63a19-168">R</span></span>|<span data-ttu-id="63a19-169">Tue, 03 Januar 2017 08:08:05 Uhr GMT</span><span class="sxs-lookup"><span data-stu-id="63a19-169">Tue, 03 Jan 2017 08:08:05 GMT</span></span>|<span data-ttu-id="63a19-170">(RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="63a19-170">(RFC 1123)</span></span>|
|<span data-ttu-id="63a19-171">l</span><span class="sxs-lookup"><span data-stu-id="63a19-171">l</span></span>|<span data-ttu-id="63a19-172">tue, 03 Januar 2017 08:08:05 Uhr gmt</span><span class="sxs-lookup"><span data-stu-id="63a19-172">tue, 03 jan 2017 08:08:05 gmt</span></span>|<span data-ttu-id="63a19-173">(Kleinbuchstaben RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="63a19-173">(Lowercase RFC 1123)</span></span>|
|<span data-ttu-id="63a19-174">O</span><span class="sxs-lookup"><span data-stu-id="63a19-174">O</span></span>|<span data-ttu-id="63a19-175">2017-06-12T05:30:45.7680000-07:00</span><span class="sxs-lookup"><span data-stu-id="63a19-175">2017-06-12T05:30:45.7680000-07:00</span></span>|<span data-ttu-id="63a19-176">(Zurückführbar)</span><span class="sxs-lookup"><span data-stu-id="63a19-176">(Round-trippable)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out decimal value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Decimal&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Decimal, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-177">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-177">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-178">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-178">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-179">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-179">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-180">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-180">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-181">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-181">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-182">Analysiert einen <see cref="T:System.Decimal" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-182">Parses a <see cref="T:System.Decimal" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-183"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-183"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-184">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-184">Formats supported:</span></span>

|<span data-ttu-id="63a19-185">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-185">Format string</span></span>|<span data-ttu-id="63a19-186">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-186">Example expected format</span></span>|<span data-ttu-id="63a19-187">Kommentare</span><span class="sxs-lookup"><span data-stu-id="63a19-187">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="63a19-188">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-188">G/g  (default)</span></span>| |  
|<span data-ttu-id="63a19-189">F/f</span><span class="sxs-lookup"><span data-stu-id="63a19-189">F/f</span></span>|<span data-ttu-id="63a19-190">12.45</span><span class="sxs-lookup"><span data-stu-id="63a19-190">12.45</span></span>|<span data-ttu-id="63a19-191">Fixpunkt</span><span class="sxs-lookup"><span data-stu-id="63a19-191">Fixed point</span></span>|
|<span data-ttu-id="63a19-192">E/e</span><span class="sxs-lookup"><span data-stu-id="63a19-192">E/e</span></span>|<span data-ttu-id="63a19-193">1.245000e1</span><span class="sxs-lookup"><span data-stu-id="63a19-193">1.245000e1</span></span>|<span data-ttu-id="63a19-194">Exponentiell</span><span class="sxs-lookup"><span data-stu-id="63a19-194">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out double value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Double, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-195">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-195">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-196">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-196">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-197">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-197">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-198">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-198">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-199">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-199">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-200">Analysiert einen <see cref="T:System.Double" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-200">Parses a <see cref="T:System.Double" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-201"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-201"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-202">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-202">Formats supported:</span></span>

|<span data-ttu-id="63a19-203">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-203">Format string</span></span>|<span data-ttu-id="63a19-204">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-204">Example expected format</span></span>|<span data-ttu-id="63a19-205">Kommentare</span><span class="sxs-lookup"><span data-stu-id="63a19-205">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="63a19-206">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-206">G/g  (default)</span></span>| |  
|<span data-ttu-id="63a19-207">F/f</span><span class="sxs-lookup"><span data-stu-id="63a19-207">F/f</span></span>|<span data-ttu-id="63a19-208">12.45</span><span class="sxs-lookup"><span data-stu-id="63a19-208">12.45</span></span>|<span data-ttu-id="63a19-209">Fixpunkt</span><span class="sxs-lookup"><span data-stu-id="63a19-209">Fixed point</span></span>|
|<span data-ttu-id="63a19-210">E/e</span><span class="sxs-lookup"><span data-stu-id="63a19-210">E/e</span></span>|<span data-ttu-id="63a19-211">1.245000e1</span><span class="sxs-lookup"><span data-stu-id="63a19-211">1.245000e1</span></span>|<span data-ttu-id="63a19-212">Exponentiell</span><span class="sxs-lookup"><span data-stu-id="63a19-212">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out Guid value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Guid&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Guid, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-213">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-213">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-214">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-214">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-215">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-215">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-216">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-216">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-217">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-217">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-218">Analysiert einen <see cref="T:System.Guid" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-218">Parses a <see cref="T:System.Guid" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-219"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-219"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-220">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-220">Formats supported:</span></span>

|<span data-ttu-id="63a19-221">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-221">Format string</span></span>|<span data-ttu-id="63a19-222">Erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-222">Expected format</span></span>|
|--|--|
|<span data-ttu-id="63a19-223">D (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-223">D (default)</span></span>|<span data-ttu-id="63a19-224">nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn</span><span class="sxs-lookup"><span data-stu-id="63a19-224">nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn</span></span>|
|<span data-ttu-id="63a19-225">B</span><span class="sxs-lookup"><span data-stu-id="63a19-225">B</span></span>|<span data-ttu-id="63a19-226">{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</span><span class="sxs-lookup"><span data-stu-id="63a19-226">{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</span></span>|
|<span data-ttu-id="63a19-227">P</span><span class="sxs-lookup"><span data-stu-id="63a19-227">P</span></span>|<span data-ttu-id="63a19-228">(Nnnnnnnn-Nnnn-Nnnn-Nnnn-Nnnnnnnnnnnn)</span><span class="sxs-lookup"><span data-stu-id="63a19-228">(nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)</span></span>|
|<span data-ttu-id="63a19-229">N</span><span class="sxs-lookup"><span data-stu-id="63a19-229">N</span></span>|<span data-ttu-id="63a19-230">nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn</span><span class="sxs-lookup"><span data-stu-id="63a19-230">nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out short value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Short, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-231">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-231">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-232">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-232">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-233">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-233">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-234">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-234">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-235">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-235">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-236">Analysiert einen <see cref="T:System.Int16" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-236">Parses an <see cref="T:System.Int16" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-237"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-237"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-238">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-238">Formats supported:</span></span>

|<span data-ttu-id="63a19-239">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-239">Format string</span></span>|<span data-ttu-id="63a19-240">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-240">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="63a19-241">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-241">G/g (default)</span></span>| |
|<span data-ttu-id="63a19-242">D/d</span><span class="sxs-lookup"><span data-stu-id="63a19-242">D/d</span></span>|<span data-ttu-id="63a19-243">32767</span><span class="sxs-lookup"><span data-stu-id="63a19-243">32767</span></span>|
|<span data-ttu-id="63a19-244">N/n</span><span class="sxs-lookup"><span data-stu-id="63a19-244">N/n</span></span>|<span data-ttu-id="63a19-245">32,767</span><span class="sxs-lookup"><span data-stu-id="63a19-245">32,767</span></span>|       
|<span data-ttu-id="63a19-246">X/x</span><span class="sxs-lookup"><span data-stu-id="63a19-246">X/x</span></span>|<span data-ttu-id="63a19-247">7fff</span><span class="sxs-lookup"><span data-stu-id="63a19-247">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out int value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Integer, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-248">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-248">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-249">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-249">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-250">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-250">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-251">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-251">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-252">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-252">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-253">Analysiert einen <see cref="T:System.Int32" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-253">Parses an <see cref="T:System.Int32" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-254"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-254"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-255">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-255">Formats supported:</span></span>

|<span data-ttu-id="63a19-256">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-256">Format string</span></span>|<span data-ttu-id="63a19-257">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-257">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="63a19-258">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-258">G/g (default)</span></span>| |
|<span data-ttu-id="63a19-259">D/d</span><span class="sxs-lookup"><span data-stu-id="63a19-259">D/d</span></span>|<span data-ttu-id="63a19-260">32767</span><span class="sxs-lookup"><span data-stu-id="63a19-260">32767</span></span>|
|<span data-ttu-id="63a19-261">N/n</span><span class="sxs-lookup"><span data-stu-id="63a19-261">N/n</span></span>|<span data-ttu-id="63a19-262">32,767</span><span class="sxs-lookup"><span data-stu-id="63a19-262">32,767</span></span>|       
|<span data-ttu-id="63a19-263">X/x</span><span class="sxs-lookup"><span data-stu-id="63a19-263">X/x</span></span>|<span data-ttu-id="63a19-264">7fff</span><span class="sxs-lookup"><span data-stu-id="63a19-264">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out long value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Long, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-265">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-265">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-266">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-266">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-267">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-267">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-268">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-268">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-269">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-269">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-270">Analysiert einen <see cref="T:System.Int64" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-270">Parses an <see cref="T:System.Int64" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-271"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-271"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-272">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-272">Formats supported:</span></span>

|<span data-ttu-id="63a19-273">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-273">Format string</span></span>|<span data-ttu-id="63a19-274">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-274">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="63a19-275">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-275">G/g (default)</span></span>| |
|<span data-ttu-id="63a19-276">D/d</span><span class="sxs-lookup"><span data-stu-id="63a19-276">D/d</span></span>|<span data-ttu-id="63a19-277">32767</span><span class="sxs-lookup"><span data-stu-id="63a19-277">32767</span></span>|
|<span data-ttu-id="63a19-278">N/n</span><span class="sxs-lookup"><span data-stu-id="63a19-278">N/n</span></span>|<span data-ttu-id="63a19-279">32,767</span><span class="sxs-lookup"><span data-stu-id="63a19-279">32,767</span></span>|       
|<span data-ttu-id="63a19-280">X/x</span><span class="sxs-lookup"><span data-stu-id="63a19-280">X/x</span></span>|<span data-ttu-id="63a19-281">7fff</span><span class="sxs-lookup"><span data-stu-id="63a19-281">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out sbyte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As SByte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.SByte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-282">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-282">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-283">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-283">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-284">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-284">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-285">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-285">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-286">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-286">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-287">Analysiert einen <see cref="T:System.SByte" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-287">Parses an <see cref="T:System.SByte" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-288"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-288"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-289">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-289">Formats supported:</span></span> 

|<span data-ttu-id="63a19-290">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-290">Format string</span></span>|<span data-ttu-id="63a19-291">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-291">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="63a19-292">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-292">G/g (default)</span></span>| |
|<span data-ttu-id="63a19-293">D/d</span><span class="sxs-lookup"><span data-stu-id="63a19-293">D/d</span></span>|<span data-ttu-id="63a19-294">122</span><span class="sxs-lookup"><span data-stu-id="63a19-294">122</span></span>|
|<span data-ttu-id="63a19-295">N/n</span><span class="sxs-lookup"><span data-stu-id="63a19-295">N/n</span></span>|<span data-ttu-id="63a19-296">122</span><span class="sxs-lookup"><span data-stu-id="63a19-296">122</span></span>|       
|<span data-ttu-id="63a19-297">X/x</span><span class="sxs-lookup"><span data-stu-id="63a19-297">X/x</span></span>|<span data-ttu-id="63a19-298">7a</span><span class="sxs-lookup"><span data-stu-id="63a19-298">7a</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out float value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Single, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-299">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-299">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-300">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-300">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-301">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-301">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-302">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-302">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-303">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-303">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-304">Analysiert einen <see cref="T:System.Single" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-304">Parses a <see cref="T:System.Single" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-305"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-305"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-306">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-306">Formats supported:</span></span> 

<span data-ttu-id="63a19-307">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-307">Format string</span></span>|<span data-ttu-id="63a19-308">Beispiel für die erwartete fornmat</span><span class="sxs-lookup"><span data-stu-id="63a19-308">Example expected fornmat</span></span>|<span data-ttu-id="63a19-309">Kommentare</span><span class="sxs-lookup"><span data-stu-id="63a19-309">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="63a19-310">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-310">G/g  (default)</span></span>| |  
|<span data-ttu-id="63a19-311">F/f</span><span class="sxs-lookup"><span data-stu-id="63a19-311">F/f</span></span>|<span data-ttu-id="63a19-312">12.45</span><span class="sxs-lookup"><span data-stu-id="63a19-312">12.45</span></span>|<span data-ttu-id="63a19-313">Fixpunkt</span><span class="sxs-lookup"><span data-stu-id="63a19-313">Fixed point</span></span>|
|<span data-ttu-id="63a19-314">E/e</span><span class="sxs-lookup"><span data-stu-id="63a19-314">E/e</span></span>|<span data-ttu-id="63a19-315">1.245000e1</span><span class="sxs-lookup"><span data-stu-id="63a19-315">1.245000e1</span></span>|<span data-ttu-id="63a19-316">Exponentiell</span><span class="sxs-lookup"><span data-stu-id="63a19-316">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out TimeSpan value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.TimeSpan&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As TimeSpan, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.TimeSpan" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-317">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-317">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-318">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-318">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-319">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-319">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-320">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-320">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-321">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-321">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-322">Analysiert einen <see cref="T:System.TimeSpan" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-322">Parses a <see cref="T:System.TimeSpan" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-323"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-323"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-324">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-324">Formats supported:</span></span> 

|<span data-ttu-id="63a19-325">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-325">Format string</span></span>|<span data-ttu-id="63a19-326">Erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-326">Expected format</span></span>|<span data-ttu-id="63a19-327">Kommentare</span><span class="sxs-lookup"><span data-stu-id="63a19-327">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="63a19-328">c/t/T (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-328">c/t/T (default)</span></span>|<span data-ttu-id="63a19-329">[-][d.]hh:mm:ss[.fffffff]</span><span class="sxs-lookup"><span data-stu-id="63a19-329">[-][d.]hh:mm:ss[.fffffff]</span></span>|<span data-ttu-id="63a19-330">(Konstanten-Format)</span><span class="sxs-lookup"><span data-stu-id="63a19-330">(constant format)</span></span>|
|<span data-ttu-id="63a19-331">G</span><span class="sxs-lookup"><span data-stu-id="63a19-331">G</span></span>|<span data-ttu-id="63a19-332">[-]d:hh:mm:ss.fffffff</span><span class="sxs-lookup"><span data-stu-id="63a19-332">[-]d:hh:mm:ss.fffffff</span></span>||<span data-ttu-id="63a19-333">(Allgemeine Long)</span><span class="sxs-lookup"><span data-stu-id="63a19-333">(general long)</span></span>|
|<span data-ttu-id="63a19-334">g</span><span class="sxs-lookup"><span data-stu-id="63a19-334">g</span></span>|<span data-ttu-id="63a19-335">[-][d:][h]h:mm:ss[.f[f[f[f[f[f[f]]]]]]</span><span class="sxs-lookup"><span data-stu-id="63a19-335">[-][d:][h]h:mm:ss[.f[f[f[f[f[f[f]]]]]]</span></span>|<span data-ttu-id="63a19-336">(Allgemeine kurz)</span><span class="sxs-lookup"><span data-stu-id="63a19-336">(general short)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ushort value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UShort, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-337">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-337">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-338">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-338">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-339">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-339">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-340">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-340">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-341">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-341">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-342">Analysiert einen <see cref="T:System.UInt16" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-342">Parses a <see cref="T:System.UInt16" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-343"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-343"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-344">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-344">Formats supported:</span></span>

|<span data-ttu-id="63a19-345">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-345">Format string</span></span>|<span data-ttu-id="63a19-346">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-346">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="63a19-347">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-347">G/g (default)</span></span>| |
|<span data-ttu-id="63a19-348">D/d</span><span class="sxs-lookup"><span data-stu-id="63a19-348">D/d</span></span>|<span data-ttu-id="63a19-349">32767</span><span class="sxs-lookup"><span data-stu-id="63a19-349">32767</span></span>|
|<span data-ttu-id="63a19-350">N/n</span><span class="sxs-lookup"><span data-stu-id="63a19-350">N/n</span></span>|<span data-ttu-id="63a19-351">32,767</span><span class="sxs-lookup"><span data-stu-id="63a19-351">32,767</span></span>|       
|<span data-ttu-id="63a19-352">X/x</span><span class="sxs-lookup"><span data-stu-id="63a19-352">X/x</span></span>|<span data-ttu-id="63a19-353">7fff</span><span class="sxs-lookup"><span data-stu-id="63a19-353">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out uint value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UInteger, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-354">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-354">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-355">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-355">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-356">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-356">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-357">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-357">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-358">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-358">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-359">Analysiert einen <see cref="T:System.UInt32" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-359">Parses a <see cref="T:System.UInt32" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-360"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-360"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-361">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-361">Formats supported:</span></span>

|<span data-ttu-id="63a19-362">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-362">Format string</span></span>|<span data-ttu-id="63a19-363">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-363">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="63a19-364">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-364">G/g (default)</span></span>| |
|<span data-ttu-id="63a19-365">D/d</span><span class="sxs-lookup"><span data-stu-id="63a19-365">D/d</span></span>|<span data-ttu-id="63a19-366">32767</span><span class="sxs-lookup"><span data-stu-id="63a19-366">32767</span></span>|
|<span data-ttu-id="63a19-367">N/n</span><span class="sxs-lookup"><span data-stu-id="63a19-367">N/n</span></span>|<span data-ttu-id="63a19-368">32,767</span><span class="sxs-lookup"><span data-stu-id="63a19-368">32,767</span></span>|       
|<span data-ttu-id="63a19-369">X/x</span><span class="sxs-lookup"><span data-stu-id="63a19-369">X/x</span></span>|<span data-ttu-id="63a19-370">7fff</span><span class="sxs-lookup"><span data-stu-id="63a19-370">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ulong value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As ULong, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="63a19-371">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-371">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="63a19-372">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-372">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="63a19-373">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="63a19-373">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="63a19-374">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="63a19-374">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="63a19-375">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-375">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="63a19-376">Analysiert einen <see cref="T:System.UInt64" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63a19-376">Parses a <see cref="T:System.UInt64" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="63a19-377"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="63a19-377"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="63a19-378">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="63a19-378">Formats supported:</span></span>

|<span data-ttu-id="63a19-379">Formatierungszeichenfolge</span><span class="sxs-lookup"><span data-stu-id="63a19-379">Format string</span></span>|<span data-ttu-id="63a19-380">Beispiel für das erwartete format</span><span class="sxs-lookup"><span data-stu-id="63a19-380">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="63a19-381">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="63a19-381">G/g (default)</span></span>| |
|<span data-ttu-id="63a19-382">D/d</span><span class="sxs-lookup"><span data-stu-id="63a19-382">D/d</span></span>|<span data-ttu-id="63a19-383">32767</span><span class="sxs-lookup"><span data-stu-id="63a19-383">32767</span></span>|
|<span data-ttu-id="63a19-384">N/n</span><span class="sxs-lookup"><span data-stu-id="63a19-384">N/n</span></span>|<span data-ttu-id="63a19-385">32,767</span><span class="sxs-lookup"><span data-stu-id="63a19-385">32,767</span></span>|       
|<span data-ttu-id="63a19-386">X/x</span><span class="sxs-lookup"><span data-stu-id="63a19-386">X/x</span></span>|<span data-ttu-id="63a19-387">7fff</span><span class="sxs-lookup"><span data-stu-id="63a19-387">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

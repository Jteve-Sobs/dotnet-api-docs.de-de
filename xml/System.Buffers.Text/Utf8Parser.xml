<Type Name="Utf8Parser" FullName="System.Buffers.Text.Utf8Parser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e7c97aa30b0f66ba4914fa5689ce6b625e6eab97" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83485407" /></Metadata><TypeSignature Language="C#" Value="public static class Utf8Parser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Utf8Parser extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.Text.Utf8Parser" />
  <TypeSignature Language="VB.NET" Value="Public Class Utf8Parser" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8Parser abstract sealed" />
  <TypeSignature Language="F#" Value="type Utf8Parser = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Memory" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6ee16-101">Bietet statische Methoden zum Analysieren von UTF8-Zeichenfolgen in allgemeine Datentypen.</span><span class="sxs-lookup"><span data-stu-id="6ee16-101">Provides static methods to parse Utf8 strings to common data types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out bool value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] bool&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Boolean, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * bool * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-102">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-102">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-103">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-103">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-104">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-104">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-105">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-105">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-106">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-106">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-107">Analysiert einen <see cref="T:System.Boolean" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-107">Parses a <see cref="T:System.Boolean" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-108"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-108"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-109">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-109">Formats supported:</span></span> 

|<span data-ttu-id="6ee16-110">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-110">Format string</span></span>|<span data-ttu-id="6ee16-111">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-111">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="6ee16-112">G (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-112">G (default)</span></span>|<span data-ttu-id="6ee16-113">True/False</span><span class="sxs-lookup"><span data-stu-id="6ee16-113">True/False</span></span>|
|<span data-ttu-id="6ee16-114">l</span><span class="sxs-lookup"><span data-stu-id="6ee16-114">l</span></span>|<span data-ttu-id="6ee16-115">TRUE/FALSE</span><span class="sxs-lookup"><span data-stu-id="6ee16-115">true/false</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out byte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Byte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * byte * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Byte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-116">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-116">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-117">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-117">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-118">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-118">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-119">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-119">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-120">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-120">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-121">Analysiert einen <see cref="T:System.Byte" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-121">Parses a <see cref="T:System.Byte" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-122"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-122"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-123">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-123">Formats supported:</span></span> 

|<span data-ttu-id="6ee16-124">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-124">Format string</span></span>|<span data-ttu-id="6ee16-125">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-125">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="6ee16-126">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-126">G/g (default)</span></span>| |
|<span data-ttu-id="6ee16-127">D/d</span><span class="sxs-lookup"><span data-stu-id="6ee16-127">D/d</span></span>|<span data-ttu-id="6ee16-128">122</span><span class="sxs-lookup"><span data-stu-id="6ee16-128">122</span></span>|
|<span data-ttu-id="6ee16-129">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="6ee16-129">N/n</span></span>|<span data-ttu-id="6ee16-130">122</span><span class="sxs-lookup"><span data-stu-id="6ee16-130">122</span></span>|       
|<span data-ttu-id="6ee16-131">X/x</span><span class="sxs-lookup"><span data-stu-id="6ee16-131">X/x</span></span>|<span data-ttu-id="6ee16-132">7a</span><span class="sxs-lookup"><span data-stu-id="6ee16-132">7a</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTime value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTime&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTime, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * DateTime * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-133">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-133">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-134">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-134">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-135">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-135">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-136">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-136">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-137">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-137">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-138">Analysiert einen <see cref="T:System.DateTime" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-138">Parses a <see cref="T:System.DateTime" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-139"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-139"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-140">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-140">Formats supported:</span></span>

|<span data-ttu-id="6ee16-141">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-141">Format string</span></span>|<span data-ttu-id="6ee16-142">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-142">Example expected format</span></span>|<span data-ttu-id="6ee16-143">Kommentare</span><span class="sxs-lookup"><span data-stu-id="6ee16-143">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="6ee16-144">G (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-144">G  (default)</span></span>|<span data-ttu-id="6ee16-145">05/25/2017 10:30:15</span><span class="sxs-lookup"><span data-stu-id="6ee16-145">05/25/2017 10:30:15</span></span>| |
|<span data-ttu-id="6ee16-146">R</span><span class="sxs-lookup"><span data-stu-id="6ee16-146">R</span></span>|<span data-ttu-id="6ee16-147">Di, 03 Jan 2017 08:08:05 GMT</span><span class="sxs-lookup"><span data-stu-id="6ee16-147">Tue, 03 Jan 2017 08:08:05 GMT</span></span>|<span data-ttu-id="6ee16-148">(RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="6ee16-148">(RFC 1123)</span></span>|
|<span data-ttu-id="6ee16-149">l</span><span class="sxs-lookup"><span data-stu-id="6ee16-149">l</span></span>|<span data-ttu-id="6ee16-150">Di, 03 Jan 2017 08:08:05 GMT</span><span class="sxs-lookup"><span data-stu-id="6ee16-150">tue, 03 jan 2017 08:08:05 gmt</span></span>|<span data-ttu-id="6ee16-151">(In Kleinbuchstaben RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="6ee16-151">(Lowercase RFC 1123)</span></span>|
|<span data-ttu-id="6ee16-152">O</span><span class="sxs-lookup"><span data-stu-id="6ee16-152">O</span></span>|<span data-ttu-id="6ee16-153">2017-06-12T05:30:45.7680000-07:00</span><span class="sxs-lookup"><span data-stu-id="6ee16-153">2017-06-12T05:30:45.7680000-07:00</span></span>|<span data-ttu-id="6ee16-154">(Roundtrippable)</span><span class="sxs-lookup"><span data-stu-id="6ee16-154">(Round-trippable)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTimeOffset value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTimeOffset&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTimeOffset, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-155">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-155">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-156">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-156">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-157">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-157">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-158">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-158">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-159">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-159">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-160">Analysiert einen <see cref="T:System.DateTimeOffset" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-160">Parses a <see cref="T:System.DateTimeOffset" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-161"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-161"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-162">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-162">Formats supported:</span></span>

|<span data-ttu-id="6ee16-163">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-163">Format string</span></span>|<span data-ttu-id="6ee16-164">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-164">Example expected format</span></span>|<span data-ttu-id="6ee16-165">Kommentare</span><span class="sxs-lookup"><span data-stu-id="6ee16-165">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="6ee16-166">G (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-166">G  (default)</span></span>|<span data-ttu-id="6ee16-167">05/25/2017 10:30:15</span><span class="sxs-lookup"><span data-stu-id="6ee16-167">05/25/2017 10:30:15</span></span>| |
|<span data-ttu-id="6ee16-168">R</span><span class="sxs-lookup"><span data-stu-id="6ee16-168">R</span></span>|<span data-ttu-id="6ee16-169">Di, 03 Jan 2017 08:08:05 GMT</span><span class="sxs-lookup"><span data-stu-id="6ee16-169">Tue, 03 Jan 2017 08:08:05 GMT</span></span>|<span data-ttu-id="6ee16-170">(RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="6ee16-170">(RFC 1123)</span></span>|
|<span data-ttu-id="6ee16-171">l</span><span class="sxs-lookup"><span data-stu-id="6ee16-171">l</span></span>|<span data-ttu-id="6ee16-172">Di, 03 Jan 2017 08:08:05 GMT</span><span class="sxs-lookup"><span data-stu-id="6ee16-172">tue, 03 jan 2017 08:08:05 gmt</span></span>|<span data-ttu-id="6ee16-173">(In Kleinbuchstaben RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="6ee16-173">(Lowercase RFC 1123)</span></span>|
|<span data-ttu-id="6ee16-174">O</span><span class="sxs-lookup"><span data-stu-id="6ee16-174">O</span></span>|<span data-ttu-id="6ee16-175">2017-06-12T05:30:45.7680000-07:00</span><span class="sxs-lookup"><span data-stu-id="6ee16-175">2017-06-12T05:30:45.7680000-07:00</span></span>|<span data-ttu-id="6ee16-176">(Roundtrippable)</span><span class="sxs-lookup"><span data-stu-id="6ee16-176">(Round-trippable)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out decimal value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Decimal&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Decimal, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * decimal * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-177">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-177">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-178">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-178">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-179">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-179">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-180">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-180">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-181">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-181">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-182">Analysiert einen <see cref="T:System.Decimal" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-182">Parses a <see cref="T:System.Decimal" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-183"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-183"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-184">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-184">Formats supported:</span></span>

|<span data-ttu-id="6ee16-185">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-185">Format string</span></span>|<span data-ttu-id="6ee16-186">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-186">Example expected format</span></span>|<span data-ttu-id="6ee16-187">Kommentare</span><span class="sxs-lookup"><span data-stu-id="6ee16-187">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="6ee16-188">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-188">G/g  (default)</span></span>| |  
|<span data-ttu-id="6ee16-189">F/f</span><span class="sxs-lookup"><span data-stu-id="6ee16-189">F/f</span></span>|<span data-ttu-id="6ee16-190">12,45</span><span class="sxs-lookup"><span data-stu-id="6ee16-190">12.45</span></span>|<span data-ttu-id="6ee16-191">Fester Punkt</span><span class="sxs-lookup"><span data-stu-id="6ee16-191">Fixed point</span></span>|
|<span data-ttu-id="6ee16-192">E/a</span><span class="sxs-lookup"><span data-stu-id="6ee16-192">E/e</span></span>|<span data-ttu-id="6ee16-193">1.245000 E1</span><span class="sxs-lookup"><span data-stu-id="6ee16-193">1.245000e1</span></span>|<span data-ttu-id="6ee16-194">Exponentiell</span><span class="sxs-lookup"><span data-stu-id="6ee16-194">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out double value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Double, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * double * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-195">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-195">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-196">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-196">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-197">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-197">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-198">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-198">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-199">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-199">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-200">Analysiert einen <see cref="T:System.Double" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-200">Parses a <see cref="T:System.Double" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-201"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-201"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-202">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-202">Formats supported:</span></span>

|<span data-ttu-id="6ee16-203">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-203">Format string</span></span>|<span data-ttu-id="6ee16-204">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-204">Example expected format</span></span>|<span data-ttu-id="6ee16-205">Kommentare</span><span class="sxs-lookup"><span data-stu-id="6ee16-205">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="6ee16-206">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-206">G/g  (default)</span></span>| |  
|<span data-ttu-id="6ee16-207">F/f</span><span class="sxs-lookup"><span data-stu-id="6ee16-207">F/f</span></span>|<span data-ttu-id="6ee16-208">12,45</span><span class="sxs-lookup"><span data-stu-id="6ee16-208">12.45</span></span>|<span data-ttu-id="6ee16-209">Fester Punkt</span><span class="sxs-lookup"><span data-stu-id="6ee16-209">Fixed point</span></span>|
|<span data-ttu-id="6ee16-210">E/a</span><span class="sxs-lookup"><span data-stu-id="6ee16-210">E/e</span></span>|<span data-ttu-id="6ee16-211">1.245000 E1</span><span class="sxs-lookup"><span data-stu-id="6ee16-211">1.245000e1</span></span>|<span data-ttu-id="6ee16-212">Exponentiell</span><span class="sxs-lookup"><span data-stu-id="6ee16-212">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out Guid value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Guid&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Guid, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * Guid * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-213">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-213">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-214">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-214">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-215">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-215">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-216">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-216">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-217">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-217">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-218">Analysiert einen <see cref="T:System.Guid" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-218">Parses a <see cref="T:System.Guid" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-219"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-219"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-220">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-220">Formats supported:</span></span>

|<span data-ttu-id="6ee16-221">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-221">Format string</span></span>|<span data-ttu-id="6ee16-222">Erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-222">Expected format</span></span>|
|--|--|
|<span data-ttu-id="6ee16-223">D (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-223">D (default)</span></span>|<span data-ttu-id="6ee16-224">nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn</span><span class="sxs-lookup"><span data-stu-id="6ee16-224">nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn</span></span>|
|<span data-ttu-id="6ee16-225">B</span><span class="sxs-lookup"><span data-stu-id="6ee16-225">B</span></span>|<span data-ttu-id="6ee16-226">{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</span><span class="sxs-lookup"><span data-stu-id="6ee16-226">{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</span></span>|
|<span data-ttu-id="6ee16-227">P</span><span class="sxs-lookup"><span data-stu-id="6ee16-227">P</span></span>|<span data-ttu-id="6ee16-228">(nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)</span><span class="sxs-lookup"><span data-stu-id="6ee16-228">(nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)</span></span>|
|<span data-ttu-id="6ee16-229">N</span><span class="sxs-lookup"><span data-stu-id="6ee16-229">N</span></span>|<span data-ttu-id="6ee16-230">nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn</span><span class="sxs-lookup"><span data-stu-id="6ee16-230">nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out short value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Short, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * int16 * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-231">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-231">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-232">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-232">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-233">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-233">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-234">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-234">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-235">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-235">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-236">Analysiert einen <see cref="T:System.Int16" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-236">Parses an <see cref="T:System.Int16" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-237"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-237"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-238">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-238">Formats supported:</span></span>

|<span data-ttu-id="6ee16-239">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-239">Format string</span></span>|<span data-ttu-id="6ee16-240">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-240">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="6ee16-241">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-241">G/g (default)</span></span>| |
|<span data-ttu-id="6ee16-242">D/d</span><span class="sxs-lookup"><span data-stu-id="6ee16-242">D/d</span></span>|<span data-ttu-id="6ee16-243">32767</span><span class="sxs-lookup"><span data-stu-id="6ee16-243">32767</span></span>|
|<span data-ttu-id="6ee16-244">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="6ee16-244">N/n</span></span>|<span data-ttu-id="6ee16-245">32.767</span><span class="sxs-lookup"><span data-stu-id="6ee16-245">32,767</span></span>|       
|<span data-ttu-id="6ee16-246">X/x</span><span class="sxs-lookup"><span data-stu-id="6ee16-246">X/x</span></span>|<span data-ttu-id="6ee16-247">7fff</span><span class="sxs-lookup"><span data-stu-id="6ee16-247">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out int value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Integer, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * int * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-248">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-248">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-249">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-249">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-250">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-250">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-251">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-251">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-252">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-252">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-253">Analysiert einen <see cref="T:System.Int32" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-253">Parses an <see cref="T:System.Int32" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-254"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-254"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-255">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-255">Formats supported:</span></span>

|<span data-ttu-id="6ee16-256">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-256">Format string</span></span>|<span data-ttu-id="6ee16-257">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-257">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="6ee16-258">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-258">G/g (default)</span></span>| |
|<span data-ttu-id="6ee16-259">D/d</span><span class="sxs-lookup"><span data-stu-id="6ee16-259">D/d</span></span>|<span data-ttu-id="6ee16-260">32767</span><span class="sxs-lookup"><span data-stu-id="6ee16-260">32767</span></span>|
|<span data-ttu-id="6ee16-261">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="6ee16-261">N/n</span></span>|<span data-ttu-id="6ee16-262">32.767</span><span class="sxs-lookup"><span data-stu-id="6ee16-262">32,767</span></span>|       
|<span data-ttu-id="6ee16-263">X/x</span><span class="sxs-lookup"><span data-stu-id="6ee16-263">X/x</span></span>|<span data-ttu-id="6ee16-264">7fff</span><span class="sxs-lookup"><span data-stu-id="6ee16-264">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out long value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Long, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * int64 * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-265">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-265">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-266">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-266">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-267">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-267">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-268">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-268">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-269">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-269">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-270">Analysiert einen <see cref="T:System.Int64" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-270">Parses an <see cref="T:System.Int64" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-271"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-271"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-272">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-272">Formats supported:</span></span>

|<span data-ttu-id="6ee16-273">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-273">Format string</span></span>|<span data-ttu-id="6ee16-274">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-274">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="6ee16-275">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-275">G/g (default)</span></span>| |
|<span data-ttu-id="6ee16-276">D/d</span><span class="sxs-lookup"><span data-stu-id="6ee16-276">D/d</span></span>|<span data-ttu-id="6ee16-277">32767</span><span class="sxs-lookup"><span data-stu-id="6ee16-277">32767</span></span>|
|<span data-ttu-id="6ee16-278">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="6ee16-278">N/n</span></span>|<span data-ttu-id="6ee16-279">32.767</span><span class="sxs-lookup"><span data-stu-id="6ee16-279">32,767</span></span>|       
|<span data-ttu-id="6ee16-280">X/x</span><span class="sxs-lookup"><span data-stu-id="6ee16-280">X/x</span></span>|<span data-ttu-id="6ee16-281">7fff</span><span class="sxs-lookup"><span data-stu-id="6ee16-281">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out sbyte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As SByte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * sbyte * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.SByte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-282">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-282">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-283">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-283">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-284">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-284">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-285">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-285">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-286">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-286">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-287">Analysiert einen <see cref="T:System.SByte" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-287">Parses an <see cref="T:System.SByte" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-288"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-288"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-289">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-289">Formats supported:</span></span> 

|<span data-ttu-id="6ee16-290">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-290">Format string</span></span>|<span data-ttu-id="6ee16-291">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-291">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="6ee16-292">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-292">G/g (default)</span></span>| |
|<span data-ttu-id="6ee16-293">D/d</span><span class="sxs-lookup"><span data-stu-id="6ee16-293">D/d</span></span>|<span data-ttu-id="6ee16-294">122</span><span class="sxs-lookup"><span data-stu-id="6ee16-294">122</span></span>|
|<span data-ttu-id="6ee16-295">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="6ee16-295">N/n</span></span>|<span data-ttu-id="6ee16-296">122</span><span class="sxs-lookup"><span data-stu-id="6ee16-296">122</span></span>|       
|<span data-ttu-id="6ee16-297">X/x</span><span class="sxs-lookup"><span data-stu-id="6ee16-297">X/x</span></span>|<span data-ttu-id="6ee16-298">7a</span><span class="sxs-lookup"><span data-stu-id="6ee16-298">7a</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out float value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Single, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * single * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-299">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-299">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-300">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-300">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-301">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-301">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-302">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-302">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-303">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-303">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-304">Analysiert einen <see cref="T:System.Single" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-304">Parses a <see cref="T:System.Single" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-305"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-305"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-306">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-306">Formats supported:</span></span> 

<span data-ttu-id="6ee16-307">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-307">Format string</span></span>|<span data-ttu-id="6ee16-308">Beispiel für fornmat erwartet</span><span class="sxs-lookup"><span data-stu-id="6ee16-308">Example expected fornmat</span></span>|<span data-ttu-id="6ee16-309">Kommentare</span><span class="sxs-lookup"><span data-stu-id="6ee16-309">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="6ee16-310">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-310">G/g  (default)</span></span>| |  
|<span data-ttu-id="6ee16-311">F/f</span><span class="sxs-lookup"><span data-stu-id="6ee16-311">F/f</span></span>|<span data-ttu-id="6ee16-312">12,45</span><span class="sxs-lookup"><span data-stu-id="6ee16-312">12.45</span></span>|<span data-ttu-id="6ee16-313">Fester Punkt</span><span class="sxs-lookup"><span data-stu-id="6ee16-313">Fixed point</span></span>|
|<span data-ttu-id="6ee16-314">E/a</span><span class="sxs-lookup"><span data-stu-id="6ee16-314">E/e</span></span>|<span data-ttu-id="6ee16-315">1.245000 E1</span><span class="sxs-lookup"><span data-stu-id="6ee16-315">1.245000e1</span></span>|<span data-ttu-id="6ee16-316">Exponentiell</span><span class="sxs-lookup"><span data-stu-id="6ee16-316">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out TimeSpan value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.TimeSpan&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As TimeSpan, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * TimeSpan * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.TimeSpan" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-317">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-317">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-318">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-318">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-319">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-319">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-320">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-320">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-321">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-321">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-322">Analysiert einen <see cref="T:System.TimeSpan" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-322">Parses a <see cref="T:System.TimeSpan" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-323"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-323"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-324">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-324">Formats supported:</span></span> 

|<span data-ttu-id="6ee16-325">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-325">Format string</span></span>|<span data-ttu-id="6ee16-326">Erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-326">Expected format</span></span>|<span data-ttu-id="6ee16-327">Kommentare</span><span class="sxs-lookup"><span data-stu-id="6ee16-327">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="6ee16-328">c/t/t (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-328">c/t/T (default)</span></span>|<span data-ttu-id="6ee16-329">[-] [d.] hh: mm: SS [. fffffff]</span><span class="sxs-lookup"><span data-stu-id="6ee16-329">[-][d.]hh:mm:ss[.fffffff]</span></span>|<span data-ttu-id="6ee16-330">(konstantes Format)</span><span class="sxs-lookup"><span data-stu-id="6ee16-330">(constant format)</span></span>|
|<span data-ttu-id="6ee16-331">G</span><span class="sxs-lookup"><span data-stu-id="6ee16-331">G</span></span>|<span data-ttu-id="6ee16-332">[-]d:hh:mm:ss.fffffff</span><span class="sxs-lookup"><span data-stu-id="6ee16-332">[-]d:hh:mm:ss.fffffff</span></span>||<span data-ttu-id="6ee16-333">(allgemein)</span><span class="sxs-lookup"><span data-stu-id="6ee16-333">(general long)</span></span>|
|<span data-ttu-id="6ee16-334">g</span><span class="sxs-lookup"><span data-stu-id="6ee16-334">g</span></span>|<span data-ttu-id="6ee16-335">[-] [d:] [h] h:mm: SS [. f [f [f [f [f [f [f]]]]]]</span><span class="sxs-lookup"><span data-stu-id="6ee16-335">[-][d:][h]h:mm:ss[.f[f[f[f[f[f[f]]]]]]</span></span>|<span data-ttu-id="6ee16-336">(allgemein kurz)</span><span class="sxs-lookup"><span data-stu-id="6ee16-336">(general short)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ushort value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UShort, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * uint16 * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-337">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-337">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-338">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-338">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-339">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-339">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-340">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-340">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-341">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-341">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-342">Analysiert einen <see cref="T:System.UInt16" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-342">Parses a <see cref="T:System.UInt16" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-343"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-343"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-344">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-344">Formats supported:</span></span>

|<span data-ttu-id="6ee16-345">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-345">Format string</span></span>|<span data-ttu-id="6ee16-346">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-346">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="6ee16-347">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-347">G/g (default)</span></span>| |
|<span data-ttu-id="6ee16-348">D/d</span><span class="sxs-lookup"><span data-stu-id="6ee16-348">D/d</span></span>|<span data-ttu-id="6ee16-349">32767</span><span class="sxs-lookup"><span data-stu-id="6ee16-349">32767</span></span>|
|<span data-ttu-id="6ee16-350">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="6ee16-350">N/n</span></span>|<span data-ttu-id="6ee16-351">32.767</span><span class="sxs-lookup"><span data-stu-id="6ee16-351">32,767</span></span>|       
|<span data-ttu-id="6ee16-352">X/x</span><span class="sxs-lookup"><span data-stu-id="6ee16-352">X/x</span></span>|<span data-ttu-id="6ee16-353">7fff</span><span class="sxs-lookup"><span data-stu-id="6ee16-353">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out uint value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UInteger, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * uint32 * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-354">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-354">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-355">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-355">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-356">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-356">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-357">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-357">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-358">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-358">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-359">Analysiert einen <see cref="T:System.UInt32" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-359">Parses a <see cref="T:System.UInt32" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-360"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-360"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-361">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-361">Formats supported:</span></span>

|<span data-ttu-id="6ee16-362">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-362">Format string</span></span>|<span data-ttu-id="6ee16-363">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-363">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="6ee16-364">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-364">G/g (default)</span></span>| |
|<span data-ttu-id="6ee16-365">D/d</span><span class="sxs-lookup"><span data-stu-id="6ee16-365">D/d</span></span>|<span data-ttu-id="6ee16-366">32767</span><span class="sxs-lookup"><span data-stu-id="6ee16-366">32767</span></span>|
|<span data-ttu-id="6ee16-367">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="6ee16-367">N/n</span></span>|<span data-ttu-id="6ee16-368">32.767</span><span class="sxs-lookup"><span data-stu-id="6ee16-368">32,767</span></span>|       
|<span data-ttu-id="6ee16-369">X/x</span><span class="sxs-lookup"><span data-stu-id="6ee16-369">X/x</span></span>|<span data-ttu-id="6ee16-370">7fff</span><span class="sxs-lookup"><span data-stu-id="6ee16-370">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ulong value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As ULong, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; * uint64 * int * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6ee16-371">Die zu analysierende UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-371">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="6ee16-372">Enthält nach Rückgabe der Methode den aus <paramref name="source" /> analysierten Wert, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-372">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="6ee16-373">Enthält bei Rückgabe der Methode die Länge der analysierten Teilzeichenfolge in Bytes, wenn der Analysevorgang erfolgreich war.</span><span class="sxs-lookup"><span data-stu-id="6ee16-373">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="6ee16-374">Wenn bei der Methode ein Fehler auftritt, wird <paramref name="bytesConsumed" /> auf 0 gesetzt.</span><span class="sxs-lookup"><span data-stu-id="6ee16-374">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="6ee16-375">Das erwartete Format der UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-375">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="6ee16-376">Analysiert einen <see cref="T:System.UInt64" />-Wert am Anfang einer UTF8-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6ee16-376">Parses a <see cref="T:System.UInt64" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="6ee16-377"><see langword="true" /> für Erfolg; <see langword="false" />, wenn die Zeichenfolge syntaktisch ungültig war oder ein Über- bzw. Unterlauf aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="6ee16-377"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="6ee16-378">Unterstützte Formate:</span><span class="sxs-lookup"><span data-stu-id="6ee16-378">Formats supported:</span></span>

|<span data-ttu-id="6ee16-379">Formatzeichenfolge</span><span class="sxs-lookup"><span data-stu-id="6ee16-379">Format string</span></span>|<span data-ttu-id="6ee16-380">Beispiel für erwartetes Format</span><span class="sxs-lookup"><span data-stu-id="6ee16-380">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="6ee16-381">G/g (Standard)</span><span class="sxs-lookup"><span data-stu-id="6ee16-381">G/g (default)</span></span>| |
|<span data-ttu-id="6ee16-382">D/d</span><span class="sxs-lookup"><span data-stu-id="6ee16-382">D/d</span></span>|<span data-ttu-id="6ee16-383">32767</span><span class="sxs-lookup"><span data-stu-id="6ee16-383">32767</span></span>|
|<span data-ttu-id="6ee16-384">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="6ee16-384">N/n</span></span>|<span data-ttu-id="6ee16-385">32.767</span><span class="sxs-lookup"><span data-stu-id="6ee16-385">32,767</span></span>|       
|<span data-ttu-id="6ee16-386">X/x</span><span class="sxs-lookup"><span data-stu-id="6ee16-386">X/x</span></span>|<span data-ttu-id="6ee16-387">7fff</span><span class="sxs-lookup"><span data-stu-id="6ee16-387">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

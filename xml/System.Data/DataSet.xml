<Type Name="DataSet" FullName="System.Data.DataSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aac6e194eba10a31bd1c3f44187ab73561554f5c" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75140849" /></Metadata><TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataSet" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitializeNotification, IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitializeNotification&#xA;    interface ISerializable&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.ComponentModel.DefaultProperty("DataSetName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netcore-3.1">
      <AttributeName>System.Xml.Serialization.XmlRoot("DataSet")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen speicherresidenten Datencache dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Data.DataSet>, bei dem es sich um einen in-Memory-Cache von Daten handelt, die von einer Datenquelle abgerufen werden, ist eine wesentliche Komponente der ADO.NET-Architektur. Der <xref:System.Data.DataSet> besteht aus einer Auflistung von <xref:System.Data.DataTable> Objekten, die Sie mit <xref:System.Data.DataRelation> Objekten verknüpfen können. Sie können auch die Datenintegrität in der <xref:System.Data.DataSet> erzwingen, indem Sie das <xref:System.Data.UniqueConstraint>-und <xref:System.Data.ForeignKeyConstraint>-Objekt verwenden. Weitere Informationen zum Arbeiten mit <xref:System.Data.DataSet> Objekten finden Sie unter [Datasets, DataTables und DataViews](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md).  
  
 Während <xref:System.Data.DataTable> Objekte die Daten enthalten, können Sie mit der <xref:System.Data.DataRelationCollection> in der Tabellen Hierarchie navigieren. Die Tabellen sind in einer <xref:System.Data.DataTableCollection> enthalten, auf die über die <xref:System.Data.DataSet.Tables%2A>-Eigenschaft zugegriffen wird. Beachten Sie beim Zugriff auf <xref:System.Data.DataTable> Objekte, dass Sie bedingt unterschieden werden. Wenn beispielsweise eine <xref:System.Data.DataTable> mit dem Namen "mydatables" und eine andere den Namen "mydatables" hat, wird eine Zeichenfolge, die für die Suche nach einer der Tabellen verwendet wird, als Groß-/Kleinschreibung beachtet. Wenn jedoch "mydatdatababel" vorhanden ist und "mydatbare" nicht, wird die Such Zeichenfolge als Groß-/Kleinschreibung beachtet. Weitere Informationen zum Arbeiten mit <xref:System.Data.DataTable> anzuzeigen, [Erstellen einer "DataTable"](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md).  
  
 Eine <xref:System.Data.DataSet> kann Daten und Schemas als XML-Dokumente lesen und schreiben. Die Daten und das Schema können dann über HTTP übertragen und von jeder Anwendung verwendet werden, auf allen Plattformen, die XML-fähig sind. Sie können das Schema als XML-Schema mit der <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode speichern, und sowohl das Schema als auch die Daten können mit der <xref:System.Data.DataSet.WriteXml%2A>-Methode gespeichert werden. Zum Lesen eines XML-Dokuments, das sowohl das Schema als auch die Daten enthält, verwenden Sie die <xref:System.Data.DataSet.ReadXml%2A>-Methode.  
  
 Bei einer typischen Implementierung mit mehreren Ebenen sind die Schritte zum Erstellen und Aktualisieren einer <xref:System.Data.DataSet>und das Aktualisieren der ursprünglichen Daten in folgenden Schritten:  
  
1.  Erstellen und füllen Sie jede <xref:System.Data.DataTable> in einem <xref:System.Data.DataSet> mit Daten aus einer Datenquelle mithilfe eines <xref:System.Data.Common.DataAdapter>aus.  
  
2.  Ändern Sie die Daten in einzelnen <xref:System.Data.DataTable> Objekten, indem Sie <xref:System.Data.DataRow> Objekten hinzufügen, aktualisieren oder löschen.  
  
3.  Rufen Sie die <xref:System.Data.DataSet.GetChanges%2A>-Methode auf, um eine zweite <xref:System.Data.DataSet> zu erstellen, die nur die Änderungen an den Daten enthält.  
  
4.  Ruft die <xref:System.Data.Common.DataAdapter.Update%2A>-Methode des <xref:System.Data.Common.DataAdapter>auf, wobei die zweite <xref:System.Data.DataSet> als Argument übergeben wird.  
  
5.  Rufen Sie die <xref:System.Data.DataSet.Merge%2A>-Methode auf, um die Änderungen von der zweiten <xref:System.Data.DataSet> in die erste zu überführen.  
  
6.  Rufen Sie die <xref:System.Data.DataSet.AcceptChanges%2A> für die <xref:System.Data.DataSet>auf. Sie können auch <xref:System.Data.DataSet.RejectChanges%2A> aufrufen, um die Änderungen abzubrechen.  
  
> [!NOTE]
>  Die <xref:System.Data.DataSet>-und <xref:System.Data.DataTable> Objekte erben von <xref:System.ComponentModel.MarshalByValueComponent>und unterstützen die <xref:System.Runtime.Serialization.ISerializable> Schnittstelle für Remoting. Dies sind die einzigen ADO.NET-Objekte, die remotingfähig sind.  
  
> [!NOTE]
>  Klassen, die von <xref:System.Data.DataSet> geerbt werden, werden nicht durch die Garbage Collector abgeschlossen, da der Finalizer in <xref:System.Data.DataSet>unterdrückt wurde. Die abgeleitete Klasse kann die <xref:System.GC.ReRegisterForFinalize%2A>-Methode in Ihrem Konstruktor aufzurufen, damit die Klasse vom Garbage Collector abgeschlossen werden kann.  
  
   
  
## Examples  
 Das folgende Beispiel besteht aus mehreren Methoden, die eine <xref:System.Data.DataSet> in Kombination mit der **Northwind** -Datenbank erstellen und Auffüllen.  
  
 [!code-csharp[Classic WebData DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Dieser Typ ist für multithreadlesevorgänge sicher. Sie müssen alle Schreibvorgänge synchronisieren.</threadsafe>
    <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.DataSet" />-Klasse.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.DataSet" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung des <xref:System.Data.DataSet> Konstruktors nimmt keine Parameter an und erstellt einen Standardnamen, "NewDataSet", für die neue Instanz.  
  
 Ein Name für den <xref:System.Data.DataSet> ist erforderlich, um sicherzustellen, dass die XML-Darstellung des <xref:System.Data.DataSet> immer einen Namen für das Document-Element hat, das das Element der höchsten Ebene in einer Schema Definition ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine neue <xref:System.Data.DataSet>erstellt und zwei <xref:System.Data.DataTable>-Objekten hinzugefügt.  
  
 [!code-vb[Classic WebData DataSet.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet (string dataSetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dataSetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataSetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet(System::String ^ dataSetName);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : string -&gt; System.Data.DataSet" Usage="new System.Data.DataSet dataSetName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataSetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSetName">Der Name des <see cref="T:System.Data.DataSet" />-Objekts.</param>
        <summary>Initialisiert eine neue Instanz einer <see cref="T:System.Data.DataSet" />-Klasse mit dem angegebenen Namen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Name für den <xref:System.Data.DataSet> ist erforderlich, um sicherzustellen, dass die XML-Darstellung des <xref:System.Data.DataSet> immer einen Namen für das Document-Element hat, das das Element der höchsten Ebene in einer Schema Definition ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein neues <xref:System.Data.DataSet>erstellt, dem zwei <xref:System.Data.DataTable>-Objekte hinzugefügt werden.  
  
 [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataSet.DataSetName" />
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Die zur Serialisierung bzw. Deserialisierung eines Objekts benötigten Daten.</param>
        <param name="context">Die Quelle und das Ziel eines angegebenen serialisierten Streams.</param>
        <summary>Initialisiert eine neue Instanz einer <see cref="T:System.Data.DataSet" />-Klasse, die über die angegebenen Serialisierungsinformationen und den angegebenen Kontext verfügt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context, bool ConstructSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext, ConstructSchema As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext * bool -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context, ConstructSchema)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ConstructSchema" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info">Das <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt.</param>
        <param name="context">Das <see cref="T:System.Runtime.Serialization.StreamingContext" />-Objekt.</param>
        <param name="ConstructSchema">Der boolesche Wert.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.DataSet" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptChanges();" />
      <MemberSignature Language="F#" Value="member this.AcceptChanges : unit -&gt; unit" Usage="dataSet.AcceptChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt einen Commit für alle Änderungen aus, die an diesem <see cref="T:System.Data.DataSet" /> seit dem letzten Ladevorgang oder seit dem letzten Aufruf von <see cref="M:System.Data.DataSet.AcceptChanges" /> vorgenommen wurden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Klassen <xref:System.Data.DataRow> und <xref:System.Data.DataTable> haben <xref:System.Data.DataSet.AcceptChanges%2A> Methoden. Das Aufrufen von <xref:System.Data.DataTable.AcceptChanges%2A> auf <xref:System.Data.DataTable> Ebene bewirkt, dass die <xref:System.Data.DataRow.AcceptChanges%2A>-Methode für jede <xref:System.Data.DataRow> aufgerufen wird. Ebenso bewirkt das Aufrufen von <xref:System.Data.DataSet.AcceptChanges%2A> auf der <xref:System.Data.DataSet>, dass <xref:System.Data.DataTable.AcceptChanges%2A> für jede Tabelle innerhalb der <xref:System.Data.DataSet>aufgerufen wird. Auf diese Weise haben Sie mehrere Ebenen, auf denen die-Methode aufgerufen werden kann. Wenn Sie die <xref:System.Data.DataSet.AcceptChanges%2A> des <xref:System.Data.DataSet> aufrufen, können Sie die Methode für alle untergeordneten Objekte (z. b. Tabellen und Zeilen) mit einem Aufruf aufrufen.  
  
 Wenn Sie `AcceptChanges` auf der `DataSet`aufzurufen, beenden alle <xref:System.Data.DataRow> Objekte, die sich noch im Bearbeitungsmodus befinden, Ihre Änderungen erfolgreich. Die <xref:System.Data.DataRow.RowState%2A>-Eigenschaft der einzelnen <xref:System.Data.DataRow> ändert sich ebenfalls. `Added` und `Modified` Zeilen werden `Unchanged`, und `Deleted` Zeilen werden entfernt.  
  
 Wenn die `DataSet` <xref:System.Data.ForeignKeyConstraint>-Objekte enthält, bewirkt das Aufrufen der `AcceptChanges`-Methode auch, dass die <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> erzwungen werden.  
  
> [!NOTE]
>  `AcceptChanges` und `RejectChanges` gelten nur für `DataRow` bezogenen Änderungen (d. h. hinzufügen, entfernen, löschen und ändern). Sie sind nicht auf Schema-oder Strukturänderungen anwendbar.  
>   
>  Durch den Aufruf von "Accept Changes" werden diese Änderungen nicht wieder in die Datenquelle repliziert, wenn das DataSet mit einem DataAdapter gefüllt wurde. In dieser Situation wird stattdessen <xref:System.Data.Common.DataAdapter.Update%2A> aufgerufen. Weitere Informationen finden Sie [unter Aktualisieren von Datenquellen mit DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md) .  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Data.DataRow> auf eine <xref:System.Data.DataTable> in einem <xref:System.Data.DataSet>. Die <xref:System.Data.DataSet.AcceptChanges%2A>-Methode wird dann für die <xref:System.Data.DataSet>aufgerufen, die alle <xref:System.Data.DataTable> darin enthaltenen Objekte kaskadiert.  
  
 [!code-csharp[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="dataSet.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beginnt die Initialisierung einer <see cref="T:System.Data.DataSet" />, die in einem Formular oder von einer anderen Komponente verwendet wird. Die Initialisierung erfolgt zur Laufzeit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Visual Studio .net-Entwurfs Umgebung verwendet diese Methode, um die Initialisierung einer Komponente zu starten, die in einem Formular oder von einer anderen Komponente verwendet wird. Die <xref:System.Data.DataSet.EndInit%2A>-Methode beendet die Initialisierung. Die Verwendung der Methoden <xref:System.Data.DataSet.BeginInit%2A> und <xref:System.Data.DataSet.EndInit%2A> verhindert, dass das-Steuerelement verwendet wird, bevor es vollständig initialisiert wird.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="CaseSensitive">
      <MemberSignature Language="C#" Value="public bool CaseSensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitive" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.CaseSensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property CaseSensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CaseSensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CaseSensitive : bool with get, set" Usage="System.Data.DataSet.CaseSensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetCaseSensitiveDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob bei Zeichenfolgenvergleichen in <see cref="T:System.Data.DataTable" />-Objekten die Groß- und Kleinschreibung berücksichtigt wird, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn bei Zeichen folgen vergleichen Groß-/Kleinschreibung beachtet wird Andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.CaseSensitive%2A>-Eigenschaft wirkt sich darauf aus, wie Sortier-, Such-und Filter Vorgänge bei Verwendung der <xref:System.Data.DataTable.Select%2A>-Methode für jedes <xref:System.Data.DataTable> Objekt in einem <xref:System.Data.DataSet> ausgeführt werden.  
  
 Wenn Sie die <xref:System.Data.DataSet.CaseSensitive%2A>-Eigenschaft für ein <xref:System.Data.DataSet> festlegen, wird die Eigenschaft <xref:System.Data.DataTable.CaseSensitive%2A> der einzelnen zugeordneten <xref:System.Data.DataTable> standardmäßig auf denselben Wert festgelegt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Data.DataSet.CaseSensitive%2A>-Eigenschaft gewechselt.  
  
 [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.CaseSensitive Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="dataSet.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Daten aus dem <see cref="T:System.Data.DataSet" />, indem alle Zeilen in sämtlichen Tabellen entfernt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Data.DataSet> an eine <xref:System.Xml.XmlDataDocument>gebunden ist, löst der Aufruf von <xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType> oder <xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType> den <xref:System.NotSupportedException>aus. Um diese Situation zu vermeiden, durchlaufen Sie jede Tabelle, wobei jede Zeile einzeln entfernt wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.Data.DataSet> aller Zeilen in allen Tabellen gelöscht.  
  
 [!code-csharp[Classic WebData DataSet.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataSet Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataSet Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Data::DataSet ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Data.DataSet&#xA;override this.Clone : unit -&gt; System.Data.DataSet" Usage="dataSet.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kopiert die Struktur des <see cref="T:System.Data.DataSet" />, einschließlich aller Schemas, Beziehungen und Einschränkungen von <see cref="T:System.Data.DataTable" />. Es werden keine Daten kopiert.</summary>
        <returns>Ein neues <see cref="T:System.Data.DataSet" /> mit demselben Schema wie das aktuelle <see cref="T:System.Data.DataSet" />, jedoch nicht mit den darin enthaltenen Daten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Wenn diese Klassen untergeordnet wurden, ist der Klon auch von denselben Unterklassen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Klon des Schemas eines <xref:System.Data.DataSet> Objekts erstellt.  
  
 [!code-csharp[Classic WebData DataSet.Clone Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clone Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Copy" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Data.DataSet Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Data.DataSet" Usage="dataSet.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kopiert die Struktur und die Daten für diese <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Ein neues <see cref="T:System.Data.DataSet" /> mit derselben Struktur (Tabellenschemas, -beziehungen und -einschränkungen) und denselben Daten wie dieses <see cref="T:System.Data.DataSet" />.  
  
 <block subset="none" type="note"><para>  
 Wenn diese Klassen in Unterklassen unterteilt wurden, besteht die Kopie aus denselben Unterklassen.  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Data.DataSet.Copy%2A> Methode zum Erstellen einer Kopie des Originals <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DataSet.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Clone" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDataReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen <see cref="T:System.Data.DataTableReader" /> mit einem Resultset pro <see cref="T:System.Data.DataTable" /> zurück, und zwar in der Reihenfolge der Tabellen in der <see cref="P:System.Data.DataSet.Tables" />-Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um sicherzustellen, dass die Reihenfolge der Resultsets innerhalb der zurückgegebenen <xref:System.Data.DataTableReader>, wenn eine <xref:System.Data.DataTable> im <xref:System.Data.DataSet> leer ist, wird Sie durch ein leeres Resultset in der zurückgegebenen `DataTableReader`dargestellt.  
  
   
  
## Examples  
 In diesem Beispiel, einer Konsolenanwendung, werden drei <xref:System.Data.DataTable> Instanzen erstellt und jeder <xref:System.Data.DataSet>hinzugefügt. Im Beispiel wird die <xref:System.Data.DataSet.CreateDataReader%2A>-Methode aufgerufen, und der Inhalt der zurückgegebenen <xref:System.Data.DataTableReader>wird angezeigt. Beachten Sie, dass die Reihenfolge der Resultsets im `DataTableReader` durch die Reihenfolge der `DataTable` Instanzen gesteuert wird, die als Parameter angegeben werden.  
  
> [!NOTE]
>  In diesem Beispiel wird gezeigt, wie eine der überladenen Versionen von `CreateDataReader`verwendet wird. Weitere Beispiele, die möglicherweise verfügbar sind, finden Sie in den Themen zu den einzelnen Überladungen.  
  
 [!code-csharp[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/VB/source.vb#1)]  
  
 Im Beispiel wird der folgende Code im Konsolenfenster angezeigt:  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader () As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader();" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : unit -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen <see cref="T:System.Data.DataTableReader" /> mit einem Resultset pro <see cref="T:System.Data.DataTable" /> zurück, und zwar in der Reihenfolge der Tabellen in der <see cref="P:System.Data.DataSet.Tables" />-Auflistung.</summary>
        <returns>Ein <see cref="T:System.Data.DataTableReader" /> mit einem oder mehreren Resultsets, die den im Quell-<see cref="T:System.Data.DataTable" /> enthaltenen <see cref="T:System.Data.DataSet" />-Instanzen entsprechen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um sicherzustellen, dass die Reihenfolge der Resultsets innerhalb der zurückgegebenen <xref:System.Data.DataTableReader>, wenn eine <xref:System.Data.DataTable> im <xref:System.Data.DataSet> leer ist, wird Sie durch ein leeres Resultset in der zurückgegebenen `DataTableReader`dargestellt.  
  
   
  
## Examples  
 Im folgenden Beispiel werden drei <xref:System.Data.DataTable> Instanzen erstellt und jeder <xref:System.Data.DataSet>hinzugefügt. Im Beispiel wird dann der ausgefüllte `DataSet` an eine Prozedur weitergeleitet, die die <xref:System.Data.DataSet.CreateDataReader%2A>-Methode aufruft, und fortgesetzt, alle Resultsets, die im <xref:System.Data.DataTableReader>enthalten sind. Im Beispiel werden die Ergebnisse im Konsolenfenster angezeigt.  
  
 [!code-csharp[DataWorks DataSet.DataTableReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader (params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader(class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader (ParamArray dataTables As DataTable()) As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader(... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : System.Data.DataTable[] -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader dataTables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataTables">Ein Array von DataTables, das die Reihenfolge der im <see cref="T:System.Data.DataTableReader" /> zurückzugebenden Resultsets angibt.</param>
        <summary>Gibt einen <see cref="T:System.Data.DataTableReader" /> mit einem Resultset pro <see cref="T:System.Data.DataTable" /> zurück.</summary>
        <returns>Ein <see cref="T:System.Data.DataTableReader" /> mit einem oder mehreren Resultsets, die den im Quell-<see cref="T:System.Data.DataTable" /> enthaltenen <see cref="T:System.Data.DataSet" />-Instanzen entsprechen. Die Resultsets werden in der vom <paramref name="dataTables" />-Parameter angegebenen Reihenfolge zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um sicherzustellen, dass die Reihenfolge der Resultsets innerhalb der zurückgegebenen <xref:System.Data.DataTableReader>, wenn eine <xref:System.Data.DataTable> im <xref:System.Data.DataSet> leer ist, wird Sie durch ein leeres Resultset in der zurückgegebenen `DataTableReader`dargestellt. Da diese überladene Version es Ihnen ermöglicht, eine Liste von `DataTable` Instanzen als Parameter bereitzustellen, können Sie die Reihenfolge angeben, in der die Resultsets innerhalb der zurückgegebenen `DataTableReader`angezeigt werden.  
  
   
  
## Examples  
 In diesem Beispiel, einer Konsolenanwendung, werden drei <xref:System.Data.DataTable> Instanzen erstellt und jeder <xref:System.Data.DataSet>hinzugefügt. Im Beispiel wird die <xref:System.Data.DataSet.CreateDataReader%2A>-Methode aufgerufen, und der Inhalt der zurückgegebenen <xref:System.Data.DataTableReader>wird angezeigt. Beachten Sie, dass die Reihenfolge der Resultsets im `DataTableReader` durch die Reihenfolge der `DataTable` Instanzen gesteuert wird, die als Parameter angegeben werden. Im Beispiel werden die Ergebnisse im Konsolenfenster angezeigt.  
  
 [!code-csharp[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="DataSetName">
      <MemberSignature Language="C#" Value="public string DataSetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSetName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DataSetName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataSetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSetName : string with get, set" Usage="System.Data.DataSet.DataSetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetDataSetNameDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des aktuellen <see cref="T:System.Data.DataSet" /> ab oder legt diesen fest.</summary>
        <value>Der Name des <see cref="T:System.Data.DataSet" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel erstellt ein neues <xref:System.Data.DataSet> mit der angegebenen <xref:System.Data.DataSet.DataSetName%2A>.  
  
 [!code-csharp[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultViewManager">
      <MemberSignature Language="C#" Value="public System.Data.DataViewManager DefaultViewManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataViewManager DefaultViewManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DefaultViewManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultViewManager As DataViewManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataViewManager ^ DefaultViewManager { System::Data::DataViewManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultViewManager : System.Data.DataViewManager" Usage="System.Data.DataSet.DefaultViewManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetDefaultViewDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataViewManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine benutzerdefinierte Ansicht der im <see cref="T:System.Data.DataSet" /> enthaltenen Daten ab, mit der unter Verwendung eines benutzerdefinierten <see cref="T:System.Data.DataViewManager" /> gefiltert, gesucht und navigiert werden kann.</summary>
        <value>Ein <see cref="T:System.Data.DataViewManager" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von der <xref:System.Data.DataSet.DefaultViewManager%2A>-Eigenschaft zurückgegebene <xref:System.Data.DataViewManager> ermöglicht es Ihnen, benutzerdefinierte Einstellungen für jedes <xref:System.Data.DataTable> in der <xref:System.Data.DataSet>zu erstellen.  
  
 Wenn Sie eine <xref:System.Data.DataView> von einem <xref:System.Data.DataTable>abrufen, werden die Sortierreihenfolge, die Filterung und die <xref:System.Data.DataViewRowState> entsprechend den Einstellungen in der <xref:System.Data.DataSet.DefaultViewManager%2A>-Eigenschaft konfiguriert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der Standard <xref:System.Data.DataViewManager> für ein <xref:System.Data.DataSet>abgerufen, und der <xref:System.Data.DataTableCollection>wird ein <xref:System.Data.DataTable> hinzugefügt.  
  
 [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DefaultViewManager Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DetermineSchemaSerializationMode">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt den <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> für ein <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann beim Deserialisieren eines typisierten <xref:System.Data.DataSet> aufgerufen werden, um dessen <xref:System.Data.DataSet.SchemaSerializationMode%2A>zu ermitteln.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (reader As XmlReader) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Xml.XmlReader -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">Die <see cref="T:System.Xml.XmlReader" />-Instanz, die bei der Deserialisierung des <see cref="T:System.Data.DataSet" /> übergeben wird.</param>
        <summary>Bestimmt den <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> für ein <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Eine <see cref="T:System.Data.SchemaSerializationMode" />-Enumeration, die angibt, ob Schemainformationen aus der Nutzlast ausgelassen wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann beim Deserialisieren eines typisierten <xref:System.Data.DataSet> aufgerufen werden, um dessen <xref:System.Data.DataSet.SchemaSerializationMode%2A>zu ermitteln.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (info As SerializationInfo, context As StreamingContext) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info">Die <see cref="T:System.Runtime.Serialization.SerializationInfo" />, mit der der geschützte <see langword="DataSet" />-Konstruktor eines <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> bei der Deserialisierung in Remotingszenarios aufgerufen wird.</param>
        <param name="context">Die <see cref="T:System.Runtime.Serialization.StreamingContext" />, mit der der geschützte <see langword="DataSet" />-Konstruktor eines <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> bei der Deserialisierung in Remotingszenarios aufgerufen wird.</param>
        <summary>Bestimmt den <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> für ein <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Eine <see cref="T:System.Data.SchemaSerializationMode" />-Enumeration, die angibt, ob Schemainformationen aus der Nutzlast ausgelassen wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann beim Deserialisieren eines typisierten <xref:System.Data.DataSet> aufgerufen werden, um dessen <xref:System.Data.DataSet.SchemaSerializationMode%2A>zu ermitteln.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="dataSet.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet die Initialisierung einer <see cref="T:System.Data.DataSet" />, die in einem Formular oder von einer anderen Komponente verwendet wird. Die Initialisierung erfolgt zur Laufzeit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Visual Studio .net-Entwurfs Umgebung verwendet diese Methode, um die Initialisierung einer Komponente zu beenden, die in einem Formular oder von einer anderen Komponente verwendet wird. Die <xref:System.Data.DataSet.BeginInit%2A>-Methode startet die Initialisierung. Die Verwendung der Methoden <xref:System.Data.DataSet.BeginInit%2A> und <xref:System.Data.DataSet.EndInit%2A> verhindert, dass das-Steuerelement verwendet wird, bevor es vollständig initialisiert wird.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="EnforceConstraints">
      <MemberSignature Language="C#" Value="public bool EnforceConstraints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnforceConstraints" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.EnforceConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Property EnforceConstraints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnforceConstraints { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnforceConstraints : bool with get, set" Usage="System.Data.DataSet.EnforceConstraints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetEnforceConstraintsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob bei Aktualisierungen Einschränkungsregeln beachtet werden, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Regeln erzwungen werden. Andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einschränkungen werden auf <xref:System.Data.DataTable> Ebene festgelegt (<xref:System.Data.DataTable.Constraints%2A>-Eigenschaft). Weitere Informationen zum Erstellen von Einschränkungen finden Sie unter [databel-Einschränkungen](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Data.DataSet> mit einer Tabelle, einer Spalte, fünf Zeilen und einem <xref:System.Data.UniqueConstraint>erstellt. Die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft ist auf `false` festgelegt, und die Werte der einzelnen Zeilen werden auf denselben Wert festgelegt. Wenn die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `true`zurückgesetzt wird, wird ein <xref:System.Data.ConstraintException> generiert.  
  
 [!code-csharp[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException">Mindestens eine Einschränkung kann nicht erzwungen werden.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProperties : System.Data.PropertyCollection" Usage="System.Data.DataSet.ExtendedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("ExtendedPropertiesDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die dem <see langword="DataSet" /> zugeordnete Auflistung von benutzerdefinierten Benutzerinformationen ab.</summary>
        <value>Eine <see cref="T:System.Data.PropertyCollection" /> mit sämtlichen benutzerdefinierten Benutzerinformationen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der <xref:System.Data.DataSet.ExtendedProperties%2A>-Eigenschaft können Sie benutzerdefinierte Informationen mit dem `DataSet`speichern. Sie können z. b. einen Zeitpunkt speichern, zu dem die Daten aktualisiert werden sollen.  
  
 Erweiterte Eigenschaften müssen vom Typ <xref:System.String> sein, wenn Sie persistent gespeichert werden sollen, wenn die <xref:System.Data.DataSet> als XML-Datei geschrieben wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine benutzerdefinierte Eigenschaft zum <xref:System.Data.PropertyCollection> hinzugefügt, die von der <xref:System.Data.DataColumn.ExtendedProperties%2A>-Eigenschaft zurückgegeben wird. Im zweiten Beispiel wird die benutzerdefinierte Eigenschaft abgerufen.  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft eine Kopie der <see cref="T:System.Data.DataSet" /> ab, die alle seit dem letzten Laden oder seit dem letzten Aufruf von <see cref="M:System.Data.DataSet.AcceptChanges" /> vorgenommenen Änderungen enthält.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges();" />
      <MemberSignature Language="F#" Value="member this.GetChanges : unit -&gt; System.Data.DataSet" Usage="dataSet.GetChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine Kopie des <see cref="T:System.Data.DataSet" /> ab, die sämtliche seit dem letzten Laden oder seit dem letzten Aufruf von <see cref="M:System.Data.DataSet.AcceptChanges" /> vorgenommenen Änderungen enthält.</summary>
        <returns>Eine Kopie der Änderungen aus diesem <see cref="T:System.Data.DataSet" />, für das Aktionen ausgeführt werden können und das nachfolgend durch Verwendung von <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> wieder zusammengeführt werden kann. Wenn keine geänderten Zeilen gefunden werden, gibt die Methode <see langword="null" /> zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erstellt eine neue <xref:System.Data.DataSet>, die eine Kopie aller Zeilen in der ursprünglichen <xref:System.Data.DataSet> enthält, für die ausstehende Änderungen vorhanden sind. Beziehungs Einschränkungen können dazu führen, dass dem neuen <xref:System.Data.DataSet> zusätzliche unveränderte Zeilen hinzugefügt werden, wenn die unveränderten Zeilen Primärschlüssel enthalten, die den Fremdschlüsseln in den geänderten Zeilen entsprechen. Die Methode gibt `null` zurück, wenn keine Zeilen in der ursprünglichen <xref:System.Data.DataSet> vorhanden sind, für die ausstehende Änderungen vorhanden sind.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine einfache <xref:System.Data.DataSet> mit einer Tabelle, zwei Spalten und zehn Zeilen erstellt. Zwei Werte werden geändert, und es wird eine Zeile hinzugefügt. Mit der <xref:System.Data.DataSet.GetChanges%2A>-Methode wird eine Teilmenge der geänderten Daten erstellt. Nach dem Abgleichen von Fehlern wird der Teilmenge eine neue Spalte hinzugefügt, die das Schema ändert. Wenn die <xref:System.Data.DataSet.Merge%2A>-Methode aufgerufen wird und die `missingSchemaAction` auf `MissingSchemaAction.Add`festgelegt ist, wird die neue Spalte dem ursprünglichen Schema des <xref:System.Data.DataSet>-Objekts hinzugefügt.  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.HasChanges" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges (rowStates As DataRowState) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.GetChanges : System.Data.DataRowState -&gt; System.Data.DataSet" Usage="dataSet.GetChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates">Einer der <see cref="T:System.Data.DataRowState" />-Werte.</param>
        <summary>Ruft eine Kopie der <see cref="T:System.Data.DataSet" /> ab, die alle seit dem letzten Laden oder seit dem letzten Aufruf von <see cref="M:System.Data.DataSet.AcceptChanges" /> vorgenommenen und durch <see cref="T:System.Data.DataRowState" /> gefilterten Änderungen enthält.</summary>
        <returns>Eine gefilterte Kopie des <see cref="T:System.Data.DataSet" />, für die Aktionen durchgeführt werden und die nachfolgend mithilfe von <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> wieder mit dem Original zusammengeführt werden kann. Wenn keine Zeilen mit dem gewünschten <see cref="T:System.Data.DataRowState" /> gefunden werden, gibt die Methode <see langword="null" /> zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.GetChanges%2A>-Methode wird verwendet, um ein zweites <xref:System.Data.DataSet> Objekt zu entwickeln, das nur die in den ursprünglichen vorgenommenen Änderungen enthält. Verwenden Sie das `rowStates`-Argument, um den Typ der Änderungen anzugeben, die das neue Objekt enthalten soll.  
  
 Diese zurückgegebene Kopie ist so konzipiert, dass Sie wieder mit diesem ursprünglichen <xref:System.Data.DataSet>zusammengeführt wird. Beziehungs Einschränkungen können dazu führen, dass als `Unchanged` markierte übergeordnete Zeilen eingeschlossen werden. Wenn keine Zeilen mit dem gewünschten <xref:System.Data.DataRowState> gefunden werden, die <xref:System.Data.DataSet.GetChanges%2A> -Methode zurückkehrt `null`.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Data.DataSet.GetChanges%2A>-Methode verwendet, um ein zweites <xref:System.Data.DataSet>-Objekt zu erstellen, das dann verwendet wird, um eine Datenquelle zu aktualisieren.  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="GetDataSetSchema">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema(class System.Xml.Schema.XmlSchemaSet schemaSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDataSetSchema (schemaSet As XmlSchemaSet) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetDataSetSchema(System::Xml::Schema::XmlSchemaSet ^ schemaSet);" />
      <MemberSignature Language="F#" Value="static member GetDataSetSchema : System.Xml.Schema.XmlSchemaSet -&gt; System.Xml.Schema.XmlSchemaComplexType" Usage="System.Data.DataSet.GetDataSetSchema schemaSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaSet" Type="System.Xml.Schema.XmlSchemaSet" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="schemaSet">Das angegebene Schemaset.</param>
        <summary>Ruft eine Kopie von <see cref="T:System.Xml.Schema.XmlSchemaSet" /> für das DataSet ab.</summary>
        <returns>Eine Kopie des <see cref="T:System.Xml.Schema.XmlSchemaSet" />es.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info">Eine <see cref="T:System.Runtime.Serialization.SerializationInfo" /> mit den serialisierten Daten, die der <see cref="T:System.Data.DataSet" /> zugeordnet sind.</param>
        <param name="context">Ein <see cref="T:System.Runtime.Serialization.StreamingContext" />, der Quelle und Ziel des serialisierten Streams enthält, der dem <see cref="T:System.Data.DataSet" /> zugeordnet ist.</param>
        <summary>Füllt ein Serialisierungsinformationsobjekt mit den Daten auf, die zum Serialisieren des <see cref="T:System.Data.DataSet" /> erforderlich sind.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der Parameter <paramref name="info" /> ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaSerializable">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchemaSerializable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSchemaSerializable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSchemaSerializable () As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Schema::XmlSchema ^ GetSchemaSerializable();" />
      <MemberSignature Language="F#" Value="abstract member GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema&#xA;override this.GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema" Usage="dataSet.GetSchemaSerializable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine serialisierbare <see cref="T:System.Xml.Schema.XmlSchema" />-Instanz zurück.</summary>
        <returns>Die <see cref="T:System.Xml.Schema.XmlSchema" />-Instanz.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializationData">
      <MemberSignature Language="C#" Value="protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GetSerializationData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GetSerializationData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GetSerializationData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.GetSerializationData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetSerializationData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Die <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Instanz.</param>
        <param name="context">Der Streamingkontext.</param>
        <summary>Deserialisiert die Tabellendaten aus dem Binär- oder XML-Stream.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public string GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXml();" />
      <MemberSignature Language="F#" Value="member this.GetXml : unit -&gt; string" Usage="dataSet.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die XML-Darstellung der im <see cref="T:System.Data.DataSet" /> gespeicherten Daten zurück.</summary>
        <returns>Eine Zeichenfolge, die eine Darstellung der im <see cref="T:System.Data.DataSet" /> gespeicherten Daten ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Aufrufen dieser Methode ist mit dem Aufruf von <xref:System.Data.DataSet.WriteXml%2A> identisch, wenn <xref:System.Data.XmlWriteMode> auf <xref:System.Data.XmlWriteMode.IgnoreSchema>festgelegt ist.  
  
 <xref:System.Data.DataSet.GetXml%2A> gibt XML als Zeichenfolge zurück und erfordert daher mehr Aufwand als <xref:System.Data.DataSet.WriteXml%2A>, XML in eine Datei zu schreiben.  
  
 Wenn Sie einen <xref:System.Data.DataSet> mithilfe von Schema Rückschluss erstellen und mithilfe von XML-oder Webdiensten serialisieren, kann sich die Spalten Reihenfolge ändern.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Data.DataSet> erstellt und <xref:System.Data.DataTable>, Beispiel Daten hinzugefügt und dann die Daten im XML-Format angezeigt.  
  
 [!code-csharp[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/VB/source.vb#1)]  
  
 Dieses Beispiel veranschaulicht das Schreiben von Daten in eine XML-Datei aus einem DataSet und das Lesen von Daten in ein DataSet aus XML. In diesem Beispiel wird ein DataSet mit zwei Tabellen erstellt, zwei Möglichkeiten zum Exportieren eines Datasets in die XML-Dateien ("Write texml" und "GetXml") und zwei Möglichkeiten ("Read XML" und "InferXmlSchema") verwendet, um ein DataSet aus den XML-Dateien zu importieren.  
  
 Bevor Sie das Beispiel kompilieren und ausführen, müssen Sie im Beispiel Verzeichnis vier XML-Dateien erstellen. Erstellen Sie zuerst elementswithattributs. XML:  
  
```xml  
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7">New</Course>  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3">Cancelled</Department>  
</MySchool>  
```  
  
 Erstellen Sie als nächstes elementswithchiltroementsxml. XML:  
  
```xml  
<MySchool>  
  <Course>  
    <CourseID>C1045</CourseID>  
    <Year>2012</Year>  
    <Title>Calculus</Title>  
    <Credits>4</Credits>  
    <DepartmentID>7</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C1061</CourseID>  
    <Year>2012</Year>  
    <Title>Physics</Title>  
    <Credits>4</Credits>  
    <DepartmentID>1</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2021</CourseID>  
    <Year>2012</Year>  
    <Title>Composition</Title>  
    <Credits>3</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2042</CourseID>  
    <Year>2012</Year>  
    <Title>Literature</Title>  
    <Credits>4</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Department>  
    <DepartmentID>1</DepartmentID>  
    <Name>Engineering</Name>  
    <Budget>350000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>2</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>2</DepartmentID>  
    <Name>English</Name>  
    <Budget>120000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>6</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>4</DepartmentID>  
    <Name>Economics</Name>  
    <Budget>200000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>4</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>7</DepartmentID>  
    <Name>Mathematics</Name>  
    <Budget>250024</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>3</Administrator>  
  </Department>  
</MySchool>  
```  
  
 Erstellen Sie nun elementswithonlyattributs. XML:  
  
```xml
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7" />  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3" />  
</MySchool>  
```  
  
 Erstellen Sie schließlich repeatingelements. XML:  
  
```xml
<MySchool>  
  <Course>C1045</Course>  
  <Course>C1061</Course>  
  <Department>Engineering</Department>   
  <Department>Mathematics</Department>  
</MySchool>  
```  
  
 Nun können Sie den folgenden Quellcode kompilieren und ausführen.  Das [Speichern von Daten aus einem Dataset in einer XML](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) -Datei C# umfasst Visual Basic und Projekte für dieses Beispiel.  
  
```csharp
using System;  
using System.Data;  
using System.IO;  
using System.Text;  
using System.Xml;  
  
// Use WriteXml method to export the dataset.  
static class DataTableHelper {  
   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  
      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  
         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  
            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  
            Console.WriteLine("Write {0} to the File {1}.", dataset.DataSetName, xmlFileName);  
            Console.WriteLine();  
         }  
      }  
   }  
  
   // Use GetXml method to get the XML data of the dataset and then export to the file.  
   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  
      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  
         writer.WriteLine(dataset.GetXml());  
         Console.WriteLine("Get Xml data from {0} and write to the File {1}.", dataset.DataSetName, xmlFileName);  
         Console.WriteLine();  
      }  
   }  
  
   // Use ReadXml method to import the dataset from the dataset.  
   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  
      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  
         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  
            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  
         }  
      }  
   }  
  
   // Display the columns and value of DataSet.  
   public static void ShowDataSet(DataSet dataset) {  
      foreach (DataTable table in dataset.Tables) {  
         Console.WriteLine("Table {0}:", table.TableName);  
         ShowDataTable(table);  
      }  
   }  
  
   // Display the columns and value of DataTable.  
   private static void ShowDataTable(DataTable table) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-14}", col.ColumnName);  
      }  
      Console.WriteLine("{0,-14}", "");  
  
      foreach (DataRow row in table.Rows) {  
         if (row.RowState == DataRowState.Deleted) {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col, DataRowVersion.Original]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col, DataRowVersion.Original]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col, DataRowVersion.Original]);  
               }  
            }  
         }  
         else {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col]);  
               }  
            }  
         }  
         Console.WriteLine("{0,-14}", "");  
      }  
   }  
  
   // Display the columns of DataSet.  
   public static void ShowDataSetSchema(DataSet dataSet) {  
      Console.WriteLine("{0} contains the following tables:", dataSet.DataSetName);  
      foreach (DataTable table in dataSet.Tables) {  
         Console.WriteLine("   Table {0} contains the following columns:", table.TableName);  
         ShowDataTableSchema(table);  
      }  
   }  
  
   // Display the columns of DataTable  
   private static void ShowDataTableSchema(DataTable table) {  
      String columnString = "";  
      foreach (DataColumn col in table.Columns) {  
         columnString += col.ColumnName + "   ";  
      }  
      Console.WriteLine(columnString);  
   }  
}  
  
class Program {  
   static void Main(string[] args) {  
      // Create the DataSet  
      DataSet school = new DataSet("MySchool");  
      DataTable course = CreateCourse();  
      DataTable department = CreateDepartment();  
      school.Tables.Add(course);  
      school.Tables.Add(department);  
  
      // Define the constraint between the tables.  
      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint("CourseDepartFK", department.Columns["DepartmentID"], course.Columns["DepartmentID"]);  
      courseDepartFK.DeleteRule = Rule.Cascade;  
      courseDepartFK.UpdateRule = Rule.Cascade;  
      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  
      course.Constraints.Add(courseDepartFK);  
  
      InsertDepartments(department);  
      InsertCourses(course);  
  
      // Export the dataset to the XML file.  
      Console.WriteLine("Data of the whole DataSet {0}", school.DataSetName);  
      DataTableHelper.ShowDataSet(school);  
  
      String xmlWithSchemaFileName = "WriterXMLWithSchema.xml";  
      String xmlGetDataFileName = "GetXML.xml";  
  
      // Use two ways to export the dataset to the Xml file.  
      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  
      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  
  
      // Import the dataset from the XML file.  
      // Use two ways to import the dataset from the Xml file.  
      Console.WriteLine("Read Xml document into a new DataSet:");  
      DataSet newSchool = new DataSet("NewSchool");  
      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  
      DataTableHelper.ShowDataSetSchema(newSchool);  
      Console.WriteLine();  
  
      Console.WriteLine("Infer a schema for a DataSet from an XML document:");  
      InferDataSetSchemaFromXml();  
  
      Console.WriteLine("Press any key to exit.");  
      Console.ReadKey();  
   }  
  
   static DataTable CreateCourse() {  
      DataTable course = new DataTable("Course");  
      DataColumn[] cols ={  
                              new DataColumn("CourseID",typeof(String)),  
                              new DataColumn("Year",typeof(Int32)),  
                              new DataColumn("Title",typeof(String)),  
                              new DataColumn("Credits",typeof(Int32)),  
                              new DataColumn("DepartmentID",typeof(Int32))};  
      course.Columns.AddRange(cols);  
  
      course.PrimaryKey = new DataColumn[] { course.Columns["CourseID"], course.Columns["Year"] };  
  
      return course;  
   }  
  
   static DataTable CreateDepartment() {  
      DataTable department = new DataTable("Department");  
      DataColumn[] cols = {   
                                new DataColumn("DepartmentID", typeof(Int32)),  
                                new DataColumn("Name",typeof(String)),  
                                new DataColumn("Budget",typeof(Decimal)),  
                                new DataColumn("StartDate",typeof(DateTime)),  
                                new DataColumn("Administrator",typeof(Int32))};  
      department.Columns.AddRange(cols);  
  
      department.PrimaryKey = new DataColumn[] { department.Columns["DepartmentID"] };  
  
      return department;  
   }  
  
   static void InsertDepartments(DataTable department) {  
      Object[] rows = {   
                            new Object[]{1,"Engineering",350000.00,new DateTime(2007,9,1),2},  
                            new Object[]{2,"English",120000.00,new DateTime(2007,9,1),6},  
                            new Object[]{4,"Economics",200000.00,new DateTime(2007,9,1),4},  
                            new Object[]{7,"Mathematics",250024.00,new DateTime(2007,9,1),3}};  
  
      foreach (Object[] row in rows) {  
         department.Rows.Add(row);  
      }  
   }  
  
   static void InsertCourses(DataTable course) {  
      Object[] rows ={  
                               new Object[]{"C1045",2012,"Calculus",4,7},  
                               new Object[]{"C1061",2012,"Physics",4,1},  
                               new Object[]{"C2021",2012,"Composition",3,2},  
                               new Object[]{"C2042",2012,"Literature",4,2}};  
  
      foreach (Object[] row in rows) {  
         course.Rows.Add(row);  
      }  
   }  
  
   // Display the results of inferring schema from four types of XML structures  
   private static void InferDataSetSchemaFromXml() {  
      String[] xmlFileNames = {   
  
                                    @"ElementsWithOnlyAttributes.xml",   
                                    @"ElementsWithAttributes.xml",  
                                    @"RepeatingElements.xml",   
                                    @"ElementsWithChildElements.xml" };  
  
      foreach (String xmlFileName in xmlFileNames) {  
         Console.WriteLine("Result of {0}", Path.GetFileNameWithoutExtension(xmlFileName));  
         DataSet newSchool = new DataSet();  
         newSchool.InferXmlSchema(xmlFileName, null);  
         DataTableHelper.ShowDataSetSchema(newSchool);  
         Console.WriteLine();  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="GetXmlSchema">
      <MemberSignature Language="C#" Value="public string GetXmlSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXmlSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXmlSchema" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlSchema () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXmlSchema();" />
      <MemberSignature Language="F#" Value="member this.GetXmlSchema : unit -&gt; string" Usage="dataSet.GetXmlSchema " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt das XSD-Schema für die XML-Darstellung der im <see cref="T:System.Data.DataSet" /> gespeicherten Daten zurück.</summary>
        <returns>Eine Zeichenfolge, die das XSD-Schema für die XML-Darstellung der im <see cref="T:System.Data.DataSet" /> gespeicherten Daten darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Aufrufen dieser Methode ist mit dem Aufruf von <xref:System.Data.DataSet.WriteXmlSchema%2A>identisch, mit der Ausnahme, dass nur das primäre Schema geschrieben wird.  
  
 <xref:System.Data.DataSet.GetXmlSchema%2A> gibt XML als Zeichenfolge zurück und erfordert daher mehr Aufwand als <xref:System.Data.DataSet.WriteXmlSchema%2A>, XML in eine Datei zu schreiben.  
  
 Wenn Sie einen <xref:System.Data.DataSet> mithilfe von Schema Rückschluss erstellen und mithilfe von XML-oder Webdiensten serialisieren, kann sich die Spalten Reihenfolge ändern.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Data.DataSet> erstellt und <xref:System.Data.DataTable>. Anschließend wird das Schema im XML-Format angezeigt.  
  
 [!code-csharp[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="HasChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Data.DataSet" /> Änderungen aufweist, einschließlich neuer, gelöschter oder geänderter Zeilen.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges();" />
      <MemberSignature Language="F#" Value="member this.HasChanges : unit -&gt; bool" Usage="dataSet.HasChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Data.DataSet" /> Änderungen aufweist, einschließlich neuer, gelöschter oder geänderter Zeilen.</summary>
        <returns><see langword="true" />, wenn das <see cref="T:System.Data.DataSet" /> Änderungen aufweist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Data.DataSet.GetChanges%2A>-Methode verwendet, um ein zweites <xref:System.Data.DataSet>-Objekt zu erstellen, das dann verwendet wird, um eine Datenquelle zu aktualisieren.  
  
 [!code-csharp[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges (rowStates As DataRowState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.HasChanges : System.Data.DataRowState -&gt; bool" Usage="dataSet.HasChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates">Einer der <see cref="T:System.Data.DataRowState" />-Werte.</param>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Data.DataSet" /> Änderungen aufweist, einschließlich neuer, gelöschter oder geänderter Zeilen, gefiltert durch <see cref="T:System.Data.DataRowState" />.</summary>
        <returns><see langword="true" />, wenn das <see cref="T:System.Data.DataSet" /> Änderungen aufweist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überprüfen Sie die <xref:System.Data.DataSet.HasChanges%2A>-Eigenschaft des `DataSet`, bevor Sie die <xref:System.Data.DataSet.GetChanges%2A>-Methode aufrufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Data.DataSet.GetChanges%2A>-Methode verwendet, um ein zweites <xref:System.Data.DataSet>-Objekt zu erstellen, das dann verwendet wird, um eine Datenquelle zu aktualisieren.  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.HasErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasErrors { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasErrors : bool" Usage="System.Data.DataSet.HasErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetHasErrorsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob in diesem <see cref="T:System.Data.DataTable" /> in einem der <see cref="T:System.Data.DataSet" />-Objekte Fehler vorliegen.</summary>
        <value><see langword="true" />, wenn eine Tabelle einen Fehler enthält. Andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede <xref:System.Data.DataTable> in einem <xref:System.Data.DataSet> verfügt auch über eine <xref:System.Data.DataTable.HasErrors%2A>-Eigenschaft. Verwenden Sie zuerst die `HasErrors`-Eigenschaft des `DataSet`, um zu bestimmen, ob eine Tabelle Fehler aufweist, bevor Sie einzelne <xref:System.Data.DataTable> Objekte überprüfen. Wenn ein `DataTable` Fehler aufweist, gibt die <xref:System.Data.DataTable.GetErrors%2A>-Methode ein Array von <xref:System.Data.DataRow>-Objekten zurück, die die Fehler enthalten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Data.DataSet.HasErrors%2A>-Eigenschaft verwendet, um zu bestimmen, ob ein <xref:System.Data.DataSet>-Objekt Fehler enthält. Wenn dies der Fall ist, werden die Fehler für die einzelnen <xref:System.Data.DataRow> in den einzelnen <xref:System.Data.DataTable> gedruckt.  
  
 [!code-csharp[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InferXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wendet ein XML-Schema auf das <see cref="T:System.Data.DataSet" /> an.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.Stream stream, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::Stream ^ stream, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.Stream * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (stream, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="stream">Der <see langword="Stream" />, aus dem das Schema gelesen werden soll.</param>
        <param name="nsArray">Ein Array von Zeichenfolgen für Namespace-URIs (Uniform Resource Identifier), die aus dem Schemarückschluss ausgeschlossen werden sollen.</param>
        <summary>Wendet das XML-Schema aus dem angegebenen <see cref="T:System.IO.Stream" /> auf das <see cref="T:System.Data.DataSet" /> an.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.TextReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As TextReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::TextReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.TextReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see langword="TextReader" />, aus dem das Schema gelesen werden soll.</param>
        <param name="nsArray">Ein Array von Zeichenfolgen für Namespace-URIs (Uniform Resource Identifier), die aus dem Schemarückschluss ausgeschlossen werden sollen.</param>
        <summary>Wendet das XML-Schema aus dem angegebenen <see cref="T:System.IO.TextReader" /> auf das <see cref="T:System.Data.DataSet" /> an.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (string fileName, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(string fileName, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (fileName As String, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::String ^ fileName, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : string * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (fileName, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Name der Datei, aus der das Schema gelesen werden soll, einschließlich des Pfades.</param>
        <param name="nsArray">Ein Array von Zeichenfolgen für Namespace-URIs (Uniform Resource Identifier), die aus dem Schemarückschluss ausgeschlossen werden sollen.</param>
        <summary>Wendet das XML-Schema aus der angegebenen Datei auf das <see cref="T:System.Data.DataSet" /> an.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> ist nicht auf <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> festgelegt.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">zum Lesen und Schreiben von Dateien. Zugeordnete Enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.Xml.XmlReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As XmlReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::Xml::XmlReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.Xml.XmlReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see langword="XMLReader" />, aus dem das Schema gelesen werden soll.</param>
        <param name="nsArray">Ein Array von Zeichenfolgen für Namespace-URIs (Uniform Resource Identifier), die aus dem Schemarückschluss ausgeschlossen werden sollen.</param>
        <summary>Wendet das XML-Schema aus dem angegebenen <see cref="T:System.Xml.XmlReader" /> auf das <see cref="T:System.Data.DataSet" /> an.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.ISupportInitializeNotification.Initialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt nach dem Initialisieren der <see cref="T:System.Data.DataSet" /> auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter <xref:System.Data.DataSet.IsInitialized%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeDerivedDataSet">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDerivedDataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDerivedDataSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InitializeDerivedDataSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeDerivedDataSet ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeDerivedDataSet();" />
      <MemberSignature Language="F#" Value="abstract member InitializeDerivedDataSet : unit -&gt; unit&#xA;override this.InitializeDerivedDataSet : unit -&gt; unit" Usage="dataSet.InitializeDerivedDataSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deserialisiert alle Tabellendaten des Dataset aus dem Binär- oder XML-Stream.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinarySerialized">
      <MemberSignature Language="C#" Value="protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsBinarySerialized(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsBinarySerialized (info As SerializationInfo, context As StreamingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsBinarySerialized(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.IsBinarySerialized : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; bool" Usage="dataSet.IsBinarySerialized (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info">Das <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt.</param>
        <param name="context">Das <see cref="T:System.Runtime.Serialization.StreamingContext" />-Objekt.</param>
        <summary>Überprüft das Format der serialisierten Darstellung des <see langword="DataSet" />.</summary>
        <returns><see langword="true" />, wenn die angegebene <see cref="T:System.Runtime.Serialization.SerializationInfo" /> ein in seinem Binärformat serialisiertes <see langword="DataSet" /> darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Element unterstützt die .NET Framework-Infrastruktur und ist nicht für die direkte Verwendung im Code vorgesehen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Data.DataSet.IsInitialized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.ISupportInitializeNotification.IsInitialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Data.DataSet" /> initialisiert wurde.</summary>
        <value><see langword="true" />, um anzugeben, dass die Komponente die Initialisierung abgeschlossen hat, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gibt den Status der <xref:System.Data.DataSet> während der Erstellung zurück, z. a. durch Visual Studio. Mit der <xref:System.Data.DataSet.BeginInit%2A>-Methode wird `false` festgelegt, und <xref:System.Data.DataSet.EndInit%2A>-Methode legt Sie auf `true`fest.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Füllt eine <see cref="T:System.Data.DataSet" /> mit Werten aus einer Datenquelle, die den angegebenen <see cref="T:System.Data.IDataReader" /> verwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataTable.Load%2A>-Methode bietet eine Technik zum Auffüllen eines einzelnen <xref:System.Data.DataTable> mit Daten, die aus einer <xref:System.Data.IDataReader> Instanz abgerufen werden. Diese Methode bietet die gleiche Funktionalität, ermöglicht Ihnen jedoch das Laden mehrerer Resultsets aus einer `IDataReader` in mehrere Tabellen innerhalb einer `DataSet`.  
  
 Wenn die `DataSet` bereits Zeilen enthält, werden die eingehenden Daten aus der Datenquelle mit den vorhandenen Zeilen zusammengeführt.  
  
 Die `Load`-Methode kann in verschiedenen gängigen Szenarien verwendet werden, wobei alle Daten aus einer angegebenen Datenquelle bezogen und dem aktuellen Datencontainer (in diesem Fall einer `DataSet`) hinzugefügt werden. In diesen Szenarien wird die Standardverwendung für eine `DataSet`beschrieben und deren Update-und Zusammenschluss Verhalten beschrieben.  
  
 Ein-`DataSet` wird mit einer einzelnen primären Datenquelle synchronisiert oder aktualisiert. Der `DataSet` verfolgt Änderungen nach und ermöglicht die Synchronisierung mit der primären Datenquelle. Außerdem kann eine `DataSet` inkrementelle Daten aus einer oder mehreren sekundären Datenquellen akzeptieren. Der `DataSet` ist nicht für die Nachverfolgung von Änderungen verantwortlich, um die Synchronisierung mit der sekundären Datenquelle zuzulassen.  
  
 Bei diesen beiden hypothetischen Datenquellen erfordert ein Benutzer wahrscheinlich eines der folgenden Verhaltensweisen:  
  
-   Initialisieren Sie `DataSet` aus einer primären Datenquelle. In diesem Szenario möchte der Benutzer eine leere `DataSet` mit Werten aus der primären Datenquelle initialisieren. Der Inhalt einer oder mehrerer Datentabelle wird geändert. Später beabsichtigt der Benutzer, Änderungen an die primäre Datenquelle zurückzugeben.  
  
-   Behalten Sie Änderungen bei, und synchronisieren Sie Sie von der primären Datenquelle erneut. In diesem Szenario möchte der Benutzer die `DataSet` im vorherigen Szenario ausfüllen und eine inkrementelle Synchronisierung mit der primären Datenquelle durchführen, wobei die im `DataSet`vorgenommenen Änderungen beibehalten werden.  
  
-   Inkrementeller Datenfeed aus sekundären Datenquellen. In diesem Szenario möchte der Benutzer Änderungen aus einer oder mehreren sekundären Datenquellen zusammenführen und diese Änderungen an die primäre Datenquelle zurückgeben.  
  
 Durch die `Load`-Methode werden alle diese Szenarios ermöglicht. Mit dieser Methode können Sie einen Parameter für die Lade Option angeben, der angibt, wie bereits in einem <xref:System.Data.DataTable> Zeilen mit geladenen Zeilen kombiniert werden. In der folgenden Tabelle werden die drei Lade Optionen beschrieben, die von der <xref:System.Data.LoadOption>-Enumeration bereitgestellt werden. In jedem Fall gibt die Beschreibung das Verhalten an, wenn der Primärschlüssel einer Zeile in den eingehenden Daten mit dem Primärschlüssel einer vorhandenen Zeile übereinstimmt.  
  
|Option Laden|Beschreibung|  
|-----------------|-----------------|  
|`PreserveChanges` (Standardwert)|Aktualisiert die ursprüngliche Version der Zeile mit dem Wert der eingehenden Zeile.|  
|`OverwriteChanges`|Aktualisiert die aktuelle und die ursprüngliche Version der Zeile mit dem Wert der eingehenden Zeile.|  
|`Upsert`|Aktualisiert die aktuelle Version der Zeile mit dem Wert der eingehenden Zeile.|  
  
 Im Allgemeinen sind die Optionen `PreserveChanges` und `OverwriteChanges` für Szenarien gedacht, in denen der Benutzer die `DataSet` und seine Änderungen mit der primären Datenquelle synchronisieren muss. Die Option `Upsert` erleichtert das aggregierten von Änderungen aus einer oder mehreren sekundären Datenquellen.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.IDataReader" />, der ein oder mehrere Resultsets bereitstellt.</param>
        <param name="loadOption">Ein Wert aus der <see cref="T:System.Data.LoadOption" />-Enumeration, der angibt, wie bereits in den <see cref="T:System.Data.DataTable" />-Instanzen des <see cref="T:System.Data.DataSet" /> vorhandene Zeilen mit eingehenden Zeilen kombiniert werden, die denselben Primärschlüssel aufweisen.</param>
        <param name="tables">Ein Array von <see cref="T:System.Data.DataTable" />-Instanzen, aus dem die <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" />-Methode Namens- und Namespaceinformationen abruft. Jede dieser Tabellen muss ein Member der <see cref="T:System.Data.DataTableCollection" /> sein, die in diesem <see cref="T:System.Data.DataSet" /> enthalten ist.</param>
        <summary>Füllt ein <see cref="T:System.Data.DataSet" /> mit Werten aus einer Datenquelle. Dazu werden der bereitgestellte <see cref="T:System.Data.IDataReader" /> sowie ein Array von <see cref="T:System.Data.DataTable" />-Instanzen verwendet, mit dem Schema- und Namespaceinformationen bereitgestellt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataTable.Load%2A>-Methode bietet eine Technik zum Auffüllen eines einzelnen <xref:System.Data.DataTable> mit Daten, die aus einer <xref:System.Data.IDataReader> Instanz abgerufen werden. Diese Methode bietet die gleiche Funktionalität, ermöglicht Ihnen jedoch das Laden mehrerer Resultsets aus einer <xref:System.Data.IDataReader> in mehrere Tabellen innerhalb einer <xref:System.Data.DataSet>.  
  
> [!NOTE]
>  Der Ladevorgang schlägt mit einem <xref:System.InvalidOperationException> fehl, wenn eine der Quelldaten Spalten in der eingehenden `reader` berechnete Spalten sind.  
  
 Mit dem `loadOption`-Parameter können Sie angeben, wie die importierten Daten mit vorhandenen Daten interagieren sollen. dabei kann es sich um einen beliebigen Wert aus der <xref:System.Data.LoadOption>-Enumeration handeln. Weitere Informationen zur Verwendung dieses Parameters finden Sie in der Dokumentation für die <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A>-Methode.  
  
 Mit dem `tables`-Parameter können Sie ein Array von <xref:System.Data.DataTable>-Instanzen angeben, die die Reihenfolge der Tabellen angeben, die den einzelnen Resultsets entsprechen, die vom Reader geladen werden. Die <xref:System.Data.DataSet.Load%2A>-Methode füllt jede angegebene <xref:System.Data.DataTable> Instanz mit Daten aus einem einzelnen Resultset aus dem Quelldaten Reader. Nach jedem Resultset wechselt die <xref:System.Data.DataSet.Load%2A>-Methode zum nächsten Resultset innerhalb des Readers, bis keine weiteren Resultsets mehr vorhanden sind.  
  
 Das namens Auflösungs Schema für diese Methode entspricht der Methode, gefolgt von der <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode der <xref:System.Data.Common.DbDataAdapter>-Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine neue <xref:System.Data.DataSet>erstellt, dem <xref:System.Data.DataSet>werden zwei <xref:System.Data.DataTable> Instanzen hinzugefügt. Anschließend wird die <xref:System.Data.DataSet> mithilfe der <xref:System.Data.DataSet.Load%2A>-Methode aufgefüllt, wobei Daten aus einer <xref:System.Data.DataTableReader> abgerufen werden, die zwei Resultsets enthält. Zum Schluss zeigt das Beispiel den Inhalt der Tabellen im Konsolenfenster an.  
  
 [!code-csharp[DataWorks DataSet.LoadTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params string[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, string[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::String ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * string[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.String[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.IDataReader" />, der ein oder mehrere Resultsets bereitstellt.</param>
        <param name="loadOption">Ein Wert aus der <see cref="T:System.Data.LoadOption" />-Enumeration, der angibt, wie bereits in den <see cref="T:System.Data.DataTable" />-Instanzen des <see langword="DataSet" /> vorhandene Zeilen mit eingehenden Zeilen kombiniert werden, die denselben Primärschlüssel aufweisen.</param>
        <param name="tables">Ein Zeichenfolgenarray, aus dem die <see langword="Load" />-Methode Tabellennameninformationen abruft.</param>
        <summary>Füllt ein <see cref="T:System.Data.DataSet" /> mit Werten aus einer Datenquelle. Dazu wird der bereitgestellte <see cref="T:System.Data.IDataReader" /> sowie ein Array von Zeichenfolgen verwendet, mit dem die Namen der Tabellen im <see langword="DataSet" /> bereitgestellt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataTable.Load%2A>-Methode bietet eine Technik zum Auffüllen eines einzelnen <xref:System.Data.DataTable> mit Daten, die aus einer <xref:System.Data.IDataReader> Instanz abgerufen werden. Diese Methode bietet die gleiche Funktionalität, ermöglicht Ihnen jedoch das Laden mehrerer Resultsets aus einer `IDataReader` in mehrere Tabellen innerhalb einer `DataSet`.  
  
> [!NOTE]
>  Der Ladevorgang schlägt mit einem <xref:System.InvalidOperationException> fehl, wenn eine der Quelldaten Spalten in der eingehenden `reader` berechnete Spalten sind.  
  
 Mit dem `loadOption`-Parameter können Sie angeben, wie die importierten Daten mit vorhandenen Daten interagieren sollen. dabei kann es sich um einen beliebigen Wert aus der <xref:System.Data.LoadOption>-Enumeration handeln. Weitere Informationen zur Verwendung dieses Parameters finden Sie in der Dokumentation für die <xref:System.Data.DataTable.Load%2A>-Methode.  
  
 Der `tables`-Parameter ermöglicht das Angeben eines Arrays von Tabellennamen, das die Reihenfolge der Tabellen angibt, die den einzelnen Resultsets entsprechen, die vom Reader geladen werden. Die `Load`-Methode versucht, eine Tabelle innerhalb des `DataSet` zu suchen, die mit dem Namen übereinstimmt, der im Array von Tabellennamen in der angegebenen Reihenfolge gefunden wurde Wenn eine übereinstimmende Tabelle gefunden wird, wird diese Tabelle mit dem Inhalt des aktuellen Resultsets geladen. Wenn keine übereinstimmende Tabelle gefunden wird, wird eine Tabelle mit dem Namen erstellt, der im Array von Tabellennamen angegeben ist, und das Schema der neuen Tabelle wird aus dem Resultset abgeleitet. Nach jedem Resultset wechselt die `Load`-Methode zum nächsten Resultset innerhalb des Readers, bis keine weiteren Resultsets mehr vorhanden sind.  
  
 Der Standard Namespace, der `DataSet`zugeordnet ist, wird ggf. den einzelnen neu erstellten `DataTable`zugeordnet. Das namens Auflösungs Schema für diese Methode entspricht der Methode, gefolgt von der <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode der <xref:System.Data.Common.DbDataAdapter>-Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel für eine Konsolenanwendung werden zunächst Tabellen erstellt und Daten aus einem Reader mithilfe der `Load`-Methode in eine <xref:System.Data.DataSet>geladen. Im Beispiel werden dann einer <xref:System.Data.DataSet> Tabellen hinzugefügt, und es wird versucht, die Tabellen mit Daten aus einer <xref:System.Data.DataTableReader>auszufüllen. Da in diesem Beispiel die an die `Load`-Methode übergebenen Parameter einen Tabellennamen angeben, der nicht vorhanden ist, erstellt die `Load`-Methode eine neue Tabelle, die dem als Parameter übergebenen Namen entspricht. Nachdem die Daten geladen wurden, wird im Beispiel der Inhalt aller Tabellen im Konsolenfenster angezeigt.  
  
 [!code-csharp[DataWorks DataSet.LoadString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.FillErrorEventHandler errorHandler, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, System::Data::FillErrorEventHandler ^ errorHandler, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit&#xA;override this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, errorHandler, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.Data.DataTable[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Data.IDataReader" />, der ein oder mehrere Resultsets bereitstellt.</param>
        <param name="loadOption">Ein Wert aus der <see cref="T:System.Data.LoadOption" />-Enumeration, der angibt, wie bereits in den <see cref="T:System.Data.DataTable" />-Instanzen des <see cref="T:System.Data.DataSet" /> vorhandene Zeilen mit eingehenden Zeilen kombiniert werden, die denselben Primärschlüssel aufweisen.</param>
        <param name="errorHandler">Ein <see cref="T:System.Data.FillErrorEventHandler" />-Delegat, der aufgerufen wird, wenn beim Laden von Daten Fehler auftreten.</param>
        <param name="tables">Ein Array von <see cref="T:System.Data.DataTable" />-Instanzen, aus dem die <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" />-Methode Namens- und Namespaceinformationen abruft.</param>
        <summary>Füllt ein <see cref="T:System.Data.DataSet" /> mit Werten aus einer Datenquelle. Dazu werden der bereitgestellte <see cref="T:System.Data.IDataReader" /> sowie ein Array von <see cref="T:System.Data.DataTable" />-Instanzen verwendet, mit dem Schema- und Namespaceinformationen bereitgestellt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataTable.Load%2A>-Methode bietet eine Technik zum Auffüllen eines einzelnen <xref:System.Data.DataTable> mit Daten, die aus einer <xref:System.Data.IDataReader> Instanz abgerufen werden. Diese Methode bietet die gleiche Funktionalität, ermöglicht Ihnen jedoch das Laden mehrerer Resultsets aus einer <xref:System.Data.IDataReader> in mehrere Tabellen innerhalb einer <xref:System.Data.DataSet>.  
  
> [!NOTE]
>  Der Ladevorgang schlägt mit einem <xref:System.InvalidOperationException> fehl, wenn eine der Quelldaten Spalten in der eingehenden `reader` berechnete Spalten sind.  
  
 Mit dem `loadOption`-Parameter können Sie angeben, wie die importierten Daten mit vorhandenen Daten interagieren sollen. dabei kann es sich um einen beliebigen Wert aus der <xref:System.Data.LoadOption>-Enumeration handeln. Weitere Informationen zur Verwendung dieses Parameters finden Sie in der Dokumentation für die <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A>-Methode.  
  
 Der `errorHandler`-Parameter ist ein <xref:System.Data.FillErrorEventHandler> Delegat, der auf eine Prozedur verweist, die aufgerufen wird, wenn beim Laden von Daten ein Fehler auftritt. Der <xref:System.Data.FillErrorEventArgs>-Parameter, der an die Prozedur übergeben wird, bietet Eigenschaften, mit denen Sie Informationen zu dem aufgetretenen Fehler, der aktuellen Daten Zeile und dem ausgefüllten <xref:System.Data.DataTable> abrufen können. Wenn Sie diesen Delegatmechanismus anstelle eines einfacheren try/catch-Blocks verwenden, können Sie den Fehler ermitteln, die Situation behandeln und die Verarbeitung fortsetzen, wenn Sie möchten. Der <xref:System.Data.FillErrorEventArgs>-Parameter stellt eine <xref:System.Data.FillErrorEventArgs.Continue%2A> Eigenschaft bereit: Legen Sie diese Eigenschaft auf "`true`" fest, um anzugeben, dass Sie den Fehler behandelt haben und die Verarbeitung fortsetzen möchten. Legen Sie die-Eigenschaft auf `false` fest, um anzugeben, dass die Verarbeitung angehalten werden soll. Beachten Sie, dass das Festlegen der-Eigenschaft auf `false` bewirkt, dass der Code, der das Problem ausgelöst hat, eine Ausnahme auslöst.  
  
 Mit dem `tables`-Parameter können Sie ein Array von <xref:System.Data.DataTable>-Instanzen angeben, die die Reihenfolge der Tabellen angeben, die den einzelnen Resultsets entsprechen, die vom Reader geladen werden. Die <xref:System.Data.DataSet.Load%2A>-Methode füllt jede angegebene <xref:System.Data.DataTable> Instanz mit Daten aus einem einzelnen Resultset aus dem Quelldaten Reader. Nach jedem Resultset wechselt die <xref:System.Data.DataSet.Load%2A>-Methode zum nächsten Resultset innerhalb des Readers, bis keine weiteren Resultsets mehr vorhanden sind.  
  
 Das namens Auflösungs Schema für diese Methode entspricht der Methode, gefolgt von der <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode der <xref:System.Data.Common.DbDataAdapter>-Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Tabelle zu einem <xref:System.Data.DataSet>hinzugefügt. Anschließend wird versucht, die <xref:System.Data.DataSet.Load%2A>-Methode zum Laden von Daten aus einem <xref:System.Data.DataTableReader> zu verwenden, das ein nicht kompatibles Schema enthält. Anstatt den Fehler abzufangen, wird in diesem Beispiel ein <xref:System.Data.FillErrorEventHandler> Delegaten verwendet, um den Fehler zu untersuchen und zu behandeln. Die Ausgabe wird im Konsolenfenster angezeigt.  
  
 [!code-csharp[DataWorks DataSet.Load#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.Load/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.Load#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.Load/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Locale" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Locale" />
      <MemberSignature Language="VB.NET" Value="Public Property Locale As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Locale { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Locale : System.Globalization.CultureInfo with get, set" Usage="System.Data.DataSet.Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetLocaleDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Gebietsschemainformationen ab, die für den Vergleich von Zeichenfolgen in der Tabelle verwendet werden, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Globalization.CultureInfo" />, die Daten zum Computergebietsschema des Benutzers enthält. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.Locale%2A>-Eigenschaft gibt das Gebiets Schema an, für das die Sortierung gilt.  
  
 Standardmäßig legt das Festlegen des <xref:System.Data.DataSet.Locale%2A> für ein <xref:System.Data.DataSet> auch die <xref:System.Data.DataSet.Locale%2A> für jedes <xref:System.Data.DataTable> Objekt in dieser `DataSet` auf denselben Wert fest.  
  
> [!NOTE]
>  In Spalten, die Ausdrücke enthalten, wird der <xref:System.StringComparison.InvariantCulture> verwendet. Der <xref:System.StringComparison.CurrentCulture> wird ignoriert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.Globalization.CultureInfo> für eine <xref:System.Data.DataSet> abgerufen und die Eigenschaften <xref:System.Globalization.CultureInfo.DisplayName%2A> und <xref:System.Globalization.CultureInfo.EnglishName%2A> ausgegeben.  
  
 [!code-vb[Classic WebData DataSet.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Locale Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Merge">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Führt ein angegebenes <see cref="T:System.Data.DataSet" />, eine <see cref="T:System.Data.DataTable" /> oder ein Array von <see cref="T:System.Data.DataRow" />-Objekten mit dem aktuellen <see langword="DataSet" /> oder der <see langword="DataTable" /> zusammen.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] -&gt; unit" Usage="dataSet.Merge rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Das Array von <see langword="DataRow" />-Objekten, das mit dem <see langword="DataSet" /> zusammengeführt werden soll.</param>
        <summary>Führt ein Array von <see cref="T:System.Data.DataRow" />-Objekten mit dem aktuellen <see cref="T:System.Data.DataSet" /> zusammen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird zum Zusammenführen von zwei <xref:System.Data.DataSet> Objekten verwendet, die überwiegend ähnliche Schemas aufweisen. Ein Merge wird in der Regel für eine Client Anwendung verwendet, um die neuesten Änderungen aus einer Datenquelle in eine vorhandene <xref:System.Data.DataSet>einzubeziehen. Dadurch kann die Client Anwendung über eine aktualisierte <xref:System.Data.DataSet> mit den neuesten Daten aus der Datenquelle verfügen.  
  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird in der Regel am Ende einer Reihe von Prozeduren aufgerufen, die das Überprüfen von Änderungen, das Abgleichen von Fehlern, das Aktualisieren der Datenquelle mit den Änderungen und schließlich das Aktualisieren der vorhandenen <xref:System.Data.DataSet>betreffen.  
  
 In einer Client Anwendung wird häufig eine einzelne Schaltfläche angezeigt, auf die der Benutzer klicken kann, um die geänderten Daten zu erfassen und zu überprüfen, bevor Sie an eine Komponente der mittleren Ebene zurückgesendet werden. In diesem Szenario wird zuerst die <xref:System.Data.DataSet.GetChanges%2A>-Methode aufgerufen. Diese Methode gibt eine zweite <xref:System.Data.DataSet> zurück, die für die Validierung und Zusammenführung optimiert ist. Dieses zweite <xref:System.Data.DataSet> Objekt enthält nur die <xref:System.Data.DataTable> und <xref:System.Data.DataRow> Objekte, die geändert wurden, was zu einer Teilmenge der ursprünglichen <xref:System.Data.DataSet>führte. Diese Teilmenge ist im Allgemeinen kleiner und wird daher effizienter an eine Komponente der mittleren Ebene zurückgegeben. Die Komponente der mittleren Ebene aktualisiert dann die ursprüngliche Datenquelle mit den Änderungen durch gespeicherte Prozeduren. Die mittlere Ebene kann dann entweder eine neue <xref:System.Data.DataSet> zurücksenden, die die ursprünglichen Daten und die neuesten Daten aus der Datenquelle enthält (durch erneutes Ausführen der ursprünglichen Abfrage), oder Sie kann die Teilmenge mit allen Änderungen zurücksenden, die an der Datenquelle vorgenommen wurden. (Wenn die Datenquelle z. b. automatisch eindeutige Primärschlüssel Werte erstellt, können diese Werte an die Client Anwendung zurückgegeben werden.) In beiden Fällen kann die zurückgegebene <xref:System.Data.DataSet> mit der <xref:System.Data.DataSet.Merge%2A>-Methode wieder mit der ursprünglichen <xref:System.Data.DataSet> der Client Anwendung zusammengeführt werden.  
  
 Wenn die <xref:System.Data.DataSet.Merge%2A>-Methode aufgerufen wird, werden die Schemas der beiden <xref:System.Data.DataSet> Objekte verglichen, da es möglich ist, dass die Schemas geändert wurden. Beispielsweise können in einem Business-to-Business-Szenario neue Spalten einem XML-Schema durch einen automatisierten Prozess hinzugefügt werden. Wenn die Quell <xref:System.Data.DataSet> Schema Elemente enthält (<xref:System.Data.DataColumn> Objekten hinzugefügt), die im Ziel fehlen, können die Schema Elemente dem Ziel hinzugefügt werden, indem das `missingSchemaAction`-Argument auf `MissingSchemaAction.Add`festgelegt wird. In diesem Fall enthält die zusammengeführte <xref:System.Data.DataSet> das hinzugefügte Schema und die Daten.  
  
 Nach dem Zusammenführen von Schemas werden die Daten zusammengeführt.  
  
 Beim Zusammenführen einer neuen Quell <xref:System.Data.DataSet> in das Ziel werden alle Quellzeilen mit dem <xref:System.Data.DataRowState> Wert `Unchanged`, `Modified`oder `Deleted` mit den Ziel Zeilen mit denselben Primärschlüssel Werten abgeglichen. Quellzeilen mit dem <xref:System.Data.DataRowState> Wert `Added` werden mit den neuen Ziel Zeilen mit denselben Primärschlüssel Werten wie die neuen Quellzeilen abgeglichen.  
  
 Während einer Zusammenführung werden Einschränkungen deaktiviert. Wenn Einschränkungen am Ende eines Merge-Vorgangs nicht aktiviert werden können, wird eine <xref:System.Data.ConstraintException> generiert, und die zusammengeführten Daten bleiben erhalten, während die Einschränkungen deaktiviert werden. In diesem Fall wird die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `false`festgelegt, und alle ungültigen Zeilen werden als fehlerhaft markiert. Die Fehler müssen behoben werden, bevor versucht wird, die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `true`zurückzusetzen.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet -&gt; unit" Usage="dataSet.Merge dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Die <see langword="DataSet" />, deren Daten und Schema zusammengeführt werden.</param>
        <summary>Führt ein angegebenes <see cref="T:System.Data.DataSet" /> und das entsprechende Schema mit dem aktuellen <see langword="DataSet" /> zusammen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird zum Zusammenführen von zwei <xref:System.Data.DataSet> Objekten verwendet, die überwiegend ähnliche Schemas aufweisen. Ein Merge wird in der Regel für eine Client Anwendung verwendet, um die neuesten Änderungen aus einer Datenquelle in eine vorhandene <xref:System.Data.DataSet>einzubeziehen. Dadurch kann die Client Anwendung über eine aktualisierte <xref:System.Data.DataSet> mit den neuesten Daten aus der Datenquelle verfügen.  
  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird in der Regel am Ende einer Reihe von Prozeduren aufgerufen, die das Überprüfen von Änderungen, das Abgleichen von Fehlern, das Aktualisieren der Datenquelle mit den Änderungen und schließlich das Aktualisieren der vorhandenen <xref:System.Data.DataSet>betreffen.  
  
 In einer Client Anwendung wird häufig eine einzelne Schaltfläche angezeigt, auf die der Benutzer klicken kann, um die geänderten Daten zu erfassen und zu überprüfen, bevor Sie an eine Komponente der mittleren Ebene zurückgesendet werden. In diesem Szenario wird zuerst die <xref:System.Data.DataSet.GetChanges%2A>-Methode aufgerufen. Diese Methode gibt eine zweite <xref:System.Data.DataSet> zurück, die für die Validierung und Zusammenführung optimiert ist. Dieses zweite <xref:System.Data.DataSet> Objekt enthält nur die <xref:System.Data.DataTable> und <xref:System.Data.DataRow> Objekte, die geändert wurden, was zu einer Teilmenge der ursprünglichen <xref:System.Data.DataSet>führte. Diese Teilmenge ist im Allgemeinen kleiner und wird daher effizienter an eine Komponente der mittleren Ebene zurückgegeben. Die Komponente der mittleren Ebene aktualisiert dann die ursprüngliche Datenquelle mit den Änderungen durch gespeicherte Prozeduren. Die mittlere Ebene kann dann entweder eine neue <xref:System.Data.DataSet> zurücksenden, die die ursprünglichen Daten und die neuesten Daten aus der Datenquelle enthält (durch erneutes Ausführen der ursprünglichen Abfrage), oder Sie kann die Teilmenge mit allen Änderungen zurücksenden, die an der Datenquelle vorgenommen wurden. (Wenn die Datenquelle z. b. automatisch eindeutige Primärschlüssel Werte erstellt, können diese Werte an die Client Anwendung zurückgegeben werden.) In beiden Fällen kann die zurückgegebene <xref:System.Data.DataSet> mit der <xref:System.Data.DataSet.Merge%2A>-Methode wieder mit der ursprünglichen <xref:System.Data.DataSet> der Client Anwendung zusammengeführt werden.  
  
 Wenn die <xref:System.Data.DataSet.Merge%2A>-Methode aufgerufen wird, werden die Schemas der beiden <xref:System.Data.DataSet> Objekte verglichen, da es möglich ist, dass die Schemas geändert wurden. Beispielsweise können in einem Business-to-Business-Szenario neue Spalten einem XML-Schema durch einen automatisierten Prozess hinzugefügt werden. Wenn die Quell <xref:System.Data.DataSet> Schema Elemente enthält (<xref:System.Data.DataColumn> Objekten hinzugefügt), die im Ziel fehlen, können die Schema Elemente dem Ziel hinzugefügt werden, indem das `missingSchemaAction`-Argument auf `MissingSchemaAction.Add`festgelegt wird. In diesem Fall enthält die zusammengeführte <xref:System.Data.DataSet> das hinzugefügte Schema und die Daten.  
  
 Nach dem Zusammenführen von Schemas werden die Daten zusammengeführt.  
  
 Beim Zusammenführen einer neuen Quell <xref:System.Data.DataSet> in das Ziel werden alle Quellzeilen mit dem <xref:System.Data.DataRowState> Wert `Unchanged`, `Modified`oder `Deleted` mit den Ziel Zeilen mit denselben Primärschlüssel Werten abgeglichen. Quellzeilen mit dem `DataRowState` Wert `Added` werden mit den neuen Ziel Zeilen mit denselben Primärschlüssel Werten wie die neuen Quellzeilen abgeglichen.  
  
 Während einer Zusammenführung werden Einschränkungen deaktiviert. Wenn Einschränkungen am Ende der Zusammenführung nicht aktiviert werden können, wird eine <xref:System.Data.ConstraintException> generiert, und die zusammengeführten Daten bleiben erhalten, während die Einschränkungen deaktiviert werden. In diesem Fall wird die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `false`festgelegt, und alle ungültigen Zeilen werden als fehlerhaft markiert. Die Fehler müssen behoben werden, bevor versucht wird, die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `true`zurückzusetzen.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Methoden <xref:System.Data.DataSet.GetChanges%2A>, Update und <xref:System.Data.DataSet.Merge%2A> für eine <xref:System.Data.DataSet>verwendet.  
  
 [!code-csharp[Classic WebData DataSet.Merge Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException">Mindestens eine Einschränkung kann nicht aktiviert werden.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataSet" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="M:System.Data.DataSet.GetChanges" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable -&gt; unit" Usage="dataSet.Merge table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">Die <see cref="T:System.Data.DataTable" />, deren Daten und Schema zusammengeführt werden.</param>
        <summary>Führt ein angegebenes <see cref="T:System.Data.DataTable" /> und das entsprechende Schema mit dem aktuellen <see cref="T:System.Data.DataSet" /> zusammen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird zum Zusammenführen von zwei <xref:System.Data.DataSet> Objekten verwendet, die überwiegend ähnliche Schemas aufweisen. Ein Merge wird in der Regel für eine Client Anwendung verwendet, um die neuesten Änderungen aus einer Datenquelle in eine vorhandene <xref:System.Data.DataSet>einzubeziehen. Dadurch kann die Client Anwendung über eine aktualisierte <xref:System.Data.DataSet> mit den neuesten Daten aus der Datenquelle verfügen.  
  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird in der Regel am Ende einer Reihe von Prozeduren aufgerufen, die das Überprüfen von Änderungen, das Abgleichen von Fehlern, das Aktualisieren der Datenquelle mit den Änderungen und schließlich das Aktualisieren der vorhandenen <xref:System.Data.DataSet>betreffen.  
  
 In einer Client Anwendung wird häufig eine einzelne Schaltfläche angezeigt, auf die der Benutzer klicken kann, um die geänderten Daten zu erfassen und zu überprüfen, bevor Sie an eine Komponente der mittleren Ebene zurückgesendet werden. In diesem Szenario wird zuerst die <xref:System.Data.DataSet.GetChanges%2A>-Methode aufgerufen. Diese Methode gibt eine zweite <xref:System.Data.DataSet> zurück, die für die Validierung und Zusammenführung optimiert ist. Dieses zweite <xref:System.Data.DataSet> Objekt enthält nur die <xref:System.Data.DataTable> und <xref:System.Data.DataRow> Objekte, die geändert wurden, was zu einer Teilmenge der ursprünglichen <xref:System.Data.DataSet>führte. Diese Teilmenge ist im Allgemeinen kleiner und wird daher effizienter an eine Komponente der mittleren Ebene zurückgegeben. Die Komponente der mittleren Ebene aktualisiert dann die ursprüngliche Datenquelle mit den Änderungen durch gespeicherte Prozeduren. Die mittlere Ebene kann dann entweder eine neue <xref:System.Data.DataSet> zurücksenden, die die ursprünglichen Daten und die neuesten Daten aus der Datenquelle enthält (durch erneutes Ausführen der ursprünglichen Abfrage), oder Sie kann die Teilmenge mit allen Änderungen zurücksenden, die an der Datenquelle vorgenommen wurden. (Wenn die Datenquelle z. b. automatisch eindeutige Primärschlüssel Werte erstellt, können diese Werte an die Client Anwendung zurückgegeben werden.) In beiden Fällen kann die zurückgegebene <xref:System.Data.DataSet> mit der <xref:System.Data.DataSet.Merge%2A>-Methode wieder mit der ursprünglichen <xref:System.Data.DataSet> der Client Anwendung zusammengeführt werden.  
  
 Wenn die <xref:System.Data.DataSet.Merge%2A>-Methode aufgerufen wird, werden die Schemas der beiden <xref:System.Data.DataSet> Objekte verglichen, da es möglich ist, dass die Schemas geändert wurden. Beispielsweise können in einem Business-to-Business-Szenario neue Spalten einem XML-Schema durch einen automatisierten Prozess hinzugefügt werden. Wenn die Quell <xref:System.Data.DataSet> Schema Elemente enthält (<xref:System.Data.DataColumn> Objekten hinzugefügt), die im Ziel fehlen, können die Schema Elemente dem Ziel hinzugefügt werden, indem das `missingSchemaAction`-Argument auf `MissingSchemaAction.Add`festgelegt wird. In diesem Fall enthält die zusammengeführte <xref:System.Data.DataSet> das hinzugefügte Schema und die Daten.  
  
 Nach dem Zusammenführen von Schemas werden die Daten zusammengeführt.  
  
 Beim Zusammenführen einer neuen Quell <xref:System.Data.DataSet> in das Ziel werden alle Quellzeilen mit dem <xref:System.Data.DataRowState> Wert `Unchanged`, `Modified`oder `Deleted` mit den Ziel Zeilen mit denselben Primärschlüssel Werten abgeglichen. Quellzeilen mit dem `DataRowState` Wert `Added` werden mit den neuen Ziel Zeilen mit denselben Primärschlüssel Werten wie die neuen Quellzeilen abgeglichen.  
  
 Während einer Zusammenführung werden Einschränkungen deaktiviert. Wenn Einschränkungen am Ende der Zusammenführung nicht aktiviert werden können, wird eine <xref:System.Data.ConstraintException> generiert, und die zusammengeführten Daten bleiben erhalten, während die Einschränkungen deaktiviert werden. In diesem Fall wird die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `false`festgelegt, und alle ungültigen Zeilen werden als fehlerhaft markiert. Die Fehler müssen behoben werden, bevor versucht wird, die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `true`zurückzusetzen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine einfache <xref:System.Data.DataSet> mit einer Tabelle, zwei Spalten und zehn Zeilen erstellt. Es wird ein zweiter <xref:System.Data.DataTable> erstellt, der mit dem ersten identisch ist. Der zweiten Tabelle werden zwei Zeilen hinzugefügt, die dann mit der <xref:System.Data.DataSet>zusammengeführt werden.  
  
 [!code-csharp[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="table" /> ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSet">Die <see langword="DataSet" />, deren Daten und Schema zusammengeführt werden.</param>
        <param name="preserveChanges"><see langword="true" />, um Änderungen im aktuellen <see langword="DataSet" /> beizubehalten, andernfalls <see langword="false" />.</param>
        <summary>Führt ein angegebenes <see cref="T:System.Data.DataSet" /> und sein Schema mit dem aktuellen <see langword="DataSet" /> zusammen. Dabei werden entsprechend dem angegebenen Argument alle Änderungen in diesem <see langword="DataSet" /> beibehalten oder verworfen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird zum Zusammenführen von zwei <xref:System.Data.DataSet> Objekten verwendet, die überwiegend ähnliche Schemas aufweisen. Ein Merge wird in der Regel für eine Client Anwendung verwendet, um die neuesten Änderungen aus einer Datenquelle in eine vorhandene <xref:System.Data.DataSet>einzubeziehen. Dadurch kann die Client Anwendung über eine aktualisierte <xref:System.Data.DataSet> mit den neuesten Daten aus der Datenquelle verfügen.  
  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird in der Regel am Ende einer Reihe von Prozeduren aufgerufen, die das Überprüfen von Änderungen, das Abgleichen von Fehlern, das Aktualisieren der Datenquelle mit den Änderungen und schließlich das Aktualisieren der vorhandenen <xref:System.Data.DataSet>betreffen.  
  
 In einer Client Anwendung wird häufig eine einzelne Schaltfläche angezeigt, auf die der Benutzer klicken kann, um die geänderten Daten zu erfassen und zu überprüfen, bevor Sie an eine Komponente der mittleren Ebene zurückgesendet werden. In diesem Szenario wird zuerst die <xref:System.Data.DataSet.GetChanges%2A>-Methode aufgerufen. Diese Methode gibt eine zweite <xref:System.Data.DataSet> zurück, die für die Validierung und Zusammenführung optimiert ist. Dieses zweite <xref:System.Data.DataSet> Objekt enthält nur die <xref:System.Data.DataTable> und <xref:System.Data.DataRow> Objekte, die geändert wurden, was zu einer Teilmenge der ursprünglichen <xref:System.Data.DataSet>führte. Diese Teilmenge ist im Allgemeinen kleiner und wird daher effizienter an eine Komponente der mittleren Ebene zurückgegeben. Die Komponente der mittleren Ebene aktualisiert dann die ursprüngliche Datenquelle mit den Änderungen durch gespeicherte Prozeduren. Die mittlere Ebene kann dann entweder eine neue <xref:System.Data.DataSet> zurücksenden, die die ursprünglichen Daten und die neuesten Daten aus der Datenquelle enthält (durch erneutes Ausführen der ursprünglichen Abfrage), oder Sie kann die Teilmenge mit allen Änderungen zurücksenden, die an der Datenquelle vorgenommen wurden. (Wenn die Datenquelle z. b. automatisch eindeutige Primärschlüssel Werte erstellt, können diese Werte an die Client Anwendung zurückgegeben werden.) In beiden Fällen kann die zurückgegebene <xref:System.Data.DataSet> mit der <xref:System.Data.DataSet.Merge%2A>-Methode wieder mit der ursprünglichen <xref:System.Data.DataSet> der Client Anwendung zusammengeführt werden.  
  
 Wenn die <xref:System.Data.DataSet.Merge%2A>-Methode aufgerufen wird, werden die Schemas der beiden <xref:System.Data.DataSet> Objekte verglichen, da es möglich ist, dass die Schemas geändert wurden. Beispielsweise können in einem Business-to-Business-Szenario neue Spalten einem XML-Schema durch einen automatisierten Prozess hinzugefügt werden. Wenn die Quell <xref:System.Data.DataSet> Schema Elemente enthält (<xref:System.Data.DataColumn> Objekten hinzugefügt), die im Ziel fehlen, können die Schema Elemente dem Ziel hinzugefügt werden, indem das `missingSchemaAction`-Argument auf `MissingSchemaAction.Add`festgelegt wird. In diesem Fall enthält die zusammengeführte <xref:System.Data.DataSet> das hinzugefügte Schema und die Daten.  
  
 Nach dem Zusammenführen von Schemas werden die Daten zusammengeführt.  
  
 Beim Zusammenführen einer neuen Quell <xref:System.Data.DataSet> in das Ziel werden alle Quellzeilen mit dem <xref:System.Data.DataRowState> Wert `Unchanged`, `Modified`oder `Deleted` mit den Ziel Zeilen mit denselben Primärschlüssel Werten abgeglichen. Quellzeilen mit dem `DataRowState` Wert `Added` werden mit den neuen Ziel Zeilen mit denselben Primärschlüssel Werten wie die neuen Quellzeilen abgeglichen.  
  
 Während einer Zusammenführung werden Einschränkungen deaktiviert. Wenn Einschränkungen am Ende der Zusammenführung nicht aktiviert werden können, wird eine <xref:System.Data.ConstraintException> generiert, und die zusammengeführten Daten bleiben erhalten, während die Einschränkungen deaktiviert werden. In diesem Fall wird die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `false`festgelegt, und alle ungültigen Zeilen werden als fehlerhaft markiert. Die Fehler müssen behoben werden, bevor versucht wird, die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `true`zurückzusetzen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine einfache <xref:System.Data.DataSet> mit einer Tabelle, zwei Spalten und zehn Zeilen erstellt. Nach dem Hinzufügen von zehn Zeilen werden zwei Werte geändert, und es wird eine Zeile hinzugefügt. Mit der <xref:System.Data.DataSet.GetChanges%2A>-Methode wird eine Teilmenge der geänderten Daten erstellt. Nach dem Abgleichen von Fehlern werden die untergeordneten Daten mit dem ursprünglichen <xref:System.Data.DataSet>zusammengeführt.  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (rows, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="rows">Das Array von <see cref="T:System.Data.DataRow" />-Objekten, das mit dem <see langword="DataSet" /> zusammengeführt werden soll.</param>
        <param name="preserveChanges"><see langword="true" />, um am <see langword="DataSet" /> vorgenommene Änderungen beizubehalten, andernfalls <see langword="false" />.</param>
        <param name="missingSchemaAction">Einer der <see cref="T:System.Data.MissingSchemaAction" />-Werte.</param>
        <summary>Führt ein Array von <see cref="T:System.Data.DataRow" />-Objekten mit dem aktuellen <see cref="T:System.Data.DataSet" /> zusammen. Dabei werden Änderungen des <see langword="DataSet" /> entsprechend den angegebenen Argumenten beibehalten oder verworfen, und ein nicht kompatibles Schema wird entsprechend den angegebenen Argumenten behandelt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird zum Zusammenführen von zwei <xref:System.Data.DataSet> Objekten verwendet, die überwiegend ähnliche Schemas aufweisen. Ein Merge wird in der Regel für eine Client Anwendung verwendet, um die neuesten Änderungen aus einer Datenquelle in eine vorhandene <xref:System.Data.DataSet>einzubeziehen. Dadurch kann die Client Anwendung über eine aktualisierte <xref:System.Data.DataSet> mit den neuesten Daten aus der Datenquelle verfügen.  
  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird in der Regel am Ende einer Reihe von Prozeduren aufgerufen, die das Überprüfen von Änderungen, das Abgleichen von Fehlern, das Aktualisieren der Datenquelle mit den Änderungen und schließlich das Aktualisieren der vorhandenen <xref:System.Data.DataSet>betreffen.  
  
 In einer Client Anwendung wird häufig eine einzelne Schaltfläche angezeigt, auf die der Benutzer klicken kann, um die geänderten Daten zu erfassen und zu überprüfen, bevor Sie an eine Komponente der mittleren Ebene zurückgesendet werden. In diesem Szenario wird zuerst die <xref:System.Data.DataSet.GetChanges%2A>-Methode aufgerufen. Diese Methode gibt eine zweite <xref:System.Data.DataSet> zurück, die für die Validierung und Zusammenführung optimiert ist. Dieses zweite <xref:System.Data.DataSet> Objekt enthält nur die <xref:System.Data.DataTable> und <xref:System.Data.DataRow> Objekte, die geändert wurden, was zu einer Teilmenge der ursprünglichen <xref:System.Data.DataSet>führte. Diese Teilmenge ist im Allgemeinen kleiner und wird daher effizienter an eine Komponente der mittleren Ebene zurückgegeben. Die Komponente der mittleren Ebene aktualisiert dann die ursprüngliche Datenquelle mit den Änderungen durch gespeicherte Prozeduren. Die mittlere Ebene kann dann entweder eine neue <xref:System.Data.DataSet> zurücksenden, die die ursprünglichen Daten und die neuesten Daten aus der Datenquelle enthält (durch erneutes Ausführen der ursprünglichen Abfrage), oder Sie kann die Teilmenge mit allen Änderungen zurücksenden, die an der Datenquelle vorgenommen wurden. (Wenn die Datenquelle z. b. automatisch eindeutige Primärschlüssel Werte erstellt, können diese Werte an die Client Anwendung zurückgegeben werden.) In beiden Fällen kann die zurückgegebene <xref:System.Data.DataSet> mit der <xref:System.Data.DataSet.Merge%2A>-Methode wieder mit der ursprünglichen <xref:System.Data.DataSet> der Client Anwendung zusammengeführt werden.  
  
 Um die Erläuterung der <xref:System.Data.DataSet.Merge%2A> Methode zu vereinfachen, verwenden wir "target", um den aktuellen <xref:System.Data.DataSet>anzugeben, und "Source", um den zweiten (Parameter) <xref:System.Data.DataSet>zu benennen. Der Ziel <xref:System.Data.DataSet> hat den Namen, da es sich um das Objekt handelt, für das eine Aktion (die Zusammenführung) auftritt. Der zweite <xref:System.Data.DataSet> wird als "Quelle" bezeichnet, da die darin enthaltenen Informationen nicht geändert werden, sondern mit dem aktuellen <xref:System.Data.DataSet>zusammengeführt werden.  
  
 Wenn die <xref:System.Data.DataSet.Merge%2A>-Methode aufgerufen wird, werden die Schemas der beiden <xref:System.Data.DataSet> Objekte verglichen, da es möglich ist, dass die Schemas geändert wurden. Beispielsweise können in einem Business-to-Business-Szenario neue Spalten einem XML-Schema durch einen automatisierten Prozess hinzugefügt werden. Wenn die Quell <xref:System.Data.DataSet> Schema Elemente enthält (<xref:System.Data.DataColumn> Objekten hinzugefügt), die im Ziel fehlen, können die Schema Elemente dem Ziel hinzugefügt werden, indem das `missingSchemaAction`-Argument auf `MissingSchemaAction.Add`festgelegt wird. In diesem Fall enthält die zusammengeführte <xref:System.Data.DataSet> das hinzugefügte Schema und die Daten.  
  
 Nach dem Zusammenführen von Schemas werden die Daten zusammengeführt.  
  
 Beim Zusammenführen einer neuen Quell <xref:System.Data.DataSet> in das Ziel werden alle Quellzeilen mit dem <xref:System.Data.DataRowState> Wert `Unchanged`, `Modified`oder `Deleted` mit den Ziel Zeilen mit denselben Primärschlüssel Werten abgeglichen. Quellzeilen mit dem `DataRowState` Wert `Added` werden mit den neuen Ziel Zeilen mit denselben Primärschlüssel Werten wie die neuen Quellzeilen abgeglichen.  
  
 Während einer Zusammenführung werden Einschränkungen deaktiviert. Wenn Einschränkungen am Ende der Zusammenführung nicht aktiviert werden können, wird eine <xref:System.Data.ConstraintException> generiert, und die zusammengeführten Daten bleiben erhalten, während die Einschränkungen deaktiviert werden. In diesem Fall wird die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `false`festgelegt, und alle ungültigen Zeilen werden als fehlerhaft markiert. Die Fehler müssen behoben werden, bevor versucht wird, die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `true`zurückzusetzen.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="dataSet">Die <see langword="DataSet" />, deren Daten und Schema zusammengeführt werden.</param>
        <param name="preserveChanges"><see langword="true" />, um Änderungen im aktuellen <see langword="DataSet" /> beizubehalten, andernfalls <see langword="false" />.</param>
        <param name="missingSchemaAction">Einer der <see cref="T:System.Data.MissingSchemaAction" />-Werte.</param>
        <summary>Führt ein angegebenes <see cref="T:System.Data.DataSet" /> und sein Schema mit dem aktuellen <see langword="DataSet" /> zusammen. Dabei werden Änderungen des aktuellen <see langword="DataSet" /> entsprechend den angegebenen Argumenten beibehalten oder verworfen, und ein nicht kompatibles Schema wird entsprechend den angegebenen Argumenten behandelt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird zum Zusammenführen von zwei <xref:System.Data.DataSet> Objekten verwendet, die überwiegend ähnliche Schemas aufweisen. Ein Merge wird in der Regel für eine Client Anwendung verwendet, um die neuesten Änderungen aus einer Datenquelle in eine vorhandene <xref:System.Data.DataSet>einzubeziehen. Dadurch kann die Client Anwendung über eine aktualisierte <xref:System.Data.DataSet> mit den neuesten Daten aus der Datenquelle verfügen.  
  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird in der Regel am Ende einer Reihe von Prozeduren aufgerufen, die das Überprüfen von Änderungen, das Abgleichen von Fehlern, das Aktualisieren der Datenquelle mit den Änderungen und schließlich das Aktualisieren der vorhandenen <xref:System.Data.DataSet>betreffen.  
  
 In einer Client Anwendung wird häufig eine einzelne Schaltfläche angezeigt, auf die der Benutzer klicken kann, um die geänderten Daten zu erfassen und zu überprüfen, bevor Sie an eine Komponente der mittleren Ebene zurückgesendet werden. In diesem Szenario wird zuerst die <xref:System.Data.DataSet.GetChanges%2A>-Methode aufgerufen. Diese Methode gibt eine zweite <xref:System.Data.DataSet> zurück, die für die Validierung und Zusammenführung optimiert ist. Dieses zweite <xref:System.Data.DataSet> Objekt enthält nur die <xref:System.Data.DataTable> und <xref:System.Data.DataRow> Objekte, die geändert wurden, was zu einer Teilmenge der ursprünglichen <xref:System.Data.DataSet>führte. Diese Teilmenge ist im Allgemeinen kleiner und wird daher effizienter an eine Komponente der mittleren Ebene zurückgegeben. Die Komponente der mittleren Ebene aktualisiert dann die ursprüngliche Datenquelle mit den Änderungen durch gespeicherte Prozeduren. Die mittlere Ebene kann dann entweder eine neue <xref:System.Data.DataSet> zurücksenden, die die ursprünglichen Daten und die neuesten Daten aus der Datenquelle enthält (durch erneutes Ausführen der ursprünglichen Abfrage), oder Sie kann die Teilmenge mit allen Änderungen zurücksenden, die an der Datenquelle vorgenommen wurden. (Wenn die Datenquelle z. b. automatisch eindeutige Primärschlüssel Werte erstellt, können diese Werte an die Client Anwendung zurückgegeben werden.) In beiden Fällen kann die zurückgegebene <xref:System.Data.DataSet> mit der <xref:System.Data.DataSet.Merge%2A>-Methode wieder mit der ursprünglichen <xref:System.Data.DataSet> der Client Anwendung zusammengeführt werden.  
  
 Um die Erläuterung der <xref:System.Data.DataSet.Merge%2A> Methode zu vereinfachen, verwenden wir "target", um den aktuellen <xref:System.Data.DataSet>anzugeben, und "Source", um den zweiten (Parameter) <xref:System.Data.DataSet>zu benennen. Der Ziel <xref:System.Data.DataSet> hat den Namen, da es sich um das Objekt handelt, für das eine Aktion (die Zusammenführung) auftritt. Der zweite <xref:System.Data.DataSet> wird als "Quelle" bezeichnet, da die darin enthaltenen Informationen nicht geändert werden, sondern mit dem aktuellen <xref:System.Data.DataSet>zusammengeführt werden.  
  
 Wenn die <xref:System.Data.DataSet.Merge%2A>-Methode aufgerufen wird, werden die Schemas der beiden <xref:System.Data.DataSet> Objekte verglichen, da es möglich ist, dass die Schemas geändert wurden. Beispielsweise können in einem Business-to-Business-Szenario neue Spalten einem XML-Schema durch einen automatisierten Prozess hinzugefügt werden. Wenn die Quell <xref:System.Data.DataSet> Schema Elemente enthält (<xref:System.Data.DataColumn> Objekten hinzugefügt), die im Ziel fehlen, können die Schema Elemente dem Ziel hinzugefügt werden, indem das `missingSchemaAction`-Argument auf `MissingSchemaAction.Add`festgelegt wird. In diesem Fall enthält die zusammengeführte <xref:System.Data.DataSet> das hinzugefügte Schema und die Daten.  
  
 Nach dem Zusammenführen von Schemas werden die Daten zusammengeführt.  
  
 Beim Zusammenführen einer neuen Quell <xref:System.Data.DataSet> in das Ziel werden alle Quellzeilen mit dem <xref:System.Data.DataRowState> Wert `Unchanged`, `Modified`oder `Deleted` mit den Ziel Zeilen mit denselben Primärschlüssel Werten abgeglichen. Quellzeilen mit dem `DataRowState` Wert `Added` werden mit den neuen Ziel Zeilen mit denselben Primärschlüssel Werten wie die neuen Quellzeilen abgeglichen.  
  
 Während einer Zusammenführung werden Einschränkungen deaktiviert. Wenn Einschränkungen am Ende der Zusammenführung nicht aktiviert werden können, wird eine <xref:System.Data.ConstraintException> generiert, und die zusammengeführten Daten bleiben erhalten, während die Einschränkungen deaktiviert werden. In diesem Fall wird die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `false`festgelegt, und alle ungültigen Zeilen werden als fehlerhaft markiert. Die Fehler müssen behoben werden, bevor versucht wird, die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `true`zurückzusetzen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine einfache <xref:System.Data.DataSet> mit einer Tabelle, zwei Spalten und zehn Zeilen erstellt. Zwei Werte werden geändert, und es wird eine Zeile hinzugefügt. Mit der <xref:System.Data.DataSet.GetChanges%2A>-Methode wird eine Teilmenge der geänderten Daten erstellt. Nach dem Abgleichen von Fehlern wird der Teilmenge eine neue Spalte hinzugefügt, die das Schema ändert. Wenn die <xref:System.Data.DataSet.Merge%2A>-Methode aufgerufen wird und die `missingSchemaAction` auf `MissingSchemaAction.Add`festgelegt ist, wird die neue Spalte dem ursprünglichen Schema des <xref:System.Data.DataSet>-Objekts hinzugefügt.  
  
 [!code-csharp[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataSet" /> ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (table, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="table">Die <see langword="DataTable" />, deren Daten und Schema zusammengeführt werden.</param>
        <param name="preserveChanges">Einer der <see cref="T:System.Data.MissingSchemaAction" />-Werte.</param>
        <param name="missingSchemaAction"><see langword="true" />, um am <see langword="DataSet" /> vorgenommene Änderungen beizubehalten, andernfalls <see langword="false" />.</param>
        <summary>Führt eine angegebene <see cref="T:System.Data.DataTable" /> und ihr Schema mit dem aktuellen <see langword="DataSet" /> zusammen. Dabei werden Änderungen des aktuellen <see langword="DataSet" /> entsprechend den angegebenen Argumenten beibehalten oder verworfen, und ein nicht kompatibles Schema wird entsprechend den angegebenen Argumenten behandelt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird zum Zusammenführen von zwei <xref:System.Data.DataSet> Objekten verwendet, die überwiegend ähnliche Schemas aufweisen. Ein Merge wird in der Regel für eine Client Anwendung verwendet, um die neuesten Änderungen aus einer Datenquelle in eine vorhandene <xref:System.Data.DataSet>einzubeziehen. Dadurch kann die Client Anwendung über eine aktualisierte <xref:System.Data.DataSet> mit den neuesten Daten aus der Datenquelle verfügen.  
  
 Die <xref:System.Data.DataSet.Merge%2A>-Methode wird in der Regel am Ende einer Reihe von Prozeduren aufgerufen, die das Überprüfen von Änderungen, das Abgleichen von Fehlern, das Aktualisieren der Datenquelle mit den Änderungen und schließlich das Aktualisieren der vorhandenen <xref:System.Data.DataSet>betreffen.  
  
 bei einer Client Anwendung ist es üblich, dass eine einzelne Schaltfläche angezeigt wird, auf die der Benutzer klicken kann, um die geänderten Daten zu erfassen und zu überprüfen, bevor Sie an eine Komponente der mittleren Ebene zurückgesendet werden. In diesem Szenario wird zuerst die <xref:System.Data.DataSet.GetChanges%2A>-Methode aufgerufen. Diese Methode gibt eine zweite <xref:System.Data.DataSet> zurück, die für die Validierung und Zusammenführung optimiert ist. Dieses zweite <xref:System.Data.DataSet> Objekt enthält nur die <xref:System.Data.DataTable> und <xref:System.Data.DataRow> Objekte, die geändert wurden, was zu einer Teilmenge der ursprünglichen <xref:System.Data.DataSet>führte. Diese Teilmenge ist im Allgemeinen kleiner und wird daher effizienter an eine Komponente der mittleren Ebene zurückgegeben. Die Komponente der mittleren Ebene aktualisiert dann die ursprüngliche Datenquelle mit den Änderungen durch gespeicherte Prozeduren. Die mittlere Ebene kann dann entweder eine neue <xref:System.Data.DataSet> zurücksenden, die die ursprünglichen Daten und die neuesten Daten aus der Datenquelle enthält (durch erneutes Ausführen der ursprünglichen Abfrage), oder Sie kann die Teilmenge mit allen Änderungen zurücksenden, die an der Datenquelle vorgenommen wurden. (Wenn die Datenquelle z. b. automatisch eindeutige Primärschlüssel Werte erstellt, können diese Werte an die Client Anwendung zurückgegeben werden.) In beiden Fällen kann die zurückgegebene <xref:System.Data.DataSet> mit der <xref:System.Data.DataSet.Merge%2A>-Methode wieder mit der ursprünglichen <xref:System.Data.DataSet> der Client Anwendung zusammengeführt werden.  
  
 Wenn die <xref:System.Data.DataSet.Merge%2A>-Methode aufgerufen wird, werden die Schemas der beiden <xref:System.Data.DataSet> Objekte verglichen, da es möglich ist, dass die Schemas geändert wurden. Beispielsweise können in einem Business-to-Business-Szenario neue Spalten einem XML-Schema durch einen automatisierten Prozess hinzugefügt werden. Wenn die Quell <xref:System.Data.DataSet> Schema Elemente enthält (<xref:System.Data.DataColumn> Objekten hinzugefügt), die im Ziel fehlen, können die Schema Elemente dem Ziel hinzugefügt werden, indem das `missingSchemaAction`-Argument auf `MissingSchemaAction.Add`festgelegt wird. In diesem Fall enthält die zusammengeführte <xref:System.Data.DataSet> das hinzugefügte Schema und die Daten.  
  
 Nach dem Zusammenführen von Schemas werden die Daten zusammengeführt.  
  
 Beim Zusammenführen einer neuen Quell <xref:System.Data.DataSet> in das Ziel werden alle Quellzeilen mit dem <xref:System.Data.DataRowState> Wert `Unchanged`, `Modified`oder `Deleted` mit den Ziel Zeilen mit denselben Primärschlüssel Werten abgeglichen. Quellzeilen mit dem `DataRowState` Wert `Added` werden mit den neuen Ziel Zeilen mit denselben Primärschlüssel Werten wie die neuen Quellzeilen abgeglichen.  
  
 Während einer Zusammenführung werden Einschränkungen deaktiviert. Wenn Einschränkungen am Ende der Zusammenführung nicht aktiviert werden können, wird eine <xref:System.Data.ConstraintException> generiert, und die zusammengeführten Daten bleiben erhalten, während die Einschränkungen deaktiviert werden. In diesem Fall wird die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `false`festgelegt, und alle ungültigen Zeilen werden als fehlerhaft markiert. Die Fehler müssen behoben werden, bevor versucht wird, die <xref:System.Data.DataSet.EnforceConstraints%2A>-Eigenschaft auf `true`zurückzusetzen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine einfache <xref:System.Data.DataSet> mit einer Tabelle, zwei Spalten und zehn Zeilen erstellt. Es wird eine zweite <xref:System.Data.DataTable> erstellt, die fast identisch mit der ersten ist, außer dass der Tabelle ein neuer `DataColumn` hinzugefügt wird. Der zweiten Tabelle werden zwei Zeilen hinzugefügt. Diese werden dann in die <xref:System.Data.DataSet> zusammengeführt, wobei das `preserveChanges`-Argument auf `false`festgelegt ist und das `missingSchemaAction`-Argument auf `MissingSchemaAction.Add`festgelegt ist.  
  
 [!code-csharp[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataSet" /> ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="MergeFailed">
      <MemberSignature Language="C#" Value="public event System.Data.MergeFailedEventHandler MergeFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.MergeFailedEventHandler MergeFailed" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.MergeFailed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MergeFailed As MergeFailedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::MergeFailedEventHandler ^ MergeFailed;" />
      <MemberSignature Language="F#" Value="member this.MergeFailed : System.Data.MergeFailedEventHandler " Usage="member this.MergeFailed : System.Data.MergeFailedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetMergeFailedDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MergeFailedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine Ziel- und eine Quell-<see cref="T:System.Data.DataRow" /> denselben Primärschlüsselwert aufweisen und <see cref="P:System.Data.DataSet.EnforceConstraints" /> auf True festgelegt ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zum Behandeln von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung des <xref:System.Data.DataSet.MergeFailed>-Ereignisses veranschaulicht.  
  
 [!code-csharp[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Data.DataSet.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetNamespaceDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namespace der <see cref="T:System.Data.DataSet" /> ab oder legt diesen fest.</summary>
        <value>Der Namespace von <see cref="T:System.Data.DataSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.Namespace%2A>-Eigenschaft wird beim Lesen und Schreiben eines XML-Dokuments in die <xref:System.Data.DataSet> mithilfe der Methoden <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>oder <xref:System.Data.DataSet.WriteXmlSchema%2A> verwendet.  
  
 Der Namespace eines XML-Dokuments wird zum Festlegen des Bereichs von XML-Attributen und-Elementen verwendet, wenn Sie in eine <xref:System.Data.DataSet>gelesen werden. Wenn eine <xref:System.Data.DataSet> z. b. ein Schema enthält, das aus einem Dokument mit dem Namespace "MyCompany" gelesen wurde, und es wird versucht, Daten nur aus einem Dokument mit einem anderen Namespace zu lesen, werden alle Daten, die dem vorhandenen Schema nicht entsprechen, ignoriert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.Data.DataSet.Prefix%2A> vor dem Aufrufen der <xref:System.Data.DataSet.ReadXml%2A>-Methode festgelegt.  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Namespace enthält bereits Daten.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="dataSet.OnPropertyChanging pcevent" />
      <MemberSignature Language="C#" Value="protected internal virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">Ein <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das Ereignis <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Eine Übersicht finden Sie unter [behandeln und Auswerfen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass Sie die <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />-Methode der Basisklasse aufzurufen.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveRelation">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveRelation (System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveRelation(class System.Data.DataRelation relation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveRelation (relation As DataRelation)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveRelation(System::Data::DataRelation ^ relation);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveRelation : System.Data.DataRelation -&gt; unit&#xA;override this.OnRemoveRelation : System.Data.DataRelation -&gt; unit" Usage="dataSet.OnRemoveRelation relation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="relation">Die <see cref="T:System.Data.DataRelation" />, die entfernt wird.</param>
        <summary>Tritt beim Entfernen eines <see cref="T:System.Data.DataRelation" />-Objekts aus einer <see cref="T:System.Data.DataTable" /> ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sollte von Unterklassen überschrieben werden, um das Entfernen von Tabellen einzuschränken.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveTable">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRemoveTable (System.Data.DataTable table);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRemoveTable(class System.Data.DataTable table) cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRemoveTable (table As DataTable)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRemoveTable(System::Data::DataTable ^ table);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveTable : System.Data.DataTable -&gt; unit&#xA;override this.OnRemoveTable : System.Data.DataTable -&gt; unit" Usage="dataSet.OnRemoveTable table" />
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveTable (System.Data.DataTable table);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveTable(class System.Data.DataTable table) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveTable (table As DataTable)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveTable(System::Data::DataTable ^ table);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">Die <see cref="T:System.Data.DataTable" />, die entfernt wird.</param>
        <summary>Tritt beim Entfernen einer <see cref="T:System.Data.DataTable" /> aus einem <see cref="T:System.Data.DataSet" /> ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann von Unterklassen überschrieben werden, um die Entfernung von Tabellen einzuschränken.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine Klasse, die von der <xref:System.Data.DataSet> abgeleitet ist, wobei die <xref:System.Data.DataSet.OnRemoveTable%2A>-Methode überschrieben wurde.  
  
 [!code-csharp[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string with get, set" Usage="System.Data.DataSet.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetPrefixDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein XML-Präfix ab, das als Alias für den Namespace der <see cref="T:System.Data.DataSet" /> fungiert, oder legt dieses fest.</summary>
        <value>Das XML-Präfix für den <see cref="T:System.Data.DataSet" />-Namespace.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.Prefix%2A>-Eigenschaft wird in einem XML-Dokument verwendet, um Elemente zu identifizieren, die zum Namespace des <xref:System.Data.DataSet> Objekts gehören (wie von der <xref:System.Data.DataSet.Namespace%2A>-Eigenschaft festgelegt).  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.Data.DataSet.Prefix%2A> vor dem Aufrufen der <xref:System.Data.DataSet.ReadXml%2A>-Methode festgelegt.  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.RaisePropertyChanging : string -&gt; unit" Usage="dataSet.RaisePropertyChanging name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der Eigenschaft, die gerade geändert wird.</param>
        <summary>Sendet eine Benachrichtigung, dass die angegebene <see cref="T:System.Data.DataSet" />-Eigenschaft gerade geändert wird.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Liest ein XML-Schema und XML-Daten in das <see cref="T:System.Data.DataSet" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Ein von <see cref="T:System.IO.Stream" /> abgeleitetes Objekt.</param>
        <summary>Liest mit dem angegebenen <see cref="T:System.Data.DataSet" /> das XML-Schema und die XML-Daten in die <see cref="T:System.IO.Stream" />.</summary>
        <returns>Der zum Lesen der Daten verwendete <see cref="T:System.Data.XmlReadMode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.ReadXml%2A>-Methode bietet eine Möglichkeit zum Lesen von Daten oder Daten und Schemas in einer <xref:System.Data.DataSet> aus einem XML-Dokument, während die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode nur das Schema liest. Um Schemas und Daten zu lesen, verwenden Sie eine der der `ReadXML` Überladungen, die enthält die `mode` Parameter, und legen Sie dessen Wert auf `ReadSchema`.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.WriteXml%2A> und <xref:System.Data.DataSet.WriteXmlSchema%2A> Methoden bzw. Schreiben von XML-Daten oder Schema und Daten aus der `DataSet`, verwenden Sie die `WriteXml` Methode. Um nur das Schema zu schreiben, verwenden Sie die `WriteXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 Wenn ein Inline Schema angegeben wird, wird das Inline Schema verwendet, um die vorhandene relationale Struktur zu erweitern, bevor die Daten geladen werden. Wenn Konflikte auftreten (z. b. dieselbe Spalte in derselben Tabelle, die mit unterschiedlichen Datentypen definiert wurde), wird eine Ausnahme ausgelöst.  
  
 Wenn kein Inline Schema angegeben wird, wird die relationale Struktur nach Bedarf nach Bedarf entsprechend der Struktur des XML-Dokuments erweitert. Wenn das Schema nicht über einen Typrückschluss erweitert werden kann, um alle Daten verfügbar zu machen, wird eine Ausnahme ausgelöst.  
  
> [!NOTE]
>  Der `DataSet` verknüpft kein XML-Element mit dem entsprechenden `DataColumn` oder `DataTable`, wenn zulässige XML-Zeichen wie ("_") im serialisierten XML-Code mit Escapezeichen versehen werden. Der `DataSet` selbst schützt nur ungültige XML-Zeichen in XML-Elementnamen und kann daher nur denselben nutzen. Wenn juristische Zeichen im XML-Elementnamen mit Escapezeichen versehen werden, wird das Element bei der Verarbeitung ignoriert.  
  
 Wenn das XML-Schema für eine <xref:System.Data.DataSet> `targetNamespace`enthält, werden die Daten möglicherweise nicht gelesen, und beim Aufrufen von <xref:System.Data.DataSet.ReadXml%2A> können Ausnahmen auftreten, um die <xref:System.Data.DataSet> mit XML zu laden, das Elemente ohne qualifizierenden Namespace enthält. Um nicht qualifizierte Elemente zu lesen, legen Sie `elementFormDefault` im XML-Schema auf "qualified" fest, wie im folgenden Beispiel veranschaulicht.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXml%2A> in den <xref:System.Data.DataSet> zu lesen, indem Sie `XmlReadMode.ReadSchema`angeben. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird zuerst eine einfache <xref:System.Data.DataSet> mit einer <xref:System.Data.DataTable>, zwei Spalten und zehn Zeilen erstellt. Das <xref:System.Data.DataSet> Schema und die Daten werden auf den Datenträger geschrieben, indem die <xref:System.Data.DataSet.WriteXml%2A>-Methode aufgerufen wird. Es wird ein zweiter <xref:System.Data.DataSet> erstellt, und die <xref:System.Data.DataSet.ReadXml%2A>-Methode wird verwendet, um Sie mit Schema und Daten zu füllen.  
  
 [!code-csharp[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
        <altmember cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
        <altmember cref="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see langword="TextReader" />, aus dem das Schema und die Daten gelesen werden sollen.</param>
        <summary>Liest mit dem angegebenen <see cref="T:System.Data.DataSet" /> das XML-Schema und die XML-Daten in die <see cref="T:System.IO.TextReader" />.</summary>
        <returns>Der zum Lesen der Daten verwendete <see cref="T:System.Data.XmlReadMode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.ReadXml%2A>-Methode bietet eine Möglichkeit zum Lesen von Daten oder Daten und Schemas in einer <xref:System.Data.DataSet> aus einem XML-Dokument, während die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode nur das Schema liest. Um Schemas und Daten zu lesen, verwenden Sie eine der der `ReadXML` Überladungen, die enthält die `mode` Parameter, und legen Sie dessen Wert auf `ReadSchema`.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.WriteXml%2A> und <xref:System.Data.DataSet.WriteXmlSchema%2A> Methoden bzw. Schreiben von XML-Daten oder Schema und Daten aus der `DataSet`, verwenden Sie die `WriteXml` Methode. Um nur das Schema zu schreiben, verwenden Sie die `WriteXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 Wenn ein Inline Schema angegeben wird, wird das Inline Schema verwendet, um die vorhandene relationale Struktur zu erweitern, bevor die Daten geladen werden. Wenn Konflikte auftreten (z. b. dieselbe Spalte in derselben Tabelle, die mit unterschiedlichen Datentypen definiert wurde), wird eine Ausnahme ausgelöst.  
  
 Wenn kein Inline Schema angegeben wird, wird die relationale Struktur nach Bedarf nach Bedarf entsprechend der Struktur des XML-Dokuments erweitert. Wenn das Schema nicht über einen Typrückschluss erweitert werden kann, um alle Daten verfügbar zu machen, wird eine Ausnahme ausgelöst.  
  
> [!NOTE]
>  Der `DataSet` verknüpft kein XML-Element mit dem entsprechenden `DataColumn` oder `DataTable`, wenn zulässige XML-Zeichen wie ("_") im serialisierten XML-Code mit Escapezeichen versehen werden. Der `DataSet` selbst schützt nur ungültige XML-Zeichen in XML-Elementnamen und kann daher nur denselben nutzen. Wenn juristische Zeichen im XML-Elementnamen mit Escapezeichen versehen werden, wird das Element bei der Verarbeitung ignoriert.  
  
 Wenn das XML-Schema für eine <xref:System.Data.DataSet> `targetNamespace`enthält, werden die Daten möglicherweise nicht gelesen, und beim Aufrufen von <xref:System.Data.DataSet.ReadXml%2A> können Ausnahmen auftreten, um die <xref:System.Data.DataSet> mit XML zu laden, das Elemente ohne qualifizierenden Namespace enthält. Um nicht qualifizierte Elemente zu lesen, legen Sie `elementFormDefault` entsprechend "qualified" im XML-Schema fest, wie im folgenden Beispiel veranschaulicht.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 Klassen, die von der <xref:System.IO.TextReader>-Klasse erben, enthalten die Klassen <xref:System.IO.StreamReader> und <xref:System.IO.StringReader>.  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXml%2A> in den <xref:System.Data.DataSet> zu lesen, indem Sie `XmlReadMode.ReadSchema`angeben. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird zuerst eine einfache <xref:System.Data.DataSet> mit einer <xref:System.Data.DataTable>, zwei Spalten und zehn Zeilen erstellt. Das <xref:System.Data.DataSet> Schema und die Daten werden auf den Datenträger geschrieben, indem die <xref:System.Data.DataSet.WriteXml%2A>-Methode aufgerufen wird. Es wird ein zweiter <xref:System.Data.DataSet> erstellt, und die <xref:System.Data.DataSet.ReadXml%2A>-Methode wird verwendet, um Sie mit Schema und Daten zu füllen.  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Name der Datei, aus der gelesen werden soll, einschließlich des Pfades.</param>
        <summary>Liest mithilfe der angegebenen Datei das XML-Schema und die XML-Daten in das <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Der zum Lesen der Daten verwendete <see langword="XmlReadMode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.ReadXml%2A>-Methode bietet eine Möglichkeit zum Lesen von Daten oder Daten und Schemas in einer <xref:System.Data.DataSet> aus einem XML-Dokument, während die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode nur das Schema liest. Um Schemas und Daten zu lesen, verwenden Sie eine der der `ReadXML` Überladungen, die enthält die `mode` Parameter, und legen Sie dessen Wert auf `ReadSchema`.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.WriteXml%2A> und <xref:System.Data.DataSet.WriteXmlSchema%2A> Methoden bzw. Schreiben von XML-Daten oder Schema und Daten aus der `DataSet`, verwenden Sie die `WriteXml` Methode. Um nur das Schema zu schreiben, verwenden Sie die `WriteXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 Wenn ein Inline Schema angegeben wird, wird das Inline Schema verwendet, um die vorhandene relationale Struktur zu erweitern, bevor die Daten geladen werden. Wenn Konflikte auftreten (z. b. dieselbe Spalte in derselben Tabelle, die mit unterschiedlichen Datentypen definiert wurde), wird eine Ausnahme ausgelöst.  
  
 Wenn kein Inline Schema angegeben wird, wird die relationale Struktur nach Bedarf nach Bedarf entsprechend der Struktur des XML-Dokuments erweitert. Wenn das Schema nicht über einen Typrückschluss erweitert werden kann, um alle Daten verfügbar zu machen, wird eine Ausnahme ausgelöst.  
  
> [!NOTE]
>  Der `DataSet` verknüpft kein XML-Element mit dem entsprechenden `DataColumn` oder `DataTable`, wenn zulässige XML-Zeichen wie ("_") im serialisierten XML-Code mit Escapezeichen versehen werden. Der `DataSet` selbst schützt nur ungültige XML-Zeichen in XML-Elementnamen und kann daher nur denselben nutzen. Wenn juristische Zeichen im XML-Elementnamen mit Escapezeichen versehen werden, wird das Element bei der Verarbeitung ignoriert.  
  
 Wenn das XML-Schema für eine <xref:System.Data.DataSet> eine `targetNamespace`enthält, werden die Daten möglicherweise nicht gelesen, und beim Aufrufen von <xref:System.Data.DataSet.ReadXml%2A> können Ausnahmen auftreten, um die <xref:System.Data.DataSet> mit XML zu laden, das Elemente ohne qualifizierenden Namespace enthält. Um nicht qualifizierte Elemente zu lesen, legen Sie `elementFormDefault` entsprechend "qualified" im XML-Schema fest, wie im folgenden Beispiel veranschaulicht.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXml%2A> in den <xref:System.Data.DataSet> zu lesen, indem Sie `XmlReadMode.ReadSchema`angeben. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird zuerst eine einfache <xref:System.Data.DataSet> mit einer <xref:System.Data.DataTable>, zwei Spalten und zehn Zeilen erstellt. Das <xref:System.Data.DataSet> Schema und die Daten werden auf den Datenträger geschrieben, indem die <xref:System.Data.DataSet.WriteXml%2A>-Methode aufgerufen wird. Es wird ein zweiter <xref:System.Data.DataSet> erstellt, und die <xref:System.Data.DataSet.ReadXml%2A>-Methode wird verwendet, um Sie mit Schema und Daten zu füllen.  
  
 [!code-csharp[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> ist nicht auf <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> festgelegt.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">zum Lesen und Schreiben von Dateien. Zugehörige Enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see cref="T:System.Xml.XmlReader" />, aus dem gelesen werden soll.</param>
        <summary>Liest mit dem angegebenen <see cref="T:System.Data.DataSet" /> das XML-Schema und die XML-Daten in die <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Der zum Lesen der Daten verwendete <see langword="XmlReadMode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.ReadXml%2A>-Methode bietet eine Möglichkeit zum Lesen von Daten oder Daten und Schemas in einer <xref:System.Data.DataSet> aus einem XML-Dokument, während die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode nur das Schema liest. Um Schemas und Daten zu lesen, verwenden Sie eine der der `ReadXML` Überladungen, die enthält die `mode` Parameter, und legen Sie dessen Wert auf `ReadSchema`.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.WriteXml%2A> und <xref:System.Data.DataSet.WriteXmlSchema%2A> Methoden bzw. Schreiben von XML-Daten oder Schema und Daten aus der `DataSet`, verwenden Sie die `WriteXml` Methode. Um nur das Schema zu schreiben, verwenden Sie die `WriteXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 Wenn ein Inline Schema angegeben wird, wird das Inline Schema verwendet, um die vorhandene relationale Struktur zu erweitern, bevor die Daten geladen werden. Wenn Konflikte auftreten (z. b. dieselbe Spalte in derselben Tabelle, die mit unterschiedlichen Datentypen definiert wurde), wird eine Ausnahme ausgelöst.  
  
 Wenn kein Inline Schema angegeben wird, wird die relationale Struktur nach Bedarf nach Bedarf entsprechend der Struktur des XML-Dokuments erweitert. Wenn das Schema nicht über einen Typrückschluss erweitert werden kann, um alle Daten verfügbar zu machen, wird eine Ausnahme ausgelöst.  
  
> [!NOTE]
>  Der `DataSet` verknüpft kein XML-Element mit dem entsprechenden `DataColumn` oder `DataTable`, wenn zulässige XML-Zeichen wie ("_") im serialisierten XML-Code mit Escapezeichen versehen werden. Der `DataSet` selbst schützt nur ungültige XML-Zeichen in XML-Elementnamen und kann daher nur denselben nutzen. Wenn juristische Zeichen im XML-Elementnamen mit Escapezeichen versehen werden, wird das Element bei der Verarbeitung ignoriert.  
  
 Wenn das XML-Schema für eine <xref:System.Data.DataSet> eine `targetNamespace`enthält, werden die Daten möglicherweise nicht gelesen, und beim Aufrufen von <xref:System.Data.DataSet.ReadXml%2A> können Ausnahmen auftreten, um die <xref:System.Data.DataSet> mit XML zu laden, das Elemente ohne qualifizierenden Namespace enthält. Um nicht qualifizierte Elemente zu lesen, legen Sie `elementFormDefault` entsprechend "qualified" im XML-Schema fest, wie im folgenden Beispiel veranschaulicht.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> erbt von <xref:System.Xml.XmlReader>.  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXml%2A> in den <xref:System.Data.DataSet> zu lesen, indem Sie `XmlReadMode.ReadSchema`angeben. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird zuerst eine einfache <xref:System.Data.DataSet> mit einer <xref:System.Data.DataTable>, zwei Spalten und zehn Zeilen erstellt. Das <xref:System.Data.DataSet> Schema und die Daten werden auf den Datenträger geschrieben, indem die <xref:System.Data.DataSet.WriteXml%2A>-Methode aufgerufen wird. Es wird ein zweiter <xref:System.Data.DataSet> erstellt, und die <xref:System.Data.DataSet.ReadXml%2A>-Methode wird verwendet, um Sie mit Schema und Daten zu füllen.  
  
 [!code-csharp[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="stream">Der <see cref="T:System.IO.Stream" />, aus dem gelesen werden soll.</param>
        <param name="mode">Einer der <see cref="T:System.Data.XmlReadMode" />-Werte.</param>
        <summary>Liest mit dem angegebenen <see cref="T:System.Data.DataSet" /> und im angegebenen <see cref="T:System.IO.Stream" /> das XML-Schema und die XML-Daten in das <see cref="T:System.Data.XmlReadMode" />.</summary>
        <returns>Der zum Lesen der Daten verwendete <see langword="XmlReadMode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.ReadXml%2A>-Methode bietet eine Möglichkeit zum Lesen von Daten oder Daten und Schemas in einer <xref:System.Data.DataSet> aus einem XML-Dokument, während die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode nur das Schema liest. Um Schemas und Daten zu lesen, verwenden Sie eine der der `ReadXML` Überladungen, die enthält die `mode` Parameter, und legen Sie dessen Wert auf `ReadSchema`.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.WriteXml%2A> und <xref:System.Data.DataSet.WriteXmlSchema%2A> Methoden bzw.Das gleiche gilt für die <xref:System.Data.DataSet.WriteXml%2A> und <xref:System.Data.DataSet.WriteXmlSchema%2A> Methoden bzw..Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.WriteXml%2A> und <xref:System.Data.DataSet.WriteXmlSchema%2A> Methoden bzw. Schreiben von XML-Daten oder Schema und Daten aus der `DataSet`, verwenden Sie die `WriteXml` Methode. Um nur das Schema zu schreiben, verwenden Sie die `WriteXmlSchema`-Methode.  
  
> [!NOTE]
>  Wenn Sie <xref:System.Data.DataSet.ReadXml%2A> verwenden und <xref:System.Data.XmlReadMode> auf `Diffgram`festlegen, können sich der Inhalt der Ziel `DataSet` und die ursprüngliche `DataSet` aufgrund der Art und Weise, wie das DiffGram generiert und verarbeitet wird, unterscheiden. Weitere Informationen zu DiffGrams finden Sie unter [DiffGrams](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md).  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 Wenn ein Inline Schema angegeben wird, wird das Inline Schema verwendet, um die vorhandene relationale Struktur zu erweitern, bevor die Daten geladen werden. Wenn Konflikte auftreten (z. b. dieselbe Spalte in derselben Tabelle, die mit unterschiedlichen Datentypen definiert wurde), wird eine Ausnahme ausgelöst.  
  
 Wenn kein Inline Schema angegeben wird, wird die relationale Struktur nach Bedarf nach Bedarf entsprechend der Struktur des XML-Dokuments erweitert. Wenn das Schema nicht über einen Typrückschluss erweitert werden kann, um alle Daten verfügbar zu machen, wird eine Ausnahme ausgelöst.  
  
> [!NOTE]
>  Der `DataSet` verknüpft kein XML-Element mit dem entsprechenden `DataColumn` oder `DataTable`, wenn zulässige XML-Zeichen wie ("_") im serialisierten XML-Code mit Escapezeichen versehen werden. Der `DataSet` selbst schützt nur ungültige XML-Zeichen in XML-Elementnamen und kann daher nur denselben nutzen. Wenn juristische Zeichen im XML-Elementnamen mit Escapezeichen versehen werden, wird das Element bei der Verarbeitung ignoriert.  
  
 Wenn das XML-Schema für eine <xref:System.Data.DataSet> `targetNamespace`enthält, werden die Daten möglicherweise nicht gelesen, und beim Aufrufen von <xref:System.Data.DataSet.ReadXml%2A> können Ausnahmen auftreten, um die <xref:System.Data.DataSet> mit XML zu laden, das Elemente ohne qualifizierenden Namespace enthält. Um nicht qualifizierte Elemente zu lesen, legen Sie `elementFormDefault` entsprechend "qualified" im XML-Schema fest, wie im folgenden Beispiel veranschaulicht.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXml%2A> in den <xref:System.Data.DataSet> zu lesen, indem Sie `XmlReadMode.ReadSchema`angeben. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see cref="T:System.IO.TextReader" />, aus dem gelesen werden soll.</param>
        <param name="mode">Einer der <see cref="T:System.Data.XmlReadMode" />-Werte.</param>
        <summary>Liest mit dem angegebenen <see cref="T:System.Data.DataSet" /> und im angegebenen <see cref="T:System.IO.TextReader" /> das XML-Schema und die XML-Daten in das <see cref="T:System.Data.XmlReadMode" />.</summary>
        <returns>Der zum Lesen der Daten verwendete <see langword="XmlReadMode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.ReadXml%2A>-Methode bietet eine Möglichkeit zum Lesen von Daten oder Daten und Schemas in einer <xref:System.Data.DataSet> aus einem XML-Dokument, während die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode nur das Schema liest. Um Schemas und Daten zu lesen, verwenden Sie eine der der `ReadXML` Überladungen, die enthält die `mode` Parameter, und legen Sie dessen Wert auf `ReadSchema`.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.WriteXml%2A> und <xref:System.Data.DataSet.WriteXmlSchema%2A> Methoden bzw. Schreiben von XML-Daten oder Schema und Daten aus der `DataSet`, verwenden Sie die `WriteXml` Methode. Um nur das Schema zu schreiben, verwenden Sie die `WriteXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 Wenn ein Inline Schema angegeben wird, wird das Inline Schema verwendet, um die vorhandene relationale Struktur zu erweitern, bevor die Daten geladen werden. Wenn Konflikte auftreten (z. b. dieselbe Spalte in derselben Tabelle, die mit unterschiedlichen Datentypen definiert wurde), wird eine Ausnahme ausgelöst.  
  
 Wenn kein Inline Schema angegeben wird, wird die relationale Struktur nach Bedarf nach Bedarf entsprechend der Struktur des XML-Dokuments erweitert. Wenn das Schema nicht über einen Typrückschluss erweitert werden kann, um alle Daten verfügbar zu machen, wird eine Ausnahme ausgelöst.  
  
> [!NOTE]
>  Der `DataSet` verknüpft kein XML-Element mit dem entsprechenden `DataColumn` oder `DataTable`, wenn zulässige XML-Zeichen wie ("_") im serialisierten XML-Code mit Escapezeichen versehen werden. Der `DataSet` selbst schützt nur ungültige XML-Zeichen in XML-Elementnamen und kann daher nur denselben nutzen. Wenn juristische Zeichen im XML-Elementnamen mit Escapezeichen versehen werden, wird das Element bei der Verarbeitung ignoriert.  
  
 Wenn das XML-Schema für eine <xref:System.Data.DataSet> `targetNamespace`enthält, werden die Daten möglicherweise nicht gelesen, und beim Aufrufen von <xref:System.Data.DataSet.ReadXml%2A> können Ausnahmen auftreten, um die <xref:System.Data.DataSet> mit XML zu laden, das Elemente ohne qualifizierenden Namespace enthält. Um nicht qualifizierte Elemente zu lesen, legen Sie `elementFormDefault` entsprechend "qualified" im XML-Schema fest, wie im folgenden Beispiel veranschaulicht.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXml%2A> in den <xref:System.Data.DataSet> zu lesen, indem Sie `XmlReadMode.ReadSchema`angeben. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Name der Datei, aus der gelesen werden soll, einschließlich des Pfades.</param>
        <param name="mode">Einer der <see cref="T:System.Data.XmlReadMode" />-Werte.</param>
        <summary>Liest mit der angegebenen Datei und im angegebenen <see cref="T:System.Data.DataSet" /> das XML-Schema und die XML-Daten in das <see cref="T:System.Data.XmlReadMode" />.</summary>
        <returns>Der zum Lesen der Daten verwendete <see langword="XmlReadMode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.ReadXml%2A>-Methode bietet eine Möglichkeit zum Lesen von Daten oder Daten und Schemas in einer <xref:System.Data.DataSet> aus einem XML-Dokument, während die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode nur das Schema liest. Um Schemas und Daten zu lesen, verwenden Sie eine der der `ReadXML` Überladungen, die enthält die `mode` Parameter, und legen Sie dessen Wert auf `ReadSchema`.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.WriteXml%2A> und <xref:System.Data.DataSet.WriteXmlSchema%2A> Methoden bzw. Schreiben von XML-Daten oder Schema und Daten aus der `DataSet`, verwenden Sie die `WriteXml` Methode. Um nur das Schema zu schreiben, verwenden Sie die `WriteXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 Wenn ein Inline Schema angegeben wird, wird das Inline Schema verwendet, um die vorhandene relationale Struktur zu erweitern, bevor die Daten geladen werden. Wenn Konflikte auftreten (z. b. dieselbe Spalte in derselben Tabelle, die mit unterschiedlichen Datentypen definiert wurde), wird eine Ausnahme ausgelöst.  
  
 Wenn kein Inline Schema angegeben wird, wird die relationale Struktur nach Bedarf nach Bedarf entsprechend der Struktur des XML-Dokuments erweitert. Wenn das Schema nicht über einen Typrückschluss erweitert werden kann, um alle Daten verfügbar zu machen, wird eine Ausnahme ausgelöst.  
  
> [!NOTE]
>  Der `DataSet` verknüpft kein XML-Element mit dem entsprechenden `DataColumn` oder `DataTable`, wenn zulässige XML-Zeichen wie ("_") im serialisierten XML-Code mit Escapezeichen versehen werden. Der `DataSet` selbst schützt nur ungültige XML-Zeichen in XML-Elementnamen und kann daher nur denselben nutzen. Wenn juristische Zeichen im XML-Elementnamen mit Escapezeichen versehen werden, wird das Element bei der Verarbeitung ignoriert.  
  
 Wenn das XML-Schema für eine <xref:System.Data.DataSet> eine `targetNamespace`enthält, werden die Daten möglicherweise nicht gelesen, und beim Aufrufen von <xref:System.Data.DataSet.ReadXml%2A> können Ausnahmen auftreten, um die <xref:System.Data.DataSet> mit XML zu laden, das Elemente ohne qualifizierenden Namespace enthält. Um nicht qualifizierte Elemente zu lesen, legen Sie `elementFormDefault` entsprechend "qualified" im XML-Schema fest, wie im folgenden Beispiel veranschaulicht.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXml%2A> in den <xref:System.Data.DataSet> zu lesen, indem Sie `XmlReadMode.ReadSchema`angeben. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> ist nicht auf <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> festgelegt.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">zum Lesen und Schreiben von Dateien. Zugehörige Enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see cref="T:System.Xml.XmlReader" />, aus dem gelesen werden soll.</param>
        <param name="mode">Einer der <see cref="T:System.Data.XmlReadMode" />-Werte.</param>
        <summary>Liest mit dem angegebenen <see cref="T:System.Data.DataSet" /> und im angegebenen <see cref="T:System.Xml.XmlReader" /> das XML-Schema und die XML-Daten in das <see cref="T:System.Data.XmlReadMode" />.</summary>
        <returns>Der zum Lesen der Daten verwendete <see langword="XmlReadMode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.DataSet.ReadXml%2A>-Methode bietet eine Möglichkeit zum Lesen von Daten oder Daten und Schemas in einer <xref:System.Data.DataSet> aus einem XML-Dokument, während die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode nur das Schema liest. Um Schemas und Daten zu lesen, verwenden Sie eine der der `ReadXML` Überladungen, die enthält die `mode` Parameter, und legen Sie dessen Wert auf `ReadSchema`.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.WriteXml%2A> und <xref:System.Data.DataSet.WriteXmlSchema%2A> Methoden bzw. Schreiben von XML-Daten oder Schema und Daten aus der `DataSet`, verwenden Sie die `WriteXml` Methode. Um nur das Schema zu schreiben, verwenden Sie die `WriteXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 Wenn ein Inline Schema angegeben wird, wird das Inline Schema verwendet, um die vorhandene relationale Struktur zu erweitern, bevor die Daten geladen werden. Wenn Konflikte auftreten (z. b. dieselbe Spalte in derselben Tabelle, die mit unterschiedlichen Datentypen definiert wurde), wird eine Ausnahme ausgelöst.  
  
 Wenn kein Inline Schema angegeben wird, wird die relationale Struktur nach Bedarf nach Bedarf entsprechend der Struktur des XML-Dokuments erweitert. Wenn das Schema nicht über einen Typrückschluss erweitert werden kann, um alle Daten verfügbar zu machen, wird eine Ausnahme ausgelöst.  
  
> [!NOTE]
>  Der `DataSet` verknüpft kein XML-Element mit dem entsprechenden `DataColumn` oder `DataTable`, wenn zulässige XML-Zeichen wie ("_") im serialisierten XML-Code mit Escapezeichen versehen werden. Der `DataSet` selbst schützt nur ungültige XML-Zeichen in XML-Elementnamen und kann daher nur denselben nutzen. Wenn juristische Zeichen im XML-Elementnamen mit Escapezeichen versehen werden, wird das Element bei der Verarbeitung ignoriert.  
  
 Wenn das XML-Schema für eine <xref:System.Data.DataSet> eine `targetNamespace`enthält, werden die Daten möglicherweise nicht gelesen, und beim Aufrufen von <xref:System.Data.DataSet.ReadXml%2A> können Ausnahmen auftreten, um die <xref:System.Data.DataSet> mit XML zu laden, das Elemente ohne qualifizierenden Namespace enthält. Um nicht qualifizierte Elemente zu lesen, legen Sie `elementFormDefault` entsprechend "qualified" im XML-Schema fest, wie im folgenden Beispiel veranschaulicht.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXml%2A> in den <xref:System.Data.DataSet> zu lesen, indem Sie `XmlReadMode.ReadSchema`angeben. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Liest ein XML-Schema in die <see cref="T:System.Data.DataSet" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.ReadXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Der <see cref="T:System.IO.Stream" />, aus dem gelesen werden soll.</param>
        <summary>Liest das XML-Schema aus dem angegebenen <see cref="T:System.IO.Stream" /> in das <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode, um das Schema für eine <xref:System.Data.DataSet>zu erstellen. Das Schema umfasst Tabellen-, Beziehungs-und Einschränkungs Definitionen. Verwenden Sie die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode, um ein Schema in ein XML-Dokument zu schreiben.  
  
 Das XML-Schema wird mit dem XSD-Standard geschrieben.  
  
> [!NOTE]
>  Daten Beschädigungen können auftreten, wenn die Typen msdata: datatype und xs: Type nicht identisch sind. Es wird keine Ausnahme ausgelöst.  
  
 Die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode wird im allgemeinen aufgerufen, bevor die <xref:System.Data.DataSet.ReadXml%2A>-Methode aufgerufen wird, die zum Ausfüllen des <xref:System.Data.DataSet>verwendet wird.  
  
 Zu den Klassen, die von der <xref:System.IO.Stream>-Klasse abgeleitet werden, gehören <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>und <xref:System.Net.Sockets.NetworkStream>.  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXmlSchema%2A>in die <xref:System.Data.DataSet> zu lesen. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.IO.FileStream> Objekt erstellt, mit dem ein XML-Schema gelesen wird, und die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode wird mit dem-Objekt aufgerufen.  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.TextReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see cref="T:System.IO.TextReader" />, aus dem gelesen werden soll.</param>
        <summary>Liest das XML-Schema aus dem angegebenen <see cref="T:System.IO.TextReader" /> in das <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode, um das Schema für eine <xref:System.Data.DataSet>zu erstellen. Das Schema umfasst Tabellen-, Beziehungs-und Einschränkungs Definitionen. Verwenden Sie die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode, um ein Schema in ein XML-Dokument zu schreiben.  
  
 Das XML-Schema wird mit dem XSD-Standard geschrieben.  
  
> [!NOTE]
>  Daten Beschädigungen können auftreten, wenn die Typen msdata: datatype und xs: Type nicht identisch sind. Es wird keine Ausnahme ausgelöst.  
  
 Die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode wird im allgemeinen aufgerufen, bevor die <xref:System.Data.DataSet.ReadXml%2A>-Methode aufgerufen wird, die zum Ausfüllen des <xref:System.Data.DataSet>verwendet wird.  
  
 Klassen, die von der <xref:System.IO.TextReader>-Klasse erben, enthalten die Klassen <xref:System.IO.StreamReader> und <xref:System.IO.StringReader>.  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXmlSchema%2A>in die <xref:System.Data.DataSet> zu lesen. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.IO.StreamReader> Objekt erstellt, mit dem ein Schema gelesen wird, und die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode wird mit dem-Objekt aufgerufen.  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : string -&gt; unit" Usage="dataSet.ReadXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Name der Datei, aus der gelesen werden soll, einschließlich des Pfades.</param>
        <summary>Liest das XML-Schema aus der angegebenen Datei in das <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode, um das Schema für eine <xref:System.Data.DataSet>zu erstellen. Das Schema umfasst Tabellen-, Beziehungs-und Einschränkungs Definitionen. Verwenden Sie die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode, um ein Schema in ein XML-Dokument zu schreiben.  
  
 Das XML-Schema wird mit dem XSD-Standard geschrieben.  
  
> [!NOTE]
>  Daten Beschädigungen können auftreten, wenn die Typen msdata: datatype und xs: Type nicht identisch sind. Es wird keine Ausnahme ausgelöst.  
  
 Die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode wird im allgemeinen aufgerufen, bevor die <xref:System.Data.DataSet.ReadXml%2A>-Methode aufgerufen wird, die zum Ausfüllen des <xref:System.Data.DataSet>verwendet wird.  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXmlSchema%2A>in die <xref:System.Data.DataSet> zu lesen. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> ist nicht auf <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> festgelegt.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">zum Lesen und Schreiben von Dateien. Zugehörige Enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see cref="T:System.Xml.XmlReader" />, aus dem gelesen werden soll.</param>
        <summary>Liest das XML-Schema aus dem angegebenen <see cref="T:System.Xml.XmlReader" /> in das <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode, um das Schema für eine <xref:System.Data.DataSet>zu erstellen. Das Schema umfasst Tabellen-, Beziehungs-und Einschränkungs Definitionen.  
  
 Das XML-Schema wird mit dem XSD-Standard geschrieben.  
  
> [!NOTE]
>  Daten Beschädigungen können auftreten, wenn die Typen msdata: datatype und xs: Type nicht identisch sind. Es wird keine Ausnahme ausgelöst.  
  
 Die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode wird im allgemeinen aufgerufen, bevor die <xref:System.Data.DataSet.ReadXml%2A>-Methode aufgerufen wird, die zum Ausfüllen des <xref:System.Data.DataSet>verwendet wird.  
  
 Die <xref:System.Xml.XmlReader?displayProperty=nameWithType> Klasse ist abstrakt. Eine Klasse, die von erben die `XmlReader` ist die <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> Klasse.  
  
> [!NOTE]
>  Wenn das Schema für die <xref:System.Data.DataSet> Elemente desselben Namens, aber einen anderen Typ im gleichen Namespace enthält, wird eine Ausnahme ausgelöst, wenn Sie versuchen, das Schema mit <xref:System.Data.DataSet.ReadXmlSchema%2A>in die <xref:System.Data.DataSet> zu lesen. Diese Ausnahme tritt nicht auf, wenn Sie .NET Framework Version 1,0 verwenden.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein neues <xref:System.Data.DataSet> und <xref:System.IO.FileStream?displayProperty=nameWithType> Objekt. Das <xref:System.IO.FileStream>-Objekt, das mit einem Dateipfad und einem Dateinamen erstellt wurde, wird verwendet, um eine <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> zu erstellen, die als Argument an die <xref:System.Data.DataSet.ReadXmlSchema%2A>-Methode übermittelt wird.  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSerializable">
      <MemberSignature Language="C#" Value="protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadXmlSerializable(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadXmlSerializable (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadXmlSerializable(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadXmlSerializable : System.Xml.XmlReader -&gt; unit&#xA;override this.ReadXmlSerializable : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSerializable reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Der angegebene XML-Reader.</param>
        <summary>Ignoriert Attribute und gibt ein leeres DataSet zurück.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public virtual void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RejectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RejectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RejectChanges();" />
      <MemberSignature Language="F#" Value="abstract member RejectChanges : unit -&gt; unit&#xA;override this.RejectChanges : unit -&gt; unit" Usage="dataSet.RejectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt einen Rollback aller Änderungen aus, die am <see cref="T:System.Data.DataSet" /> seit dessen Erstellung oder seit dem letzten Aufruf von <see cref="M:System.Data.DataSet.AcceptChanges" /> vorgenommen wurden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie die <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType> auf, um die <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>-Methode für alle <xref:System.Data.DataTable> Objekte aufzurufen, die im <xref:System.Data.DataSet>enthalten sind.  
  
 <xref:System.Data.DataRow> Objekte, die im <xref:System.Data.DataSet> enthalten sind, können durch Aufrufen der <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType>-Methode im Bearbeitungsmodus festgelegt werden. Nachdem Sie die <xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType>-Methode aufgerufen haben, können Änderungen abgelehnt werden, indem Sie die <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> auf dem <xref:System.Data.DataTable> aufrufen, zu dem die <xref:System.Data.DataRow> Objekte gehören.  
  
 Wenn die <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>-Methode aufgerufen wird, brechen alle Zeilen, die sich noch im Bearbeitungsmodus befinden, Ihre Bearbeitungen ab. Neue Zeilen werden entfernt. Geänderte und gelöschte Zeilen werden wieder in ihren ursprünglichen Zustand (`DataRowState.Unchanged`) zurückgegeben.  
  
 "Accept Changes" und "RejectChanges" gelten nur für <xref:System.Data.DataRow> bezogenen Änderungen (d. h. `Add`, `Remove`, `Delete`und `Modify`). Sie sind nicht auf Schema-oder Strukturänderungen anwendbar.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine Klasse, die von der <xref:System.Data.DataSet>-Klasse abgeleitet ist. Das <xref:System.Data.DataSet.RejectChanges%2A> Ereignis wird aus einer Funktion heraus aufgerufen.  
  
 [!code-csharp[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Relations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection Relations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection Relations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Relations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Relations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ Relations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Relations : System.Data.DataRelationCollection" Usage="System.Data.DataSet.Relations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetRelationsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Collection der Beziehungen ab, die Tabellen verknüpfen und die Navigation von übergeordneten Tabellen zu untergeordneten Tabellen ermöglichen.</summary>
        <value>Ein <see cref="T:System.Data.DataRelationCollection" />, das eine Auflistung von <see cref="T:System.Data.DataRelation" />-Objekten enthält. Wenn keine <see cref="T:System.Data.DataRelation" />-Objekte vorhanden sind, wird eine leere Auflistung zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird der Spaltenname aller untergeordneten Tabellen über die <xref:System.Data.DataSet.Relations%2A>-Eigenschaft ausgegeben.  
  
 [!code-vb[Classic WebData DataSet.Relations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Relations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="RemotingFormat">
      <MemberSignature Language="C#" Value="public System.Data.SerializationFormat RemotingFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SerializationFormat RemotingFormat" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.RemotingFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property RemotingFormat As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SerializationFormat RemotingFormat { System::Data::SerializationFormat get(); void set(System::Data::SerializationFormat value); };" />
      <MemberSignature Language="F#" Value="member this.RemotingFormat : System.Data.SerializationFormat with get, set" Usage="System.Data.DataSet.RemotingFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Data.SerializationFormat" /> für das beim Remoting verwendete <see cref="T:System.Data.DataSet" /> ab oder legt dieses fest.</summary>
        <value>Ein <see cref="T:System.Data.SerializationFormat" />-Objekt.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="dataSet.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht alle Tabellen und entfernt alle Beziehungen, Einschränkungen und fremden Tabellen von <see cref="T:System.Data.DataSet" />. Untergeordnete Klassen müssen <see cref="M:System.Data.DataSet.Reset" /> überschreiben, um ein <see cref="T:System.Data.DataSet" /> mit dem ursprünglichen Zustand wiederherzustellen.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="SchemaSerializationMode">
      <MemberSignature Language="C#" Value="public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SchemaSerializationMode SchemaSerializationMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.SchemaSerializationMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SchemaSerializationMode As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::SchemaSerializationMode SchemaSerializationMode { System::Data::SchemaSerializationMode get(); void set(System::Data::SchemaSerializationMode value); };" />
      <MemberSignature Language="F#" Value="member this.SchemaSerializationMode : System.Data.SchemaSerializationMode with get, set" Usage="System.Data.DataSet.SchemaSerializationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.Data.SchemaSerializationMode" /> für ein <see cref="T:System.Data.DataSet" /> ab oder legt diesen fest.</summary>
        <value>Eine <see cref="T:System.Data.SchemaSerializationMode" /> für <see cref="T:System.Data.DataSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine <xref:System.Data.DataSet> die Schema-und Instanzdaten standardmäßig in Webdiensten und Remotingszenarien serialisiert. Wenn Sie die <xref:System.Data.DataSet.SchemaSerializationMode%2A>-Eigenschaft einer typisierten `DataSet` auf <xref:System.Data.SchemaSerializationMode.ExcludeSchema> festlegen, werden Schema Informationen von der Serialisierungsnutzlast ausgeschlossen.  
  
 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> wird nur für eine typisierte `DataSet`unterstützt. Bei einem nicht typisierten `DataSet` diese Eigenschaft nur auf <xref:System.Data.SchemaSerializationMode.IncludeSchema>festgelegt werden.  
  
 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> sollten nur in Fällen verwendet werden, in denen die Schema Informationen der zugrunde liegenden typisierten `DataTables`, `DataRelations` und `Constraints` nicht geändert wurden. Wenn Änderungen aufgetreten sind, sollten alle Schema Informationen mit <xref:System.Data.SchemaSerializationMode.IncludeSchema>serialisiert werden.  
  
 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> wird in Version 2,0 von .NET Framework oder höher unterstützt.  
  
 Wenn <xref:System.Data.SchemaSerializationMode.ExcludeSchema> festgelegt ist, werden nur die Lauf Zeiteigenschaften auf oberster Ebene, die auf dem <xref:System.Data.DataSet> vorhanden sind, serialisiert. Außerdem werden Sie nur serialisiert, wenn Sie sich von den Standardwerten unterscheiden. Keines der `Tables`, `Relations` oder `Constraints` wird serialisiert. Zu den serialisierten Lauf Zeiteigenschaften zählen <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>und <xref:System.Data.DataSet.CaseSensitive%2A>. Diese Eigenschaften werden serialisiert, um sicherzustellen, dass die Integrität der allgemeinen Laufzeitdaten beibehalten wird.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeRelations">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeRelations ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeRelations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeRelations" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeRelations () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeRelations();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeRelations : unit -&gt; bool&#xA;override this.ShouldSerializeRelations : unit -&gt; bool" Usage="dataSet.ShouldSerializeRelations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die <see cref="P:System.Data.DataSet.Relations" />-Eigenschaft beibehalten werden soll.</summary>
        <returns><see langword="true" />, wenn der Eigenschaftswert von seinem Standardwert geändert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise verwenden Sie diese Methode, wenn Sie einen Designer für die <xref:System.Data.DataSet>erstellen oder ein eigenes Steuerelement erstellen, das die <xref:System.Data.DataSet>einschließt.  
  
   
  
## Examples  
 In den folgenden Beispielen wird eine Klasse gezeigt, die von der <xref:System.Data.DataSet>-Klasse abgeleitet ist. Die Methoden <xref:System.Data.DataSet.Reset%2A> und <xref:System.Data.DataSet.ShouldSerializeRelations%2A> werden innerhalb von Funktionen in der abgeleiteten Klasse aufgerufen.  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTables">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeTables ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeTables () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeTables();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeTables : unit -&gt; bool&#xA;override this.ShouldSerializeTables : unit -&gt; bool" Usage="dataSet.ShouldSerializeTables " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die <see cref="P:System.Data.DataSet.Tables" />-Eigenschaft beibehalten werden soll.</summary>
        <returns><see langword="true" />, wenn der Eigenschaftswert von seinem Standardwert geändert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird in der Regel nur verwendet, wenn Sie einen Designer für die <xref:System.Data.DataSet>erstellen oder ein eigenes Steuerelement erstellen, das die <xref:System.Data.DataSet>einschließt.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine Klasse, die von der <xref:System.Data.DataSet>-Klasse abgeleitet ist. Die <xref:System.Data.DataSet.ShouldSerializeTables%2A>-Methode wird in Funktionen in der abgeleiteten Klasse aufgerufen.  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Data.DataSet.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine <see cref="T:System.ComponentModel.ISite" /> für den <see cref="T:System.Data.DataSet" /> ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.ComponentModel.ISite" /> für den <see cref="T:System.Data.DataSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 -Standorte binden eine <xref:System.ComponentModel.Component> an eine <xref:System.ComponentModel.Container> und ermöglichen die Kommunikation zwischen Ihnen sowie eine Möglichkeit für den Container, seine Komponenten zu verwalten.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
        <value>Eine Beschreibung dieses Members finden Sie unter <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellen-Memberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.DataSet>-Instanz in eine <xref:System.ComponentModel.IListSource>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
        <returns>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.ComponentModel.IListSource.GetList" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellen-Memberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.DataSet>-Instanz in eine <xref:System.ComponentModel.IListSource>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="info">Die mit Daten zu füllende <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
        <param name="context">Das Ziel (siehe <see cref="T:System.Runtime.Serialization.StreamingContext" />) dieser Serialisierung.</param>
        <summary>Füllt ein Serialisierungsinformationsobjekt mit den Daten auf, die zum Serialisieren des <see cref="T:System.Data.DataSet" /> erforderlich sind.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</summary>
        <returns>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellen-Memberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.DataSet>-Instanz in eine <xref:System.Xml.Serialization.IXmlSerializable>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellen-Memberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.DataSet>-Instanz in eine <xref:System.Xml.Serialization.IXmlSerializable>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.Xml.XmlWriter" />.</param>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellen-Memberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.DataSet>-Instanz in eine <xref:System.Xml.Serialization.IXmlSerializable>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Data.DataTableCollection Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTableCollection Tables" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As DataTableCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTableCollection ^ Tables { System::Data::DataTableCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Tables : System.Data.DataTableCollection" Usage="System.Data.DataSet.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetTablesDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTableCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung der im <see cref="T:System.Data.DataSet" /> enthaltenen Tabellen ab.</summary>
        <value>Die in diesem <see cref="T:System.Data.DataTableCollection" /> enthaltene <see cref="T:System.Data.DataSet" />. Wenn keine <see cref="T:System.Data.DataTable" />-Objekte vorhanden sind, wird eine leere Auflistung zurückgegeben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Data.DataTableCollection.Add%2A>-Methode des <xref:System.Data.DataTableCollection>, um der Auflistung Tabellen hinzuzufügen. Um Tabellen zu entfernen, verwenden Sie die <xref:System.Data.DataTableCollection.Remove%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.Data.DataTableCollection>des <xref:System.Data.DataSet> Objekts zurückgegeben und die Spalten und Zeilen in jeder Tabelle ausgegeben.  
  
 [!code-csharp[Classic WebData DataSet.Tables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Tables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt XML-Daten und bei Bedarf das Schema aus dem <see cref="T:System.Data.DataSet" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Ein <see cref="T:System.IO.Stream" />-Objekt, mit dem in eine Datei geschrieben wird.</param>
        <summary>Schreibt mit dem angegebenen <see cref="T:System.Data.DataSet" /> die aktuellen Daten für das <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteXml`-Methode bietet eine Möglichkeit zum Schreiben von Daten oder Daten und Schemas aus einer <xref:System.Data.DataSet> in ein XML-Dokument, während die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode nur das Schema schreibt. Verwenden Sie zum Schreiben von Daten und Schemas eine der-über Ladungen, die den `mode`-Parameter enthält, und legen Sie dessen Wert auf `WriteSchema`fest.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.ReadXml%2A> und <xref:System.Data.DataSet.ReadXmlSchema%2A> Methoden bzw. Verwenden Sie die `ReadXml`-Methode, um XML-Daten oder sowohl das Schema als auch die Daten in die `DataSet`zu lesen. Um nur das Schema zu lesen, verwenden Sie die `ReadXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.IO.FileStream?displayProperty=nameWithType> Objekt. Das-Objekt wird dann mit der <xref:System.Data.DataSet.WriteXml%2A>-Methode verwendet, um ein XML-Dokument zu schreiben.  
  
 [!code-csharp[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Das <see cref="T:System.IO.TextWriter" />-Objekt, mit dem geschrieben werden soll.</param>
        <summary>Schreibt mit dem angegebenen <see cref="T:System.Data.DataSet" /> die aktuellen Daten für das <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteXml`-Methode bietet eine Möglichkeit zum Schreiben von Daten oder Daten und Schemas aus einer <xref:System.Data.DataSet> in ein XML-Dokument, während die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode nur das Schema schreibt. Verwenden Sie zum Schreiben von Daten und Schemas eine der-über Ladungen, die den `mode`-Parameter enthält, und legen Sie dessen Wert auf `WriteSchema`fest.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.ReadXml%2A> und <xref:System.Data.DataSet.ReadXmlSchema%2A> Methoden bzw. Verwenden Sie die `ReadXml`-Methode, um XML-Daten oder sowohl das Schema als auch die Daten in die `DataSet`zu lesen. Um nur das Schema zu lesen, verwenden Sie die `ReadXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string -&gt; unit" Usage="dataSet.WriteXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Name der Datei, in die geschrieben werden soll, einschließlich des Pfades.</param>
        <summary>Schreibt die aktuellen Daten für das <see cref="T:System.Data.DataSet" /> in die angegebene Datei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteXml`-Methode bietet eine Möglichkeit zum Schreiben von Daten oder Daten und Schemas aus einer <xref:System.Data.DataSet> in ein XML-Dokument, während die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode nur das Schema schreibt. Verwenden Sie zum Schreiben von Daten und Schemas eine der-über Ladungen, die den `mode`-Parameter enthält, und legen Sie dessen Wert auf `WriteSchema`fest.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.ReadXml%2A> und <xref:System.Data.DataSet.ReadXmlSchema%2A> Methoden bzw. Verwenden Sie die `ReadXml`-Methode, um XML-Daten oder sowohl das Schema als auch die Daten in die `DataSet`zu lesen. Um nur das Schema zu lesen, verwenden Sie die `ReadXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> ist nicht auf <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> festgelegt.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">zum Lesen und Schreiben von Dateien. Zugehörige Enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Der <see cref="T:System.Xml.XmlWriter" />, mit dem geschrieben werden soll.</param>
        <summary>Schreibt die aktuellen Daten für das <see cref="T:System.Data.DataSet" /> in den angegebenen <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteXml`-Methode bietet eine Möglichkeit zum Schreiben von Daten oder Daten und Schemas aus einer <xref:System.Data.DataSet> in ein XML-Dokument, während die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode nur das Schema schreibt. Verwenden Sie zum Schreiben von Daten und Schemas eine der-über Ladungen, die den `mode`-Parameter enthält, und legen Sie dessen Wert auf `WriteSchema`fest.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.ReadXml%2A> und <xref:System.Data.DataSet.ReadXmlSchema%2A> Methoden bzw. Verwenden Sie die `ReadXml`-Methode, um XML-Daten oder sowohl das Schema als auch die Daten in die `DataSet`zu lesen. Um nur das Schema zu lesen, verwenden Sie die `ReadXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="stream">Ein <see cref="T:System.IO.Stream" />-Objekt, mit dem in eine Datei geschrieben wird.</param>
        <param name="mode">Einer der <see cref="T:System.Data.XmlWriteMode" />-Werte.</param>
        <summary>Schreibt mit dem angegebenen <see cref="T:System.Data.DataSet" /> und im angegebenen <see cref="T:System.IO.Stream" /> die aktuellen Daten und bei Bedarf das Schema für die <see cref="T:System.Data.XmlWriteMode" />. Um das Schema zu schreiben, legen Sie den Wert für den <paramref name="mode" />-Parameter auf <see langword="WriteSchema" /> fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteXml`-Methode bietet eine Möglichkeit zum Schreiben von Daten oder Daten und Schemas aus einer <xref:System.Data.DataSet> in ein XML-Dokument, während die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode nur das Schema schreibt. Legen Sie den `mode`-Parameter auf `WriteSchema`fest, um Daten und Schemas zu schreiben.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.ReadXml%2A> und <xref:System.Data.DataSet.ReadXmlSchema%2A> Methoden bzw. Verwenden Sie die `ReadXml`-Methode, um XML-Daten oder sowohl das Schema als auch die Daten in die `DataSet`zu lesen. Um nur das Schema zu lesen, verwenden Sie die `ReadXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.IO.TextWriter" />-Objekt, mit dem das Dokument geschrieben wird.</param>
        <param name="mode">Einer der <see cref="T:System.Data.XmlWriteMode" />-Werte.</param>
        <summary>Schreibt mit dem angegebenen <see cref="T:System.Data.DataSet" /> und im angegebenen <see cref="T:System.IO.TextWriter" /> die aktuellen Daten und bei Bedarf das Schema für die <see cref="T:System.Data.XmlWriteMode" />. Um das Schema zu schreiben, legen Sie den Wert für den <paramref name="mode" />-Parameter auf <see langword="WriteSchema" /> fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteXml`-Methode bietet eine Möglichkeit zum Schreiben von Daten oder Daten und Schemas aus einer <xref:System.Data.DataSet> in ein XML-Dokument, während die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode nur das Schema schreibt. Legen Sie den `mode`-Parameter auf `WriteSchema`fest, um Daten und Schemas zu schreiben.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.ReadXml%2A> und <xref:System.Data.DataSet.ReadXmlSchema%2A> Methoden bzw. Verwenden Sie die `ReadXml`-Methode, um XML-Daten oder sowohl das Schema als auch die Daten in die `DataSet`zu lesen. Um nur das Schema zu lesen, verwenden Sie die `ReadXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird zuerst eine einfache <xref:System.Data.DataSet> mit einer <xref:System.Data.DataTable>, zwei Spalten und zehn Zeilen erstellt. Das <xref:System.Data.DataSet> Schema und die Daten werden auf den Datenträger geschrieben, indem die <xref:System.Data.DataSet.WriteXml%2A>-Methode aufgerufen wird. Es wird ein zweiter <xref:System.Data.DataSet> erstellt, und die <xref:System.Data.DataSet.ReadXml%2A>-Methode wird verwendet, um Sie mit Schema und Daten zu füllen.  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Name der Datei, in die geschrieben werden soll, einschließlich des Pfades.</param>
        <param name="mode">Einer der <see cref="T:System.Data.XmlWriteMode" />-Werte.</param>
        <summary>Schreibt im angegebenen <see cref="T:System.Data.DataSet" /> die aktuellen Daten und bei Bedarf das Schema für die <see cref="T:System.Data.XmlWriteMode" /> in die angegebene Datei. Um das Schema zu schreiben, legen Sie den Wert für den <paramref name="mode" />-Parameter auf <see langword="WriteSchema" /> fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteXml`-Methode bietet eine Möglichkeit zum Schreiben von Daten oder Daten und Schemas aus einer <xref:System.Data.DataSet> in ein XML-Dokument, während die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode nur das Schema schreibt. Legen Sie den `mode`-Parameter auf `WriteSchema`fest, um Daten und Schemas zu schreiben.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.ReadXml%2A> und <xref:System.Data.DataSet.ReadXmlSchema%2A> Methoden bzw. Verwenden Sie die `ReadXml`-Methode, um XML-Daten oder sowohl das Schema als auch die Daten in die `DataSet`zu lesen. Um nur das Schema zu lesen, verwenden Sie die `ReadXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Data.DataSet.WriteXml%2A>-Methode verwendet, um ein XML-Dokument zu schreiben.  
  
 [!code-csharp[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> ist nicht auf <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> festgelegt.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">zum Lesen und Schreiben von Dateien. Zugehörige Enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer">Der <see cref="T:System.Xml.XmlWriter" />, mit dem geschrieben werden soll.</param>
        <param name="mode">Einer der <see cref="T:System.Data.XmlWriteMode" />-Werte.</param>
        <summary>Schreibt mit dem angegebenen <see cref="T:System.Data.DataSet" /> und im angegebenen <see cref="T:System.Xml.XmlWriter" /> die aktuellen Daten und bei Bedarf das Schema für die <see cref="T:System.Data.XmlWriteMode" />. Um das Schema zu schreiben, legen Sie den Wert für den <paramref name="mode" />-Parameter auf <see langword="WriteSchema" /> fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `WriteXml`-Methode bietet eine Möglichkeit zum Schreiben von Daten oder Daten und Schemas aus einer <xref:System.Data.DataSet> in ein XML-Dokument, während die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode nur das Schema schreibt. Legen Sie den `mode`-Parameter auf `WriteSchema`fest, um Daten und Schemas zu schreiben.  
  
 Beachten Sie, dass der gleiche "true" für die <xref:System.Data.DataSet.ReadXml%2A> und <xref:System.Data.DataSet.ReadXmlSchema%2A> Methoden bzw. Verwenden Sie die `ReadXml`-Methode, um XML-Daten oder sowohl das Schema als auch die Daten in die `DataSet`zu lesen. Um nur das Schema zu lesen, verwenden Sie die `ReadXmlSchema`-Methode.  
  
> [!NOTE]
>  Eine <xref:System.InvalidOperationException> wird ausgelöst, wenn ein Spaltentyp in der `DataRow`, von der gelesen oder geschrieben wird, <xref:System.Dynamic.IDynamicMetaObjectProvider> implementiert und <xref:System.Xml.Serialization.IXmlSerializable>nicht implementiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.IO.FileStream?displayProperty=nameWithType>-Objekt erstellt, das zum Erstellen einer neuen <xref:System.Xml.XmlTextWriter>verwendet wird. Das <xref:System.Xml.XmlTextWriter>-Objekt wird mit der <xref:System.Data.DataSet.WriteXml%2A>-Methode verwendet, um ein XML-Dokument zu schreiben.  
  
 [!code-csharp[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt die <see cref="T:System.Data.DataSet" />-Struktur als XML-Schema.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Ein <see cref="T:System.IO.Stream" />-Objekt, mit dem in eine Datei geschrieben wird.</param>
        <summary>Schreibt die <see cref="T:System.Data.DataSet" />-Struktur als XML-Schreibt in das angegebene <see cref="T:System.IO.Stream" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode, um das Schema für eine <xref:System.Data.DataSet> in ein XML-Dokument zu schreiben. Das Schema umfasst Tabellen-, Beziehungs-und Einschränkungs Definitionen. Verwenden Sie die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode, um ein Schema in ein XML-Dokument zu schreiben.  
  
 Das XML-Schema wird mit dem XSD-Standard geschrieben.  
  
 Verwenden Sie die <xref:System.Data.DataSet.WriteXml%2A>-Methode, um die Daten in ein XML-Dokument zu schreiben.  
  
 Zu den Klassen, die von der <xref:System.IO.Stream>-Klasse abgeleitet werden, gehören <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>und <xref:System.Net.Sockets.NetworkStream>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein neues <xref:System.IO.FileStream>-Objekt erstellt, das an die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode zum Schreiben des Schemas auf den Datenträger übermittelt wird.  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Das <see cref="T:System.IO.TextWriter" />-Objekt, mit dem geschrieben werden soll.</param>
        <summary>Schreibt die <see cref="T:System.Data.DataSet" />-Struktur als XML-Schreibt in das angegebene <see cref="T:System.IO.TextWriter" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode, um das Schema für eine <xref:System.Data.DataSet> in ein XML-Dokument zu schreiben. Das Schema umfasst Tabellen-, Beziehungs-und Einschränkungs Definitionen. Verwenden Sie die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode, um ein Schema in ein XML-Dokument zu schreiben.  
  
 Das XML-Schema wird mit dem XSD-Standard geschrieben.  
  
 Verwenden Sie die <xref:System.Data.DataSet.WriteXml%2A>-Methode, um die Daten in ein XML-Dokument zu schreiben.  
  
 Zu den Klassen, die von der <xref:System.IO.TextWriter?displayProperty=nameWithType> Klasse abgeleitet werden, gehören die <xref:System.Web.HttpWriter?displayProperty=nameWithType>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>, <xref:System.IO.StreamWriter?displayProperty=nameWithType>und <xref:System.IO.StringWriter?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Text.StringBuilder?displayProperty=nameWithType> Objekt erstellt, das zum Erstellen einer neuen <xref:System.IO.StringWriter?displayProperty=nameWithType>verwendet wird. Der <xref:System.IO.StringWriter> wird an die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode und die resultierende Zeichenfolge im Konsolenfenster ausgegeben.  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string -&gt; unit" Usage="dataSet.WriteXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Name der Datei, in die geschrieben werden soll, einschließlich des Pfades.</param>
        <summary>Schreibt die <see cref="T:System.Data.DataSet" />-Struktur als XML-Schema in eine Datei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode, um das Schema für eine <xref:System.Data.DataSet> in ein XML-Dokument zu schreiben. Das Schema umfasst Tabellen-, Beziehungs-und Einschränkungs Definitionen. Verwenden Sie die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode, um ein Schema in ein XML-Dokument zu schreiben.  
  
 Das XML-Schema wird mit dem XSD-Standard geschrieben.  
  
 Verwenden Sie die <xref:System.Data.DataSet.WriteXml%2A>-Methode, um die Daten in ein XML-Dokument zu schreiben.  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> ist nicht auf <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> festgelegt.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">zum Lesen und Schreiben von Dateien. Zugehörige Enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Das <see cref="T:System.Xml.XmlWriter" />-Objekt, in das geschrieben wird.</param>
        <summary>Schreibt die <see cref="T:System.Data.DataSet" />-Struktur als XML-Schema in ein <see cref="T:System.Xml.XmlWriter" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode, um das Schema für eine <xref:System.Data.DataSet> in ein XML-Dokument zu schreiben. Das Schema umfasst Tabellen-, Beziehungs-und Einschränkungs Definitionen. Verwenden Sie die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode, um ein Schema in ein XML-Dokument zu schreiben.  
  
 Das XML-Schema wird mit dem XSD-Standard geschrieben.  
  
 Verwenden Sie die <xref:System.Data.DataSet.WriteXml%2A>-Methode, um die Daten in ein XML-Dokument zu schreiben.  
  
 Eine Klasse, die von der <xref:System.Xml.XmlWriter?displayProperty=nameWithType>-Klasse erbt, ist die <xref:System.Xml.XmlTextWriter>-Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein neues <xref:System.IO.FileStream?displayProperty=nameWithType>-Objekt mit dem angegebenen Pfad erstellt. Das <xref:System.IO.FileStream>-Objekt wird verwendet, um ein <xref:System.Xml.XmlTextWriter> Objekt zu erstellen. Die <xref:System.Data.DataSet.WriteXmlSchema%2A>-Methode wird dann mit dem <xref:System.Xml.XmlTextWriter> Objekt aufgerufen, um das Schema auf den Datenträger zu schreiben.  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Verwenden von Datasets in ADO.net</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (stream, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream">Ein <see cref="T:System.IO.Stream" />-Objekt, in das geschrieben werden soll.</param>
        <param name="multipleTargetConverter">Ein Delegat, der zum Konvertieren von <see cref="T:System.Type" /> in String verwendet wird.</param>
        <summary>Schreibt die <see cref="T:System.Data.DataSet" />-Struktur als XML-Schreibt in das angegebene <see cref="T:System.IO.Stream" />-Objekt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.IO.TextWriter" />-Objekt, in das geschrieben werden soll.</param>
        <param name="multipleTargetConverter">Ein Delegat, der zum Konvertieren von <see cref="T:System.Type" /> in String verwendet wird.</param>
        <summary>Schreibt die <see cref="T:System.Data.DataSet" />-Struktur als XML-Schema in den angegebenen <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (fileName, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Name der Datei, in die geschrieben werden soll.</param>
        <param name="multipleTargetConverter">Ein Delegat, der zum Konvertieren von <see cref="T:System.Type" /> in String verwendet wird.</param>
        <summary>Schreibt die <see cref="T:System.Data.DataSet" />-Struktur als XML-Schema in eine Datei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.Xml.XmlWriter" />-Objekt, in das geschrieben werden soll.</param>
        <param name="multipleTargetConverter">Ein Delegat, der zum Konvertieren von <see cref="T:System.Type" /> in String verwendet wird.</param>
        <summary>Schreibt die <see cref="T:System.Data.DataSet" />-Struktur als XML-Schema in den angegebenen <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c379d60a4885e86c9f4b5402912c49f4801096e8" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37669444" /></Metadata><TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataTableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiert die Erweiterungsmethoden der <see cref="T:System.Data.DataTable" />-Klasse. <see cref="T:System.Data.DataTableExtensions" /> ist eine statische Klasse.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.DataTable -&gt; System.Data.DataView" Usage="System.Data.DataTableExtensions.AsDataView table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="table">Die Quell-<see cref="T:System.Data.DataTable" />, aus der der LINQ-aktivierte <see cref="T:System.Data.DataView" /> erstellt wird.</param>
        <summary>Erstellt ein LINQ-aktiviertes <see cref="T:System.Data.DataView" />-Objekt und gibt es zurück.</summary>
        <returns>Ein LINQ-aktiviertes <see cref="T:System.Data.DataView" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> ermöglicht Szenarios mit Datenbindung für [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] können erstellt werden, aus einer typisierten oder nicht typisierten <xref:System.Data.DataTable>, eine Standardansicht dieser Tabelle bereitstellt. Nachdem die <xref:System.Data.DataView> auf der Grundlage einer <xref:System.Data.DataTable> erstellt wurde, können Filter- und Sortiereigenschaften für sie festgelegt werden. Die <xref:System.Data.DataView> wird dann gebunden an ein Benutzeroberflächenelement, z. B. eine <xref:System.Windows.Forms.DataGrid> oder <xref:System.Windows.Forms.DataGridView>, ein einfaches Datenbindungsmodell bereitstellen.  
  
 Weitere Informationen und Beispiele finden Sie unter [Erstellen eines DataView-Objekts](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Data.DataView> von der SalesOrderDetail-Tabelle und wird als die Datenquelle eine <xref:System.Windows.Forms.BindingSource> -Objekt, das fungiert als Proxy für ein <xref:System.Windows.Forms.DataGridView> Steuerelement:  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.EnumerableRowCollection&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataView (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.AsDataView source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">Der Typ der Objekte in der Quellsequenz, meist <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Die [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]-Quellabfrage, aus der der LINQ-aktivierte <see cref="T:System.Data.DataView" /> erstellt wird.</param>
        <summary>Erstellt ein LINQ-aktiviertes <see cref="T:System.Data.DataView" />-Objekt, das die [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)]-Abfrage darstellt, und gibt es zurück.</summary>
        <returns>Ein LINQ-aktiviertes <see cref="T:System.Data.DataView" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> ermöglicht Datenbindungsszenarien für [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] können erstellt werden, von einem [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] Abfrage. Die <xref:System.Data.DataView> die Abfrage selbst und keine Ansicht auf die Abfrage. Die neu erstellte <xref:System.Data.DataView> leitet die Filter- und Sortierinformationen von der Abfrage, die sie wurde erstellt. Die <xref:System.Data.DataView> wird dann gebunden an ein Benutzeroberflächenelement, z. B. eine <xref:System.Windows.Forms.DataGrid> oder <xref:System.Windows.Forms.DataGridView>, ein einfaches Modell für die Datenbindung bereitstellt.  
  
 Der Parameter `T` des Eingabeparameters `source` kann nur von sein <xref:System.Data.DataRow> oder ein abgeleiteter Typ von <xref:System.Data.DataRow>.  
  
 Die folgenden Abfrageoperatoren werden nur in einer Abfrage, die zum Erstellen unterstützt <xref:System.Data.DataView>:  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 Weitere Informationen und Beispiele finden Sie unter [Erstellen eines DataView-Objekts](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Data.DataView> von onlinebestellungen, die nach Gesamtbetrag sortiert:  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : System.Data.DataTable -&gt; System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;" Usage="System.Data.DataTableExtensions.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">Die Quell-<see cref="T:System.Data.DataTable" />, die als aufzählbar festgelegt werden soll.</param>
        <summary>Gibt ein <see cref="T:System.Collections.Generic.IEnumerable`1" />-Objekt zurück, bei dem der generische Parameter <paramref name="T" /> gleich <see cref="T:System.Data.DataRow" /> ist. Dieses Objekt kann in einem [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]-Ausdruck oder einer Methodenabfrage verwendet werden.</summary>
        <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />-Objekt bei dem der generische Parameter <paramref name="T" /> den Wert <see cref="T:System.Data.DataRow" /> hat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] -Abfragen arbeiten mit Datenquellen, implementieren die <xref:System.Collections.Generic.IEnumerable%601> Schnittstelle oder die <xref:System.Linq.IQueryable> Schnittstelle.  Die <xref:System.Data.DataTable> Klasse implementiert die beiden Schnittstellen, nicht, sodass Sie aufrufen müssen die <xref:System.Data.DataTableExtensions.AsEnumerable%2A> zu verwendende Methode der <xref:System.Data.DataTable> als Quelle in die `From` -Klausel einer [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] Abfrage. Sie können auch benutzerdefinierte, domänenspezifische Operatoren abrufen, wie z. B. <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>, durch Rückgabe einer <xref:System.Collections.Generic.IEnumerable%601> Objekt.  
  
 Der von zurückgegebene aufzählbare Objekt die <xref:System.Data.DataTableExtensions.AsEnumerable%2A> Methode dauerhaft gebunden ist die <xref:System.Data.DataTable> , die es erstellt wurde. Mehrere Aufrufe der <xref:System.Data.DataTableExtensions.AsEnumerable%2A> Methode werden mehrere, unabhängige abfragbare Objekte zurück sind alle an der Quelle gebunden <xref:System.Data.DataTable>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `DisplayProducts` -Methode empfängt eine "DataTable", das eine DataColumn, mit dem Namen enthält `ProductName`, extrahiert der `ProductName` Werte und gibt dann die Werte.  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Quell <see cref="T:System.Data.DataTable" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine <see cref="T:System.Data.DataTable" /> zurück, die Kopien der <see cref="T:System.Data.DataRow" />-Objekte enthält, wenn ein <see cref="T:System.Collections.Generic.IEnumerable`1" />-Eingabeobjekt vorhanden ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataTable (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">Der Typ der Objekte in der Quellsequenz, meist <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Die <see cref="T:System.Collections.Generic.IEnumerable`1" />-Quellsequenz.</param>
        <summary>Gibt eine <see cref="T:System.Data.DataTable" /> zurück, die Kopien der <see cref="T:System.Data.DataRow" />-Objekte enthält, wenn ein <see cref="T:System.Collections.Generic.IEnumerable`1" />-Eingabeobjekt vorhanden ist, bei dem der generische Parameter <paramref name="T" /> den Wert <see cref="T:System.Data.DataRow" /> hat.</summary>
        <returns>Eine <see cref="T:System.Data.DataTable" />, die die Eingabesequenz als den Typ von <see cref="T:System.Data.DataRow" />-Objekten enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Parameter `T` des Eingabeparameters `source` kann nur von sein <xref:System.Data.DataRow> oder ein abgeleiteter Typ von <xref:System.Data.DataRow>.  
  
 Die Eingabesequenz möglich <xref:System.Collections.Generic.IEnumerable%601> Quelle, nicht nur eine Abfrage oder eine Abfrage über eine <xref:System.Data.DataTable>. Beachten Sie, wenn die Quellsequenz eine Abfrage handelt, Aufrufen dieses Operators Erzwingung der sofortigen Ausführung wird. Auflisten der Quellsequenz kann auch die Ausnahmen verursachen.  
  
 Das Schema der Zieltabelle basiert darauf, dass das Schema des ersten <xref:System.Data.DataRow> Zeile in der Quellsequenz. Extrahiert die Metadaten der Tabelle aus der <xref:System.Data.DataRow> Metadaten und die Werte, auf die Spaltenwerte die <xref:System.Data.DataRow>. Für ein typisiertes <xref:System.Data.DataTable>, Typen werden nicht beibehalten. Die Daten- und Schemadateien übertragen werden, aber die resultierenden Zeilen in der Ausgabetabelle werden nicht der typisierten <xref:System.Data.DataRow> Typ. Die <xref:System.Data.DataRow.RowState%2A> und <xref:System.Data.DataRow.RowError%2A> Eigenschaften werden nicht beibehalten, während des Kopiervorgangs aus der Quelle <xref:System.Data.DataRow> auf das zurückgegebene <xref:System.Data.DataTable>.  
  
 Wenn eine **null** Verweis- oder nullable-Typ mit einem Wert von **null** befindet sich in einer Datenquelle <xref:System.Data.DataRow>, ersetzt diese Methode den Wert im Ziel <xref:System.Data.DataTable> mit einem Wert von <xref:System.DBNull.Value>.  
  
 Die generierte Tabelle, die von der Methode zurückgegebenen hat es sich um den Standardnamen für die Tabelle. Wenn Sie benennen möchten die <xref:System.Data.DataTable>, fügen Sie ihn auf eine <xref:System.Data.DataSet>, oder führen Sie alle anderen <xref:System.Data.DataTable> bestimmter Vorgang müssen Sie dazu nach dem in der Tabelle erstellt und zurückgegeben wird.  
  
 Weitere Informationen finden Sie unter [Erstellen einer DataTable aus einer Abfrage](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
   
  
## Examples  
 Im folgenden Beispiel fragt die Tabelle "SalesOrderHeader" für Aufträge, die nach dem 8. August 2001 und verwendet die <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> Methode zum Erstellen einer <xref:System.Data.DataTable> aus dieser Abfrage. Die <xref:System.Data.DataTable> wird dann an eine <xref:System.Windows.Forms.BindingSource> gebunden, die als Proxy für eine <xref:System.Windows.Forms.DataGridView> fungiert.  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die <see cref="T:System.Collections.Generic.IEnumerable`1" />-Quellsequenz ist <see langword="null" />, und es kann keine neue Tabelle erstellt werden.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Data.DataRow" /> in der Quellsequenz hat einen Zustand von <see cref="F:System.Data.DataRowState.Deleted" />.  
  
Die Quellsequenz enthält keine <see cref="T:System.Data.DataRow" />-Objekte.  
  
Eine <see cref="T:System.Data.DataRow" /> in der Quellsequenz ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">Der Typ der Objekte in der Quellsequenz, meist <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Die <see cref="T:System.Collections.Generic.IEnumerable`1" />-Quellsequenz.</param>
        <param name="table">Der Ziel-<see cref="T:System.Data.DataTable" />.</param>
        <param name="options">Eine <see cref="T:System.Data.LoadOption" />-Enumeration, die die <see cref="T:System.Data.DataTable" />-Ladeoptionen angibt.</param>
        <summary>Kopiert <see cref="T:System.Data.DataRow" />-Objekte in die angegebene <see cref="T:System.Data.DataTable" />, bei einem <see cref="T:System.Collections.Generic.IEnumerable`1" />-Eingabeobjekt, bei dem der generische Parameter <paramref name="T" /> den Wert <see cref="T:System.Data.DataRow" /> aufweist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Parameter `T` des Eingabeparameters `source` kann nur von sein <xref:System.Data.DataRow>, oder ein abgeleiteter Typ von <xref:System.Data.DataRow>.  
  
 Die Eingabesequenz möglich <xref:System.Collections.Generic.IEnumerable%601> Quelle, nicht nur eine Abfrage über eine <xref:System.Data.DataTable>. Beachten Sie, wenn die Quellsequenz eine Abfrage handelt, Aufrufen dieses Operators Erzwingung der sofortigen Ausführung wird. Auflisten der Quellsequenz kann auch die Ausnahmen verursachen.  
  
 Das Schema der Zieltabelle basiert darauf, dass das Schema des ersten <xref:System.Data.DataRow> Zeile in der Quellsequenz. Extrahiert die Metadaten der Tabelle aus der <xref:System.Data.DataRow> Metadaten und die Werte, auf die Spaltenwerte die <xref:System.Data.DataRow>. Für ein typisiertes <xref:System.Data.DataTable>, Typen werden nicht beibehalten. Die Daten- und Schemadateien übertragen werden, aber die resultierenden Zeilen in der Ausgabetabelle werden nicht der typisierten <xref:System.Data.DataRow> Typ. Die <xref:System.Data.DataRow.RowState%2A> und <xref:System.Data.DataRow.RowError%2A> Eigenschaften werden nicht beibehalten, während des Kopiervorgangs aus der Quelle <xref:System.Data.DataRow> auf das zurückgegebene <xref:System.Data.DataTable>.  
  
 Wenn eine **null** Verweis- oder nullable-Typ mit einem Wert von **null** befindet sich in einer Datenquelle <xref:System.Data.DataRow>, ersetzt diese Methode den Wert im Ziel <xref:System.Data.DataTable> mit einem Wert von <xref:System.DBNull.Value>.  
  
 Die generierte Tabelle, die von der Methode zurückgegebenen hat es sich um den Standardnamen für die Tabelle. Wenn Sie benennen möchten die <xref:System.Data.DataTable>, fügen Sie ihn auf eine <xref:System.Data.DataSet>, oder führen Sie alle anderen <xref:System.Data.DataTable> bestimmter Vorgang müssen Sie dazu nach dem in der Tabelle erstellt und zurückgegeben wird.  
  
 Weitere Informationen finden Sie unter [Erstellen einer DataTable aus einer Abfrage](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die kopierten <see cref="T:System.Data.DataRow" />-Objekte stimmen nicht mit dem Schema der Ziel-<see cref="T:System.Data.DataTable" /> überein.</exception>
        <exception cref="T:System.ArgumentNullException">Die <see cref="T:System.Collections.Generic.IEnumerable`1" />-Quellsequenz ist <see langword="null" />, oder die Ziel-<see cref="T:System.Data.DataTable" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Data.DataRow" /> in der Quellsequenz hat einen Zustand von <see cref="F:System.Data.DataRowState.Deleted" />.  
  
Die Quellsequenz enthält keine <see cref="T:System.Data.DataRow" />-Objekte.  
  
Eine <see cref="T:System.Data.DataRow" /> in der Quellsequenz ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">Der Typ der Objekte in der Quellsequenz, meist <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Die <see cref="T:System.Collections.Generic.IEnumerable`1" />-Quellsequenz.</param>
        <param name="table">Der Ziel-<see cref="T:System.Data.DataTable" />.</param>
        <param name="options">Eine <see cref="T:System.Data.LoadOption" />-Enumeration, die die <see cref="T:System.Data.DataTable" />-Ladeoptionen angibt.</param>
        <param name="errorHandler">Ein <see cref="T:System.Data.FillErrorEventHandler" />-Delegat, der die Methode darstellt, die einen Fehler behandelt.</param>
        <summary>Kopiert <see cref="T:System.Data.DataRow" />-Objekte in die angegebene <see cref="T:System.Data.DataTable" />, bei einem <see cref="T:System.Collections.Generic.IEnumerable`1" />-Eingabeobjekt, bei dem der generische Parameter <paramref name="T" /> den Wert <see cref="T:System.Data.DataRow" /> aufweist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Parameter `T` des Eingabeparameters `source` kann nur von sein <xref:System.Data.DataRow>, oder ein abgeleiteter Typ von <xref:System.Data.DataRow>.  
  
 Die Eingabesequenz möglich <xref:System.Collections.Generic.IEnumerable%601> Quelle, nicht nur eine Abfrage über eine <xref:System.Data.DataTable>. Beachten Sie, wenn die Quellsequenz eine Abfrage handelt, Aufrufen dieses Operators Erzwingung der sofortigen Ausführung wird. Auflisten der Quellsequenz kann auch die Ausnahmen verursachen.  
  
 Das Schema der Zieltabelle basiert darauf, dass das Schema des ersten <xref:System.Data.DataRow> Zeile in der Quellsequenz. Extrahiert die Metadaten der Tabelle aus der <xref:System.Data.DataRow> Metadaten und die Werte, auf die Spaltenwerte die <xref:System.Data.DataRow>. Für ein typisiertes <xref:System.Data.DataTable>, Typen werden nicht beibehalten. Die Daten- und Schemadateien übertragen werden, aber die resultierenden Zeilen in der Ausgabetabelle werden nicht der typisierten <xref:System.Data.DataRow> Typ. Die <xref:System.Data.DataRow.RowState%2A> und <xref:System.Data.DataRow.RowError%2A> Eigenschaften werden nicht beibehalten, während des Kopiervorgangs aus der Quelle <xref:System.Data.DataRow> auf das zurückgegebene <xref:System.Data.DataTable>.  
  
 Wenn eine **null** Verweis- oder nullable-Typ mit einem Wert von **null** befindet sich in einer Datenquelle <xref:System.Data.DataRow>, ersetzt diese Methode den Wert im Ziel <xref:System.Data.DataTable> mit einem Wert von <xref:System.DBNull.Value>.  
  
 Die generierte Tabelle, die von der Methode zurückgegebenen hat es sich um den Standardnamen für die Tabelle. Wenn Sie benennen möchten die <xref:System.Data.DataTable>, fügen Sie ihn auf eine <xref:System.Data.DataSet>, oder führen Sie alle anderen <xref:System.Data.DataTable> bestimmter Vorgang müssen Sie dazu nach dem in der Tabelle erstellt und zurückgegeben wird.  
  
 Wenn eine Ausnahme während des Kopiervorgangs einer Datenzeile in die Zieltabelle, z. B. eine Einschränkung-Ausnahme ausgelöst wird die `errorHandler` Delegat wird aufgerufen. Ein <xref:System.Data.FillErrorEventArgs> übergeben wird, um die `errorHandler` delegieren, die mit den folgenden Werten:  
  
-   Die <xref:System.Data.FillErrorEventArgs.Values%2A> -Eigenschaftensatz auf eine Kopie der Quelldaten.  
  
-   Die <xref:System.Data.FillErrorEventArgs.DataTable%2A> -Eigenschaftensatz auf das Ziel <xref:System.Data.DataTable>.  
  
-   Die <xref:System.Data.FillErrorEventArgs.Errors%2A> -Eigenschaftensatz auf die abgefangene Ausnahme.  
  
 Die <xref:System.Data.FillErrorEventArgs.Continue%2A> -Eigenschaft schreibgeschützt ist, nachdem der Delegataufruf zurückgegeben. Wenn die <xref:System.Data.FillErrorEventArgs.Continue%2A> Eigenschaft `true`, weiterhin die Quellsequenz aufgelistet und in die Datentabelle geladen werden. Wenn die <xref:System.Data.FillErrorEventArgs.Continue%2A> Eigenschaft `false`, die ursprüngliche Ausnahme wird ausgelöst, von der <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> Methode.  
  
 Weitere Informationen finden Sie unter [Erstellen einer DataTable aus einer Abfrage](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die kopierten <see cref="T:System.Data.DataRow" />-Objekte stimmen nicht mit dem Schema der Ziel-<see cref="T:System.Data.DataTable" /> überein.</exception>
        <exception cref="T:System.ArgumentNullException">Die <see cref="T:System.Collections.Generic.IEnumerable`1" />-Quellsequenz ist <see langword="null" />, oder die Ziel-<see cref="T:System.Data.DataTable" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Data.DataRow" /> in der Quellsequenz hat einen Zustand von <see cref="F:System.Data.DataRowState.Deleted" />.  
  
- oder -  
Die Quellsequenz enthält keine <see cref="T:System.Data.DataRow" />-Objekte.  
  
- oder -  
Eine <see cref="T:System.Data.DataRow" /> in der Quellsequenz ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="abc8731decbf6a78c3573629edbf62dc174aa5bc" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83925346" /></Metadata><TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht einem Objekt das Implementieren eines DataAdapter und stellt eine Gruppe von Methoden und zuordnungsbezogenen Eigenschaften dar, mit denen ein <see cref="T:System.Data.DataSet" /> gefüllt und aktualisiert sowie eine Datenquelle aktualisiert wird.  
  
 <see cref="T:System.Data.IDbDataAdapter" />-Instanzen gelten für Datenquellen, die relationale Datenbanken mit Textbefehlen (wie Transact-SQL) sind (oder ihnen ähneln), während <see cref="T:System.Data.IDataAdapter" />-Instanzen jeden Datenquelltyp verwenden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Data.IDataAdapter> Schnittstelle ermöglicht es einer erbenden Klasse, eine DataAdapter-Klasse zu implementieren, die die Bridge zwischen einer Datenquelle und einem darstellt <xref:System.Data.DataSet> . Weitere Informationen zu DataAdapter-Klassen finden Sie unter Auffüllen [eines Datasets aus einem DataAdapter](/dotnet/framework/data/adonet/populating-a-dataset-from-a-dataadapter).  
  
 Eine Anwendung erstellt nicht direkt eine Instanz der <xref:System.Data.IDataAdapter> Schnittstelle, sondern implementiert eine Instanz einer Klasse, die erbt <xref:System.Data.IDataAdapter> .  
  
 Klassen, die Erben <xref:System.Data.IDataAdapter> , müssen die geerbten Member implementieren, und Sie definieren in der Regel zusätzliche Member, um anbieterspezifische Funktionen hinzuzufügen. Die- <xref:System.Data.IDataAdapter> Schnittstelle definiert z <xref:System.Data.IDataAdapter.Fill%2A> . b. eine Methode, die einen <xref:System.Data.DataSet> als Parameter annimmt. Wiederum <xref:System.Data.OleDb.OleDbDataAdapter> erbt die-Klasse die <xref:System.Data.Common.DbDataAdapter.Fill%2A> -Methode und definiert außerdem zwei zusätzliche über Ladungen der- <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> Methode, die ein ADO-Recordset-Objekt als Parameter annehmen.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die abgeleiteten Klassen,, <xref:System.Data.SqlClient.SqlCommand> <xref:System.Data.SqlClient.SqlDataAdapter> und verwendet <xref:System.Data.SqlClient.SqlConnection> , um Datensätze aus einer Datenbank auszuwählen. Der ausgefüllte <xref:System.Data.DataSet> wird dann zurückgegeben. Zu diesem Zweck wird der Methode eine initialisierte <xref:System.Data.DataSet> , eine Verbindungs Zeichenfolge und eine Abfrage Zeichenfolge, die eine Transact-SQL-SELECT-Anweisung ist, übermittelt.  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Um die Konsistenz zwischen .NET Framework Datenanbietern zu fördern, benennen Sie die erbende Klasse in der Form <paramref name="Prv" /> DataAdapter, wobei <paramref name="Prv" /> das einheitliche Präfix ist, das für alle Klassen in einem bestimmten .NET Framework Datenanbieter-Namespace angegeben wird. Beispielsweise <paramref name="Sql" /> ist das Präfix der- <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> Klasse im- <see langword="System.Data.SqlClient" /> Namespace.  
  
Wenn Sie von der- <see cref="T:System.Data.IDataAdapter" /> Schnittstelle erben, sollten Sie die folgenden Konstruktoren implementieren: 
 <list type="table"><listheader><term> Element 
 </term><description> Beschreibung 
 </description></listheader><item><term> PrvDataAdapter () 
 </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse.  
  
 </description></item><item><term> PrvDataAdapter (PrvCommand SelectCommand) 
 </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse, indem die angegebene SQL SELECT-Anweisung verwendet wird.  
  
 </description></item><item><term> PrvDataAdapter (String selectCommandText, String selectConnectionString) 
 </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse mit einer SQL-SELECT-Anweisung und einer Verbindungs Zeichenfolge.  
  
 </description></item><item><term> PrvDataAdapter (String selectCommandText, PrvConnection selectconnection) 
 </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse mit einer SQL-SELECT-Anweisung und einem PrvConnection-Objekt.  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (dataSet As DataSet) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <summary>Fügt dem <see cref="T:System.Data.DataSet" /> unter Verwendung des <see cref="T:System.Data.DataSet" />-Namens Zeilen hinzu bzw. aktualisiert diese, um eine Übereinstimmung mit den Zeilen in der Datenquelle zu erzielen, und erstellt eine <see cref="T:System.Data.DataTable" /> mit der Bezeichnung "Table".</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A>Ruft Zeilen aus der Datenquelle mithilfe der SELECT-Anweisung ab, die von einer zugeordneten Eigenschaft angegeben wird <xref:System.Data.IDbDataAdapter.SelectCommand%2A> . Das Verbindungs Objekt, das der SELECT-Anweisung zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die Verbindung geschlossen wird <xref:System.Data.IDataAdapter.Fill%2A> , bevor aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist <xref:System.Data.IDataAdapter.Fill%2A> , bevor aufgerufen wird, bleibt Sie geöffnet.  
  
 Der- <xref:System.Data.IDataAdapter.Fill%2A> Vorgang fügt dann die Zeilen zu den Ziel <xref:System.Data.DataTable> Objekten in hinzu <xref:System.Data.DataSet> und erstellt die <xref:System.Data.DataTable> Objekte, wenn Sie nicht bereits vorhanden sind. Beim Erstellen von <xref:System.Data.DataTable> Objekten <xref:System.Data.IDataAdapter.Fill%2A> erstellt der Vorgang in der Regel nur Spaltennamen Metadaten. Wenn die- <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> Eigenschaft jedoch auf festgelegt ist `AddWithKey` , werden auch die entsprechenden Primärschlüssel und Einschränkungen erstellt.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A> -Wert für die resultierende <xref:System.Data.DataTable>festgelegt. Sie müssen den Primärschlüssel explizit definieren, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Definieren von primär Schlüsseln](/dotnet/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys).  
  
 Wenn beim Auffüllen von doppelte Spalten gefunden werden, werden die <xref:System.Data.IDataAdapter> <xref:System.Data.DataTable> Namen für die aufeinander folgenden Spalten mit dem Muster "columnname1", "columnname2", "columnname3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden Sie <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. in eingefügt. Wenn der mehrere Resultsets hinzugefügt werden <xref:System.Data.DataSet> , wird jedes Resultset in einer separaten Tabelle abgelegt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Anwendungen sollten bei der Verwendung von Spalten-und Tabellennamen Vorsicht walten lassen, um sicherzustellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 Wenn die SELECT-Anweisung, die zum Auffüllen von verwendet wird <xref:System.Data.DataSet> , mehrere Ergebnisse zurückgibt, wie z. b. eine Batch-SQL-Anweisung, werden alle nachfolgenden Ergebnisse übersprungen und der nicht hinzugefügt <xref:System.Data.DataSet> .  
  
 Die-Methode kann mehrmals <xref:System.Data.IDataAdapter.Fill%2A> auf demselben verwendet werden <xref:System.Data.DataTable> . Wenn ein Primärschlüssel vorhanden ist, werden eingehende Zeilen mit übereinstimmenden Zeilen zusammengeführt, die bereits vorhanden sind. Wenn kein Primärschlüssel vorhanden ist, werden eingehende Zeilen an das angefügt <xref:System.Data.DataTable> .  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, ruft die Implementierung von <xref:System.Data.IDataAdapter.Fill%2A> und <xref:System.Data.IDataAdapter.FillSchema%2A> für einen .NET Framework-Datenanbieter Schema Informationen nur für das erste Ergebnis ab.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="VB.NET" Value="Public Function FillSchema (dataSet As DataSet, schemaType As SchemaType) As DataTable()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">Die <see cref="T:System.Data.DataSet" />, die mit dem Schema aus der Datenquelle gefüllt werden soll.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte.</param>
        <summary>Fügt eine <see cref="T:System.Data.DataTable" /> namens „Tabelle“ zum angegebenen <see cref="T:System.Data.DataSet" /> hinzu und konfiguriert das Schema auf der Grundlage des angegebenen <see cref="T:System.Data.SchemaType" /> so, dass es mit dem Schema in der Datenquelle übereinstimmt.</summary>
        <returns>Ein Array von <see cref="T:System.Data.DataTable" />-Objekten, die aus der Datenquelle zurückgegebene Schemainformationen enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Data.IDataAdapter.FillSchema%2A> Methode ruft das Schema mithilfe von aus der Datenquelle ab <xref:System.Data.IDbDataAdapter.SelectCommand%2A> . Das Verbindungs Objekt, das zugeordnet <xref:System.Data.IDbDataAdapter.SelectCommand%2A> ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die Verbindung geschlossen wird <xref:System.Data.IDataAdapter.FillSchema%2A> , bevor aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist <xref:System.Data.IDataAdapter.FillSchema%2A> , bevor aufgerufen wird, bleibt Sie geöffnet.  
  
 Ein- <xref:System.Data.IDataAdapter.FillSchema%2A> Vorgang fügt <xref:System.Data.DataTable> dem Ziel einen hinzu <xref:System.Data.DataSet> . Anschließend werden der von Spalten hinzugefügt, <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable> und die folgenden <xref:System.Data.DataColumn> Eigenschaften werden konfiguriert, wenn Sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A> Sie müssen <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separat festlegen.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A>konfiguriert auch die <xref:System.Data.DataTable.PrimaryKey%2A> Eigenschaften und <xref:System.Data.DataTable.Constraints%2A> gemäß den folgenden Regeln:  
  
-   Wenn eine oder mehrere Primärschlüssel Spalten von zurückgegeben werden <xref:System.Data.IDbDataAdapter.SelectCommand%2A> , werden diese als Primärschlüssel Spalten für das verwendet <xref:System.Data.DataTable> .  
  
-   Wenn keine Primärschlüssel Spalten zurückgegeben werden, aber eindeutige Spalten sind, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn für alle eindeutigen Spalten keine NULL-Werte zulässig sind. Wenn eine der Spalten NULL-Werte zulässt, <xref:System.Data.UniqueConstraint> wird ein hinzugefügt <xref:System.Data.ConstraintCollection> , aber die- <xref:System.Data.DataTable.PrimaryKey%2A> Eigenschaft ist nicht festgelegt.  
  
-   Wenn sowohl Primärschlüssel Spalten als auch eindeutige Spalten zurückgegeben werden, werden die Primärschlüssel Spalten als Primärschlüssel Spalten für das verwendet <xref:System.Data.DataTable> .  
  
 Beachten Sie, dass Primärschlüssel und UNIQUE-Einschränkungen <xref:System.Data.ConstraintCollection> gemäß den vorherigen Regeln zu hinzugefügt werden, andere Einschränkungs Typen jedoch nicht hinzugefügt werden.  
  
 Wenn ein eindeutiger gruppierter Index für eine Spalte oder Spalten in einer SQL Server Tabelle definiert ist und die PRIMARY KEY-Einschränkung für einen separaten Satz von Spalten definiert ist, werden die Namen der Spalten im gruppierten Index zurückgegeben. Um die Namen oder Namen der Primärschlüssel Spalten zurückzugeben, verwenden Sie einen Abfrage Hinweis mit der SELECT-Anweisung, die den Namen des Primärschlüssel Indexes angibt. Weitere Informationen zum Angeben von Abfrage hinweisen finden Sie unter [Hinweise (Transact-SQL)-Query](/sql/t-sql/queries/hints-transact-sql-query).  
  
 Wenn beim Auffüllen von doppelte Spalten gefunden werden, werden die <xref:System.Data.IDataAdapter> <xref:System.Data.DataTable> Namen für die aufeinander folgenden Spalten mit dem Muster "columnname1", "columnname2", "columnname3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden Sie <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. in eingefügt. Wenn der mehrere Resultsets hinzugefügt werden <xref:System.Data.DataSet> , wird jedes Resultset in einer separaten Tabelle abgelegt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Anwendungen sollten bei der Verwendung von Spalten-und Tabellennamen Vorsicht walten lassen, um sicherzustellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A>gibt keine Zeilen zurück. Verwenden Sie die- <xref:System.Data.IDataAdapter.Fill%2A> Methode, um Zeilen zu hinzuzufügen <xref:System.Data.DataTable> .  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die Parameter ab, die vom Benutzer beim Ausführen einer SQL-SELECT-Anweisung festgelegt wurden.</summary>
        <returns>Ein Array von <see cref="T:System.Data.IDataParameter" />-Objekten, das die vom Benutzer festgelegten Parameter enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp
private static void GetParameters(string connectionString)
{
    using (var conn = new SqlConnection(connectionString))
    {
        var queryString = "SELECT [CourseID],[Title],[Credits] FROM [MySchool].[dbo].[Course] WHERE [Year]=@Year AND [Credits]>=@Credits";
        var year = new SqlParameter("@Year", 2012);
        var credits = new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits");
        credits.Value = 4;
        var command = new SqlCommand(queryString, conn);
        command.Parameters.Add(year);
        command.Parameters.Add(credits);
        IDbDataAdapter mySchool = new SqlDataAdapter(command);
        IDataParameter[] parameters = mySchool.GetFillParameters();
        Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "ParameterName", "SourceColumn", "Direction", "DbType", "Value");
        foreach (IDataParameter parameter in parameters)
        {
            Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);
        }
    }
}
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, ob nicht zugeordnete Quelltabellen oder Spalten mit ihren Quellnamen zum Filtern übergeben werden, oder ob ein Fehler ausgelöst wird.</summary>
        <value>Einer der <see cref="T:System.Data.MissingMappingAction" />-Werte. Der Standardwert ist <see langword="Passthrough" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.IDataAdapter.TableMappings%2A> -Eigenschaft stellt die Master Zuordnung zwischen den zurückgegebenen Datensätzen und der bereit <xref:System.Data.DataSet> .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der festgelegte Wert ist keiner der <see cref="T:System.Data.MissingMappingAction" />-Werte.</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, ob fehlende Quelltabellen, Spalten und ihre Beziehungen dem Datasetschema hinzugefügt oder ignoriert werden, oder ob ein Fehler ausgelöst wird.</summary>
        <value>Einer der <see cref="T:System.Data.MissingSchemaAction" />-Werte. Der Standardwert ist <see langword="Add" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Der festgelegte Wert ist keiner der <see cref="T:System.Data.MissingSchemaAction" />-Werte.</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, wie eine Quelltabelle einer Datasettabelle zugeordnet wird.</summary>
        <value>Eine Auflistung, die die Masterzuordnung zwischen den zurückgegebenen Datensätzen und dem <see cref="T:System.Data.DataSet" /> bereitstellt. Der Standardwert ist eine leere Auflistung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter>Verwendet nur die Zuordnungen für die Quell Tabelle mit dem Namen "Table". Alle SELECT-, INSERT-, DELETE-und Update-Anweisungen, die Daten zurückgeben, müssen dies mithilfe der konsistenten Spalten Benennung tun Die in den Datensätzen zurückgegebenen Spaltennamen müssen eindeutig sein, andernfalls überschreiben Spalten mit doppelten Namen vorherige Daten. Bei <xref:System.Data.IDataAdapter.Update%2A> werden die Änderungen nur für die Tabelle, die der Quell Tabelle mit dem Namen "Table" zugeordnet ist, ausgeglichen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataSet As DataSet) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Die <see cref="T:System.Data.DataSet" />, mit der die Datenquelle aktualisiert wird.</param>
        <summary>Ruft für jede Zeile im angegebenen <see cref="T:System.Data.DataSet" /> einer <see cref="T:System.Data.DataTable" /> mit dem Namen "Table", die eingefügt, aktualisiert oder gelöscht wird, die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung auf.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung die- <xref:System.Data.IDataAdapter.Update%2A> Methode aufruft, wird die <xref:System.Data.IDataAdapter> <xref:System.Data.DataRow.RowState%2A> -Eigenschaft von überprüft, und die erforderlichen INSERT-, Update-oder DELETE-Anweisungen werden iterativ für jede Zeile ausgeführt, basierend auf der Reihenfolge der im konfigurierten Indizes <xref:System.Data.DataSet> . Beispielsweise <xref:System.Data.IDataAdapter.Update%2A> kann eine DELETE-Anweisung, gefolgt von einer INSERT-Anweisung, und dann eine weitere DELETE-Anweisung ausführen, aufgrund der Reihenfolge der Zeilen im <xref:System.Data.DataTable> .  
  
 Beachten Sie, dass diese Anweisungen nicht als Batch Prozess ausgeführt werden. jede Zeile wird einzeln aktualisiert. Eine Anwendung kann die-Methode aufzurufen, <xref:System.Data.DataSet.GetChanges%2A> Wenn Sie die Reihenfolge der Anweisungstypen steuern müssen (z. b. vor Updates einfügen). Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit DataAdapters](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters).  
  
 Wenn INSERT-, Update-oder DELETE-Anweisungen nicht angegeben wurden, <xref:System.Data.Common.DataAdapter.Update%2A> generiert die Methode eine Ausnahme. Sie können jedoch ein- <xref:System.Data.SqlClient.SqlCommandBuilder> oder- <xref:System.Data.OleDb.OleDbCommandBuilder> Objekt zum automatischen Generieren von SQL-Anweisungen für Updates mit einer einzelnen Tabelle erstellen, wenn Sie die- `SelectCommand` Eigenschaft eines .NET Framework Datenanbieters festlegen. Anschließend werden alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen, vom CommandBuilder generiert. Diese Generierungs Logik erfordert, dass Schlüssel Spalten Informationen in vorhanden sind <xref:System.Data.DataSet> . Weitere Informationen finden Sie [unter Erstellen von Befehlen mit CommandBuilder](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders).  
  
 Die- <xref:System.Data.Common.DataAdapter.Update%2A> Methode ruft Zeilen aus der Tabelle ab, die in der ersten Zuordnung aufgeführt ist, bevor ein Update durchgeführt wird. Der <xref:System.Data.Common.DataAdapter.Update%2A> aktualisiert dann die Zeile mit dem Wert der- <xref:System.Data.IDbCommand.UpdatedRowSource%2A> Eigenschaft. Alle zurückgegebenen zusätzlichen Zeilen werden ignoriert.  
  
 Nachdem alle Daten wieder in den geladen <xref:System.Data.DataSet> wurden, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> wird das-Ereignis ausgelöst, sodass der Benutzer die abgeglichen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter, die vom Befehl zurückgegeben werden, überprüfen kann. Nachdem eine Zeile erfolgreich aktualisiert wurde, werden die Änderungen an dieser Zeile akzeptiert.  
  
 Bei Verwendung <xref:System.Data.IDataAdapter.Update%2A> von lautet die Reihenfolge der Ausführung wie folgt:  
  
1.  Die Werte in <xref:System.Data.DataRow> werden in die Parameterwerte verschoben.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl wird ausgeführt.  
  
4.  Wenn der Befehl auf festgelegt ist `FirstReturnedRecord` , wird das erste zurückgegebene Ergebnis in eingefügt <xref:System.Data.DataRow> .  
  
5.  Wenn Ausgabeparameter vorhanden sind, werden diese in die eingefügt <xref:System.Data.DataRow> .  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jedem zugeordneten Befehl <xref:System.Data.IDataAdapter> ist normalerweise eine Parameter Auflistung zugeordnet. Parameter werden mithilfe der `SourceColumn` -Eigenschaft und der-Eigenschaft `SourceVersion` der-Klasse eines .NET Framework-Datenanbieters der aktuellen Zeile zugeordnet `Parameter` . `SourceColumn`verweist auf eine <xref:System.Data.DataTable> Spalte, auf die von verwiesen wird, <xref:System.Data.IDataAdapter> um Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn`verweist auf den Namen der nicht zugeordneten Spalte, bevor Tabellen Zuordnungen angewendet wurden. Wenn `SourceColumn` auf eine nicht vorhandene Spalte verweist, hängt die ausgeführte Aktion von einem der folgenden <xref:System.Data.MissingMappingAction> Werte ab.  
  
|Enumerationswert|Ausgeführte Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Quell Spaltennamen und Tabellennamen in der, <xref:System.Data.DataSet> Wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Eine <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt werden, wird eine fehlende Zuordnung für einen Eingabeparameter in der Regel durch einen Fehler verursacht.|  
|`MissingMappingAction.Error`|Eine <xref:System.SystemException> wird generiert.|  
  
 Die- `SourceColumn` Eigenschaft wird auch verwendet, um den Wert für die Ausgabe-oder Eingabe-/Ausgabeparameter wieder dem zuzuordnen `DataSet` . Eine Ausnahme wird generiert, wenn Sie auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion` -Eigenschaft der-Klasse eines .NET Framework Datenanbieters `Parameter` bestimmt, ob die- `Original` ,-oder- `Current` `Proposed` Version des Spaltenwerts verwendet werden soll. Diese Funktion wird häufig verwendet, um ursprüngliche Werte in die WHERE-Klausel einer Update-Anweisung einzuschließen, um auf Verletzungen der vollständigen Parallelität zu prüfen.  
  
> [!NOTE]
>  Wenn beim Aktualisieren einer Zeile ein Fehler auftritt, wird eine Ausnahme ausgelöst, und die Ausführung des Updates wird nicht mehr unterstützt. Um den Aktualisierungs Vorgang fortzusetzen, ohne beim Auftreten eines Fehlers Ausnahmen zu erzeugen, legen Sie die- <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Eigenschaft auf fest, `true` bevor Sie aufrufen <xref:System.Data.Common.DbDataAdapter.Update%2A> . Im Fall eines DataAdapter können Sie auch zeilenweise auf Fehler reagieren `RowUpdated` . Wenn Sie den Aktualisierungs Vorgang fortsetzen möchten, ohne eine Ausnahme innerhalb des `RowUpdated` Ereignisses zu erzeugen, legen Sie die- <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> Eigenschaft von <xref:System.Data.Common.RowUpdatedEventArgs> auf fest <xref:System.Data.UpdateStatus.Continue> .  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse, <xref:System.Data.OleDb.OleDbDataAdapter> , für <xref:System.Data.Common.DataAdapter.Update%2A> die Datenquelle verwendet. In diesem Beispiel wird davon ausgegangen, dass Sie eine <xref:System.Data.OleDb.OleDbDataAdapter> und eine erstellt haben <xref:System.Data.DataSet> .  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

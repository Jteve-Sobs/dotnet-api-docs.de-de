<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c3ba188b4aa23926c517bdb170261648720c47e6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37668914" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht einem Objekt das Implementieren eines DataAdapter und stellt eine Gruppe von Methoden und zuordnungsbezogenen Eigenschaften dar, mit denen ein <see cref="T:System.Data.DataSet" /> gefüllt und aktualisiert sowie eine Datenquelle aktualisiert wird.  
  
 <see cref="T:System.Data.IDbDataAdapter" />-Instanzen gelten für Datenquellen, die relationale Datenbanken mit Textbefehlen (wie Transact-SQL) sind (oder ihnen ähneln), während <see cref="T:System.Data.IDataAdapter" />-Instanzen jeden Datenquelltyp verwenden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.IDataAdapter> Schnittstelle ermöglicht einer erbenden Klasse zum Implementieren einer DataAdapter-Klasse, die eine Brücke zwischen einer Datenquelle darstellt und einen <xref:System.Data.DataSet>. Weitere Informationen über DataAdapter-Klassen finden Sie unter [Auffüllen eines Datasets mit einen "DataAdapter"](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).  
  
 Eine Anwendung erstellt eine Instanz der keine der <xref:System.Data.IDataAdapter> -Schnittstelle direkt, sondern implementiert Sie eine Instanz einer Klasse, die erbt <xref:System.Data.IDataAdapter>.  
  
 Klassen, die erben <xref:System.Data.IDataAdapter> die geerbten Member implementieren müssen, und in der Regel definieren, zusätzliche Member, um anbieterspezifische Funktionen hinzuzufügen. Z. B. die <xref:System.Data.IDataAdapter> Schnittstelle definiert eine <xref:System.Data.IDataAdapter.Fill%2A> Methode, eine <xref:System.Data.DataSet> als Parameter. Wiederum die <xref:System.Data.OleDb.OleDbDataAdapter> -Klasse erbt die <xref:System.Data.Common.DbDataAdapter.Fill%2A> Methode und definiert außerdem zwei zusätzliche Überladungen der <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> Methode, die ein ADO-Recordset-Objekt als Parameter annehmen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleiteten Klassen <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, und <xref:System.Data.SqlClient.SqlConnection>, um Datensätze aus einer Datenbank auszuwählen. Die ausgefüllte <xref:System.Data.DataSet> wird zurückgegeben. Zu diesem Zweck wird die Methode ein initialisiertes übergeben <xref:System.Data.DataSet>, eine Verbindungszeichenfolge, und eine Abfragezeichenfolge, die eine Transact-SQL SELECT-Anweisung ist.  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Benennen Sie die erbende Klasse in das Formular zur Förderung der Konsistenz zwischen .NET Framework-Datenanbieter <paramref name="Prv" /> DataAdapter, in denen <paramref name="Prv" /> ist das einheitliche Präfix für alle Klassen in einem bestimmten .NET Framework Data Provider-Namespace. Z. B. <paramref name="Sql" /> ist das Präfix der der <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> -Klasse in der <see langword="System.Data.SqlClient" /> Namespace.  Beim Erben von der <see cref="T:System.Data.IDataAdapter" /> -Schnittstelle, implementieren Sie die folgenden Konstruktoren: <list type="table"><listheader><term> Element </term><description> Beschreibung </description></listheader><item><term> PrvDataAdapter() </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse.  </description></item><item><term> PrvDataAdapter (PrvCommand SelectCommand) </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse unter Verwendung der angegebenen SQL-SELECT-Anweisung.  </description></item><item><term> PrvDataAdapter (SelectCommandText der Zeichenfolge, Zeichenfolge SelectConnectionString) </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse unter Verwendung einer SQL SELECT-Anweisung und eine Verbindungszeichenfolge.  </description></item><item><term> PrvDataAdapter (Zeichenfolge SelectCommandText, PrvConnection SelectConnection) </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse unter Verwendung einer SQL SELECT-Anweisung und einem PrvConnection-Objekt.  </description></item></list></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <summary>Fügt dem <see cref="T:System.Data.DataSet" /> unter Verwendung des <see cref="T:System.Data.DataSet" />-Namens Zeilen hinzu bzw. aktualisiert diese, um eine Übereinstimmung mit den Zeilen in der Datenquelle zu erzielen, und erstellt eine <see cref="T:System.Data.DataTable" /> mit der Bezeichnung "Table".</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A> Ruft Zeilen aus der Datenquelle mithilfe der SELECT-Anweisung angegeben, die von einem zugeordneten <xref:System.Data.IDbDataAdapter.SelectCommand%2A> Eigenschaft. Das Verbindungsobjekt, das mit der SELECT-Anweisung verknüpft ist, muss gültig sein, aber es muss nicht geöffnet werden. Wenn die Verbindung geschlossen wird, bevor Sie <xref:System.Data.IDataAdapter.Fill%2A> wird aufgerufen, es wird geöffnet, um Daten abzurufen und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.IDataAdapter.Fill%2A> ist aufgerufen wird, bleibt es geöffnet.  
  
 Die <xref:System.Data.IDataAdapter.Fill%2A> Vorgang dann fügt die Zeilen, in Ziel <xref:System.Data.DataTable> Objekte in der <xref:System.Data.DataSet>, wodurch die <xref:System.Data.DataTable> Objekte an, wenn sie nicht bereits vorhanden sind. Beim Erstellen von <xref:System.Data.DataTable> Objekte, die <xref:System.Data.IDataAdapter.Fill%2A> Vorgang wird in der Regel nur Spaltennamen-Metadaten erstellt. Aber wenn die <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> -Eigenschaftensatz auf `AddWithKey`, entsprechenden primären Schlüsseln und Einschränkungen werden auch erstellt.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A>-Wert für die resultierende <xref:System.Data.DataTable> festgelegt. Sie müssen explizit definieren, dass den Primärschlüssel, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Definieren von Primärschlüsseln](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Wenn die <xref:System.Data.IDataAdapter> auf trifft doppelte Spalten beim Auffüllen einer <xref:System.Data.DataTable>, generiert er Namen für die aufeinander folgenden Spalten, die mit dem Muster "columnname1", "columnname2", "Spaltenname3" und So weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, sind dazu der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" und So weiter. Wenn mehrere Resultsets hinzugefügt werden, um die <xref:System.Data.DataSet>, wird jedes Resultset in einer separaten Tabelle eingefügt. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf dem angegebenen Tabellennamen (beispielsweise "Table", "Table1", "Table2" und So weiter). Anwendungen sollten Vorsicht verwenden, wenn Sie Spalten- und Tabellennamen zu verwenden, um sicherzustellen, dass verursacht einen Konflikt mit dem folgenden Benennungsmuster nicht erfolgen.  
  
 Bei der SELECT-Anweisung, die zum Auffüllen verwendet wird die <xref:System.Data.DataSet> mehrere Ergebnisse zurückgibt, wie z. B. einen Batch SQL-Anweisung, wenn eines der Ergebnisse einen Fehler enthält alle aufeinander folgenden Ergebnisse werden übersprungen, und nicht hinzugefügt, die <xref:System.Data.DataSet>.  
  
 Sie können die <xref:System.Data.IDataAdapter.Fill%2A> -Methode mehrere Male auf der gleichen <xref:System.Data.DataTable>. Wenn ein Primärschlüssel vorhanden ist, werden die eingehende Zeilen mit übereinstimmenden Zeilen zusammengeführt, die bereits vorhanden. Wenn kein Primärschlüssel vorhanden ist, werden eingehende Zeilen an angehängt der <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Bei der Behandlung von SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.IDataAdapter.Fill%2A> und <xref:System.Data.IDataAdapter.FillSchema%2A> für eine .NET Framework Anbieter abruft, die Schemainformationen für nur das erste Ergebnis.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">Die mit dem Schema aus der Datenquelle zu füllende <see cref="T:System.Data.DataSet" />.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte.</param>
        <summary>Fügt dem angegebenen <see cref="T:System.Data.DataTable" /> eine <see cref="T:System.Data.DataSet" /> mit dem Namen "Table" hinzu und konfiguriert das Schema anhand des angegebenen <see cref="T:System.Data.SchemaType" /> so, dass es dem Schema in der Datenquelle entspricht.</summary>
        <returns>Ein Array von <see cref="T:System.Data.DataTable" />-Objekten, die aus der Datenquelle zurückgegebene Schemainformationen enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.IDataAdapter.FillSchema%2A> Methode ruft das Schema ab, aus der Datenquelle mit dem <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. Das Verbindungsobjekt zugeordnet der <xref:System.Data.IDbDataAdapter.SelectCommand%2A> müssen gültig sein, aber es muss nicht geöffnet werden. Wenn die Verbindung geschlossen wird, bevor Sie <xref:System.Data.IDataAdapter.FillSchema%2A> wird aufgerufen, es wird geöffnet, um Daten abzurufen und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.IDataAdapter.FillSchema%2A> ist aufgerufen wird, bleibt es geöffnet.  
  
 Ein <xref:System.Data.IDataAdapter.FillSchema%2A> -Vorgang fügt einem <xref:System.Data.DataTable> an das Ziel <xref:System.Data.DataSet>. Es fügt dann die Spalten der <xref:System.Data.DataColumnCollection> von der <xref:System.Data.DataTable> und konfiguriert die folgenden <xref:System.Data.DataColumn> -Eigenschaften fest, wenn sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A> Sie müssen festlegen, <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> getrennt.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> Außerdem konfiguriert der <xref:System.Data.DataTable.PrimaryKey%2A> und <xref:System.Data.DataTable.Constraints%2A> Eigenschaften gemäß den folgenden Regeln:  
  
-   Wenn eine oder mehrere Primärschlüsselspalten von zurückgegeben werden die <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, sie werden verwendet, als die Primärschlüsselspalten für die <xref:System.Data.DataTable>.  
  
-   Wenn keine Primärschlüsselspalten werden zurückgegeben, aber eindeutigen Spalten, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn alle eindeutigen Spalten-NULL sind. Wenn eine der Spalten NULL-Werte zulässt, ist eine <xref:System.Data.UniqueConstraint> hinzugefügt wird die <xref:System.Data.ConstraintCollection>, aber die <xref:System.Data.DataTable.PrimaryKey%2A> Eigenschaft nicht festgelegt.  
  
-   Wenn sowohl die Primärschlüsselspalten als auch die eindeutige Spalten zurückgegeben werden, dienen als die Primärschlüsselspalten für die Primärschlüsselspalten der <xref:System.Data.DataTable>.  
  
 Beachten Sie, dass es sich bei Primärschlüsseln und unique-Einschränkungen, um hinzugefügt werden die <xref:System.Data.ConstraintCollection> gemäß der oben genannten Regeln, aber andere Einschränkung Typen nicht hinzugefügt werden.  
  
 Wenn Sie einen eindeutigen gruppierten Index für eine Spalte oder Spalten in einer SQL Server-Tabelle definiert ist, und primary Key-Einschränkung für einen separaten Satz von Spalten definiert ist, und klicken Sie dann den Namen der Spalten im gruppierten Index zurückgegeben werden. Um den Namen oder die Namen der Primärschlüsselspalten zurückzugeben, verwenden Sie eines Abfragehinweises mit der SELECT-Anweisung, die den Namen der der Index des primären Schlüssels angibt. Weitere Informationen zur Vorgehensweise beim Angeben von Abfragehinweisen finden Sie unter [Abfragehinweis (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Wenn die <xref:System.Data.IDataAdapter> auf trifft doppelte Spalten beim Auffüllen einer <xref:System.Data.DataTable>, generiert er Namen für die aufeinander folgenden Spalten, die mit dem Muster "columnname1", "columnname2", "Spaltenname3" und So weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, sind dazu der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" und So weiter. Wenn mehrere Resultsets hinzugefügt werden, um die <xref:System.Data.DataSet>, wird jedes Resultset in einer separaten Tabelle eingefügt. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf dem angegebenen Tabellennamen (beispielsweise "Table", "Table1", "Table2" und So weiter). Anwendungen sollten Vorsicht verwenden, wenn Sie Spalten- und Tabellennamen zu verwenden, um sicherzustellen, dass verursacht einen Konflikt mit dem folgenden Benennungsmuster nicht erfolgen.  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> gibt keine Zeilen zurück. Verwenden der <xref:System.Data.IDataAdapter.Fill%2A> Methode zum Hinzufügen von Zeilen zu einer <xref:System.Data.DataTable>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die Parameter ab, die vom Benutzer beim Ausführen einer SQL-SELECT-Anweisung festgelegt wurden.</summary>
        <returns>Ein Array von <see cref="T:System.Data.IDataParameter" />-Objekten, das die vom Benutzer festgelegten Parameter enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credit]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, ob nicht zugeordnete Quelltabellen oder Spalten mit ihren Quellnamen zum Filtern übergeben werden, oder ob ein Fehler ausgelöst wird.</summary>
        <value>Einer der <see cref="T:System.Data.MissingMappingAction" />-Werte. Der Standardwert ist <see langword="Passthrough" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.IDataAdapter.TableMappings%2A> Eigenschaft enthält die masterzuordnung zwischen den zurückgegebenen Datensätzen und die <xref:System.Data.DataSet>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der festgelegte Wert ist keiner der <see cref="T:System.Data.MissingMappingAction" />-Werte.</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, ob fehlende Quelltabellen, Spalten und ihre Beziehungen dem Datasetschema hinzugefügt oder ignoriert werden, oder ob ein Fehler ausgelöst wird.</summary>
        <value>Einer der <see cref="T:System.Data.MissingSchemaAction" />-Werte. Der Standardwert ist <see langword="Add" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Der festgelegte Wert ist keiner der <see cref="T:System.Data.MissingSchemaAction" />-Werte.</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, wie eine Quelltabelle einer Datasettabelle zugeordnet wird.</summary>
        <value>Eine Auflistung, die die Masterzuordnung zwischen den zurückgegebenen Datensätzen und dem <see cref="T:System.Data.DataSet" /> bereitstellt. Der Standardwert ist eine leere Auflistung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.IDataAdapter> nur die Zuordnungen für die Quelltabelle mit dem Namen "Table" verwendet. Alle auswählen, müssen INSERT-, DELETE- und UPDATE-Anweisungen, die Rückgabe von Daten ist dies über konsistente spaltenbenennung. Die Spaltennamen in den Datensätzen zurückgegeben müssen eindeutig sein, andernfalls Spalten mit doppelten Namen überschreiben vorherige Daten. Auf <xref:System.Data.IDataAdapter.Update%2A>, nur in der Tabelle zugeordnet, die an der Quelltabelle, die mit dem Namen "Table" die Änderungen, die abgestimmt haben wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Die <see cref="T:System.Data.DataSet" />, mit der die Datenquelle aktualisiert wird.</param>
        <summary>Ruft für jede Zeile im angegebenen <see cref="T:System.Data.DataSet" /> einer <see cref="T:System.Data.DataTable" /> mit dem Namen "Table", die eingefügt, aktualisiert oder gelöscht wird, die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung auf.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung ruft die <xref:System.Data.IDataAdapter.Update%2A> -Methode, die <xref:System.Data.IDataAdapter> untersucht die <xref:System.Data.DataRow.RowState%2A> -Eigenschaft, und führt die erforderlichen INSERT-, Update- oder DELETE-Anweisungen iterativ für jede Zeile, die entsprechend der Reihenfolge der Indizes, die in der konfiguriert<xref:System.Data.DataSet>. Z. B. <xref:System.Data.IDataAdapter.Update%2A> kann aufgrund der Reihenfolge der Zeilen in einer DELETE-Anweisung, gefolgt von einer INSERT-Anweisung, und klicken Sie dann eine andere DELETE-Anweisung führen die <xref:System.Data.DataTable>.  
  
 Denken Sie daran, dass diese Anweisungen nicht als Batchprozess ausgeführt werden; Jede Zeile wird einzeln aktualisiert. Kann eine Anwendung Aufrufen der <xref:System.Data.DataSet.GetChanges%2A> Methode, wenn Sie die Reihenfolge der Anweisungstypen (z. B. Insert vor UPDATEs) steuern müssen. Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit "DataAdapters"](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Wenn die INSERT-, Update- oder DELETE-Anweisungen nicht angegeben wurden, die <xref:System.Data.Common.DataAdapter.Update%2A> Methode wird eine Ausnahme generiert. Allerdings können Sie erstellen eine <xref:System.Data.SqlClient.SqlCommandBuilder> oder <xref:System.Data.OleDb.OleDbCommandBuilder> Objekt, das SQL-Anweisungen für einzelne Tabellen Updates automatisch zu generieren, wenn Sie festlegen, die `SelectCommand` Eigenschaft eines .NET Framework-Datenanbieters. Anschließend werden alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen von des CommandBuilder-Objekts generiert. Diese Generierungslogik müssen Schlüsselspalteninformationen vorhanden sein der <xref:System.Data.DataSet>. Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Die <xref:System.Data.Common.DataAdapter.Update%2A> Methode ruft Zeilen ab, aus der Tabelle, die in der ersten Zuordnung vor dem Ausführen eines Updates aufgeführt. Die <xref:System.Data.Common.DataAdapter.Update%2A> aktualisiert dann die Zeile, die mithilfe des Werts für die <xref:System.Data.IDbCommand.UpdatedRowSource%2A> Eigenschaft. Alle weiteren zurückgegebenen Zeilen werden ignoriert.  
  
 Nachdem alle Daten erneut geladen werden die <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> -Ereignis ausgelöst wird, sodass der Benutzer die abgeglichene überprüfen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter enthalten, die vom Befehl zurückgegeben wird. Nachdem eine Zeile wurde erfolgreich aktualisiert wurde, werden die Änderungen an dieser Spalte akzeptiert.  
  
 Bei Verwendung <xref:System.Data.IDataAdapter.Update%2A>, die Reihenfolge der Ausführung wird wie folgt:  
  
1.  Die Werte in der <xref:System.Data.DataRow> verschoben werden, um die Parameterwerte.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl ausgeführt wird.  
  
4.  Wenn der Befehl, um festgelegt ist `FirstReturnedRecord`, und klicken Sie dann das erste zurückgegebene Ergebnis im abgelegt wird die <xref:System.Data.DataRow>.  
  
5.  Wenn Output-Parameter vorhanden sind, sind dazu der <xref:System.Data.DataRow>.  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jeder Befehl zugeordnete der <xref:System.Data.IDataAdapter> hat in der Regel eine Parameterauflistung zugeordnet. Parameter sind zugeordnet, mit der aktuellen Zeile über die `SourceColumn` und `SourceVersion` Eigenschaften eines .NET Framework-Datenanbieters `Parameter` Klasse. `SourceColumn` bezieht sich auf eine <xref:System.Data.DataTable> Spalte, die die <xref:System.Data.IDataAdapter> Verweise auf die Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn` bezieht sich auf den Namen nicht zugeordnete Spalte, bevor alle tabellenzuordnungen angewendet wurden. Wenn `SourceColumn` bezieht sich auf eine nicht vorhandene Spalte, die ausgeführte Aktion hängt von einer der folgenden <xref:System.Data.MissingMappingAction> Werte.  
  
|Enumerationswert|Ausgeführte Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Namen der Quellspalten und den Tabellennamen in der <xref:System.Data.DataSet> , wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Ein <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt sind, wird eine fehlenden Zuordnung für einen Eingabeparameter in der Regel durch einen Fehler verursacht.|  
|`MissingMappingAction.Error`|Ein <xref:System.SystemException> wird generiert.|  
  
 Die `SourceColumn` Eigenschaft wird auch verwendet, um den Wert für die Ausgabe zuzuordnen oder Eingabe-/Ausgabeparameter zurück an die `DataSet`. Es wird eine Ausnahme generiert, wenn er auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion` Eigenschaft eines .NET Framework-Datenanbieters `Parameter` Klasse bestimmt, ob die `Original`, `Current`, oder `Proposed` Version des Spaltenwerts. Diese Funktion wird häufig verwendet, auf die ursprünglichen Werte in der WHERE-Klausel einer UPDATE-Anweisung für die Verletzung der vollständigen Parallelität zu überprüfen sind.  
  
> [!NOTE]
>  Wenn beim Aktualisieren einer Zeile ein Fehler auftritt, wird eine Ausnahme ausgelöst und Ausführung der Aktualisierung wird nicht mehr unterstützt. Um weiterhin von der Update-Vorgang ohne Generierung von Ausnahmen, wenn ein Fehler auftritt, legen Sie die <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Eigenschaft `true` vor dem Aufruf <xref:System.Data.Common.DbDataAdapter.Update%2A>. Sie können auch auf Fehler für jede Zeile einzeln reagieren die `RowUpdated` Ereignis einen "DataAdapter". Den Update-Vorgang fortgesetzt, ohne Auslösen einer Ausnahme in der `RowUpdated` Ereignissatz, der <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> Eigenschaft der <xref:System.Data.Common.RowUpdatedEventArgs> zu <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.OleDb.OleDbDataAdapter>zu <xref:System.Data.Common.DataAdapter.Update%2A> der Datenquelle. In diesem Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Data.OleDb.OleDbDataAdapter> und <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
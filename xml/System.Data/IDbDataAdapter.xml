<Type Name="IDbDataAdapter" FullName="System.Data.IDbDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="744895fc5fe71b21dbbee22c03d1183af9e17d58" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83924786" /></Metadata><TypeSignature Language="C#" Value="public interface IDbDataAdapter : System.Data.IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbDataAdapter implements class System.Data.IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbDataAdapter&#xA;Implements IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDbDataAdapter : System::Data::IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDbDataAdapter = interface&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt eine Gruppe von befehlsbezogenen Eigenschaften dar, die zum Auffüllen des <see cref="T:System.Data.DataSet" /> und zum Aktualisieren einer Datenquelle verwendet werden. Die Implementierung erfolgt durch .NET Framework-Datenanbieter, die auf relationale Datenbanken zugreifen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.IDbDataAdapter> Schnittstelle erbt von der <xref:System.Data.IDataAdapter> -Schnittstelle und ermöglicht einem Objekt, einen DataAdapter zu erstellen, der für die Verwendung mit einer relationalen Datenbank entworfen wurde. Die <xref:System.Data.IDbDataAdapter> -Schnittstelle und optional die Utility-Klasse <xref:System.Data.Common.DbDataAdapter> erlauben einer erbenden Klasse, eine DataAdapter-Klasse zu implementieren, die die Bridge zwischen einer Datenquelle und einem darstellt <xref:System.Data.DataSet> . Weitere Informationen zu DataAdapter-Klassen finden Sie unter Auffüllen [eines Datasets aus einem DataAdapter](/dotnet/framework/data/adonet/populating-a-dataset-from-a-dataadapter). Weitere Informationen zum Implementieren von .NET Framework-Datenanbietern finden Sie unter [Implementieren einer .NET Framework Datenanbieter](https://docs.microsoft.com/previous-versions/dotnet/netframework-1.1/4ksaf9z5(v=vs.71)).  
  
 Eine Anwendung erstellt nicht direkt eine Instanz der <xref:System.Data.IDbDataAdapter> Schnittstelle, sondern erstellt eine Instanz einer Klasse, die und erbt <xref:System.Data.IDbDataAdapter> <xref:System.Data.Common.DbDataAdapter> .  
  
 Klassen, die Erben <xref:System.Data.IDbDataAdapter> , müssen die geerbten Member implementieren und in der Regel zusätzliche Elemente definieren, um anbieterspezifische Funktionen hinzuzufügen. Die <xref:System.Data.IDbDataAdapter> -Schnittstelle definiert z. b <xref:System.Data.IDbDataAdapter.SelectCommand%2A> . die-Eigenschaft, und die- <xref:System.Data.Common.DbDataAdapter> Schnittstelle definiert eine <xref:System.Data.IDataAdapter.Fill%2A> Methode, die einen <xref:System.Data.DataTable> als Parameter annimmt. Wiederum <xref:System.Data.OleDb.OleDbDataAdapter> erbt die-Klasse die <xref:System.Data.IDbDataAdapter.SelectCommand%2A> -Eigenschaft und die <xref:System.Data.Common.DbDataAdapter.Fill%2A> -Methode und definiert außerdem zwei zusätzliche über Ladungen der- <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> Methode, die ein ADO-Recordset-Objekt als Parameter annehmen.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die abgeleiteten Klassen <xref:System.Data.SqlClient.SqlCommand> , <xref:System.Data.SqlClient.SqlDataAdapter> und verwendet <xref:System.Data.SqlClient.SqlConnection> , um Datensätze aus einer Datenquelle auszuwählen. Der ausgefüllte <xref:System.Data.DataSet> wird dann zurückgegeben. Um dies zu erreichen, wird der Methode eine initialisierte <xref:System.Data.DataSet> , eine Verbindungs Zeichenfolge und eine Abfrage Zeichenfolge, die eine Transact-SQL-SELECT-Anweisung ist, übermittelt.  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Um die Konsistenz zwischen .NET Framework Datenanbietern zu fördern, benennen Sie die erbende Klasse in der Form <paramref name="Prv" /> DataAdapter, wobei <paramref name="Prv" /> das einheitliche Präfix ist, das für alle Klassen in einem bestimmten .NET Framework Datenanbieter-Namespace angegeben wird. Beispielsweise <paramref name="Sql" /> ist das Präfix der- <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> Klasse im- <see langword="System.Data.SqlClient" /> Namespace.  
  
Wenn Sie von der- <see cref="T:System.Data.IDbDataAdapter" /> Schnittstelle erben, sollten Sie die folgenden Konstruktoren implementieren: 
 <list type="table"><listheader><term> Element 
 </term><description> Beschreibung 
 </description></listheader><item><term> PrvDataAdapter () 
 </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse.  
  
 </description></item><item><term> PrvDataAdapter (PrvCommand SelectCommand) 
 </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse mit der angegebenen SQL SELECT-Anweisung.  
  
 </description></item><item><term> PrvDataAdapter (String selectCommandText, String selectConnectionString) 
 </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse mit einer SQL-SELECT-Anweisung und einer Verbindungs Zeichenfolge.  
  
 </description></item><item><term> PrvDataAdapter (String selectCommandText, PrvConnection selectconnection) 
 </term><description> Initialisiert eine neue Instanz der PrvDataAdapter-Klasse mit einer SQL-SELECT-Anweisung und einem PrvConnection-Objekt.  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung zum Löschen von Datensätzen aus dem Dataset ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, das während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in der Datenquelle zu löschen, die gelöschten Zeilen im DataSet entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>Wenn diese Eigenschaft während nicht festgelegt ist und Primärschlüssel Informationen in vorhanden sind <xref:System.Data.DataSet> , <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> kann automatisch generiert werden, wenn Sie die- `SelectCommand` Eigenschaft eines .NET Framework Datenanbieters festlegen. Anschließend werden alle zusätzlichen Befehle, die Sie nicht festlegen, vom CommandBuilder generiert. Diese Generierungs Logik erfordert, dass Schlüssel Spalten Informationen in vorhanden sind <xref:System.Data.DataSet> . Weitere Informationen finden Sie [unter Erstellen von Befehlen mit CommandBuilder](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders).  
  
 Wenn <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> einem zuvor erstellten zugewiesen ist <xref:System.Data.IDbCommand> , wird der <xref:System.Data.IDbCommand> nicht geklont. <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>Verwaltet einen Verweis auf das zuvor erstellte- <xref:System.Data.IDbCommand> Objekt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Instanz der geerbten <xref:System.Data.OleDb.OleDbDataAdapter> Klasse erstellt und die-Eigenschaft und die-Eigenschaft festgelegt <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> . Es wird davon ausgegangen, dass Sie bereits ein Objekt erstellt haben <xref:System.Data.OleDb.OleDbConnection> .  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung ab, mit der neue Datensätze in die Datenquelle eingefügt werden, oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, das während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in die Datenquelle einzufügen, die neuen Zeilen im Dataset entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>Wenn diese Eigenschaft während nicht festgelegt ist und Primärschlüssel Informationen in vorhanden sind <xref:System.Data.DataSet> , <xref:System.Data.IDbDataAdapter.InsertCommand%2A> kann automatisch generiert werden, wenn Sie die- `SelectCommand` Eigenschaft eines .NET Framework Datenanbieters festlegen. Anschließend werden alle zusätzlichen Befehle, die Sie nicht festlegen, vom CommandBuilder generiert. Diese Generierungs Logik erfordert, dass Schlüssel Spalten Informationen in vorhanden sind <xref:System.Data.DataSet> . Weitere Informationen finden Sie [unter Erstellen von Befehlen mit CommandBuilder](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders).  
  
 Wenn <xref:System.Data.IDbDataAdapter.InsertCommand%2A> einem zuvor erstellten zugewiesen ist <xref:System.Data.IDbCommand> , wird der <xref:System.Data.IDbCommand> nicht geklont. <xref:System.Data.IDbDataAdapter.InsertCommand%2A>Verwaltet einen Verweis auf das zuvor erstellte- <xref:System.Data.IDbCommand> Objekt.  
  
> [!NOTE]
>  Wenn die Ausführung dieses Befehlszeilen zurückgibt, können diese Zeilen dem hinzugefügt werden, <xref:System.Data.DataSet> je nachdem, wie Sie die-Eigenschaft des-Objekts festgelegt haben <xref:System.Data.IDbCommand.UpdatedRowSource%2A> <xref:System.Data.IDbCommand> .  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Instanz der geerbten <xref:System.Data.OleDb.OleDbDataAdapter> Klasse erstellt und die-Eigenschaft und die-Eigenschaft festgelegt <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> . Es wird davon ausgegangen, dass Sie bereits ein Objekt erstellt haben <xref:System.Data.OleDb.OleDbConnection> .  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung ab, mit der Datensätze in der Datenquelle ausgewählt werden, oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, der während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze aus der Datenquelle zur Platzierung im Dataset auszuwählen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Data.IDbDataAdapter.SelectCommand%2A> einem zuvor erstellten zugewiesen ist <xref:System.Data.IDbCommand> , wird der <xref:System.Data.IDbCommand> nicht geklont. <xref:System.Data.IDbDataAdapter.SelectCommand%2A>Verwaltet einen Verweis auf das zuvor erstellte- <xref:System.Data.IDbCommand> Objekt.  
  
 Wenn keine <xref:System.Data.IDbDataAdapter.SelectCommand%2A> Zeilen zurückgibt, werden keine Tabellen hinzugefügt <xref:System.Data.DataSet> , und es wird keine Ausnahme ausgelöst.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Instanz der geerbten <xref:System.Data.OleDb.OleDbDataAdapter> Klasse erstellt und die-Eigenschaft und die-Eigenschaft festgelegt <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> . Es wird davon ausgegangen, dass Sie bereits ein Objekt erstellt haben <xref:System.Data.OleDb.OleDbConnection> .  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung ab, mit der Datensätze in der Datenquelle aktualisiert werden, oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, das während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in der Datenquelle zu aktualisieren, die geänderten Zeilen im Dataset entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Update%2A>Wenn diese Eigenschaft während nicht festgelegt ist und Primärschlüssel Informationen in vorhanden sind <xref:System.Data.DataSet> , <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> kann automatisch generiert werden, wenn Sie die- `SelectCommand` Eigenschaft eines .NET Framework Datenanbieters festlegen. Anschließend werden alle zusätzlichen Befehle, die Sie nicht festlegen, vom CommandBuilder generiert. Diese Generierungs Logik erfordert, dass Schlüssel Spalten Informationen in vorhanden sind <xref:System.Data.DataSet> . Weitere Informationen finden Sie [unter Erstellen von Befehlen mit CommandBuilder](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders).  
  
 Wenn <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> einem zuvor erstellten zugewiesen ist <xref:System.Data.IDbCommand> , wird der <xref:System.Data.IDbCommand> nicht geklont. <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>Verwaltet einen Verweis auf das zuvor erstellte- <xref:System.Data.IDbCommand> Objekt.  
  
> [!NOTE]
>  Wenn die Ausführung dieses Befehlszeilen zurückgibt, werden diese Zeilen der hinzugefügt <xref:System.Data.DataSet> .  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Instanz der geerbten <xref:System.Data.OleDb.OleDbDataAdapter> Klasse erstellt und die-Eigenschaft und die-Eigenschaft festgelegt <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> . Es wird davon ausgegangen, dass Sie bereits ein Objekt erstellt haben <xref:System.Data.OleDb.OleDbConnection> .  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

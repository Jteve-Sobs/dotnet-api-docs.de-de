<Type Name="CollectionAdapters" FullName="System.AddIn.Pipeline.CollectionAdapters">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fce4444306abbfe8fb64b9df55abbd5d64aab51" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69337121" /></Metadata><TypeSignature Language="C#" Value="public static class CollectionAdapters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CollectionAdapters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Pipeline.CollectionAdapters" />
  <TypeSignature Language="VB.NET" Value="Public Class CollectionAdapters" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionAdapters abstract sealed" />
  <TypeSignature Language="F#" Value="type CollectionAdapters = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht das Übergeben von Auflistungen zwischen einem Add-In und dessen Hostanwendung.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse stellt Methoden bereit, mit <xref:System.Collections.Generic.IList%601> denen eine Auflistung in eine <xref:System.AddIn.Contract.IListContract%601> Auflistung konvertiert werden kann. Die <xref:System.AddIn.Contract.IListContract%601> Auflistung wird über die Isolations Grenze hinweg übermittelt und in <xref:System.Collections.Generic.IList%601> eine-Auflistung konvertiert, die das Add-in oder die Host Anwendung verwenden kann.  
  
 Objekte in Auflistungen müssen Remote fähig sein. Weitere Informationen zu den Objekttypen, die übergeben werden können, finden Sie unter [Verträge, Ansichten und Adapter](https://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c).  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8dd45b02-7218-40f9-857d-40d7b98b850b">Add-Ins und Erweiterbarkeit</related>
  </Docs>
  <Members>
    <Member MemberName="ToIList&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;T&gt; ToIList&lt;T&gt; (System.AddIn.Contract.IListContract&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!T&gt; ToIList&lt;T&gt;(class System.AddIn.Contract.IListContract`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of T) (collection As IListContract(Of T)) As IList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IList&lt;T&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="static member ToIList : System.AddIn.Contract.IListContract&lt;'T&gt; -&gt; System.Collections.Generic.IList&lt;'T&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIList collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Der Typ von Objekten, die in der Liste enthalten sind. <paramref name="T" /> muss serialisierbar sein.</typeparam>
        <param name="collection">Die Auflistung auf der anderen Seite der Pipeline.</param>
        <summary>Konvertiert die angegebene <see cref="T:System.AddIn.Contract.IListContract`1" />-Auflistung in eine <see cref="T:System.Collections.Generic.IList`1" />-Auflistung.</summary>
        <returns>Die konvertierte Auflistung.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Host Anwendung oder das Add-in kann die zurück <xref:System.Collections.Generic.IList%601> gegebene Auflistung verwenden. Die <xref:System.Collections.Generic.IList%601> Sammlung verfügt über ein Lebensdauer Token für die <xref:System.AddIn.Contract.IListContract%601> Remote Auflistung.  
  
 Sie sollten diese Methoden Überladung nur verwenden, wenn der Inhalt <xref:System.AddIn.Contract.IListContract%601> der serialisierbaren Typen ist, die direkt an das Add-in und den Host (anstatt an Typen, die in Ansichten angepasst werden müssen) übermittelt werden können.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Host seitiges Adapter Pipeline Segment implementiert, wie [Exemplarische Vorgehensweise: Übergeben von Auflistungen zwischen Hosts und](https://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5)Add-Ins. Im Beispiel wird die Benutzer `ProcessBooks` definierte-Methode angepasst <xref:System.AddIn.Contract.IListContract%601> , indem die vom Add-in weiter gegebene Auflistung übernommen und <xref:System.Collections.Generic.IList%601> in eine-Auflistung umgerechnet wird, die von der Host Anwendung verwendet werden kann.  
  
 [!code-csharp[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/cs/LibraryManagerViewToContractAddInAdapter.cs#3)]
 [!code-vb[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/vb/LibraryManagerViewToContractAddInAdapter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIList&lt;TContract,TView&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;TView&gt; ToIList&lt;TContract,TView&gt; (System.AddIn.Contract.IListContract&lt;TContract&gt; collection, Converter&lt;TContract,TView&gt; contractViewAdapter, Converter&lt;TView,TContract&gt; viewContractAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!TView&gt; ToIList&lt;TContract, TView&gt;(class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; collection, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of TContract, TView) (collection As IListContract(Of TContract), contractViewAdapter As Converter(Of TContract, TView), viewContractAdapter As Converter(Of TView, TContract)) As IList(Of TView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract, typename TView&gt;&#xA; static System::Collections::Generic::IList&lt;TView&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;TContract&gt; ^ collection, Converter&lt;TContract, TView&gt; ^ contractViewAdapter, Converter&lt;TView, TContract&gt; ^ viewContractAdapter);" />
      <MemberSignature Language="F#" Value="static member ToIList : System.AddIn.Contract.IListContract&lt;'Contract&gt; * Converter&lt;'Contract, 'View&gt; * Converter&lt;'View, 'Contract&gt; -&gt; System.Collections.Generic.IList&lt;'View&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIList (collection, contractViewAdapter, viewContractAdapter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
        <TypeParameter Name="TView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">Der Typ, der den Vertrag für über die Isolationsgrenze hinweg übergebene Objekte vom Typ <paramref name="TView" /> definiert.</typeparam>
        <typeparam name="TView">Der Typ, der die Ansicht der Objekte in der Liste definiert.</typeparam>
        <param name="collection">Die Auflistung, die an die andere Seite der Pipeline übergeben werden soll.</param>
        <param name="contractViewAdapter">Ein Konverter, der die Daten des im Vertrag definierten Typs an den Typ anpasst, der in der Ansicht erwartet wird.</param>
        <param name="viewContractAdapter">Ein Konverter, der die Daten des in der Ansicht definierten Typs an den Typ anpasst, der vom Vertrag erwartet wird.</param>
        <summary>Konvertiert eine angegebene <see cref="T:System.AddIn.Contract.IListContract`1" />-Auflistung unter Verwendung von Konverteradaptern in eine <see cref="T:System.Collections.Generic.IList`1" />-Auflistung.</summary>
        <returns>Die konvertierte Auflistung.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methoden Überladung für <xref:System.AddIn.Contract.IListContract%601> Auflistungen, die Typen enthalten, die angepasst werden müssen, bevor Sie an das Add-in oder den Host (anstatt an einfache, serialisierbare Typen, die direkt übermittelt werden können) übermittelt werden können. Die Host Anwendung oder das Add-in kann die zurück <xref:System.Collections.Generic.IList%601> gegebene Auflistung verwenden. Er verfügt über ein Lebensdauer Token für den <xref:System.AddIn.Contract.IListContract%601>Remote Computer.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;T&gt; ToIListContract&lt;T&gt; (System.Collections.Generic.IList&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!T&gt; ToIListContract&lt;T&gt;(class System.Collections.Generic.IList`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of T) (collection As IList(Of T)) As IListContract(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::AddIn::Contract::IListContract&lt;T&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="static member ToIListContract : System.Collections.Generic.IList&lt;'T&gt; -&gt; System.AddIn.Contract.IListContract&lt;'T&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIListContract collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Der Typ von Objekten, die in der Liste enthalten sind. <paramref name="T" /> muss serialisierbar sein.</typeparam>
        <param name="collection">Die zu konvertierende Auflistung.</param>
        <summary>Konvertiert eine angegebene <see cref="T:System.Collections.Generic.IList`1" />-Auflistung in eine <see cref="T:System.AddIn.Contract.IListContract`1" />-Auflistung.</summary>
        <returns>Die konvertierte Auflistung.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.AddIn.Contract.IListContract%601> Sammlung kann über die Isolations Grenze zwischen dem Add-in und der zugehörigen Host Anwendung gemarshallt werden.  
  
 Sie sollten diese Methoden Überladung nur verwenden, wenn der Inhalt <xref:System.Collections.Generic.IList%601> der Auflistung serialisierbare Typen ist, die direkt an den Vertrag (anstatt an Typen, die in Verträge angepasst werden müssen) übermittelt werden können.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die-Klasse implementiert, die ein Add-in-Side Adapter Pipeline-Segment definiert. Dadurch wird die Benutzer `ProcessBooks` definierte Methode angepasst, <xref:System.Collections.Generic.IList%601> indem die vom Add-in-Ansichts Segment übergebene Auflistung übernommen <xref:System.AddIn.Contract.IListContract%601> und in eine-Auflistung umgerechnet wird, die über die Isolations Grenze an den Host gemarshallt werden kann.  
  
 [!code-csharp[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/cs/LibraryManagerContractToViewHostAdapter.cs#4)]
 [!code-vb[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/vb/LibraryManagerContractToViewHostAdapter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;TView,TContract&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;TContract&gt; ToIListContract&lt;TView,TContract&gt; (System.Collections.Generic.IList&lt;TView&gt; collection, Converter&lt;TView,TContract&gt; viewContractAdapter, Converter&lt;TContract,TView&gt; contractViewAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; ToIListContract&lt;TView, TContract&gt;(class System.Collections.Generic.IList`1&lt;!!TView&gt; collection, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of TView, TContract) (collection As IList(Of TView), viewContractAdapter As Converter(Of TView, TContract), contractViewAdapter As Converter(Of TContract, TView)) As IListContract(Of TContract)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TView, typename TContract&gt;&#xA; static System::AddIn::Contract::IListContract&lt;TContract&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;TView&gt; ^ collection, Converter&lt;TView, TContract&gt; ^ viewContractAdapter, Converter&lt;TContract, TView&gt; ^ contractViewAdapter);" />
      <MemberSignature Language="F#" Value="static member ToIListContract : System.Collections.Generic.IList&lt;'View&gt; * Converter&lt;'View, 'Contract&gt; * Converter&lt;'Contract, 'View&gt; -&gt; System.AddIn.Contract.IListContract&lt;'Contract&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIListContract (collection, viewContractAdapter, contractViewAdapter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;TContract&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TView" />
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TView">Der Typ, der die Ansicht der Objekte in der Liste definiert.</typeparam>
        <typeparam name="TContract">Der Typ, der den Vertrag für über die Isolationsgrenze hinweg übergebene Objekte vom Typ <paramref name="TView" /> definiert.</typeparam>
        <param name="collection">Die zu konvertierende Auflistung.</param>
        <param name="viewContractAdapter">Ein Konverter, der die Daten des in der Ansicht definierten Typs an den Typ anpasst, der vom Vertrag erwartet wird.</param>
        <param name="contractViewAdapter">Ein Konverter, der die Daten des im Vertrag definierten Typs an den Typ anpasst, der in der Ansicht erwartet wird.</param>
        <summary>Konvertiert eine angegebene <see cref="T:System.Collections.Generic.IList`1" />-Auflistung unter Verwendung von Konverteradaptern in eine <see cref="T:System.AddIn.Contract.IListContract`1" />-Auflistung.</summary>
        <returns>Die konvertierte Auflistung.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methoden Überladung für <xref:System.Collections.Generic.IList%601> Auflistungen, die Typen enthalten, die in Verträge angepasst werden müssen, bevor Sie an den Vertrag (anstatt an einfache, serialisierbare Typen, die direkt übermittelt werden können) übertragen werden können. Die <xref:System.AddIn.Contract.IListContract%601> Sammlung kann über die Isolations Grenze zwischen einem Add-in und der zugehörigen Host Anwendung gemarshallt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

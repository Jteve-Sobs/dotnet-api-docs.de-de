<Type Name="IMenuCommandService" FullName="System.ComponentModel.Design.IMenuCommandService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="976c49c5d36348692e3a77461d5fbbd4d7aa2874" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48630531" /></Metadata><TypeSignature Language="C#" Value="public interface IMenuCommandService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMenuCommandService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IMenuCommandService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMenuCommandService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMenuCommandService" />
  <TypeSignature Language="F#" Value="type IMenuCommandService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Methoden bereit, mit denen Sie die im Entwurfsmodus verfügbaren globalen Designerverben und Menübefehle verwalten sowie einige Typen von Kontextmenüs anzeigen können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Schnittstelle stellt Methoden bereit:  
  
-   Suchen, aufrufen, hinzufügen und globale Designerverbbefehle zu entfernen.  
  
-   Suchen Sie, rufen Sie auf, fügen Sie hinzu und entfernen Sie der standardmäßigen Menübefehle.  
  
-   Ändern Sie die Ereignishandler, der standardmäßigen Menübefehle zugeordnet.  
  
-   Anzeigen eines Kontextmenüs von Standardbefehlen, die mit einem Menü verknüpft ist <xref:System.ComponentModel.Design.CommandID>.  
  
 Designerverben darstellen, benutzerdefinierte Befehle, die im Kontextmenü im Entwurfsmodus aufgeführt sind. Ein Designerverb bieten eine Bezeichnung für angegebenen Text. Jede DesignerVerb erhält automatisch eine eindeutige <xref:System.ComponentModel.Design.CommandID>. Ein Designer kann Designerverben durch Bereitstellen der <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> -Eigenschaft, aber diese sind nur verfügbar, wenn die Komponente des Designers derzeit ausgewählt ist. Globale Designerverben sind DesignerVerb-Befehle, die über ein Kontextmenü Entwurfsmodus, unabhängig von der ausgewählten Komponente zugegriffen werden können. Diese Schnittstelle ermöglicht es Ihnen, den Satz von globalen Designerverben zu verwalten, die im Entwurfsmodus verfügbar sind.  
  
 Sie können eine globale Designerverb mit Hinzufügen der <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> Methode, und Sie können eine globale Designerverb mit Entfernen der <xref:System.ComponentModel.Design.IMenuCommandService.RemoveVerb%2A> Methode. Sie können ein Designerverb mit Aufrufen der <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> Methode, wenn man die <xref:System.ComponentModel.Design.CommandID> des Verbs. Die <xref:System.ComponentModel.Design.IMenuCommandService.Verbs%2A> -Eigenschaft dieser Schnittstelle enthält den aktuellen Satz von Designerverbbefehle in einem Kontextmenü anzeigen. Dieser Satz von Designer-Verb-Befehlen besteht aus allen globalen Designerverben und alle Designerverben, die vom Designer der aktuell ausgewählten Komponenten bereitgestellt. Diese Gruppe von Verben wird jedes Mal aktualisiert, eine Komponente mit einem Angebot Designerverbbefehle Designer aktiviert oder deaktiviert ist.  
  
 Befehle im Menü sind auf den Satz von vordefinierten Standardbefehle beschränkt. Die meisten vordefinierten Standardbefehle sind definiert, der <xref:System.ComponentModel.Design.StandardCommands> und <xref:System.Windows.Forms.Design.MenuCommands> Enumerationen. Sie können hinzufügen, entfernen, und rufen Sie die Befehle im Menü, und suchen Sie nach Menübefehle, in denen ein Menü mit den Methoden der diese Schnittstelle hinzugefügt wurden.  
  
 Können Sie hinzufügen, eine standardmäßige Menübefehl mit der <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> -Methode, und entfernen, die eine standardmäßige Menübefehl mit der <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> Methode. Sie können einen Ereignishandler an einen vordefinierten Befehl anfügen, indem Sie die Schritte beschrieben, die in der Dokumentation für die <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> Methode. Sie können einen Befehl vom abrufen <xref:System.ComponentModel.Design.CommandID> , wenn sie mit einem Menü hinzugefügt wurde die <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> Methode. Sie können einen Menübefehl oder Designerverbbefehl über Aufrufen <xref:System.ComponentModel.Design.CommandID> mithilfe der <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> Methode.  
  
> [!NOTE]
>  Beim Hinzufügen ein Menübefehls mit einer bereits vorhandenen <xref:System.ComponentModel.Design.CommandID> löst eine <xref:System.InvalidOperationException>. Wenn Sie einen Befehl hinzufügen, werden Sie sicher, dass es nicht bereits auf einem Menü mit ist der <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> Methode oder Ausnahmebehandlung sinnvoll verwenden.  
  
> [!NOTE]
>  Ein Menübefehl zu einem Menü hinzugefügt werden können, und haben die <xref:System.ComponentModel.Design.MenuCommand.Visible%2A> oder <xref:System.ComponentModel.Design.MenuCommand.Enabled%2A> Eigenschaften festgelegt, um `false`. Wenn Sie visuell einen Menübefehl nicht finden, die in einem Menü hinzugefügt wurde, eine dieser Eigenschaften kann festgelegt wurden, `false`.  
  
 Sie können anzeigen, bestimmte standardmäßige Kontextmenüs, die Menübefehle zu einem angegebenen Speicherort mithilfe der <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> Methode. Die Dokumentation für diese Methode enthält, eine Tabelle, in die Befehls-IDs, die angeben, die gültige Menüs angezeigt wird.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung der <xref:System.ComponentModel.Design.IMenuCommandService> Hinzufügen einer <xref:System.ComponentModel.Design.MenuCommand>.  
  
 [!code-cpp[MenuCommand Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuCommand Example/CPP/component1.cpp#1)]
 [!code-csharp[MenuCommand Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuCommand Example/CS/component1.cs#1)]
 [!code-vb[MenuCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuCommand Example/VB/component1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
    <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
    <altmember cref="T:System.ComponentModel.Design.CommandID" />
    <altmember cref="T:System.Windows.Forms.Design.MenuCommands" />
    <altmember cref="T:System.ComponentModel.Design.StandardCommands" />
  </Docs>
  <Members>
    <Member MemberName="AddCommand">
      <MemberSignature Language="C#" Value="public void AddCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.AddCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">Das hinzuzufügende <see cref="T:System.ComponentModel.Design.MenuCommand" />.</param>
        <summary>Fügt dem Menü den angegebenen Standardmenübefehl hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Design.MenuCommands> und <xref:System.ComponentModel.Design.StandardCommands> Aufzählungen enthalten <xref:System.ComponentModel.Design.CommandID> Bezeichner für die vordefinierte Standardbefehle und Befehle, die bereits mit einem Speicherort in einem bestimmten Menü verknüpft ist.  
  
> [!NOTE]
>  Beim Hinzufügen ein Menübefehls mit einer bereits vorhandenen <xref:System.ComponentModel.Design.CommandID> löst eine <xref:System.InvalidOperationException>. Wenn Sie einen Befehl hinzufügen, werden Sie sicher, dass es nicht bereits auf einem Menü mit ist der <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> Methode oder Ausnahmebehandlung sinnvoll verwenden.  
  
 Sie können einen Ereignishandler zu einem vordefinierten Menübefehl mit der folgenden Prozedur anfügen:  
  
1.  Wenn Sie der Menübefehl zum Verknüpfen mit einem Ereignishandler zu einem Menü hinzugefügt wurde, oder befinden sich in der <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> -Methode, berücksichtigen Sie, ob Sie mit diesem Befehl später wiederherstellen möchten, und gibt an, ob Sie den aktuellen Ereignishandler aus den neuen Ereignishandler aufrufen möchten. Wenn Ihr Code den Menübefehl oder die Kette der Aufruf von Ereignishandlern wiederherstellen kann, achten Sie darauf, dass Sie einen Verweis auf den Menübefehl an einer beliebigen Stelle speichern.  
  
2.  Stellen Sie sicher, dass alle bereits vorhandenen Menübefehl mit dem gleichen <xref:System.ComponentModel.Design.CommandID> wurde entfernt wurde, aus dem Menü mit den <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> Methode.  
  
3.  Erstellen Sie ein neues <xref:System.ComponentModel.Design.MenuCommand> , und geben Sie Ihre Ereignishandler im Konstruktor wird zusammen mit einem <xref:System.ComponentModel.Design.CommandID> , die den hinzuzufügenden Befehl darstellt. Jeder Standardmenübefehl ist eine vordefinierte Menü, in dem es hinzugefügt wird, zugeordnet. Die unterstützten Befehls-IDs werden definiert, der <xref:System.ComponentModel.Design.StandardCommands> und <xref:System.Windows.Forms.Design.MenuCommands> Enumerationen.  
  
4.  Wenn Sie einen bereits vorhandenen Ereignishandler für den Menübefehl aufrufen möchten, rufen Sie die <xref:System.ComponentModel.Design.MenuCommand.Invoke%2A> Methode des Menübefehls, die Sie im Menü des ereignishandlers, der das Invoke-Ereignis des Menübefehls behandelt ersetzt haben.  
  
5.  Wenn Sie bei der Wiederherstellung des Ereignishandler für einen bereits vorhandenen Menübefehl, den Sie ersetzt haben, das gespeicherte hinzugefügt werden, bereits vorhandene Menübefehl, nachdem Sie den Menübefehl für den Ersatz entfernt, die, den Sie erstellt haben. Sie sollten dieses Verhalten zum Hinzufügen der `Dispose` Methode für den Typ.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="T:System.ComponentModel.Design.CommandID" /> des angegebenen <see cref="T:System.ComponentModel.Design.MenuCommand" /> ist bereits in einem Menü vorhanden.</exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public void AddVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member AddVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.AddVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">Das hinzuzufügende <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
        <summary>Fügt das angegebene Designerverb der Gruppe der globalen Designerverben hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entwickler von Komponenten, die Designerverben bereitstellen sollten verwenden die <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> Eigenschaft, deren Designer, statt das Aufrufen dieser Methode. Diese Methode fügt ein globales Designerverb, das im Kontextmenü mit der rechten Maustaste im Entwurfsmodus unabhängig von der aktuell ausgewählten Komponente zugegriffen werden kann.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand" Usage="iMenuCommandService.FindCommand commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">Die zu suchende <see cref="T:System.ComponentModel.Design.CommandID" />.</param>
        <summary>Sucht nach der angegebenen Befehls-ID und gibt den zugeordneten Menübefehl zurück.</summary>
        <returns>Der <see cref="T:System.ComponentModel.Design.MenuCommand" />, dem diese Befehls-ID zugeordnet ist, oder <see langword="null" />, wenn kein Befehl gefunden wird.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public bool GlobalInvoke (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member GlobalInvoke : System.ComponentModel.Design.CommandID -&gt; bool" Usage="iMenuCommandService.GlobalInvoke commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">Die <see cref="T:System.ComponentModel.Design.CommandID" /> des zu suchenden und auszuführenden Befehls.</param>
        <summary>Ruft einen der angegebenen Befehls-ID entsprechenden Menübefehl oder Designerverbbefehl auf.</summary>
        <returns><see langword="true" />, wenn der Befehl gefunden und erfolgreich aufgerufen wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sucht diese Methode für einen Menübefehl oder ein Designerverb mit einem <xref:System.ComponentModel.Design.CommandID> Übereinstimmung den angegebenen <xref:System.ComponentModel.Design.CommandID>. Diese Methode sucht zuerst in der Designerverben-Auflistung, die aus der globalen und den aktiven Designer bereitgestellte Verben vor dem Fortfahren der Suche, falls erforderlich, über den Dienst der globalen Umgebung-Befehl. Wenn Sie einen entsprechenden Menübefehl oder ein Designerverb gefunden wurde, wird der Befehl aufgerufen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCommand">
      <MemberSignature Language="C#" Value="public void RemoveCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member RemoveCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.RemoveCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">Das zu entfernende <see cref="T:System.ComponentModel.Design.MenuCommand" />-Element.</param>
        <summary>Entfernt den angegebenen Standardmenübefehl aus dem Menü.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode entfernt das angegebene <xref:System.ComponentModel.Design.MenuCommand> Wenn es gefunden wird. Diese Methode keine Ausnahme auslösen, oder geben einen Wert zurück, wenn das angegebene <xref:System.ComponentModel.Design.MenuCommand> wurde nicht gefunden. Verwenden der <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> Methode, um zu bestimmen, ob eine <xref:System.ComponentModel.Design.MenuCommand> mit einer angegebenen <xref:System.ComponentModel.Design.CommandID> befindet sich in einem Menü.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="RemoveVerb">
      <MemberSignature Language="C#" Value="public void RemoveVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member RemoveVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.RemoveVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">Das zu entfernende <see cref="T:System.ComponentModel.Design.DesignerVerb" />-Element.</param>
        <summary>Entfernt das angegebene Designerverb aus der Auflistung von globalen Designerverben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode entfernt das angegebene Designerverb für den globale, wenn es innerhalb der Auflistung der globalen Designerverben. Sie können ein Designerverb hinzufügen, auf die globalen Designerverben Sammlung mithilfe der <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenu">
      <MemberSignature Language="C#" Value="public void ShowContextMenu (System.ComponentModel.Design.CommandID menuID, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowContextMenu(class System.ComponentModel.Design.CommandID menuID, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowContextMenu (menuID As CommandID, x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowContextMenu(System::ComponentModel::Design::CommandID ^ menuID, int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenu : System.ComponentModel.Design.CommandID * int * int -&gt; unit" Usage="iMenuCommandService.ShowContextMenu (menuID, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuID" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="menuID">Die <see cref="T:System.ComponentModel.Design.CommandID" /> für das anzuzeigende Kontextmenü.</param>
        <param name="x">Die x-Koordinate in Bildschirmkoordinaten, an der das Menü angezeigt werden soll.</param>
        <param name="y">Die y-Koordinate in Bildschirmkoordinaten, an der das Menü angezeigt werden soll.</param>
        <summary>Zeigt das angegebene Kontextmenü an der angegebenen Position an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> Methode können eines die folgenden Befehle im Menü zu einem bestimmten Zeitpunkt mit Visual Studio-Kontextmenüs angezeigt:  
  
|Menü|CommandID|  
|----------|---------------|  
|Das Kontextmenü angezeigt, die für einen container|<xref:System.Windows.Forms.Design.MenuCommands.ContainerMenu>|  
|Das Kontextmenü für die Komponentenleiste angezeigt|<xref:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu>|  
|Das Kontextmenü für eine Auswahl angezeigt|<xref:System.Windows.Forms.Design.MenuCommands.SelectionMenu>|  
|Das Kontextmenü angezeigt, die für eine Fachauswahl|<xref:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu>|  
  
 Diese Methode kann auch andere registrierte Kontextmenüs anzeigen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Verbs As DesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Design::DesignerVerbCollection ^ Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Verbs : System.ComponentModel.Design.DesignerVerbCollection" Usage="System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung der aktuell verfügbaren Designerverben ab.</summary>
        <value>Eine <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />, die die aktuell verfügbaren Designerverben enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Satz der aktuell verfügbaren Designerverben besteht aus allen globalen Designerverben, die mit hinzugefügt werden die <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> Methode für diese Schnittstelle, und klicken Sie auf einzelne Designerverben, die von angeboten werden die <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> Eigenschaft der einzelnen Designern. Wenn der Name der globalen Verbs durch den Namen des ein Designerverb in Konflikt steht, hat der Designer bereitgestellte Designerverb Vorrang vor.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerbCollection" />
        <altmember cref="P:System.ComponentModel.Design.IDesigner.Verbs" />
      </Docs>
    </Member>
  </Members>
</Type>
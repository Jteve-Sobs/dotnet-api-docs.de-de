<Type Name="IMenuCommandService" FullName="System.ComponentModel.Design.IMenuCommandService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f80c7a3868635a95e09af582d04a3f4f1239d35d" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86734216" /></Metadata><TypeSignature Language="C#" Value="public interface IMenuCommandService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMenuCommandService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IMenuCommandService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMenuCommandService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMenuCommandService" />
  <TypeSignature Language="F#" Value="type IMenuCommandService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.TypeConverter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Methoden bereit, mit denen Sie die im Entwurfsmodus verfügbaren globalen Designerverben und Menübefehle verwalten sowie einige Typen von Kontextmenüs anzeigen können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Schnittstelle stellt Methoden für Folgendes bereit:  
  
-   Globale Designer Verb Befehle suchen, aufrufen, hinzufügen und entfernen.  
  
-   Standardmenü Befehle suchen, aufrufen, hinzufügen und entfernen.  
  
-   Ändern Sie die Ereignishandler, die mit den Standardmenü Befehlen verknüpft sind.  
  
-   Zeigt ein Kontextmenü von Standard Befehlen an, die einem Menü zugeordnet sind <xref:System.ComponentModel.Design.CommandID> .  
  
 Designer Verben stellen benutzerdefinierte Befehle dar, die im Kontextmenü im Entwurfs Modus aufgeführt sind. Ein Designer Verb kann eine angegebene Text Bezeichnung bereitstellen. Jedem Designer Verb wird automatisch eine eindeutige zugewiesen <xref:System.ComponentModel.Design.CommandID> . Designer Verben können von einem Designer über die zugehörige- <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> Eigenschaft bereitgestellt werden. diese sind jedoch nur verfügbar, wenn die Komponente des Designers aktuell ausgewählt ist. Globale Designer Verben sind Designer Verb Befehle, auf die von einem Kontextmenü im Entwurfs Modus unabhängig von der ausgewählten Komponente zugegriffen werden kann. Mit dieser Schnittstelle können Sie den Satz von globalen Designer Verben verwalten, die im Entwurfs Modus verfügbar sind.  
  
 Mithilfe der-Methode können Sie ein globales Designer Verb hinzufügen <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> , und Sie können ein globales Designer Verb mithilfe der- <xref:System.ComponentModel.Design.IMenuCommandService.RemoveVerb%2A> Methode entfernen. Sie können ein Designer Verb mithilfe der- <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> Methode aufrufen, wenn Sie die <xref:System.ComponentModel.Design.CommandID> des Verbs kennen. Die- <xref:System.ComponentModel.Design.IMenuCommandService.Verbs%2A> Eigenschaft dieser Schnittstelle enthält den aktuellen Satz von Designer Verb Befehlen, der in einem Kontextmenü angezeigt werden soll. Dieser Satz von Designer Verb Befehlen besteht aus allen globalen Designer Verben und allen Designer Verben, die vom Designer einer beliebigen aktuell ausgewählten Komponente bereitgestellt werden. Diese Verben werden jedes Mal aktualisiert, wenn eine Komponente mit Designer-Verb Befehlen ausgewählt oder deaktiviert wird.  
  
 Menübefehle sind auf den Satz vordefinierter Standard Befehle beschränkt. Die meisten der vordefinierten Standard Befehle sind in den <xref:System.ComponentModel.Design.StandardCommands> <xref:System.Windows.Forms.Design.MenuCommands> Enumerationen und definiert. Sie können Menübefehle hinzufügen, entfernen und aufrufen und Menübefehle suchen, die einem Menü mithilfe von Methoden dieser Schnittstelle hinzugefügt wurden.  
  
 Sie können einen Standardmenü Befehl mithilfe der <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> -Methode hinzufügen und einen Standardmenü Befehl mithilfe der- <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> Methode entfernen. Sie können einen Ereignishandler an einen vordefinierten Standardmenü Befehl anfügen, indem Sie das in der Dokumentation für die-Methode beschriebene Verfahren befolgen <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> . Sie können einen Menübefehl von abrufen <xref:System.ComponentModel.Design.CommandID> , wenn er einem Menü mithilfe der-Methode hinzugefügt wurde <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> . Mithilfe der-Methode können Sie einen Menübefehl oder einen Designer Verb Befehl aufrufen <xref:System.ComponentModel.Design.CommandID> <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> .  
  
> [!NOTE]
>  Wenn Sie versuchen, einen Menübefehl mit einem bereits vorhandenen hinzuzufügen, <xref:System.ComponentModel.Design.CommandID> wird eine ausgelöst <xref:System.InvalidOperationException> . Wenn Sie einen Menübefehl hinzufügen, stellen Sie sicher, dass er nicht bereits in einem Menü mit der-Methode vorhanden ist <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> , oder verwenden Sie die Ausnahmebehandlung in gewisser Weise.  
  
> [!NOTE]
>  Ein Menübefehl kann einem Menü hinzugefügt werden, und die-Eigenschaft oder die-Eigenschaft kann <xref:System.ComponentModel.Design.MenuCommand.Visible%2A> <xref:System.ComponentModel.Design.MenuCommand.Enabled%2A> auf festgelegt werden `false` . Wenn Sie einen Menübefehl, der in einem Menü hinzugefügt wurde, nicht visuell finden können, wurde eine dieser Eigenschaften möglicherweise auf festgelegt `false` .  
  
 Mithilfe der-Methode können Sie bestimmte Standardkontext Menüs mit Menübefehlen an einer bestimmten Position anzeigen <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> . Die Dokumentation für diese Methode enthält eine Tabelle mit den Befehls-IDs, die die anzuzeigenden gültigen Menüs angeben.  
  
   
  
## Examples  
 In diesem Beispiel wird die Verwendung des <xref:System.ComponentModel.Design.IMenuCommandService> zum Hinzufügen von veranschaulicht <xref:System.ComponentModel.Design.MenuCommand> .  
  
 [!code-cpp[MenuCommand Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuCommand Example/CPP/component1.cpp#1)]
 [!code-csharp[MenuCommand Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuCommand Example/CS/component1.cs#1)]
 [!code-vb[MenuCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuCommand Example/VB/component1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
    <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
    <altmember cref="T:System.ComponentModel.Design.CommandID" />
    <altmember cref="T:System.Windows.Forms.Design.MenuCommands" />
    <altmember cref="T:System.ComponentModel.Design.StandardCommands" />
  </Docs>
  <Members>
    <Member MemberName="AddCommand">
      <MemberSignature Language="C#" Value="public void AddCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.AddCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">Das hinzuzufügende <see cref="T:System.ComponentModel.Design.MenuCommand" />.</param>
        <summary>Fügt dem Menü den angegebenen Standardmenübefehl hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Design.MenuCommands> <xref:System.ComponentModel.Design.StandardCommands> Enumerationen und enthalten Bezeichner <xref:System.ComponentModel.Design.CommandID> für vordefinierte Standard Befehle und Menübefehle, die bereits einem Speicherort in einem bestimmten Menü zugeordnet sind.  
  
> [!NOTE]
>  Wenn Sie versuchen, einen Menübefehl mit einem bereits vorhandenen hinzuzufügen, <xref:System.ComponentModel.Design.CommandID> wird eine ausgelöst <xref:System.InvalidOperationException> . Wenn Sie einen Menübefehl hinzufügen, stellen Sie sicher, dass er nicht bereits in einem Menü mit der-Methode vorhanden ist <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> , oder verwenden Sie die Ausnahmebehandlung in gewisser Weise.  
  
 Mit dem folgenden Verfahren können Sie einen Ereignishandler an einen vordefinierten Menübefehl anfügen:  
  
1.  Wenn der Menübefehl, der mit einem Ereignishandler verknüpft werden soll, einem Menü hinzugefügt wurde oder sich mit der- <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> Methode befindet, sollten Sie überprüfen, ob Sie diesen Menübefehl später wiederherstellen möchten und ob Sie den aktuellen Ereignishandler aus dem neuen Ereignishandler aufrufen möchten. Wenn Ihr Code den Menübefehl wiederherstellen oder den Aufruf von Ereignis Handlern verketten kann, achten Sie darauf, einen Verweis auf den Menübefehl irgendwo zu speichern.  
  
2.  Stellen Sie mithilfe der-Methode sicher, dass alle zuvor vorhandenen Menübefehle mit demselben <xref:System.ComponentModel.Design.CommandID> aus dem Menü entfernt wurden <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> .  
  
3.  Erstellen Sie eine neue <xref:System.ComponentModel.Design.MenuCommand> , und geben Sie Ihren Ereignishandler im Konstruktor an, zusammen mit einem, <xref:System.ComponentModel.Design.CommandID> der den hinzu zufügenden Befehl darstellt. Jeder Standardmenü Befehl wird einer vordefinierten Menü Position zugeordnet, der er hinzugefügt wird. Die unterstützten Befehls-IDs werden in <xref:System.ComponentModel.Design.StandardCommands> den <xref:System.Windows.Forms.Design.MenuCommands> Enumerationen und definiert.  
  
4.  Wenn Sie einen bereits vorhandenen Ereignishandler für den Menübefehl aufrufen möchten, rufen Sie die- <xref:System.ComponentModel.Design.MenuCommand.Invoke%2A> Methode des Menübefehls auf, den Sie im Menü aus dem Ereignishandler ersetzt haben, der das Aufruf Ereignis des Menübefehls behandelt.  
  
5.  Wenn Sie an der Wiederherstellung des Ereignis Handlers eines bereits vorhandenen Menübefehls interessiert sind, fügen Sie den gespeicherten, bereits vorhandenen Menübefehl hinzu, nachdem Sie den erstellten Ersetzungs Menübefehl entfernt haben. Möglicherweise möchten Sie dieses Verhalten der- `Dispose` Methode für Ihren Typ hinzufügen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="T:System.ComponentModel.Design.CommandID" /> des angegebenen <see cref="T:System.ComponentModel.Design.MenuCommand" /> ist bereits in einem Menü vorhanden.</exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public void AddVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member AddVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.AddVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">Das hinzuzufügende <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
        <summary>Fügt das angegebene Designerverb der Gruppe der globalen Designerverben hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Designer von Komponenten, die Designer Verben bereitstellen, sollten die- <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> Eigenschaft des Designers verwenden, anstatt diese Methode aufrufen zu müssen. Mit dieser Methode wird ein globales Designer Verb hinzugefügt, auf das über das Kontextmenü mit der rechten Maustaste im Entwurfs Modus zugegriffen werden kann, unabhängig von der aktuell ausgewählten Komponente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindCommand (commandID As CommandID) As MenuCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand" Usage="iMenuCommandService.FindCommand commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">Die zu suchende <see cref="T:System.ComponentModel.Design.CommandID" />.</param>
        <summary>Sucht nach der angegebenen Befehls-ID und gibt den zugeordneten Menübefehl zurück.</summary>
        <returns>Der <see cref="T:System.ComponentModel.Design.MenuCommand" />, dem diese Befehls-ID zugeordnet ist, oder <see langword="null" />, wenn kein Befehl gefunden wird.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public bool GlobalInvoke (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="VB.NET" Value="Public Function GlobalInvoke (commandID As CommandID) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member GlobalInvoke : System.ComponentModel.Design.CommandID -&gt; bool" Usage="iMenuCommandService.GlobalInvoke commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">Die <see cref="T:System.ComponentModel.Design.CommandID" /> des zu suchenden und auszuführenden Befehls.</param>
        <summary>Ruft einen der angegebenen Befehls-ID entsprechenden Menübefehl oder Designerverbbefehl auf.</summary>
        <returns><see langword="true" />, wenn der Befehl gefunden und erfolgreich aufgerufen wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sucht nach einem Menübefehl oder Designer Verb mit einem, <xref:System.ComponentModel.Design.CommandID> der mit dem angegebenen übereinstimmt <xref:System.ComponentModel.Design.CommandID> . Diese Methode sucht zuerst innerhalb der Designer Verben-Auflistung, die aus globalen und aktiven, vom Designer bereitgestellten Verben besteht, bevor Sie die Suche, falls erforderlich, über den Befehls Dienst der globalen Umgebung fortsetzen. Wenn ein übereinstimmender Menübefehl oder Designer Verb gefunden wird, wird der Befehl aufgerufen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCommand">
      <MemberSignature Language="C#" Value="public void RemoveCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member RemoveCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.RemoveCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">Das zu entfernende <see cref="T:System.ComponentModel.Design.MenuCommand" />-Element.</param>
        <summary>Entfernt den angegebenen Standardmenübefehl aus dem Menü.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode entfernt die angegebene, <xref:System.ComponentModel.Design.MenuCommand> Wenn Sie gefunden wurde. Diese Methode gibt keine Ausnahme aus oder gibt einen Wert zurück, wenn der angegebene <xref:System.ComponentModel.Design.MenuCommand> nicht gefunden wurde. Verwenden Sie die- <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> Methode, um zu bestimmen, ob ein <xref:System.ComponentModel.Design.MenuCommand> übereinstimmendes mit einem angegebenen <xref:System.ComponentModel.Design.CommandID> in einem Menü gefunden wird  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="RemoveVerb">
      <MemberSignature Language="C#" Value="public void RemoveVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member RemoveVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.RemoveVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">Das zu entfernende <see cref="T:System.ComponentModel.Design.DesignerVerb" />-Element.</param>
        <summary>Entfernt das angegebene Designerverb aus der Auflistung von globalen Designerverben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode entfernt das angegebene globale Designer Verb, wenn es sich innerhalb der Verben Auflistung des globalen Designers befindet. Mithilfe der-Methode können Sie der globalen Designer Verben-Auflistung ein Designer Verb hinzufügen <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> .  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenu">
      <MemberSignature Language="C#" Value="public void ShowContextMenu (System.ComponentModel.Design.CommandID menuID, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowContextMenu(class System.ComponentModel.Design.CommandID menuID, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowContextMenu (menuID As CommandID, x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowContextMenu(System::ComponentModel::Design::CommandID ^ menuID, int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenu : System.ComponentModel.Design.CommandID * int * int -&gt; unit" Usage="iMenuCommandService.ShowContextMenu (menuID, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuID" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="menuID">Die <see cref="T:System.ComponentModel.Design.CommandID" /> für das anzuzeigende Kontextmenü.</param>
        <param name="x">Die x-Koordinate in Bildschirmkoordinaten, an der das Menü angezeigt werden soll.</param>
        <param name="y">Die y-Koordinate in Bildschirmkoordinaten, an der das Menü angezeigt werden soll.</param>
        <summary>Zeigt das angegebene Kontextmenü an der angegebenen Position an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> Methode kann die folgenden Visual Studio-Kontextmenüs mit Menübefehlen an einem bestimmten Punkt anzeigen:  
  
|Menü|CommandID|  
|----------|---------------|  
|Das für einen Container angezeigte Kontextmenü.|<xref:System.Windows.Forms.Design.MenuCommands.ContainerMenu>|  
|Das für die Komponenten Leiste angezeigte Kontextmenü.|<xref:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu>|  
|Das für eine Auswahl angezeigte Kontextmenü.|<xref:System.Windows.Forms.Design.MenuCommands.SelectionMenu>|  
|Das für eine leisten Auswahl angezeigte Kontextmenü.|<xref:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu>|  
  
 Mit dieser Methode können auch andere registrierte Kontextmenüs angezeigt werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Verbs As DesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Design::DesignerVerbCollection ^ Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Verbs : System.ComponentModel.Design.DesignerVerbCollection" Usage="System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung der aktuell verfügbaren Designerverben ab.</summary>
        <value>Eine <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />, die die aktuell verfügbaren Designerverben enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Satz der aktuell verfügbaren Designer Verben besteht aus allen globalen Designer Verben, die von der- <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> Methode für diese Schnittstelle hinzugefügt werden, und einzelnen Designer Verben, die von der- <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> Eigenschaft einzelner Designer angeboten werden. Wenn der Name eines globalen Verbs mit dem Namen eines Designer Verbs in Konflikt steht, hat das vom Designer bereitgestellte Verb Vorrang.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerbCollection" />
        <altmember cref="P:System.ComponentModel.Design.IDesigner.Verbs" />
      </Docs>
    </Member>
  </Members>
</Type>

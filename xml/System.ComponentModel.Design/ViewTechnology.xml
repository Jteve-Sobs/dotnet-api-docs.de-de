<Type Name="ViewTechnology" FullName="System.ComponentModel.Design.ViewTechnology">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc9c23253cbc09cc29b28970c3f06961d8964b04" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36705244" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ViewTechnology" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ViewTechnology extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.ViewTechnology" />
  <TypeSignature Language="VB.NET" Value="Public Enum ViewTechnology" />
  <TypeSignature Language="C++ CLI" Value="public enum class ViewTechnology" />
  <TypeSignature Language="F#" Value="type ViewTechnology = " />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert Bezeichner für eine Gruppe von Technologien, die von Designerhosts unterstützt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Adapter Ansichtsmodell ersetzt und funktionell erweitert, die <xref:System.ComponentModel.Design.ViewTechnology> feature; allerdings die <xref:System.ComponentModel.Design.ViewTechnology> Funktion wird für Abwärtskompatibilität und für zukünftige Verwendung beibehalten, falls gewünscht. Weitere Informationen finden Sie unter ".NET Shape Library: A Sample Designer" in der Windows Forms Knowledge Base unter http://windowsforms.net/articles/shapedesigner.aspx.  
  
 <xref:System.ComponentModel.Design.ViewTechnology> definiert die Bezeichner, die den Modus zum Steuern der Anzeige von einem Designer gehosteten Dokument verwendet werden soll, angeben können.  
  
 Sie sollten nur den Standardwert in Ihre Designer hosting-Umgebung verwenden. In früheren Versionen von der [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]die <xref:System.ComponentModel.Design.ViewTechnology.Default> -Enumeration angegeben, den Typ des Benutzeroberflächenautomatisierungs-Modell, die von einer Stamm-Designer unterstützt. Da dieses Modell nicht erweiterbar ist, verwenden Sie stattdessen eine *Ansichtsadapter* Modell. Ein Ansicht-Adapter ist ein Typ, der ein Objekt eines Typs in einen anderen passt.  
  
 Ein HTML-Designer möglicherweise zurück, z. B. eine `DemoDOM` Struktur als seinen Ansichtszustand. HTML-Designer gibt eine Technologie zur Ansicht der Standardeinstellung zurück. Eine Windows Forms-Hostingumgebung müsste eine oder mehrere Adapter Ansichtsklassen verfügbar. Wenn eine solche Klasse konvertieren konnte die `DemoDOM` in Windows Forms-Steuerelements, unterstützen die Hostinganwendung dieses Typs des Designers. Wenn kein Adapter aus des Designers zurückgegebenen Datentyp verarbeiten kann <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> -Methode, die Last des Designers schlägt fehl, und der Benutzer wird ein Fehler angezeigt.  
  
 Visual Studio verfügt über ein erweiterbares Schema für die Bereitstellung, damit es an eine beliebige Technologie für die Benutzeroberfläche anpassen kann. Drittanbieter-Technologieanbieter können auch einen entsprechenden Sicht Adapter anbieten, und ihre Objektmodelle sofort nutzbar sind.  
  
 Ein Beispiel, verwendet Adapter anzeigen, finden Sie unter ".NET Shape Library: A Sample Designer" in der Windows Forms Knowledge Base unter http://windowsforms.net/articles/shapedesigner.aspx.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.ComponentModel.Design.ViewTechnology.Default> Klasse in einem Designer. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> Schnittstelle.  
  
 [!code-cpp[IRootDesigner Sample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IRootDesigner Sample/CPP/class1.cpp#1)]
 [!code-csharp[IRootDesigner Sample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IRootDesigner Sample/CS/class1.cs#1)]
 [!code-vb[IRootDesigner Sample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IRootDesigner Sample/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology Default = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.Default" />
      <MemberSignature Language="VB.NET" Value="Default" />
      <MemberSignature Language="C++ CLI" Value="Default" />
      <MemberSignature Language="F#" Value="Default = 2" Usage="System.ComponentModel.Design.ViewTechnology.Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Gibt die Standardunterstützung für die Ansichtstechnologie an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Stamm-Designer kann jede Art von Objekt zurück, aber das Objekt muss mit einem Adapter für die Technologie des Hosts kompatibel sein. Hostumgebungen, z. B. Visual Studio bieten eine Möglichkeit, neue Ansicht Technologie Adapter einzustecken. Das Standardobjekt für die Ansicht für Windows Forms-Designer ist ein <xref:System.Windows.Forms.Control?displayProperty=nameWithType> Instanz.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.ComponentModel.Design.ViewTechnology> Klasse in einem Designer. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.ComponentModel.Design.IRootDesigner> Schnittstelle.  
  
 [!code-cpp[IRootDesigner Sample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IRootDesigner Sample/CPP/class1.cpp#1)]
 [!code-csharp[IRootDesigner Sample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IRootDesigner Sample/CS/class1.cs#1)]
 [!code-vb[IRootDesigner Sample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IRootDesigner Sample/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Passthrough">
      <MemberSignature Language="C#" Value="Passthrough" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology Passthrough = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.Passthrough" />
      <MemberSignature Language="VB.NET" Value="Passthrough" />
      <MemberSignature Language="C++ CLI" Value="Passthrough" />
      <MemberSignature Language="F#" Value="Passthrough = 0" Usage="System.ComponentModel.Design.ViewTechnology.Passthrough" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Stellt einen Modus dar, in dem das Ansichtsobjekt direkt an die Entwicklungsumgebung übergeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Ansichtsobjekt muss Schnittstellen zu implementieren, die die Entwicklungsumgebung erforderlich sind. Der Visual Studio-Entwicklungsumgebung unterstützt Anzeigen von Objekten, die entweder ein ActiveX-Steuerelement, aktive Dokument oder ein Objekt, das die IVsWindowPane-Schnittstelle implementiert, die über ein Visual Studio VSI (Visual Studio-Integration) Programm verfügbar ist. Die Entwicklungsumgebung von Visual Studio bietet Unterstützung für diese Ansicht-Technologie. Unterstützung für diese Ansicht Technologie ist nicht notwendigerweise verfügbar in allen entwicklungsumgebungen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsForms">
      <MemberSignature Language="C#" Value="WindowsForms" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology WindowsForms = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.WindowsForms" />
      <MemberSignature Language="VB.NET" Value="WindowsForms" />
      <MemberSignature Language="C++ CLI" Value="WindowsForms" />
      <MemberSignature Language="F#" Value="WindowsForms = 1" Usage="System.ComponentModel.Design.ViewTechnology.WindowsForms" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Stellt einen Modus dar, in dem ein Windows Forms-Steuerelementobjekt die Anzeige für den Stammdesigner bereitstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Designerhost füllt im Dokumentfenster der Development-Umgebung mit Windows Forms-Steuerelement.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.ComponentModel.Design.ViewTechnology> Klasse in einem Designer. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.ComponentModel.Design.LocalizationExtenderProvider> Klasse.  
  
 [!code-cpp[LocalizationExtenderProviderExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/LocalizationExtenderProviderExample/CPP/class1.cpp#1)]
 [!code-csharp[LocalizationExtenderProviderExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/LocalizationExtenderProviderExample/CS/class1.cs#1)]
 [!code-vb[LocalizationExtenderProviderExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/LocalizationExtenderProviderExample/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
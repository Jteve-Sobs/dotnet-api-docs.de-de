<Type Name="IDesignerFilter" FullName="System.ComponentModel.Design.IDesignerFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2dbad6fdfb09f4fc16d8d85beafb69dfaa4f5eea" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37696279" /></Metadata><TypeSignature Language="C#" Value="public interface IDesignerFilter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesignerFilter" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IDesignerFilter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesignerFilter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesignerFilter" />
  <TypeSignature Language="F#" Value="type IDesignerFilter = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Schnittstelle bereit, die einem Designer den Zugriff auf und das Filtern von Wörterbüchern eines <see cref="T:System.ComponentModel.TypeDescriptor" /> ermöglicht, der Eigenschafts-, Attribut- und Ereignisdeskriptoren enthält, die ein Komponenten-Designer für die Entwurfszeitumgebung verfügbar machen kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.IDesignerFilter> ermöglicht einem Designer, den Satz der Eigenschaft, Attribut- und Deskriptoren zu filtern, die über die zugeordnete Komponente verfügbar gemachten eine <xref:System.ComponentModel.TypeDescriptor>. Die Methoden dieser Schnittstelle, deren Namen beginnen mit `Pre` werden aufgerufen, unmittelbar bevor die Methoden, deren Namen beginnen mit `Post`.  
  
 Wenn Sie Attribut, Ereignisse oder Eigenschaftendeskriptoren hinzufügen möchten, verwenden Sie eine <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, oder <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> Methode.  
  
 Wenn Sie verwenden möchten, ändern oder Entfernen von Attribut-, Ereignisses oder Eigenschaftenbezeichner, verwenden eine <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, oder <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Überschreiben der <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> , eine Eigenschaft des Designers auf das Fenster "Eigenschaften" addiert, wenn das Steuerelement des Designers zur Entwurfszeit ausgewählt ist. Siehe das Beispiel für die <xref:System.Windows.Forms.Design.ControlDesigner> -Klasse für ein vollständiges Designer-Beispiel, verwendet der <xref:System.ComponentModel.Design.IDesignerFilter> Schnittstelle.  
  
 [!code-cpp[ControlDesignerExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlDesignerExample/CPP/controldesignerexample.cpp#2)]
 [!code-csharp[ControlDesignerExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlDesignerExample/CS/controldesignerexample.cs#2)]
 [!code-vb[ControlDesignerExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlDesignerExample/VB/controldesignerexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.ITypeDescriptorFilterService" />
    <altmember cref="T:System.ComponentModel.TypeDescriptor" />
  </Docs>
  <Members>
    <Member MemberName="PostFilterAttributes">
      <MemberSignature Language="C#" Value="public void PostFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Die <see cref="T:System.Attribute" />-Objekte für die Klasse der Komponente. Die Schlüssel im Attributwörterbuch sind die <see cref="P:System.Attribute.TypeId" />-Werte der Attribute.</param>
        <summary>Ermöglicht es einem Designer, beim Überschreiben in einer abgeleiteten Klasse Elemente in der über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Attributgruppe zu ändern oder zu entfernen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode bietet eine Möglichkeit zum Ändern oder Entfernen von Elementen im Wörterbuch der Attribute, die über die zugeordnete Komponente des Designers implementiert diese Schnittstelle verfügbar macht eine <xref:System.ComponentModel.TypeDescriptor>.  
  
 Die Schlüssel im Attributwörterbuch sind die Typ-IDs der Attribute. Die Objekte sind vom Typ <xref:System.Attribute>. Diese Methode wird aufgerufen, unmittelbar nach <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>.  
  
 Die Typ-ID eines Attributs kann jedes Objekt sein. In der Standardeinstellung <xref:System.Attribute> gibt seine <xref:System.Type> als Wert für die <xref:System.Attribute.TypeId%2A> Eigenschaft. Sehen Sie sich die <xref:System.Attribute.TypeId%2A> eines Attributs in das Wörterbuch, dessen Übereinstimmung mit einem bekannten <xref:System.Attribute.TypeId%2A> für ein Attribut, das es identifiziert werden, oder verwenden Sie <xref:System.Reflection> zur Attribut des Objekts selbst.  
  
 Wenn ein Attribut mit dem gleichen <xref:System.Attribute.TypeId%2A> wie ein vorhandenes oder geerbte Attribut an eine Komponente hinzugefügt wird, wird das neue Attribut ersetzt das alte Attribut. Für viele Attribute enthalten wird ein neues Attribut des gleichen Typs vorherige Attribut des Typs ersetzt. Allerdings einige Typen von Attributen zurückgegeben eine <xref:System.Attribute.TypeId%2A> , die das Attribut selektiv unterscheidet. Beispielsweise um verschiedene Typen von gleichzeitig aktiven Designern für einen Typ bereitstellen, z. B. eine <xref:System.ComponentModel.Design.IRootDesigner> und <xref:System.ComponentModel.Design.IDesigner>, <xref:System.ComponentModel.DesignerAttribute> -Klasse zurückgegeben wird ein <xref:System.Attribute.TypeId%2A> , eindeutig identifiziert, sowohl das Attribut als auch die Basis-Designer Geben Sie ein. Die <xref:System.ComponentModel.DesignerAttribute> Konstruktor ermöglicht Ihnen die Angabe den Basistyp des Designers zusätzlich zu seinen spezifischen Typ, Designer und <xref:System.ComponentModel.DesignerAttribute> gibt eine <xref:System.Attribute.TypeId%2A> gibt, die. Daher beim Hinzufügen einer neuen <xref:System.ComponentModel.DesignerAttribute> mit einem Designer Basistyp des gleichen Typs wie der Basistyp eines vorhandenen Designer <xref:System.ComponentModel.DesignerAttribute>, das alte Attribut wird durch das neue Attribut ersetzt.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie können das Wörterbuch, das über zugegriffen werden kann direkt filtern die <paramref name="attributes" /> -Parameter, oder Sie können diese unverändert belassen. Wenn Sie diese Methode außer Kraft gesetzt werden, rufen Sie die basisimplementierung auf, nachdem Sie Ihre eigenen Filtern ausgeführt.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterEvents">
      <MemberSignature Language="C#" Value="public void PostFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">Die <see cref="T:System.ComponentModel.EventDescriptor" />-Objekte, die die Ereignisse der Klasse der Komponente darstellen. Die Schlüssel im Ereigniswörterbuch sind Ereignisnamen.</param>
        <summary>Ermöglicht einem Designer, beim Überschreiben in einer abgeleiteten Klasse Elemente in der über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Menge von Ereignissen zu ändern oder daraus entfernen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode bietet eine Möglichkeit zum Ändern oder Entfernen von Elementen im Wörterbuch von Ereignissen, die über verfügbar gemacht werden eine <xref:System.ComponentModel.TypeDescriptor>.  
  
 Die Schlüssel im Ereigniswörterbuch sind die Namen der Ereignisse. Die Objekte sind vom Typ <xref:System.ComponentModel.EventDescriptor>. Diese Methode wird aufgerufen, unmittelbar nach <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie können das Wörterbuch, das über zugegriffen werden kann direkt filtern die <paramref name="events" /> -Parameter, oder Sie können diese unverändert belassen. Wenn Sie diese Methode außer Kraft gesetzt werden, rufen Sie die basisimplementierung auf, nachdem Sie Ihre eigenen Filtern ausgeführt.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterProperties">
      <MemberSignature Language="C#" Value="public void PostFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">Die <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte, die die Eigenschaften der Klasse der Komponente darstellen. Die Schlüssel im Eigenschaftenwörterbuch sind Eigenschaftennamen.</param>
        <summary>Ermöglicht einem Designer, beim Überschreiben in einer abgeleiteten Klasse Elemente in der über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Menge von Eigenschaften zu ändern oder daraus entfernen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode bietet eine Möglichkeit zum Ändern oder Entfernen von Elementen im Wörterbuch von Eigenschaften, die über verfügbar gemacht werden eine <xref:System.ComponentModel.TypeDescriptor>.  
  
 Der Schlüssel im Wörterbuch der Eigenschaften sind die Namen der Eigenschaften. Die Objekte sind vom Typ <xref:System.ComponentModel.PropertyDescriptor>. Diese Methode wird aufgerufen, unmittelbar nach <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie können das Wörterbuch, das über zugegriffen werden kann direkt filtern die <paramref name="properties" /> -Parameter, oder Sie können diese unverändert belassen. Wenn Sie diese Methode außer Kraft gesetzt werden, rufen Sie die basisimplementierung auf, nachdem Sie Ihre eigenen Filtern ausgeführt.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterAttributes">
      <MemberSignature Language="C#" Value="public void PreFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Die <see cref="T:System.Attribute" />-Objekte für die Klasse der Komponente. Die Schlüssel im Attributwörterbuch sind die <see cref="P:System.Attribute.TypeId" />-Werte der Attribute.</param>
        <summary>Ermöglicht es einem Designer, beim Überschreiben in einer abgeleiteten Klasse den über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Attributen Elemente hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode bietet eine Möglichkeit, Elemente, die dem Wörterbuch von Attributen hinzufügen, die über die zugeordnete Komponente des Designers implementiert diese Schnittstelle verfügbar macht eine <xref:System.ComponentModel.TypeDescriptor>.  
  
 Die Schlüssel im Attributwörterbuch sind die Typ-IDs der Attribute. Die Objekte sind vom Typ <xref:System.Attribute>. Diese Methode wird aufgerufen, unmittelbar vor dem <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>.  
  
 Die Typ-ID eines Attributs kann jedes Objekt sein. In der Standardeinstellung <xref:System.Attribute> gibt seine <xref:System.Type> als Wert für die <xref:System.Attribute.TypeId%2A> Eigenschaft. Sehen Sie sich die <xref:System.Attribute.TypeId%2A> eines Attributs in das Wörterbuch, dessen Übereinstimmung mit einem bekannten <xref:System.Attribute.TypeId%2A> für ein Attribut, das es identifiziert werden, oder verwenden Sie <xref:System.Reflection> zur Attribut des Objekts selbst.  
  
 Wenn ein Attribut mit dem gleichen <xref:System.Attribute.TypeId%2A> wie ein vorhandenes oder geerbte Attribut an eine Komponente hinzugefügt wird, wird das neue Attribut ersetzt das alte Attribut. Für viele Attribute enthalten wird ein neues Attribut des gleichen Typs vorherige Attribut des Typs ersetzt. Allerdings einige Typen von Attributen zurückgegeben eine <xref:System.Attribute.TypeId%2A> , die das Attribut selektiv unterscheidet. Beispielsweise um verschiedene Typen von gleichzeitig aktiven Designern für einen Typ bereitstellen, z. B. eine <xref:System.ComponentModel.Design.IRootDesigner> und <xref:System.ComponentModel.Design.IDesigner>, <xref:System.ComponentModel.DesignerAttribute> -Klasse zurückgegeben wird ein <xref:System.Attribute.TypeId%2A> , eindeutig identifiziert, sowohl das Attribut als auch die Basis-Designer Geben Sie ein. Die <xref:System.ComponentModel.DesignerAttribute> Konstruktor ermöglicht Ihnen die Angabe den Basistyp des Designers zusätzlich zu seinen spezifischen Typ, Designer und <xref:System.ComponentModel.DesignerAttribute> gibt eine <xref:System.Attribute.TypeId%2A> gibt, die. Daher beim Hinzufügen einer neuen <xref:System.ComponentModel.DesignerAttribute> mit einem Designer Basistyp des gleichen Typs wie der Basistyp eines vorhandenen Designer <xref:System.ComponentModel.DesignerAttribute>, das alte Attribut wird durch das neue Attribut ersetzt.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie können das Wörterbuch, das über zugegriffen werden kann direkt filtern die <paramref name="attributes" /> -Parameter, oder Sie können diese unverändert belassen. Wenn Sie diese Methode außer Kraft gesetzt werden, rufen Sie die basisimplementierung auf, nachdem Sie Ihre eigenen Filtern ausgeführt.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterEvents">
      <MemberSignature Language="C#" Value="public void PreFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">Die <see cref="T:System.ComponentModel.EventDescriptor" />-Objekte, die die Ereignisse der Klasse der Komponente darstellen. Die Schlüssel im Ereigniswörterbuch sind Ereignisnamen.</param>
        <summary>Ermöglicht es einem Designer, beim Überschreiben in einer abgeleiteten Klasse der über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Gruppe von Ereignissen Elemente hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode bietet eine Möglichkeit, Elemente, die dem Wörterbuch von Ereignissen hinzufügen, die über ein Designer verfügbar gemachten eine <xref:System.ComponentModel.TypeDescriptor>.  
  
 Die Schlüssel im Ereigniswörterbuch sind die Namen der Ereignisse. Die Objekte sind vom Typ <xref:System.ComponentModel.EventDescriptor>. Diese Methode wird aufgerufen, unmittelbar vor dem <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie können direkt ändern, das Wörterbuch, das über die <paramref name="events" /> -Parameter, oder Sie können diese unverändert belassen. Wenn Sie diese Methode außer Kraft gesetzt werden, rufen Sie die basisimplementierung auf, bevor Sie Ihre eigenen Filtern ausführen.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterProperties">
      <MemberSignature Language="C#" Value="public void PreFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">Die <see cref="T:System.ComponentModel.PropertyDescriptor" />-Objekte, die die Eigenschaften der Klasse der Komponente darstellen. Die Schlüssel im Eigenschaftenwörterbuch sind Eigenschaftennamen.</param>
        <summary>Ermöglicht es einem Designer, beim Überschreiben in einer abgeleiteten Klasse der über einen <see cref="T:System.ComponentModel.TypeDescriptor" /> verfügbar gemachten Gruppe von Eigenschaften Elemente hinzuzufügen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode bietet eine Möglichkeit, die dem Wörterbuch von Eigenschaften Elemente hinzugefügt werden, die über ein Designer verfügbar gemachten eine <xref:System.ComponentModel.TypeDescriptor>.  
  
 Der Schlüssel im Wörterbuch der Eigenschaften sind die Namen der Eigenschaften. Die Objekte sind vom Typ <xref:System.ComponentModel.PropertyDescriptor>. Diese Methode wird aufgerufen, unmittelbar vor dem <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie können direkt ändern, das Wörterbuch, das über die <paramref name="properties" /> -Parameter, oder Sie können diese unverändert belassen. Wenn Sie diese Methode außer Kraft gesetzt werden, rufen Sie die basisimplementierung auf, bevor Sie Ihre eigenen Filtern ausführen.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>
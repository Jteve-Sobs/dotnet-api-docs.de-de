<Type Name="SequenceNumber" FullName="System.IO.Log.SequenceNumber">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b4a9b1f93488b3c313ead5234912836563fefbba" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52374240" /></Metadata><TypeSignature Language="C#" Value="public struct SequenceNumber : IComparable&lt;System.IO.Log.SequenceNumber&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit SequenceNumber extends System.ValueType implements class System.IComparable`1&lt;valuetype System.IO.Log.SequenceNumber&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.SequenceNumber" />
  <TypeSignature Language="VB.NET" Value="Public Structure SequenceNumber&#xA;Implements IComparable(Of SequenceNumber)" />
  <TypeSignature Language="C++ CLI" Value="public value class SequenceNumber : IComparable&lt;System::IO::Log::SequenceNumber&gt;" />
  <TypeSignature Language="F#" Value="type SequenceNumber = struct" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.IO.Log.SequenceNumber&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine einem Protokolldatensatz in einer Datensatzsequenz zugewiesene Sequenznummer dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedem Protokolldatensatz in einer Sequenz ist eine Sequenznummer zugewiesen, die größer ist als die Sequenznummern der zuvor angefügten Datensätze. Eine Sequenznummer kann verglichen, aber nicht bearbeitet werden.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SequenceNumber (byte[] sequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] sequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sequenceNumber As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SequenceNumber(cli::array &lt;System::Byte&gt; ^ sequenceNumber);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.SequenceNumber : byte[] -&gt; System.IO.Log.SequenceNumber" Usage="new System.IO.Log.SequenceNumber sequenceNumber" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber">Byte, die die Sequenznummer bilden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.IO.Log.SequenceNumber" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sequenceNumber" /> weist die falsche Länge auf oder stellt keine gültige Sequenznummer dar.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.IO.Log.SequenceNumber other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.IO.Log.SequenceNumber other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.CompareTo(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As SequenceNumber) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::IO::Log::SequenceNumber other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : System.IO.Log.SequenceNumber -&gt; int&#xA;override this.CompareTo : System.IO.Log.SequenceNumber -&gt; int" Usage="sequenceNumber.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="other">Ein Objekt, das die aktuelle Sequenznummer ergibt.</param>
        <summary>Vergleicht diese Sequenznummer mit einem angegebenen Objekt.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die die lexikalische Beziehung der beiden verglichenen Elemente angibt.  
  
 <list type="table"><item><term> Wert 
 </term><description> Bedingung 
 </description></item><item><term> Kleiner als 0 (null) 
 </term><description> Diese Instanz ist kleiner als <paramref name="other" />.  
  
 </description></item><item><term> Zero 
 </term><description> Diese Instanz ist gleich <paramref name="other" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description> Diese Instanz ist größer als <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt an, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.IO.Log.SequenceNumber other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.IO.Log.SequenceNumber other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.Equals(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::IO::Log::SequenceNumber other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.IO.Log.SequenceNumber -&gt; bool" Usage="sequenceNumber.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="other">Eine weitere <see cref="T:System.IO.Log.SequenceNumber" /> für den Vergleich.</param>
        <summary>Gibt an, ob diese Instanz und eine angegebene Sequenznummer gleich sind.</summary>
        <returns><see langword="true" />, wenn <paramref name="other" /> und diese Instanz denselben Wert darstellen, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sequenceNumber.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">Ein weiteres Objekt für den Vergleich.</param>
        <summary>Gibt an, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
        <returns><see langword="true" />, wenn <paramref name="other" /> und diese Instanz denselben Typ aufweisen und denselben Wert darstellen, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public byte[] GetBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.GetBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytes () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytes();" />
      <MemberSignature Language="F#" Value="member this.GetBytes : unit -&gt; byte[]" Usage="sequenceNumber.GetBytes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Codiert die gesamte oder einen Teil der aktuellen Sequenznummer in ein Bytearray.</summary>
        <returns>Ein Bytearray, das die gesamte oder einen Teil der aktuellen Sequenznummer enthält.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sequenceNumber.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
        <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalid">
      <MemberSignature Language="C#" Value="public static System.IO.Log.SequenceNumber Invalid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.IO.Log.SequenceNumber Invalid" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.SequenceNumber.Invalid" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Invalid As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::Log::SequenceNumber Invalid { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.Invalid : System.IO.Log.SequenceNumber" Usage="System.IO.Log.SequenceNumber.Invalid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Sequenznummer ab, die zum Darstellen einer ungültigen Sequenznummer als Standardwert dient.</summary>
        <value>Ein <see cref="T:System.IO.Log.SequenceNumber" /> UInt64 initialisiert.<see cref="F:System.UInt64.MaxValue" /> Dient als Standardwert für die Darstellung einer ungültigen Sequenznummer.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_Equality(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="c1 = c2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der linken Seite des Operators.</param>
        <param name="c2">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der rechten Seite des Operators.</param>
        <summary>Vergleicht zwei <see cref="T:System.IO.Log.SequenceNumber" />-Instanzen auf Gleichheit.</summary>
        <returns><see langword="true" />, wenn beide <see cref="T:System.IO.Log.SequenceNumber" />-Instanzen gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator <xref:System.IO.Log.SequenceNumber.CompareTo*?displayProperty=nameWithType>.]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_GreaterThan(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="c1 &gt; c2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der linken Seite des Operators.</param>
        <param name="c2">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der rechten Seite des Operators.</param>
        <summary>Führt einen logischen Vergleich von zwei <see cref="T:System.IO.Log.SequenceNumber" />-Instanzen durch, um zu bestimmen, ob die erste größer als die zweite ist.</summary>
        <returns><see langword="true" />, wenn die erste Instanz größer als die zweite ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator <xref:System.IO.Log.SequenceNumber.CompareTo*>.]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_GreaterThanOrEqual(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="c1 &gt;= c2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der linken Seite des Operators.</param>
        <param name="c2">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der rechten Seite des Operators.</param>
        <summary>Führt einen logischen Vergleich von zwei <see cref="T:System.IO.Log.SequenceNumber" />-Instanzen durch, um zu bestimmen, ob die erste größer oder gleich der zweiten ist.</summary>
        <returns><see langword="true" />, wenn die erste Instanz größer oder gleich der zweiten Instanz ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator <xref:System.IO.Log.SequenceNumber.CompareTo*>.]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_Inequality(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="System.IO.Log.SequenceNumber.op_Inequality (c1, c2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der linken Seite des Operators.</param>
        <param name="c2">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der rechten Seite des Operators.</param>
        <summary>Vergleicht zwei <see cref="T:System.IO.Log.SequenceNumber" />-Instanzen auf Ungleichheit.</summary>
        <returns><see langword="true" />, wenn beide <see cref="T:System.IO.Log.SequenceNumber" />-Instanzen ungleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator <xref:System.IO.Log.SequenceNumber.CompareTo*>.]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_LessThan(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="c1 &lt; c2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der linken Seite des Operators.</param>
        <param name="c2">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der rechten Seite des Operators.</param>
        <summary>Führt einen logischen Vergleich der beiden <see cref="T:System.IO.Log.SequenceNumber" />-Parameter durch, um zu bestimmen, ob der erste kleiner als der zweite ist.</summary>
        <returns><see langword="true" />, wenn die erste Instanz kleiner als die zweite ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator <xref:System.IO.Log.SequenceNumber.CompareTo*>.]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_LessThanOrEqual(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="c1 &lt;= c2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der linken Seite des Operators.</param>
        <param name="c2">Die <see cref="T:System.IO.Log.SequenceNumber" /> auf der rechten Seite des Operators.</param>
        <summary>Führt einen logischen Vergleich der beiden <see cref="T:System.IO.Log.SequenceNumber" />-Parameter durch, um zu bestimmen, ob der erste kleiner oder gleich dem zweiten ist.</summary>
        <returns><see langword="true" />, wenn die erste Instanz kleiner oder gleich der zweiten ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator <xref:System.IO.Log.SequenceNumber.CompareTo*>.]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
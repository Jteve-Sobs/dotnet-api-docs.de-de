<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb453b55817bdece49fca73f5a99dbaa6726d300" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86992016" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Dispatcher extends System.Object" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="559a6-101">Stellt Dienste zum Verwalten der Warteschlange von Arbeitselementen für einen Thread bereit.</span><span class="sxs-lookup"><span data-stu-id="559a6-101">Provides services for managing the queue of work items for a thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-102"><xref:System.Windows.Threading.Dispatcher>Verwaltet eine priorisierte Warteschlange von Arbeitsaufgaben für einen bestimmten Thread.</span><span class="sxs-lookup"><span data-stu-id="559a6-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="559a6-103">Wenn ein <xref:System.Windows.Threading.Dispatcher> in einem Thread erstellt wird, wird es zum einzigen, <xref:System.Windows.Threading.Dispatcher> das dem Thread zugeordnet werden kann, auch wenn der <xref:System.Windows.Threading.Dispatcher> heruntergefahren wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="559a6-104">Wenn Sie versuchen, die <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> für den aktuellen Thread zu erhalten, und ein <xref:System.Windows.Threading.Dispatcher> nicht mit dem Thread verknüpft ist, wird ein <xref:System.Windows.Threading.Dispatcher> erstellt.</span><span class="sxs-lookup"><span data-stu-id="559a6-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="559a6-105">Eine <xref:System.Windows.Threading.Dispatcher> wird auch erstellt, wenn Sie einen erstellen <xref:System.Windows.Threading.DispatcherObject> .</span><span class="sxs-lookup"><span data-stu-id="559a6-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="559a6-106">Wenn Sie ein <xref:System.Windows.Threading.Dispatcher> in einem Hintergrund Thread erstellen, müssen Sie den Verteiler beenden, bevor Sie den Thread beenden.</span><span class="sxs-lookup"><span data-stu-id="559a6-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="559a6-107">Wenn ein <xref:System.Windows.Threading.Dispatcher> heruntergefahren wird, kann es nicht neu gestartet werden.</span><span class="sxs-lookup"><span data-stu-id="559a6-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="559a6-108">In WPF <xref:System.Windows.Threading.DispatcherObject> kann nur von dem darauf zugegriffen werden, dem <xref:System.Windows.Threading.Dispatcher> es zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-108">In WPF, a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="559a6-109">Ein Hintergrund Thread kann z. b. den Inhalt einer nicht aktualisieren <xref:System.Windows.Controls.Button> , die mit dem <xref:System.Windows.Threading.Dispatcher> im Thread verknüpft ist [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] .</span><span class="sxs-lookup"><span data-stu-id="559a6-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="559a6-110">Damit der Hintergrund Thread auf die- <xref:System.Windows.Controls.ContentControl.Content%2A> Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die dem Thread zugeordnete delegieren <xref:System.Windows.Threading.Dispatcher> [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] .</span><span class="sxs-lookup"><span data-stu-id="559a6-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="559a6-111">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="559a6-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-113">Der-Vorgang wird der-Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-114">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für einen aufgerufen wird <xref:System.Windows.Threading.Dispatcher> , der heruntergefahren wurde, wird die Status-Eigenschaft des zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf festgelegt <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> .</span><span class="sxs-lookup"><span data-stu-id="559a6-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="559a6-115">Alle Methoden in <xref:System.Windows.Threading.Dispatcher> , mit Ausnahme von <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> , sind frei Thread.</span><span class="sxs-lookup"><span data-stu-id="559a6-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="559a6-116">Objekte, die von abgeleitet werden, <xref:System.Windows.Threading.DispatcherObject> haben Thread Affinität.</span><span class="sxs-lookup"><span data-stu-id="559a6-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="559a6-117">Objekte, die von abgeleitet <xref:System.Windows.Freezable> werden, sind frei Thread, wenn Sie eingefroren werden.</span><span class="sxs-lookup"><span data-stu-id="559a6-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="559a6-118">Weitere Informationen finden Sie unter der [Übersicht über Freezable-Objekte](/dotnet/framework/wpf/advanced/freezable-objects-overview).</span><span class="sxs-lookup"><span data-stu-id="559a6-118">For more information, see [Freezable Objects Overview](/dotnet/framework/wpf/advanced/freezable-objects-overview).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="559a6-119">Im folgenden Beispiel wird gezeigt, wie Sie einen Vorgang auf einem platzieren <xref:System.Windows.Threading.Dispatcher> .</span><span class="sxs-lookup"><span data-stu-id="559a6-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="559a6-120">Den vollständigen Quellcode dieses Beispiels finden Sie unter Beispiel für [Single Thread-Anwendung mit langer Berechnung](https://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="559a6-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="559a6-121">Zuerst wird ein Delegat erstellt, der keine Argumente akzeptiert.</span><span class="sxs-lookup"><span data-stu-id="559a6-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="559a6-122">Anschließend <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="559a6-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="559a6-123">Dieser Aufruf von <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> erfordert zwei Parameter: die Priorität, die auf festgelegt ist, <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType> und der Rückruf, der durch eine Instanz des Delegaten übermittelt wird `NextPrimeDelegate` .</span><span class="sxs-lookup"><span data-stu-id="559a6-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="559a6-124">Single-Threaded Application with Long-Running Calculation Sample (Singlethread-Anwendung mit Beispiel für Berechnung mit langer Laufzeit)</span><span class="sxs-lookup"><span data-stu-id="559a6-124">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="559a6-125">Führt eine Delegaten asynchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-125">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-126">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-126">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="559a6-127">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-127">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="559a6-128">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-128">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="559a6-129">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-129">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="559a6-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-131">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-131">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="559a6-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Gibt ein- <xref:System.Windows.Threading.DispatcherOperation> Objekt zurück, das zum interagieren mit dem Delegaten verwendet werden kann, wenn sich der Delegat in der Ereignis Warteschlange befindet</span><span class="sxs-lookup"><span data-stu-id="559a6-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="559a6-134">Das <xref:System.Windows.Threading.DispatcherOperation> von zurückgegebene-Objekt <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="559a6-134">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="559a6-135">Ändern der des Delegaten, <xref:System.Windows.Threading.DispatcherPriority> während die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-135">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-136">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="559a6-136">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-137">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-137">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="559a6-138">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-138">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="559a6-139">Wenn mehrere <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Aufrufe gleichzeitig durchgeführt werden <xref:System.Windows.Threading.DispatcherPriority> , werden Sie in der Reihenfolge ausgeführt, in der die Aufrufe durchgeführt wurden.</span><span class="sxs-lookup"><span data-stu-id="559a6-139">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="559a6-140">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für einen aufgerufen wird <xref:System.Windows.Threading.Dispatcher> , der heruntergefahren wurde, wird die Status-Eigenschaft des zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf festgelegt <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> .</span><span class="sxs-lookup"><span data-stu-id="559a6-140">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="559a6-141">Der Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-141">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="559a6-142">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="559a6-142">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="559a6-143">Kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="559a6-143">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="559a6-144">Führt den angegebenen Delegaten asynchron mit den angegebenen Argumenten für den Thread aus, für den der <see cref="T:System.Windows.Threading.Dispatcher" /> erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-144">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="559a6-145">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="559a6-145">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-146">Das <xref:System.Windows.Threading.DispatcherOperation> von zurückgegebene-Objekt <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="559a6-146">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="559a6-147">Ändern der des Delegaten, <xref:System.Windows.Threading.DispatcherPriority> während die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-147">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-148">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="559a6-148">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-149">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-149">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="559a6-150">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-150">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="559a6-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="559a6-152">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-152">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="559a6-153">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-153">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="559a6-154">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-154">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="559a6-155">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-155">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="559a6-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="559a6-157">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-157">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-158">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für einen aufgerufen wird <xref:System.Windows.Threading.Dispatcher> , der heruntergefahren wurde, wird die Status-Eigenschaft des zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf festgelegt <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> .</span><span class="sxs-lookup"><span data-stu-id="559a6-158">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-159">Die Priorität, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-159">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="559a6-160">Der Delegat zu einer Methode, die keine Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-160">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="559a6-161">Führt den angegebenen Delegaten asynchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-161">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-162">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="559a6-162">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-163">Wenn mehrere <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Aufrufe gleichzeitig durchgeführt werden <xref:System.Windows.Threading.DispatcherPriority> , werden Sie in der Reihenfolge ausgeführt, in der die Aufrufe durchgeführt wurden.</span><span class="sxs-lookup"><span data-stu-id="559a6-163">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="559a6-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Gibt ein- <xref:System.Windows.Threading.DispatcherOperation> Objekt zurück, das zum interagieren mit dem Delegaten verwendet werden kann, wenn sich der Delegat in der Ereignis Warteschlange befindet</span><span class="sxs-lookup"><span data-stu-id="559a6-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="559a6-165">Das <xref:System.Windows.Threading.DispatcherOperation> von zurückgegebene-Objekt <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="559a6-165">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="559a6-166">Ändern der des Delegaten, <xref:System.Windows.Threading.DispatcherPriority> während die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-166">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-167">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="559a6-167">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-168">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-168">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="559a6-169">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-169">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="559a6-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="559a6-171">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-171">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="559a6-172">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-172">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="559a6-173">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-173">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="559a6-174">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-174">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="559a6-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-176">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-176">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-177">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für einen aufgerufen wird <xref:System.Windows.Threading.Dispatcher> , der heruntergefahren wurde, wird die Status-Eigenschaft des zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf festgelegt <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> .</span><span class="sxs-lookup"><span data-stu-id="559a6-177">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="559a6-178">Im folgenden Beispiel wird gezeigt, wie Sie einen Vorgang auf einem platzieren <xref:System.Windows.Threading.Dispatcher> .</span><span class="sxs-lookup"><span data-stu-id="559a6-178">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="559a6-179">Den vollständigen Quellcode dieses Beispiels finden Sie unter Beispiel für [Single Thread-Anwendung mit langer Berechnung](https://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="559a6-179">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="559a6-180">Zuerst wird ein Delegat erstellt, der keine Argumente akzeptiert.</span><span class="sxs-lookup"><span data-stu-id="559a6-180">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="559a6-181">Anschließend <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="559a6-181">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="559a6-182">Da jeder <xref:System.Windows.Threading.DispatcherObject> über eine-Eigenschaft verfügt, die das-Objekt zurückgibt <xref:System.Windows.Threading.Dispatcher> , das ihm zugeordnet ist, wird das gewünschte <xref:System.Windows.Threading.Dispatcher> abgerufen, indem das abgerufen wird <xref:System.Windows.Threading.DispatcherObject> , in diesem Fall ein mit dem <xref:System.Windows.Controls.Button> Namen `startStopButton` .</span><span class="sxs-lookup"><span data-stu-id="559a6-182">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="559a6-183">Der Aufruf von <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> erfordert zwei Parameter: die Priorität, die auf festgelegt ist, <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType> und der Rückruf, der über eine Instanz des Delegaten übermittelt wird `NextPrimeDelegate` .</span><span class="sxs-lookup"><span data-stu-id="559a6-183">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-184"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-184"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-185"><paramref name="priority" /> ist kein gültiger <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-185"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="559a6-186">Single-Threaded Application with Long-Running Calculation Sample (Singlethread-Anwendung mit Beispiel für Berechnung mit langer Laufzeit)</span><span class="sxs-lookup"><span data-stu-id="559a6-186">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="559a6-187">Der Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-187">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-188">Die Priorität, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-188">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="559a6-189">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="559a6-189">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="559a6-190">Kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="559a6-190">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="559a6-191">Führt den angegebenen Delegaten asynchron mit den angegebenen Argumenten und der angegebenen Priorität für den Thread aus, für den der <see cref="T:System.Windows.Threading.Dispatcher" /> erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-191">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="559a6-192">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="559a6-192">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-193">Das <xref:System.Windows.Threading.DispatcherOperation> von zurückgegebene-Objekt <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="559a6-193">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="559a6-194">Ändern der des Delegaten, <xref:System.Windows.Threading.DispatcherPriority> während die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-194">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-195">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="559a6-195">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-196">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-196">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="559a6-197">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-197">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="559a6-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="559a6-199">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-199">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="559a6-200">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-200">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="559a6-201">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-201">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="559a6-202">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-202">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="559a6-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="559a6-204">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-204">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-205">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für einen aufgerufen wird <xref:System.Windows.Threading.Dispatcher> , der heruntergefahren wurde, wird die Status-Eigenschaft des zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf festgelegt <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> .</span><span class="sxs-lookup"><span data-stu-id="559a6-205">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-206">Die Priorität, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-206">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="559a6-207">Ein Delegat zu einer Methode, die ein Argument erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-207">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="559a6-208">Das Objekt, das als Argument an die angegebene Methode übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-208">The object to pass as an argument to the specified method.</span></span></param>
        <summary><span data-ttu-id="559a6-209">Führt den angegebenen Delegaten asynchron mit der angegebenen Priorität und dem angegebenen Argument auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-209">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-210">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="559a6-210">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-211">`arg` kann sein, `null` Wenn keine Argumente benötigt werden.</span><span class="sxs-lookup"><span data-stu-id="559a6-211">`arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="559a6-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Gibt ein- <xref:System.Windows.Threading.DispatcherOperation> Objekt zurück, das zum interagieren mit dem Delegaten verwendet werden kann, wenn sich der Delegat in der Ereignis Warteschlange befindet</span><span class="sxs-lookup"><span data-stu-id="559a6-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="559a6-213">Das <xref:System.Windows.Threading.DispatcherOperation> von zurückgegebene-Objekt <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="559a6-213">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="559a6-214">Ändern der des Delegaten, <xref:System.Windows.Threading.DispatcherPriority> während die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-214">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-215">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="559a6-215">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-216">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-216">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="559a6-217">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-217">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="559a6-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="559a6-219">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-219">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="559a6-220">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-220">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="559a6-221">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-221">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="559a6-222">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-222">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="559a6-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-224">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-224">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-225">Wenn mehrere <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Aufrufe gleichzeitig durchgeführt werden <xref:System.Windows.Threading.DispatcherPriority> , werden Sie in der Reihenfolge ausgeführt, in der die Aufrufe durchgeführt wurden.</span><span class="sxs-lookup"><span data-stu-id="559a6-225">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="559a6-226">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für einen aufgerufen wird <xref:System.Windows.Threading.Dispatcher> , der heruntergefahren wurde, wird die Status-Eigenschaft des zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf festgelegt <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> .</span><span class="sxs-lookup"><span data-stu-id="559a6-226">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>
  
## Examples  
 <span data-ttu-id="559a6-227">Im folgenden Beispiel wird gezeigt, wie Sie einen Vorgang auf einem platzieren <xref:System.Windows.Threading.Dispatcher> .</span><span class="sxs-lookup"><span data-stu-id="559a6-227">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="559a6-228">Zuerst wird ein Delegat erstellt, der ein Argument annimmt (in diesem Fall eine Zeichenfolge).</span><span class="sxs-lookup"><span data-stu-id="559a6-228">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="559a6-229">Anschließend <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="559a6-229">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="559a6-230">Da jeder <xref:System.Windows.Threading.DispatcherObject> über eine-Eigenschaft verfügt, die das-Objekt zurückgibt <xref:System.Windows.Threading.Dispatcher> , das ihm zugeordnet ist, wird das gewünschte <xref:System.Windows.Threading.Dispatcher> abgerufen, indem das abgerufen wird <xref:System.Windows.Threading.DispatcherObject> , in diesem Fall ein mit dem <xref:System.Windows.Controls.Grid> Namen `tomorrowsWeather` .</span><span class="sxs-lookup"><span data-stu-id="559a6-230">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="559a6-231">Der Aufruf von <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> erfordert drei Parameter: die Priorität, die auf festgelegt ist <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType> ; der Rückruf, der durch eine Instanz des Delegaten übermittelt wird, `OneArgDelegate` und eine Zeichenfolge mit dem Namen `weather` , die das Argument für den Rückruf ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-231">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-232"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-232"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-233"><paramref name="priority" /> ist kein gültiger <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-233"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="559a6-234">Single-Threaded Application with Long-Running Calculation Sample (Singlethread-Anwendung mit Beispiel für Berechnung mit langer Laufzeit)</span><span class="sxs-lookup"><span data-stu-id="559a6-234">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-235">Die Priorität, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-235">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="559a6-236">Ein Delegat zu einer Methode, die mehrere Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-236">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="559a6-237">Das Objekt, das als Argument an die angegebene Methode übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-237">The object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="559a6-238">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="559a6-238">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="559a6-239">Führt den angegebenen Delegaten asynchron mit der angegebenen Priorität und dem angegebenen Argumentarray auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-239">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-240">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der <see cref="T:System.Windows.Threading.Dispatcher" />-Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="559a6-240">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-241">Der- `arg` Parameter kann sein, `null` Wenn keine Argumente benötigt werden.</span><span class="sxs-lookup"><span data-stu-id="559a6-241">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="559a6-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Gibt ein- <xref:System.Windows.Threading.DispatcherOperation> Objekt zurück, das zum interagieren mit dem Delegaten verwendet werden kann, wenn sich der Delegat in der Ereignis Warteschlange befindet</span><span class="sxs-lookup"><span data-stu-id="559a6-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="559a6-243">Das <xref:System.Windows.Threading.DispatcherOperation> von zurückgegebene-Objekt <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="559a6-243">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="559a6-244">Ändern der des Delegaten, <xref:System.Windows.Threading.DispatcherPriority> während die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-244">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-245">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="559a6-245">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="559a6-246">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-246">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="559a6-247">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-247">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="559a6-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="559a6-249">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-249">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="559a6-250">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-250">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="559a6-251">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-251">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="559a6-252">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-252">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="559a6-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-254">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-254">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-255">Wenn mehrere <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Aufrufe gleichzeitig durchgeführt werden <xref:System.Windows.Threading.DispatcherPriority> , werden Sie in der Reihenfolge ausgeführt, in der die Aufrufe durchgeführt wurden.</span><span class="sxs-lookup"><span data-stu-id="559a6-255">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="559a6-256">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für einen aufgerufen wird <xref:System.Windows.Threading.Dispatcher> , der heruntergefahren wurde, wird die Status-Eigenschaft des zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf festgelegt <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> .</span><span class="sxs-lookup"><span data-stu-id="559a6-256">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-257"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-257"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="559a6-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="559a6-259">Single-Threaded Application with Long-Running Calculation Sample (Singlethread-Anwendung mit Beispiel für Berechnung mit langer Laufzeit)</span><span class="sxs-lookup"><span data-stu-id="559a6-259">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-260">Die Priorität, bei der mit dem Beenden des Verteilers begonnen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-260">The priority at which to begin shutting down the dispatcher.</span></span></param>
        <summary><span data-ttu-id="559a6-261">Initiiert ein asynchrones Beenden des <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-261">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> erfordert uneingeschränkte Benutzeroberflächen Berechtigungen.</span><span class="sxs-lookup"><span data-stu-id="559a6-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="559a6-263">Wenn das <xref:System.Windows.Threading.Dispatcher> Herunterfahren von gestartet wird, <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> wird das-Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> wird auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-263">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-264">Der <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="559a6-264">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="559a6-265">Wenn das Herunterfahren des Verteilers abgeschlossen ist, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> wird das-Ereignis ausgelöst, und die- <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> Eigenschaft ist auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-265">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-266">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="559a6-266">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="559a6-267">Bestimmt, ob der aufrufende Thread diesem <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-267">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <returns><span data-ttu-id="559a6-268"><see langword="true" />, wenn der aufrufende Thread diesem <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-268"><see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-269">Nur die <xref:System.Windows.Threading.Dispatcher> , für die ein <xref:System.Windows.Threading.DispatcherObject> erstellt wird, können auf das-Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-269">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="559a6-270">Verwenden <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Sie oder, um von einem anderen Thread aus auf das Objekt zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-270">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="559a6-271"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> kann von jedem Thread aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="559a6-271"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="559a6-272">Der Unterschied zwischen <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> und <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> ist <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> ein boolescher Wert, der angibt, ob der aufrufende Thread Zugriff auf hat <xref:System.Windows.Threading.Dispatcher> und <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> eine Ausnahme auslöst.</span><span class="sxs-lookup"><span data-stu-id="559a6-272">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>
  
## Examples  
 <span data-ttu-id="559a6-273">Im folgenden Beispiel wird verwendet <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> , um zu bestimmen, ob ein Thread Zugriff auf einen hat <xref:System.Windows.Controls.Button> .</span><span class="sxs-lookup"><span data-stu-id="559a6-273">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="559a6-274">Die- <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> Methode für das, <xref:System.Windows.Threading.Dispatcher> das zugeordnet <xref:System.Windows.Controls.Button> ist, wird aufgerufen, um den Zugriff auf den Thread zu überprüfen.</span><span class="sxs-lookup"><span data-stu-id="559a6-274">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="559a6-275">Wenn der aufrufende Thread auf das zugreifen <xref:System.Windows.Threading.Dispatcher> kann, <xref:System.Windows.Controls.Button> wird das aktualisiert, indem auf die Member der zugegriffen wird <xref:System.Windows.Controls.Button> . andernfalls wird ein Delegat, der als <xref:System.Windows.Controls.Button> Argument akzeptiert, auf dem platziert <xref:System.Windows.Threading.Dispatcher> .</span><span class="sxs-lookup"><span data-stu-id="559a6-275">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="559a6-276">Der <xref:System.Windows.Threading.Dispatcher> delegiert die Arbeit der Aktualisierung von <xref:System.Windows.Controls.Button> .</span><span class="sxs-lookup"><span data-stu-id="559a6-276">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="559a6-277">Ruft den <see cref="T:System.Windows.Threading.Dispatcher" /> für den derzeit ausgeführten Thread ab bzw. erstellt einen neuen, wenn dem Thread noch kein <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-277">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span></span></summary>
        <value><span data-ttu-id="559a6-278">Der Verteiler, der dem aktuellen Thread zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-278">The dispatcher associated with the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-279">Wenn ein <xref:System.Windows.Threading.Dispatcher> dem aktuellen Thread nicht zugeordnet ist, wird ein neuer <xref:System.Windows.Threading.Dispatcher> erstellt.</span><span class="sxs-lookup"><span data-stu-id="559a6-279">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="559a6-280">Dies ist bei der <xref:System.Windows.Threading.Dispatcher.FromThread%2A>-Methode nicht der Fall.</span><span class="sxs-lookup"><span data-stu-id="559a6-280">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="559a6-281"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> Gibt zurück, `null` Wenn dem angegebenen Thread kein Verteiler zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-281"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="559a6-282">Deaktiviert Verarbeitung der <see cref="T:System.Windows.Threading.Dispatcher" />-Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="559a6-282">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></summary>
        <returns><span data-ttu-id="559a6-283">Eine Struktur, mit der die Dispatcherverarbeitung wieder aktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-283">A structure used to re-enable dispatcher processing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-284">Die Deaktivierung der Verteiler Verarbeitung ist eine erweiterte Methode, mit der die Wahrscheinlichkeit eines nicht verknüpften erneuten eintreten vermieden werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-284">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="559a6-285">Die Deaktivierung der Verarbeitung hat folgende Auswirkungen:</span><span class="sxs-lookup"><span data-stu-id="559a6-285">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="559a6-286">CLR-Sperren leiten Nachrichten nicht intern.</span><span class="sxs-lookup"><span data-stu-id="559a6-286">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="559a6-287"><xref:System.Windows.Threading.DispatcherFrame> Objekte dürfen nicht per pushübertragung übermittelt werden.</span><span class="sxs-lookup"><span data-stu-id="559a6-287"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="559a6-288">Die Nachrichtenverarbeitung ist nicht zulässig.</span><span class="sxs-lookup"><span data-stu-id="559a6-288">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="559a6-289">Die- <xref:System.Windows.Threading.DispatcherProcessingDisabled> Struktur, die <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> zurückgibt, wenn Sie aufgerufen wird, kann verwendet werden, um die Dispatcherverarbeitung erneut zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-289">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="559a6-290">Durch Aufrufen <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> von für die <xref:System.Windows.Threading.DispatcherProcessingDisabled> -Struktur wird die Verarbeitung wieder aktiviert.</span><span class="sxs-lookup"><span data-stu-id="559a6-290">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="559a6-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> kann nur für den Thread aufgerufen werden, dem der <xref:System.Windows.Threading.Dispatcher> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>
  
## Examples  
 <span data-ttu-id="559a6-292">Im folgenden Beispiel wird gezeigt, wie die Verteiler Verarbeitung deaktiviert und die Verteiler Verarbeitung erneut aktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-292">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="559a6-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> wird in einer **using** -Anweisung aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="559a6-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="559a6-294"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> gibt eine- <xref:System.Windows.Threading.DispatcherProcessingDisabled> Struktur zurück, die als Objekt verwendet wird, das verworfen wird, wenn der **using** -Block beendet wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-294"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="559a6-295">Wenn <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> für die Struktur aufgerufen wird <xref:System.Windows.Threading.DispatcherProcessingDisabled> , wird die Dispatcherverarbeitung wieder aktiviert.</span><span class="sxs-lookup"><span data-stu-id="559a6-295">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="559a6-296">Anforderung zum Beenden aller Frames einschließlich geschachtelter Frames.</span><span class="sxs-lookup"><span data-stu-id="559a6-296">Requests that all frames exit, including nested frames.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromThread (thread As Thread) As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><span data-ttu-id="559a6-297">Der Thread, dessen <see cref="T:System.Windows.Threading.Dispatcher" /> abgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-297">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span></span></param>
        <summary><span data-ttu-id="559a6-298">Ruft den <see cref="T:System.Windows.Threading.Dispatcher" /> für den angegebenen Thread ab.</span><span class="sxs-lookup"><span data-stu-id="559a6-298">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span></span></summary>
        <returns><span data-ttu-id="559a6-299">Der Verteiler für <paramref name="thread" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-299">The dispatcher for <paramref name="thread" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-300">Wenn für den angegebenen Thread kein Verteiler verfügbar ist, `null` wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="559a6-300">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="559a6-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> erstellt keinen <xref:System.Windows.Threading.Dispatcher> in einem Thread, der über keinen verfügt <xref:System.Windows.Threading.Dispatcher> .</span><span class="sxs-lookup"><span data-stu-id="559a6-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="559a6-302">Ein neues <xref:System.Windows.Threading.Dispatcher> wird für einen Thread erstellt, der nicht bereits über einen verfügt, <xref:System.Windows.Threading.Dispatcher> Wenn versucht wird, <xref:System.Windows.Threading.Dispatcher> mithilfe der-Eigenschaft zu erhalten <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-302">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="559a6-303">Bestimmt, ob der <see cref="T:System.Windows.Threading.Dispatcher" /> die Beendigung abgeschlossen hat.</span><span class="sxs-lookup"><span data-stu-id="559a6-303">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span></span></summary>
        <value><span data-ttu-id="559a6-304"><see langword="true" />, wenn der Verteiler die Beendigung abgeschlossen hat, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-304"><see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-305">Wenn das <xref:System.Windows.Threading.Dispatcher> Herunterfahren von gestartet wird, <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> wird das-Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> wird auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-305">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-306">Der <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="559a6-306">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="559a6-307">Wenn das Herunterfahren des Verteilers abgeschlossen ist, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> wird das-Ereignis ausgelöst, und die- <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> Eigenschaft ist auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-307">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-308">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="559a6-308">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="559a6-309">Bestimmt, ob der <see cref="T:System.Windows.Threading.Dispatcher" /> gerade beendet wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-309">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span></span></summary>
        <value><span data-ttu-id="559a6-310"><see langword="true" />, wenn der <see cref="T:System.Windows.Threading.Dispatcher" /> gerade beendet wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-310"><see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-311">Wenn das <xref:System.Windows.Threading.Dispatcher> Herunterfahren von gestartet wird, <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> wird das-Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> wird auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-311">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-312">Der <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="559a6-312">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="559a6-313">Wenn das Herunterfahren des Verteilers abgeschlossen ist, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> wird das-Ereignis ausgelöst, und die- <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> Eigenschaft ist auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-313">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-314">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="559a6-314">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="559a6-315">Ruft die Auflistung von Hooks ab, die zusätzliche Ereignisinformationen zum <see cref="T:System.Windows.Threading.Dispatcher" /> bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="559a6-315">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <value><span data-ttu-id="559a6-316">Die Hooks, die diesem <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet sind.</span><span class="sxs-lookup"><span data-stu-id="559a6-316">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-317">Die- <xref:System.Windows.Threading.DispatcherHooks> Klasse stellt zusätzliche Ereignis Informationen zum bereit <xref:System.Windows.Threading.Dispatcher> , z. b. Wenn <xref:System.Windows.Threading.Dispatcher> inaktiv ist oder wenn ein Vorgang mit einem Vorgang abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-317">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="559a6-318">Führt den angegebenen Delegaten synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-318">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-319">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-319">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="559a6-320">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-320">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="559a6-321">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-321">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="559a6-322">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-322">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="559a6-323"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-323"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-324">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-324">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>
  
## Examples  
 <span data-ttu-id="559a6-326">Im folgenden Beispiel wird ein <xref:System.Windows.Threading.Dispatcher> Delegat unter Verwendung von auf einen platziert <xref:System.Windows.Threading.DispatcherPriority.Normal> <xref:System.Windows.Threading.Dispatcher.Invoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-326">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="559a6-327">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-327">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="559a6-328">Führt die angegebene <see cref="T:System.Action" /> synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-328">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="559a6-329">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-329">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-330">Die Priorität, die die Reihenfolge bestimmt, in der der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in der aufgerufen wird <see cref="T:System.Windows.Threading.Dispatcher" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-330">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="559a6-331">Führt die angegebene <see cref="T:System.Action" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-331">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="559a6-332">Ein Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-332">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="559a6-333">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="559a6-333">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="559a6-334">Kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="559a6-334">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="559a6-335">Führt den angegebenen Delegaten synchron mit den angegebenen Argumenten für den Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-335">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-336">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="559a6-336">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-337">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-337">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="559a6-338">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-338">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="559a6-339">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-339">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="559a6-340">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-340">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="559a6-341"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-341"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="559a6-342">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-342">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-344">Die Priorität, mit der die angegebene Methode aufgerufen wird, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="559a6-344">The priority with which the specified method is invoked, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="method"><span data-ttu-id="559a6-345">Ein Delegat zu einer Methode, die keine Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-345">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="559a6-346">Führt den angegebenen Delegaten synchron mit der angegebenen Priorität für den Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-346">Executes the specified delegate synchronously at the specified priority on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-347">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="559a6-347">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-348">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-348">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="559a6-349">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-349">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="559a6-350">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-350">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="559a6-351">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-351">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="559a6-352"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-352"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-353">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-353">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>
  
## Examples  
 <span data-ttu-id="559a6-355">Im folgenden Beispiel wird ein <xref:System.Windows.Threading.Dispatcher> Delegat unter Verwendung von auf einen platziert <xref:System.Windows.Threading.DispatcherPriority.Normal> <xref:System.Windows.Threading.Dispatcher.Invoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-355">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="559a6-356"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-356"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-357"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="559a6-357"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-358"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-358"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="559a6-359">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-359">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-360">Die Priorität, die die Reihenfolge bestimmt, in der der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in der aufgerufen wird <see cref="T:System.Windows.Threading.Dispatcher" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-360">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="559a6-361">Ein Objekt, das angibt, ob die Aktion abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="559a6-361">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="559a6-362">Führt die angegebene <see cref="T:System.Action" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-362">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="559a6-363">Ein Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-363">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="559a6-364">Die maximale Zeitspanne, die auf den Start des Vorgangs gewartet werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-364">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="559a6-365">Nachdem der Vorgang gestartet wurde, wird er jedoch fertiggestellt, bevor diese Methode zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-365">However, once the operation starts, it will complete before this method returns.</span></span> <span data-ttu-id="559a6-366">Um eine unbegrenzte Wartezeit anzugeben, verwenden Sie den Wert-1.</span><span class="sxs-lookup"><span data-stu-id="559a6-366">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="559a6-367">In einem gleichen Thread-Befehl werden alle anderen negativen Werte in-1 konvertiert, was zu einem unendlichen warte Vorgang führt.</span><span class="sxs-lookup"><span data-stu-id="559a6-367">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="559a6-368">Bei einem Thread übergreifenden-aufrufbefehl wird durch einen anderen negativen Wert eine ausgelöst <see cref="T:System.ArgumentOutOfRangeException" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-368">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <param name="args"><span data-ttu-id="559a6-369">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="559a6-369">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="559a6-370">Kann sein, <see langword="null" /> Wenn keine Argumente benötigt werden.</span><span class="sxs-lookup"><span data-stu-id="559a6-370">Can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="559a6-371">Führt den angegebenen Delegaten in der angegebenen Zeitspanne mit der angegebenen Priorität und den angegebenen Argumenten synchron für den Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-371">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-372">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="559a6-372">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-373">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-373">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="559a6-374">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-374">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="559a6-375">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-375">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="559a6-376">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-376">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="559a6-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="559a6-378">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-378">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control won't return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-380"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-380"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="559a6-381"><paramref name="timeout" /> ist eine negative Zahl ungleich-1, und Sie rufen Thread übergreifend auf.</span><span class="sxs-lookup"><span data-stu-id="559a6-381"><paramref name="timeout" /> is a negative number other than -1, and you're invoking across threads.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="559a6-382">Ein Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-382">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-383">Die Priorität, mit der die angegebene Methode aufgerufen wird, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="559a6-383">The priority with which the specified method is invoked, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="559a6-384">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="559a6-384">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="559a6-385">Kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="559a6-385">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="559a6-386">Führt den angegebenen Delegaten mit der angegebenen Priorität und den angegebenen Argumenten synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-386">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-387">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="559a6-387">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-388">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-388">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="559a6-389">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-389">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="559a6-390">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-390">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="559a6-391">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-391">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="559a6-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="559a6-393">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-393">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-395">Die Priorität, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-395">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="559a6-396">Ein Delegat zu einer Methode, die ein Argument erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-396">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="559a6-397">Ein Objekt, das als Argument an die angegebene Methode übergeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-397">An object to pass as an argument to the given method.</span></span></param>
        <summary><span data-ttu-id="559a6-398">Führt den angegebenen Delegaten mit der angegebenen Priorität und dem angegebenen Argument synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-398">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-399">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="559a6-399">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-400">`arg` kann sein, `null` Wenn ein Argument nicht benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-400">`arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="559a6-401">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-401">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="559a6-402">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-402">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="559a6-403">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-403">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="559a6-404">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-404">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="559a6-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-406">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-406">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="559a6-408"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-408"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-409"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="559a6-409"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-410"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-410"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-411">Die Priorität, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-411">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="559a6-412">Die maximale Zeitspanne, die auf den Start des Vorgangs gewartet werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-412">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="559a6-413">Nachdem der Vorgang gestartet wurde, wird er vor der Rückgabe dieser Methode beendet.</span><span class="sxs-lookup"><span data-stu-id="559a6-413">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="559a6-414">Um eine unbegrenzte Wartezeit anzugeben, verwenden Sie den Wert-1.</span><span class="sxs-lookup"><span data-stu-id="559a6-414">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="559a6-415">In einem gleichen Thread-Befehl werden alle anderen negativen Werte in-1 konvertiert, was zu einem unendlichen warte Vorgang führt.</span><span class="sxs-lookup"><span data-stu-id="559a6-415">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="559a6-416">Bei einem Thread übergreifenden-aufrufbefehl wird durch einen anderen negativen Wert eine ausgelöst <see cref="T:System.ArgumentOutOfRangeException" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-416">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <param name="method"><span data-ttu-id="559a6-417">Der Delegat zu einer Methode, die keine Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-417">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="559a6-418">Führt den angegebenen Delegaten synchron mit der angegebenen Priorität und dem angegebenen Timeoutwert auf dem Thread aus, in dem der <see cref="T:System.Windows.Threading.Dispatcher" /> erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-418">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span></span></summary>
        <returns><span data-ttu-id="559a6-419">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="559a6-419">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-420">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-420">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="559a6-421">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-421">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="559a6-422">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-422">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="559a6-423">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-423">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="559a6-424"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-424"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-425">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-425">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-426"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-426"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-427"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-427"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="559a6-428"><paramref name="timeout" /> ist eine negative Zahl ungleich-1, und diese Methode wurde Thread übergreifend aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="559a6-428"><paramref name="timeout" /> is a negative number other than -1, and this method was invoked across threads.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="559a6-429"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-429"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-430"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="559a6-430"><paramref name="priority" /> is not a valid priority.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="559a6-431">Ein Aktions Delegat, der durch den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-431">An Action delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-432">Die Priorität, die die Reihenfolge bestimmt, in der der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in der aufgerufen wird <see cref="T:System.Windows.Threading.Dispatcher" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-432">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="559a6-433">Ein Objekt, das angibt, ob die Aktion abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="559a6-433">An object that indicates whether to cancel the action.</span></span></param>
        <param name="timeout"><span data-ttu-id="559a6-434">Die maximale Zeitspanne, die auf den Start des Vorgangs gewartet werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-434">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="559a6-435">Nachdem der Vorgang gestartet wurde, wird er vor der Rückgabe dieser Methode beendet.</span><span class="sxs-lookup"><span data-stu-id="559a6-435">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="559a6-436">Um eine unbegrenzte Wartezeit anzugeben, verwenden Sie den Wert-1.</span><span class="sxs-lookup"><span data-stu-id="559a6-436">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="559a6-437">In einem gleichen Thread-Befehl werden alle anderen negativen Werte in-1 konvertiert, was zu einem unendlichen warte Vorgang führt.</span><span class="sxs-lookup"><span data-stu-id="559a6-437">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="559a6-438">Bei einem Thread übergreifenden-aufrufbefehl wird durch einen anderen negativen Wert eine ausgelöst <see cref="T:System.ArgumentOutOfRangeException" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-438">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <summary><span data-ttu-id="559a6-439">Führt die angegebene <see cref="T:System.Action" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-439">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-440"><paramref name="callback" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-440"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="559a6-441"><paramref name="timeout" /> ist eine negative Zahl ungleich-1, und diese Methode wurde Thread übergreifend aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="559a6-441"><paramref name="timeout" /> is a negative number other than -1, and this method was invoked across threads.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-442"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="559a6-442"><paramref name="priority" /> is not a valid priority.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="559a6-443">Ein Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-443">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="559a6-444">Die maximale Zeitspanne, die auf den Start des Vorgangs gewartet werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-444">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="559a6-445">Nachdem der Vorgang gestartet wurde, wird er vor der Rückgabe dieser Methode beendet.</span><span class="sxs-lookup"><span data-stu-id="559a6-445">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="559a6-446">Um eine unbegrenzte Wartezeit anzugeben, verwenden Sie den Wert-1.</span><span class="sxs-lookup"><span data-stu-id="559a6-446">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="559a6-447">In einem gleichen Thread-Befehl werden alle anderen negativen Werte in-1 konvertiert, was zu einem unendlichen warte Vorgang führt.</span><span class="sxs-lookup"><span data-stu-id="559a6-447">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="559a6-448">Bei einem Thread übergreifenden-aufrufbefehl wird durch einen anderen negativen Wert eine ausgelöst <see cref="T:System.ArgumentOutOfRangeException" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-448">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-449">Die Priorität, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-449">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="559a6-450">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="559a6-450">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="559a6-451">Kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="559a6-451">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="559a6-452">Führt den angegebenen Delegaten in der angegebenen Zeitspanne mit der angegebenen Priorität und den angegebenen Argumenten synchron für den Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-452">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-453">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="559a6-453">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-454">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-454">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="559a6-455">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-455">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="559a6-456">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-456">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="559a6-457">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-457">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="559a6-458"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-458"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="559a6-459">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-459">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-460"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-460"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-461"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-461"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="559a6-462"><paramref name="timeout" /> ist eine negative Zahl ungleich-1, und diese Methode wurde Thread übergreifend aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="559a6-462"><paramref name="timeout" /> is a negative number other than -1, and this method was invoked across threads.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="559a6-463"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-463"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-464"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="559a6-464"><paramref name="priority" /> is not a valid priority.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-465">Die Priorität, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-465">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="559a6-466">Ein Delegat zu einer Methode, die mehrere Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-466">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="559a6-467">Ein Objekt, das als Argument an die angegebene Methode übergeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-467">An object to pass as an argument to the given method.</span></span></param>
        <param name="args"><span data-ttu-id="559a6-468">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="559a6-468">An array of objects to pass as arguments to the given method.</span></span></param>
        <summary><span data-ttu-id="559a6-469">Führt den angegebenen Delegaten mit der angegebenen Priorität und den angegebenen Argumenten synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-469">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-470">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="559a6-470">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-471">`arg` kann sein, `null` Wenn ein Argument nicht benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-471">`arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="559a6-472">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-472">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="559a6-473">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-473">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="559a6-474">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-474">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="559a6-475">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-475">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="559a6-476"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-476"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-477">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-477">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-478"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-478"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="559a6-479"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-479"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-480"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="559a6-480"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-481"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-481"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-482">Die Priorität, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-482">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="559a6-483">Die maximale Zeitspanne, die auf den Start des Vorgangs gewartet werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-483">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="559a6-484">Nachdem der Vorgang gestartet wurde, wird er vor der Rückgabe dieser Methode beendet.</span><span class="sxs-lookup"><span data-stu-id="559a6-484">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="559a6-485">Um eine unbegrenzte Wartezeit anzugeben, verwenden Sie den Wert-1.</span><span class="sxs-lookup"><span data-stu-id="559a6-485">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="559a6-486">In einem gleichen Thread-Befehl werden alle anderen negativen Werte in-1 konvertiert, was zu einem unendlichen warte Vorgang führt.</span><span class="sxs-lookup"><span data-stu-id="559a6-486">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="559a6-487">Bei einem Thread übergreifenden-aufrufbefehl wird durch einen anderen negativen Wert eine ausgelöst <see cref="T:System.ArgumentOutOfRangeException" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-487">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <param name="method"><span data-ttu-id="559a6-488">Ein Delegat zu einer Methode, die mehrere Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-488">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="559a6-489">Ein Objekt, das als Argument an die angegebene Methode übergeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-489">An object to pass as an argument to the given method.</span></span> <span data-ttu-id="559a6-490">Dies kann <see langword="null" /> sein, wenn keine Argumente benötigt werden.</span><span class="sxs-lookup"><span data-stu-id="559a6-490">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="559a6-491">Führt den angegebenen Delegaten mit der angegebenen Priorität und dem angegebenen Argument synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-491">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-492">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="559a6-492">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-493">`arg` kann sein, `null` Wenn ein Argument nicht benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-493">`arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="559a6-494">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-494">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="559a6-495">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-495">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="559a6-496">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-496">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="559a6-497">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-497">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="559a6-498"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-498"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-499">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-499">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-500"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-500"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="559a6-501"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-501"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-502"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="559a6-502"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-503"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-503"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-504">Die Priorität, relativ zu den anderen ausstehenden Vorgängen in der <see cref="T:System.Windows.Threading.Dispatcher" /> Ereignis Warteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-504">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, with which the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="559a6-505">Die maximale Zeitspanne, die auf den Start des Vorgangs gewartet werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-505">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="559a6-506">Nachdem der Vorgang gestartet wurde, wird er vor der Rückgabe dieser Methode beendet.</span><span class="sxs-lookup"><span data-stu-id="559a6-506">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="559a6-507">Um eine unbegrenzte Wartezeit anzugeben, verwenden Sie den Wert-1.</span><span class="sxs-lookup"><span data-stu-id="559a6-507">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="559a6-508">In einem gleichen Thread-Befehl werden alle anderen negativen Werte in-1 konvertiert, was zu einem unendlichen warte Vorgang führt.</span><span class="sxs-lookup"><span data-stu-id="559a6-508">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="559a6-509">Bei einem Thread übergreifenden-aufrufbefehl wird durch einen anderen negativen Wert eine ausgelöst <see cref="T:System.ArgumentOutOfRangeException" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-509">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <param name="method"><span data-ttu-id="559a6-510">Ein Delegat zu einer Methode, die mehrere Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-510">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="559a6-511">Ein Objekt, das als Argument an die angegebene Methode übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-511">An object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="559a6-512">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="559a6-512">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="559a6-513">Führt den angegebenen Delegaten mit der angegebenen Priorität und den angegebenen Argumenten synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-513">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-514">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="559a6-514">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-515">`arg` kann sein, `null` Wenn kein Argument benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-515">`arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="559a6-516">In WPF kann nur der Thread, der einen erstellt hat, auf <xref:System.Windows.Threading.DispatcherObject> dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-516">In WPF, only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="559a6-517">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen-Thread ausgelöst wird, den Inhalt eines nicht aktualisieren <xref:System.Windows.Controls.Button> , der im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-517">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="559a6-518">Damit der Hintergrund Thread auf die Content-Eigenschaft von zugreifen <xref:System.Windows.Controls.Button> kann, muss der Hintergrund Thread die Arbeit an die <xref:System.Windows.Threading.Dispatcher> mit dem UI-Thread zugeordnete delegieren.</span><span class="sxs-lookup"><span data-stu-id="559a6-518">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="559a6-519">Dies wird mithilfe von oder erreicht <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-519">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="559a6-520"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="559a6-520"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="559a6-521">Der-Vorgang wird der-Ereignis Warteschlange von <xref:System.Windows.Threading.Dispatcher> am angegebenen hinzugefügt <xref:System.Windows.Threading.DispatcherPriority> .</span><span class="sxs-lookup"><span data-stu-id="559a6-521">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="559a6-522"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-522"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="559a6-523"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-523"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-524"><paramref name="priority" /> ist kein gültiger <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-524"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-525"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-525"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="559a6-526"><paramref name="timeout" /> ist eine negative Zahl ungleich-1, und diese Methode wurde Thread übergreifend aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="559a6-526"><paramref name="timeout" /> is a negative number other than -1, and this method was invoked across threads.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="559a6-527">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="559a6-527">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="559a6-528">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-528">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="559a6-529">Führt die angegebene <see cref="T:System.Func`1" /> synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-529">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-530">Der von zurückgegebene Wert <paramref name="callback" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-530">The value returned by <paramref name="callback" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="559a6-531">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="559a6-531">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="559a6-532">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-532">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-533">Die Priorität, die die Reihenfolge bestimmt, in der der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in der aufgerufen wird <see cref="T:System.Windows.Threading.Dispatcher" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-533">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="559a6-534">Führt die angegebene <see cref="T:System.Func`1" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-534">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-535">Der von zurückgegebene Wert <paramref name="callback" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-535">The value returned by <paramref name="callback" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="559a6-536">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="559a6-536">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="559a6-537">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-537">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-538">Die Priorität, die die Reihenfolge bestimmt, in der der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in der aufgerufen wird <see cref="T:System.Windows.Threading.Dispatcher" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-538">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="559a6-539">Ein Objekt, das angibt, ob der Vorgang abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="559a6-539">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="559a6-540">Führt die angegebene <see cref="T:System.Func`1" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-540">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-541">Der von zurückgegebene Wert <paramref name="callback" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-541">The value returned by <paramref name="callback" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken, timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="559a6-542">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="559a6-542">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="559a6-543">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-543">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-544">Die Priorität, die die Reihenfolge bestimmt, in der der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in der aufgerufen wird <see cref="T:System.Windows.Threading.Dispatcher" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-544">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="559a6-545">Ein Objekt, das angibt, ob der Vorgang abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="559a6-545">An object that indicates whether to cancel the operation.</span></span></param>
        <param name="timeout"><span data-ttu-id="559a6-546">Die maximale Zeitspanne, die auf den Start des Vorgangs gewartet werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-546">The maximum amount of time to wait for the operation to start.</span></span> <span data-ttu-id="559a6-547">Nachdem der Vorgang gestartet wurde, wird er vor der Rückgabe dieser Methode beendet.</span><span class="sxs-lookup"><span data-stu-id="559a6-547">Once the operation has started, it will complete before this method returns.</span></span> <span data-ttu-id="559a6-548">Um eine unbegrenzte Wartezeit anzugeben, verwenden Sie den Wert-1.</span><span class="sxs-lookup"><span data-stu-id="559a6-548">To specify an infinite wait, use a value of -1.</span></span> <span data-ttu-id="559a6-549">In einem gleichen Thread-Befehl werden alle anderen negativen Werte in-1 konvertiert, was zu einem unendlichen warte Vorgang führt.</span><span class="sxs-lookup"><span data-stu-id="559a6-549">In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait.</span></span> <span data-ttu-id="559a6-550">Bei einem Thread übergreifenden-aufrufbefehl wird durch einen anderen negativen Wert eine ausgelöst <see cref="T:System.ArgumentOutOfRangeException" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-550">In a cross-thread call, any other negative value throws an <see cref="T:System.ArgumentOutOfRangeException" />.</span></span></param>
        <summary><span data-ttu-id="559a6-551">Führt die angegebene <see cref="T:System.Func`1" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-551">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-552">Der von zurückgegebene Wert <paramref name="callback" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-552">The value returned by <paramref name="callback" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-553"><paramref name="callback" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-553"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="559a6-554"><paramref name="timeout" /> ist eine negative Zahl ungleich-1, und die-Methode wurde Thread übergreifend aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="559a6-554"><paramref name="timeout" /> is a negative number other than -1, and the method was invoked across threads.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-555"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="559a6-555"><paramref name="priority" /> is not a valid priority.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="559a6-556">Führt den angegebenen Delegaten asynchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-556">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="559a6-557">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-557">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="559a6-558">Führt die angegebene <see cref="T:System.Action" /> asynchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-558">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-559">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="559a6-559">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="559a6-560">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-560">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-561">Die Priorität, die die Reihenfolge bestimmt, in der der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in der aufgerufen wird <see cref="T:System.Windows.Threading.Dispatcher" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-561">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="559a6-562">Führt die angegebene <see cref="T:System.Action" /> asynchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-562">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-563">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="559a6-563">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority, cancellationToken As CancellationToken) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="559a6-564">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-564">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-565">Die Priorität, die die Reihenfolge bestimmt, in der der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in der aufgerufen wird <see cref="T:System.Windows.Threading.Dispatcher" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-565">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="559a6-566">Ein Objekt, das angibt, ob die Aktion abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="559a6-566">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="559a6-567">Führt die angegebene <see cref="T:System.Action" /> asynchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-567">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-568">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="559a6-568">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="559a6-569">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="559a6-569">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="559a6-570">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-570">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="559a6-571">Führt die angegebene <see cref="T:System.Func`1" /> asynchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-571">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-572">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="559a6-572">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="559a6-573">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="559a6-573">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="559a6-574">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-574">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-575">Die Priorität, die die Reihenfolge bestimmt, in der der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in der aufgerufen wird <see cref="T:System.Windows.Threading.Dispatcher" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-575">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="559a6-576">Führt die angegebene <see cref="T:System.Func`1" /> asynchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-576">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-577">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="559a6-577">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority, cancellationToken As CancellationToken) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="559a6-578">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="559a6-578">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="559a6-579">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-579">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="559a6-580">Die Priorität, die die Reihenfolge bestimmt, in der der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in der aufgerufen wird <see cref="T:System.Windows.Threading.Dispatcher" /> .</span><span class="sxs-lookup"><span data-stu-id="559a6-580">The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="559a6-581">Ein Objekt, das angibt, ob der Vorgang abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="559a6-581">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="559a6-582">Führt die angegebene <see cref="T:System.Func`1" /> asynchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-582">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="559a6-583">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="559a6-583">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="559a6-584">Initiiert die synchrone Beendigung des <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-584">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-585"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> erfordert uneingeschränkte Benutzeroberflächen Berechtigungen.</span><span class="sxs-lookup"><span data-stu-id="559a6-585"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="559a6-586">Wenn das <xref:System.Windows.Threading.Dispatcher> Herunterfahren von gestartet wird, <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> wird das-Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> wird auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-586">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-587">Der <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="559a6-587">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="559a6-588">Wenn das Herunterfahren des Verteilers abgeschlossen ist, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> wird das-Ereignis ausgelöst, und die- <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> Eigenschaft ist auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-588">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-589">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="559a6-589">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame"><span data-ttu-id="559a6-590">Der Frame, den der Verteiler verarbeiten soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-590">The frame for the dispatcher to process.</span></span></param>
        <summary><span data-ttu-id="559a6-591">Tritt in eine Ausführungsschleife ein.</span><span class="sxs-lookup"><span data-stu-id="559a6-591">Enters an execute loop.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-592">Eine <xref:System.Windows.Threading.DispatcherFrame> stellt eine-Schleife dar, die ausstehende Arbeitselemente verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="559a6-592">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="559a6-593">Der Verteiler verarbeitet die Arbeitsaufgaben Warteschlange in einer-Schleife.</span><span class="sxs-lookup"><span data-stu-id="559a6-593">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="559a6-594">Die Schleife wird als Frame bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="559a6-594">The loop is referred to as a frame.</span></span>  <span data-ttu-id="559a6-595">Die ursprüngliche Schleife wird in der Regel von der Anwendung initiiert, indem aufgerufen wird <xref:System.Windows.Threading.Dispatcher.Run%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-595">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="559a6-596"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> gibt eine durch den-Parameter dargestellte Schleife ein `frame` .</span><span class="sxs-lookup"><span data-stu-id="559a6-596"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="559a6-597">Bei jeder Iterationen der Schleife prüft die- <xref:System.Windows.Threading.Dispatcher> Eigenschaft der- <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> <xref:System.Windows.Threading.DispatcherFrame> Klasse, um zu bestimmen, ob die Schleife fortgesetzt werden soll, oder ob Sie beendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-597">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="559a6-598"><xref:System.Windows.Threading.DispatcherFrame> ermöglicht, dass die <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> -Eigenschaft explizit festgelegt wird und die- <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> Eigenschaft auf dem-Objekt respektiert <xref:System.Windows.Threading.Dispatcher> .</span><span class="sxs-lookup"><span data-stu-id="559a6-598"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="559a6-599">Dies bedeutet <xref:System.Windows.Threading.Dispatcher> , dass beim Herunterfahren von Rahmen, die die Standard <xref:System.Windows.Threading.DispatcherFrame> Implementierung verwenden, beendet werden, sodass alle geschalbten Frames beendet werden können.</span><span class="sxs-lookup"><span data-stu-id="559a6-599">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>
  
## Examples  
 <span data-ttu-id="559a6-600">Im folgenden Beispiel wird gezeigt, wie ein verwendet wird <xref:System.Windows.Threading.DispatcherFrame> , um ähnliche Ergebnisse wie die-Methode zu erzielen [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-600">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="559a6-601"><paramref name="frame" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-601"><paramref name="frame" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="559a6-602"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> ist gleich <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-602"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span></span>  
  
<span data-ttu-id="559a6-603">- oder -</span><span class="sxs-lookup"><span data-stu-id="559a6-603">-or-</span></span> 
 <span data-ttu-id="559a6-604"><paramref name="frame" /> wird auf einem anderen <see cref="T:System.Windows.Threading.Dispatcher" /> ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="559a6-604"><paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span>  
  
<span data-ttu-id="559a6-605">- oder -</span><span class="sxs-lookup"><span data-stu-id="559a6-605">-or-</span></span> 
<span data-ttu-id="559a6-606">Verteilerverarbeitung wurde deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="559a6-606">Dispatcher processing has been disabled.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="559a6-607">Stellt den Hauptausführungsframe in die Ereigniswarteschlange von <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-607">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-608">Der <xref:System.Windows.Threading.Dispatcher> verarbeitet die Ereignis Warteschlange in einer-Schleife.</span><span class="sxs-lookup"><span data-stu-id="559a6-608">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="559a6-609">Die Schleife wird als Frame bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="559a6-609">The loop is referred to as a frame.</span></span>  <span data-ttu-id="559a6-610">Die ursprüngliche Schleife wird in der Regel von der Anwendung initiiert, indem aufgerufen wird <xref:System.Windows.Threading.Dispatcher.Run%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-610">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="559a6-611">Der Haupt Ausführungs Rahmen wird fortgesetzt, bis das <xref:System.Windows.Threading.Dispatcher> heruntergefahren wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-611">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownFinished As EventHandler " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="559a6-612">Tritt ein, wenn der <see cref="T:System.Windows.Threading.Dispatcher" /> die Beendigung abschließt.</span><span class="sxs-lookup"><span data-stu-id="559a6-612">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-613">Wenn das Herunterfahren eines <xref:System.Windows.Threading.Dispatcher> gestartet wird, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> -Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> wird auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-613">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-614">Der <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="559a6-614">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="559a6-615">Wenn das Herunterfahren des Verteilers abgeschlossen ist, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> wird das-Ereignis ausgelöst, und die- <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> Eigenschaft ist auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-615">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-616">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="559a6-616">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownStarted As EventHandler " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="559a6-617">Tritt ein, wenn der <see cref="T:System.Windows.Threading.Dispatcher" /> die Beendigung beginnt.</span><span class="sxs-lookup"><span data-stu-id="559a6-617">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-618">Wenn das Herunterfahren eines <xref:System.Windows.Threading.Dispatcher> gestartet wird, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> -Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> wird auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-618">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-619">Der <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="559a6-619">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="559a6-620">Wenn das Herunterfahren des Verteilers abgeschlossen ist, <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> wird das-Ereignis ausgelöst, und die- <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> Eigenschaft ist auf festgelegt `true` .</span><span class="sxs-lookup"><span data-stu-id="559a6-620">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="559a6-621">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="559a6-621">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="559a6-622">Ruft den Thread ab, dem dieser <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-622">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="559a6-623">Der Thread.</span><span class="sxs-lookup"><span data-stu-id="559a6-623">The thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="559a6-624">Tritt ein, wenn eine Threadausnahme ausgelöst und während der Ausführung eines Delegaten mit <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> oder <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> nicht abgefangen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-624">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-625">Dieses Ereignis wird ausgelöst, wenn eine Ausnahme ausgelöst wird, die während der Ausführung eines Delegaten mithilfe von <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder nicht abgefangen wurde <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="559a6-625">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="559a6-626">Ein Handler kann die Ausnahme als behandelt markieren, wodurch verhindert wird, dass der interne Ausnahmehandler aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-626">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="559a6-627">Ereignishandler für dieses Ereignis müssen mit Bedacht geschrieben werden, um zu vermeiden, dass sekundäre Ausnahmen erstellt werden, und alle auftretenden Ereignisse zu erfassen.</span><span class="sxs-lookup"><span data-stu-id="559a6-627">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="559a6-628">Es wird empfohlen, Speicherplatz zu vermeiden oder ressourcenintensive Vorgänge im-Handler durchzusetzen.</span><span class="sxs-lookup"><span data-stu-id="559a6-628">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="559a6-629">Das- <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> Ereignis bietet die Möglichkeit, das-Ereignis nicht zu erhöhen <xref:System.Windows.Threading.Dispatcher.UnhandledException> .</span><span class="sxs-lookup"><span data-stu-id="559a6-629">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="559a6-630">Das <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> -Ereignis wird zuerst ausgelöst, und wenn <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> für auf <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> festgelegt ist `false` , wird das- <xref:System.Windows.Threading.Dispatcher.UnhandledException> Ereignis nicht ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="559a6-630">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[add: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;add: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[remove: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;remove: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="559a6-631">Tritt ein, wenn eine Threadausnahme ausgelöst und nicht abgefangen wird, während ein Delegat mit <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> oder <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ausgeführt wird und sich in der Filterstufe befindet.</span><span class="sxs-lookup"><span data-stu-id="559a6-631">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-632">Dieses Ereignis wird während der Filter Phase für eine Ausnahme ausgelöst, die während der Ausführung eines Delegaten mithilfe von oder ausgelöst wird <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> und nicht abgefangen wird.</span><span class="sxs-lookup"><span data-stu-id="559a6-632">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="559a6-633">Die aufzurufende aufrufsstapel wird an dieser Stelle nicht entwickelt (Ausnahme der ersten Chance).</span><span class="sxs-lookup"><span data-stu-id="559a6-633">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="559a6-634">Ereignishandler für dieses Ereignis müssen mit Bedacht geschrieben werden, um zu vermeiden, dass sekundäre Ausnahmen erstellt werden, und alle auftretenden Ereignisse zu erfassen.</span><span class="sxs-lookup"><span data-stu-id="559a6-634">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="559a6-635">Es wird empfohlen, Speicherplatz zu vermeiden oder ressourcenintensive Vorgänge im-Handler durchzusetzen.</span><span class="sxs-lookup"><span data-stu-id="559a6-635">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="559a6-636">Das- <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> Ereignis bietet die Möglichkeit, das-Ereignis nicht zu erhöhen <xref:System.Windows.Threading.Dispatcher.UnhandledException> .</span><span class="sxs-lookup"><span data-stu-id="559a6-636">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="559a6-637">Das <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> -Ereignis wird zuerst ausgelöst, und wenn <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> für auf <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> festgelegt ist `false` , wird das- <xref:System.Windows.Threading.Dispatcher.UnhandledException> Ereignis nicht ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="559a6-637">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-638">Die zu überprüfende Priorität.</span><span class="sxs-lookup"><span data-stu-id="559a6-638">The priority to check.</span></span></param>
        <param name="parameterName"><span data-ttu-id="559a6-639">Eine Zeichenfolge, die von der Ausnahme zurückgegeben wird, die auftritt, wenn die Priorität ungültig ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-639">A string that will be returned by the exception that occurs if the priority is invalid.</span></span></param>
        <summary><span data-ttu-id="559a6-640">Ermittelt, ob die angegebene <see cref="T:System.Windows.Threading.DispatcherPriority" /> eine gültige Priorität ist.</span><span class="sxs-lookup"><span data-stu-id="559a6-640">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="559a6-641"><paramref name="priority" /> ist kein gültiger <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="559a6-641"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="559a6-642">Bestimmt, ob der aufrufende Thread auf dieses <see cref="T:System.Windows.Threading.Dispatcher" /> zugreifen kann.</span><span class="sxs-lookup"><span data-stu-id="559a6-642">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-643">Nur der Thread, <xref:System.Windows.Threading.Dispatcher> auf dem der erstellt wird, kann auf das zugreifen <xref:System.Windows.Threading.Dispatcher> .</span><span class="sxs-lookup"><span data-stu-id="559a6-643">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="559a6-644">Diese Methode ist öffentlich. Daher kann jeder Thread überprüfen, ob er auf zugreifen kann <xref:System.Windows.Threading.Dispatcher> .</span><span class="sxs-lookup"><span data-stu-id="559a6-644">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="559a6-645">Der Unterschied zwischen <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> und <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> ist <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> ein boolescher Wert, wenn der aufrufende Thread keinen Zugriff auf den hat <xref:System.Windows.Threading.Dispatcher> und <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> eine Ausnahme auslöst.</span><span class="sxs-lookup"><span data-stu-id="559a6-645">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>
  
## Examples  
 <span data-ttu-id="559a6-646">Im folgenden Beispiel wird verwendet <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> , um zu bestimmen, ob ein Thread Zugriff auf den Thread hat, in dem eine <xref:System.Windows.Controls.Button> erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-646">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="559a6-647">Die-Methode nimmt ein-Objekt als Argument an, das in einen umgewandelt wird <xref:System.Windows.Controls.Button> .</span><span class="sxs-lookup"><span data-stu-id="559a6-647">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="559a6-648">Die- <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> Methode für den <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Controls.Button> wird aufgerufen, um den Zugriff auf den Thread zu überprüfen.</span><span class="sxs-lookup"><span data-stu-id="559a6-648">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="559a6-649">Wenn der aufrufenden Thread Zugriff auf das-Element hat <xref:System.Windows.Threading.Dispatcher> , <xref:System.Windows.Controls.Button> wird das aktualisiert, indem nur auf die Member der zugegriffen wird <xref:System.Windows.Controls.Button> .</span><span class="sxs-lookup"><span data-stu-id="559a6-649">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="559a6-650">Wenn der aufrufende Thread keinen Zugriff hat, wird eine ausgelöst <xref:System.InvalidOperationException> .</span><span class="sxs-lookup"><span data-stu-id="559a6-650">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="559a6-651">In diesem Beispiel wird die-Ausnahme abgefangen und ein Delegat, der einen <xref:System.Windows.Controls.Button> als Argument annimmt, auf die der-Klasse <xref:System.Windows.Threading.Dispatcher> von übertragen <xref:System.Windows.Controls.Button> .</span><span class="sxs-lookup"><span data-stu-id="559a6-651">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="559a6-652">Dadurch <xref:System.Windows.Threading.Dispatcher> wird das aktualisiert <xref:System.Windows.Controls.Button> .</span><span class="sxs-lookup"><span data-stu-id="559a6-652">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="559a6-653">Der aufrufende Thread kann nicht auf diesen <see cref="T:System.Windows.Threading.Dispatcher" /> zugreifen.</span><span class="sxs-lookup"><span data-stu-id="559a6-653">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="559a6-654">Erstellt ein Awaitable-Objekt, welches ansynchron das Steuerelement an den aktuellen Verteiler zurückgibt und dem Verteiler die Gelegenheit gibt, andere Ereignisse zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="559a6-654">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="559a6-655">Erstellt ein Awaitable-Objekt, welches ansynchron das Steuerelement an den aktuellen Verteiler zurückgibt und dem Verteiler die Gelegenheit gibt, andere Ereignisse zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="559a6-655">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
        <returns><span data-ttu-id="559a6-656">Ein awaitable-Objekt, das asynchron dem aktuellen Verteiler Steuerelemente zurückgibt und dem Verteiler die Gelegenheit gibt, andere Ereignisse zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="559a6-656">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-657">Diese Methode bietet Ihnen die Möglichkeit, die Ausführungs Steuerung vorübergehend für den aktuellen Verteiler freizugeben, damit andere Aufgaben ausgeführt werden können, z. b. andere Ereignisse verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="559a6-657">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="559a6-658">Verwenden `await` Sie den Operator, oder `Await` in Visual Basic, Operator für den Rückgabewert, um die Steuerung an den aktuellen Verteiler zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="559a6-658">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="559a6-659">Verwenden Sie diese Methode, wenn Sie Ihrer APP die Möglichkeit einräumen möchten, Ereignisse zu verarbeiten, während Ihre APP viel Arbeit im UI-Thread leistet.</span><span class="sxs-lookup"><span data-stu-id="559a6-659">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="559a6-660">Beispielsweise können Sie diese Methode in einer Schleife mit langer Laufzeit verwenden, die ein-Steuerelement aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="559a6-660">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="559a6-661">Diese Methode entspricht dem Aufrufen der <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> -Methode und der Übergabe von <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="559a6-661">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="559a6-662">Die Priorität, mit der die Fortsetzung geplant werden soll.</span><span class="sxs-lookup"><span data-stu-id="559a6-662">The priority at which to schedule the continuation.</span></span></param>
        <summary><span data-ttu-id="559a6-663">Erstellt ein Awaitable-Objekt, welches ansynchron das Steuerelement an den aktuellen Verteiler zurückgibt und dem Verteiler die Gelegenheit gibt, andere Ereignisse zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="559a6-663">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span>  <span data-ttu-id="559a6-664">Die Arbeit, welche auftritt, wenn das Steuerelement an den Code zurückgibt, der auf das Ergebnis dieser Methode wartet, die mit der angegebenen Priorität geplant wurde.</span><span class="sxs-lookup"><span data-stu-id="559a6-664">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span></span></summary>
        <returns><span data-ttu-id="559a6-665">Ein awaitable-Objekt, das asynchron dem aktuellen Verteiler Steuerelemente zurückgibt und dem Verteiler die Gelegenheit gibt, andere Ereignisse zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="559a6-665">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="559a6-666">Diese Methode bietet Ihnen die Möglichkeit, die Ausführungs Steuerung vorübergehend für den aktuellen Verteiler freizugeben, damit andere Aufgaben ausgeführt werden können, z. b. andere Ereignisse verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="559a6-666">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="559a6-667">Verwenden `await` Sie den Operator, oder `Await` in Visual Basic, Operator für den Rückgabewert, um die Steuerung an den aktuellen Verteiler zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="559a6-667">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="559a6-668">Verwenden Sie diese Methode, wenn Sie Ihrer APP die Möglichkeit einräumen möchten, Ereignisse zu verarbeiten, während Ihre APP viel Arbeit im UI-Thread leistet.</span><span class="sxs-lookup"><span data-stu-id="559a6-668">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="559a6-669">Beispielsweise können Sie diese Methode in einer Schleife mit langer Laufzeit verwenden, die ein-Steuerelement aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="559a6-669">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7aaf949c0b7a2c1eea281a8a783125597066063f" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75175663" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="572d2-101">Stellt Dienste zum Verwalten der Warteschlange von Arbeitselementen für einen Thread bereit.</span><span class="sxs-lookup"><span data-stu-id="572d2-101">Provides services for managing the queue of work items for a thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-102">Der <xref:System.Windows.Threading.Dispatcher> verwaltet eine priorisierte Warteschlange von Arbeitsaufgaben für einen bestimmten Thread.</span><span class="sxs-lookup"><span data-stu-id="572d2-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="572d2-103">Wenn ein <xref:System.Windows.Threading.Dispatcher> in einem Thread erstellt wird, wird er zum einzigen <xref:System.Windows.Threading.Dispatcher>, der dem Thread zugeordnet werden kann, auch wenn der <xref:System.Windows.Threading.Dispatcher> heruntergefahren wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="572d2-104">Wenn Sie versuchen, die <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> für den aktuellen Thread zu erhalten, und ein <xref:System.Windows.Threading.Dispatcher> dem Thread nicht zugeordnet ist, wird eine <xref:System.Windows.Threading.Dispatcher> erstellt.</span><span class="sxs-lookup"><span data-stu-id="572d2-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="572d2-105">Eine <xref:System.Windows.Threading.Dispatcher> wird auch erstellt, wenn Sie eine <xref:System.Windows.Threading.DispatcherObject>erstellen.</span><span class="sxs-lookup"><span data-stu-id="572d2-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="572d2-106">Wenn Sie ein <xref:System.Windows.Threading.Dispatcher> in einem Hintergrund Thread erstellen, müssen Sie den Verteiler beenden, bevor Sie den Thread beenden.</span><span class="sxs-lookup"><span data-stu-id="572d2-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="572d2-107">Wenn ein <xref:System.Windows.Threading.Dispatcher> heruntergefahren wird, kann es nicht neu gestartet werden.</span><span class="sxs-lookup"><span data-stu-id="572d2-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="572d2-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann auf eine <xref:System.Windows.Threading.DispatcherObject> nur von der <xref:System.Windows.Threading.Dispatcher> zugegriffen werden, der Sie zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="572d2-109">Ein Hintergrund Thread kann z. b. den Inhalt einer <xref:System.Windows.Controls.Button>, die der <xref:System.Windows.Threading.Dispatcher> im [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] Thread zugeordnet ist, nicht aktualisieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="572d2-110">Damit der Hintergrund Thread auf die <xref:System.Windows.Controls.ContentControl.Content%2A>-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="572d2-111">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="572d2-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-113">Der Vorgang wird der Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-114">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für eine <xref:System.Windows.Threading.Dispatcher> aufgerufen wird, die heruntergefahren wurde, wird die Eigenschaft Status der zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="572d2-115">Alle Methoden auf <xref:System.Windows.Threading.Dispatcher>, mit Ausnahme von <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, sind kostenlos.</span><span class="sxs-lookup"><span data-stu-id="572d2-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="572d2-116">Objekte, die von <xref:System.Windows.Threading.DispatcherObject> abgeleitet sind, haben Thread Affinität.</span><span class="sxs-lookup"><span data-stu-id="572d2-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="572d2-117">Objekte, die von <xref:System.Windows.Freezable> abgeleitet sind, sind frei Thread frei, wenn Sie eingefroren sind.</span><span class="sxs-lookup"><span data-stu-id="572d2-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="572d2-118">Weitere Informationen finden Sie unter der [Übersicht über Freezable-Objekte](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span><span class="sxs-lookup"><span data-stu-id="572d2-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="572d2-119">Im folgenden Beispiel wird gezeigt, wie Sie einen Vorgang auf einem <xref:System.Windows.Threading.Dispatcher>platzieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="572d2-120">Den vollständigen Quellcode dieses Beispiels finden Sie unter Beispiel für [Single Thread-Anwendung mit langer Berechnung](https://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="572d2-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="572d2-121">Zuerst wird ein Delegat erstellt, der keine Argumente akzeptiert.</span><span class="sxs-lookup"><span data-stu-id="572d2-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="572d2-122">Als nächstes wird <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="572d2-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="572d2-123">Dieser Aufruf von <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> nimmt zwei Parameter an: die Priorität, die auf <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>festgelegt ist, und der Rückruf, der über eine Instanz des Delegaten `NextPrimeDelegate`übermittelt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="572d2-124">Beispiel für Single Thread-Anwendung mit langer Berechnung</span><span class="sxs-lookup"><span data-stu-id="572d2-124">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="572d2-125">Führt eine Delegaten asynchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-125">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-126">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-126">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="572d2-127">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-127">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="572d2-128">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-128">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="572d2-129">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-129">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="572d2-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-131">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-131">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="572d2-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> gibt ein <xref:System.Windows.Threading.DispatcherOperation> Objekt zurück, das für die Interaktion mit dem Delegaten verwendet werden kann, wenn sich der Delegat in der Ereignis Warteschlange befindet.</span><span class="sxs-lookup"><span data-stu-id="572d2-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="572d2-134">Das von <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> zurückgegebene <xref:System.Windows.Threading.DispatcherOperation> Objekt kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="572d2-134">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="572d2-135">Ändern der <xref:System.Windows.Threading.DispatcherPriority> des Delegaten, da die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-135">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-136">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="572d2-136">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-137">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-137">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="572d2-138">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-138">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="572d2-139">Wenn mehrere <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Aufrufe an derselben <xref:System.Windows.Threading.DispatcherPriority>erfolgen, werden Sie in der Reihenfolge ausgeführt, in der die Aufrufe durchgeführt wurden.</span><span class="sxs-lookup"><span data-stu-id="572d2-139">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="572d2-140">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für eine <xref:System.Windows.Threading.Dispatcher> aufgerufen wird, die heruntergefahren wurde, wird die Eigenschaft Status der zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-140">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="572d2-141">Der Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-141">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="572d2-142">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="572d2-142">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="572d2-143">Kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="572d2-143">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="572d2-144">Führt den angegebenen Delegaten asynchron mit den angegebenen Argumenten für den Thread aus, für den der <see cref="T:System.Windows.Threading.Dispatcher" /> erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-144">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="572d2-145">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="572d2-145">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-146">Das von <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> zurückgegebene <xref:System.Windows.Threading.DispatcherOperation> Objekt kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="572d2-146">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="572d2-147">Ändern der <xref:System.Windows.Threading.DispatcherPriority> des Delegaten, da die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-147">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-148">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="572d2-148">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-149">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-149">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="572d2-150">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-150">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="572d2-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="572d2-152">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-152">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="572d2-153">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-153">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="572d2-154">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-154">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="572d2-155">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-155">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="572d2-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="572d2-157">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-157">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-158">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für eine <xref:System.Windows.Threading.Dispatcher> aufgerufen wird, die heruntergefahren wurde, wird die Eigenschaft Status der zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-158">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-159">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-159">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="572d2-160">Der Delegat zu einer Methode, die keine Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-160">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="572d2-161">Führt den angegebenen Delegaten asynchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-161">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-162">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="572d2-162">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-163">Wenn mehrere <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Aufrufe an derselben <xref:System.Windows.Threading.DispatcherPriority>erfolgen, werden Sie in der Reihenfolge ausgeführt, in der die Aufrufe durchgeführt wurden.</span><span class="sxs-lookup"><span data-stu-id="572d2-163">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="572d2-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> gibt ein <xref:System.Windows.Threading.DispatcherOperation> Objekt zurück, das für die Interaktion mit dem Delegaten verwendet werden kann, wenn sich der Delegat in der Ereignis Warteschlange befindet.</span><span class="sxs-lookup"><span data-stu-id="572d2-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="572d2-165">Das von <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> zurückgegebene <xref:System.Windows.Threading.DispatcherOperation> Objekt kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="572d2-165">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="572d2-166">Ändern der <xref:System.Windows.Threading.DispatcherPriority> des Delegaten, da die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-166">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-167">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="572d2-167">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-168">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-168">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="572d2-169">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-169">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="572d2-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="572d2-171">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-171">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="572d2-172">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-172">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="572d2-173">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-173">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="572d2-174">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-174">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="572d2-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-176">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-176">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-177">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für eine <xref:System.Windows.Threading.Dispatcher> aufgerufen wird, die heruntergefahren wurde, wird die Eigenschaft Status der zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-177">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="572d2-178">Im folgenden Beispiel wird gezeigt, wie Sie einen Vorgang auf einem <xref:System.Windows.Threading.Dispatcher>platzieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-178">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="572d2-179">Den vollständigen Quellcode dieses Beispiels finden Sie unter Beispiel für [Single Thread-Anwendung mit langer Berechnung](https://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="572d2-179">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="572d2-180">Zuerst wird ein Delegat erstellt, der keine Argumente akzeptiert.</span><span class="sxs-lookup"><span data-stu-id="572d2-180">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="572d2-181">Als nächstes wird <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="572d2-181">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="572d2-182">Da jede <xref:System.Windows.Threading.DispatcherObject> über eine Eigenschaft verfügt, die die <xref:System.Windows.Threading.Dispatcher> zurückgibt, der Sie zugeordnet ist, wird die gewünschte <xref:System.Windows.Threading.Dispatcher> durch Abfragen der <xref:System.Windows.Threading.DispatcherObject>abgerufen, in diesem Fall eine <xref:System.Windows.Controls.Button> mit dem Namen `startStopButton`.</span><span class="sxs-lookup"><span data-stu-id="572d2-182">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="572d2-183">Der Aufruf von <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> nimmt zwei Parameter an: die Priorität, die auf <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>festgelegt ist, und der Rückruf, der über eine Instanz des Delegaten `NextPrimeDelegate`übermittelt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-183">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="572d2-184"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-184"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="572d2-185"><paramref name="priority" /> ist kein gültiger <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-185"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="572d2-186">Beispiel für Single Thread-Anwendung mit langer Berechnung</span><span class="sxs-lookup"><span data-stu-id="572d2-186">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="572d2-187">Der Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-187">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-188">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-188">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="572d2-189">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="572d2-189">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="572d2-190">Kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="572d2-190">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="572d2-191">Führt den angegebenen Delegaten asynchron mit den angegebenen Argumenten und der angegebenen Priorität für den Thread aus, für den der <see cref="T:System.Windows.Threading.Dispatcher" /> erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-191">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="572d2-192">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="572d2-192">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-193">Das von <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> zurückgegebene <xref:System.Windows.Threading.DispatcherOperation> Objekt kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="572d2-193">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="572d2-194">Ändern der <xref:System.Windows.Threading.DispatcherPriority> des Delegaten, da die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-194">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-195">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="572d2-195">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-196">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-196">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="572d2-197">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-197">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="572d2-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="572d2-199">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-199">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="572d2-200">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-200">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="572d2-201">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-201">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="572d2-202">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-202">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="572d2-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="572d2-204">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-204">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-205">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für eine <xref:System.Windows.Threading.Dispatcher> aufgerufen wird, die heruntergefahren wurde, wird die Eigenschaft Status der zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-205">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-206">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-206">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="572d2-207">Ein Delegat zu einer Methode, die ein Argument erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-207">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="572d2-208">Das Objekt, das als Argument an die angegebene Methode übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-208">The object to pass as an argument to the specified method.</span></span></param>
        <summary><span data-ttu-id="572d2-209">Führt den angegebenen Delegaten asynchron mit der angegebenen Priorität und dem angegebenen Argument auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-209">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-210">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="572d2-210">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-211">`Arg` können `null` werden, wenn keine Argumente benötigt werden.</span><span class="sxs-lookup"><span data-stu-id="572d2-211">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="572d2-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> gibt ein <xref:System.Windows.Threading.DispatcherOperation> Objekt zurück, das für die Interaktion mit dem Delegaten verwendet werden kann, wenn sich der Delegat in der Ereignis Warteschlange befindet.</span><span class="sxs-lookup"><span data-stu-id="572d2-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="572d2-213">Das von <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> zurückgegebene <xref:System.Windows.Threading.DispatcherOperation> Objekt kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="572d2-213">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="572d2-214">Ändern der <xref:System.Windows.Threading.DispatcherPriority> des Delegaten, da die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-214">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-215">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="572d2-215">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-216">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-216">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="572d2-217">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-217">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="572d2-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="572d2-219">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-219">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="572d2-220">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-220">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="572d2-221">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-221">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="572d2-222">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-222">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="572d2-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-224">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-224">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-225">Wenn mehrere <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Aufrufe an derselben <xref:System.Windows.Threading.DispatcherPriority>erfolgen, werden Sie in der Reihenfolge ausgeführt, in der die Aufrufe durchgeführt wurden.</span><span class="sxs-lookup"><span data-stu-id="572d2-225">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="572d2-226">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für eine <xref:System.Windows.Threading.Dispatcher> aufgerufen wird, die heruntergefahren wurde, wird die Eigenschaft Status der zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-226">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="572d2-227">Im folgenden Beispiel wird gezeigt, wie Sie einen Vorgang auf einem <xref:System.Windows.Threading.Dispatcher>platzieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-227">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="572d2-228">Zuerst wird ein Delegat erstellt, der ein Argument annimmt (in diesem Fall eine Zeichenfolge).</span><span class="sxs-lookup"><span data-stu-id="572d2-228">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="572d2-229">Als nächstes wird <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="572d2-229">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="572d2-230">Da jede <xref:System.Windows.Threading.DispatcherObject> über eine Eigenschaft verfügt, die die <xref:System.Windows.Threading.Dispatcher> zurückgibt, der Sie zugeordnet ist, wird die gewünschte <xref:System.Windows.Threading.Dispatcher> durch Abfragen der <xref:System.Windows.Threading.DispatcherObject>abgerufen, in diesem Fall eine <xref:System.Windows.Controls.Grid> mit dem Namen `tomorrowsWeather`.</span><span class="sxs-lookup"><span data-stu-id="572d2-230">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="572d2-231">Der <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29>-Aufrufe nimmt drei Parameter an: die Priorität, die auf <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>festgelegt ist. der Rückruf, der durch eine Instanz des Delegaten übermittelt wird `OneArgDelegate`; und eine Zeichenfolge mit dem Namen `weather`, die das Argument für den Rückruf ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-231">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="572d2-232"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-232"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="572d2-233"><paramref name="priority" /> ist kein gültiger <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-233"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="572d2-234">Beispiel für Single Thread-Anwendung mit langer Berechnung</span><span class="sxs-lookup"><span data-stu-id="572d2-234">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-235">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-235">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="572d2-236">Ein Delegat zu einer Methode, die mehrere Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-236">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="572d2-237">Das Objekt, das als Argument an die angegebene Methode übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-237">The object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="572d2-238">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="572d2-238">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="572d2-239">Führt den angegebenen Delegaten asynchron mit der angegebenen Priorität und dem angegebenen Argumentarray auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-239">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-240">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der <see cref="T:System.Windows.Threading.Dispatcher" />-Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="572d2-240">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-241">Der `arg`-Parameter kann `null` werden, wenn keine Argumente benötigt werden.</span><span class="sxs-lookup"><span data-stu-id="572d2-241">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="572d2-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> gibt ein <xref:System.Windows.Threading.DispatcherOperation> Objekt zurück, das für die Interaktion mit dem Delegaten verwendet werden kann, wenn sich der Delegat in der Ereignis Warteschlange befindet.</span><span class="sxs-lookup"><span data-stu-id="572d2-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="572d2-243">Das von <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> zurückgegebene <xref:System.Windows.Threading.DispatcherOperation> Objekt kann auf verschiedene Arten verwendet werden, um mit dem angegebenen Delegaten zu interagieren, z. b.:</span><span class="sxs-lookup"><span data-stu-id="572d2-243">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="572d2-244">Ändern der <xref:System.Windows.Threading.DispatcherPriority> des Delegaten, da die Ausführung in der Ereignis Warteschlange ausstehend ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-244">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-245">Entfernen des Delegaten aus der Ereignis Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="572d2-245">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="572d2-246">Warten, bis der Delegat zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-246">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="572d2-247">Abrufen des Werts, den der Delegat zurückgibt, nachdem er ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-247">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="572d2-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron. Daher wird die Steuerung sofort an das aufrufenden Objekt zurückgegeben, nachdem es aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="572d2-249">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-249">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="572d2-250">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-250">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="572d2-251">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-251">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="572d2-252">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-252">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="572d2-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-254">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-254">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-255">Wenn mehrere <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Aufrufe an derselben <xref:System.Windows.Threading.DispatcherPriority>erfolgen, werden Sie in der Reihenfolge ausgeführt, in der die Aufrufe durchgeführt wurden.</span><span class="sxs-lookup"><span data-stu-id="572d2-255">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="572d2-256">Wenn <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für eine <xref:System.Windows.Threading.Dispatcher> aufgerufen wird, die heruntergefahren wurde, wird die Eigenschaft Status der zurückgegebenen <xref:System.Windows.Threading.DispatcherOperation> auf <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-256">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="572d2-257"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-257"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="572d2-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="572d2-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="572d2-259">Beispiel für Single Thread-Anwendung mit langer Berechnung</span><span class="sxs-lookup"><span data-stu-id="572d2-259">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-260">Die Priorität, bei der mit dem Beenden des Verteilers begonnen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-260">The priority at which to begin shutting down the dispatcher.</span></span></param>
        <summary><span data-ttu-id="572d2-261">Initiiert ein asynchrones Beenden des <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-261">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> erfordert uneingeschränkte Benutzeroberflächen Berechtigungen.</span><span class="sxs-lookup"><span data-stu-id="572d2-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="572d2-263">Wenn das <xref:System.Windows.Threading.Dispatcher> heruntergefahren wird, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownStarted>-Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> wird auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-263">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-264">Die <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="572d2-264">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="572d2-265">Wenn das Herunterfahren des Verteilers abgeschlossen ist, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>-Ereignis ausgelöst, und die <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>-Eigenschaft wird auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-265">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-266">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="572d2-266">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="572d2-267">zum Herunterfahren des Verteilers.</span><span class="sxs-lookup"><span data-stu-id="572d2-267">for shutting down the dispatcher.</span></span>  <span data-ttu-id="572d2-268">Zugehörige Enumerationen: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="572d2-268">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="572d2-269">Bestimmt, ob der aufrufende Thread diesem <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-269">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <returns><span data-ttu-id="572d2-270"><see langword="true" />, wenn der aufrufende Thread diesem <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-270"><see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-271">Nur die <xref:System.Windows.Threading.Dispatcher>, auf der ein <xref:System.Windows.Threading.DispatcherObject> erstellt wird, können auf das Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-271">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="572d2-272">Verwenden Sie <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>, um von einem anderen Thread aus auf das Objekt zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-272">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="572d2-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> können von jedem Thread aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="572d2-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="572d2-274">Der Unterschied zwischen <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> und <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> ist <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> gibt einen booleschen Wert zurück, der angibt, ob der aufrufende Thread Zugriff auf die <xref:System.Windows.Threading.Dispatcher> hat und <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> eine Ausnahme auslöst.</span><span class="sxs-lookup"><span data-stu-id="572d2-274">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="572d2-275">Im folgenden Beispiel wird <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> verwendet, um zu bestimmen, ob ein Thread Zugriff auf eine <xref:System.Windows.Controls.Button>hat.</span><span class="sxs-lookup"><span data-stu-id="572d2-275">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="572d2-276">Die <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>-Methode für die <xref:System.Windows.Threading.Dispatcher>, die dem <xref:System.Windows.Controls.Button> zugeordnet ist, wird aufgerufen, um den Zugriff auf den Thread zu überprüfen.</span><span class="sxs-lookup"><span data-stu-id="572d2-276">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="572d2-277">Wenn der aufrufenden Thread Zugriff auf die <xref:System.Windows.Threading.Dispatcher>hat, wird der <xref:System.Windows.Controls.Button> durch Zugriff auf die Member der <xref:System.Windows.Controls.Button>aktualisiert. Andernfalls wird ein Delegat, der eine <xref:System.Windows.Controls.Button> als Argument akzeptiert, auf der <xref:System.Windows.Threading.Dispatcher>platziert.</span><span class="sxs-lookup"><span data-stu-id="572d2-277">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="572d2-278">Der <xref:System.Windows.Threading.Dispatcher> delegiert die Aktualisierung der <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="572d2-278">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="572d2-279">Ruft den <see cref="T:System.Windows.Threading.Dispatcher" /> für den derzeit ausgeführten Thread ab bzw. erstellt einen neuen, wenn dem Thread noch kein <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-279">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span></span></summary>
        <value><span data-ttu-id="572d2-280">Der Verteiler, der dem aktuellen Thread zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-280">The dispatcher associated with the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-281">Wenn eine <xref:System.Windows.Threading.Dispatcher> dem aktuellen Thread nicht zugeordnet ist, wird eine neue <xref:System.Windows.Threading.Dispatcher> erstellt.</span><span class="sxs-lookup"><span data-stu-id="572d2-281">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="572d2-282">Dies ist bei der <xref:System.Windows.Threading.Dispatcher.FromThread%2A>-Methode nicht der Fall.</span><span class="sxs-lookup"><span data-stu-id="572d2-282">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="572d2-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> gibt `null` zurück, wenn dem angegebenen Thread kein Verteiler zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="572d2-284">Deaktiviert Verarbeitung der <see cref="T:System.Windows.Threading.Dispatcher" />-Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="572d2-284">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></summary>
        <returns><span data-ttu-id="572d2-285">Eine Struktur, mit der die Dispatcherverarbeitung wieder aktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-285">A structure used to re-enable dispatcher processing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-286">Die Deaktivierung der Verteiler Verarbeitung ist eine erweiterte Methode, mit der die Wahrscheinlichkeit eines nicht verknüpften erneuten eintreten vermieden werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-286">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="572d2-287">Die Deaktivierung der Verarbeitung hat folgende Auswirkungen:</span><span class="sxs-lookup"><span data-stu-id="572d2-287">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="572d2-288">CLR-Sperren leiten Nachrichten nicht intern.</span><span class="sxs-lookup"><span data-stu-id="572d2-288">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="572d2-289"><xref:System.Windows.Threading.DispatcherFrame> Objekte dürfen nicht per pushübertragung übermittelt werden.</span><span class="sxs-lookup"><span data-stu-id="572d2-289"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="572d2-290">Die Nachrichtenverarbeitung ist nicht zulässig.</span><span class="sxs-lookup"><span data-stu-id="572d2-290">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="572d2-291">Die <xref:System.Windows.Threading.DispatcherProcessingDisabled> Struktur, die <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> zurückgibt, wenn Sie aufgerufen wird, kann verwendet werden, um die Dispatcherverarbeitung erneut zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-291">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="572d2-292">Durch Aufrufen von <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> für die <xref:System.Windows.Threading.DispatcherProcessingDisabled> Struktur wird die Verarbeitung wieder aktiviert.</span><span class="sxs-lookup"><span data-stu-id="572d2-292">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="572d2-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> können nur für den Thread aufgerufen werden, dem die <xref:System.Windows.Threading.Dispatcher> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="572d2-294">Im folgenden Beispiel wird gezeigt, wie die Verteiler Verarbeitung deaktiviert und die Verteiler Verarbeitung erneut aktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-294">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="572d2-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> wird in einer **using** -Anweisung aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="572d2-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="572d2-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> gibt eine <xref:System.Windows.Threading.DispatcherProcessingDisabled> Struktur zurück, die als Objekt verwendet wird, das verworfen wird, wenn der **using** -Block beendet wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="572d2-297">Wenn <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> für die <xref:System.Windows.Threading.DispatcherProcessingDisabled> Struktur aufgerufen wird, wird die Verteiler Verarbeitung wieder aktiviert.</span><span class="sxs-lookup"><span data-stu-id="572d2-297">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="572d2-298">Anforderung zum Beenden aller Frames einschließlich geschachtelter Frames.</span><span class="sxs-lookup"><span data-stu-id="572d2-298">Requests that all frames exit, including nested frames.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="572d2-299">zum Aufrufen dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="572d2-299">for calling this method.</span></span> <span data-ttu-id="572d2-300">Zugehörige Enumerationen: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="572d2-300">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><span data-ttu-id="572d2-301">Der Thread, dessen <see cref="T:System.Windows.Threading.Dispatcher" /> abgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-301">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span></span></param>
        <summary><span data-ttu-id="572d2-302">Ruft den <see cref="T:System.Windows.Threading.Dispatcher" /> für den angegebenen Thread ab.</span><span class="sxs-lookup"><span data-stu-id="572d2-302">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span></span></summary>
        <returns><span data-ttu-id="572d2-303">Der Verteiler für <paramref name="thread" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-303">The dispatcher for <paramref name="thread" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-304">Wenn für den angegebenen Thread kein Verteiler verfügbar ist, wird `null` zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="572d2-304">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="572d2-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> erstellt keine <xref:System.Windows.Threading.Dispatcher> in einem Thread, der über keine <xref:System.Windows.Threading.Dispatcher>verfügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="572d2-306">Ein neuer <xref:System.Windows.Threading.Dispatcher> wird in einem Thread erstellt, der noch nicht über eine <xref:System.Windows.Threading.Dispatcher> verfügt, wenn versucht wird, die <xref:System.Windows.Threading.Dispatcher> mithilfe der <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>-Eigenschaft zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="572d2-306">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="572d2-307">Bestimmt, ob der <see cref="T:System.Windows.Threading.Dispatcher" /> die Beendigung abgeschlossen hat.</span><span class="sxs-lookup"><span data-stu-id="572d2-307">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span></span></summary>
        <value><span data-ttu-id="572d2-308"><see langword="true" />, wenn der Verteiler die Beendigung abgeschlossen hat, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-308"><see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-309">Wenn das <xref:System.Windows.Threading.Dispatcher> heruntergefahren wird, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownStarted>-Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> wird auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-309">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-310">Die <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="572d2-310">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="572d2-311">Wenn das Herunterfahren des Verteilers abgeschlossen ist, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>-Ereignis ausgelöst, und die <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>-Eigenschaft wird auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-311">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-312">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="572d2-312">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="572d2-313">Bestimmt, ob der <see cref="T:System.Windows.Threading.Dispatcher" /> gerade beendet wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-313">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span></span></summary>
        <value><span data-ttu-id="572d2-314"><see langword="true" />, wenn der <see cref="T:System.Windows.Threading.Dispatcher" /> gerade beendet wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-314"><see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-315">Wenn das <xref:System.Windows.Threading.Dispatcher> heruntergefahren wird, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownStarted>-Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> wird auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-315">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-316">Die <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="572d2-316">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="572d2-317">Wenn das Herunterfahren des Verteilers abgeschlossen ist, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>-Ereignis ausgelöst, und die <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>-Eigenschaft wird auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-317">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-318">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="572d2-318">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="572d2-319">Ruft die Auflistung von Hooks ab, die zusätzliche Ereignisinformationen zum <see cref="T:System.Windows.Threading.Dispatcher" /> bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="572d2-319">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <value><span data-ttu-id="572d2-320">Die Hooks, die diesem <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet sind.</span><span class="sxs-lookup"><span data-stu-id="572d2-320">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-321">Die <xref:System.Windows.Threading.DispatcherHooks>-Klasse stellt zusätzliche Ereignis Informationen zum <xref:System.Windows.Threading.Dispatcher>bereit, z. b. wenn die <xref:System.Windows.Threading.Dispatcher> inaktiv ist oder ein Vorgang abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-321">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="572d2-322">zum erhalten dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="572d2-322">for getting this property.</span></span>  <span data-ttu-id="572d2-323">Zugehörige Enumerationen: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="572d2-323">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="572d2-324">Führt den angegebenen Delegaten synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-324">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-325">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-325">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="572d2-326">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-326">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="572d2-327">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-327">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="572d2-328">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-328">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="572d2-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-330">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-330">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="572d2-332">Im folgenden Beispiel wird ein Delegat mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A>in eine <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority.Normal>.</span><span class="sxs-lookup"><span data-stu-id="572d2-332">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="572d2-333">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-333">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="572d2-334">Führt die angegebene <see cref="T:System.Action" /> synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-334">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="572d2-335">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-335">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-336">Die Priorität, die bestimmt, in welcher Reihenfolge der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in <see cref="T:System.Windows.Threading.Dispatcher" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-336">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="572d2-337">Führt die angegebene <see cref="T:System.Action" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-337">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="572d2-338">Ein Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-338">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="572d2-339">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="572d2-339">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="572d2-340">Kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="572d2-340">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="572d2-341">Führt den angegebenen Delegaten synchron mit den angegebenen Argumenten für den Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-341">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-342">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="572d2-342">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-343">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-343">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="572d2-344">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-344">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="572d2-345">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-345">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="572d2-346">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-346">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="572d2-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="572d2-348">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-348">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-350">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-350">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="572d2-351">Ein Delegat zu einer Methode, die keine Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-351">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="572d2-352">Führt den angegebenen Delegaten synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-352">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-353">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="572d2-353">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-354">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-354">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="572d2-355">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-355">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="572d2-356">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-356">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="572d2-357">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-357">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="572d2-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-359">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-359">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="572d2-361">Im folgenden Beispiel wird ein Delegat mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A>in eine <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.DispatcherPriority.Normal>.</span><span class="sxs-lookup"><span data-stu-id="572d2-361">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="572d2-362"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-362"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="572d2-363"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="572d2-363"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="572d2-364"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-364"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="572d2-365">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-365">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-366">Die Priorität, die bestimmt, in welcher Reihenfolge der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in <see cref="T:System.Windows.Threading.Dispatcher" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-366">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="572d2-367">Ein Objekt, das angibt, ob die Aktion abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="572d2-367">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="572d2-368">Führt die angegebene <see cref="T:System.Action" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-368">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="572d2-369">Ein Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-369">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="572d2-370">Die maximale Zeitspanne, die auf den Abschluss der Operation gewartet wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-370">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="args"><span data-ttu-id="572d2-371">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="572d2-371">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="572d2-372">Kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="572d2-372">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="572d2-373">Führt den angegebenen Delegaten in der angegebenen Zeitspanne mit der angegebenen Priorität und den angegebenen Argumenten synchron für den Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-373">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-374">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="572d2-374">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-375">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-375">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="572d2-376">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-376">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="572d2-377">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-377">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="572d2-378">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-378">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="572d2-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="572d2-380">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-380">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="572d2-382">Ein Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-382">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-383">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-383">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="572d2-384">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="572d2-384">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="572d2-385">Kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="572d2-385">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="572d2-386">Führt den angegebenen Delegaten mit der angegebenen Priorität und den angegebenen Argumenten synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-386">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-387">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="572d2-387">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-388">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-388">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="572d2-389">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-389">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="572d2-390">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-390">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="572d2-391">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-391">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="572d2-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="572d2-393">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-393">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-395">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-395">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="572d2-396">Ein Delegat zu einer Methode, die ein Argument erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-396">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="572d2-397">Ein Objekt, das als Argument an die angegebene Methode übergeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-397">An object to pass as an argument to the given method.</span></span></param>
        <summary><span data-ttu-id="572d2-398">Führt den angegebenen Delegaten mit der angegebenen Priorität und dem angegebenen Argument synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-398">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-399">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="572d2-399">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-400">`Arg` können `null` werden, wenn ein Argument nicht benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-400">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="572d2-401">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-401">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="572d2-402">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-402">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="572d2-403">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-403">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="572d2-404">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-404">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="572d2-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-406">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-406">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="572d2-408"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-408"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="572d2-409"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="572d2-409"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="572d2-410"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-410"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-411">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-411">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="572d2-412">Die maximale Zeit, die auf den Abschluss der Operation gewartet wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-412">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="572d2-413">Der Delegat zu einer Methode, die keine Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-413">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="572d2-414">Führt den angegebenen Delegaten synchron mit der angegebenen Priorität und dem angegebenen Timeoutwert auf dem Thread aus, in dem der <see cref="T:System.Windows.Threading.Dispatcher" /> erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-414">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span></span></summary>
        <returns><span data-ttu-id="572d2-415">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="572d2-415">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-416">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-416">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="572d2-417">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-417">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="572d2-418">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-418">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="572d2-419">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-419">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="572d2-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-421">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-421">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="572d2-423">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-423">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-424">Die Priorität, die bestimmt, in welcher Reihenfolge der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in <see cref="T:System.Windows.Threading.Dispatcher" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-424">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="572d2-425">Ein Objekt, das angibt, ob die Aktion abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="572d2-425">An object that indicates whether to cancel the action.</span></span></param>
        <param name="timeout"><span data-ttu-id="572d2-426">Die minimale Zeitspanne, die auf den Start des Vorgangs gewartet wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-426">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="572d2-427">Führt die angegebene <see cref="T:System.Action" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-427">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="572d2-428">Ein Delegat für eine Methode, die in <paramref name="args" /> angegebene Parameter akzeptiert und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-428">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="572d2-429">Die maximale Zeitspanne, die auf den Abschluss der Operation gewartet wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-429">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-430">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-430">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="572d2-431">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="572d2-431">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="572d2-432">Kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="572d2-432">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="572d2-433">Führt den angegebenen Delegaten in der angegebenen Zeitspanne mit der angegebenen Priorität und den angegebenen Argumenten synchron für den Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-433">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-434">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="572d2-434">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-435">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-435">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="572d2-436">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-436">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="572d2-437">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-437">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="572d2-438">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-438">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="572d2-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="572d2-440">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-440">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-442">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-442">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="572d2-443">Ein Delegat zu einer Methode, die mehrere Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-443">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="572d2-444">Ein Objekt, das als Argument an die angegebene Methode übergeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-444">An object to pass as an argument to the given method.</span></span></param>
        <param name="args"><span data-ttu-id="572d2-445">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="572d2-445">An array of objects to pass as arguments to the given method.</span></span></param>
        <summary><span data-ttu-id="572d2-446">Führt den angegebenen Delegaten mit der angegebenen Priorität und den angegebenen Argumenten synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-446">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-447">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="572d2-447">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-448">`Arg` können `null` werden, wenn ein Argument nicht benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-448">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="572d2-449">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-449">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="572d2-450">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-450">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="572d2-451">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-451">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="572d2-452">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-452">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="572d2-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-454">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-454">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="572d2-456"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-456"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="572d2-457"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="572d2-457"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="572d2-458"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-458"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-459">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-459">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="572d2-460">Die maximale Zeit, die auf den Abschluss der Operation gewartet wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-460">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="572d2-461">Ein Delegat zu einer Methode, die mehrere Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-461">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="572d2-462">Ein Objekt, das als Argument an die angegebene Methode übergeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-462">An object to pass as an argument to the given method.</span></span> <span data-ttu-id="572d2-463">Dies kann <see langword="null" /> sein, wenn keine Argumente benötigt werden.</span><span class="sxs-lookup"><span data-stu-id="572d2-463">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="572d2-464">Führt den angegebenen Delegaten mit der angegebenen Priorität und dem angegebenen Argument synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-464">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-465">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="572d2-465">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-466">`Arg` können `null` werden, wenn ein Argument nicht benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-466">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="572d2-467">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-467">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="572d2-468">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-468">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="572d2-469">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-469">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="572d2-470">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-470">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="572d2-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-472">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-472">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="572d2-474"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-474"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="572d2-475"><paramref name="priority" /> ist keine gültige Priorität.</span><span class="sxs-lookup"><span data-stu-id="572d2-475"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="572d2-476"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-476"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-477">Die Priorität, relativ zu den anderen anstehenden Operationen in der <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange, mit der die angegebene Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-477">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="572d2-478">Die maximale Zeit, die auf den Abschluss der Operation gewartet wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-478">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="572d2-479">Ein Delegat zu einer Methode, die mehrere Argumente erwartet und in die <see cref="T:System.Windows.Threading.Dispatcher" />-Ereigniswarteschlange gestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-479">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="572d2-480">Ein Objekt, das als Argument an die angegebene Methode übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-480">An object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="572d2-481">Ein Array von Objekten, die als Argumente an die angegebene Methode übergeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="572d2-481">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="572d2-482">Führt den angegebenen Delegaten mit der angegebenen Priorität und den angegebenen Argumenten synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-482">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-483">Der Rückgabewert des aufgerufenen Delegaten bzw. <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="572d2-483">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-484">`Arg` können `null` werden, wenn ein Argument nicht benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-484">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="572d2-485">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]kann nur der Thread, der eine <xref:System.Windows.Threading.DispatcherObject> erstellt hat, auf dieses Objekt zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-485">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="572d2-486">Beispielsweise kann ein Hintergrund Thread, der aus dem Hauptbenutzer Oberflächen Thread ausgelöst wird, den Inhalt einer <xref:System.Windows.Controls.Button> nicht aktualisieren, die im UI-Thread erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-486">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="572d2-487">Damit der Hintergrund Thread auf die Content-Eigenschaft des <xref:System.Windows.Controls.Button>zugreifen kann, muss der Hintergrund Thread die Arbeit an die dem UI-Thread zugeordnete <xref:System.Windows.Threading.Dispatcher> delegieren.</span><span class="sxs-lookup"><span data-stu-id="572d2-487">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="572d2-488">Dies erfolgt mithilfe <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="572d2-488">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="572d2-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist synchron, und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ist asynchron.</span><span class="sxs-lookup"><span data-stu-id="572d2-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="572d2-490">Der Vorgang wird der Ereignis Warteschlange der <xref:System.Windows.Threading.Dispatcher> am angegebenen <xref:System.Windows.Threading.DispatcherPriority>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="572d2-490">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="572d2-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> ist ein synchroner Vorgang. Daher wird die Steuerung erst wieder an das aufrufende Objekt zurückgegeben, nachdem der Rückruf zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="572d2-492"><paramref name="priority" /> ist gleich <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-492"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="572d2-493"><paramref name="priority" /> ist kein gültiger <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-493"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="572d2-494"><paramref name="method" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-494"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="572d2-495">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="572d2-495">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="572d2-496">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-496">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="572d2-497">Führt die angegebene <see cref="T:System.Func`1" /> synchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-497">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-498">Der von `callback`zurückgegebene Wert.</span><span class="sxs-lookup"><span data-stu-id="572d2-498">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="572d2-499">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="572d2-499">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="572d2-500">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-500">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-501">Die Priorität, die bestimmt, in welcher Reihenfolge der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in <see cref="T:System.Windows.Threading.Dispatcher" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-501">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="572d2-502">Führt die angegebene <see cref="T:System.Func`1" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-502">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-503">Der von `callback`zurückgegebene Wert.</span><span class="sxs-lookup"><span data-stu-id="572d2-503">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="572d2-504">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="572d2-504">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="572d2-505">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-505">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-506">Die Priorität, die bestimmt, in welcher Reihenfolge der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in <see cref="T:System.Windows.Threading.Dispatcher" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-506">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="572d2-507">Ein Objekt, das angibt, ob der Vorgang abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="572d2-507">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="572d2-508">Führt die angegebene <see cref="T:System.Func`1" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-508">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-509">Der von `callback`zurückgegebene Wert.</span><span class="sxs-lookup"><span data-stu-id="572d2-509">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="572d2-510">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="572d2-510">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="572d2-511">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-511">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-512">Die Priorität, die bestimmt, in welcher Reihenfolge der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in <see cref="T:System.Windows.Threading.Dispatcher" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-512">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="572d2-513">Ein Objekt, das angibt, ob der Vorgang abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="572d2-513">An object that indicates whether to cancel the operation.</span></span></param>
        <param name="timeout"><span data-ttu-id="572d2-514">Die minimale Zeitspanne, die auf den Start des Vorgangs gewartet wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-514">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="572d2-515">Führt die angegebene <see cref="T:System.Func`1" /> synchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-515">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-516">Der von `callback`zurückgegebene Wert.</span><span class="sxs-lookup"><span data-stu-id="572d2-516">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="572d2-517">Führt den angegebenen Delegaten asynchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-517">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="572d2-518">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-518">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="572d2-519">Führt die angegebene <see cref="T:System.Action" /> asynchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-519">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-520">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="572d2-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="572d2-521">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-521">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-522">Die Priorität, die bestimmt, in welcher Reihenfolge der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in <see cref="T:System.Windows.Threading.Dispatcher" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="572d2-523">Führt die angegebene <see cref="T:System.Action" /> asynchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-523">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-524">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="572d2-524">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="572d2-525">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-525">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-526">Die Priorität, die bestimmt, in welcher Reihenfolge der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in <see cref="T:System.Windows.Threading.Dispatcher" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-526">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="572d2-527">Ein Objekt, das angibt, ob die Aktion abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="572d2-527">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="572d2-528">Führt die angegebene <see cref="T:System.Action" /> asynchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-528">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-529">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="572d2-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="572d2-530">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="572d2-530">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="572d2-531">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-531">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="572d2-532">Führt die angegebene <see cref="T:System.Func`1" /> asynchron auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-532">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-533">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="572d2-533">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="572d2-534">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="572d2-534">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="572d2-535">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-535">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-536">Die Priorität, die bestimmt, in welcher Reihenfolge der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in <see cref="T:System.Windows.Threading.Dispatcher" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-536">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="572d2-537">Führt die angegebene <see cref="T:System.Func`1" /> asynchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-537">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-538">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="572d2-538">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="572d2-539">Der Rückgabewerts des angegebenen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="572d2-539">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="572d2-540">Ein Delegat, der über den Verteiler aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-540">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="572d2-541">Die Priorität, die bestimmt, in welcher Reihenfolge der angegebene Rückruf relativ zu den anderen ausstehenden Vorgängen in <see cref="T:System.Windows.Threading.Dispatcher" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-541">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="572d2-542">Ein Objekt, das angibt, ob der Vorgang abgebrochen werden kann.</span><span class="sxs-lookup"><span data-stu-id="572d2-542">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="572d2-543">Führt die angegebene <see cref="T:System.Func`1" /> asynchron mit der angegebenen Priorität auf dem Thread aus, dem der <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-543">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="572d2-544">Ein Objekt, das unmittelbar nach dem Aufruf von <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> zurückgegeben wird und für die Interaktion mit dem Delegaten verwendet werden kann, während im Delegaten die Ausführung einer Aufgabe in der Warteschlange steht.</span><span class="sxs-lookup"><span data-stu-id="572d2-544">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="572d2-545">Initiiert die synchrone Beendigung des <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-545">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> erfordert uneingeschränkte Benutzeroberflächen Berechtigungen.</span><span class="sxs-lookup"><span data-stu-id="572d2-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="572d2-547">Wenn das <xref:System.Windows.Threading.Dispatcher> heruntergefahren wird, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownStarted>-Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> wird auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-547">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-548">Die <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="572d2-548">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="572d2-549">Wenn das Herunterfahren des Verteilers abgeschlossen ist, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>-Ereignis ausgelöst, und die <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>-Eigenschaft wird auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-549">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-550">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="572d2-550">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="572d2-551">zum Herunterfahren des Verteilers.</span><span class="sxs-lookup"><span data-stu-id="572d2-551">for shutting down the dispatcher.</span></span>  <span data-ttu-id="572d2-552">Zugehörige Enumerationen: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="572d2-552">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame"><span data-ttu-id="572d2-553">Der Frame, den der Verteiler verarbeiten soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-553">The frame for the dispatcher to process.</span></span></param>
        <summary><span data-ttu-id="572d2-554">Tritt in eine Ausführungsschleife ein.</span><span class="sxs-lookup"><span data-stu-id="572d2-554">Enters an execute loop.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-555">Eine <xref:System.Windows.Threading.DispatcherFrame> die eine Schleife darstellt, die ausstehende Arbeitselemente verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="572d2-555">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="572d2-556">Der Verteiler verarbeitet die Arbeitsaufgaben Warteschlange in einer-Schleife.</span><span class="sxs-lookup"><span data-stu-id="572d2-556">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="572d2-557">Die Schleife wird als Frame bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="572d2-557">The loop is referred to as a frame.</span></span>  <span data-ttu-id="572d2-558">Die ursprüngliche Schleife wird in der Regel von der Anwendung initiiert, indem <xref:System.Windows.Threading.Dispatcher.Run%2A>aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-558">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="572d2-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> gibt eine Schleife ein, die durch den Parameter `frame`dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="572d2-560">Bei jeder Iterationen der Schleife prüft der <xref:System.Windows.Threading.Dispatcher> die <xref:System.Windows.Threading.DispatcherFrame.Continue%2A>-Eigenschaft der <xref:System.Windows.Threading.DispatcherFrame>-Klasse, um zu bestimmen, ob die Schleife fortgesetzt werden soll, oder ob Sie beendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-560">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="572d2-561"><xref:System.Windows.Threading.DispatcherFrame> ermöglicht, dass die <xref:System.Windows.Threading.DispatcherFrame.Continue%2A>-Eigenschaft explizit festgelegt wird und die <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>-Eigenschaft auf dem <xref:System.Windows.Threading.Dispatcher>respektiert.</span><span class="sxs-lookup"><span data-stu-id="572d2-561"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="572d2-562">Dies bedeutet, wenn das <xref:System.Windows.Threading.Dispatcher> heruntergefahren wird, werden Frames, die die standardmäßige <xref:System.Windows.Threading.DispatcherFrame> Implementierung verwenden, beendet, sodass alle geschalbten Frames beendet werden können.</span><span class="sxs-lookup"><span data-stu-id="572d2-562">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="572d2-563">Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Threading.DispatcherFrame> verwendet werden kann, um ähnliche Ergebnisse wie die [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A>-Methode zu erzielen.</span><span class="sxs-lookup"><span data-stu-id="572d2-563">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="572d2-564"><paramref name="frame" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-564"><paramref name="frame" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="572d2-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> ist gleich <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span></span>  
  
<span data-ttu-id="572d2-566">- oder -</span><span class="sxs-lookup"><span data-stu-id="572d2-566">-or-</span></span> 
 <span data-ttu-id="572d2-567"><paramref name="frame" /> wird auf einem anderen <see cref="T:System.Windows.Threading.Dispatcher" /> ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="572d2-567"><paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span>  
  
<span data-ttu-id="572d2-568">- oder -</span><span class="sxs-lookup"><span data-stu-id="572d2-568">-or-</span></span> 
<span data-ttu-id="572d2-569">Verteilerverarbeitung wurde deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="572d2-569">Dispatcher processing has been disabled.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="572d2-570">zum Übertragen eines Ausführungs Rahmens.</span><span class="sxs-lookup"><span data-stu-id="572d2-570">for pushing an execution frame.</span></span>  <span data-ttu-id="572d2-571">Zugehörige Enumerationen: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="572d2-571">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="572d2-572">Stellt den Hauptausführungsframe in die Ereigniswarteschlange von <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-572">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-573">Der <xref:System.Windows.Threading.Dispatcher> verarbeitet die Ereignis Warteschlange in einer-Schleife.</span><span class="sxs-lookup"><span data-stu-id="572d2-573">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="572d2-574">Die Schleife wird als Frame bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="572d2-574">The loop is referred to as a frame.</span></span>  <span data-ttu-id="572d2-575">Die ursprüngliche Schleife wird in der Regel von der Anwendung initiiert, indem <xref:System.Windows.Threading.Dispatcher.Run%2A>aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-575">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="572d2-576">Der Haupt Ausführungs Rahmen wird fortgesetzt, bis das <xref:System.Windows.Threading.Dispatcher> heruntergefahren wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-576">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownFinished As EventHandler " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="572d2-577">Tritt ein, wenn der <see cref="T:System.Windows.Threading.Dispatcher" /> die Beendigung abschließt.</span><span class="sxs-lookup"><span data-stu-id="572d2-577">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-578">Wenn der Vorgang zum Herunterfahren eines <xref:System.Windows.Threading.Dispatcher> gestartet wird, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownStarted>-Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> ist auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-578">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-579">Die <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="572d2-579">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="572d2-580">Wenn das Herunterfahren des Verteilers abgeschlossen ist, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>-Ereignis ausgelöst, und die <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>-Eigenschaft wird auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-580">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-581">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="572d2-581">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownStarted As EventHandler " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="572d2-582">Tritt ein, wenn der <see cref="T:System.Windows.Threading.Dispatcher" /> die Beendigung beginnt.</span><span class="sxs-lookup"><span data-stu-id="572d2-582">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-583">Wenn der Vorgang zum Herunterfahren eines <xref:System.Windows.Threading.Dispatcher> gestartet wird, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownStarted>-Ereignis ausgelöst, und <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> ist auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-583">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-584">Die <xref:System.Windows.Threading.Dispatcher> wird nicht vollständig heruntergefahren, bis die Ereignis Warteschlange entlädt.</span><span class="sxs-lookup"><span data-stu-id="572d2-584">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="572d2-585">Wenn das Herunterfahren des Verteilers abgeschlossen ist, wird das <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>-Ereignis ausgelöst, und die <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>-Eigenschaft wird auf `true`festgelegt.</span><span class="sxs-lookup"><span data-stu-id="572d2-585">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="572d2-586">Nachdem der Vorgang zum Herunterfahren begonnen hat, werden alle ausstehenden Arbeitselemente in der Warteschlange abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="572d2-586">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="572d2-587">Ruft den Thread ab, dem dieser <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-587">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="572d2-588">Der Thread.</span><span class="sxs-lookup"><span data-stu-id="572d2-588">The thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="572d2-589">Tritt ein, wenn eine Threadausnahme ausgelöst und während der Ausführung eines Delegaten mit <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> oder <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> nicht abgefangen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-589">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-590">Dieses Ereignis wird ausgelöst, wenn eine Ausnahme, die während der Ausführung eines Delegaten durch <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ausgelöst wurde, nicht abgefangen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-590">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="572d2-591">Ein Handler kann die Ausnahme als behandelt markieren, wodurch verhindert wird, dass der interne Ausnahmehandler aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-591">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="572d2-592">Ereignishandler für dieses Ereignis müssen mit Bedacht geschrieben werden, um zu vermeiden, dass sekundäre Ausnahmen erstellt werden, und alle auftretenden Ereignisse zu erfassen.</span><span class="sxs-lookup"><span data-stu-id="572d2-592">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="572d2-593">Es wird empfohlen, Speicherplatz zu vermeiden oder ressourcenintensive Vorgänge im-Handler durchzusetzen.</span><span class="sxs-lookup"><span data-stu-id="572d2-593">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="572d2-594">Das <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>-Ereignis bietet die Möglichkeit, das <xref:System.Windows.Threading.Dispatcher.UnhandledException>-Ereignis nicht zu erhöhen.</span><span class="sxs-lookup"><span data-stu-id="572d2-594">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="572d2-595">Das <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>-Ereignis wird zuerst ausgelöst. wenn <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> auf dem <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> auf `false`festgelegt ist, wird das <xref:System.Windows.Threading.Dispatcher.UnhandledException>-Ereignis nicht ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="572d2-595">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="572d2-596">Tritt ein, wenn eine Threadausnahme ausgelöst und nicht abgefangen wird, während ein Delegat mit <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> oder <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ausgeführt wird und sich in der Filterstufe befindet.</span><span class="sxs-lookup"><span data-stu-id="572d2-596">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-597">Dieses Ereignis wird während der Filter Phase für eine Ausnahme ausgelöst, die während der Ausführung eines Delegaten mithilfe von <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> ausgelöst wird und nicht abgefangen wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-597">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="572d2-598">Die aufzurufende aufrufsstapel wird an dieser Stelle nicht entwickelt (Ausnahme der ersten Chance).</span><span class="sxs-lookup"><span data-stu-id="572d2-598">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="572d2-599">Ereignishandler für dieses Ereignis müssen mit Bedacht geschrieben werden, um zu vermeiden, dass sekundäre Ausnahmen erstellt werden, und alle auftretenden Ereignisse zu erfassen.</span><span class="sxs-lookup"><span data-stu-id="572d2-599">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="572d2-600">Es wird empfohlen, Speicherplatz zu vermeiden oder ressourcenintensive Vorgänge im-Handler durchzusetzen.</span><span class="sxs-lookup"><span data-stu-id="572d2-600">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="572d2-601">Das <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>-Ereignis bietet die Möglichkeit, das <xref:System.Windows.Threading.Dispatcher.UnhandledException>-Ereignis nicht zu erhöhen.</span><span class="sxs-lookup"><span data-stu-id="572d2-601">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="572d2-602">Das <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>-Ereignis wird zuerst ausgelöst. wenn <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> auf dem <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> auf `false`festgelegt ist, wird das <xref:System.Windows.Threading.Dispatcher.UnhandledException>-Ereignis nicht ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="572d2-602">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="572d2-603">zum Hinzufügen oder Entfernen eines Handlers für dieses Ereignis.</span><span class="sxs-lookup"><span data-stu-id="572d2-603">for adding or removing a handler for this event.</span></span>  <span data-ttu-id="572d2-604">Zugehörige Enumerationen: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="572d2-604">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-605">Die zu überprüfende Priorität.</span><span class="sxs-lookup"><span data-stu-id="572d2-605">The priority to check.</span></span></param>
        <param name="parameterName"><span data-ttu-id="572d2-606">Eine Zeichenfolge, die von der Ausnahme zurückgegeben wird, die auftritt, wenn die Priorität ungültig ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-606">A string that will be returned by the exception that occurs if the priority is invalid.</span></span></param>
        <summary><span data-ttu-id="572d2-607">Ermittelt, ob die angegebene <see cref="T:System.Windows.Threading.DispatcherPriority" /> eine gültige Priorität ist.</span><span class="sxs-lookup"><span data-stu-id="572d2-607">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="572d2-608"><paramref name="priority" /> ist kein gültiger <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span><span class="sxs-lookup"><span data-stu-id="572d2-608"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="572d2-609">Bestimmt, ob der aufrufende Thread auf dieses <see cref="T:System.Windows.Threading.Dispatcher" /> zugreifen kann.</span><span class="sxs-lookup"><span data-stu-id="572d2-609">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-610">Nur der Thread, auf dem der <xref:System.Windows.Threading.Dispatcher> erstellt wird, kann auf die <xref:System.Windows.Threading.Dispatcher>zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-610">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="572d2-611">Diese Methode ist öffentlich. Daher kann jeder Thread überprüfen, ob er Zugriff auf die <xref:System.Windows.Threading.Dispatcher>hat.</span><span class="sxs-lookup"><span data-stu-id="572d2-611">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="572d2-612">Der Unterschied zwischen <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> und <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> ist <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> gibt einen booleschen Wert zurück, wenn der aufrufende Thread keinen Zugriff auf die <xref:System.Windows.Threading.Dispatcher> hat und <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> eine Ausnahme auslöst.</span><span class="sxs-lookup"><span data-stu-id="572d2-612">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="572d2-613">Im folgenden Beispiel wird <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> verwendet, um zu bestimmen, ob ein Thread Zugriff auf den Thread hat, in dem ein <xref:System.Windows.Controls.Button> erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-613">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="572d2-614">Die-Methode nimmt ein-Objekt als Argument an, das in einen <xref:System.Windows.Controls.Button>umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="572d2-614">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="572d2-615">Die <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>-Methode für die <xref:System.Windows.Threading.Dispatcher> der <xref:System.Windows.Controls.Button> wird aufgerufen, um den Zugriff auf den Thread zu überprüfen.</span><span class="sxs-lookup"><span data-stu-id="572d2-615">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="572d2-616">Wenn der aufrufenden Thread Zugriff auf die <xref:System.Windows.Threading.Dispatcher>hat, wird der <xref:System.Windows.Controls.Button> durch einfaches zugreifen auf die Member der <xref:System.Windows.Controls.Button>aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="572d2-616">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="572d2-617">Wenn der aufrufende Thread keinen Zugriff hat, wird eine <xref:System.InvalidOperationException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="572d2-617">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="572d2-618">In diesem Beispiel wird die Ausnahme abgefangen und ein Delegat, der eine <xref:System.Windows.Controls.Button> als Argument akzeptiert, auf die <xref:System.Windows.Threading.Dispatcher> der <xref:System.Windows.Controls.Button>übertragen.</span><span class="sxs-lookup"><span data-stu-id="572d2-618">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="572d2-619">Diese <xref:System.Windows.Threading.Dispatcher> führt das Aktualisieren des <xref:System.Windows.Controls.Button>aus.</span><span class="sxs-lookup"><span data-stu-id="572d2-619">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="572d2-620">Der aufrufende Thread kann nicht auf diesen <see cref="T:System.Windows.Threading.Dispatcher" /> zugreifen.</span><span class="sxs-lookup"><span data-stu-id="572d2-620">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="572d2-621">Erstellt ein Awaitable-Objekt, welches ansynchron das Steuerelement an den aktuellen Verteiler zurückgibt und dem Verteiler die Gelegenheit gibt, andere Ereignisse zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="572d2-621">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="572d2-622">Erstellt ein Awaitable-Objekt, welches ansynchron das Steuerelement an den aktuellen Verteiler zurückgibt und dem Verteiler die Gelegenheit gibt, andere Ereignisse zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="572d2-622">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
        <returns><span data-ttu-id="572d2-623">Ein awaitable-Objekt, das asynchron dem aktuellen Verteiler Steuerelemente zurückgibt und dem Verteiler die Gelegenheit gibt, andere Ereignisse zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="572d2-623">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-624">Diese Methode bietet Ihnen die Möglichkeit, die Ausführungs Steuerung vorübergehend für den aktuellen Verteiler freizugeben, damit andere Aufgaben ausgeführt werden können, z. b. andere Ereignisse verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="572d2-624">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="572d2-625">Verwenden Sie den-`await``Await` oder den-Operator in Visual Basic, den-Operator für den Rückgabewert, um die Steuerung an den aktuellen Verteiler zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="572d2-625">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="572d2-626">Verwenden Sie diese Methode, wenn Sie Ihrer APP die Möglichkeit einräumen möchten, Ereignisse zu verarbeiten, während Ihre APP viel Arbeit im UI-Thread leistet.</span><span class="sxs-lookup"><span data-stu-id="572d2-626">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="572d2-627">Beispielsweise können Sie diese Methode in einer Schleife mit langer Laufzeit verwenden, die ein-Steuerelement aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="572d2-627">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="572d2-628">Diese Methode entspricht dem Aufrufen der <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29>-Methode und der Übergabe <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="572d2-628">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="572d2-629">Die Priorität, mit der die Fortsetzung geplant werden soll.</span><span class="sxs-lookup"><span data-stu-id="572d2-629">The priority at which to schedule the continuation.</span></span></param>
        <summary><span data-ttu-id="572d2-630">Erstellt ein Awaitable-Objekt, welches ansynchron das Steuerelement an den aktuellen Verteiler zurückgibt und dem Verteiler die Gelegenheit gibt, andere Ereignisse zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="572d2-630">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span>  <span data-ttu-id="572d2-631">Die Arbeit, welche auftritt, wenn das Steuerelement an den Code zurückgibt, der auf das Ergebnis dieser Methode wartet, die mit der angegebenen Priorität geplant wurde.</span><span class="sxs-lookup"><span data-stu-id="572d2-631">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span></span></summary>
        <returns><span data-ttu-id="572d2-632">Ein awaitable-Objekt, das asynchron dem aktuellen Verteiler Steuerelemente zurückgibt und dem Verteiler die Gelegenheit gibt, andere Ereignisse zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="572d2-632">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="572d2-633">Diese Methode bietet Ihnen die Möglichkeit, die Ausführungs Steuerung vorübergehend für den aktuellen Verteiler freizugeben, damit andere Aufgaben ausgeführt werden können, z. b. andere Ereignisse verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="572d2-633">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="572d2-634">Verwenden Sie den-`await``Await` oder den-Operator in Visual Basic, den-Operator für den Rückgabewert, um die Steuerung an den aktuellen Verteiler zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="572d2-634">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="572d2-635">Verwenden Sie diese Methode, wenn Sie Ihrer APP die Möglichkeit einräumen möchten, Ereignisse zu verarbeiten, während Ihre APP viel Arbeit im UI-Thread leistet.</span><span class="sxs-lookup"><span data-stu-id="572d2-635">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="572d2-636">Beispielsweise können Sie diese Methode in einer Schleife mit langer Laufzeit verwenden, die ein-Steuerelement aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="572d2-636">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

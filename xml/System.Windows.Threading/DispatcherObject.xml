<Type Name="DispatcherObject" FullName="System.Windows.Threading.DispatcherObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="389ad7a5f05dca027543b85f2177f66828e533d3" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83968585" /></Metadata><TypeSignature Language="C#" Value="public abstract class DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DispatcherObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherObject abstract" />
  <TypeSignature Language="F#" Value="type DispatcherObject = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt ein Objekt dar, das einem <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur der Thread, auf dem der <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> erstellt wurde, kann direkt auf die <xref:System.Windows.Threading.DispatcherObject> zugreifen.  Um auf eine <xref:System.Windows.Threading.DispatcherObject> von einem anderen Thread als dem Thread zuzugreifen, auf dem die <xref:System.Windows.Threading.DispatcherObject> erstellt wurde, wenden Sie <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> für den <xref:System.Windows.Threading.Dispatcher> an, dem die <xref:System.Windows.Threading.DispatcherObject> zugeordnet ist.  
  
 Unterklassen von <xref:System.Windows.Threading.DispatcherObject>, die Thread Sicherheit erzwingen müssen, können dies erreichen, indem Sie <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> für alle öffentlichen Methoden aufrufen.  Dadurch wird sichergestellt, dass der aufrufenden Thread der Thread ist, in dem der <xref:System.Windows.Threading.DispatcherObject> erstellt wurde.  
  
 Eine <xref:System.Windows.Threading.DispatcherObject> kann nicht unabhängig instanziiert werden. Das heißt, alle Konstruktoren sind geschützt.  
  
 Objekte, die von <xref:System.Windows.Threading.DispatcherObject> abgeleitet sind, haben Thread Affinität.  
  
 Objekte, die von <xref:System.Windows.Freezable> abgeleitet sind, sind frei Thread frei, wenn Sie eingefroren sind.  Weitere Informationen finden Sie unter der [Übersicht über Freezable-Objekte](/dotnet/framework/wpf/advanced/freezable-objects-overview).  
  
 ]]></format>
    </remarks>
    <threadsafe>Alle öffentlichen <see langword="static" />-Member dieses Typs sind threadsicher. Bei Instanzmembern ist die Threadsicherheit nicht gewährleistet.  
  
Auf dieses Objekt kann nur über den Thread zugegriffen werden, in dem es erstellt wurde. Zugriffsversuche aus anderen Threads lösen eine <see cref="T:System.InvalidOperationException" />aus. <see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> oder <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> unterstützen das Marshalling von Arbeit mit dem richtigen Thread.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DispatcherObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DispatcherObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcherObject.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bestimmt, ob der aufrufende Thread auf dieses <see cref="T:System.Windows.Threading.DispatcherObject" /> zugreifen kann.</summary>
        <returns><see langword="true" />, wenn der aufrufende Thread auf dieses Objekt zugreifen kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur der Thread, auf dem der <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> erstellt wurde, kann auf die <xref:System.Windows.Threading.DispatcherObject>zugreifen.  
  
 Alle Threads können überprüfen, ob Sie Zugriff auf diese <xref:System.Windows.Threading.DispatcherObject>haben.  
  
 Der Unterschied zwischen <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> und <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> besteht darin, dass <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> einen booleschen Wert zurückgibt, der angibt, ob der aufrufende Thread auf dieses <xref:System.Windows.Threading.DispatcherObject> zugreifen kann. <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> löst eine Ausnahme aus, wenn der aufrufende Thread keinen Zugriff auf dieses <xref:System.Windows.Threading.DispatcherObject>hat.  
  
 Das Aufrufen dieser Methode ist identisch mit dem Aufrufen von <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> für das zugeordnete <xref:System.Windows.Threading.Dispatcher> Objekt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> verwendet, um zu bestimmen, ob ein Thread Zugriff auf den Thread hat, in dem ein <xref:System.Windows.Controls.Button> erstellt wurde.  Die <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>-Methode auf dem <xref:System.Windows.Controls.Button> wird aufgerufen, um den Zugriff auf den Thread zu überprüfen.  Wenn der aufrufenden Thread Zugriff hat, wird der <xref:System.Windows.Controls.Button> durch einfaches zugreifen auf die Member des <xref:System.Windows.Controls.Button>aktualisiert. Andernfalls wird ein Delegat, der eine <xref:System.Windows.Controls.Button> als Argument akzeptiert, auf der <xref:System.Windows.Threading.Dispatcher> des <xref:System.Windows.Controls.Button>gepostet.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Windows.Threading.Dispatcher" /> ab, der diesem <see cref="T:System.Windows.Threading.DispatcherObject" /> zugeordnet ist.</summary>
        <value>Der Verteiler.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur der Thread, auf dem der <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> erstellt wurde, kann direkt auf die <xref:System.Windows.Threading.DispatcherObject> zugreifen.  Um auf eine <xref:System.Windows.Threading.DispatcherObject> von einem anderen Thread als dem Thread zuzugreifen, auf dem die <xref:System.Windows.Threading.DispatcherObject> erstellt wurde, wenden Sie <xref:System.Windows.Threading.Dispatcher.Invoke%2A> und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> auf dem <xref:System.Windows.Threading.Dispatcher> an, dem die <xref:System.Windows.Threading.DispatcherObject> zugeordnet ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcherObject.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erzwingt, dass der aufrufende Thread auf dieses <see cref="T:System.Windows.Threading.DispatcherObject" /> zugreifen kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur der Thread, auf dem der <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> erstellt wurde, kann auf die <xref:System.Windows.Threading.DispatcherObject>zugreifen.  
  
 Alle Threads können überprüfen, ob Sie Zugriff auf diese <xref:System.Windows.Threading.DispatcherObject>haben.  
  
 Der Unterschied zwischen <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> und <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> besteht darin, dass <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> einen booleschen Wert zurückgibt, der angibt, ob der aufrufende Thread auf dieses <xref:System.Windows.Threading.DispatcherObject> zugreifen kann. <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> löst eine Ausnahme aus, wenn der aufrufende Thread keinen Zugriff auf dieses <xref:System.Windows.Threading.DispatcherObject>hat.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> verwendet, um zu bestimmen, ob ein Thread Zugriff auf den Thread hat, in dem ein <xref:System.Windows.Controls.Button> erstellt wurde.  Wenn der aufrufende Thread keinen Zugriff hat, wird eine <xref:System.InvalidOperationException> ausgelöst.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">der aufrufende Thread kann nicht auf dieses <see cref="T:System.Windows.Threading.DispatcherObject" /> zugreifen.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

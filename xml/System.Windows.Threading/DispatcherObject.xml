<Type Name="DispatcherObject" FullName="System.Windows.Threading.DispatcherObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="52344fe717e53f588da77f8014ea090d0adde624" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39886229" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DispatcherObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherObject abstract" />
  <TypeSignature Language="F#" Value="type DispatcherObject = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt ein Objekt dar, das einem <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordnet ist.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur der Thread, der <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> wurde erstellt auf der möglicherweise Zugriff auf die <xref:System.Windows.Threading.DispatcherObject> direkt.  Für den Zugriff auf eine <xref:System.Windows.Threading.DispatcherObject> von einem anderen Thread als dem Thread der <xref:System.Windows.Threading.DispatcherObject> erstellt wurde, rufen Sie <xref:System.Windows.Threading.Dispatcher.Invoke%2A> oder <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> auf die <xref:System.Windows.Threading.Dispatcher> der <xref:System.Windows.Threading.DispatcherObject> zugeordnet ist.  
  
 Unterklassen von <xref:System.Windows.Threading.DispatcherObject> , dass Thread erzwingen Sicherheit durch den Aufruf können dies tun muss <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> für alle öffentlichen Methoden.  Dadurch wird sichergestellt, der aufrufende Thread ist der Thread, der die <xref:System.Windows.Threading.DispatcherObject> erstellt wurde.  
  
 Ein <xref:System.Windows.Threading.DispatcherObject> kann nicht instanziiert werden unabhängig voneinander; d. h. alle Konstruktoren geschützt sind.  
  
 Objekte, die abgeleitet <xref:System.Windows.Threading.DispatcherObject> Threadaffinität.  
  
 Objekte, die abgeleitet <xref:System.Windows.Freezable> sind Freethread-Wenn sie fixiert werden.  Weitere Informationen finden Sie unter der [Übersicht über Freezable-Objekte](~/docs/framework/wpf/advanced/freezable-objects-overview.md).  
  
 ]]></format>
    </remarks>
    <threadsafe>Alle öffentlichen <see langword="static" /> Member dieses Typs sind threadsicher. Bei Instanzmembern ist die Threadsicherheit nicht gewährleistet.  
  
Dieses Objekt kann nur aus dem Thread zugegriffen werden, in dem es erstellt wurde. Versucht, über andere Threads darauf zugreifen, löst eine <see cref="T:System.InvalidOperationException" />. <see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> oder <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> bieten Unterstützung für die Arbeit an den richtigen Thread zu marshallen.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DispatcherObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DispatcherObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Threading.DispatcherObject" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcherObject.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bestimmt, ob der aufrufende Thread auf dieses <see cref="T:System.Windows.Threading.DispatcherObject" /> zugreifen kann.</summary>
        <returns>
          <see langword="true" />, wenn der aufrufende Thread auf dieses Objekt zugreifen kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur der Thread die <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> wurde erstellt auf der möglicherweise Zugriff auf die <xref:System.Windows.Threading.DispatcherObject>.  
  
 Jeder Thread kann überprüfen, um festzustellen, ob Zugriff auf diese hat <xref:System.Windows.Threading.DispatcherObject>.  
  
 Der Unterschied zwischen <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> und <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> ist, die <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> gibt einen booleschen Wert, der angibt, ob der aufrufende Thread Zugriff auf diese <xref:System.Windows.Threading.DispatcherObject> und <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> löst eine Ausnahme aus, wenn der aufrufende Thread keinen Zugriff auf die Dies <xref:System.Windows.Threading.DispatcherObject>.  
  
 Das Aufrufen dieser Methode entspricht dem Aufrufen von <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> für das zugeordnete <xref:System.Windows.Threading.Dispatcher> Objekt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> bestimmen, ob ein Thread Zugriff auf den Thread verfügt, die eine <xref:System.Windows.Controls.Button> erstellt wurde.  Die <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> Methode für die <xref:System.Windows.Controls.Button> wird aufgerufen, um den Zugriff auf den Thread zu überprüfen.  Wenn der aufrufende Thread Zugriff hat die <xref:System.Windows.Controls.Button> wird aktualisiert, indem Sie auf die Member des der <xref:System.Windows.Controls.Button>ist, andernfalls ein Delegat, der erwartet eine <xref:System.Windows.Controls.Button> als Argument bereitgestellt, auf die <xref:System.Windows.Threading.Dispatcher> von der <xref:System.Windows.Controls.Button>.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Windows.Threading.Dispatcher" /> ab, der diesem <see cref="T:System.Windows.Threading.DispatcherObject" /> zugeordnet ist.</summary>
        <value>Der Verteiler.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur der Thread, der <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> wurde erstellt auf der möglicherweise Zugriff auf die <xref:System.Windows.Threading.DispatcherObject> direkt.  Für den Zugriff auf eine <xref:System.Windows.Threading.DispatcherObject> von einem anderen Thread als dem Thread der <xref:System.Windows.Threading.DispatcherObject> erstellt wurde, rufen Sie <xref:System.Windows.Threading.Dispatcher.Invoke%2A> und <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> auf die <xref:System.Windows.Threading.Dispatcher> der <xref:System.Windows.Threading.DispatcherObject> zugeordnet ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcherObject.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erzwingt, dass der aufrufende Thread auf dieses <see cref="T:System.Windows.Threading.DispatcherObject" /> zugreifen kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur der Thread die <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> wurde erstellt auf der möglicherweise Zugriff auf die <xref:System.Windows.Threading.DispatcherObject>.  
  
 Jeder Thread kann überprüfen, um festzustellen, ob Zugriff auf diese hat <xref:System.Windows.Threading.DispatcherObject>.  
  
 Der Unterschied zwischen <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> und <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> ist, die <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> gibt einen booleschen Wert, der angibt, ob der aufrufende Thread Zugriff auf diese <xref:System.Windows.Threading.DispatcherObject> und <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> löst eine Ausnahme aus, wenn der aufrufende Thread keinen Zugriff auf die Dies <xref:System.Windows.Threading.DispatcherObject>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> bestimmen, ob ein Thread Zugriff auf den Thread verfügt, die eine <xref:System.Windows.Controls.Button> erstellt wurde.  Wenn der aufrufende Thread keinen Zugriff auf eine <xref:System.InvalidOperationException> ausgelöst.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">der aufrufende Thread kann nicht auf dieses <see cref="T:System.Windows.Threading.DispatcherObject" /> zugreifen.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
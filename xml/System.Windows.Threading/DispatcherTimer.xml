<Type Name="DispatcherTimer" FullName="System.Windows.Threading.DispatcherTimer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0307d84083c3e61c47565065c74f601f9116e90d" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86992861" /></Metadata><TypeSignature Language="C#" Value="public class DispatcherTimer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DispatcherTimer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherTimer" />
  <TypeSignature Language="VB.NET" Value="Public Class DispatcherTimer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherTimer" />
  <TypeSignature Language="F#" Value="type DispatcherTimer = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ein Zeitgeber, der in die <see cref="T:System.Windows.Threading.Dispatcher" />-Warteschlange integriert ist, die in einem festgelegten Zeitintervall und mit einer festgelegten Priorität verarbeitet wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Windows.Threading.DispatcherTimer> wird am Anfang jeder Schleife erneut ausgewertet <xref:System.Windows.Threading.Dispatcher> .  
  
 Es ist nicht garantiert, dass Timer genau ausgeführt werden, wenn das Zeitintervall eintritt, aber Sie werden garantiert nicht vor dem Auftreten des Zeitintervalls ausgeführt.  Dies liegt daran, dass <xref:System.Windows.Threading.DispatcherTimer> Vorgänge wie bei anderen Vorgängen in der <xref:System.Windows.Threading.Dispatcher> Warteschlange platziert werden.  Wenn der <xref:System.Windows.Threading.DispatcherTimer> Vorgang ausgeführt wird, hängt von den anderen Aufträgen in der Warteschlange und ihren Prioritäten ab.  
  
 Wenn eine <xref:System.Timers.Timer?displayProperty=nameWithType> in einer-Anwendung verwendet wird [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] , sollten Sie beachten, dass die in <xref:System.Timers.Timer?displayProperty=nameWithType> einem anderen Thread als dem [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] Thread ausgeführt wird.  Um auf Objekte im [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] Thread zuzugreifen, ist es erforderlich, den Vorgang <xref:System.Windows.Threading.Dispatcher> mithilfe von oder auf dem des Threads zu veröffentlichen [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] <xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> . Gründe für die Verwendung von <xref:System.Windows.Threading.DispatcherTimer> im Gegensatz zu einer <xref:System.Timers.Timer?displayProperty=nameWithType> sind, dass die <xref:System.Windows.Threading.DispatcherTimer> im selben Thread wie die <xref:System.Windows.Threading.Dispatcher> und eine <xref:System.Windows.Threading.DispatcherPriority> auf dem festgelegt werden können <xref:System.Windows.Threading.DispatcherTimer> .  
  
 Ein- <xref:System.Windows.Threading.DispatcherTimer> Objekt behält ein Objekt bei, wenn die Methoden des-Objekts an den Timer gebunden werden.  
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Windows.Threading.DispatcherTimer> -Wert erstellt, der den Inhalt eines aktualisiert <xref:System.Windows.Controls.Label> und die- <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> Methode für den aufruft <xref:System.Windows.Input.CommandManager> .  
  
 Es wird ein-Objekt mit dem <xref:System.Windows.Threading.DispatcherTimer> Namen `dispatcherTimer` erstellt.  Der Ereignishandler `dispatcherTimer_Tick` wird dem- <xref:System.Windows.Threading.DispatcherTimer.Tick> Ereignis von hinzugefügt `dispatcherTimer` .  <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>Wird mit einem-Objekt auf 1 Sekunde festgelegt <xref:System.Windows.Duration.TimeSpan%2A> , und der Timer wird gestartet.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 Der <xref:System.Windows.Threading.DispatcherTimer.Tick> -Ereignishandler aktualisiert einen <xref:System.Windows.Controls.Label> , der die aktuelle Sekunde anzeigt, und ruft <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> für den auf <xref:System.Windows.Input.CommandManager> .  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Threading.DispatcherTimer" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Threading.DispatcherTimer" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> führt auf dem <xref:System.Windows.Threading.Dispatcher> des aktuellen Threads mit der <xref:System.Windows.Threading.DispatcherPriority.Background> Priorität aus.  Um einen anderen anzugeben <xref:System.Windows.Threading.Dispatcher> , verwenden Sie den folgenden Konstruktor: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer priority" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">Die Priorität, mit der der Zeitgeber aufgerufen werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Threading.DispatcherTimer" />-Klasse, die Zeitgeberereignisse mit der angegebenen Priorität verarbeitet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> wird auf dem <xref:System.Windows.Threading.Dispatcher> des aktuellen Threads ausgeführt.  Um einen anderen anzugeben <xref:System.Windows.Threading.Dispatcher> , verwenden Sie den folgenden Konstruktor: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (priority As DispatcherPriority, dispatcher As Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (priority, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="priority">Die Priorität, mit der der Zeitgeber aufgerufen werden soll.</param>
        <param name="dispatcher">Der Verteiler, dem der Zeitgeber zugeordnet ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Threading.DispatcherTimer" />-Klasse, die im angegebenen <see cref="T:System.Windows.Threading.Dispatcher" /> mit der angegebenen Priorität ausgeführt wird.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dispatcher" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan interval, valuetype System.Windows.Threading.DispatcherPriority priority, class System.EventHandler callback, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As TimeSpan, priority As DispatcherPriority, callback As EventHandler, dispatcher As Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(TimeSpan interval, System::Windows::Threading::DispatcherPriority priority, EventHandler ^ callback, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : TimeSpan * System.Windows.Threading.DispatcherPriority * EventHandler * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (interval, priority, callback, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="callback" Type="System.EventHandler" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="interval">Der Zeitraum zwischen Ticks.</param>
        <param name="priority">Die Priorität, mit der der Zeitgeber aufgerufen werden soll.</param>
        <param name="callback">Der Ereignishandler, der beim Eintreten des <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" />-Ereignisses aufgerufen werden soll.</param>
        <param name="dispatcher">Der Verteiler, dem der Zeitgeber zugeordnet ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Threading.DispatcherTimer" />-Klasse, die das angegebene Zeitintervall, die angegebene Priorität, den angegebenen Ereignishandler und den angegebenen <see cref="T:System.Windows.Threading.Dispatcher" /> verwendet.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> ist <see langword="null" />.

- oder -

<paramref name="dispatcher" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval" /> ist kleiner als 0 oder größer als <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den diesem <see cref="T:System.Windows.Threading.Dispatcher" /> zugeordneten <see cref="T:System.Windows.Threading.DispatcherTimer" /> ab.</summary>
        <value>Der Verteiler.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A> Eigenschaft wird bei der Erstellung des- <xref:System.Windows.Threading.DispatcherTimer> Objekts bestimmt.  Die- <xref:System.Windows.Threading.Dispatcher> Eigenschaft wird zum Zeitpunkt der Erstellung auf den aktuellen festgelegt, <xref:System.Windows.Threading.Dispatcher> es sei denn, es wird ein anderes <xref:System.Windows.Threading.Dispatcher> angegeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public TimeSpan Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Interval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : TimeSpan with get, set" Usage="System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Zeitraum zwischen den Ticks des Zeitgebers ab oder legt diesen fest.</summary>
        <value>Der Zeitraum zwischen Ticks. Der Standardwert ist „00:00:00“.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es ist nicht garantiert, dass Timer genau ausgeführt werden, wenn das Zeitintervall eintritt, aber Sie werden garantiert nicht vor dem Auftreten des Zeitintervalls ausgeführt.  Dies liegt daran, dass <xref:System.Windows.Threading.DispatcherTimer> Vorgänge wie bei anderen Vorgängen in der <xref:System.Windows.Threading.Dispatcher> Warteschlange platziert werden.  Wenn der <xref:System.Windows.Threading.DispatcherTimer> Vorgang ausgeführt wird, hängt von den anderen Aufträgen in der Warteschlange und ihren Prioritäten ab.  
  
## Examples  
 Im folgenden Beispiel wird ein erstellt <xref:System.Windows.Threading.DispatcherTimer> .  Es wird ein neues-Objekt mit dem <xref:System.Windows.Threading.DispatcherTimer> Namen `dispatcherTimer` erstellt.  Der Ereignishandler `dispatcherTimer_Tick` wird dem-Ereignis hinzugefügt <xref:System.Windows.Threading.DispatcherTimer.Tick> .  Der <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> wird mit einem-Objekt auf 1 Sekunde festgelegt <xref:System.TimeSpan> .  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval" /> ist kleiner als 0 oder größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, mit dem angegeben wird, ob der Zeitgeber ausgeführt wird, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn der Zeitgeber aktiviert ist, andernfalls <see langword="false" />.  Der Standardwert lautet <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> muss auf festgelegt werden, `true` damit das- <xref:System.Windows.Threading.DispatcherTimer.Tick> Ereignis ausgelöst wird.  
  
 Der <xref:System.Windows.Threading.DispatcherTimer.Start%2A> Aufruf <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> von legt auf fest `true` .  
  
 Der <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> Aufruf <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> von legt auf fest `false` .  
  
## Examples  
 Im folgenden Beispiel wird ein erstellt <xref:System.Windows.Threading.DispatcherTimer> .  Es wird ein neues-Objekt mit dem <xref:System.Windows.Threading.DispatcherTimer> Namen `dispatcherTimer` erstellt.  Der Ereignishandler `dispatcherTimer_Tick` wird dem-Ereignis hinzugefügt <xref:System.Windows.Threading.DispatcherTimer.Tick> .  Der <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> wird mit einem-Objekt auf 1 Sekunde festgelegt <xref:System.TimeSpan> .  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="dispatcherTimer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Startet den <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>Wenn Sie auf festlegen, `false` Wenn der Timer gestartet wird, wird der Timer beendet.  
  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>Wenn beim `true` Beenden des Timers auf festgelegt wird, wird der Zeitgeber gestartet.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> legt <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> auf fest `true` .  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> setzt den Timer zurück <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> .  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein erstellt <xref:System.Windows.Threading.DispatcherTimer> .  Es wird ein neues-Objekt mit dem <xref:System.Windows.Threading.DispatcherTimer> Namen `dispatcherTimer` erstellt.  Der Ereignishandler `dispatcherTimer_Tick` wird dem-Ereignis hinzugefügt <xref:System.Windows.Threading.DispatcherTimer.Tick> .  Der <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> wird mit einem-Objekt auf 1 Sekunde festgelegt <xref:System.Windows.Duration.TimeSpan%2A> .  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="dispatcherTimer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Hält den <see cref="T:System.Windows.Threading.DispatcherTimer" /> an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>Wenn Sie auf festlegen, `false` Wenn der Timer gestartet wird, wird der Timer beendet.  
  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>Wenn beim `true` Beenden des Timers auf festgelegt wird, wird der Zeitgeber gestartet.  
  
 Der <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> Aufruf <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> von legt auf fest `false` .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein benutzerdefiniertes Datenobjekt ab oder legt es fest.</summary>
        <value>Die benutzerdefinierten Daten.  Der Standardwert lautet <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.DispatcherTimer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event Tick As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das Zeitgeberintervall verstrichen ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein- <xref:System.Windows.Threading.DispatcherTimer.Tick> Ereignishandler erstellt.  Der-Ereignishandler aktualisiert einen <xref:System.Windows.Controls.Label> , der die aktuelle Sekunde anzeigt, und ruft <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> für den auf <xref:System.Windows.Input.CommandManager> .  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

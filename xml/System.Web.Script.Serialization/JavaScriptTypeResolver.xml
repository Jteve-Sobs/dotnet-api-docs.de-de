<Type Name="JavaScriptTypeResolver" FullName="System.Web.Script.Serialization.JavaScriptTypeResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dc4d361a43ced23669530a32d2b8051850a4dd1c" /><Meta Name="ms.sourcegitcommit" Value="0398021c376446770e5d349e60aa72d49fc34f22" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/28/2020" /><Meta Name="ms.locfileid" Value="87260292" /></Metadata><TypeSignature Language="C#" Value="public abstract class JavaScriptTypeResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JavaScriptTypeResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptTypeResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JavaScriptTypeResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class JavaScriptTypeResolver abstract" />
  <TypeSignature Language="F#" Value="type JavaScriptTypeResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt die abstrakte Basisklasse zum Implementieren eines benutzerdefinierten Typresolvers bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.Script.Serialization.JavaScriptTypeResolver> Klasse stellt die Dienste für bereit:  
  
-   Informationen zu verwalteten Typen werden mithilfe der-Methode in einen Zeichen folgen Wert umgerechnet <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> .  
  
-   Auflösen eines Zeichen folgen Werts zurück in den entsprechenden verwalteten Typ durch die- <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> Methode.  
  
 Wenn das <xref:System.Web.Script.Serialization.JavaScriptSerializer> Objekt benutzerdefinierte Typen serialisiert, kann es optional in die serialisierte JavaScript Object Notation (JSON)-Zeichenfolge einen Wert einschließen, der Typinformationen enthält. Während der Deserialisierung <xref:System.Web.Script.Serialization.JavaScriptSerializer> kann dann auf diesen Zeichen folgen Wert verweisen, um den entsprechenden verwalteten Typ zu bestimmen, in den die JSON-Zeichenfolge konvertiert wird.  
  
 Wenn Sie einen Typresolver für die <xref:System.Web.Script.Serialization.JavaScriptSerializer> -Instanz bereitstellen, verwendet das Serialisierungsprogramm die <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> -Methode und die- <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> Methode, um den verwalteten Typ und den Zeichen folgen Wert während des Serialisierungs-bzw. Deserialisierungsprozesses zuzuordnen.  
  
 Die- <xref:System.Web.Script.Serialization.JavaScriptTypeResolver> Klasse ist die Basisklasse für die- <xref:System.Web.Script.Serialization.SimpleTypeResolver> Klasse, die eine Implementierung eines Typresolvers bereitstellt, der den durch die Assembly qualifizierten Namen des verwalteten Typs verwendet.  

> [!NOTE]
> Wenn Sie einen verwenden `JavaScriptTypeResolver` , enthält die resultierende JSON-Nutzlast eine spezielle `__type` Eigenschaft. Diese Eigenschaft enthält den vollständigen Typnamen (einschließlich Namespace) des Zieltyps. Vergewissern Sie sich vor der Verwendung eines benutzerdefinierten Konflikt Lösers, dass der vollständige Name des Zieltyps keine sensiblen oder privilegierten Informationen enthält.

## Examples  

Im folgenden Beispiel wird gezeigt, wie ein benutzerdefiniertes erstellt wird `JavaScriptTypeResolver` und wie es verwendet wird, um ein Objekt zu serialisieren oder zu deserialisieren.

```cs
using System;
using System.Linq;
using System.Web.Script.Serialization;

namespace SampleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // The object array to serialize.
            Person[] people = new Person[]
            {
                new Person()
                {
                    Name = "Kristen Solstad",
                    Age = 15,
                    HomeAddress = new Address()
                    {
                        Street1 = "123 Palm Ave",
                        City = "Some City",
                        StateOrProvince = "ST",
                        Country = "United States",
                        PostalCode = "00000"
                    }
                },
                new Adult()
                {
                    Name = "Alex Johnson",
                    Age = 39,
                    Occupation = "Mechanic",
                    HomeAddress = new Address()
                    {
                        Street1 = "445 Lorry Way",
                        Street2 = "Unit 3A",
                        City = "Some City",
                        Country = "United Kingdom",
                        PostalCode = "AA0 A00"
                    }
                }
            };

            // Serialize the object array, then write it to the console.
            string serializedData = SerializePeopleArray(people);
            Console.WriteLine("Serialized:");
            Console.WriteLine(serializedData);
            Console.WriteLine();

            // Now deserialize the object array.
            Person[] deserializedArray = DeserializePeopleArray(serializedData);
            Console.WriteLine("Deserialized " + deserializedArray.Length + " people.");
            foreach (Person person in deserializedArray)
            {
                Console.WriteLine(person.Name + " (Age " + person.Age + ") [" + person.GetType() + "]");
            }
        }

        static string SerializePeopleArray(Person[] people)
        {
            // The custom type resolver to use.
            // Note: Except for primitives like int and string, *every* type that
            // we might see in the object graph must be listed here.
            CustomTypeResolver resolver = new CustomTypeResolver(
                typeof(Person),
                typeof(Adult),
                typeof(Address));

            // Instantiate the serializer.
            JavaScriptSerializer serializer = new JavaScriptSerializer(resolver);

            // Serialize the object array, then return it.
            string serialized = serializer.Serialize(people);
            return serialized;
        }

        static Person[] DeserializePeopleArray(string serializedData)
        {
            // The custom type resolver to use.
            // Note: This is the same list that was provided to the Serialize routine.
            CustomTypeResolver resolver = new CustomTypeResolver(
                typeof(Person),
                typeof(Adult),
                typeof(Address));

            // Instantiate the serializer.
            JavaScriptSerializer serializer = new JavaScriptSerializer(resolver);

            // Deserialize the object array, then return it.
            Person[] deserialized = serializer.Deserialize<Person[]>(serializedData);
            return deserialized;
        }
    }

    public class Person
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public Address HomeAddress { get; set; }
    }

    public class Adult : Person
    {
        public string Occupation { get; set; }
    }

    public class Address
    {
        public string Street1 { get; set; }
        public string Street2 { get; set; }
        public string City { get; set; }
        public string StateOrProvince { get; set; }
        public string Country { get; set; }
        public string PostalCode { get; set; }
    }

    // A custom JavaScriptTypeResolver that restricts the payload
    // to a set of known good types.
    class CustomTypeResolver : JavaScriptTypeResolver
    {
        private readonly Type[] _allowedTypes;

        public CustomTypeResolver(params Type[] allowedTypes)
        {
            if (allowedTypes == null)
            {
                throw new ArgumentNullException("allowedTypes");
            }

            // Make a copy of the array the caller gave us.
            _allowedTypes = (Type[])allowedTypes.Clone();
        }

        public override Type ResolveType(string id)
        {
            // Iterate over all of the allowed types, looking for a match
            // for the 'id' parameter. Calling Type.GetType(id) is dangerous,
            // so we instead perform a match on the Type.FullName property.
            foreach (Type allowedType in _allowedTypes)
            {
                if (allowedType.FullName == id)
                {
                    return allowedType;
                }
            }

            // The caller provided a type we don't recognize. This could be
            // dangerous, so we'll fail the operation immediately.
            throw new ArgumentException("Unknown type: " + id, "id");
        }

        public override string ResolveTypeId(Type type)
        {
            // Before we serialize data, quickly double-check to make
            // sure we're allowed to deserialize the data. Otherwise it's
            // no good serializing something if we can't deserialize it.
            if (_allowedTypes.Contains(type))
            {
                return type.FullName;
            }

            throw new InvalidOperationException("Cannot serialize an object of type " + type + ". Did you forget to add it to the allow list?");
        }
    }
}
```

Die vorherige App gibt Folgendes an der Konsole aus, die für die Lesbarkeit formatiert ist.

```txt
Serialized:
[
    {
        "__type": "SampleApp.Person",
        "Name": "Kristen Solstad",
        "Age": 15,
        "HomeAddress": {
            "__type": "SampleApp.Address",
            "Street1": "123 Palm Ave",
            "Street2": null,
            "City": "Some City",
            "StateOrProvince": "ST",
            "Country": "United States",
            "PostalCode": "00000"
        }
    },
    {
        "__type": "SampleApp.Adult",
        "Occupation": "Mechanic",
        "Name": "Alex Johnson",
        "Age": 39,
        "HomeAddress": {
            "__type": "SampleApp.Address",
            "Street1": "445 Lorry Way",
            "Street2": "Unit 3A",
            "City": "Some City",
            "StateOrProvince": null,
            "Country": "United Kingdom",
            "PostalCode": "AA0 A00"
        }
    }
]

Deserialized 2 people.
Kristen Solstad (Age 15) [SampleApp.Person]
Alex Johnson (Age 39) [SampleApp.Adult]
```

Im vorherigen Beispiel ist der Typ `Adult` Unterklassen `Person` . Ein Benutzer `JavaScriptTypeResolver` definiertes wird verwendet, um die Typinformationen als Teil der generierten JSON-Nutzlast einzuschließen. Dies ermöglicht eine eingeschränkte Polymorphie beim Deserialisieren der JSON-Nutzlast zurück in ein .NET-Objekt Diagramm. Die Nutzlast kann steuern, ob eine Basis `Person` Instanz oder eine abgeleitete `Adult` Instanz zurück an den Aufrufer zurückgegeben werden soll.

Dieses Beispiel ist sicher, weil es einen `allow-list` Mechanismus zum Steuern der Deserialisierung verwendet. Der Code:

* Initialisiert `CustomTypeResolver` mit einer expliziten Liste zulässiger Typen.
* Schränkt den Deserialisierungsprozess auf eine genehmigte Liste von Typen ein. Die Einschränkung verhindert [deserialisierungsangriffe](https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data), bei denen der Remote Client eine böswillige `__type` in der JSON-Nutzlast angibt und den Server zur Deserialisierung eines gefährlichen Typs verleitet.

Obwohl die app nur erwartet `Person` , dass-und- `Adult` Instanzen als Teil des Arrays der obersten Ebene deserialisiert werden, ist es trotzdem erforderlich, dass Sie der Zulassungsliste hinzufügen, `Address` da:

* Beim Serialisieren `Person` von oder wird `Adult` auch ein `Address` als Teil des Objekt Diagramms serialisiert.
* Alle Typen, die im Objekt Diagramm vorhanden sein können, müssen in der Zulassungsliste berücksichtigt werden. Primitive wie `int` und `string` müssen nicht angegeben werden.

> [!WARNING]
>  Nicht `Type.GetType(id)` innerhalb der-Methode aufzurufen `ResolveType` . Dies kann zu einer Sicherheits-vunerability in der APP führen. Durchlaufen Sie stattdessen die Liste der zulässigen Typen, und vergleichen Sie Ihre- `Type.FullName` Eigenschaft mit der eingehenden `id` , wie im vorherigen Beispiel gezeigt.
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Wenn Sie einen Typresolver implementieren, muss die Zeichenfolge, die von der-Methode zurückgegeben wird, <see cref="M:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(System.Type)" /> wieder dem gleichen verwalteten Typ zugeordnet werden, wenn der Zeichen folgen Wert an die-Methode übermittelt wird <see cref="M:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(System.String)" /> .</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JavaScriptTypeResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; JavaScriptTypeResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Script.Serialization.JavaScriptTypeResolver" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveType">
      <MemberSignature Language="C#" Value="public abstract Type ResolveType (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type ResolveType(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ResolveType (id As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ ResolveType(System::String ^ id);" />
      <MemberSignature Language="F#" Value="abstract member ResolveType : string -&gt; Type" Usage="javaScriptTypeResolver.ResolveType id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Der Name des verwalteten Typs.</param>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse das <see cref="T:System.Type" />-Objekt zurück, das dem angegebenen Typnamen zugeordnet ist.</summary>
        <returns>Das <see cref="T:System.Type" />-Objekt, das dem angegebenen Typnamen zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Typresolver einer-Instanz zugeordnet ist <xref:System.Web.Script.Serialization.JavaScriptSerializer> , verwendet das Serialisierungsprogramm die- <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> Methode, wenn es eine JSON-Zeichenfolge durchläuft, um den spezifischen verwalteten Typ zu bestimmen, in den der JSON-Typ konvertiert werden soll.  

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn ein Zeichen folgen Wert angegeben ist, muss der Typresolver ein-Objekt zurückgeben <see cref="T:System.Type" /> , das den entsprechenden verwalteten Typ darstellt.</para></block>
      </Docs>
    </Member>
    <Member MemberName="ResolveTypeId">
      <MemberSignature Language="C#" Value="public abstract string ResolveTypeId (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ResolveTypeId(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ResolveTypeId (type As Type) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ ResolveTypeId(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member ResolveTypeId : Type -&gt; string" Usage="javaScriptTypeResolver.ResolveTypeId type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Der aufzulösende verwaltete Typ.</param>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse den Typnamen für das angegebene <see cref="T:System.Type" />-Objekt zurück.</summary>
        <returns>Der Name des angegebenen verwalteten Typs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> Methode oder zurückgibt, wird der- `null` <xref:System.String.Empty> Typ vom Typresolver nicht unterstützt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

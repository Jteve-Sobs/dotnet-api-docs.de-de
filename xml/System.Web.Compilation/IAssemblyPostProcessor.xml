<Type Name="IAssemblyPostProcessor" FullName="System.Web.Compilation.IAssemblyPostProcessor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ad9a75c0e2153f517afbada4d570c0a97f64f859" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64148088" /></Metadata><TypeSignature Language="C#" Value="public interface IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAssemblyPostProcessor implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.IAssemblyPostProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAssemblyPostProcessor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="F#" Value="type IAssemblyPostProcessor = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiert die Methode, die eine Klasse implementiert, um eine Assembly zu verarbeiten, nachdem diese erstellt wurde.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Klasse implementiert diese Schnittstelle kann eine Assembly zugreifen, nachdem sie kompiliert wurde. Die <xref:System.Web.Compilation.AssemblyBuilder> Klasse Assemblys kompiliert und anschließend überprüft, ob ein <xref:System.Web.Compilation.IAssemblyPostProcessor> Schnittstelle in der Webkonfigurationsdatei registriert wurde. Wenn dies der Fall ist, die <xref:System.Web.Compilation.AssemblyBuilder> Instanz Aufrufe der <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> -Methode für die <xref:System.Web.Compilation.IAssemblyPostProcessor> Schnittstelle zum Ausführen aller Aktionen nach der Kompilierung und vor dem Laden der Assembly. Beispielsweise kann ein Profilertool diese Schnittstelle zum Einrichten von Tests in der Assembly implementieren.  
  
 Wenn ein <xref:System.Web.Compilation.IAssemblyPostProcessor> Schnittstelle registriert ist, werden die ASP.NET-Anwendung und deren Assemblys immer im Debugmodus kompiliert werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Implementierung der Erstellung der <xref:System.Web.Compilation.IAssemblyPostProcessor> Schnittstelle, und registrieren Sie sie in der Datei "Web.config" einer Webanwendung.  
  
 Der erste Teil des Codebeispiels wird eine Klasse namens `Samples.Process.postProcessTest` , implementiert die <xref:System.Web.Compilation.IAssemblyPostProcessor> Schnittstelle. Diese Klasse führt die Aktion zum einfachen Schreiben einer Datei bei der <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> Methode wird aufgerufen.  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 Kompilieren Sie die Klasse in eine DLL-Datei mit dem Befehl `csc /target:library postProcessTest.cs`. Fügen Sie die resultierende DLL-Datei im Ordner "Bin" der ASP.NET-Anwendung hinzu, und registrieren Sie die DLL-Datei in der Datei "Web.config", wie im folgenden Code gezeigt.  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 Wenn ein Benutzer die Website besucht, wird die Webanwendung wird dynamisch kompiliert, und die Datei wird MyTest.txt in C:\compile geschrieben.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="PostProcessAssembly">
      <MemberSignature Language="C#" Value="public void PostProcessAssembly (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostProcessAssembly(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostProcessAssembly (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostProcessAssembly(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member PostProcessAssembly : string -&gt; unit" Usage="iAssemblyPostProcessor.PostProcessAssembly path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der Pfad der Assembly.</param>
        <summary>Wird aufgerufen, bevor die Assembly geladen wird, um der implementierenden Klasse das Ändern der Assembly zu ermöglichen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Compilation.AssemblyBuilder> Klasse ruft diese Methode auf, nachdem die Assembly kompiliert wurde. Aktionen ausgeführt werden, vor dem Laden der Assembly sollte in dieser Methode enthalten sein.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Implementierung der Erstellung der <xref:System.Web.Compilation.IAssemblyPostProcessor> Schnittstelle, und registrieren Sie sie in der Datei "Web.config" einer Webanwendung.  
  
 Der erste Teil des Codebeispiels wird eine Klasse namens `Samples.Process.postProcessTest` , implementiert die <xref:System.Web.Compilation.IAssemblyPostProcessor> Schnittstelle. Diese Klasse führt die Aktion zum einfachen Schreiben einer Datei bei der <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> Methode wird aufgerufen.  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 Kompilieren Sie die Klasse in eine DLL-Datei mit dem Befehl `csc /target:library postProcessTest.cs`. Fügen Sie die resultierende DLL-Datei im Ordner "Bin" der ASP.NET-Anwendung hinzu, und registrieren Sie die DLL-Datei in der Datei "Web.config", wie im folgenden Code gezeigt.  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 Wenn ein Benutzer die Website besucht, wird die Webanwendung wird dynamisch kompiliert, und die Datei wird MyTest.txt in C:\compile geschrieben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
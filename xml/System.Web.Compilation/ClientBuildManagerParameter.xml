<Type Name="ClientBuildManagerParameter" FullName="System.Web.Compilation.ClientBuildManagerParameter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0bbff3f7e9b001bcb0d05f1a7b17730044138ba8" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70648242" /></Metadata><TypeSignature Language="C#" Value="public class ClientBuildManagerParameter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ClientBuildManagerParameter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ClientBuildManagerParameter" />
  <TypeSignature Language="VB.NET" Value="Public Class ClientBuildManagerParameter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientBuildManagerParameter" />
  <TypeSignature Language="F#" Value="type ClientBuildManagerParameter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enthält Werte, die während der Vorkompilierung an den ASP.NET-Compiler übergeben wurden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.net Web Pages und Code Dateien können vorkompiliert werden, um eine schnellere Antwort für Benutzer zu ermöglichen und die Bereitstellung der Website ohne Bereitstellung des Quellcodes zuzulassen. Weitere Informationen zum Vorkompilieren einer ASP.NET-Website finden Sie unter [Übersicht über die Vorkompilierung des ASP.NET-Website Projekts](https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a).  
  
 Die <xref:System.Web.Compilation.ClientBuildManagerParameter> -Klasse speichert Werte, die während der Vorkompilierung verwendet werden. Die <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> -Eigenschaft bestimmt, wie die Assembly erstellt wird. Sie können z. b. <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> auf <xref:System.Web.Compilation.PrecompilationFlags.Clean> festlegen, um zuvor kompilierte Komponenten neu zu kompilieren, oder <xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget> auf festlegen, um zuzulassen, dass die resultierende Assembly alle Komponenten im Zielverzeichnis überschreibt. Der <xref:System.Web.Compilation.PrecompilationFlags> Enumerator verfügt über <xref:System.FlagsAttribute> ein-Attribut, das eine bitweise Kombination der Element Werte zulässt. Die <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> -Eigenschaft kann mehr als einen Wert aus der <xref:System.Web.Compilation.PrecompilationFlags> -Enumeration enthalten, um eine Kombination von Verhalten der Vorkompilierung anzugeben.  
  
 Der <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> -Eigenschaft oder der <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> -Eigenschaft wird ein Wert zugewiesen, um eine Assembly mit starkem Namen zu erstellen. Beide Werte müssen nicht festgelegt werden, um eine Assembly mit starkem Namen zu erstellen.  
  
 Ein <xref:System.Web.Compilation.ClientBuildManagerParameter> -Objekt wird durch den <xref:System.Web.Compilation.ClientBuildManager> <xref:System.Web.Compilation.ClientBuildManager.%23ctor%2A> -Konstruktor an das-Objekt übergeben.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist Teil eines Code Beispiels, das in der <xref:System.Web.Compilation.ClientBuildManager> Klassen Übersicht zu finden ist. Im Beispiel wird ein <xref:System.Web.Compilation.ClientBuildManagerParameter> -Objekt erstellt und seine Werte festgelegt. Die resultierende Assembly verfügt über einen starken Namen, der auf der angegebenen Schlüsseldatei basiert und entsprechend den bereitgestellten <xref:System.Web.Compilation.PrecompilationFlags> Werten vorkompiliert wird.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
    <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
    <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET-Vorkompilierung der Website</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClientBuildManagerParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ClientBuildManagerParameter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClientBuildManagerParameter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Compilation.ClientBuildManagerParameter" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert keine Eigenschaftswerte. Diese Werte müssen über die <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>Eigenschaften, und <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> festgelegt werden, nachdem das Objekt erstellt wurde.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist Teil eines Code Beispiels, das in der <xref:System.Web.Compilation.ClientBuildManager> Klassen Übersicht zu finden ist. Im Beispiel wird ein <xref:System.Web.Compilation.ClientBuildManagerParameter> -Objekt erstellt und seine Werte festgelegt. Die resultierende Assembly verfügt über einen starken Namen, der auf der angegebenen Schlüsseldatei basiert und entsprechend den bereitgestellten <xref:System.Web.Compilation.PrecompilationFlags> Werten vorkompiliert wird.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludedVirtualPaths">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;string&gt; ExcludedVirtualPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;string&gt; ExcludedVirtualPaths" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExcludedVirtualPaths As List(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::List&lt;System::String ^&gt; ^ ExcludedVirtualPaths { System::Collections::Generic::List&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExcludedVirtualPaths : System.Collections.Generic.List&lt;string&gt;" Usage="System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ausgeschlossene virtuelle Pfade ab oder legt diese fest.</summary>
        <value>Ausgeschlossene virtuelle Pfade.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrecompilationFlags">
      <MemberSignature Language="C#" Value="public System.Web.Compilation.PrecompilationFlags PrecompilationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Compilation.PrecompilationFlags PrecompilationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property PrecompilationFlags As PrecompilationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Compilation::PrecompilationFlags PrecompilationFlags { System::Web::Compilation::PrecompilationFlags get(); void set(System::Web::Compilation::PrecompilationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.PrecompilationFlags : System.Web.Compilation.PrecompilationFlags with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.PrecompilationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Flags ab, die das Vorkompilierungsverhalten bestimmen, oder legt diese fest.</summary>
        <value>Die <see cref="T:System.Web.Compilation.PrecompilationFlags" /> für ein Clientbuild.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> -Eigenschaft bestimmt, wie die Assembly erstellt wird. Sie können z. b. <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> auf <xref:System.Web.Compilation.PrecompilationFlags.Clean> festlegen, um zuvor kompilierte Komponenten neu zu kompilieren, oder <xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget> auf festlegen, um zuzulassen, dass die resultierende Assembly alle Komponenten im Zielverzeichnis überschreibt. Der <xref:System.Web.Compilation.PrecompilationFlags> Enumerator verfügt über <xref:System.FlagsAttribute> ein-Attribut, das eine bitweise Kombination der Element Werte zulässt. Die <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> -Eigenschaft kann mehr als einen Wert aus der <xref:System.Web.Compilation.PrecompilationFlags> -Enumeration enthalten, um eine Kombination von Verhalten der Vorkompilierung anzugeben.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist Teil eines Code Beispiels, das in der <xref:System.Web.Compilation.ClientBuildManager> Klassen Übersicht zu finden ist. Im Beispiel wird ein <xref:System.Web.Compilation.ClientBuildManagerParameter> -Objekt erstellt und seine Werte festgelegt. Die resultierende Assembly verfügt über einen starken Namen, der auf der angegebenen Schlüsseldatei basiert und entsprechend den bereitgestellten <xref:System.Web.Compilation.PrecompilationFlags> Werten vorkompiliert wird.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET-Vorkompilierung der Website</related>
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyContainer">
      <MemberSignature Language="C#" Value="public string StrongNameKeyContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyContainer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyContainer As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyContainer { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StrongNameKeyContainer : string with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den während der Kompilierung verwendeten Schlüsselcontainer ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.String" /> des Werts für den Schlüsselcontainer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> -Eigenschaft oder der <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> -Eigenschaft wird ein Wert zugewiesen, um eine Assembly mit starkem Namen zu erstellen. Beide Werte müssen nicht festgelegt werden, um eine Assembly mit starkem Namen zu erstellen.  
  
   
  
## Examples  
 Das folgende Codebeispiel ähnelt dem Codebeispiel in der <xref:System.Web.Compilation.ClientBuildManager> Klassen Übersicht, mit dem Unterschied, dass die resultierende Assembly einen starken Namen hat, der auf dem bereitgestellten Schlüssel Container basiert. Die Vorkompilierung erfolgt entsprechend den bereit <xref:System.Web.Compilation.PrecompilationFlags> gestellten Werten.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/CS/source.cs#1)]
 [!code-vb[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET-Vorkompilierung der Website</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f3022b39-f17f-48c1-b067-025eab0ce8bc">Importieren und Exportieren der RSA-Schlüssel Container der geschützten Konfiguration</related>
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyFile">
      <MemberSignature Language="C#" Value="public string StrongNameKeyFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StrongNameKeyFile : string with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die während der Kompilierung verwendete Schlüsseldatei ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.String" /> des Werts für die Schlüsseldatei.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> -Eigenschaft oder der <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> -Eigenschaft wird ein Wert zugewiesen, um eine Assembly mit starkem Namen zu erstellen. Beide Werte müssen nicht festgelegt werden, um eine Assembly mit starkem Namen zu erstellen.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist Teil eines Code Beispiels, das in der <xref:System.Web.Compilation.ClientBuildManager> Klassen Übersicht zu finden ist. Im Beispiel wird ein <xref:System.Web.Compilation.ClientBuildManagerParameter> -Objekt erstellt und seine Werte festgelegt. Die resultierende Assembly verfügt über einen starken Namen, der auf der angegebenen Schlüsseldatei basiert und entsprechend den bereitgestellten <xref:System.Web.Compilation.PrecompilationFlags> Werten vorkompiliert wird.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET-Vorkompilierung der Website</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ffbf6d9e-4a88-4a8a-9645-4ce0ee1ee5f9">Erstellen und Verwenden von Assemblys mit starkem Namen</related>
      </Docs>
    </Member>
  </Members>
</Type>

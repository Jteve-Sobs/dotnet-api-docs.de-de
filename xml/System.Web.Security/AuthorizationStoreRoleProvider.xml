<Type Name="AuthorizationStoreRoleProvider" FullName="System.Web.Security.AuthorizationStoreRoleProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="23dd5c2cefcf21cd1bf6e2a7acccc3a0e1c3d50f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37750684" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AuthorizationStoreRoleProvider : System.Web.Security.RoleProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthorizationStoreRoleProvider extends System.Web.Security.RoleProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.AuthorizationStoreRoleProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class AuthorizationStoreRoleProvider&#xA;Inherits RoleProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class AuthorizationStoreRoleProvider : System::Web::Security::RoleProvider" />
  <TypeSignature Language="F#" Value="type AuthorizationStoreRoleProvider = class&#xA;    inherit RoleProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Security.RoleProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Manages storage of role-membership information for an ASP.NET application in an authorization-manager policy store, either in an XML file, in an Active Directory, or on an Active Directory Application Mode server.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse wird verwendet, durch die <xref:System.Web.Security.Roles> und <xref:System.Web.Security.RolePrincipal> Klasse, um Rollenverwaltungsdienste für eine ASP.NET-Anwendung mit einem Autorisierungs-Manager-Speicher bereitzustellen. Sie können die Rollenverwaltung verwenden, auf verschiedene Ebenen der Autorisierung für Ihre Anwendung angeben. Der Autorisierungs-Manager kann mithilfe der Microsoft Management Console zugegriffen werden.  
  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider> Objekt funktioniert mit beiden Windows-Authentifizierung und bildet die Authentifizierungsmodi.  
  
 Sie können konfigurieren, die <xref:System.Web.Security.AuthorizationStoreRoleProvider> Objekt, das entweder eine lokale XML-Datei oder einen Active Directory oder Active Directory Application Mode (ADAM)-Server verwendet. Wenn Sie eine lokale Datei zu verwenden, sollte die Verbindungszeichenfolge wie im folgenden Beispiel aussehen.  
  
```  
msxml://<path to xml file>  
```  
  
 Wenn die lokale Datei in der Verzeichnisstruktur einer ASP.NET Web-Anwendung gespeichert ist, können Sie die Tilde ("~") Zeichen, das das Stammverzeichnis angeben. Um anzugeben, dass die lokale Datei im Verzeichnis der Anwendung die Daten gespeichert werden, würden Sie z. B. eine Verbindungszeichenfolge ähnlich wie im folgenden Beispiel verwenden.  
  
 `msxml://~\App_Data\datafilename.xml`  
  
> [!IMPORTANT]
>  Speichern eine XML-Datendatei in das Verzeichnis der Webanwendung ist ein potenzielles Sicherheitsrisiko dar. Standardmäßig wird IIS XML-Dateien für das Web bereit. Um die Sicherheit zu verbessern, wenn Sie eine lokale Datendatei in einer ASP.NET-Anwendung verwenden, sollten Sie die Datei im Speichern der `App_Data` Verzeichnis. Dateien in die `App_Data` Verzeichnis wird nicht für das Web bereitgestellt werden.  
  
 Wenn Sie einen Active Directory- oder ADAM-Server für den Richtlinienspeicher verwenden, muss die Verbindungszeichenfolge wie im folgenden Beispiel.  
  
 `msldap://myserver/CN=MyAzManStore,OU=MyOU,DC=MyDomain,DC=MyDC,DC=Com`  
  
 Die Ausnahmen aufgeführt, in der Dokumentation für <xref:System.Web.Security.AuthorizationStoreRoleProvider> Objektmethoden werden die Ausnahmen, die ausgelöst werden, indem die <xref:System.Web.Security.AuthorizationStoreRoleProvider> Objekt. Da der Anbieter für die zugrunde liegenden Authentifizierungs-Manager-Laufzeit basiert eine <xref:System.Runtime.InteropServices.COMException> Ausnahme möglicherweise ausgelöst, wenn die <xref:System.Web.Security.AuthorizationStoreRoleProvider> Objekt leitet den Aufruf einer Methode für die Authentifizierungs-Manager-Laufzeit.  
  
> [!IMPORTANT]
>  Die <xref:System.Web.Security.AuthorizationStoreRoleProvider> Objekt hat die folgenden Anforderungen für die Ausführung in teilweise vertrauenswürdigen Umgebungen:  
>   
>  Wenn mit einem dateibasierten Richtlinienspeicher in einer ASP.NET-Anwendung, die e/a-Berechtigungen, die von der aktuellen Vertrauensebene bestimmen, ob gelesen, und schreibaktionen sind zulässig, vom Anbieter. Die ASP.NET-Anwendung muss über Leseberechtigung für die Datei zum Lesen von Daten aus dem Richtlinienspeicher, und Sie müssen über die Schreibberechtigung für die neuen Informationen speichern, oder Aktualisieren von vorhandenen Informationen in den Richtlinienspeicher. Die Standarddatei für mittlere Vertrauenswürdigkeit Richtlinie erhalten eine ASP.NET Anwendung Lese-/Schreibberechtigungen im Verzeichnis der Anwendung. Die Standarddatei für wenig vertrauenswürdige Richtlinie bietet nur eine ASP.NET-Anwendung read-Berechtigung im Verzeichnis der Anwendung. Darüber hinaus müssen die Prozess-ID, die unter der die ASP.NET-Anwendung ausgeführt wird-Berechtigungen zum Lesen und/oder schreiben die Richtliniendatei.  
>   
>  Wenn Sie einen Active Directory- oder ADAM-Server zu verwenden, benötigt die ASP.NET-Anwendung nicht verwaltetem Code Berechtigung an, da das interne <xref:System.Web.Security.AuthorizationStoreRoleProvider> Objektcode COM-Interop verwendet.  
>   
>  Bei Verwendung der <xref:System.Web.Security.AuthorizationStoreRoleProvider> Objekt außerhalb von ASP.NET der aufrufende Code benötigt die Berechtigung für nicht verwalteten Code.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Web.config-Datei, verwenden die <xref:System.Web.Security.AuthorizationStoreRoleProvider> für die Rollenverwaltung.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="AuthorizationServices" connectionString="msxml://~\App_Data\SampleStore.xml" />  
  </connectionStrings>  
  
  <system.web>  
  
    <authentication mode="Windows" />  
    <identity impersonate="true" />  
  
    <roleManager defaultProvider="AuthorizationStoreRoleProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="false"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
      <providers>  
        <clear />  
          <add  
            name="AuthorizationStoreRoleProvider"  
            type="System.Web.Security.AuthorizationStoreRoleProvider"  
            connectionStringName="AuthorizationServices"  
            applicationName="SampleApplication"   
            cacheRefreshInterval="60"  
            scopeName="" />  
      </providers>  
    </roleManager>  
  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthorizationStoreRoleProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AuthorizationStoreRoleProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.%23ctor%2A> Konstruktor wird aufgerufen, von ASP.NET zum Erstellen einer Instanz von der <xref:System.Web.Security.AuthorizationStoreRoleProvider> Klasse als in der Konfiguration für die Anwendung angegeben. Dieser Konstruktor ist nicht dazu gedacht, die aus Ihrem Code verwendet werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public override void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.AddUsersToRoles : string[] * string[] -&gt; unit" Usage="authorizationStoreRoleProvider.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">A string array of user names to be added to the specified roles.</param>
        <param name="roleNames">A string array of role names to add the specified user names to.</param>
        <summary>Adds the specified user names to each of the specified roles.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse, um eine oder mehrere Benutzer eine oder mehrere Rollen im Autorisierungs-Manager-Datenspeicher in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben zugeordnet werden sollen. Diese Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles.AddUserToRole%2A?displayProperty=nameWithType>, <xref:System.Web.Security.Roles.AddUserToRoles%2A?displayProperty=nameWithType>, <xref:System.Web.Security.Roles.AddUsersToRole%2A?displayProperty=nameWithType>, und <xref:System.Web.Security.Roles.AddUsersToRoles%2A?displayProperty=nameWithType> Methoden der <xref:System.Web.Security.Roles> Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein oder mehrere Benutzer zu einer Rolle hinzugefügt oder entfernt aus einer Rolle einen Benutzer. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">One of the specified user names is <see langword="null" />.  -or-  One of the specified role names is <see langword="null" />.  -or-  <paramref name="usernames" /> is <see langword="null" />.  -or-  <paramref name="roleNames" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">One of the specified user names is an empty string or contains a comma (,).  -or-  One of the specified role names is an empty string or contains a comma (,).  -or-  <paramref name="usernames" /> contains a duplicate element.  -or-  <paramref name="roleNames" /> contains a duplicate element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">The configured <see langword="applicationName" /> was not found.  -or-  The configured <see langword="scopeName" /> was not found.  -or-  The authorization-manager runtime is not installed on the server.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The <see langword="connectionStringName" /> attribute references a connection string to a file that does not exist.</exception>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level.</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public override string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the authorization store application for which to store and retrieve role information.</summary>
        <value>Der Name der autorisierungsspeicheranwendung Anwendung, für die zum Speichern und Abrufen von Informationen zu speichern. Der Standardwert ist die <see cref="P:System.Web.HttpRequest.ApplicationPath" /> Eigenschaftswert für die aktuelle <see cref="P:System.Web.HttpContext.Request" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A> dient der <xref:System.Web.Security.AuthorizationStoreRoleProvider> zum Zuordnen von Benutzern und Rollen mit verschiedenen Autorisierungs-Manager-Anwendungen, die mehrere ASP.NET ermöglicht die Anwendungen verwenden die gleiche Autorisierungs-Manager-Richtlinie zu speichern, um Rolleninformationen ohne Speichern Ausführen von in Konflikt zwischen doppelten Rollennamen. Alternativ können mehrere ASP.NET-Anwendungen den gleichen Richtlinienspeicher verwenden, mit den gleichen Wert in der <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A> Eigenschaft. Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A> -Eigenschaft programmgesteuert festgelegt werden kann, oder sie können mithilfe von deklarativ in der Datei "Web.config" der Anwendung festgelegt werden die `applicationName` Attribut.  
  
 Wenn ein Wert nicht, für angegeben wird die `applicationName` Attribut in der Datei "Web.config" der <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> Eigenschaftswert für die aktuelle <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> Objekt wird verwendet.  
  
> [!NOTE]
>  Namen der Autorisierungs-Manager können nicht das Zeichen "/", der in enthalten ist enthalten die <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> Eigenschaft. Daher den Standardwert für die <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A> Eigenschaft kann nicht als Anwendungsnamen für die Autorisierungs-Manager verwendet werden, und Sie müssen immer angeben, in der Datei "Web.config" der Anwendung ein `applicationName` -Attribut in der `provider` Element so konfigurieren Sie Ihre <xref:System.Web.Security.AuthorizationStoreRoleProvider> Instanz.  
  
> [!CAUTION]
>  Da für alle Anforderungen verarbeitet, die von eine einzelnen Rolleninstanz-Anbieter verwendet wird ein <xref:System.Web.HttpApplication> -Objekt können mehrere Anforderungen parallel ausgeführt werden und es wird versucht, legen Sie die <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A> -Eigenschaftswert. Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A> Eigenschaft ist nicht threadsicher ist, für mehrere Schreibvorgänge, und Ändern der <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A> Eigenschaftswert kann zu unerwartetem Verhalten führen, wenn mehrere Benutzer einer Anwendung vorhanden sind. Es wird empfohlen, dass Sie keinen Code schreiben, ermöglicht Benutzern das festlegen, der <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A> Eigenschaft es sei denn, Sie müssen. Ein Beispiel für eine Anwendung in dem das Festlegen der <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A> Eigenschaft ist möglicherweise erforderlich ist eine administrative Anwendung, die von Rollendaten für mehrere Anwendungen verwaltet. Eine solche Anwendung sollte es sich um eine Anwendung für die einzelnen Benutzer und nicht für eine Webanwendung sein.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt das Element in der `system.web` -Abschnitt der Datei "Web.config" für eine ASP.NET-Anwendung. Es gibt an, der Anwendung <xref:System.Web.Security.AuthorizationStoreRoleProvider> -Instanz und legt die <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A> Eigenschaft `MyApplication`.  
  
```  
<roleManager defaultProvider="AuthorizationStoreProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.AuthorizationStoreRoleProvider"  
      connectionStringName="AuthorizationStoreServices"   
      scopeName="MyScope"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">An attempt was made to set the <see cref="P:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName" /> to a string that is longer than 256 characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="CacheRefreshInterval">
      <MemberSignature Language="C#" Value="public int CacheRefreshInterval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheRefreshInterval" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CacheRefreshInterval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CacheRefreshInterval { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CacheRefreshInterval : int" Usage="System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of minutes between refreshes of the cache of the policy-store data.</summary>
        <value>Die Anzahl der Minuten zwischen den Aktualisierungen von zwischengespeicherten richtlinienspeicherdaten. Der Standardwert ist 60.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public override void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.CreateRole : string -&gt; unit" Usage="authorizationStoreRoleProvider.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">The name of the role to create.</param>
        <summary>Adds a new role to the role authorization-manager policy store.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.CreateRole%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse zum Erstellen einer Rolle im Autorisierungs-Manager-Datenspeicher in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben.  
  
 Rollennamen sind nicht in der Groß-/Kleinschreibung beachtet.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine neue Rolle im Autorisierungsmanager-Richtlinienspeicher. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> is an empty string.  -or-  <paramref name="roleName" /> contains a comma.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">The configured <see langword="applicationName" /> was not found.  -or-  The configured <see langword="scopeName" /> was not found.  -or-  The authorization-manager runtime is not installed on the server.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The <see langword="connectionStringName" /> attribute references a connection string to a file that does not exist.</exception>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="override this.DeleteRole : string * bool -&gt; bool" Usage="authorizationStoreRoleProvider.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">The name of the role to delete.</param>
        <param name="throwOnPopulatedRole">If <see langword="true" />, throws an exception if <c>roleName</c> has one or more members.</param>
        <summary>Removes a role from the authorization-manager policy store.</summary>
        <returns>
          <see langword="true" /> if the role was deleted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse, um eine Rolle zu löschen, aus dem Autorisierungs-Manager-Richtlinienspeicher in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben. Wenn eine Rolle gelöscht wird, wird die Liste der Benutzer, die dieser Rolle zugeordneten auch aus den Richtlinienspeicher gelöscht. Die Benutzerinformationen in der Datenbank ist nicht betroffen.  
  
 Wenn `throwOnPopulatedRole` ist `true`, dann wird eine Ausnahme ausgelöst werden, und die Rolle wird nicht gelöscht werden, wenn die Rolle von identifiziert die `roleName` Parameter hat ein oder mehrere Elemente. Wenn `throwOnPopulatedRole` ist `false`, und klicken Sie dann die Rolle, ob sie leer oder nicht ist gelöscht werden.  
  
   
  
## Examples  
 Das folgende Beispiel löscht eine Rolle aus dem Autorisierungsmanager-Richtlinienspeicher. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> is an empty string.  -or-  <paramref name="roleName" /> contains a comma.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <paramref name="roleName" /> has one or more members and <paramref name="throwOnPopulatedRole" /> is <see langword="true" />.  -or-  The configured <see langword="applicationName" /> was not found.  -or-  The configured <see langword="scopeName" /> was not found.  -or-  The authorization-manager runtime is not installed on the server.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The <see langword="connectionStringName" /> attribute references a connection string to a file that does not exist.</exception>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="override this.FindUsersInRole : string * string -&gt; string[]" Usage="authorizationStoreRoleProvider.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">The role to search in.</param>
        <param name="usernameToMatch">The user name to search for.</param>
        <summary>This method is not supported by the authorization store role provider.</summary>
        <returns>A string array containing the names of all the users whose user name matches <paramref name="usernameToMatch" /> and who are members of the specified role.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">An unsupported method was called.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public override string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="override this.GetAllRoles : unit -&gt; string[]" Usage="authorizationStoreRoleProvider.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a list of all the roles for the application.</summary>
        <returns>A string array containing the names of all the roles stored in the authorization-manager policy store for a particular application.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse zum Abrufen einer Liste aller Rollen im Autorisierungsmanager-Richtlinienspeicher in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetAllRoles%2A> Methode zum Abrufen der Liste der Rollen für eine Anwendung, und binden die Ergebnisse in einem <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> Steuerelement. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">The configured <see langword="applicationName" /> was not found.  -or-  The configured <see langword="scopeName" /> was not found.  -or-  The authorization-manager runtime is not installed on the server.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The <see langword="connectionStringName" /> attribute references a connection string to a file that does not exist.</exception>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public override string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="override this.GetRolesForUser : string -&gt; string[]" Usage="authorizationStoreRoleProvider.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The user to return a list of roles for.</param>
        <summary>Gets a list of the roles that a user is in.</summary>
        <returns>A string array containing the names of all the roles that the specified user is in.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> -Klasse zum Abrufen einer Liste von Rollen für einen angegebenen Benutzer aus dem Autorisierungs-Manager-Richtlinienspeicher in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetRolesForUser%2A> Methode zum Abrufen einer Liste von Rollen für einen angegebenen Benutzer und bindet sie an einer <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> Steuerelement. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> contains a comma.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">The configured <see langword="applicationName" /> was not found.  -or-  The configured <see langword="scopeName" /> was not found.  -or-  The authorization-manager runtime is not installed on the server.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The <see langword="connectionStringName" /> attribute references a connection string to a file that does not exist.</exception>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.GetUsersInRole : string -&gt; string[]" Usage="authorizationStoreRoleProvider.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">The name of the role to get the list of users for.</param>
        <summary>Gets a list of users in the specified role.</summary>
        <returns>A string array containing the names of all the users who are members of the specified role.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse zum Abrufen der Liste der Benutzer zugeordnet, die mit der angegebenen Rolle im Autorisierungsmanager-Richtlinienspeicher in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben sind.  
  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole%2A> Methode gibt nur Benutzernamen, die direkt enthalten sind in der Autorisierungs-Manager-Rolle, die gemäß der `roleName` Parameter. Der zugrunde liegenden Autorisierungs-Manager-API-wird aufgerufen, indem die <xref:System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole%2A> Methode unterstützt keine gruppenerweiterung, damit Benutzer in geschachtelten NT-Gruppen, geschachtelte Autorisierungs-Manager-Gruppen und LDAP-Abfragegruppen nicht zurückgegeben werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetUsersInRole%2A> Methode zum Abrufen einer Liste der Benutzer in einer bestimmten Rolle, und binden die Ergebnisse in einem <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> Steuerelement. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> is an empty string.  -or-  <paramref name="roleName" /> contains a comma.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">The configured <see langword="applicationName" /> was not found.  -or-  The configured <see langword="scopeName" /> was not found.  -or-  The authorization-manager runtime is not installed on the server.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The <see langword="connectionStringName" /> attribute references a connection string to a file that does not exist.</exception>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level.</exception>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="authorizationStoreRoleProvider.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> instance to initialize.</param>
        <param name="config">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the names and values of configuration options for the role provider.</param>
        <summary>Initializes the authorization-manager role provider with the property values specified in the ASP.NET application's configuration file. This method is not intended to be used directly from your code.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.Initialize%2A> Methode initialisiert die <xref:System.Web.Security.AuthorizationStoreRoleProvider> mit der Eigenschaft Werte, die in der Anwendungskonfigurationsdatei (Web.config) für das ASP.NET angegeben sind, und nicht direkt aus Ihrem Code verwendet werden soll.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="config" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">The <see langword="connectionStringName" /> attribute is empty or does not exist in the [connectionStrings Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/library/b6ffbb2e-a4d1-410e-8f7e-9755e92c65de) configuration section.  -or-  The configured <see langword="applicationName" /> is longer than 256 characters.  -or-  The configuration for this <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> instance contains an unrecognized attribute.</exception>
        <exception cref="T:System.Web.HttpException">The ASP.NET application is not running at <see cref="F:System.Web.AspNetHostingPermissionLevel.Low" /> trust or higher.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public override bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.IsUserInRole : string * string -&gt; bool" Usage="authorizationStoreRoleProvider.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The user name to search for.</param>
        <param name="roleName">The role to search in.</param>
        <summary>Gets a value indicating whether the specified user is in the specified role.</summary>
        <returns>
          <see langword="true" /> if the specified user name is in the specified role; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse und die <xref:System.Security.Principal.IPrincipal.IsInRole%2A> Methode der <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> Eigenschaft, um zu bestimmen, ob ein Benutzer einer Rolle im Autorisierungs-Manager-Datenspeicher in der ASP.NET-Anwendung angegeben zugeordnet ist die Konfigurationsdatei (Web.config).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird überprüft, um festzustellen, ob der angemeldete Benutzer in der Rolle "Administratoren" ist, bevor der Benutzer zum Anzeigen von Benutzerrollen programmgesteuert. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null" />.  -or  <paramref name="roleName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> is an empty string.  -or-  <paramref name="roleName" /> contains a comma.  -or-  <paramref name="username" /> contains a comma.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">The configured <see langword="applicationName" /> was not found.  -or-  The configured <see langword="scopeName" /> was not found.  -or-  The authorization-manager runtime is not installed on the server.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The <see langword="connectionStringName" /> attribute references a connection string to a file that does not exist.</exception>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public override void RemoveUsersFromRoles (string[] userNames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveUsersFromRoles(string[] userNames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveUsersFromRoles (userNames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ userNames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="authorizationStoreRoleProvider.RemoveUsersFromRoles (userNames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userNames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="userNames">A string array of user names to be removed from the specified roles.</param>
        <param name="roleNames">A string array of role names to remove the specified user names from.</param>
        <summary>Removes the specified user names from the specified roles.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse, um einen oder mehrere Benutzer aus einer oder mehreren Rollen im Autorisierungsmanager-Richtlinienspeicher in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben zu entfernen. Diese Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles.RemoveUserFromRole%2A>, <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>, <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>, und <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> Methoden der <xref:System.Web.Security.Roles> Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein oder mehrere Benutzer zu einer Rolle hinzugefügt oder entfernt aus einer Rolle einen Benutzer. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">One of the specified user names is <see langword="null" />.  -or-  One of the specified role names is <see langword="null" />.  -or-  <paramref name="userNames" /> is <see langword="null" />.  -or-  <paramref name="roleNames" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">One of the specified user names is an empty string or contains a comma.  -or-  One of the specified role names is an empty string or contains a comma.  -or-  <paramref name="userNames" /> contains a duplicate element.  -or-  <paramref name="roleNames" /> contains a duplicate element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">The configured <see langword="applicationName" /> was not found.  -or-  The configured <see langword="scopeName" /> was not found.  -or-  The authorization-manager runtime is not installed on the server.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The <see langword="connectionStringName" /> attribute references a connection string to a file that does not exist.</exception>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level.</exception>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public override bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.RoleExists : string -&gt; bool" Usage="authorizationStoreRoleProvider.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">The name of the role to search for in the authorization-manager policy store.</param>
        <summary>Gets a value indicating whether the specified role name already exists in the authorization-manager policy store.</summary>
        <returns>
          <see langword="true" /> if the role name already exists in the authorization-manager policy store; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.RoleExists%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse, um zu bestimmen, ob ein Rollenname in den Autorisierungs-Manager-Datenspeicher in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben vorhanden ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.RoleExists%2A> Methode, um zu bestimmen, ob ein Rollenname bereits vor dem Erstellen der Rolle vorhanden ist. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> is an empty string.  -or-  <paramref name="roleName" /> contains a comma.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">The configured <see langword="applicationName" /> was not found.  -or-  The configured <see langword="scopeName" /> was not found.  -or-  The authorization-manager runtime is not installed on the server.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The <see langword="connectionStringName" /> attribute references a connection string to a file that does not exist.</exception>
        <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level.</exception>
      </Docs>
    </Member>
    <Member MemberName="ScopeName">
      <MemberSignature Language="C#" Value="public string ScopeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScopeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName" />
      <MemberSignature Language="VB.NET" Value="Public Property ScopeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScopeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ScopeName : string with get, set" Usage="System.Web.Security.AuthorizationStoreRoleProvider.ScopeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the scope name for the authorization store.</summary>
        <value>Der Bereichsname für den Autorisierungsspeicher.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A> Eigenschaft kann festgelegt werden, mithilfe der `scopeName` Konfigurationsattribut für die Anbieterinstanz in der `providers` Abschnitt des Konfigurationsabschnitts.  
  
> [!CAUTION]
>  Da für alle Anforderungen verarbeitet, die von eine einzelnen Rolleninstanz-Anbieter verwendet wird ein <xref:System.Web.HttpApplication> -Objekt können mehrere Anforderungen parallel ausgeführt werden und es wird versucht, legen Sie die <xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A> -Eigenschaftswert. Die <xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A> Eigenschaft ist nicht threadsicher ist, für mehrere Schreibvorgänge, und Ändern der <xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A> Eigenschaftswert kann zu unerwartetem Verhalten führen, wenn mehrere Benutzer einer Anwendung vorhanden sind. Es wird empfohlen, dass Sie keinen Code schreiben, ermöglicht Benutzern das festlegen, der <xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A> Eigenschaft es sei denn, Sie müssen. Ein Beispiel für eine Anwendung in dem das Festlegen der <xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A> Eigenschaft ist möglicherweise erforderlich ist eine administrative Anwendung, die von Rollendaten für mehrere Anwendungen verwaltet. Eine solche Anwendung sollte es sich um eine Anwendung für die einzelnen Benutzer und nicht für eine Webanwendung sein.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
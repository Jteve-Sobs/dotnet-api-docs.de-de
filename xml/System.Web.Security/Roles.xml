<Type Name="Roles" FullName="System.Web.Security.Roles">
  <Metadata><Meta Name="ms.openlocfilehash" Value="108fa45c855f835e1c5677a9b4d31536a7c80069" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86678615" /></Metadata><TypeSignature Language="C#" Value="public static class Roles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Roles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Roles" />
  <TypeSignature Language="VB.NET" Value="Public Class Roles" />
  <TypeSignature Language="C++ CLI" Value="public ref class Roles abstract sealed" />
  <TypeSignature Language="F#" Value="type Roles = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Verwaltet die Benutzermitgliedschaft in Rollen für die Autorisierungsüberprüfung in einer ASP.NET-Anwendung. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 ASP.net Role Management ermöglicht Ihnen die Verwaltung der Autorisierung für Ihre Anwendung auf der Grundlage von Benutzergruppen, die als Rollen bezeichnet werden. Durch Zuweisen von Benutzern zu Rollen können Sie den Zugriff auf verschiedene Teile oder Features Ihrer Webanwendung basierend auf der Rolle anstelle von oder zusätzlich zur Angabe der Autorisierung basierend auf dem Benutzernamen steuern. Beispielsweise kann eine Mitarbeiter Anwendung überrollen wie z. b. Manager, Mitarbeiter, Direktoren usw. verfügen, bei denen für jede Rolle unterschiedliche Berechtigungen angegeben werden.

 Benutzer können zu mehr als einer Rolle gehören. Wenn Ihre Website beispielsweise ein Diskussionsforum ist, haben einige Benutzer möglicherweise die Rolle von Mitgliedern und Moderatoren. Sie können jede Rolle so definieren, dass Sie unterschiedliche Berechtigungen für die Website hat, und ein Benutzer, der sich in beiden Rollen befindet, verfügt über beide Berechtigungs Sätze.

 Um die Rollen Verwaltung für Ihre ASP.NET-Anwendung zu aktivieren, verwenden Sie das [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element des `system.web` Abschnitts in der Web.config-Datei für Ihre Anwendung, wie im folgenden Beispiel gezeigt.

```
<configuration>
  <connectionStrings>
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />
  </connectionStrings>

  <system.web>
    <authentication mode="Forms" >
      <forms loginUrl="login.aspx"
      name=".ASPXFORMSAUTH" />
    </authentication>

  <roleManager defaultProvider="SqlProvider"
    enabled="true"
    cacheRolesInCookie="true"
    cookieName=".ASPROLES"
    cookieTimeout="30"
    cookiePath="/"
    cookieRequireSSL="false"
    cookieSlidingExpiration="true"
    cookieProtection="All" >
    <providers>
      <add
        name="SqlProvider"
        type="System.Web.Security.SqlRoleProvider"
        connectionStringName="SqlServices"
        applicationName="SampleApplication" />
      </providers>
    </roleManager>
  </system.web>
</configuration>
```

 Sie können Autorisierungs Regeln in der Konfigurationsdatei für Ihre Webanwendung oder Programm gesteuert in Ihrem Code angeben. Der folgende [Autorisierungs](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/8d82143t(v=vs.100)) Abschnitt aus einer Web.config Datei erfordert z. b., dass sich Benutzer anmelden (indem anonyme Benutzer verweigert werden), und ermöglicht nur Benutzern in der Administrator Rolle, Zugriff zu erhalten.

```
<authorization>
  <deny users="?" />
  <allow roles="Administrators" />
  <deny users="*" />
</authorization>
```

 Wenn Sie den `authorization` Abschnitt in der Web.config-Datei Ihrer Anwendung verwenden, um die Autorisierung auf der Grundlage von Rollen anzugeben, müssen Benutzer der Anwendung eine authentifizierte Benutzeridentität bereitstellen. Sie können Benutzer entweder mithilfe von Windows oder der Formular Authentifizierung authentifizieren. Anonyme Benutzer können keiner Rolle zugewiesen werden. Rollen können unabhängig von oder in Verbindung mit den ASP.NET-Klassen verwendet werden <xref:System.Web.Security.Membership> .

 Um die Rollen Mitgliedschaft Programm gesteuert zu überprüfen, können Sie die- <xref:System.Web.Security.Roles> Klasse oder die- <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> Eigenschaft mit der- <xref:System.Web.Security.Roles.IsUserInRole%2A> Methode verwenden, oder Sie können die- <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> Eigenschaft mit der- <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=nameWithType> Methode verwenden. Beispielcode, der Programm gesteuert die Rollen Mitgliedschaft überprüft, finden Sie im Beispiel Abschnitt in diesem Thema.

 Mit der <xref:System.Web.Security.Roles> -Klasse können Sie außerdem Rollen erstellen und löschen sowie Benutzer zu Rollen hinzufügen oder daraus entfernen.

> [!NOTE]
>  Wenn Sie die Anwendung für die Verwendung der- <xref:System.Web.Security.WindowsTokenRoleProvider> Klasse konfiguriert haben, können Sie keine Rollen oder Rollen Mitgliedschaften ändern. Die- <xref:System.Web.Security.WindowsTokenRoleProvider> Klasse überprüft nur die Mitgliedschaft in Windows-Sicherheitsgruppen. In diesem Fall müssen Sie die Windows-Benutzerkonten Verwaltung anstelle von ASP.NET-Rollen verwenden, um Gruppen zu erstellen und zu löschen und die Gruppenmitgliedschaft zu verwalten.

 Rollen Informationen können in mehreren Datenquellen gespeichert werden.

-   Mithilfe der-Klasse können Sie <xref:System.Web.Security.WindowsTokenRoleProvider> Rollen Informationen basierend auf der Mitgliedschaft in Windows-Gruppen abrufen.

-   Rollen Informationen können mithilfe der-Klasse in einer SQL Server-Datenbank gespeichert werden <xref:System.Web.Security.SqlRoleProvider> .

-   Wenn Sie über vorhandene Rollen Informationen verfügen oder Rollen Informationen in einer anderen Datenquelle als Windows, einem Autorisierungs Speicher oder einer SQL Server speichern möchten, können Sie einen benutzerdefinierten Rollen Anbieter implementieren, indem Sie eine Klasse erstellen, die die <xref:System.Web.Security.RoleProvider> abstrakte Klasse erbt. Weitere Informationen finden Sie unter [Implementieren eines Rollen Anbieters](https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)).

 Wenn der Browser eines Benutzers Cookies akzeptiert, können Sie Rollen Informationen für diesen Benutzer in einem Cookie auf dem Computer des Benutzers speichern. Bei jeder Seiten Anforderung liest ASP.net die Rollen Informationen für diesen Benutzer aus dem Cookie. Dies kann die Anwendungsleistung verbessern, indem die für die Datenquelle erforderliche Kommunikations Menge zum Abrufen von Rollen Informationen reduziert wird. Wenn die Rollen Informationen für einen Benutzer zu lang zum Speichern in einem Cookie sind, speichert ASP.net nur die zuletzt verwendeten Rollen Informationen im Cookie und nach Bedarf weitere Rollen Informationen in der Datenquelle. Wenn der Browser des Benutzers keine Cookies unterstützt oder Cookies deaktiviert sind, werden die Rollen Informationen nicht in einem Cookie zwischengespeichert.

 Sie können die Zuverlässigkeit der in einem Cookie zwischengespeicherten Rollennamen verbessern, indem Sie <xref:System.Web.Security.Roles.CookieProtectionValue%2A> beim Konfigurieren von ASP.NET-Rollen eine-Eigenschaft angeben. Der Standardwert <xref:System.Web.Security.Roles.CookieProtectionValue%2A> ist `All` , der Rollennamen im Cookie verschlüsselt und überprüft, ob der Cookie-Inhalt nicht geändert wurde.



## Examples
 Das folgende Beispiel zeigt die Web.config Datei für eine Anwendung, die für die Verwendung von ASP.net-Mitgliedschafts-und ASP.NET-Rollen konfiguriert ist, und zum <xref:System.Web.Security.SqlRoleProvider> Speichern von Mitgliedschafts-und Rollen Informationen in einer SQL Server Datenbank. Benutzer werden mit der Formular Authentifizierung authentifiziert, und nur Benutzer in der Administrator Rolle haben Zugriff auf die Anwendung.

```
<configuration>
  <connectionStrings>
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />
  </connectionStrings>

  <system.web>
    <authentication mode="Forms" >
      <forms loginUrl="login.aspx"
      name=".ASPXFORMSAUTH" />
    </authentication>

    <authorization>
      <deny users="?" />
      <allow roles="Administrators" />
      <deny users="*" />
    </authorization>

    <membership defaultProvider="AspNetSqlProvider" userIsOnlineTimeWindow="15">
    </membership>

    <roleManager defaultProvider="SqlProvider"
      enabled="true"
      cacheRolesInCookie="true"
      cookieName=".ASPROLES"
      cookieTimeout="30"
      cookiePath="/"
      cookieRequireSSL="true"
      cookieSlidingExpiration="true"
      cookieProtection="All" >

      <providers>
        <clear />
        <add
          name="SqlProvider"
          type="System.Web.Security.SqlRoleProvider"
          connectionStringName="SqlServices"
          applicationName="SampleApplication" />
        </providers>

    </roleManager>
  </system.web>
</configuration>
```

 Im folgenden Codebeispiel wird Programm gesteuert überprüft, ob sich der angemeldete Benutzer in der-Administrator Rolle befindet, bevor der Benutzer die Rollen anderer Benutzer anzeigen kann.



 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
  </Docs>
  <Members>
    <Member MemberName="AddUsersToRole">
      <MemberSignature Language="C#" Value="public static void AddUsersToRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">Ein Zeichenfolgenarray mit Benutzernamen, die der angegebenen Rolle hinzugefügt werden sollen.</param>
        <param name="roleName">Die Rolle, der die angegebenen Benutzernamen hinzugefügt werden sollen.</param>
        <summary>Fügt der angegebenen Rolle die angegebenen Benutzer hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.AddUsersToRole%2A> Methode ruft den Standardrollen Anbieter auf, um die angegebenen Benutzer der angegebenen Rolle in der Datenquelle zuzuordnen.

 Wenn die Anwendung die- <xref:System.Web.Security.SqlRoleProvider> Klasse verwendet, werden die Datenbankupdates, die während des Aufrufes der-Methode ausgeführt werden, <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> innerhalb einer Transaktion ausgeführt. Wenn ein Fehler auftritt, z. b. ein Benutzername, der bereits in einer angegebenen Rolle vorhanden ist, wird ein Rollback für die Transaktion ausgeführt, und es werden keine Updates durchgeführt.

> [!NOTE]
>  Benutzernamen und Rollennamen dürfen keine Kommas enthalten.



## Examples
 Im folgenden Codebeispiel wird einer Rolle ein oder mehrere Benutzer hinzugefügt oder ein Benutzer aus einer Rolle auf der Grundlage von Benutzereingaben entfernt. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.

- oder -

Eines der Elemente in <paramref name="usernames" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

Eines der Elemente in <paramref name="usernames" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

 <paramref name="usernames" /> enthält ein doppeltes Element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public static void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Ein Zeichenfolgenarray mit Benutzernamen, die den angegebenen Rollen hinzugefügt werden sollen.</param>
        <param name="roleNames">Ein Zeichenfolgenarray mit Rollennamen, denen die angegebenen Benutzernamen hinzugefügt werden sollen.</param>
        <summary>Fügt den angegebenen Rollen die angegebenen Benutzer hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.AddUsersToRoles%2A> Methode ruft den Standardrollen Anbieter auf, um die angegebenen Benutzer den angegebenen Rollen in der Datenquelle zuzuordnen.

 Wenn die Anwendung die- <xref:System.Web.Security.SqlRoleProvider> Klasse verwendet, werden die Datenbankupdates, die während des Aufrufes der-Methode ausgeführt werden, <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> innerhalb einer Transaktion ausgeführt. Wenn ein Fehler auftritt, z. b. ein Benutzername, der bereits in einer angegebenen Rolle vorhanden ist, wird ein Rollback für die Transaktion ausgeführt, und es werden keine Updates durchgeführt.

> [!NOTE]
>  Benutzernamen und Rollennamen dürfen keine Kommas enthalten.



## Examples
 Im folgenden Codebeispiel wird mindestens ein Benutzer einer oder mehreren Rollen hinzugefügt. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.Roles#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/adduserstorolescs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Roles#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/adduserstorolesvb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Eine der Rollen in <paramref name="roleNames" /> ist <see langword="null" />.

- oder -

Einer der Benutzer in <paramref name="usernames" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Eine der Rollen in <paramref name="roleNames" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

Einer der Benutzer in <paramref name="usernames" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

 <paramref name="roleNames" /> enthält ein doppeltes Element.

- oder -

 <paramref name="usernames" /> enthält ein doppeltes Element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRole">
      <MemberSignature Language="C#" Value="public static void AddUserToRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUserToRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Der Benutzername, der der angegebenen Rolle hinzugefügt werden soll.</param>
        <param name="roleName">Die Rolle, der der angegebenen Benutzernamen hinzugefügt werden soll.</param>
        <summary>Fügt der angegebenen Rolle den angegebenen Benutzer hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.AddUserToRole%2A> Methode ruft den Standardrollen Anbieter auf, um den angegebenen Benutzer der angegebenen Rolle in der Datenquelle zuzuordnen.

> [!NOTE]
>  Benutzernamen und Rollennamen dürfen keine Kommas enthalten.



## Examples
 Im folgenden Codebeispiel wird ein Benutzer einer Rolle hinzugefügt. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.Roles#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Roles#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolevb.aspx#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.

- oder -

 <paramref name="username" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

 <paramref name="username" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.

 - oder -

 Der Benutzer ist bereits der angegebenen Rolle zugewiesen.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRoles">
      <MemberSignature Language="C#" Value="public static void AddUserToRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUserToRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">Der Benutzername, der den angegebenen Rollen hinzugefügt werden soll.</param>
        <param name="roleNames">Ein Zeichenfolgenarray mit Rollen, denen der angegebene Benutzername hinzugefügt werden soll.</param>
        <summary>Fügt den angegebenen Rollen den angegebenen Benutzer hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.AddUserToRoles%2A> Methode ruft den Standardrollen Anbieter auf, um den angegebenen Benutzer den angegebenen Rollen in der Datenquelle zuzuordnen.

 Wenn die Anwendung die- <xref:System.Web.Security.SqlRoleProvider> Klasse verwendet, werden die Datenbankupdates, die während des Aufrufes der-Methode ausgeführt werden, <xref:System.Web.Security.Roles.AddUserToRoles%2A> innerhalb einer Transaktion ausgeführt. Wenn ein Fehler auftritt, z. b. ein Benutzername, der bereits in einer angegebenen Rolle vorhanden ist, wird ein Rollback für die Transaktion ausgeführt, und es werden keine Updates durchgeführt.

> [!NOTE]
>  Benutzernamen und Rollennamen dürfen keine Kommas enthalten.



## Examples
 Im folgenden Codebeispiel wird ein Benutzer einer oder mehreren Rollen hinzugefügt. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.Roles#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolescs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Roles#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolesvb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Eine der Rollen in <paramref name="roleNames" /> ist <see langword="null" />.

- oder -

 <paramref name="username" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Eine der Rollen in <paramref name="roleNames" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

 <paramref name="username" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

 <paramref name="roleNames" /> enthält ein doppeltes Element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.Roles.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Anwendung ab, für die Rolleninformationen gespeichert und abgerufen werden sollen, oder legt diesen fest.</summary>
        <value>Der Name der Anwendung, für die Rolleninformationen gespeichert und abgerufen werden sollen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.ApplicationName%2A> Eigenschaft wird von der- <xref:System.Web.Security.Roles> Klasse verwendet, um Benutzer und Rollen verschiedenen Anwendungen zuzuordnen. Dadurch können mehrere Anwendungen die gleiche Datenquelle zum Speichern von Benutzer-und Rollen Informationen verwenden, ohne dass Konflikte zwischen doppelten Benutzernamen oder doppelten Rollennamen auftreten. Mehrere ASP.NET-Anwendungen können dieselbe Datenquelle verwenden, indem Sie denselben Wert in der- <xref:System.Web.Security.Roles.ApplicationName%2A> Eigenschaft angeben. Sie können die- <xref:System.Web.Security.Roles.ApplicationName%2A> Eigenschaft Programm gesteuert festlegen oder Sie mithilfe des-Attributs deklarativ in der Konfigurationsdatei für die-Webanwendung festlegen `applicationName` .

 Wenn die Webanwendung die <xref:System.Web.Security.SqlRoleProvider> -Klasse verwendet und für das- `applicationName` Attribut in der Konfigurationsdatei kein Wert angegeben wird, <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> wird der-Eigenschafts Wert für die aktuelle- <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> Eigenschaft verwendet.

> [!CAUTION]
>  Da eine einzelne Standardrollen Anbieter-Instanz für alle Anforderungen verwendet wird, die von einem <xref:System.Web.HttpApplication> Objekt bereitgestellt werden, können mehrere Anforderungen gleichzeitig ausgeführt werden, und es wird versucht, den <xref:System.Web.Security.Roles.ApplicationName%2A> Eigenschafts Wert festzulegen. Die <xref:System.Web.Security.Roles.ApplicationName%2A> -Eigenschaft ist für mehrere Schreibvorgänge nicht Thread sicher, und <xref:System.Web.Security.Roles.ApplicationName%2A> eine Änderung des Eigenschafts Werts kann zu unerwartetem Verhalten bei mehreren Benutzern einer Anwendung führen. Vermeiden Sie das Schreiben von Code, damit Benutzer die Eigenschaft festlegen können <xref:System.Web.Security.Roles.ApplicationName%2A> , sofern dies nicht erforderlich ist. Ein Beispiel für eine Anwendung, in der die-Eigenschaft festgelegt <xref:System.Web.Security.Roles.ApplicationName%2A> werden kann, ist eine administrative Anwendung, die Rollen Daten für mehrere Anwendungen verwaltet. Eine solche Anwendung sollte eine Einzelbenutzer Anwendung und keine Webanwendung sein.



## Examples
 Das folgende Beispiel zeigt das [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element im- `system.web` Abschnitt der Web.config-Datei für eine ASP.NET-Anwendung. Er gibt an, dass die Anwendung eine <xref:System.Web.Security.SqlRoleProvider> -Instanz verwendet und das-Attribut auf festgelegt wird `applicationName` `MyApplication` .

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="CacheRolesInCookie">
      <MemberSignature Language="C#" Value="public static bool CacheRolesInCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CacheRolesInCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CacheRolesInCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CacheRolesInCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CacheRolesInCookie : bool" Usage="System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Rollen des aktuellen Benutzers in einem Cookie zwischengespeichert werden.</summary>
        <value><see langword="true" />, wenn die Rollen des aktuellen Benutzers in einem Cookie zwischengespeichert werden, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Wenn die- <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> Eigenschaft in der Web.config-Datei auf festgelegt ist, werden die `true` Rollen Informationen für jeden Benutzer in einem Cookie gespeichert. Wenn die Rollen Verwaltung prüft, ob ein Benutzer einer bestimmten Rolle gehört, wird das Rollen Cookie überprüft, bevor der Rollen Anbieter aufgerufen wird, um die Liste der Rollen in der Datenquelle zu überprüfen. Das Cookie wird dynamisch aktualisiert, um die zuletzt überprüften Rollennamen zwischenzuspeichern.

 Sie können die Zuverlässigkeit der in einem Cookie zwischengespeicherten Rollennamen verbessern, indem Sie <xref:System.Web.Security.Roles.CookieProtectionValue%2A> beim Konfigurieren von ASP.NET-Rollen eine-Eigenschaft angeben. Der Standardwert <xref:System.Web.Security.Roles.CookieProtectionValue%2A> ist `All` , der Rollennamen im Cookie verschlüsselt und überprüft, ob der Cookie-Inhalt nicht geändert wurde.

> [!NOTE]
>  Da Rollennamen getrennt von der Datenquelle zwischengespeichert werden können, werden Änderungen an der Rollen Verwaltung in der Datenquelle möglicherweise nicht in den zwischengespeicherten Werten widergespiegelt. In diesem Fall muss der Benutzer den Browser schließen und erneut öffnen, um den zwischengespeicherten Cookie-Wert zu löschen.



## Examples
 Das folgende Beispiel zeigt das [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element im- `system.web` Abschnitt der Web.config-Datei für eine ASP.NET-Anwendung. Er gibt an, dass die Anwendung eine <xref:System.Web.Security.SqlRoleProvider> -Instanz verwendet und das-Attribut auf festgelegt wird `cacheRolesInCookie` `true` .

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
   </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="CookieName">
      <MemberSignature Language="C#" Value="public static string CookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieName : string" Usage="System.Web.Security.Roles.CookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Cookies ab, in dem Rollennamen zwischengespeichert werden.</summary>
        <value>Der Name des Cookies, in dem Rollennamen zwischengespeichert werden. Der Standardname lautet .ASPXROLES.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Sie können den Namen des Cookies angeben, in dem Rollen für die Anwendung zwischengespeichert werden, indem Sie das- `cookieName` Attribut in der Web.config-Datei für die ASP.NET-Anwendung festlegen. Dies ist hilfreich, wenn Sie ein Cookie für Ihre Anwendung eindeutig identifizieren möchten oder wenn ein Cookie von mehreren Anwendungen, z. b. einem Domänen Cookie, gemeinsam verwendet wird.



## Examples
 Das folgende Beispiel zeigt das [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element im- `system.web` Abschnitt der Web.config-Datei für eine ASP.NET-Anwendung. Er gibt an, dass die Anwendung eine <xref:System.Web.Security.SqlRoleProvider> -Instanz verwendet und das-Attribut auf festgelegt wird `cookieName` . ASPROLES.

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="CookiePath">
      <MemberSignature Language="C#" Value="public static string CookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiePath : string" Usage="System.Web.Security.Roles.CookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfad für das Cookie mit den zwischengespeicherten Rollennamen ab.</summary>
        <value>Der Pfad des Cookies, in dem Rollennamen zwischengespeichert werden. Der Standardwert ist /.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Sie können den Pfad des Cookies angeben, in dem Rollen für die Anwendung zwischengespeichert werden, indem Sie das- `cookiePath` Attribut in der Web.config-Datei für Ihre ASP.NET-Anwendung festlegen. Weitere Informationen zu Cookie-Pfaden finden Sie unter <xref:System.Web.HttpCookie.Path%2A> .



## Examples
 Das folgende Beispiel zeigt das [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element im- `system.web` Abschnitt der Web.config-Datei für eine ASP.NET-Anwendung. Gibt an, dass die Anwendung eine <xref:System.Web.Security.SqlRoleProvider> -Instanz verwendet und das- `cookiePath` Attribut auf/MyApplication. festgelegt wird.

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/MyApplication"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="CookieProtectionValue">
      <MemberSignature Language="C#" Value="public static System.Web.Security.CookieProtection CookieProtectionValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Security.CookieProtection CookieProtectionValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieProtectionValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieProtectionValue As CookieProtection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::CookieProtection CookieProtectionValue { System::Web::Security::CookieProtection get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieProtectionValue : System.Web.Security.CookieProtection" Usage="System.Web.Security.Roles.CookieProtectionValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.CookieProtection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, wie in einem Cookie zwischengespeicherte Rollennamen geschützt werden.</summary>
        <value>Einer der <see cref="T:System.Web.Security.CookieProtection" />-Enumerationswerte, der angibt, wie in einem Cookie zwischengespeicherte Rollennamen geschützt werden. Der Standardwert lautet <see langword="All" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Sie können den Schutz des Cookies angeben, in dem Rollen für die Anwendung zwischengespeichert werden, indem Sie das- `cookieProtection` Attribut in der Web.config-Datei für Ihre ASP.NET-Anwendung festlegen. Das- `cookieProtection` Attribut nimmt einen- <xref:System.Web.Security.CookieProtection> Enumerationswert an, der angibt, ob die Rollennamen verschlüsselt, validiert, beides oder keines von beiden sind.



## Examples
 Das folgende Beispiel zeigt das [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element im- `system.web` Abschnitt der Web.config-Datei für eine ASP.NET-Anwendung. Er gibt an, dass die Anwendung eine <xref:System.Web.Security.SqlRoleProvider> -Instanz verwendet und das- `cookieProtection` Attribut auf festlegt `Encrypted` .

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/MyApplication"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="Encrypted" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="CookieRequireSSL">
      <MemberSignature Language="C#" Value="public static bool CookieRequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieRequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieRequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieRequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieRequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieRequireSSL : bool" Usage="System.Web.Security.Roles.CookieRequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob zum Zurücksenden des Rollennamencookies an den Server SSL erforderlich ist.</summary>
        <value><see langword="true" />, wenn zum Zurücksenden des Rollennamencookies an den Server SSL erforderlich ist, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Sie können angeben, ob SSL (Secure Sockets Layer) zum Zurückgeben des Rollennamen Cookies an den Server in der Anwendung erforderlich ist, indem das- `cookieRequireSSL` Attribut in der Web.config-Datei für Ihre ASP.NET-Anwendung festgelegt wird. Weitere Informationen finden Sie unter <xref:System.Web.HttpCookie.Secure%2A>.



## Examples
 Das folgende Beispiel zeigt das [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element im- `system.web` Abschnitt der Web.config-Datei für eine ASP.NET-Anwendung. Er gibt an, dass die Anwendung eine <xref:System.Web.Security.SqlRoleProvider> -Instanz verwendet und auf festgelegt wird `cookieRequireSSL` `true` .

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/MyApplication"
  cookieRequireSSL="true"
  cookieSlidingExpiration="true"
  cookieProtection="Encrypted" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="CookieSlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool CookieSlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieSlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieSlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSlidingExpiration : bool" Usage="System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, ob Datum und Uhrzeit für den Ablauf der Gültigkeit des Rollennamencookies in regelmäßigen Abständen zurückgesetzt werden.</summary>
        <value><see langword="true" />, wenn Datum und Uhrzeit für den Ablauf der Gültigkeit des Rollennamencookies in regelmäßigen Abständen zurückgesetzt werden, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Mithilfe des- `cookieSlidingExpiration` Attributs in der Web.config-Datei für Ihre ASP.NET-Anwendung können Sie angeben, ob das Ablaufdatum und die Uhrzeit für das Cookie der Rollennamen Cookie zurückgesetzt werden. Wenn `true` der Wert ist, wird der Cookieablauf anfänglich auf das aktuelle Datum und die aktuelle Uhrzeit zuzüglich der <xref:System.Web.Security.Roles.CookieTimeout%2A> in Minuten festgelegt. Während der Benutzer weiterhin aktiv die ASP.NET-Anwendung verwendet, werden das Ablaufdatum und die Ablaufzeit des Cookies automatisch aktualisiert, wenn weniger als die Hälfte der restlichen Werte vorhanden sind <xref:System.Web.Security.Roles.CookieTimeout%2A> . Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Web.HttpCookie.Expires%2A>-Eigenschaft.



## Examples
 Das folgende Beispiel zeigt das [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element im- `system.web` Abschnitt der Web.config-Datei für eine ASP.NET-Anwendung. Er gibt an, dass die Anwendung eine <xref:System.Web.Security.SqlRoleProvider> -Instanz verwendet und die- <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> Eigenschaft auf festlegt `false` .

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/MyApplication"
  cookieRequireSSL="true"
  cookieSlidingExpiration="false"
  cookieProtection="Encrypted" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="CookieTimeout">
      <MemberSignature Language="C#" Value="public static int CookieTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CookieTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CookieTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieTimeout : int" Usage="System.Web.Security.Roles.CookieTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Minuten bis zum Ablauf der Gültigkeit des Rollencookies ab.</summary>
        <value>Eine ganze Zahl, die die Anzahl von Minuten bis zum Ablauf der Gültigkeit des Rollencookies angibt. Der Standardwert ist 30 Minuten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.Security.Roles.CookieTimeout%2A> -Eigenschaft wird verwendet, wenn die <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> -Eigenschaft ist `true` , und gibt die Gültigkeitsdauer in Minuten für das Rollen Cookie an. Fügen Sie zum Festlegen des <xref:System.Web.Security.Roles.CookieTimeout%2A> Werts dem `cookieTimeout` [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element in der Web.config-Datei für die ASP.NET-Anwendung das-Attribut hinzu, und geben Sie einen ganzzahligen Wert an.

 Wenn den Wert <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> `false` hat, wird diese Eigenschaft ignoriert.



## Examples
 Das folgende Beispiel zeigt das [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element im- `system.web` Abschnitt der Web.config-Datei für eine ASP.NET-Anwendung. Er gibt an, dass die Anwendung eine <xref:System.Web.Security.SqlRoleProvider> -Instanz verwendet und die- <xref:System.Web.Security.Roles.CookieTimeout%2A> Eigenschaft auf 30 Minuten festlegt.

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/MyApplication"
  cookieRequireSSL="true"
  cookieSlidingExpiration="true"
  cookieProtection="Encrypted" >
  <providers>
  <add
    name="SqlProvider"
    type="System.Web.Security.SqlRoleProvider"
    connectionStringName="SqlServices"
    applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistentCookie">
      <MemberSignature Language="C#" Value="public static bool CreatePersistentCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CreatePersistentCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CreatePersistentCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CreatePersistentCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CreatePersistentCookie : bool" Usage="System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Rollennamencookie sitzungsbasiert oder permanent ist.</summary>
        <value><see langword="true" />, wenn das Rollennamencookie ein permanentes Cookie ist, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Der <xref:System.Web.Security.Roles.CreatePersistentCookie%2A> Eigenschafts Wert wird in der Konfiguration für eine ASP.NET-Anwendung mit dem- `createPersistentCookie` Attribut des [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Konfigurations Elements festgelegt.

 Wenn der Wert ist `false` , ist das Rollennamen Cookie ein Sitzungs Cookie, d. h., das Cookie geht verloren, wenn der Browser geschlossen wird. Wenn `true` der Wert ist, ist das Rollennamen Cookie ein dauerhaftes Cookie, das über mehrere Browsersitzungen hinweg verfügbar ist. Das Ablaufdatum und die Uhrzeit des dauerhaften Cookies werden auf das aktuelle Datum und die aktuelle Uhrzeit sowie auf den <xref:System.Web.Security.Roles.CookieTimeout%2A> Wert in Minuten festgelegt.

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public static void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member CreateRole : string -&gt; unit" Usage="System.Web.Security.Roles.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der zu erstellenden Rolle.</param>
        <summary>Fügt der Datenquelle eine neue Rolle hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Mit der- <xref:System.Web.Security.Roles.CreateRole%2A> Methode wird der Datenquelle ein Rollenname hinzugefügt. <xref:System.Web.Security.Roles.CreateRole%2A> Ruft die- <xref:System.Web.Security.RoleProvider.CreateRole%2A> Methode des Standardrollen Anbieters auf, um der Datenquelle die angegebene Rolle hinzuzufügen.

> [!NOTE]
>  Rollennamen dürfen keine Kommas enthalten.



## Examples
 Im folgenden Codebeispiel wird eine neue Rolle in der Datenquelle erstellt. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

> [!IMPORTANT]
>  Dieses Beispiel enthält ein Textfeld, das Benutzereingaben akzeptiert. Dies ist eine potenzielle Sicherheitsbedrohung. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge.

- oder -

 <paramref name="roleName" /> enthält ein Komma.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCookie">
      <MemberSignature Language="C#" Value="public static void DeleteCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteCookie ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteCookie();" />
      <MemberSignature Language="F#" Value="static member DeleteCookie : unit -&gt; unit" Usage="System.Web.Security.Roles.DeleteCookie " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht das Cookie, in dem Rollennamen zwischengespeichert werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.DeleteCookie%2A> Methode löscht den Inhalt des Cookies, das zum Zwischenspeichern von Rollennamen verwendet wird. Weitere Informationen zum Zwischenspeichern von Rollennamen finden Sie unter <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> .



## Examples
 Im folgenden Codebeispiel wird die- <xref:System.Web.Security.Roles.DeleteCookie%2A> Methode aufgerufen, um alle zwischengespeicherten Rollennamen zu löschen, wenn sich ein Benutzer anmeldet. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

> [!IMPORTANT]
>  Dieses Beispiel enthält ein Textfeld, das Benutzereingaben akzeptiert. Dies ist eine potenzielle Sicherheitsbedrohung. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[System.Web.Security.Roles#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/logincs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Roles#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/loginvb.aspx#5)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Entfernt eine Rolle aus der Datenquelle.</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der zu löschenden Rolle.</param>
        <summary>Entfernt eine Rolle aus der Datenquelle.</summary>
        <returns><see langword="true" />, wenn <paramref name="roleName" /> aus der Datenquelle gelöscht wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.DeleteRole%2A> Methode entfernt einen Rollennamen aus der Datenquelle. <xref:System.Web.Security.Roles.DeleteRole%2A> Ruft die- <xref:System.Web.Security.RoleProvider.DeleteRole%2A> Methode des Standardrollen Anbieters auf, um die angegebene Rolle aus der Datenquelle zu entfernen.

 Wenn die durch den-Parameter identifizierte Rolle mindestens `roleName` ein Element aufweist, wird eine Ausnahme ausgelöst, und die Rolle wird nicht gelöscht.



## Examples
 Im folgenden Codebeispiel wird eine Rolle aus der Datenquelle gelöscht. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> weist einen oder mehrere Mitglieder auf.

- oder -

Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string * bool -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der zu löschenden Rolle.</param>
        <param name="throwOnPopulatedRole">Wenn der Wert <see langword="true" /> ist und <paramref name="roleName" /> über einen oder mehrere Mitglieder verfügt, wird eine Ausnahme ausgelöst.</param>
        <summary>Entfernt eine Rolle aus der Datenquelle.</summary>
        <returns><see langword="true" />, wenn <paramref name="roleName" /> aus der Datenquelle gelöscht wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.DeleteRole%2A> Methode entfernt einen Rollennamen aus der Datenquelle. <xref:System.Web.Security.Roles.DeleteRole%2A> Ruft die- <xref:System.Web.Security.RoleProvider.DeleteRole%2A> Methode des Standardrollen Anbieters auf, um die angegebene Rolle aus der Datenquelle zu entfernen.

 Wenn `throwOnPopulatedRole` ist `true` , wird eine Ausnahme ausgelöst, und die Rolle wird nicht gelöscht, wenn die durch den-Parameter identifizierte Rolle mindestens ein-Element `roleName` aufweist. Wenn `throwOnPopulatedRole` `false` den Wert hat, wird die Rolle gelöscht, unabhängig davon, ob Sie leer ist.



## Examples
 Im folgenden Codebeispiel wird eine Rolle aus der Datenquelle gelöscht. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> verfügt über mindestens ein Mitglied, und <paramref name="throwOnPopulatedRole" /> ist <see langword="true" />.

- oder -

Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public static string Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Domain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string" Usage="System.Web.Security.Roles.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der Domäne des Rollennamencookies ab.</summary>
        <value>Die <see cref="P:System.Web.HttpCookie.Domain" /> des Rollennamencookies.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Der <xref:System.Web.Security.Roles.Domain%2A> Eigenschafts Wert wird in der Konfiguration für eine ASP.NET-Anwendung mit dem- `domain` Attribut des [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Konfigurations Elements festgelegt.

 Wenn in der Konfiguration für das Domänen Attribut kein Wert angegeben ist, <xref:System.Web.Security.Roles.Domain%2A> gibt die-Eigenschaft zurück, `null` und die Rollennamen-Cookie-Domäne verwendet standardmäßig das Verhalten der- <xref:System.Web.HttpCookie> <xref:System.Web.HttpCookie.Domain%2A> Eigenschaft.

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public static bool Enabled { get; }" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".property bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Enabled As Boolean" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); };" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool" Usage="System.Web.Security.Roles.Enabled" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C#" Value="public static bool Enabled { get; set; }" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Enabled As Boolean" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); void set(bool value); };" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Web.Security.Roles.Enabled" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Rollenverwaltung für die aktuelle Webanwendung aktiviert ist, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Rollenverwaltung aktiviert ist, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 Das folgende Beispiel zeigt das [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element im- `system.web` Abschnitt der Web.config-Datei für eine ASP.NET-Anwendung. Er gibt an, dass die Anwendung eine <xref:System.Web.Security.SqlRoleProvider> -Instanz verwendet und das-Attribut auf festgelegt wird `enabled` `true` .

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersInRole : string * string -&gt; string[]" Usage="System.Web.Security.Roles.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Die Rolle, in der gesucht werden soll.</param>
        <param name="usernameToMatch">Der zu suchende Benutzername.</param>
        <summary>Ruft eine Liste der Benutzer ab, die eine angegebene Rolle innehaben, und deren Benutzername mit dem angegebenen Benutzernamen übereinstimmt.</summary>
        <returns>Ein Zeichenfolgenarray, das die Namen aller Benutzer enthält, deren Benutzername mit <paramref name="usernameToMatch" /> übereinstimmt und die Mitglieder der angegebenen Rolle sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.FindUsersInRole%2A> gibt eine Liste von Benutzern in einer Rolle zurück, bei der der Benutzername eine Entsprechung des angegebenen `usernameToMatch` für den konfigurierten enthält `applicationName` . Wenn der `usernameToMatch` Parameter z. b. auf "User" festgelegt ist, werden die Benutzer "user1", "user2", "user3" usw. zurückgegeben. Benutzer werden in alphabetischer Reihenfolge nach Benutzername zurückgegeben.

 <xref:System.Web.Security.SqlRoleProvider>Führt die Suche mit einer LIKE-Klausel für den `usernameToMatch` Parameter aus. Alle Platzhalter, die von SQL Server in like-Klauseln unterstützt werden, können im `usernameToMatch` Parameterwert verwendet werden.



## Examples
 Im folgenden Codebeispiel wird die- <xref:System.Web.Security.Roles.FindUsersInRole%2A> Methode verwendet, um die Rollen Mitgliedschaft auf der Grundlage von Benutzereingaben anzuzeigen. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

> [!IMPORTANT]
>  Dieses Beispiel enthält ein Textfeld, das Benutzereingaben akzeptiert. Dies ist eine potenzielle Sicherheitsbedrohung. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).

- oder -

 <paramref name="usernameToMatch" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

 <paramref name="usernameToMatch" /> ist eine leere Zeichenfolge.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public static string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="static member GetAllRoles : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine Liste aller Rollen für die Anwendung ab.</summary>
        <returns>Ein Zeichenfolgenarray, das die Namen aller Rollen enthält, die in der Datenquelle für die Anwendung gespeichert sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.GetAllRoles%2A> Methode ruft die- <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=nameWithType> Methode des Standardrollen Anbieters auf, um eine Liste aller Rollen aus der Datenquelle für eine Anwendung zu erhalten. Nur die Rollen für die Anwendung, die in der-Eigenschaft angegeben ist, <xref:System.Web.Security.Roles.ApplicationName%2A> werden abgerufen.



## Examples
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetAllRoles%2A> -Methode verwendet, um die Liste der Rollen für eine Anwendung zu erhalten und die Ergebnisse an ein-Steuerelement zu binden <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> . Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

> [!IMPORTANT]
>  Dieses Beispiel enthält ein Textfeld, das Benutzereingaben akzeptiert. Dies ist eine potenzielle Sicherheitsbedrohung. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRolesForUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft eine Liste der Rollen ab, die ein Benutzer innehat.</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser();" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine Liste der Rollen des gegenwärtig angemeldeten Benutzers ab.</summary>
        <returns>Ein Zeichenfolgenarray, das die Namen aller Rollen des gegenwärtig angemeldeten Benutzers enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.GetRolesForUser%2A> Methode ruft die- <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> Methode des Standardrollen Anbieters auf, die von der Datenquelle aus den Rollen abgerufen wird, in denen sich der aktuell angemeldete Benutzer befindet. Der aktuell angemeldete Benutzer wird von der- <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> Eigenschaft der aktuellen <xref:System.Web.HttpContext?displayProperty=nameWithType> oder von <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> für nicht-http-Hostingumgebungen identifiziert. Wenn kein Benutzer angemeldet ist, wird eine Ausnahme ausgelöst. Nur die Rollen für die Anwendung, die in der-Eigenschaft angegeben ist, <xref:System.Web.Security.Roles.ApplicationName%2A> werden abgerufen.

 Wenn den Wert <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> `true` hat, können die Ergebnisse der <xref:System.Web.Security.Roles.GetRolesForUser%2A> Methode aus dem Rollen Cache und nicht aus dem angegebenen Rollen Anbieter zurückgegeben werden.



## Examples
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetRolesForUser%2A> -Methode verwendet, um eine Liste der Rollen für einen angegebenen Benutzer abzurufen und die zurückgegebenen Rollen an ein-Steuerelement zu binden <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> . Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Gegenwärtig ist kein Benutzer angemeldet.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : string -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Der Benutzer, für den eine Liste der Rollen zurückgegeben werden soll.</param>
        <summary>Ruft eine Liste der Rollen ab, die ein Benutzer innehat.</summary>
        <returns>Ein Zeichenfolgenarray, das die Namen aller Rollen des angegebenen Benutzers enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.GetRolesForUser%2A> Methode ruft die- <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> Methode des Standardrollen Anbieters auf, die von der Datenquelle aus den Rollen abgerufen wird, in denen sich der Benutzer befindet. Nur die Rollen für die Anwendung, die in der-Eigenschaft angegeben ist, <xref:System.Web.Security.Roles.ApplicationName%2A> werden abgerufen.

 Wenn `username` gleich dem aktuell angemeldeten Benutzer ist und den Wert <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> `true` hat, können die Ergebnisse der <xref:System.Web.Security.Roles.GetRolesForUser%2A> Methode aus dem Rollen Cache und nicht aus dem angegebenen zurückgegeben werden <xref:System.Web.Security.Roles.Provider%2A> .



## Examples
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetRolesForUser%2A> -Methode verwendet, um eine Liste der Rollen für einen angegebenen Benutzer abzurufen und die zurückgegebenen Rollen an ein-Steuerelement zu binden <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> . Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> enthält ein Komma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member GetUsersInRole : string -&gt; string[]" Usage="System.Web.Security.Roles.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Die Rolle, für die die Liste der Benutzer abgerufen werden soll.</param>
        <summary>Ruft eine Liste der Benutzer mit der angegebenen Rolle ab.</summary>
        <returns>Ein Zeichenfolgenarray mit den Namen aller Benutzer, die Mitglieder der angegebenen Rolle sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.GetUsersInRole%2A> Methode ruft die- <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> Methode des Standardrollen Anbieters auf, um die einer Rolle zugeordneten Benutzernamen aus der Datenquelle abzurufen. Nur die Rollen für die Anwendung, die in der-Eigenschaft angegeben ist, <xref:System.Web.Security.Roles.ApplicationName%2A> werden abgerufen.



## Examples
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetUsersInRole%2A> -Methode verwendet, um eine Liste der Benutzer in einer bestimmten Rolle zu erhalten und die Ergebnisse an ein-Steuerelement zu binden <xref:System.Web.UI.WebControls.GridView> . Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUserInRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein Benutzer die angegebene Rolle innehat.</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der Rolle, in der gesucht werden soll.</param>
        <summary>Ruft einen Wert ab, der angibt, ob der gegenwärtig angemeldete Benutzer die angegebene Rolle innehat. Die API sollte nur im Kontext eines ASP.NET-Anforderungsthreads aufgerufen werden und ist in diesem speziellen Anwendungsfall threadsicher.</summary>
        <returns><see langword="true" />, wenn der gegenwärtig angemeldete Benutzer die angegebene Rolle innehat, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.IsUserInRole%2A> Methode ruft die- <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=nameWithType> Methode des Standardrollen Anbieters auf, um zu bestimmen, ob der aktuell angemeldete Benutzer einer Rolle aus der Datenquelle für die Anwendung zugeordnet ist, die in der-Eigenschaft angegeben ist <xref:System.Web.Security.Roles.ApplicationName%2A> . Der aktuell angemeldete Benutzer wird von der- <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> Eigenschaft der aktuellen <xref:System.Web.HttpContext?displayProperty=nameWithType> oder von <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> für nicht-http-Hostingumgebungen identifiziert. Wenn kein Benutzer angemeldet ist, wird eine Ausnahme ausgelöst. Nur die Rollen für die Anwendung, die in der-Eigenschaft angegeben ist, <xref:System.Web.Security.Roles.ApplicationName%2A> werden abgerufen.

 Wenn den Wert <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> `true` hat, `roleName` kann anstelle des angegebenen Rollen Anbieters mit dem Rollen Cache verglichen werden.



## Examples
 Im folgenden Codebeispiel wird Programm gesteuert überprüft, ob sich der aktuell angemeldete Benutzer in der-Administrator Rolle befindet, bevor der Benutzer die Rollen Einstellungen für die Anwendung anzeigen kann. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.

- oder -

Gegenwärtig ist kein Benutzer angemeldet.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string * string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Der Name des zu suchenden Benutzers.</param>
        <param name="roleName">Der Name der Rolle, in der gesucht werden soll.</param>
        <summary>Ruft einen Wert ab, der angibt, ob der angegebene Benutzer die angegebene Rolle innehat. Die API sollte nur im Kontext eines ASP.NET-Anforderungsthreads aufgerufen werden und ist in diesem speziellen Anwendungsfall threadsicher.</summary>
        <returns><see langword="true" />, wenn der angegebene Benutzer die angegebene Rolle innehat, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.IsUserInRole%2A> Methode ruft die- <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> Methode des Standardrollen Anbieters auf, um zu bestimmen, ob ein Benutzername einer Rolle aus der Datenquelle für die Anwendung, die in der-Eigenschaft angegeben ist, zugeordnet ist <xref:System.Web.Security.Roles.ApplicationName%2A> .

 Wenn `username` gleich dem aktuell angemeldeten Benutzer ist und der- <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> Eigenschafts Wert ist `true` , `roleName` kann anstelle der angegebenen auf den Rollen Cache überprüft werden <xref:System.Web.Security.Roles.Provider%2A> .



## Examples
 Im folgenden Codebeispiel wird Programm gesteuert überprüft, ob sich ein Benutzer in der-Administrator Rolle befindet, bevor der Benutzer die Rollen Einstellungen für die Anwendung anzeigen kann. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.

- oder -

 <paramref name="username" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

 <paramref name="username" /> enthält ein Komma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="MaxCachedResults">
      <MemberSignature Language="C#" Value="public static int MaxCachedResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxCachedResults" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.MaxCachedResults" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxCachedResults As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxCachedResults { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxCachedResults : int" Usage="System.Web.Security.Roles.MaxCachedResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximale Anzahl von Rollennamen ab, die für einen Benutzer zwischengespeichert werden sollen.</summary>
        <value>Die maximale Anzahl von Rollennamen, die für einen Benutzer zwischengespeichert werden sollen. Der Standard ist 25.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.MaxCachedResults%2A> Eigenschaft wird mithilfe des- `maxCachedResults` Konfigurations Attributs festgelegt. Der Wert des `maxCachedResults` Konfigurations Attributs muss auf einen ganzzahligen Wert größer als 0 (null) festgelegt werden.



## Examples
 Das folgende Beispiel zeigt das [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Element im- `system.web` Abschnitt der Web.config-Datei für eine ASP.NET-Anwendung. Er gibt an, dass die Anwendung eine <xref:System.Web.Security.SqlRoleProvider> -Instanz verwendet, und legt das- `maxCachedResults` Attribut auf 10 fest.

```
<roleManager
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All"
  maxCachedResults="10" />
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As RoleProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProvider ^ Provider { System::Web::Security::RoleProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.Security.RoleProvider" Usage="System.Web.Security.Roles.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Standardrollenanbieter für die Anwendung ab.</summary>
        <value>Der Standardrollenanbieter für die Anwendung, der als Klasse verfügbar gemacht wird, die die abstrakte <see cref="T:System.Web.Security.RoleProvider" />-Klasse erbt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.Provider%2A> Eigenschaft ermöglicht es Ihnen, direkt auf den Standardrollen Anbieter für eine Anwendung zu verweisen. Dies wird häufig für den Zugriff auf benutzerdefinierte Member des Rollen Anbieters verwendet, die nicht Teil der <xref:System.Web.Security.RoleProvider> abstrakten-Klasse sind.

 Beispielsweise enthält die- <xref:System.Web.Security.WindowsTokenRoleProvider> Klasse eine Überladung der- <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> Methode, mit der Sie bestimmen können, ob sich ein Benutzer in einer gemeinsamen Windows-Rolle mit einem- <xref:System.Security.Principal.WindowsBuiltInRole> Enumerationswert befindet. Ein Verweis auf die- <xref:System.Web.Security.WindowsTokenRoleProvider> Klasse für eine Anwendung kann mithilfe der <xref:System.Web.Security.Roles.Provider%2A> -Eigenschaft abgerufen werden und kann in umgewandelt werden <xref:System.Web.Security.WindowsTokenRoleProvider> , um auf die-Überladung zu verweisen <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> .

 Wenn mehrere Rollen Anbieter für eine Anwendung konfiguriert sind, können Sie mithilfe der-Auflistung auf verschiedene Rollen Anbieter zugreifen <xref:System.Web.Security.Roles.Providers%2A> .



## Examples
 Im folgenden Codebeispiel wird der Standardrollen Anbieter als umgewandelt <xref:System.Web.Security.WindowsTokenRoleProvider> und überprüft, ob der aktuell angemeldete Benutzer der Rolle "Administratoren" ist, bevor der Benutzer die Rollen Einstellungen für die Anwendung anzeigen kann. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.WindowsTokenRoleProvider> .

 [!code-aspx-csharp[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/CS/ViewRoles2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/VB/ViewRoles2vb.aspx#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As RoleProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProviderCollection ^ Providers { System::Web::Security::RoleProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Web.Security.RoleProviderCollection" Usage="System.Web.Security.Roles.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung der Rollenanbieter für die ASP.NET-Anwendung ab.</summary>
        <value>Eine <see cref="T:System.Web.Security.RoleProviderCollection" />, die die für die ASP.NET-Anwendung konfigurierten Rollenanbieter enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.Providers%2A> Eigenschaft verweist auf alle für eine Anwendung aktivierten Rollen Anbieter, einschließlich der in der Web.config-Datei hinzugefügten Anbieter. Sie können steuern, welche Rollen Anbieter für eine Anwendung verfügbar sind, indem Sie das- `providers` Element des [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) -Abschnitts in der Web.config-Datei für die Anwendung verwenden.

 Das folgende Beispiel zeigt einen [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v=vs.100)) -Abschnitt, der alle vorhandenen Anbieter entfernt (z. b. die, die in der Machine.config-Datei angegeben sind) und eine- <xref:System.Web.Security.SqlRoleProvider> Instanz als Rollen Anbieter für die Anwendung hinzufügt.

```
<configuration>
  <connectionStrings>
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />
  </connectionStrings>

  <system.web>
    <roleManager defaultProvider="SqlProvider"
      enabled="true"
      cacheRolesInCookie="true"
      cookieName=".ASPROLES"
      cookieTimeout="30"
      cookiePath="/"
      cookieRequireSSL="false"
      cookieSlidingExpiration="true"
      cookieProtection="Encrypted">

      <providers>
        <clear/>
        <add
          name="SqlProvider"
          type="System.Web.Security.SqlRoleProvider"
          connectionStringName="SqlServices"
          applicationName="MyApplication" />
         </providers>

    </roleManager>
  </system.web>
</configuration>
```

 Sie können einen stark typisierten Verweis auf einen Anbieter aus der Auflistung abrufen, <xref:System.Web.Security.Roles.Providers%2A> indem Sie den Rollen Anbieter nach Namen indizieren und ihn als gewünschten Typ umwandeln.

 Sie können einen Verweis auf den Standardanbieter für eine Anwendung abrufen, indem Sie die- <xref:System.Web.Security.Roles.Provider%2A> Eigenschaft verwenden.



## Examples
 Im folgenden Codebeispiel werden die Anbieter aufgeführt, die für eine Anwendung und ihre jeweiligen Typen aktiviert sind.

 [!code-aspx-csharp[System.Web.Security.Roles#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Roles#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/Providersvb.aspx#7)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Der Benutzer, der aus der angegebenen Rolle entfernt werden soll.</param>
        <param name="roleName">Die Rolle, aus der der angegebene Benutzer entfernt werden soll.</param>
        <summary>Entfernt den angegebenen Benutzer aus der angegebenen Rolle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> Methode ruft den Standardrollen Anbieter auf, um den angegebenen Benutzer aus der angegebenen Rolle in der Datenquelle zu entfernen.



## Examples
 Im folgenden Codebeispiel wird ein Benutzer aus einer Rolle entfernt. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.

- oder -

 <paramref name="username" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

 <paramref name="username" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">Der Benutzer, der aus den angegebenen Rollen entfernt werden soll.</param>
        <param name="roleNames">Ein Zeichenfolgenarray mit Rollennamen, aus denen der angegebene Benutzer entfernt werden soll.</param>
        <summary>Entfernt den angegebenen Benutzer aus den angegebenen Rollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> Methode ruft den Standardrollen Anbieter auf, um den angegebenen Benutzer aus den angegebenen Rollen in der Datenquelle zu entfernen.

 Wenn die Anwendung für die Verwendung der- <xref:System.Web.Security.SqlRoleProvider> Klasse konfiguriert ist, werden die Datenbankupdates, die während des Aufrufes der-Methode ausgeführt werden, <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> innerhalb einer Transaktion ausgeführt. Wenn ein Fehler auftritt, z. b. ein Benutzername, der sich nicht in einer angegebenen Rolle befindet, wird ein Rollback für die Transaktion ausgeführt, und es werden keine Updates durchgeführt.



## Examples
 Im folgenden Codebeispiel wird die- <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> Methode verwendet, um einen Benutzer aus einer oder mehreren Rollen zu entfernen. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.Roles#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUserFromRolescs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Roles#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUserFromRolesvb.aspx#10)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Eine der Rollen in <paramref name="roleNames" /> ist <see langword="null" />.

- oder -

 <paramref name="username" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Eine der Rollen in <paramref name="roleNames" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

 <paramref name="username" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

 <paramref name="roleNames" /> enthält ein doppeltes Element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">Ein Zeichenfolgenarray mit Benutzernamen, die aus den angegebenen Rollen entfernt werden sollen.</param>
        <param name="roleName">Der Name der Rolle, aus der die angegebenen Benutzer entfernt werden sollen.</param>
        <summary>Entfernt die angegebenen Benutzer aus der angegebenen Rolle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> Methode ruft den Standardrollen Anbieter auf, um die angegebenen Benutzer aus der angegebenen Rolle in der Datenquelle zu entfernen.

 Wenn die Anwendung die- <xref:System.Web.Security.SqlRoleProvider> Klasse verwendet, werden die Datenbankupdates, die während des Aufrufes der-Methode ausgeführt werden, <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> innerhalb einer Transaktion ausgeführt. Wenn ein Fehler auftritt, z. b. ein Benutzername, der sich nicht in einer angegebenen Rolle befindet, wird ein Rollback für die Transaktion ausgeführt, und es werden keine Updates durchgeführt.



## Examples
 Im folgenden Codebeispiel wird die- <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> Methode verwendet, um einen oder mehrere Benutzer aus einer Rolle zu entfernen. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.Roles#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolecs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Roles#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolevb.aspx#9)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.

- oder -

Einer der Benutzernamen in <paramref name="usernames" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

Einer der Benutzernamen in <paramref name="usernames" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

 <paramref name="usernames" /> enthält ein doppeltes Element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Ein Zeichenfolgenarray mit Benutzernamen, die aus den angegebenen Rollen entfernt werden sollen.</param>
        <param name="roleNames">Ein Zeichenfolgenarray mit Rollennamen, aus denen die angegebenen Benutzer entfernt werden sollen.</param>
        <summary>Entfernt die angegebenen Benutzernamen aus den angegebenen Rollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> Methode ruft den Standardrollen Anbieter auf, um die angegebenen Benutzer aus den angegebenen Rollen in der Datenquelle zu entfernen.

 Wenn die Anwendung die- <xref:System.Web.Security.SqlRoleProvider> Klasse verwendet, werden die Datenbankupdates, die während des Aufrufes der-Methode ausgeführt werden, <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> innerhalb einer Transaktion ausgeführt. Wenn ein Fehler auftritt, z. b. ein Benutzername, der sich nicht in einer angegebenen Rolle befindet, wird ein Rollback für die Transaktion ausgeführt, und es werden keine Updates durchgeführt.



## Examples
 Im folgenden Codebeispiel wird die- <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> Methode verwendet, um einen oder mehrere Benutzer basierend auf Benutzereingaben aus einer oder mehreren Rollen zu entfernen. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

 [!code-aspx-csharp[System.Web.Security.Roles#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolescs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Roles#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolesvb.aspx#8)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Eine der in <paramref name="roleNames" /> angegebenen Rollen ist <see langword="null" />.

- oder -

Einer der in <paramref name="usernames" /> angegebenen Benutzer ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Eine der in <paramref name="roleNames" /> angegebenen Rollen ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

Einer der in <paramref name="usernames" /> angegebenen Benutzer ist eine leere Zeichenfolge oder enthält ein Komma (,).

- oder -

 <paramref name="roleNames" /> enthält ein doppeltes Element.

- oder -

 <paramref name="usernames" /> enthält ein doppeltes Element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public static bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RoleExists : string -&gt; bool" Usage="System.Web.Security.Roles.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der Rolle, die in der Datenquelle gesucht werden soll.</param>
        <summary>Ruft einen Wert ab, der angibt, ob der angegebene Rollenname bereits in der Rollendatenquelle vorhanden ist.</summary>
        <returns><see langword="true" />, wenn der Rollenname bereits in der Datenquelle vorhanden ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die- <xref:System.Web.Security.Roles.RoleExists%2A> Methode ruft die- `RoleExists` Methode des Standardrollen Anbieters auf, um zu bestimmen, ob ein Rollenname in der Datenquelle für die Anwendung vorhanden ist, die in der-Eigenschaft angegeben ist <xref:System.Web.Security.Roles.ApplicationName%2A> .



## Examples
 Im folgenden Codebeispiel wird die- <xref:System.Web.Security.Roles.RoleExists%2A> Methode verwendet, um zu bestimmen, ob bereits ein Rollenname vorhanden ist, bevor die Rolle erstellt wird. Ein Beispiel für eine Web.config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles> .

> [!IMPORTANT]
>  Dieses Beispiel enthält ein Textfeld, das Benutzereingaben akzeptiert. Dies ist eine potenzielle Sicherheitsbedrohung. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Rollenverwaltung ist nicht aktiviert.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
  </Members>
</Type>

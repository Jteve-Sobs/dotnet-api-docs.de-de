<Type Name="SqlRoleProvider" FullName="System.Web.Security.SqlRoleProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ce9491ab9d65f35960b0c21f3b06af305bf5600b" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52252883" /></Metadata><TypeSignature Language="C#" Value="public class SqlRoleProvider : System.Web.Security.RoleProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlRoleProvider extends System.Web.Security.RoleProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.SqlRoleProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlRoleProvider&#xA;Inherits RoleProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlRoleProvider : System::Web::Security::RoleProvider" />
  <TypeSignature Language="F#" Value="type SqlRoleProvider = class&#xA;    inherit RoleProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Security.RoleProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Verwaltet die Speicherung der Rollenmitgliedschaftsinformationen für eine ASP.NET-Anwendung in einer SQL Server-Datenbank.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse wird verwendet, durch die <xref:System.Web.Security.Roles> und <xref:System.Web.Security.RolePrincipal> Klasse, um Rollenverwaltungsdienste für eine ASP.NET-Anwendung mit SQL Server-Datenbank bereitzustellen. Sie können die Rollenverwaltung verwenden, auf verschiedene Ebenen der Autorisierung für Ihre Anwendung angeben.  
  
 Verwenden der <xref:System.Web.Security.SqlRoleProvider> -Klasse, müssen Sie zuerst die verwendete SQL Server-Datenbank erstellen die <xref:System.Web.Security.SqlRoleProvider>. Zum Erstellen der Datenbank ein, die die <xref:System.Web.Security.SqlRoleProvider> -Klasse, führen Sie die `aspnet_regsql.exe` ausführbare Datei gefunden wird, in der C:\WINDOWS\Microsoft.NET\Framework\ `versionNumber` Ordner, und geben Sie die `-Ar` Option (z. B. `aspnet_regsql.exe -Ar`). Die Datenbank erstellt haben, heißt Aspnetdb. Alternativ führen Sie aspnet_regsql.exe aus, um die GUI-Konfiguration wechseln und alle Funktionen von ASP.NET konfigurieren.  
  
 Wenn der Rollenanbieter mit einer Verbindungszeichenfolge, die die integrierte Sicherheit verwendet konfiguriert ist, muss das Prozesskonto der ASP.NET-Anwendung zur Verbindung mit SQL Server-Datenbank berechtigt.  
  
 Die Datei "Machine.config" konfiguriert ist, mit einem <xref:System.Web.Security.SqlRoleProvider> Instanz AspNetSqlProvider, mit dem SQL Server auf dem lokalen Computer verbunden. Sie können diese Instanz des Anbieters, oder Ihre eigenen in der Datei "Web.config" für Ihre ASP.NET-Anwendung. Geben Sie zum Verwenden der Instanz AspNetSqlProvider AspNetSqlProvider als die `defaultProvider` in Ihrer Konfiguration.  
  
 Sie können konfigurieren, die <xref:System.Web.Security.SqlRoleProvider> verwenden die gleiche Datenbank und den Benutzer Informationen wie die <xref:System.Web.Security.SqlMembershipProvider> um eine einzelne Datenbank Informationen zu Authentifizierung und Autorisierung verwenden. Um die gleiche Datenbank für Mitgliedschafts- und Rolleninformationen zu verwenden, führen Sie die ausführbare Datei aspnet_regsql.exe aus, und installieren Sie das Mitgliedschaftsfeature. Geben Sie dann die gleiche Verbindungszeichenfolge in Ihrer Konfiguration für beide Ihre <xref:System.Web.Security.SqlRoleProvider> und <xref:System.Web.Security.SqlMembershipProvider> Instanzen. Stellen Sie außerdem sicher, dass beide Anbieterinstanzen, mit dem gleichen konfiguriert sind <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Datei "Web.config" für eine ASP.NET-Anwendung für die Verwendung konfiguriert eine <xref:System.Web.Security.SqlRoleProvider> Objekt und die <xref:System.Web.Security.SqlMembershipProvider>. Das-Element wird konfiguriert, um den Zugriff auf authentifizierte Benutzer nur in der Rolle "Administratoren" zu ermöglichen.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="logincs.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
    <authorization>  
      <deny users="?" />  
         <allow roles="Administrators" />  
         <deny users="*" />  
    </authorization>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="15">  
      <providers>  
        <add   
          name="SqlProvider"   
          type="System.Web.Security.SqlMembershipProvider"   
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="false"  
          requiresQuestionAndAnswer="false"   
          passwordFormat="Hashed"   
          applicationName="SampleApplication" />  
      </providers>  
    </membership>  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="true"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
      <providers>  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"   
          applicationName="SampleApplication" />  
      </providers>  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlRoleProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlRoleProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Instanz der <see cref="T:System.Web.Security.SqlRoleProvider" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.%23ctor%2A> Konstruktor wird aufgerufen, von ASP.NET zum Erstellen einer Instanz von der <xref:System.Web.Security.SqlRoleProvider> Klasse als in der Konfiguration für die Anwendung angegeben. Dieser Konstruktor ist nicht dazu gedacht, die aus Ihrem Code verwendet werden.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public override void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.AddUsersToRoles : string[] * string[] -&gt; unit" Usage="sqlRoleProvider.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Ein Zeichenfolgenarray mit Benutzernamen, die den angegebenen Rollen hinzugefügt werden sollen.</param>
        <param name="roleNames">Ein Zeichenfolgenarray mit Rollennamen, denen die angegebenen Benutzernamen hinzugefügt werden sollen.</param>
        <summary>Fügt jeder der angegebenen Rollen die angegebenen Benutzernamen hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse, um eine oder mehrere Benutzer eine oder mehrere Rollen in der SQL Server-Datenbank, die in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben zugeordnet werden sollen. Diese Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles.AddUserToRole%2A>, <xref:System.Web.Security.Roles.AddUserToRoles%2A>, <xref:System.Web.Security.Roles.AddUsersToRole%2A>, und <xref:System.Web.Security.Roles.AddUsersToRoles%2A> Methoden der <xref:System.Web.Security.Roles> Klasse.  
  
 Die Datenbankupdates, die während des Aufrufs erfolgen die <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> Methode innerhalb einer Transaktion erfolgen. Wenn ein Fehler auftritt, z. B. einen Benutzernamen ein, der bereits in einer angegebenen Rolle ist, die Transaktion ein Rollback aus, und keine Updates ausgeführt werden.  
  
 Wenn die <xref:System.Web.Security.SqlRoleProvider> wird mit der <xref:System.Web.Security.SqlMembershipProvider>, und eine der angegebenen Benutzernamen ist nicht vorhanden, in der Datenbank, der Benutzername wird automatisch mit der Datenbank hinzugefügt werden.  
  
 Benutzernamen und den Rollennamen, aus denen darf keine Kommas enthalten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein oder mehrere Benutzer zu einer Rolle hinzugefügt oder entfernt aus einer Rolle einen Benutzer. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Eine der Rollen in <paramref name="roleNames" /> ist <see langword="null" />.  
  
- oder -  
Einer der Benutzer in <paramref name="usernames" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Eine der Rollen in <paramref name="roleNames" /> ist eine leere Zeichenfolge oder enthält ein Komma.  
  
- oder -  
Einer der Benutzer in <paramref name="usernames" /> ist eine leere Zeichenfolge oder enthält ein Komma.  
  
- oder -  
Eine der Rollen in <paramref name="roleNames" /> ist länger als 256 Zeichen.  
  
- oder -  
Einer der Benutzer in <paramref name="usernames" /> ist länger als 256 Zeichen.  
  
- oder -  
 <paramref name="roleNames" /> enthält ein doppeltes Element.  
  
- oder -  
 <paramref name="usernames" /> enthält ein doppeltes Element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Mindestens einer der angegebenen Rollennamen wurde nicht gefunden.  
  
- oder -  
Mindestens einer der angegebenen Benutzernamen wurde nicht gefunden.  
  
- oder -  
Mindestens einer der angegebenen Benutzernamen ist bereits einem oder mehreren angegebenen Rollennamen zugeordnet.  
  
- oder -  
Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public override string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.SqlRoleProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.SqlRoleProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Anwendung ab, für die Rolleninformationen gespeichert und abgerufen werden sollen, oder legt diesen fest.</summary>
        <value>Der Name der Anwendung, für die Rolleninformationen gespeichert und abgerufen werden sollen. Der <see cref="P:System.Web.HttpRequest.ApplicationPath" />-Eigenschaftswert ist der Standardwert für die aktuelle <see cref="P:System.Web.HttpContext.Request" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> dient der <xref:System.Web.Security.SqlRoleProvider> Zuordnen von Benutzern und Rollen mit verschiedenen Anwendungen. Dadurch können mehrere Anwendungen die gleiche Datenbank verwendet, um Rolleninformationen zu Benutzern und zu speichern, ohne dass Konflikte zwischen doppelten Benutzernamen oder Rollennamen. Mehrere ASP.NET-Anwendungen können die gleiche Datenbank durch Angabe des gleiche Werts in der <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> Eigenschaft. Die <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> -Eigenschaft programmgesteuert festgelegt werden kann, oder sie können in der Konfigurationsdatei für die Webanwendung mit deklarativ festgelegt werden die `applicationName` Attribut.  
  
 Wenn ein Wert nicht, für angegeben wird die `applicationName` -Attribut in der Konfigurationsdatei für die Webanwendung die <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> Eigenschaftswert für die aktuelle <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> Objekt wird verwendet.  
  
> [!CAUTION]
>  Da für alle Anforderungen verarbeitet, die von eine einzelnen Rolleninstanz-Anbieter verwendet wird ein <xref:System.Web.HttpApplication> -Objekt können mehrere Anforderungen parallel ausgeführt werden und es wird versucht, legen Sie die <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> -Eigenschaftswert. Die <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> Eigenschaft ist nicht threadsicher ist, für mehrere Schreibvorgänge, und Ändern der <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> Eigenschaftswert kann zu unerwartetem Verhalten für mehrere Benutzer einer Anwendung führen. Es wird empfohlen, dass Sie keinen Code schreiben, ermöglicht Benutzern das festlegen, der <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> Eigenschaft es sei denn, Sie müssen. Ein Beispiel für eine Anwendung in dem das Festlegen der <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> Eigenschaft ist möglicherweise erforderlich ist eine administrative Anwendung, die von Rollendaten für mehrere Anwendungen verwaltet. Eine solche Anwendung sollte es sich um eine Anwendung für die einzelnen Benutzer und nicht für eine Webanwendung sein.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt das Element in der `system.web` -Abschnitt der Datei "Web.config" für eine ASP.NET-Anwendung. Es gibt an, der Anwendung <xref:System.Web.Security.SqlRoleProvider> -Instanz und legt die <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> Eigenschaft `MyApplication`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Ein Aufrufer, der nicht über die Berechtigung <see cref="P:System.Web.Security.SqlRoleProvider.ApplicationName" /> zum Hosten von ASP.NET verfügt, hat versucht, die <see cref="F:System.Web.AspNetHostingPermissionLevel.High" />-Eigenschaft festzulegen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><see cref="P:System.Web.Security.SqlRoleProvider.ApplicationName" /> wurde auf eine Zeichenfolge festzulegen versucht, die länger als 256 Zeichen ist.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public override void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.CreateRole : string -&gt; unit" Usage="sqlRoleProvider.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der zu erstellenden Rolle.</param>
        <summary>Fügt der Rollendatenbank eine neue Rolle hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.CreateRole%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse zum Erstellen einer Rolle in der SQL Server-Datenbank, die in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben.  
  
 Die maximale Länge für den Rollennamen beträgt 256 Zeichen. Rollennamen werden nicht beachtet. Kommas sind in Rollennamen nicht zulässig.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine neue Rolle in der Datenbank. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.  
  
> [!IMPORTANT]
>  Dieses Beispiel enthält das Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko dar. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.  
  
- oder -  
 <paramref name="roleName" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> ist bereits in der Datenbank vorhanden.  
  
- oder -  
Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="override this.DeleteRole : string * bool -&gt; bool" Usage="sqlRoleProvider.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der zu löschenden Rolle.</param>
        <param name="throwOnPopulatedRole">Wenn der Wert <see langword="true" /> ist und <paramref name="roleName" /> über einen oder mehrere Mitglieder verfügt, wird eine Ausnahme ausgelöst.</param>
        <summary>Entfernt eine Rolle aus der Rollendatenbank.</summary>
        <returns><see langword="true" />, wenn die Rolle erfolgreich gelöscht wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.DeleteRole%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse, um eine Rolle aus der SQL Server-Datenbank, die in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben zu löschen. Wenn eine Rolle gelöscht wird, wird die Liste der Benutzer, die dieser Rolle zugeordneten auch aus der Datenbank gelöscht. Die Benutzerinformationen in der Datenbank ist nicht betroffen.  
  
 Wenn `throwOnPopulatedRole` ist `true`, dann wird eine Ausnahme ausgelöst werden, und die Rolle wird nicht gelöscht werden, wenn die Rolle von identifiziert die `roleName` Parameter hat ein oder mehrere Elemente. Wenn `throwOnPopulatedRole` ist `false`, und klicken Sie dann die Rolle, ob sie leer oder nicht ist gelöscht werden.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine Rolle aus der Datenbank gelöscht. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.  
  
- oder -  
 <paramref name="roleName" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> verfügt über mindestens ein Mitglied, und <paramref name="throwOnPopulatedRole" /> ist <see langword="true" />.  
  
- oder -  
Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="override this.FindUsersInRole : string * string -&gt; string[]" Usage="sqlRoleProvider.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Die Rolle, in der gesucht werden soll.</param>
        <param name="usernameToMatch">Der zu suchende Benutzername.</param>
        <summary>Ruft ein Array von Benutzernamen in einer Rolle ab, die mit den angegebenen Benutzernamen übereinstimmen.</summary>
        <returns>Ein Zeichenfolgenarray, das die Namen aller Benutzer enthält, deren Benutzername mit <paramref name="usernameToMatch" /> übereinstimmt und die Mitglied der angegebenen Rolle sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.FindUsersInRole%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> -Klasse und gibt eine Liste von Benutzern in einer Rolle, in dem eine Übereinstimmung des angegebenen enthält den Benutzernamen `usernameToMatch` für die konfigurierte `applicationName`. Die <xref:System.Web.Security.SqlRoleProvider> sucht einen Benutzernamen ein, die entspricht der `usernameToMatch` Parameterwert die LIKE-Schlüsselwort und unterstützt die SQL Server-Platzhalterzeichen verwenden. Z. B. wenn die `usernameToMatch` Parameter auf "Benutzer1" festgelegt ist, wird die Mitgliedschaftsinformationen für den Benutzer mit dem Benutzernamen "Benutzer1" zurückgegeben wird, wenn es vorhanden ist. Wenn die `usernameToMatch` Parameter auf"Benutzer%" festgelegt ist, und klicken Sie dann Mitgliedschaftsinformationen für Benutzer mit dem Benutzernamen "Benutzer1", "Benutzer2", "benutzer_admin" usw. werden zurückgegeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.FindUsersInRole%2A> -Methode zum Anzeigen der Rollenmitgliedschaft basierend auf Benutzereingaben. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Dieses Beispiel enthält das Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko dar. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).  
  
- oder -  
 <paramref name="usernameToMatch" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.  
  
- oder -  
 <paramref name="usernameToMatch" /> ist eine leere Zeichenfolge.  
  
- oder -  
 <paramref name="roleName" /> ist länger als 256 Zeichen.  
  
- oder -  
 <paramref name="usernameToMatch" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> wurde in der Datenbank nicht gefunden.  
  
- oder -  
Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public override string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="override this.GetAllRoles : unit -&gt; string[]" Usage="sqlRoleProvider.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine Liste aller Rollen für die Anwendung ab.</summary>
        <returns>Ein Zeichenfolgenarray, das die Namen aller für eine bestimmte Anwendung in der Datenbank gespeicherten Rollen enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.GetAllRoles%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse zum Abrufen einer Liste aller Rollen in der SqlServer-Datenbank, die in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetAllRoles%2A> Methode zum Abrufen der Liste der Rollen für eine Anwendung, und binden die Ergebnisse in einem <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> Steuerelement. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.  
  
> [!IMPORTANT]
>  Dieses Beispiel enthält das Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko dar. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public override string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="override this.GetRolesForUser : string -&gt; string[]" Usage="sqlRoleProvider.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Der Benutzer, für den eine Liste der Rollen zurückgegeben werden soll.</param>
        <summary>Ruft eine Liste der Rollen ab, die ein Benutzer innehat.</summary>
        <returns>Ein Zeichenfolgenarray, das die Namen aller Rollen des angegebenen Benutzers enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.GetRolesForUser%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> -Klasse zum Abrufen einer Liste von Rollen für einen angegebenen Benutzer aus der SQL Server-Datenbank, die in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetRolesForUser%2A> Methode zum Abrufen einer Liste von Rollen für einen angegebenen Benutzer und bindet sie an einer <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> Steuerelement. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> enthält ein Komma.  
  
- oder -  
 <paramref name="username" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.GetUsersInRole : string -&gt; string[]" Usage="sqlRoleProvider.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der Rolle, für die die Liste der Benutzer abgerufen werden soll.</param>
        <summary>Ruft eine Liste der Benutzer mit der angegebenen Rolle ab.</summary>
        <returns>Ein Zeichenfolgenarray mit den Namen aller Benutzer, die Mitglieder der angegebenen Rolle sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.GetUsersInRole%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse zum Abrufen der Liste der Benutzer zugeordnet, die mit der angegebenen Rolle in der SQL Server-Datenbank, die in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben sind.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetUsersInRole%2A> Methode zum Abrufen einer Liste der Benutzer in einer bestimmten Rolle, und binden die Ergebnisse in einem <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> Steuerelement. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.  
  
- oder -  
 <paramref name="roleName" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="rolename" /> wurde in der Datenbank nicht gefunden.  
  
- oder -  
Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="sqlRoleProvider.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu initialisierenden <see cref="T:System.Web.Security.SqlRoleProvider" />-Instanz.</param>
        <param name="config">Eine <see cref="T:System.Collections.Specialized.NameValueCollection" />, die die Namen und Werte der Konfigurationsoptionen für den Rollenanbieter enthält.</param>
        <summary>Initialisiert den SQL Server-Rollenanbieter mit den Eigenschaftswerten, die in der Konfigurationsdatei der ASP.NET-Anwendung angegeben sind. Diese Methode ist nicht für die direkte Verwendung im Code vorgesehen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode initialisiert die <xref:System.Web.Security.SqlRoleProvider> mit der Eigenschaft Werte, die in der Anwendungskonfigurationsdatei (Web.config) für das ASP.NET angegeben sind, und nicht direkt aus Ihrem Code verwendet werden soll.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Die ASP.NET-Anwendung wird nicht auf der Vertrauensebene <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> oder höher ausgeführt.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="config" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Das <see langword="connectionStringName" />-Attribut ist leer oder in der Anwendungskonfigurationsdatei für diese <see cref="T:System.Web.Security.SqlRoleProvider" />-Instanz nicht vorhanden.  
  
- oder -  
Das <see langword="applicationName" />-Attribut ist länger als 256 Zeichen.  
  
- oder -  
Die Anwendungskonfigurationsdatei dieser <see cref="T:System.Web.Security.SqlRoleProvider" />-Instanz enthält ein unbekanntes Attribut.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public override bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.IsUserInRole : string * string -&gt; bool" Usage="sqlRoleProvider.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Der zu suchende Benutzername.</param>
        <param name="roleName">Die Rolle, in der gesucht werden soll.</param>
        <summary>Ruft einen Wert ab, der angibt, ob der angegebene Benutzer die angegebene Rolle innehat.</summary>
        <returns><see langword="true" />, wenn der angegebene Benutzername die angegebene Rolle innehat, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.IsUserInRole%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse und die <xref:System.Security.Principal.IPrincipal.IsInRole%2A> -Methode der der <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> Eigenschaft, um zu bestimmen, ob ein Benutzer einer Rolle in der SQL Server-Datenbank, die in der Konfigurationsdatei der ASP.NET-Anwendung angegeben zugeordnet ist. ("Web.config").  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird überprüft, um festzustellen, ob der angemeldete Benutzer in der Rolle "Administratoren" ist, bevor der Benutzer zum Anzeigen von Benutzerrollen programmgesteuert. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="username" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.  
  
- oder -  
 <paramref name="username" /> enthält ein Komma.  
  
- oder -  
 <paramref name="roleName" /> ist länger als 256 Zeichen.  
  
- oder -  
 <paramref name="username" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public override void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="sqlRoleProvider.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Ein Zeichenfolgenarray mit Benutzernamen, die aus den angegebenen Rollen entfernt werden sollen.</param>
        <param name="roleNames">Ein Zeichenfolgenarray mit Rollennamen, aus denen Benutzernamen entfernt werden sollen.</param>
        <summary>Entfernt die angegebenen Benutzernamen aus den angegebenen Rollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse, um einen oder mehrere Benutzer aus einer oder mehreren Rollen in der SQL Server-Datenbank, die in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben zu entfernen. Diese Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles.RemoveUserFromRole%2A>, <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>, <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>, und <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> Methoden der <xref:System.Web.Security.Roles> Klasse.  
  
 Die Datenbankupdates, die während des Aufrufs erfolgen <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> innerhalb einer Transaktion erfolgen. Wenn ein Fehler auftritt, z. B. einen Benutzernamen ein, der nicht vorhanden ist oder einen Benutzernamen ein, der bereits in einer angegebenen Rolle ist, die Transaktion ein Rollback aus, und keine Updates ausgeführt werden.  
  
 Benutzernamen und den Rollennamen, aus denen darf keine Kommas enthalten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein oder mehrere Benutzer zu einer Rolle hinzugefügt oder entfernt aus einer Rolle einen Benutzer. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Eine der Rollen in <paramref name="roleNames" /> ist <see langword="null" />.  
  
- oder -  
Einer der Benutzer in <paramref name="usernames" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Eine der Rollen in <paramref name="roleNames" /> ist eine leere Zeichenfolge oder enthält ein Komma.  
  
- oder -  
Einer der Benutzer in <paramref name="usernames" /> ist eine leere Zeichenfolge oder enthält ein Komma.  
  
- oder -  
Eine der Rollen in <paramref name="roleNames" /> ist länger als 256 Zeichen.  
  
- oder -  
Einer der Benutzer in <paramref name="usernames" /> ist länger als 256 Zeichen.  
  
- oder -  
 <paramref name="roleNames" /> enthält ein doppeltes Element.  
  
- oder -  
 <paramref name="usernames" /> enthält ein doppeltes Element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Mindestens einer der angegebenen Benutzernamen wurde nicht gefunden.  
  
- oder -  
Mindestens einer der angegebenen Rollennamen wurde nicht gefunden.  
  
- oder -  
Mindestens einer der angegebenen Benutzernamen ist einem oder mehreren der angegebenen Rollennamen nicht zugeordnet.  
  
- oder -  
Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public override bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.RoleExists : string -&gt; bool" Usage="sqlRoleProvider.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der Rolle, die in der Datenbank gesucht werden soll.</param>
        <summary>Ruft einen Wert ab, der angibt, ob der angegebene Rollenname bereits in der Rollendatenbank vorhanden ist.</summary>
        <returns><see langword="true" />, wenn der Rollenname bereits in der Datenbank vorhanden ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Security.SqlRoleProvider.RoleExists%2A> Methode wird aufgerufen, indem die <xref:System.Web.Security.Roles> Klasse, um zu bestimmen, ob ein Rollenname in der SQL Server-Datenbank, die in der Konfigurationsdatei (Web.config) der ASP.NET-Anwendung angegeben vorhanden ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.RoleExists%2A> Methode, um zu bestimmen, ob ein Rollenname bereits vor dem Erstellen der Rolle vorhanden ist. Ein Beispiel für eine Web.config-Datei, die Rollenverwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.  
  
> [!IMPORTANT]
>  Dieses Beispiel enthält das Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko dar. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.  
  
- oder -  
 <paramref name="roleName" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Grundlegendes zur Rollenverwaltung von ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="SqlRoleProvider" FullName="System.Web.Security.SqlRoleProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4b73fb509a0420ec9429f13defa225fa56a50ef" /><Meta Name="ms.sourcegitcommit" Value="f9576bf8c61e3d46834aeeff50f858359f2a99ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/09/2020" /><Meta Name="ms.locfileid" Value="77102454" /></Metadata><TypeSignature Language="C#" Value="public class SqlRoleProvider : System.Web.Security.RoleProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlRoleProvider extends System.Web.Security.RoleProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.SqlRoleProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlRoleProvider&#xA;Inherits RoleProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlRoleProvider : System::Web::Security::RoleProvider" />
  <TypeSignature Language="F#" Value="type SqlRoleProvider = class&#xA;    inherit RoleProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Security.RoleProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Verwaltet die Speicherung der Rollenmitgliedschaftsinformationen für eine ASP.NET-Anwendung in einer SQL Server-Datenbank.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 Diese Klasse wird von den Klassen <xref:System.Web.Security.Roles> und <xref:System.Web.Security.RolePrincipal> verwendet, um Rollen Verwaltungsdienste für eine ASP.NET-Anwendung mithilfe einer SQL Server-Datenbank bereitzustellen. Mit der Rollen Verwaltung können Sie verschiedene Autorisierungs Ebenen für Ihre Anwendung angeben.

 Wenn Sie die <xref:System.Web.Security.SqlRoleProvider>-Klasse verwenden möchten, müssen Sie zunächst die vom <xref:System.Web.Security.SqlRoleProvider>verwendete SQL Server Datenbank erstellen. Um die Datenbank zu erstellen, die von der <xref:System.Web.Security.SqlRoleProvider>-Klasse verwendet wird, führen Sie die im Ordner c:\WINDOWS\Microsoft.net\framework\ `versionNumber` gefundene ausführbare Datei `aspnet_regsql.exe` aus, und geben Sie die `-Ar`-Option an (z. b. `aspnet_regsql.exe -Ar`). Die erstellte Datenbank heißt aspnetdb. Alternativ können Sie Aspnet_regsql. exe ausführen, um den GUI-Konfigurations Modus abzurufen und alle ASP.NET-Features zu konfigurieren.

 Wenn der Rollen Anbieter mit einer Verbindungs Zeichenfolge konfiguriert ist, die die integrierte Sicherheit verwendet, muss das Prozess Konto der ASP.NET-Anwendung über die Berechtigung zum Herstellen einer Verbindung mit der SQL Server Datenbank verfügen.

 Die Datei Machine. config wird mit einer <xref:System.Web.Security.SqlRoleProvider> Instanz mit dem Namen aspnetzqlprovider konfiguriert, die eine Verbindung mit der SQL Server auf dem lokalen Computer herstellt. Sie können diese Instanz des Anbieters verwenden oder einen eigenen in der Datei "Web. config" für Ihre ASP.NET-Anwendung angeben. Wenn Sie die aspnetzqlprovider-Instanz verwenden möchten, geben Sie aspnetzqlprovider als `defaultProvider` in Ihrer Konfiguration an.

 Sie können die <xref:System.Web.Security.SqlRoleProvider> so konfigurieren, dass die gleiche Datenbank und die gleichen Benutzerinformationen wie die <xref:System.Web.Security.SqlMembershipProvider> verwendet werden, um eine einzelne Datenbank für Authentifizierungs-und Autorisierungs Informationen zu verwenden. Um dieselbe Datenbank für Mitgliedschafts-und Rollen Informationen zu verwenden, führen Sie die ausführbare Datei Aspnet_regsql. exe aus, und installieren Sie die Mitgliedschafts Funktion. Geben Sie dann in Ihrer Konfiguration die gleiche Verbindungs Zeichenfolge für Ihre <xref:System.Web.Security.SqlRoleProvider>-und <xref:System.Web.Security.SqlMembershipProvider> Instanzen an. Stellen Sie außerdem sicher, dass beide Anbieter Instanzen mit demselben <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>konfiguriert sind.



## Examples
 Das folgende Beispiel zeigt die Datei Web. config für eine ASP.NET-Anwendung, die für die Verwendung eines <xref:System.Web.Security.SqlRoleProvider>-Objekts und des <xref:System.Web.Security.SqlMembershipProvider>konfiguriert ist. Das-Element ist so konfiguriert, dass nur der Zugriff auf authentifizierte Benutzer in der-Administrator Rolle zugelassen wird.

```
<configuration>
  <connectionStrings>
    <add name="SqlServices" connectionString="Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />
  </connectionStrings>
  <system.web>
    <authentication mode="Forms" >
      <forms loginUrl="logincs.aspx"
      name=".ASPXFORMSAUTH" />
    </authentication>
    <authorization>
      <deny users="?" />
         <allow roles="Administrators" />
         <deny users="*" />
    </authorization>
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="15">
      <providers>
        <add
          name="SqlProvider"
          type="System.Web.Security.SqlMembershipProvider"
          connectionStringName="SqlServices"
          enablePasswordRetrieval="false"
          enablePasswordReset="false"
          requiresQuestionAndAnswer="false"
          passwordFormat="Hashed"
          applicationName="SampleApplication" />
      </providers>
    </membership>
    <roleManager defaultProvider="SqlProvider"
      enabled="true"
      cacheRolesInCookie="true"
      cookieName=".ASPROLES"
      cookieTimeout="30"
      cookiePath="/"
      cookieRequireSSL="true"
      cookieSlidingExpiration="true"
      cookieProtection="All" >
      <providers>
        <add
          name="SqlProvider"
          type="System.Web.Security.SqlRoleProvider"
          connectionStringName="SqlServices"
          applicationName="SampleApplication" />
      </providers>
    </roleManager>
  </system.web>
</configuration>
```

 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlRoleProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlRoleProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Instanz der <see cref="T:System.Web.Security.SqlRoleProvider" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Der <xref:System.Web.Security.SqlRoleProvider.%23ctor%2A>-Konstruktor wird von ASP.NET aufgerufen, um eine Instanz der <xref:System.Web.Security.SqlRoleProvider>-Klasse zu erstellen, wie in der Konfiguration für die Anwendung angegeben. Dieser Konstruktor ist nicht für die Verwendung im Code vorgesehen.

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public override void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.AddUsersToRoles : string[] * string[] -&gt; unit" Usage="sqlRoleProvider.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Ein Zeichenfolgenarray mit Benutzernamen, die den angegebenen Rollen hinzugefügt werden sollen.</param>
        <param name="roleNames">Ein Zeichenfolgenarray mit Rollennamen, denen die angegebenen Benutzernamen hinzugefügt werden sollen.</param>
        <summary>Fügt jeder der angegebenen Rollen die angegebenen Benutzernamen hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>-Methode wird von der <xref:System.Web.Security.Roles>-Klasse aufgerufen, um einem oder mehreren Benutzern eine oder mehrere Rollen in der SQL Server Datenbank zuzuordnen, die in der Konfigurationsdatei der ASP.NET-Anwendung (Web. config) angegeben ist. Diese Methode wird von den Methoden <xref:System.Web.Security.Roles.AddUserToRole%2A>, <xref:System.Web.Security.Roles.AddUserToRoles%2A>, <xref:System.Web.Security.Roles.AddUsersToRole%2A>und <xref:System.Web.Security.Roles.AddUsersToRoles%2A> der <xref:System.Web.Security.Roles>-Klasse aufgerufen.

 Die Datenbankupdates, die während des Aufrufes der <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>-Methode ausgeführt werden, erfolgen innerhalb einer Transaktion. Wenn ein Fehler auftritt, z. b. ein Benutzername, der bereits in einer angegebenen Rolle vorhanden ist, wird ein Rollback für die Transaktion ausgeführt, und es werden keine Updates durchgeführt.

 Wenn die <xref:System.Web.Security.SqlRoleProvider> mit dem <xref:System.Web.Security.SqlMembershipProvider>verwendet wird und einer der angegebenen Benutzernamen nicht in der Datenbank vorhanden ist, wird der Benutzername automatisch der Datenbank hinzugefügt.

 Benutzernamen und Rollennamen dürfen keine Kommas enthalten.



## Examples
 Im folgenden Codebeispiel wird einem oder mehreren Benutzern eine Rolle hinzugefügt oder ein Benutzer aus einer Rolle entfernt. Ein Beispiel für eine Web. config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Eine der Rollen in <paramref name="roleNames" /> ist <see langword="null" />.

Oder

Einer der Benutzer in <paramref name="usernames" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Eine der Rollen in <paramref name="roleNames" /> ist eine leere Zeichenfolge oder enthält ein Komma.

Oder

Einer der Benutzer in <paramref name="usernames" /> ist eine leere Zeichenfolge oder enthält ein Komma.

Oder

Eine der Rollen in <paramref name="roleNames" /> ist länger als 256 Zeichen.

Oder

Einer der Benutzer in <paramref name="usernames" /> ist länger als 256 Zeichen.

Oder

 <paramref name="roleNames" /> enthält ein doppeltes Element.

Oder

 <paramref name="usernames" /> enthält ein doppeltes Element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Mindestens einer der angegebenen Rollennamen wurde nicht gefunden.

 Oder

 Mindestens einer der angegebenen Benutzernamen wurde nicht gefunden.

 Oder

 Mindestens einer der angegebenen Benutzernamen ist bereits einem oder mehreren angegebenen Rollennamen zugeordnet.

 Oder

 Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public override string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.SqlRoleProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.SqlRoleProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Anwendung ab, für die Rolleninformationen gespeichert und abgerufen werden sollen, oder legt diesen fest.</summary>
        <value>Der Name der Anwendung, für die Rolleninformationen gespeichert und abgerufen werden sollen. Der <see cref="P:System.Web.HttpRequest.ApplicationPath" />-Eigenschaftswert ist der Standardwert für die aktuelle <see cref="P:System.Web.HttpContext.Request" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Der-<xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> wird vom <xref:System.Web.Security.SqlRoleProvider> verwendet, um Benutzer und Rollen verschiedenen Anwendungen zuzuordnen. Dadurch können mehrere Anwendungen die gleiche Datenbank verwenden, um Benutzer-und Rollen Informationen zu speichern, ohne dass Konflikte zwischen doppelten Benutzernamen oder Rollennamen auftreten. Mehrere ASP.NET-Anwendungen können dieselbe Datenbank verwenden, indem Sie denselben Wert in der <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>-Eigenschaft angeben. Die <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>-Eigenschaft kann Programm gesteuert festgelegt werden, oder Sie kann in der Konfigurationsdatei für die Webanwendung mithilfe des `applicationName`-Attributs deklarativ festgelegt werden.

 Wenn für das `applicationName`-Attribut in der Konfigurationsdatei für die Webanwendung kein Wert angegeben wird, wird der <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType>-Eigenschafts Wert für das aktuelle <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType>-Objekt verwendet.

> [!CAUTION]
>  Da eine einzelne Standardrollen Anbieter-Instanz für alle Anforderungen verwendet wird, die von einem <xref:System.Web.HttpApplication>-Objekt bereitgestellt werden, können mehrere Anforderungen gleichzeitig ausgeführt werden, und es wird versucht, den <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>-Eigenschafts Wert festzulegen. Die <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>-Eigenschaft ist für mehrere Schreibvorgänge nicht Thread sicher, und eine Änderung des <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>-Eigenschafts Werts kann zu unerwartetem Verhalten bei mehreren Benutzern einer Anwendung führen. Es wird empfohlen, dass Sie das Schreiben von Code vermeiden, mit dem Benutzer die <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>-Eigenschaft festlegen können, sofern dies nicht erforderlich ist. Ein Beispiel für eine Anwendung, in der die <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> Eigenschaft festgelegt werden kann, ist eine administrative Anwendung, die Rollen Daten für mehrere Anwendungen verwaltet. Eine solche Anwendung sollte eine Einzelbenutzer Anwendung und keine Webanwendung sein.



## Examples
 Im folgenden Beispiel wird das-Element im-`system.web` Abschnitt der Datei Web. config für eine ASP.NET-Anwendung gezeigt. Sie gibt die <xref:System.Web.Security.SqlRoleProvider> Instanz der Anwendung an und legt die <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>-Eigenschaft auf `MyApplication`fest.

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Ein Aufrufer, der nicht über die Berechtigung <see cref="P:System.Web.Security.SqlRoleProvider.ApplicationName" /> zum Hosten von ASP.NET verfügt, hat versucht, die <see cref="F:System.Web.AspNetHostingPermissionLevel.High" />-Eigenschaft festzulegen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><see cref="P:System.Web.Security.SqlRoleProvider.ApplicationName" /> wurde auf eine Zeichenfolge festzulegen versucht, die länger als 256 Zeichen ist.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public override void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.CreateRole : string -&gt; unit" Usage="sqlRoleProvider.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der zu erstellenden Rolle.</param>
        <summary>Fügt der Rollendatenbank eine neue Rolle hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.Security.SqlRoleProvider.CreateRole%2A>-Methode wird von der <xref:System.Web.Security.Roles>-Klasse aufgerufen, um eine Rolle in der SQL Server Datenbank zu erstellen, die in der Konfigurationsdatei der ASP.NET-Anwendung (Web. config) angegeben ist.

 Die maximale Länge für den Rollennamen beträgt 256 Zeichen. Bei Rollennamen wird Groß-/Kleinschreibung nicht beachtet. Kommas sind in Rollennamen nicht zulässig.



## Examples
 Im folgenden Codebeispiel wird eine neue Rolle in der-Datenbank erstellt. Ein Beispiel für eine Web. config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.

> [!IMPORTANT]
>  Dieses Beispiel enthält ein Textfeld, das Benutzereingaben akzeptiert. Dies ist eine potenzielle Sicherheitsbedrohung. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.

Oder

 <paramref name="roleName" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> ist bereits in der Datenbank vorhanden.

Oder

Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="override this.DeleteRole : string * bool -&gt; bool" Usage="sqlRoleProvider.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der zu löschenden Rolle.</param>
        <param name="throwOnPopulatedRole">Wenn der Wert <see langword="true" /> ist und <paramref name="roleName" /> über einen oder mehrere Mitglieder verfügt, wird eine Ausnahme ausgelöst.</param>
        <summary>Entfernt eine Rolle aus der Rollendatenbank.</summary>
        <returns><see langword="true" />, wenn die Rolle erfolgreich gelöscht wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.Security.SqlRoleProvider.DeleteRole%2A>-Methode wird von der <xref:System.Web.Security.Roles>-Klasse aufgerufen, um eine Rolle aus der SQL Server Datenbank zu löschen, die in der Konfigurationsdatei der ASP.NET-Anwendung (Web. config) angegeben ist. Wenn eine Rolle gelöscht wird, wird auch die Liste der Benutzer, die dieser Rolle zugeordnet sind, aus der Datenbank gelöscht. Die Benutzerinformationen in der Datenbank sind nicht betroffen.

 Wenn `throwOnPopulatedRole` `true`ist, wird eine Ausnahme ausgelöst, und die Rolle wird nicht gelöscht, wenn die durch den `roleName`-Parameter identifizierte Rolle mindestens ein Element enthält. Wenn `throwOnPopulatedRole` `false`ist, wird die Rolle gelöscht, unabhängig davon, ob Sie leer ist.



## Examples
 Im folgenden Beispiel wird eine Rolle aus der Datenbank gelöscht. Ein Beispiel für eine Web. config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.

Oder

 <paramref name="roleName" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> verfügt über mindestens ein Mitglied, und <paramref name="throwOnPopulatedRole" /> ist <see langword="true" />.

Oder

Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="override this.FindUsersInRole : string * string -&gt; string[]" Usage="sqlRoleProvider.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Die Rolle, in der gesucht werden soll.</param>
        <param name="usernameToMatch">Der zu suchende Benutzername.</param>
        <summary>Ruft ein Array von Benutzernamen in einer Rolle ab, die mit den angegebenen Benutzernamen übereinstimmen.</summary>
        <returns>Ein Zeichenfolgenarray, das die Namen aller Benutzer enthält, deren Benutzername mit <paramref name="usernameToMatch" /> übereinstimmt und die Mitglied der angegebenen Rolle sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.Security.SqlRoleProvider.FindUsersInRole%2A>-Methode wird von der <xref:System.Web.Security.Roles>-Klasse aufgerufen und gibt eine Liste von Benutzern in einer Rolle zurück, bei der der Benutzername eine Entsprechung des angegebenen `usernameToMatch` für den konfigurierten `applicationName`enthält. Der <xref:System.Web.Security.SqlRoleProvider> sucht mithilfe des like-Schlüssel Worts nach einem Benutzernamen, der mit dem `usernameToMatch` Parameterwert übereinstimmt und SQL Server Platzhalter Zeichen unterstützt. Wenn der `usernameToMatch`-Parameter z. b. auf "user1" festgelegt ist, werden Mitgliedschafts Informationen für den Benutzer mit dem Benutzernamen "user1" zurückgegeben, sofern vorhanden. Wenn der `usernameToMatch`-Parameter auf "User%" festgelegt ist, werden Mitgliedschafts Informationen für Benutzer mit dem Benutzernamen "user1", "user2", "User_admin" usw. zurückgegeben.



## Examples
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.FindUsersInRole%2A>-Methode verwendet, um die Rollen Mitgliedschaft auf der Grundlage von Benutzereingaben anzuzeigen. Ein Beispiel für eine Web. config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.Roles>.

> [!IMPORTANT]
>  Dieses Beispiel enthält ein Textfeld, das Benutzereingaben akzeptiert. Dies ist eine potenzielle Sicherheitsbedrohung. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).

Oder

 <paramref name="usernameToMatch" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.

Oder

 <paramref name="usernameToMatch" /> ist eine leere Zeichenfolge.

Oder

 <paramref name="roleName" /> ist länger als 256 Zeichen.

Oder

 <paramref name="usernameToMatch" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> wurde in der Datenbank nicht gefunden.

Oder

Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public override string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="override this.GetAllRoles : unit -&gt; string[]" Usage="sqlRoleProvider.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine Liste aller Rollen für die Anwendung ab.</summary>
        <returns>Ein Zeichenfolgenarray, das die Namen aller für eine bestimmte Anwendung in der Datenbank gespeicherten Rollen enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.Security.SqlRoleProvider.GetAllRoles%2A>-Methode wird von der <xref:System.Web.Security.Roles>-Klasse aufgerufen, um eine Liste aller Rollen in der SQL Server Datenbank abzurufen, die in der Konfigurationsdatei der ASP.NET-Anwendung (Web. config) angegeben ist.



## Examples
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetAllRoles%2A>-Methode verwendet, um die Liste der Rollen für eine Anwendung zu erhalten und die Ergebnisse an ein <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> Steuerelement zu binden. Ein Beispiel für eine Web. config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.

> [!IMPORTANT]
>  Dieses Beispiel enthält ein Textfeld, das Benutzereingaben akzeptiert. Dies ist eine potenzielle Sicherheitsbedrohung. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public override string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="override this.GetRolesForUser : string -&gt; string[]" Usage="sqlRoleProvider.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Der Benutzer, für den eine Liste der Rollen zurückgegeben werden soll.</param>
        <summary>Ruft eine Liste der Rollen ab, die ein Benutzer innehat.</summary>
        <returns>Ein Zeichenfolgenarray, das die Namen aller Rollen des angegebenen Benutzers enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.Security.SqlRoleProvider.GetRolesForUser%2A>-Methode wird von der <xref:System.Web.Security.Roles>-Klasse aufgerufen, um eine Liste der Rollen eines angegebenen Benutzers aus der in der Konfigurationsdatei der ASP.NET-Anwendung (Web. config) angegebenen SQL Server Datenbank abzurufen.



## Examples
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetRolesForUser%2A>-Methode verwendet, um eine Liste der Rollen für einen angegebenen Benutzer abzurufen und an ein <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> Steuerelement zu binden. Ein Beispiel für eine Web. config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> enthält ein Komma.

Oder

 <paramref name="username" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.GetUsersInRole : string -&gt; string[]" Usage="sqlRoleProvider.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der Rolle, für die die Liste der Benutzer abgerufen werden soll.</param>
        <summary>Ruft eine Liste der Benutzer mit der angegebenen Rolle ab.</summary>
        <returns>Ein Zeichenfolgenarray mit den Namen aller Benutzer, die Mitglieder der angegebenen Rolle sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.Security.SqlRoleProvider.GetUsersInRole%2A>-Methode wird von der <xref:System.Web.Security.Roles>-Klasse aufgerufen, um die Liste der Benutzer abzurufen, die der angegebenen Rolle in der SQL Server Datenbank zugeordnet sind, die in der Konfigurationsdatei der ASP.NET-Anwendung (Web. config) angegeben ist.



## Examples
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.GetUsersInRole%2A>-Methode verwendet, um eine Liste der Benutzer in einer bestimmten Rolle zu erhalten und die Ergebnisse an ein <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> Steuerelement zu binden. Ein Beispiel für eine Web. config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.

Oder

 <paramref name="roleName" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="rolename" /> wurde in der Datenbank nicht gefunden.

Oder

Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="sqlRoleProvider.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu initialisierenden <see cref="T:System.Web.Security.SqlRoleProvider" />-Instanz.</param>
        <param name="config">Eine <see cref="T:System.Collections.Specialized.NameValueCollection" />, die die Namen und Werte der Konfigurationsoptionen für den Rollenanbieter enthält.</param>
        <summary>Initialisiert den SQL Server-Rollenanbieter mit den Eigenschaftswerten, die in der Konfigurationsdatei der ASP.NET-Anwendung angegeben sind. Diese Methode ist nicht für die direkte Verwendung im Code vorgesehen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Diese Methode initialisiert die <xref:System.Web.Security.SqlRoleProvider> mit den Eigenschafts Werten, die in der ASP.NET-Anwendungs Konfigurationsdatei (Web. config) angegeben sind, und ist nicht für die direkte Verwendung im Code vorgesehen.

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Die ASP.NET-Anwendung wird nicht auf der Vertrauensebene <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> oder höher ausgeführt.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="config" /> ist <see langword="null" /></exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Das <see langword="connectionStringName" />-Attribut ist leer oder in der Anwendungskonfigurationsdatei für diese <see cref="T:System.Web.Security.SqlRoleProvider" />-Instanz nicht vorhanden.

Oder

Das <see langword="applicationName" />-Attribut ist länger als 256 Zeichen.

Oder

Die Anwendungskonfigurationsdatei dieser <see cref="T:System.Web.Security.SqlRoleProvider" />-Instanz enthält ein unbekanntes Attribut.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public override bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.IsUserInRole : string * string -&gt; bool" Usage="sqlRoleProvider.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Der zu suchende Benutzername.</param>
        <param name="roleName">Die Rolle, in der gesucht werden soll.</param>
        <summary>Ruft einen Wert ab, der angibt, ob der angegebene Benutzer die angegebene Rolle innehat.</summary>
        <returns><see langword="true" />, wenn der angegebene Benutzername die angegebene Rolle innehat, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.Security.SqlRoleProvider.IsUserInRole%2A>-Methode wird von der <xref:System.Web.Security.Roles>-Klasse und der <xref:System.Security.Principal.IPrincipal.IsInRole%2A>-Methode der <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType>-Eigenschaft aufgerufen, um zu bestimmen, ob ein Benutzer einer Rolle in der SQL Server Datenbank zugeordnet ist, die in der Konfigurationsdatei der ASP.NET-Anwendung (Web. config) angegeben ist.



## Examples
 Im folgenden Codebeispiel wird Programm gesteuert überprüft, ob sich der angemeldete Benutzer in der-Administrator Rolle befindet, bevor der Benutzer Benutzer Rollen anzeigen kann. Ein Beispiel für eine Web. config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" />

Oder

 <paramref name="username" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.

Oder

 <paramref name="username" /> enthält ein Komma.

Oder

 <paramref name="roleName" /> ist länger als 256 Zeichen.

Oder

 <paramref name="username" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public override void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="sqlRoleProvider.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Ein Zeichenfolgenarray mit Benutzernamen, die aus den angegebenen Rollen entfernt werden sollen.</param>
        <param name="roleNames">Ein Zeichenfolgenarray mit Rollennamen, aus denen Benutzernamen entfernt werden sollen.</param>
        <summary>Entfernt die angegebenen Benutzernamen aus den angegebenen Rollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>-Methode wird von der <xref:System.Web.Security.Roles>-Klasse aufgerufen, um einen oder mehrere Benutzer aus einer oder mehreren Rollen in der SQL Server Datenbank zu entfernen, die in der Konfigurationsdatei der ASP.NET-Anwendung (Web. config) angegeben ist. Diese Methode wird von den Methoden <xref:System.Web.Security.Roles.RemoveUserFromRole%2A>, <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>, <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>und <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> der <xref:System.Web.Security.Roles>-Klasse aufgerufen.

 Die Datenbankupdates, die während des Aufrufes <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> ausgeführt werden, erfolgen innerhalb einer Transaktion. Wenn ein Fehler auftritt, z. b. ein Benutzername, der nicht vorhanden ist, oder ein Benutzername, der sich bereits in einer angegebenen Rolle befindet, wird ein Rollback für die Transaktion ausgeführt, und es werden keine Updates ausgeführt.

 Benutzernamen und Rollennamen dürfen keine Kommas enthalten.



## Examples
 Im folgenden Codebeispiel wird einem oder mehreren Benutzern eine Rolle hinzugefügt oder ein Benutzer aus einer Rolle entfernt. Ein Beispiel für eine Web. config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Eine der Rollen in <paramref name="roleNames" /> ist <see langword="null" />.

Oder

Einer der Benutzer in <paramref name="usernames" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Eine der Rollen in <paramref name="roleNames" /> ist eine leere Zeichenfolge oder enthält ein Komma.

Oder

Einer der Benutzer in <paramref name="usernames" /> ist eine leere Zeichenfolge oder enthält ein Komma.

Oder

Eine der Rollen in <paramref name="roleNames" /> ist länger als 256 Zeichen.

Oder

Einer der Benutzer in <paramref name="usernames" /> ist länger als 256 Zeichen.

Oder

 <paramref name="roleNames" /> enthält ein doppeltes Element.

Oder

 <paramref name="usernames" /> enthält ein doppeltes Element.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Mindestens einer der angegebenen Benutzernamen wurde nicht gefunden.

 Oder

 Mindestens einer der angegebenen Rollennamen wurde nicht gefunden.

 Oder

 Mindestens einer der angegebenen Benutzernamen ist einem oder mehreren der angegebenen Rollennamen nicht zugeordnet.

 Oder

 Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public override bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.RoleExists : string -&gt; bool" Usage="sqlRoleProvider.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Der Name der Rolle, die in der Datenbank gesucht werden soll.</param>
        <summary>Ruft einen Wert ab, der angibt, ob der angegebene Rollenname bereits in der Rollendatenbank vorhanden ist.</summary>
        <returns><see langword="true" />, wenn der Rollenname bereits in der Datenbank vorhanden ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.Security.SqlRoleProvider.RoleExists%2A>-Methode wird von der <xref:System.Web.Security.Roles>-Klasse aufgerufen, um zu bestimmen, ob ein Rollenname in der SQL Server Datenbank vorhanden ist, die in der Konfigurationsdatei der ASP.NET-Anwendung (Web. config) angegeben ist.



## Examples
 Im folgenden Codebeispiel wird die <xref:System.Web.Security.Roles.RoleExists%2A>-Methode verwendet, um zu bestimmen, ob bereits ein Rollenname vorhanden ist, bevor die Rolle erstellt wird. Ein Beispiel für eine Web. config-Datei, die die Rollen Verwaltung ermöglicht, finden Sie unter <xref:System.Web.Security.SqlRoleProvider>.

> [!IMPORTANT]
>  Dieses Beispiel enthält ein Textfeld, das Benutzereingaben akzeptiert. Dies ist eine potenzielle Sicherheitsbedrohung. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> ist eine leere Zeichenfolge oder enthält ein Komma.

Oder

 <paramref name="roleName" /> ist länger als 256 Zeichen.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">Während der Kommunikation mit der Datenbank ist ein unbekannter Fehler aufgetreten.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">Grundlegendes zur Rollen Verwaltung ASP.net</related>
      </Docs>
    </Member>
  </Members>
</Type>

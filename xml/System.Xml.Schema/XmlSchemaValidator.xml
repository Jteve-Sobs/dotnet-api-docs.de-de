<Type Name="XmlSchemaValidator" FullName="System.Xml.Schema.XmlSchemaValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="593dcfff13b2f3c4579da94de3116830777dc050" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30721114" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlSchemaValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlSchemaValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaValidator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlSchemaValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaValidator sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt ein XSD-Schema-Validierungsmodul (XML Schema Definition Language) dar. Die <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Klasse kann nicht geerbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  -   Verwenden Sie keine Schemata aus unbekannten oder nicht vertrauenswürdigen Quellen oder Speicherorte. Auf diese Weise gefährdet die Sicherheit des Codes.  
> -   XML-Schemas (auch Inlineschemas) sind von Natur aus anfällig für DOS-Angriffe. Akzeptieren Sie diese nicht in nicht vertrauenswürdigen Szenarien.  
> -   Schema-Validation-Fehlermeldungen und Ausnahmen möglicherweise vertrauliche Informationen zu den Inhaltsmodell oder die Pfade der URI der Schemadatei verfügbar machen. Achten Sie darauf, dass Sie nicht diese Informationen nicht vertrauenswürdige Aufrufer verfügbar zu machen.  
  
 Die <xref:System.Xml.Schema.XmlSchemaValidator>-Klasse stellt eine effiziente leistungsstarke Methode zum Validieren von XML-Daten anhand von XML-Schemata in einem Push-Verfahren bereit. Zum Beispiel ermöglicht Ihnen die <xref:System.Xml.Schema.XmlSchemaValidator>-Klasse das direkte Validieren eines XML-Infosets, ohne es als XML-Dokument serialisieren zu müssen, und das anschließende erneute Analysieren des XML-Infosets mithilfe eines validierenden XML-Readers. Die <xref:System.Xml.Schema.XmlSchemaValidator> Klasse kann auch verwendet werden, um das Erstellen von Validierungsmodulen für benutzerdefinierte XML-Datenquellen oder als eine Möglichkeit zum Erstellen eines validierenden XML-Writers.  
  
 Weitere Informationen zu den <xref:System.Xml.Schema.XmlSchemaValidator> Klasse, finden Sie unter der [XmlSchemaValidator pushbasierte Validierung](~/docs/standard/data/xml/xmlschemavalidator-push-based-validation.md) Thema.  
  
> [!IMPORTANT]
>  Die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> und <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> Validierungsflag eines ein <xref:System.Xml.Schema.XmlSchemaValidator> Objekt sind nicht standardmäßig sein. Darüber hinaus die <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> Eigenschaft ein <xref:System.Xml.Schema.XmlSchemaValidator> Objekt `null` standardmäßig. Daher werden enthalten externe Schemata in verwiesen wird, Importe oder Redefine Elemente nicht standardmäßig aufgelöst.  
  
   
  
## Examples  
 Das folgende Beispiel überprüft die `contosoBooks.xml` -Datei anhand der `contosoBooks.xsd` Schema. Im Beispiel wird mit der <xref:System.Xml.Serialization.XmlSerializer>-Klasse die `contosoBooks.xml`-Datei deserialisiert, und der Wert der Knoten wird an die Methoden der <xref:System.Xml.Schema.XmlSchemaValidator>-Klasse übergeben.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 In diesem Beispiel wird die Datei `contosoBooks.xml` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 In diesem Beispiel wird auch `contosoBooks.xsd` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaValidator (System.Xml.XmlNameTable nameTable, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.IXmlNamespaceResolver namespaceResolver, System.Xml.Schema.XmlSchemaValidationFlags validationFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.IXmlNamespaceResolver namespaceResolver, valuetype System.Xml.Schema.XmlSchemaValidationFlags validationFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable, schemas As XmlSchemaSet, namespaceResolver As IXmlNamespaceResolver, validationFlags As XmlSchemaValidationFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaValidator(System::Xml::XmlNameTable ^ nameTable, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::IXmlNamespaceResolver ^ namespaceResolver, System::Xml::Schema::XmlSchemaValidationFlags validationFlags);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
        <Parameter Name="validationFlags" Type="System.Xml.Schema.XmlSchemaValidationFlags" />
      </Parameters>
      <Docs>
        <param name="nameTable">Ein <see cref="T:System.Xml.XmlNameTable" />-Objekt, das Element- und Attributnamen als atomisierte Zeichenfolgen enthält.</param>
        <param name="schemas">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />-Objekt, das die für die Validierung verwendeten XSD-Schemas (XML Schema Definition Language) enthält.</param>
        <param name="namespaceResolver">Ein <see cref="T:System.Xml.IXmlNamespaceResolver" />-Objekt mit dem Namespaces aufgelöst werden, die während der Validierung gefunden werden.</param>
        <param name="validationFlags">Ein <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />-Wert, der Schemavalidierungsoptionen angibt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> Konstruktor.  
  
-   Den Inhalt des der <xref:System.Xml.Schema.XmlSchemaSet> Parameter werden in eine interne kopiert <xref:System.Xml.Schema.XmlSchemaSet> Objekt bei der <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> oder <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> Überprüfungsoptionen festgelegt sind. Daher ändert sich in der Eingabe <xref:System.Xml.Schema.XmlSchemaSet> Objekts während der Validierung wirken sich nicht auf das Ergebnis der Überprüfung.  
  
-   Wenn die <xref:System.Xml.Schema.XmlSchemaSet> angegebene Parameter wird nicht kompiliert, die <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> -Methode aufgerufen wird.  
  
-   Die <xref:System.Xml.IXmlNamespaceResolver> Parameter ist besonders wichtig für die Validierung `xs:QName` Typen. Die <xref:System.Xml.Schema.XmlSchemaValidator> Klasse kopiert keine in-Scope Namespaces aus der <xref:System.Xml.IXmlNamespaceResolver> Objekt, sondern einen Verweis darauf enthält. Dadurch können neue Namespaces hinzugefügt werden die <xref:System.Xml.IXmlNamespaceResolver> Objekt während des Überprüfungsprozesses.  
  
> [!IMPORTANT]
>  Die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> und <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> Validierungsflag eines ein <xref:System.Xml.Schema.XmlSchemaValidator> Objekt sind nicht standardmäßig sein. Darüber hinaus die <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> Eigenschaft ein <xref:System.Xml.Schema.XmlSchemaValidator> Objekt `null` standardmäßig. Daher werden enthalten externe Schemata in verwiesen wird, Importe oder Redefine Elemente nicht standardmäßig aufgelöst.  
  
   
  
## Examples  
 Ein Beispiel für die <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> Konstruktor finden Sie unter der <xref:System.Xml.Schema.XmlSchemaValidator> Referenzthema-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Mindestens einer der angegebenen Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Während des Kompilierens von Schemas im <see cref="T:System.Xml.Schema.XmlSchemaSet" />-Parameter ist ein Fehler aufgetreten.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaSet" />
        <altmember cref="T:System.Xml.IXmlNamespaceResolver" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="AddSchema">
      <MemberSignature Language="C#" Value="public void AddSchema (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSchema(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddSchema (schema As XmlSchema)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSchema(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Ein <see cref="T:System.Xml.Schema.XmlSchema" />-Objekt, das den für die Validierung verwendeten Schemas hinzugefügt werden soll.</param>
        <summary>Fügt den für die Validierung verwendeten Schemas ein XSD-Schema (XML Schema Definition Language) hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> Methode.  
  
-   Die <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> Methode kann verwendet werden, um die Auswirkungen des Findens eines XML-Inlineschemas in das XML-Dokument validiert zu simulieren.  
  
-   Der Zielnamespace des <xref:System.Xml.Schema.XmlSchema>-Parameters darf nicht mit dem Namespace eines der Elemente oder Attribute übereinstimmen, die bereits vom <xref:System.Xml.Schema.XmlSchemaValidator>-Objekt gefunden wurden.  
  
-   Wenn die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> -Validierungsoption nicht festgelegt ist, die <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> Methode hat keine Funktion.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der angegebene <see cref="T:System.Xml.Schema.XmlSchema" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Der Zielnamespace des <see cref="T:System.Xml.Schema.XmlSchema" />-Parameters stimmt mit dem aller Elemente oder Attribute überein, die vom <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Objekt bereits gefunden wurden.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Der <see cref="T:System.Xml.Schema.XmlSchema" />-Parameter ist ungültig.</exception>
        <altmember cref="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
        <altmember cref="T:System.Xml.Schema.XmlSchema" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="EndValidation">
      <MemberSignature Language="C#" Value="public void EndValidation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndValidation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndValidation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndValidation();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet die Validierung und überprüft die Identitätseinschränkungen für das gesamte XML-Dokument.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A> -Methode beendet die Validierung und überprüft identitätseinschränkungen für das gesamte XML-Dokument an, ob die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> -Validierungsoption festgelegt ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Ein Identitätseinschränkungsfehler wurde im XML-Dokument gefunden.</exception>
        <altmember cref="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="GetExpectedAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpectedAttributes () As XmlSchemaAttribute()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Xml::Schema::XmlSchemaAttribute ^&gt; ^ GetExpectedAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaAttribute[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die erwarteten Attribute für den Kontext des aktuellen Elements zurück.</summary>
        <returns>Ein Array von <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />-Objekten oder ein leeres Array, wenn keine erwarteten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> Methode.  
  
-   Wenn die <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> Methode wird aufgerufen, unmittelbar nach der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> -Methode, alle Attribute, die im XML-Dokument erscheinen konnte werden zurückgegeben.  
  
-   Wenn die <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> Methode wird aufgerufen, nachdem eine oder mehrere Aufrufe an die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> -Methode, die Attribute, die für das aktuelle Element noch nicht validiert wurden zurückgegeben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpectedParticles">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpectedParticles () As XmlSchemaParticle()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Xml::Schema::XmlSchemaParticle ^&gt; ^ GetExpectedParticles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaParticle[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die erwarteten Partikel im Kontext des aktuellen Elements zurück.</summary>
        <returns>Ein Array von <see cref="T:System.Xml.Schema.XmlSchemaParticle" />-Objekten oder ein leeres Array, wenn keine erwarteten Partikel vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die gültigen Partikel, die von der <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A>-Methode zurückgegeben werden können, sind Instanzen der <xref:System.Xml.Schema.XmlSchemaElement>-Klasse und der <xref:System.Xml.Schema.XmlSchemaAny>-Klasse.  
  
 Wenn der Compositor für das Inhaltsmodell eine `xs:sequence` ist, wird nur der nächste Partikel in der Abfolge zurückgegeben. Wenn der Compositor für das Inhaltsmodell `xs:all` oder `xs:choice` ist, werden alle gültigen Partikel zurückgegeben, die im aktuellen Elementkontext folgen können.  
  
 Im folgenden XSD-Schema (XML Schema Definition Language) und XML-Dokument entspricht z. B. nach dem Validieren des `book`-Elements das `book`-Element dem aktuellen Elementkontext. Die <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A>-Methode gibt ein Array mit einem einzelnen <xref:System.Xml.Schema.XmlSchemaElement>-Objekt zurück, das das `title`-Element darstellt. Wenn der Validierungskontext dem `title`-Element entspricht, gibt die <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A>-Methode ein leeres Array zurück. Wenn die <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A>-Methode aufgerufen wird, nachdem das `title`-Element validiert wurde und bevor das `description`-Element validiert wurde, gibt sie ein Array mit einem einzelnen <xref:System.Xml.Schema.XmlSchemaElement>-Objekt zurück, das das `description`-Element darstellt. Wenn die <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A>-Methode aufgerufen wird, nachdem das `description`-Element validiert wurde, gibt sie ein Array mit einem einzelnen <xref:System.Xml.Schema.XmlSchemaAny>-Objekt zurück, das den Platzhalter darstellt.  
  
```vb  
Dim reader As XmlReader =  XmlReader.Create("input.xml")   
  
Dim schemaSet As XmlSchemaSet =  New XmlSchemaSet()   
schemaSet.Add(Nothing, "schema.xsd")  
Dim manager As XmlNamespaceManager =  New XmlNamespaceManager(reader.NameTable)   
  
Dim validator As XmlSchemaValidator =  New XmlSchemaValidator(reader.NameTable,schemaSet,manager,XmlSchemaValidationFlags.None)  
validator.Initialize()  
  
validator.ValidateElement("book", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
  
validator.ValidateElement("title", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
validator.ValidateEndElement(Nothing)  
  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
  
validator.ValidateElement("description", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateEndElement(Nothing)  
  
For Each particle As XmlSchemaParticle In validator.GetExpectedParticles()  
    Console.WriteLine(particle.GetType())  
Next  
  
validator.ValidateElement("namespace", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateEndElement(Nothing)  
  
validator.ValidateEndElement(Nothing)  
```  
  
```csharp  
XmlReader reader = XmlReader.Create("input.xml");  
  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "schema.xsd");  
XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);  
  
XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);  
validator.Initialize();  
  
validator.ValidateElement("book", "", null);  
  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
  
validator.ValidateElement("title", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
validator.ValidateEndElement(null);  
  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
  
validator.ValidateElement("description", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateEndElement(null);  
  
foreach (XmlSchemaParticle particle in validator.GetExpectedParticles())  
{  
    Console.WriteLine(particle.GetType());  
}  
  
validator.ValidateElement("namespace", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateEndElement(null);  
  
validator.ValidateEndElement(null);  
```  
  
 In diesem Beispiel wird der folgende XML-Code als Eingabe verwendet.  
  
 `<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">`  
  
 `<xs:element name="book">`  
  
 `<xs:complexType>`  
  
 `<xs:sequence>`  
  
 `<xs:element name="title" type="xs:string" />`  
  
 `<xs:element name="description" type="xs:string" />`  
  
 `<xs:any processContents ="lax"/>`  
  
 `</xs:sequence>`  
  
 `</xs:complexType>`  
  
 `</xs:element>`  
  
 `</xs:schema>`  
  
 In diesem Beispiel wird das folgende XSD-Schema als Eingabe verwendet.  
  
 `<book>`  
  
 `<title>My Book</title>`  
  
 `<description>My Book's Description</description>`  
  
 `<namespace>System.Xml.Schema</namespace>`  
  
 `</book>`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaParticle" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaElement" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAny" />
      </Docs>
    </Member>
    <Member MemberName="GetUnspecifiedDefaultAttributes">
      <MemberSignature Language="C#" Value="public void GetUnspecifiedDefaultAttributes (System.Collections.ArrayList defaultAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetUnspecifiedDefaultAttributes(class System.Collections.ArrayList defaultAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetUnspecifiedDefaultAttributes (defaultAttributes As ArrayList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetUnspecifiedDefaultAttributes(System::Collections::ArrayList ^ defaultAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultAttributes" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="defaultAttributes">Eine <see cref="T:System.Collections.ArrayList" />, die mit <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />-Objekten für die Attribute gefüllt werden soll, die während der Validierung im Elementkontext noch nicht gefunden wurden.</param>
        <summary>Validiert Identitätseinschränkungen bei den Standardattributen und füllt die <see cref="T:System.Collections.ArrayList" />, die mit <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />-Objekten für Attribute mit Standardwerten angegeben ist, die noch nicht mithilfe der <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />-Methode im Elementkontext validiert wurden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> Methode muss aufgerufen werden, nachdem alle Attribute für das aktuelle Element mit überprüft die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> Methode. Mit der <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A>-Methode muss bestimmt werden, welche Standardattribute in das XML-Dokument eingefügt werden sollen, das validiert wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ArrayList" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Initialize">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert den Zustand des <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Objekts.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert den Zustand des <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Objekts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> Methode ist nur gültig, wenn Sie aufgerufen, unmittelbar nach der Erstellung einer <xref:System.Xml.Schema.XmlSchemaValidator> Objekt oder nach einem Aufruf von <xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel überprüft die `contosoBooks.xml` -Datei anhand der `contosoBooks.xsd` Schema. Im Beispiel wird mit der <xref:System.Xml.Serialization.XmlSerializer>-Klasse die `contosoBooks.xml`-Datei deserialisiert, und der Wert der Knoten wird an die Methoden der <xref:System.Xml.Schema.XmlSchemaValidator>-Klasse übergeben.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 In diesem Beispiel wird die Datei `contosoBooks.xml` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 In diesem Beispiel wird auch `contosoBooks.xsd` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Aufrufen der <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" />-Methode ist nur sofort nach dem Erstellen eines <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Objekts oder nach einem Aufruf von <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> gültig.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (System.Xml.Schema.XmlSchemaObject partialValidationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize(class System.Xml.Schema.XmlSchemaObject partialValidationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (partialValidationType As XmlSchemaObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize(System::Xml::Schema::XmlSchemaObject ^ partialValidationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
      </Parameters>
      <Docs>
        <param name="partialValidationType">Ein Objekt vom Typ <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> oder <see cref="T:System.Xml.Schema.XmlSchemaType" />, mit dessen Hilfe der Validierungskontext des <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Objekts für die teilweise Validierung initialisiert wird.</param>
        <summary>Initialisiert den Zustand des <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Objekts mit dem für die teilweise Validierung angegebenen <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A>-Methode, die ein <xref:System.Xml.Schema.XmlSchemaObject> als Parameter annimmt, initialisiert ein <xref:System.Xml.Schema.XmlSchemaValidator>-Objekt mit dessen anfänglichem Zustand zur teilweisen Validierung.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Xml.Schema.XmlSchemaObject> mithilfe der <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A>-Methode zur teilweisen Validierung initialisiert. Das `orderNumber`-Schemaelement wird durch Auswählen des Schemaelements durch <xref:System.Xml.XmlQualifiedName> in der <xref:System.Xml.Schema.XmlSchemaObjectTable>-Auflistung übergeben, die von der <xref:System.Xml.Schema.XmlSchemaSet.GlobalElements%2A>-Eigenschaft des <xref:System.Xml.Schema.XmlSchemaSet>-Objekts zurückgegeben wurde. Das <xref:System.Xml.Schema.XmlSchemaValidator>-Objekt validiert dann dieses bestimmte Element.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "schema.xsd")  
schemaSet.Compile()  
Dim nameTable As NameTable = New NameTable()  
Dim manager As XmlNamespaceManager = New XmlNamespaceManager(nameTable)  
  
Dim validator As XmlSchemaValidator = New XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None)  
validator.Initialize(schemaSet.GlobalElements.Item(New XmlQualifiedName("orderNumber")))  
  
validator.ValidateElement("orderNumber", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateText("123")  
validator.ValidateEndElement(Nothing)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "schema.xsd");  
schemaSet.Compile();  
NameTable nameTable = new NameTable();  
XmlNamespaceManager manager = new XmlNamespaceManager(nameTable);  
  
XmlSchemaValidator validator = new XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None);  
validator.Initialize(schemaSet.GlobalElements[new XmlQualifiedName("orderNumber")]);  
  
validator.ValidateElement("orderNumber", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateText("123");  
validator.ValidateEndElement(null);  
```  
  
 In diesem Beispiel wird das folgende XML-Schema als Eingabe verwendet.  
  
 `<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">`  
  
 `<xs:element name="orderNumber" type="xs:int" />`  
  
 `</xs:schema>`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Aufrufen der <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" />-Methode ist nur sofort nach dem Erstellen eines <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Objekts oder nach einem Aufruf von <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> gültig.</exception>
        <exception cref="T:System.ArgumentException">Der <see cref="T:System.Xml.Schema.XmlSchemaObject" />-Parameter ist kein Objekt vom Typ <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> oder <see cref="T:System.Xml.Schema.XmlSchemaType" />.</exception>
        <exception cref="T:System.ArgumentNullException">Der <see cref="T:System.Xml.Schema.XmlSchemaObject" />-Parameter darf nicht <see langword="null" /> sein.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaObject" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaElement" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaType" />
      </Docs>
    </Member>
    <Member MemberName="LineInfoProvider">
      <MemberSignature Language="C#" Value="public System.Xml.IXmlLineInfo LineInfoProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.IXmlLineInfo LineInfoProvider" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property LineInfoProvider As IXmlLineInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::IXmlLineInfo ^ LineInfoProvider { System::Xml::IXmlLineInfo ^ get(); void set(System::Xml::IXmlLineInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.IXmlLineInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeilennummerninformationen für den derzeit validierten XML-Knoten ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Xml.IXmlLineInfo" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   Zeileninformationen wird von gemeldet <xref:System.Xml.Schema.XmlSchemaValidationException> während der Überprüfung ausgelöst.  
  
-   Die Standardeinstellung <xref:System.Xml.IXmlLineInfo> zurückgegebenes Objekt die <xref:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider%2A> Eigenschaft gibt 0 für die <xref:System.Xml.IXmlLineInfo.LineNumber%2A> und <xref:System.Xml.IXmlLineInfo.LinePosition%2A> Eigenschaften.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.IXmlLineInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <Member MemberName="SkipToEndElement">
      <MemberSignature Language="C#" Value="public void SkipToEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToEndElement (schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">Ein <see cref="T:System.Xml.Schema.XmlSchemaInfo" />-Objekt, dessen Eigenschaften festgelegt werden, wenn der Inhalt des aktuellen Elements erfolgreich übersprungen wird. Dieser Parameter kann <see langword="null" /> sein.</param>
        <summary>Überspringt die Validierung des aktuellen Elementinhalts und bereitet das <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Objekt zum Validieren des Inhalts im Kontext des übergeordneten Elements vor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A> Methode.  
  
-   Die <xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A> -Methode überspringt die Validierung des aktuellen Elementinhalts und bereitet die <xref:System.Xml.Schema.XmlSchemaValidator> -Objekt zum Validieren des Inhalts im Kontext des übergeordneten Elements; Dies entspricht dem Überspringen der Validierung aller untergeordneten Elemente des aktuellen Elements und dann Aufrufen der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> Methode.  
  
-   Wenn der Inhalt des aktuellen Elements erfolgreich übersprungen wird, die <xref:System.Xml.Schema.XmlSchemaInfo> des Objekts (falls angegeben) <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> -Eigenschaftensatz auf <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>.  
  
> [!NOTE]
>  Für übersprungene Inhalte werden keine Validierungsfehler gemeldet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen. Beispiel: <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> wird nach <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> aufgerufen.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="SourceUri">
      <MemberSignature Language="C#" Value="public Uri SourceUri { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri SourceUri" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.SourceUri" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ SourceUri { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Quell-URI für den derzeit validierten XML-Knoten ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Uri" />-Objekt, das den Quell-URI für den derzeit validierten XML-Knoten darstellt. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   Der URI, von einer gemeldet wird Quelle <xref:System.Xml.Schema.XmlSchemaValidationException> während der Überprüfung ausgelöst.  
  
-   Wenn die <xref:System.Xml.Schema.XmlSchemaValidator.SourceUri%2A> Eigenschaft nicht festgelegt ist, wird der Dateiname für das XML-Dokument <xref:System.String.Empty> in Überprüfungsfehlermeldungen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Überprüft das Attribut im Kontext des aktuellen Elements.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateAttribute">
      <MemberSignature Language="C#" Value="public object ValidateAttribute (string localName, string namespaceUri, string attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateAttribute(string localName, string namespaceUri, string attributeValue, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateAttribute (localName As String, namespaceUri As String, attributeValue As String, schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateAttribute(System::String ^ localName, System::String ^ namespaceUri, System::String ^ attributeValue, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des zu validierenden Attributs.</param>
        <param name="namespaceUri">Der Namespace-URI des zu validierenden Attributs.</param>
        <param name="attributeValue">Der Wert des zu validierenden Attributs.</param>
        <param name="schemaInfo">Ein <see cref="T:System.Xml.Schema.XmlSchemaInfo" />-Objekt, dessen Eigenschaften nach der erfolgreichen Validierung des Attributs festgelegt werden. Dieser Parameter kann <see langword="null" /> sein.</param>
        <summary>Überprüft den Attributnamen, den Namespace-URI und den Wert im aktuellen Kontext des aktuellen Elements.</summary>
        <returns>Der Wert des validierten Attributs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> Methode.  
  
-   Die <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> Methode muss aufgerufen werden, nachdem alle Attribute für das aktuelle Element mit überprüft die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> Methode.  
  
-   Wenn ein <xref:System.Xml.Schema.XmlSchemaAttribute> wurde, übergeben die <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> -Methode, die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> Methode überprüft, ob das Attribut für die <xref:System.Xml.Schema.XmlSchemaAttribute> Objekt.  
  
-   Wenn das Attribut im aktuellen Elementkontext erfolgreich validiert wurden, ist die <xref:System.Xml.Schema.XmlSchemaInfo> des Objekts (falls angegeben) <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, und <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> Eigenschaften werden mit den Ergebnissen der Validierung festgelegt.  
  
   
  
## Examples  
 Das folgende Beispiel überprüft die `contosoBooks.xml` -Datei anhand der `contosoBooks.xsd` Schema. Im Beispiel wird mit der <xref:System.Xml.Serialization.XmlSerializer>-Klasse die `contosoBooks.xml`-Datei deserialisiert, und der Wert der Knoten wird an die Methoden der <xref:System.Xml.Schema.XmlSchemaValidator>-Klasse übergeben.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 In diesem Beispiel wird die Datei `contosoBooks.xml` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 In diesem Beispiel wird auch `contosoBooks.xsd` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Das Attribut ist im Kontext des aktuellen Elements nicht gültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen. Beispiel: <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> wird nach <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> aufgerufen.</exception>
        <exception cref="T:System.ArgumentNullException">Mindestens einer der angegebenen Parameter ist <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateAttribute">
      <MemberSignature Language="C#" Value="public object ValidateAttribute (string localName, string namespaceUri, System.Xml.Schema.XmlValueGetter attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateAttribute(string localName, string namespaceUri, class System.Xml.Schema.XmlValueGetter attributeValue, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateAttribute (localName As String, namespaceUri As String, attributeValue As XmlValueGetter, schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateAttribute(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlValueGetter ^ attributeValue, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.Xml.Schema.XmlValueGetter" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des zu validierenden Attributs.</param>
        <param name="namespaceUri">Der Namespace-URI des zu validierenden Attributs.</param>
        <param name="attributeValue">Ein <see cref="T:System.Xml.Schema.XmlValueGetter" />-<see langword="delegate" />, mit dem der Attributwert als CLR-Typ (Common Language Runtime) übergeben wird, der mit dem XSD-Typ (XML Schema Definition Language) des Attributs kompatibel ist.</param>
        <param name="schemaInfo">Ein <see cref="T:System.Xml.Schema.XmlSchemaInfo" />-Objekt, dessen Eigenschaften nach der erfolgreichen Validierung des Attributs festgelegt werden. Dieser Parameter kann <see langword="null" /> sein.</param>
        <summary>Überprüft den Attributnamen, den Namespace-URI und den Wert im aktuellen Kontext des aktuellen Elements.</summary>
        <returns>Der Wert des validierten Attributs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> Methode.  
  
-   Die <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> Methode muss aufgerufen werden, nachdem alle Attribute für das aktuelle Element mit überprüft die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> Methode.  
  
-   Wenn ein <xref:System.Xml.Schema.XmlSchemaAttribute> wurde, übergeben die <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> -Methode, die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> Methode überprüft, ob das Attribut für die <xref:System.Xml.Schema.XmlSchemaAttribute> Objekt.  
  
-   Wenn das Attribut im aktuellen Elementkontext erfolgreich validiert wurden, ist die <xref:System.Xml.Schema.XmlSchemaInfo> des Objekts (falls angegeben) <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, und <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> Eigenschaften werden mit den Ergebnissen der Validierung festgelegt.  
  
   
  
## Examples  
 Das folgende Beispiel überprüft die `contosoBooks.xml` -Datei anhand der `contosoBooks.xsd` Schema. Im Beispiel wird mit der <xref:System.Xml.Serialization.XmlSerializer>-Klasse die `contosoBooks.xml`-Datei deserialisiert, und der Wert der Knoten wird an die Methoden der <xref:System.Xml.Schema.XmlSchemaValidator>-Klasse übergeben.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 In diesem Beispiel wird die Datei `contosoBooks.xml` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 In diesem Beispiel wird auch `contosoBooks.xsd` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Das Attribut ist im Kontext des aktuellen Elements nicht gültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen. Beispiel: <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> wird nach <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> aufgerufen.</exception>
        <exception cref="T:System.ArgumentNullException">Mindestens einer der angegebenen Parameter ist <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Validiert das Element im aktuellen Kontext.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateElement">
      <MemberSignature Language="C#" Value="public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateElement(string localName, string namespaceUri, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateElement (localName As String, namespaceUri As String, schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateElement(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des zu validierenden Elements.</param>
        <param name="namespaceUri">Der Namespace-URI des zu validierenden Elements.</param>
        <param name="schemaInfo">Ein <see cref="T:System.Xml.Schema.XmlSchemaInfo" />-Objekt, dessen Eigenschaften nach erfolgreicher Validierung des Elementnamens festgelegt werden. Dieser Parameter kann <see langword="null" /> sein.</param>
        <summary>Validiert das Element im aktuellen Kontext.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> Methode.  
  
-   Wenn der Elementname im aktuellen Kontext erfolgreich validiert wurde die <xref:System.Xml.Schema.XmlSchemaInfo> des Objekts (falls angegeben) <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>, und <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> Eigenschaften werden mit den Ergebnissen der Validierung festgelegt.  
  
-   Wenn der Elementname oder eines seiner Attribute ungültig sind den aktuellen Kontext der <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> -Eigenschaftensatz auf <xref:System.Xml.Schema.XmlSchemaValidity.Invalid>andernfalls die <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> -Eigenschaftensatz auf <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>.  
  
   
  
## Examples  
 Das folgende Beispiel überprüft die `contosoBooks.xml` -Datei anhand der `contosoBooks.xsd` Schema. Im Beispiel wird mit der <xref:System.Xml.Serialization.XmlSerializer>-Klasse die `contosoBooks.xml`-Datei deserialisiert, und der Wert der Knoten wird an die Methoden der <xref:System.Xml.Schema.XmlSchemaValidator>-Klasse übergeben.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 In diesem Beispiel wird die Datei `contosoBooks.xml` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 In diesem Beispiel wird auch `contosoBooks.xsd` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Der Name des Elements ist im aktuellen Kontext nicht gültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen. Beispiel: Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />-Methode wird nach dem Aufruf von <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> aufgerufen.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <Member MemberName="ValidateElement">
      <MemberSignature Language="C#" Value="public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateElement(string localName, string namespaceUri, class System.Xml.Schema.XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateElement (localName As String, namespaceUri As String, schemaInfo As XmlSchemaInfo, xsiType As String, xsiNil As String, xsiSchemaLocation As String, xsiNoNamespaceSchemaLocation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateElement(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo, System::String ^ xsiType, System::String ^ xsiNil, System::String ^ xsiSchemaLocation, System::String ^ xsiNoNamespaceSchemaLocation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
        <Parameter Name="xsiType" Type="System.String" />
        <Parameter Name="xsiNil" Type="System.String" />
        <Parameter Name="xsiSchemaLocation" Type="System.String" />
        <Parameter Name="xsiNoNamespaceSchemaLocation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des zu validierenden Elements.</param>
        <param name="namespaceUri">Der Namespace-URI des zu validierenden Elements.</param>
        <param name="schemaInfo">Ein <see cref="T:System.Xml.Schema.XmlSchemaInfo" />-Objekt, dessen Eigenschaften nach erfolgreicher Validierung des Elementnamens festgelegt werden. Dieser Parameter kann <see langword="null" /> sein.</param>
        <param name="xsiType">Der <c>xsi:Type</c>-Attributwert des Elements. Dieser Parameter kann <see langword="null" /> sein.</param>
        <param name="xsiNil">Der <c>xsi:Nil</c>-Attributwert des Elements. Dieser Parameter kann <see langword="null" /> sein.</param>
        <param name="xsiSchemaLocation">Der <c>xsi:SchemaLocation</c>-Attributwert des Elements. Dieser Parameter kann <see langword="null" /> sein.</param>
        <param name="xsiNoNamespaceSchemaLocation">Der <c>xsi:NoNamespaceSchemaLocation</c>-Attributwert des Elements. Dieser Parameter kann <see langword="null" /> sein.</param>
        <summary>Validiert das Element im aktuellen Kontext mit den angegebenen Attributwerten <c>xsi: Type</c>, <c>xsi: Nil</c>, <c>xsi: SchemaLocation</c>, und <c>xsi: NoNamespaceSchemaLocation</c>.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> Methode.  
  
-   Wenn der Elementname im aktuellen Kontext erfolgreich validiert wurde die <xref:System.Xml.Schema.XmlSchemaInfo> des Objekts (falls angegeben) <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>, und <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> Eigenschaften werden mit den Ergebnissen der Validierung festgelegt.  
  
-   Wenn der Elementname oder eines seiner Attribute im aktuellen Kontext ungültig sind die <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> -Eigenschaftensatz auf <xref:System.Xml.Schema.XmlSchemaValidity.Invalid>andernfalls die <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> -Eigenschaftensatz auf <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>.  
  
-   Wenn die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> Wert wurde nicht übergeben, als Parameter an die <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> Konstruktor `xsi:SchemaLocation` und `xsi:NoNamespaceSchemaLocation` Attributwerte werden ignoriert.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Der Name des Elements ist im aktuellen Kontext nicht gültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen. Beispiel: Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />-Methode wird nach dem Aufruf von <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> aufgerufen.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEndElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Überprüft, ob der Textinhalt des Elements gemäß seinem Datentyp für Elemente mit einfachem Inhalt gültig ist, und überprüft darüber hinaus, ob der Inhalt des aktuellen Elements für Elemente mit komplexem Inhalt vollständig ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEndElement">
      <MemberSignature Language="C#" Value="public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateEndElement (schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">Ein <see cref="T:System.Xml.Schema.XmlSchemaInfo" />-Objekt, dessen Eigenschaften nach erfolgreicher Validierung des Elements festgelegt werden. Dieser Parameter kann <see langword="null" /> sein.</param>
        <summary>Überprüft, ob der Textinhalt des Elements gemäß seinem Datentyp für Elemente mit einfachem Inhalt gültig ist, und überprüft darüber hinaus, ob der Inhalt des aktuellen Elements für Elemente mit komplexem Inhalt vollständig ist.</summary>
        <returns>Der analysierte, typisierte Textwert des Elements, wenn das Element über einfachen Inhalt verfügt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> Methode.  
  
-   Für Elemente mit einfachem Inhalt der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> Methode überprüft, dass das Textinhalt des Elements gemäß seinem Datentyp gültig ist und den analysierten, typisierten Wert zurückgibt. Das Textinhalt des Elements abgerufen wird, aus den Ergebnissen der vorherigen Aufrufe von <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>.  
  
-   Für Elemente mit komplexem Inhalt der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> Methode überprüft, ob der Inhalt des aktuellen Elements abgeschlossen ist.  
  
-   Wenn das Element über einen Standardwert verfügt, wird der Wert zurückgegeben, aus der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> Methode ist der Standardwert für das Element.  
  
-   Wenn die <xref:System.Xml.Schema.XmlSchemaValidator> Objekt wurde erstellt, mit der <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> Wert als Parameter verwendet, die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> -Methode überprüft die Identity-Einschränkung Regeln (sofern vorhanden), die für das Element gelten.  
  
-   Wenn das Element im aktuellen Kontext erfolgreich validiert wurden, ist die <xref:System.Xml.Schema.XmlSchemaInfo> des Objekts (falls angegeben) <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, und <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> Eigenschaften werden mit den Ergebnissen der Validierung festgelegt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Der Inhalt des Elements ist nicht gültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen. Beispiel: Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />-Methode wird nach einem Aufruf von <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> aufgerufen.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEndElement">
      <MemberSignature Language="C#" Value="public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo, object typedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo, object typedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateEndElement (schemaInfo As XmlSchemaInfo, typedValue As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo, System::Object ^ typedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
        <Parameter Name="typedValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">Ein <see cref="T:System.Xml.Schema.XmlSchemaInfo" />-Objekt, dessen Eigenschaften nach erfolgreicher Validierung des Textinhalts des Elements festgelegt werden. Dieser Parameter kann <see langword="null" /> sein.</param>
        <param name="typedValue">Der typisierte Textinhalt des Elements.</param>
        <summary>Überprüft, ob der Textinhalt des angegebenen Elements gemäß seinem Datentyp gültig ist.</summary>
        <returns>Der analysierte, typisierte einfache Inhalt des Elements.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Wenn Sie gegen Überprüfen der `xs:key`, `xs:keyref`, oder `xs:unique` identitätseinschränkungen, verwenden Sie nicht die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> -methodenüberladung. Rufen Sie stattdessen die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> Methode und übergeben sie den Wert des Elements. Rufen Sie anschließend die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> methodenüberladung, die akzeptiert <xref:System.Xml.Schema.XmlSchemaInfo> als Argument, um sicherzustellen, dass der Textinhalt des Elements gemäß seinem Datentyp gültig ist.  
  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> Methode.  
  
-   Für Elemente mit einfachem Inhalt der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A?displayProperty=nameWithType> Methode überprüft, dass das Textinhalt des Elements gemäß seinem Datentyp gültig ist und den analysierten, typisierten Wert zurückgibt. Das Textinhalt des Elements wird aus der eingegebenem Inhalt, der als Parameter übergebenen abgerufen.  
  
-   Wenn Aufrufe von der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> Methode zuvor vorgenommen wurden, ein <xref:System.InvalidOperationException> ausgelöst wird.  
  
-   Wenn das Element mit komplexen Inhalt verfügt ein <xref:System.InvalidOperationException> ausgelöst wird.  
  
-   Wenn die <xref:System.Xml.Schema.XmlSchemaValidator> Objekt wurde erstellt, mit der <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> Wert als Parameter verwendet, die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> -Methode überprüft die Identity-Einschränkung Regeln (sofern vorhanden), die für das Element gelten.  
  
-   Wenn das Element im aktuellen Kontext erfolgreich validiert wurden, ist die <xref:System.Xml.Schema.XmlSchemaInfo> des Objekts (falls angegeben) <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, und <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> Eigenschaften werden mit den Ergebnissen der Validierung festgelegt.  
  
   
  
## Examples  
 Das folgende Beispiel überprüft die `contosoBooks.xml` -Datei anhand der `contosoBooks.xsd` Schema. Im Beispiel wird mit der <xref:System.Xml.Serialization.XmlSerializer>-Klasse die `contosoBooks.xml`-Datei deserialisiert, und der Wert der Knoten wird an die Methoden der <xref:System.Xml.Schema.XmlSchemaValidator>-Klasse übergeben.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 In diesem Beispiel wird die Datei `contosoBooks.xml` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 In diesem Beispiel wird auch `contosoBooks.xsd` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Der Textinhalt des Elements ist nicht gültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen (die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />-Methode wurde z. B. vor <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> aufgerufen), Aufrufe der <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />-Methode wurden bereits ausgeführt, oder das Element weist einen komplexen Inhalt auf.</exception>
        <exception cref="T:System.ArgumentNullException">Der typisierte Textinhaltsparameter kann nicht <see langword="null" /> sein.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEndOfAttributes">
      <MemberSignature Language="C#" Value="public void ValidateEndOfAttributes (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEndOfAttributes(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEndOfAttributes (schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEndOfAttributes(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">Ein <see cref="T:System.Xml.Schema.XmlSchemaInfo" />-Objekt, dessen Eigenschaften nach erfolgreicher Überprüfung auf das Vorhandensein aller erforderlichen Attribute im Elementkontext festgelegt werden. Dieser Parameter kann <see langword="null" /> sein.</param>
        <summary>Überprüft, ob alle erforderlichen Attribute im Elementkontext vorhanden sind, und bereitet das <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Objekt auf das Validieren des untergeordneten Inhalts des Elements vor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A> Methode.  
  
-   Die <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> Methode sollte immer aufgerufen werden, bevor <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A>.  
  
-   Die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A> -Methode muss aufgerufen werden, bevor Sie fortfahren, mit der Validierung des Inhalts eines Elements.  
  
-   Wenn Sie die erforderlichen Attribute im Elementkontext vorhanden sind die <xref:System.Xml.Schema.XmlSchemaInfo> des Objekts (falls angegeben) <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> -Eigenschaftensatz auf <xref:System.Xml.Schema.XmlSchemaValidity.Valid>.  
  
   
  
## Examples  
 Das folgende Beispiel überprüft die `contosoBooks.xml` -Datei anhand der `contosoBooks.xsd` Schema. Im Beispiel wird mit der <xref:System.Xml.Serialization.XmlSerializer>-Klasse die `contosoBooks.xml`-Datei deserialisiert, und der Wert der Knoten wird an die Methoden der <xref:System.Xml.Schema.XmlSchemaValidator>-Klasse übergeben.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 In diesem Beispiel wird die Datei `contosoBooks.xml` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 In diesem Beispiel wird auch `contosoBooks.xsd` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Mindestens ein erforderliches Attribut im aktuellen Elementkontext wurde nicht gefunden.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen. Beispiel: <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> wird nach <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> aufgerufen.</exception>
        <exception cref="T:System.ArgumentNullException">Mindestens einer der angegebenen Parameter ist <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateText">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Validiert, ob Text im aktuellen Elementkontext zulässig ist, und sammelt den Text zum Validieren, ob das aktuelle Element einfachen Inhalt aufweist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public void ValidateText (string elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateText(string elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateText (elementValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateText(System::String ^ elementValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementValue">Ein im aktuellen Elementkontext zu überprüfender Text-<see langword="string" />.</param>
        <summary>Überprüft, ob der angegebene Text-<see langword="string" /> im aktuellen Elementkontext zulässig ist und sammelt den Text für die Validierung, wenn das aktuelle Element einen einfachen Inhalt aufweist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> Methode.  
  
-   Verfügt das Element einfachen Inhalt, den Text `string` angegebenen verkettet wird, bei jedem Aufruf der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> Methode erst die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> Methode wird aufgerufen. Wenn die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> -Methode aufgerufen wird, wird der gesamte Text überprüft.  
  
-   Wenn das Element über komplexen Inhalt verfügt, tritt keine textverkettungsoperatoren.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Der angegebene Text-<see langword="string" /> ist im aktuellen Elementkontext nicht zulässig.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen. Beispiel: Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />-Methode wird nach dem Aufruf von <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> aufgerufen.</exception>
        <exception cref="T:System.ArgumentNullException">Der Text-<see langword="string" />-Parameter darf nicht <see langword="null" /> sein.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public void ValidateText (System.Xml.Schema.XmlValueGetter elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateText(class System.Xml.Schema.XmlValueGetter elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateText (elementValue As XmlValueGetter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateText(System::Xml::Schema::XmlValueGetter ^ elementValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.Xml.Schema.XmlValueGetter" />
      </Parameters>
      <Docs>
        <param name="elementValue">Ein <see cref="T:System.Xml.Schema.XmlValueGetter" />-<see langword="delegate" />, mit dem der Textwert als CLR-Typ (Common Language Runtime) übergeben wird, der mit dem XSD-Typ des Attributs kompatibel ist.</param>
        <summary>Überprüft, ob der vom angegebenen <see cref="T:System.Xml.Schema.XmlValueGetter" />-Objekt zurückgegebene Text im aktuellen Elementkontext zulässig ist und sammelt den Text für die Validierung, wenn das aktuelle Element einen einfachen Inhalt aufweist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden sind wichtige Hinweise zum Verwenden der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> Methode.  
  
-   Verfügt das Element einfachen Inhalt, den Text `string` angegebenen verkettet wird, bei jedem Aufruf der <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> Methode erst die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> Methode wird aufgerufen. Wenn die <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> -Methode aufgerufen wird, wird der gesamte Text überprüft.  
  
-   Wenn das Element über komplexen Inhalt verfügt, tritt keine textverkettungsoperatoren.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Der angegebene Text-<see langword="string" /> ist im aktuellen Elementkontext nicht zulässig.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen. Beispiel: Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />-Methode wird nach dem Aufruf von <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> aufgerufen.</exception>
        <exception cref="T:System.ArgumentNullException">Der Text-<see langword="string" />-Parameter darf nicht <see langword="null" /> sein.</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateWhitespace">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Überprüft, ob Leerraum im aktuellen Elementkontext zulässig ist und sammelt den Leerraum für die Validierung, wenn das aktuelle Element einen einfachen Inhalt aufweist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateWhitespace">
      <MemberSignature Language="C#" Value="public void ValidateWhitespace (string elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateWhitespace(string elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateWhitespace (elementValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateWhitespace(System::String ^ elementValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementValue">Ein im aktuellen Elementkontext zu überprüfender Leerraum-<see langword="string" />.</param>
        <summary>Überprüft, ob der im <see langword="string" /> angegebene Leerraum im aktuellen Elementkontext zulässig ist und sammelt den Leerraum für die Validierung, wenn das aktuelle Element einen einfachen Inhalt aufweist.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Leerraum ist im aktuellen Elementkontext nicht zulässig.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen. Beispiel: Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />-Methode wird nach einem Aufruf von <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> aufgerufen.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateWhitespace">
      <MemberSignature Language="C#" Value="public void ValidateWhitespace (System.Xml.Schema.XmlValueGetter elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateWhitespace(class System.Xml.Schema.XmlValueGetter elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateWhitespace (elementValue As XmlValueGetter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateWhitespace(System::Xml::Schema::XmlValueGetter ^ elementValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.Xml.Schema.XmlValueGetter" />
      </Parameters>
      <Docs>
        <param name="elementValue">Ein <see cref="T:System.Xml.Schema.XmlValueGetter" />-<see langword="delegate" />, mit dem der Leerraumwert als CLR-Typ (Common Language Runtime) übergeben wird, der mit dem XSD-Typ des Attributs kompatibel ist.</param>
        <summary>Überprüft, ob der vom angegebenen <see cref="T:System.Xml.Schema.XmlValueGetter" />-Objekt zurückgegebene Leerraum im aktuellen Elementkontext zulässig ist und sammelt den Leerraum für die Validierung, wenn das aktuelle Element einen einfachen Inhalt aufweist.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Leerraum ist im aktuellen Elementkontext nicht zulässig.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />-Methode wurde nicht in der richtigen Reihenfolge aufgerufen. Beispiel: Die <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />-Methode wird nach einem Aufruf von <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> aufgerufen.</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Der <see cref="T:System.Xml.Schema.ValidationEventHandler" />, der Schemavalidierungswarnungen und Fehler empfängt, die während der Schemavalidierung auftreten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn kein <xref:System.Xml.Schema.ValidationEventHandler> angegeben wird, ein <xref:System.Xml.Schema.XmlSchemaValidationException> wird für alle Schemavalidierungsfehler mit ausgelöst ein <xref:System.Xml.Schema.XmlSeverityType> Wert <xref:System.Xml.Schema.XmlSeverityType.Error>. Ein <xref:System.Xml.Schema.XmlSchemaValidationException> wird für validierungswarnungen mit ausgelöst, wenn ein <xref:System.Xml.Schema.XmlSeverityType> Wert <xref:System.Xml.Schema.XmlSeverityType.Warning>.  
  
   
  
## Examples  
 Das folgende Beispiel überprüft die `contosoBooks.xml` -Datei anhand der `contosoBooks.xsd` Schema. Im Beispiel wird mit der <xref:System.Xml.Serialization.XmlSerializer>-Klasse die `contosoBooks.xml`-Datei deserialisiert, und der Wert der Knoten wird an die Methoden der <xref:System.Xml.Schema.XmlSchemaValidator>-Klasse übergeben.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 In diesem Beispiel wird die Datei `contosoBooks.xml` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 In diesem Beispiel wird auch `contosoBooks.xsd` als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventSender">
      <MemberSignature Language="C#" Value="public object ValidationEventSender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ValidationEventSender" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationEventSender As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ValidationEventSender { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das als das Absenderobjekt eines Validierungsereignisses gesendete Objekt ab oder legt dieses fest.</summary>
        <value>Ein <see cref="T:System.Object" />. Der Standardwert ist dieses <see cref="T:System.Xml.Schema.XmlSchemaValidator" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Ein Beispiel eines Validierungsereignisses finden Sie unter der <xref:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler> Ereignis.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Legt das <see cref="T:System.Xml.XmlResolver" />Objekt zum Auflösen von <c>xs: import</c>- und <c>xs: include</c>-Elementen fest, sowie <c>xsi: schemaLocation</c>- und <c>xsi: noNamespaceSchemaLocation</c>-Attributn.</summary>
        <value>Ein <see cref="T:System.Xml.XmlResolver" />-Objekt. Der Standardwert ist ein <see cref="T:System.Xml.XmlUrlResolver" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> und <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> Validierungsflag eines ein <xref:System.Xml.Schema.XmlSchemaValidator> Objekt sind nicht standardmäßig sein. Darüber hinaus die <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> Eigenschaft ein <xref:System.Xml.Schema.XmlSchemaValidator> Objekt `null` standardmäßig. Daher werden enthalten externe Schemata in verwiesen wird, Importe oder Redefine Elemente nicht standardmäßig aufgelöst.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>
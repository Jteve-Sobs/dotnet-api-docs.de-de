<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="95c84a65dda349c44d2625e4bd881d75ecddf107" /><Meta Name="ms.sourcegitcommit" Value="0de246131f8a87c71d008d055adec7bf72470c4f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/29/2019" /><Meta Name="ms.locfileid" Value="66301812" /></Metadata><TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <TypeSignature Language="F#" Value="type XmlSchemaSet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Enthält einen Cache von XSD-Schemas (XML-Schema Definition Language).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   Verwenden Sie die Schemas aus unbekannten oder nicht vertrauenswürdigen Quellen oder Standorte nicht zu. Auf diese Weise wird die Sicherheit Ihres Codes gefährdet werden.  
> -   XML-Schemas (auch Inlineschemas) sind von Natur aus anfällig für DOS-Angriffe; Akzeptieren Sie sie nicht in nicht vertrauenswürdigen Szenarios.  
> -   Schema-Validation-Fehlermeldungen und Ausnahmen können vertrauliche Informationen über die Content-Modell oder das URI-Pfade zur Schemadatei verfügbar machen. Achten Sie darauf, dass Sie nicht diese Informationen, um nicht vertrauenswürdige Aufrufer verfügbar zu machen.  
> -   Weitere Überlegungen zur Sicherheit werden im Abschnitt "Sicherheitsüberlegungen" behandelt.  
  
 <xref:System.Xml.Schema.XmlSchemaSet> ist ein Cache oder die Bibliothek, in dem Sie Schemas für XML Schema Definition Language (XSD) speichern können. <xref:System.Xml.Schema.XmlSchemaSet> erhöht die Leistungsfähigkeit, indem Schemata im Arbeitsspeicher zwischengespeichert werden, anstatt über eine Datei oder eine URL auf sie zuzugreifen. Jedes Schema wird durch den Namespace-URI identifiziert und Speicherort, der wurde angegeben, wenn das Schema der Gruppe hinzugefügt wurde. Sie verwenden die <xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType> Eigenschaft, um die <xref:System.Xml.Schema.XmlSchemaSet> Objekt ein XML-Reader für die datenvalidierung verwenden soll.  
  
## <a name="security-considerations"></a>Sicherheitsüberlegungen  
  
-   Verwenden Sie Schemas nicht aus unbekannten oder nicht vertrauenswürdigen Quellen aus. Auf diese Weise wird die Sicherheit Ihres Codes gefährdet werden. Einschließen von externen Namespaces oder Speicherorte in verwiesen wird, werden Import / neu definierten Elementen eines Schemas in Bezug auf der Basis-URI des Schemas aufgelöst, die eingefügt bzw. importiert werden. Angenommen, base-URI für das Einfügen oder das Importieren von Schema leer ist oder `null`, die externe Speicherorte werden in Bezug auf das aktuelle Verzeichnis aufgelöst. Die <xref:System.Xml.XmlUrlResolver> Klasse zum Auflösen von externen Schemata wird standardmäßig verwendet. Legen Sie zur Auflösung von einschließen, Import, deaktivieren und neu definieren die Elemente eines Schemas, die <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> Eigenschaft `null`.  
  
-   Die <xref:System.Xml.Schema.XmlSchemaSet> -Klasse verwendet die <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> Klasse zum Analysieren und reguläre Ausdrücke in einem XML-Schema entsprechen. Überprüfung der Musterfacets mit regulären Ausdrücken in einem XML-Schema kann die CPU-Nutzung umfassen und sollte vermieden werden, in Szenarien mit hoher Verfügbarkeit.  
  
-   Ausnahmen, die ausgelöst wird, durch die Verwendung der <xref:System.Xml.Schema.XmlSchemaSet> Klasse, z. B. die <xref:System.Xml.Schema.XmlSchemaException> Klasse enthält möglicherweise vertrauliche Informationen, die in nicht vertrauenswürdigen Szenarien nicht verfügbar gemacht werden sollen. Z. B. die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Eigenschaft eine <xref:System.Xml.Schema.XmlSchemaException> gibt den URI-Pfad der Schemadatei, die die Ausnahme verursacht hat. Die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Eigenschaft sollte in nicht vertrauenswürdigen Szenarien nicht verfügbar gemacht werden. Ausnahmen sollten ordnungsgemäß behandelt werden, sodass diese vertraulichen Informationen in nicht vertrauenswürdigen Szenarien nicht verfügbar gemacht wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine XML-Datei mithilfe von im <xref:System.Xml.Schema.XmlSchemaSet> gespeicherten Schemata validiert. Der Namespace in der XML-Datei, `urn:bookstore-schema`, gibt an, welches Schema im <xref:System.Xml.Schema.XmlSchemaSet> zur Validierung verwendet werden soll. Ausgabe des Beispiels zeigt, dass die XML-Datei über zwei Schemas Verstöße verfügt:

 - Die erste \<Buch >-Element enthält ein \<Autor >-Element, aber keine \<Title > oder \<Preis > Element.

 - Die \<Autor > Element in den letzten \<Buch >-Element fehlt ein \<First-Name > und \<Last-Name > Element und stattdessen wurde ein ungültiger \<Name > Element.   
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>Eingabe  
 In diesem Beispiel werden die folgenden beiden Eingabedateien verwendet:  
  
 **booksSchemaFail.xml:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **books.xsd:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.Schema.XmlSchemaSet" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.Schema.XmlSchemaSet" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaSet : System.Xml.XmlNameTable -&gt; System.Xml.Schema.XmlSchemaSet" Usage="new System.Xml.Schema.XmlSchemaSet nameTable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">Das zu verwendende <see cref="T:System.Xml.XmlNameTable" />-Objekt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.Schema.XmlSchemaSet" />-Klasse mit der angegebenen <see cref="T:System.Xml.XmlNameTable" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Das als Parameter übergebene <see cref="T:System.Xml.XmlNameTable" />-Objekt ist <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt dem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> das angegebene XSD-Schema (XML Schema Definition Language) hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Das dem <see cref="T:System.Xml.Schema.XmlSchemaSet" />-Objekt hinzuzufügende <see cref="T:System.Xml.Schema.XmlSchema" />.</param>
        <summary>Fügt dem <see cref="T:System.Xml.Schema.XmlSchema" /> das angegebene <see cref="T:System.Xml.Schema.XmlSchemaSet" /> hinzu.</summary>
        <returns>Ein <see cref="T:System.Xml.Schema.XmlSchema" />-Objekt, wenn das Schema gültig ist. Wenn das Schema nicht gültig ist und ein <see cref="T:System.Xml.Schema.ValidationEventHandler" /> angegeben ist, wird <see langword="null" /> zurückgegeben und das entsprechende Validierungsereignis ausgelöst. Andernfalls wird eine <see cref="T:System.Xml.Schema.XmlSchemaException" /> ausgelöst.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Xml.Schema.XmlSchema> Objekt bereits vorhanden ist, der <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode führt keine Aktion.  
  
 Die Funktionalität dieser Methode ist identisch mit der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Das Schema ist ungültig.</exception>
        <exception cref="T:System.ArgumentNullException">Das als Parameter übergebene <see cref="T:System.Xml.Schema.XmlSchema" />-Objekt ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xmlSchemaSet.Add schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">Das <see cref="T:System.Xml.Schema.XmlSchemaSet" />-Objekt.</param>
        <summary>Fügt dem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> alle XSD-Schemas (XML Schema Definition Language) im vorhandenen <see cref="T:System.Xml.Schema.XmlSchemaSet" /> hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bevor Sie ein Schema hinzugefügt werden kann ein <xref:System.Xml.Schema.XmlSchemaSet>, erfolgreich vorverarbeitet werden muss. Die vorverarbeitung, führt die folgenden grundlegenden Aufgaben.  
  
1.  Das Schema wird gemäß den Regeln der W3C XML-Schema auf strukturelle Gültigkeit überprüft, aber das Schema wurde nicht vollständig überprüft.  
  
2.  Verweise auf Schemakomponenten, die internen und externen werden aufgelöst. Importierte oder enthaltenen Schemas, die erfolgreich abgerufen werden werden ebenfalls hinzugefügt, um die <xref:System.Xml.Schema.XmlSchemaSet>. Importierte Schemas werden hinzugefügt, als Separate <xref:System.Xml.Schema.XmlSchema> Objekte und enthaltenen Schemas Teil des einschließlich erfolgen <xref:System.Xml.Schema.XmlSchema>.  
  
 Wenn der <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Eigenschaft der <xref:System.Xml.Schema.XmlSchemaSet> hinzufügen wird `true`, alle Schemas in der <xref:System.Xml.Schema.XmlSchemaSet> hinzufügen werden hinzugefügt, der <xref:System.Xml.Schema.XmlSchemaSet>. Wenn die <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Eigenschaft der <xref:System.Xml.Schema.XmlSchemaSet> hinzufügen wird `false`, jedes Schema, das hinzugefügt wird vorverarbeitet, bevor er hinzugefügt wird. Wenn keines der Schemas in der neu hinzugefügten <xref:System.Xml.Schema.XmlSchemaSet> vorverarbeitet werden muss, kann keine Schemas hinzugefügt; stattdessen ein <xref:System.Xml.Schema.XmlSchemaException> ausgelöst. Daher die folgenden zwei Codebeispiele sind kein Äquivalent.  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 Die vorherigen beiden Codebeispiele sind kein Äquivalent. Im ersten Beispiel, wenn ein ungültiges Schema in vorhanden ist `schemaSet1` und die zugehörige <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> -Eigenschaftensatz auf `false`, werden keine Schemas hinzugefügt `schemaSet`. Im zweiten Beispiel eine Reihe von Schemas kann hinzugefügt werden `schemaSet` bevor ein ungültiges Schema ermittelt und eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Schemas, eine <xref:System.Xml.Schema.XmlSchemaSet>, Hinzufügen der <xref:System.Xml.Schema.XmlSchemaSet> in ein neues <xref:System.Xml.Schema.XmlSchemaSet> mithilfe der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode.  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Ein Schema im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ist ungültig.</exception>
        <exception cref="T:System.ArgumentNullException">Das als Parameter übergebene <see cref="T:System.Xml.Schema.XmlSchemaSet" />-Objekt ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Die Schema-<paramref name="targetNamespace" />-Eigenschaft oder <see langword="null" />, um den im Schema angegebenen <paramref name="targetNamespace" /> zu verwenden.</param>
        <param name="schemaUri">Die URL, die das zu ladende Schema angibt.</param>
        <summary>Fügt das XSD-Schema (XML Schema Definition Language) bei der für den <see cref="T:System.Xml.Schema.XmlSchemaSet" /> angegebenen URL hinzu.</summary>
        <returns>Ein <see cref="T:System.Xml.Schema.XmlSchema" />-Objekt, wenn das Schema gültig ist. Wenn das Schema nicht gültig ist und ein <see cref="T:System.Xml.Schema.ValidationEventHandler" /> angegeben ist, wird <see langword="null" /> zurückgegeben und das entsprechende Validierungsereignis ausgelöst. Andernfalls wird eine <see cref="T:System.Xml.Schema.XmlSchemaException" /> ausgelöst.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bevor Sie ein Schema hinzugefügt werden kann ein <xref:System.Xml.Schema.XmlSchemaSet>, erfolgreich vorverarbeitet werden muss. Die vorverarbeitung, führt die folgenden grundlegenden Aufgaben.  
  
1.  Das Schema wird gemäß den Regeln der W3C XML-Schema auf strukturelle Gültigkeit überprüft, aber das Schema wurde nicht vollständig überprüft.  
  
2.  Verweise auf Schemakomponenten, die internen und externen werden aufgelöst. Importierte oder enthaltenen Schemas, die erfolgreich abgerufen werden werden ebenfalls hinzugefügt, um die <xref:System.Xml.Schema.XmlSchemaSet>. Importierte Schemas werden hinzugefügt, als Separate <xref:System.Xml.Schema.XmlSchema> Objekte und enthaltenen Schemas Teil des einschließlich erfolgen <xref:System.Xml.Schema.XmlSchema>.  
  
 Im folgenden sind wichtige Hinweise, berücksichtigen bei Verwendung der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode.  
  
-   Ein Schema Hinzufügen der <xref:System.Xml.Schema.XmlSchemaSet> mit dem gleichen Namespace und Schema-Speicherort-URL als ein Schema bereits im Ziel die <xref:System.Xml.Schema.XmlSchemaSet> wird das ursprüngliche Schemaobjekt zurück.  
  
-   Wenn ein neues Schema erfolgreich hinzugefügt wird ein <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Eigenschaft der <xref:System.Xml.Schema.XmlSchemaSet> nastaven NA hodnotu `false`.  
  
-   Einschließen "oder" Import-Elemente, die sich in einem XML-Schema werden aufgelöst, wenn die <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode wird aufgerufen. Fehler beim Auflösen enthalten und import-Elementen in einer schemavalidierungswarnung ist kein <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> für angegeben wurde der <xref:System.Xml.Schema.XmlSchemaSet> -Objekt, diese Warnung nicht gemeldet werden.  
  
-   Wenn ein Schema mit den gleichen Zielnamespace wie ein Schema, das bereits die <xref:System.Xml.Schema.XmlSchemaSet> wird hinzugefügt, um die <xref:System.Xml.Schema.XmlSchemaSet>, beide Schemas hinzugefügt.  
  
    > [!NOTE]
    >  Dieses Verhalten unterscheidet sich von der veralteten <xref:System.Xml.Schema.XmlSchemaCollection> Objekt.  
  
-   Die <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> -Methode der der <xref:System.Xml.Schema.XmlSchemaSet> hat die Möglichkeit, verwenden den Zielnamespace in einem Schema definierten anstelle der Zielnamespace als Parameter angegeben werden bei der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode wird aufgerufen. Angeben `null` in der `targetNamespace` Parameter, der die <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> -Methode weist die <xref:System.Xml.Schema.XmlSchemaSet> verwenden den Zielnamespace im Schema definiert, wie im folgenden Codebeispiel wird veranschaulicht.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 Im obigen Codebeispiel `null` angegeben ist, als die `targetNamespace` Parameter, um die <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode. Daher die `targetNamespace` definiert in der "Books.xml"-Datei verwendet wird. In diesem Fall ist das Ergebnis des Aufrufs der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode wäre identisch sein, wenn http://www.contoso.com/books angegeben worden wäre, als die `targetNamespace` Parameter.  
  
-   W3C XML-Schema können Schemas ohne Zielnamespace in den Schemas, die mit dem Zielnamespace definiert einbezogen werden. In diesem Fall wird die Schemas ohne Zielnamespace definiert, in der Target Namespace des einschließenden Schemas erzwungen. Das eingeschlossene Schema wird behandelt, als hätte sie diesen Zielnamespace definiert. Auf ähnliche Weise können Schemas ohne Zielnamespace hinzugefügt werden, um die <xref:System.Xml.Schema.XmlSchemaSet> und umgewandelt, in der Target Namespace gemäß der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> -Methode, wie im folgenden Beispiel dargestellt.  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 Wenn das oben stehende Schema hinzugefügt wird die <xref:System.Xml.Schema.XmlSchemaSet> mit dem Zielnamespace http://www.contoso.com/new/targetnamespace (wie im folgenden Code gezeigt), wird diese behandelt, als ob der Zielnamespace im Schema deklariert wurde `http://www.contoso.com/new/targetnamespace`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 Das folgende Codebeispiel fügt die http://www.contoso.com/books.xsd Schema mit dem Zielnamespace http://www.contoso.com/books auf die <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 In diesem Beispiel wird die Datei `books.xsd` als Eingabe verwendet.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Das Schema ist ungültig.</exception>
        <exception cref="T:System.ArgumentNullException">Die URL, die als Parameter übergeben wurde, entspricht <see langword="null" /> oder <see cref="F:System.String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberSignature Language="F#" Value="member this.Add : string * System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Die Schema-<paramref name="targetNamespace" />-Eigenschaft oder <see langword="null" />, um den im Schema angegebenen <paramref name="targetNamespace" /> zu verwenden.</param>
        <param name="schemaDocument">Das <see cref="T:System.Xml.XmlReader" />-Objekt.</param>
        <summary>Fügt das im <see cref="T:System.Xml.XmlReader" /> enthaltene XSD-Schema (XML Schema Definition Language) <see cref="T:System.Xml.Schema.XmlSchemaSet" /> hinzu.</summary>
        <returns>Ein <see cref="T:System.Xml.Schema.XmlSchema" />-Objekt, wenn das Schema gültig ist. Wenn das Schema nicht gültig ist und ein <see cref="T:System.Xml.Schema.ValidationEventHandler" /> angegeben ist, wird <see langword="null" /> zurückgegeben und das entsprechende Validierungsereignis ausgelöst. Andernfalls wird eine <see cref="T:System.Xml.Schema.XmlSchemaException" /> ausgelöst.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bevor Sie ein Schema hinzugefügt werden kann ein <xref:System.Xml.Schema.XmlSchemaSet>, erfolgreich vorverarbeitet werden muss. Die vorverarbeitung, führt die folgenden grundlegenden Aufgaben.  
  
1.  Das Schema wird gemäß den Regeln der W3C XML-Schema auf strukturelle Gültigkeit überprüft, aber das Schema wurde nicht vollständig überprüft.  
  
2.  Verweise auf Schemakomponenten, die internen und externen werden aufgelöst. Importierte oder enthaltenen Schemas, die erfolgreich abgerufen werden werden ebenfalls hinzugefügt, um die <xref:System.Xml.Schema.XmlSchemaSet>. Importierte Schemas werden hinzugefügt, als Separate <xref:System.Xml.Schema.XmlSchema> Objekte und enthaltenen Schemas Teil des einschließlich erfolgen <xref:System.Xml.Schema.XmlSchema>.  
  
 Im folgenden sind wichtige Hinweise, berücksichtigen bei Verwendung der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode.  
  
-   Erfolgreich abgerufen Schemas importiert oder enthalten, die Schemas in der <xref:System.Xml.XmlReader> werden ebenfalls hinzugefügt, um die <xref:System.Xml.Schema.XmlSchemaSet>.  
  
-   Wenn die <xref:System.Xml.XmlReader> befindet sich nicht für das Stammelement einer <xref:System.Xml.Schema.XmlSchemaException> wird ausgelöst, wenn das aktuelle Element eines Elements ist. Wenn das aktuelle Element ist ein `xs:schema` -Element, das XML-Schemadokument wird gelesen, in der <xref:System.Xml.Schema.XmlSchemaSet>ist, andernfalls ein <xref:System.Xml.Schema.XmlSchemaException> wird ausgelöst, weil das Schema nicht gültig ist.  
  
-   Wenn die <xref:System.Xml.XmlReader> befindet sich in einer Sequenz von XML-Knoten, wird nur der erste Knoten in der Sequenz hinzugefügt.  
  
-   Wenn das Schema erstellt wurde eine <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Methodenaufruf wird der Wert des der <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> Eigenschaft wird ignoriert, weil Inline-Schema-Verarbeitung nicht für die W3C-XML-Schemadokumenten angewendet wird.  
  
-   Die <xref:System.Xml.XmlResolver> Eigenschaft der <xref:System.Xml.XmlReader> ist nicht zum Auflösen von Verweisen auf Namespaces oder Speicherorte in Include- und Importelementen verwendet. Stattdessen die <xref:System.Xml.XmlResolver> Eigenschaft der <xref:System.Xml.Schema.XmlSchemaSet> verwendet wird.  
  
-   Die <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> -Methode der der <xref:System.Xml.Schema.XmlSchemaSet> hat die Möglichkeit, verwenden den Zielnamespace in einem Schema definierten anstelle der Zielnamespace als Parameter angegeben werden bei der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode wird aufgerufen. Angeben `null` oder <xref:System.String.Empty?displayProperty=nameWithType> auf die <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> -Methode weist die <xref:System.Xml.Schema.XmlSchemaSet> verwenden Sie den Zielnamespace im Schema definiert sind. Ein Beispiel für dieses Verhalten, finden Sie unter den <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode.  
  
 Die übrigen Funktionen dieser Methode ist identisch mit der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode.  
  
   
  
## Examples  
 Das folgende Codebeispiel fügt die books.xsd Schemas in der <xref:System.Xml.XmlTextReader> mit dem Zielnamespace des http://www.contoso.com/books auf die <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Das Schema ist ungültig.</exception>
        <exception cref="T:System.ArgumentNullException">Das als Parameter übergebene <see cref="T:System.Xml.XmlReader" />-Objekt ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationSettings : System.Xml.Schema.XmlSchemaCompilationSettings with get, set" Usage="System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> für den <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ab oder legt diese fest.</summary>
        <value>Der <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> für den <see cref="T:System.Xml.Schema.XmlSchemaSet" />. Der Standardwert ist eine <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" />-Instanz, deren <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" />-Eigenschaft auf <see langword="true" /> festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Schema.XmlSchemaCompilationSettings> Klasse gibt die Optionen für die abonnementüberprüfung UPA (Unique Particle Attribution, ausführen) für die <xref:System.Xml.Schema.XmlSchemaSet>. Weitere Informationen zum Aktivieren der UPA-Überprüfungen finden Sie unter den <xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; unit" Usage="xmlSchemaSet.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kompiliert die dem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> hinzugefügten XSD-Schemas (XML Schema Definition Language) in ein logisches Schema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird automatisch aufgerufen, wenn eine Überprüfung erforderlich ist und die <xref:System.Xml.Schema.XmlSchemaSet> wurde nicht zuvor kompiliert – z. B., wenn ein <xref:System.Xml.Schema.XmlSchemaSet> dient als Eingabe zum Erstellen einer <xref:System.Xml.XmlReader> -Objekt in der <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> Eigenschaft eine <xref:System.Xml.XmlReaderSettings> -Objekt. Wenn die <xref:System.Xml.Schema.XmlSchemaSet> ist bereits in den kompilierten Zustand, diese Methode wird die Schemas nicht erneut. Wenn diese Methode erfolgreich ist, führt die <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> -Eigenschaftensatz auf `true`.  
  
 Schemas, die zuvor durch kompiliert wurden eine <xref:System.Xml.Schema.XmlSchemaSet> werden nicht erneut kompiliert. Allerdings Schemas, die kompiliert wurden, mit der <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> -Methode der der <xref:System.Xml.Schema.XmlSchema> erneut kompiliert wird.  
  
> [!NOTE]
>  Aufrufen, müssen Sie die <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Methode, wenn Sie ein Schema (oder einer seiner enthält/Importe) geändert haben, nach dem Hinzufügen zu den <xref:System.Xml.Schema.XmlSchemaSet>. Die <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Methode wird das Schema für strukturelle Gültigkeit gemäß den Regeln der W3C XML-Schema zu überprüfen. Allerdings wird eine vollständige Überprüfung nicht ausgeführt. Es werden auch Verweise auf Schemakomponenten, die intern und extern aufgelöst. Importierte oder enthaltenen Schemas, die erfolgreich abgerufen werden werden ebenfalls hinzugefügt, um die <xref:System.Xml.Schema.XmlSchemaSet>. Importierte Schemas werden hinzugefügt, als Separate <xref:System.Xml.Schema.XmlSchema> Objekte während der enthaltenen Schemas erfolgen Teil des einschließlich <xref:System.Xml.Schema.XmlSchema>. Wenn der Aufruf erneut verarbeiten erfolgreich ist, ist die <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Eigenschaft auf "false" festgelegt ist.  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Beim Überprüfen und Kompilieren der Schemas ist ein Fehler im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> aufgetreten.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt an, ob ein XSD-Schema (XML Schema Definition Language) im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> vorhanden ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="xmlSchemaSet.Contains targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Die Schema-<paramref name="targetNamespace" />-Eigenschaft.</param>
        <summary>Gibt an, ob ein XSD-Schema (XML Schema Definition Language) mit dem angegebenen Zielnamespace-URI im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> vorhanden ist.</summary>
        <returns><see langword="true" />, wenn ein Schema mit dem angegebenen Zielnamespace-URI im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> vorhanden ist; andernfalls wird <see langword="false" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schemas, die indirekt hinzugefügt werden, die <xref:System.Xml.Schema.XmlSchemaSet> erkannt werden, indem die <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> -Methode, z. B. importierten Schemas. Als Ergebnis, wenn ein Schema für die http://www.contoso.com/retail Namespace, der ein Schema für importiert die http://www.contoso.com/books Namespace hinzugefügt wird die <xref:System.Xml.Schema.XmlSchemaSet>, wird beim Aufruf <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> mit `http://www.contoso.com/books` als Parameter verwendet, gibt es `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.Contains schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Das <see cref="T:System.Xml.Schema.XmlSchema" />-Objekt.</param>
        <summary>Gibt an, ob das angegebene XSD-Schema-(XML Schema Definition Language)-<see cref="T:System.Xml.Schema.XmlSchema" />-Objekt im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> vorhanden ist.</summary>
        <returns><see langword="true" />, wenn das <see cref="T:System.Xml.Schema.XmlSchema" />-Objekt im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> enthalten ist, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der als Parameter übergebene <see cref="T:System.Xml.Schema.XmlSchemaSet" /> entspricht <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Xml.Schema.XmlSchema[] * int -&gt; unit" Usage="xmlSchemaSet.CopyTo (schemas, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">Das Array, in das die Objekte kopiert werden sollen.</param>
        <param name="index">Der Index im Array, bei dem der Kopiervorgang beginnt.</param>
        <summary>Kopiert alle <see cref="T:System.Xml.Schema.XmlSchema" />-Objekte aus dem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ab dem angegebenen Index in das angegebene Array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel kopiert alle die <xref:System.Xml.Schema.XmlSchema> Objekte in der <xref:System.Xml.Schema.XmlSchemaSet> auf ein Array von <xref:System.Xml.Schema.XmlSchema> Objekte.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl logischer XSD-Schemas (XML Schema Definition Language) im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ab.</summary>
        <value>Die Anzahl der logischen Schemas im <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn es zwei Schemas für den Namespace gibt `http://www.contoso.com` in die <xref:System.Xml.Schema.XmlSchemaSet>, wird die <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> Eigenschaft 1 zurück, da die Schemas als ein einzelnes logisches Schema für die Überprüfung behandelt werden. Jedoch, falls ein Schema für den Namespace `http://www.contoso.com/retail` importiert ein Schema für die `http://www.contoso.com/books` -Namespace, den Wert des der <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> Eigenschaft wäre 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAttributes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft alle globalen Attribute in allen XSD-Schemas (XML Schema Definition Language) im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ab.</summary>
        <value>Die Auflistung globaler Attributen.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalElements : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft alle globalen Elemente in allen XSD-Schemas (XML Schema Definition Language) im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ab.</summary>
        <value>Die Auflistung von globalen Elementen.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalTypes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft alle globalen einfachen und komplexen Typen in allen XSD-Schemas (XML Schema Definition Language) im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ab.</summary>
        <value>Die Auflistung globaler einfacher und komplexer Typen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A> -Eigenschaft gibt immer einen Typ, der darstellt der `xs:anyType` komplexen Typ.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die XSD-Schemas (XML Schema Definition Language) im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> kompiliert wurden.</summary>
        <value><see langword="true" />, wenn die Schemas im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> seit dem letzten Hinzufügen oder Entfernen eines Schemas aus dem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> kompiliert wurden; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>-Eigenschaft wird nicht beeinflusst, wenn Schemata im <xref:System.Xml.Schema.XmlSchemaSet> bearbeitet werden. Updates der einzelnen Schemata im <xref:System.Xml.Schema.XmlSchemaSet> werden nicht nachverfolgt. Folglich kann die <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>-Eigenschaft `true` sein, obwohl eines der im <xref:System.Xml.Schema.XmlSchemaSet> enthaltenen Schemata veraltet ist, wenn keine Schemata aus dem <xref:System.Xml.Schema.XmlSchemaSet> hinzugefügt oder entfernt wurden.  
  
   
  
## Examples  
 Ein Beispiel für die <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> -Eigenschaft finden Sie unter den <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standard-<see cref="T:System.Xml.XmlNameTable" /> ab, die vom <see cref="T:System.Xml.Schema.XmlSchemaSet" /> beim Laden neuer XSD-Schemas (XML Schema Definition Language) verwendet wird.</summary>
        <value>Eine Tabelle atomisierter Zeichenfolgenobjekte.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Remove schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Das aus der <see cref="T:System.Xml.Schema.XmlSchema" /> zu entfernende <see cref="T:System.Xml.Schema.XmlSchemaSet" />-Objekt.</param>
        <summary>Entfernt das angegebene XSD-Schema (XML Schema Definition Language) aus dem <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Das aus dem <see cref="T:System.Xml.Schema.XmlSchema" /> entfernte <see cref="T:System.Xml.Schema.XmlSchemaSet" />-Objekt oder <see langword="null" />, wenn das Schema nicht im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Löschen eines Schemas aus der <xref:System.Xml.Schema.XmlSchemaSet> legt die <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Eigenschaft `false`.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht mehrere Schemas hinzufügen eine <xref:System.Xml.Schema.XmlSchemaSet>, und klicken Sie dann eines der Schemas mit Entfernen der <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> Methode.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Das Schema ist kein gültiges Schema.</exception>
        <exception cref="T:System.ArgumentNullException">Der als Parameter übergebene <see cref="T:System.Xml.Schema.XmlSchema" /> entspricht <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveRecursive : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.RemoveRecursive schemaToRemove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">Das aus der <see cref="T:System.Xml.Schema.XmlSchema" /> zu entfernende <see cref="T:System.Xml.Schema.XmlSchemaSet" />-Objekt.</param>
        <summary>Entfernt das angegebene XSD-Schema (XML Schema Definition Language) und alle Schemas, die aus dem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> importiert werden.</summary>
        <returns><see langword="true" />, wenn das <see cref="T:System.Xml.Schema.XmlSchema" />-Objekt und alle zugehörigen Importe erfolgreich entfernt wurden, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> -Methode entfernt das angegebene Schema und alle importierten Schemas aus der <xref:System.Xml.Schema.XmlSchemaSet>, solange es keine Abhängigkeiten für das Schema oder die importierten Schemas bestehen. Wenn es Abhängigkeiten für das Schema oder die importierten Schemas in der <xref:System.Xml.Schema.XmlSchemaSet>, "nothing" wird entfernt und <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> gibt `false`. Wenn `false` wird zurückgegeben, und ein <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> wird definiert, wird eine Warnung an den Ereignishandler, die die Abhängigkeiten beschreibt gesendet.  
  
 Wenn das angegebene Schema andere Schemas importiert und die zuvor mit das angegebene Schema entfernt wurde die <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> -Methode, die <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> Methode die importierten Schemas wird nicht entfernt, und gibt `false`. Z. B. wenn `parentSchema` importiert `childSchema1` und `childSchema2` der folgende Code wird lediglich entfernt `parentSchema`, aber nicht die importierten `childSchema1` und `childSchema2` Schemas:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Entfernen Sie der folgende Code wird die `parentSchema` und die importierten Schemas:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Die <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> Methode hat keine Auswirkungen auf den Status der <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mehrere Schemas hinzugefügt ein <xref:System.Xml.Schema.XmlSchemaSet>, und klicken Sie dann eines der Schemas und alle mit importierten Schemata entfernt die <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> Methode.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der als Parameter übergebene <see cref="T:System.Xml.Schema.XmlSchema" /> entspricht <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Reprocess : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Reprocess schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Das erneut zu verarbeitende Schema.</param>
        <summary>Verarbeitet erneut ein XSD-Schema (XML Schema Definition Language), das bereits im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> vorhanden ist.</summary>
        <returns>Ein <see cref="T:System.Xml.Schema.XmlSchema" />-Objekt, wenn das Schema ein gültiges Schema ist. Wenn das Schema nicht gültig ist und ein <see cref="T:System.Xml.Schema.ValidationEventHandler" /> angegeben ist, wird <see langword="null" /> zurückgegeben und das entsprechende Validierungsereignis ausgelöst. Andernfalls wird eine <see cref="T:System.Xml.Schema.XmlSchemaException" /> ausgelöst.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Wiederverarbeiten eines Schemas führt alle Wiederverarbeitungsschritte durchgeführt, die für ein Schema bei der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Methode wird aufgerufen. Wenn der Aufruf von <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> erfolgreich ist, die <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> -Eigenschaftensatz auf `false`.  
  
 Die Methode zur erneuten Verarbeitung sollte verwendet werden, nachdem ein Schema in der <xref:System.Xml.Schema.XmlSchemaSet> wurde geändert, nachdem die <xref:System.Xml.Schema.XmlSchemaSet> Kompilierung durchgeführt wurde.  
  
> [!NOTE]
>  Aufrufen, müssen Sie die <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Methode, wenn Sie ein Schema (oder einer seiner enthält/Importe) geändert haben, nach dem Hinzufügen zu den <xref:System.Xml.Schema.XmlSchemaSet>. Die <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Methode wird das Schema für strukturelle Gültigkeit gemäß den Regeln der W3C XML-Schema zu überprüfen. Allerdings wird eine vollständige Überprüfung nicht ausgeführt. Es werden auch Verweise auf Schemakomponenten, die intern und extern aufgelöst. Importierte oder enthaltenen Schemas, die erfolgreich abgerufen werden werden ebenfalls hinzugefügt, um die <xref:System.Xml.Schema.XmlSchemaSet>. Importierte Schemas werden hinzugefügt, als Separate <xref:System.Xml.Schema.XmlSchema> Objekte während der enthaltenen Schemas erfolgen Teil des einschließlich <xref:System.Xml.Schema.XmlSchema>. Wenn der Aufruf erneut verarbeiten erfolgreich ist, ist die <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Eigenschaft auf "false" festgelegt ist.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt beim Wiederverarbeiten eines Schemas hinzugefügt, die <xref:System.Xml.Schema.XmlSchemaSet>. Nach der <xref:System.Xml.Schema.XmlSchemaSet> kompiliert wird, mit der <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> -Methode und das Schema hinzugefügt der <xref:System.Xml.Schema.XmlSchemaSet> geändert wird, die <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Eigenschaft auf festgelegt `true`, selbst wenn ein Schema in der <xref:System.Xml.Schema.XmlSchemaSet> geändert wurde. Aufrufen der <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Methode führt alle Wiederverarbeitungsschritte ausgeführt durch die <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> -Methode und legt die <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Eigenschaft `false`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Das Schema ist ungültig.</exception>
        <exception cref="T:System.ArgumentNullException">Das als Parameter übergebene <see cref="T:System.Xml.Schema.XmlSchema" />-Objekt ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Das <see cref="T:System.Xml.Schema.XmlSchema" />-Objekt, das als Parameter übergeben wurde, ist im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> noch nicht vorhanden.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> eine Auflistung der XSD-Schemas (XML Schema Definition Language) zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberSignature Language="F#" Value="member this.Schemas : unit -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> eine Auflistung aller XSD-Schemas (XML Schema Definition Language) zurück.</summary>
        <returns>Ein <see cref="T:System.Collections.ICollection" />-Objekt, das alle Schemas enthält, die dem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> hinzugefügt worden sind. Wenn dem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> keine Schemas hinzugefügt wurden, wird ein leeres <see cref="T:System.Collections.ICollection" />-Objekt zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt zurück, Schemas, die indirekt hinzugefügt wurden die <xref:System.Xml.Schema.XmlSchemaSet> , da sie importiert wurden.  
  
> [!NOTE]
>  Die <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> Methode entspricht der <xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A> Methode der veralteten <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht, wie alle Schemas im Durchlaufen der <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Schemas : string -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Die Schema-<paramref name="targetNamespace" />-Eigenschaft.</param>
        <summary>Gibt im <see cref="T:System.Xml.Schema.XmlSchemaSet" /> eine Auflistung aller XSD-Schemas (XML Schema Definition Language) zurück, die zum entsprechenden Namespace gehören.</summary>
        <returns>Ein <see cref="T:System.Collections.ICollection" />-Objekt, das alle Schemas enthält, die dem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> hinzugefügt wurden, die zum entsprechenden Namespace gehören. Wenn dem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> keine Schemas hinzugefügt wurden, wird ein leeres <see cref="T:System.Collections.ICollection" />-Objekt zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die `targetNamespace` Parameter `null` oder <xref:System.String.Empty>, und klicken Sie dann alle Schemata ohne Namespace zurückgegeben werden.  
  
 Diese Methode gibt zurück, Schemas, die indirekt hinzugefügt wurden die <xref:System.Xml.Schema.XmlSchemaSet> , da sie importiert wurden.  
  
> [!NOTE]
>  Die <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> Methode entspricht der <xref:System.Xml.Schema.XmlSchemaCollection.Item%2A> Methode der veralteten <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht, wie alle Schemas im Durchlaufen der http://www.contoso.com/books -Namespace in der <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen Ereignishandler an, um Informationen über XSD-Schemavalidierungsfehler (XML Schema Definition Language) zu erhalten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legt einen Ereignishandler für den Empfang von Informationen über Fehler der Schema-Validierung bei der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> oder <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> Methoden der <xref:System.Xml.Schema.XmlSchemaSet> aufgerufen werden.  
  
 Wenn ein Ereignishandler nicht definiert ist, eine <xref:System.Xml.Schema.XmlSchemaException> Validierungsfehler ausgelöst wird, in denen die <xref:System.Xml.Schema.XmlSeverityType> ist <xref:System.Xml.Schema.XmlSeverityType.Error>. Ausnahmen werden nicht ausgelöst, Fehler bei der Validierung mit einem <xref:System.Xml.Schema.XmlSeverityType> von <xref:System.Xml.Schema.XmlSeverityType.Warning>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, Hinzufügen einer <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> Fehler und Warnungen zu erfassen, wenn ein XML-Dokument anhand eines Schemas überprüft.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 Im Beispiel wird die Datei books.xml als Eingabe an.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 Im Beispiel verwendet die books.xsd-Datei als Eingabe an.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Legt den <see cref="T:System.Xml.XmlResolver" /> fest, der verwendet wird, um Namespaces oder Speicherorte aufzulösen, auf die in Include- und Importelementen eines Schemas verwiesen wird.</summary>
        <value>Der <see cref="T:System.Xml.XmlResolver" />, der verwendet wird, um Namespaces oder Speicherorte aufzulösen, auf die in Include- und Importelementen eines Schemas verwiesen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlResolver> von einer <xref:System.Xml.Schema.XmlSchemaSet> wird verwendet, um aufzulösen, Namespaces oder Speicherorte in verwiesen wird, Include- und Importelementen eines Schemas, jedes Mal ein Schema hinzugefügt wird, mit der <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> oder <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Methoden.  
  
> [!IMPORTANT]
>  Einschließen von externen Namespaces oder Speicherorte in verwiesen wird, werden Import / neu definierten Elementen eines Schemas in Bezug auf der Basis-URI des Schemas aufgelöst, die eingefügt bzw. importiert werden. Angenommen, base-URI für das Einfügen oder das Importieren von Schema leer ist oder `null`, die externe Speicherorte werden in Bezug auf das aktuelle Verzeichnis aufgelöst. Die <xref:System.Xml.XmlUrlResolver> Klasse zum Auflösen von externen Schemata wird standardmäßig verwendet. Legen Sie zur Auflösung von einschließen, Import, deaktivieren und neu definieren die Elemente eines Schemas, die <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A> Eigenschaft `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="Extensions" FullName="System.Xml.Schema.Extensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="924b9c51d15b65a851c38380932061768351e90b" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82422088" /></Metadata><TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class Extensions abstract sealed" />
  <TypeSignature Language="F#" Value="type Extensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c8563-101">Diese Klasse enthält die LINQ-zu-XML-Erweiterungsmethoden zur XSD-Validierung.</span><span class="sxs-lookup"><span data-stu-id="c8563-101">This class contains the LINQ to XML extension methods for XSD validation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8563-102">Diese Klasse enthält auch Methoden, um das Post-Schema-Validation-Infoset (PSVI) eines validierten XML-Knotens abzurufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-102">This class also contains methods to get the post-schema-validation infoset (PSVI) of a validated XML node.</span></span>  
  
 <span data-ttu-id="c8563-103">Wenn Sie eine <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>oder <xref:System.Xml.Linq.XAttribute>überprüfen, können Sie optional auch die XML-Struktur mit dem Post-Schema-Validation-Infoset auffüllen.</span><span class="sxs-lookup"><span data-stu-id="c8563-103">When you validate an <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, or <xref:System.Xml.Linq.XAttribute>, you can also optionally populate the XML tree with the post-schema-validation infoset.</span></span> <span data-ttu-id="c8563-104">PSVI-Informationen werden als Anmerkung vom Typ <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=nameWithType>hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="c8563-104">PSVI information is added as an annotation of type <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8563-105">Die XSD in der [Beispiel-XSD-Datei: Customers und Orders](https://msdn.microsoft.com/library/8b05efe3-cc5e-4c7b-b322-892dbda41687) enthält ein Schema, das zum Validieren des XML-Dokuments in der [Beispiel-XML-Datei: Kunden und Bestellungen (LINQ to XML)](https://msdn.microsoft.com/library/26790c41-5976-4558-a096-d0f67bfc4d92)verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="c8563-105">The XSD in [Sample XSD File: Customers and Orders](https://msdn.microsoft.com/library/8b05efe3-cc5e-4c7b-b322-892dbda41687) contains a schema that can be used to validate the XML document in [Sample XML File: Customers and Orders (LINQ to XML)](https://msdn.microsoft.com/library/26790c41-5976-4558-a096-d0f67bfc4d92).</span></span> <span data-ttu-id="c8563-106">Im folgenden Beispiel werden das Schema und das Dokument geladen, das Dokument überprüft, das Dokument so geändert, dass die `xs:key`-und `xs:keyref` Beziehung ungültig ist, und versucht dann erneut, zu überprüfen.</span><span class="sxs-lookup"><span data-stu-id="c8563-106">The following example loads the schema and the document, validates the document, changes the document so that the `xs:key` and `xs:keyref` relationship is not valid, and then attempts to validate again.</span></span>  
  
```csharp  
  
                XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", "CustomersOrders.xsd");  
  
XDocument custOrd = XDocument.Load("CustomersOrders.xml");  
  
Console.WriteLine("Validating custOrd");  
bool errors = false;  
custOrd.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("custOrd {0}", errors ? "did not validate" : "validated");  
  
// Modify the custOrd tree so that it is no longer valid.  
custOrd.Root.Element("Orders").Element("Order").Element("CustomerID").Value = "AAAAA";  
  
Console.WriteLine();  
Console.WriteLine("Validating custOrd");  
errors = false;  
custOrd.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("custOrd {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", "CustomersOrders.xsd")  
  
    Console.WriteLine("Validating custOrd")  
    Dim custOrd As XDocument = XDocument.Load("CustomersOrders.xml")  
    errors = False  
    custOrd.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("custOrd {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating custOrd")  
    ' Modify the source document so that it will not validate.  
    custOrd.Root.Element("Orders").Element("Order").Element("CustomerID").Value = "AAAAA"  
    errors = False  
    custOrd.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("custOrd {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="c8563-107">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="c8563-107">This example produces the following output:</span></span>  
  
```  
Validating custOrd  
custOrd validated  
  
Validating custOrd  
The key sequence 'AAAAA' in Keyref fails to refer to some key.  
custOrd did not validate  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetSchemaInfo">
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c8563-108">Ruft das Post-Schema-Validation-Infoset (PSVI) eines validierten Knotens ab.</span><span class="sxs-lookup"><span data-stu-id="c8563-108">Gets the post-schema-validation infoset (PSVI) of a validated node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8563-109">Nachdem Sie einen <xref:System.Xml.Linq.XDocument>überprüft haben, können Sie das Post-Schema-Validation-Infoset für eine <xref:System.Xml.Linq.XElement> oder <xref:System.Xml.Linq.XAttribute> abrufen, die im Dokument enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="c8563-109">After you have validated an <xref:System.Xml.Linq.XDocument>, you can retrieve the post-schema-validation infoset for an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> that is contained in the document.</span></span>  
  
 <span data-ttu-id="c8563-110">Nachdem Sie das <xref:System.Xml.Schema.IXmlSchemaInfo>-Objekt abgerufen haben, können Sie mit den Eigenschaften <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> oder <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> einen partiellen Validierungstyp (<xref:System.Xml.Schema.XmlSchemaElement> oder <xref:System.Xml.Schema.XmlSchemaAttribute>) abrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-110">After retrieving the <xref:System.Xml.Schema.IXmlSchemaInfo> object, you can use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> or <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> properties to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement> or <xref:System.Xml.Schema.XmlSchemaAttribute>).</span></span> <span data-ttu-id="c8563-111">Mit den partiellen Validierungs Typen können Sie ein Attribut oder eine Unterstruktur überprüfen.</span><span class="sxs-lookup"><span data-stu-id="c8563-111">You can use the partial validation types to validate an attribute or a sub-tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSchemaInfo">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XAttribute source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(class System.Xml.Linq.XAttribute source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaInfo (source As XAttribute) As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Xml::Schema::IXmlSchemaInfo ^ GetSchemaInfo(System::Xml::Linq::XAttribute ^ source);" />
      <MemberSignature Language="F#" Value="static member GetSchemaInfo : System.Xml.Linq.XAttribute -&gt; System.Xml.Schema.IXmlSchemaInfo" Usage="System.Xml.Schema.Extensions.GetSchemaInfo source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="c8563-112">Ein <see cref="T:System.Xml.Linq.XAttribute" />, das zuvor validiert wurde.</span><span class="sxs-lookup"><span data-stu-id="c8563-112">An <see cref="T:System.Xml.Linq.XAttribute" /> that has been previously validated.</span></span></param>
        <summary><span data-ttu-id="c8563-113">Ruft das Post-Schema-Validation-Infoset (PSVI) eines validierten Attributs ab.</span><span class="sxs-lookup"><span data-stu-id="c8563-113">Gets the post-schema-validation infoset (PSVI) of a validated attribute.</span></span></summary>
        <returns><span data-ttu-id="c8563-114">Eine <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />, die das Post-Schema-Validation-Infoset für ein <see cref="T:System.Xml.Linq.XAttribute" /> enthält.</span><span class="sxs-lookup"><span data-stu-id="c8563-114">A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset for an <see cref="T:System.Xml.Linq.XAttribute" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8563-115">Sie können die von dieser Methode zurückgegebenen <xref:System.Xml.Schema.IXmlSchemaInfo> verwenden, um bestimmte Merkmale eines validierten Attributs zu bestimmen.</span><span class="sxs-lookup"><span data-stu-id="c8563-115">You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated attribute.</span></span> <span data-ttu-id="c8563-116">Beispielsweise können Sie bestimmen, ob das Attribut von einem Standard Attribut Wert in einer XSD stammt.</span><span class="sxs-lookup"><span data-stu-id="c8563-116">For example, you can determine if the attribute came from a default attribute value in an XSD.</span></span>  
  
 <span data-ttu-id="c8563-117">Verwenden Sie die <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A>-Eigenschaft, um einen partiellen Validierungstyp (<xref:System.Xml.Schema.XmlSchemaAttribute>) zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="c8563-117">You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaAttribute>).</span></span> <span data-ttu-id="c8563-118">Sie können es zum erneuten Validieren eines Attributs verwenden, ohne ein gesamtes Dokument zu validieren.</span><span class="sxs-lookup"><span data-stu-id="c8563-118">You can use it to revalidate an attribute without validating an entire document.</span></span>  
  
 <span data-ttu-id="c8563-119">Ein Beispiel für diese Eigenschaft finden Sie unter <xref:System.Xml.Schema.Extensions.Validate%2A>.</span><span class="sxs-lookup"><span data-stu-id="c8563-119">For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaInfo">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XElement source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(class System.Xml.Linq.XElement source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaInfo (source As XElement) As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Xml::Schema::IXmlSchemaInfo ^ GetSchemaInfo(System::Xml::Linq::XElement ^ source);" />
      <MemberSignature Language="F#" Value="static member GetSchemaInfo : System.Xml.Linq.XElement -&gt; System.Xml.Schema.IXmlSchemaInfo" Usage="System.Xml.Schema.Extensions.GetSchemaInfo source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="c8563-120">Ein <see cref="T:System.Xml.Linq.XElement" />, das zuvor validiert wurde.</span><span class="sxs-lookup"><span data-stu-id="c8563-120">An <see cref="T:System.Xml.Linq.XElement" /> that has been previously validated.</span></span></param>
        <summary><span data-ttu-id="c8563-121">Ruft das Post-Schema-Validation-Infoset (PSVI) eines validierten Elements ab.</span><span class="sxs-lookup"><span data-stu-id="c8563-121">Gets the post-schema-validation infoset (PSVI) of a validated element.</span></span></summary>
        <returns><span data-ttu-id="c8563-122">Eine <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />, die das Post-Schema-Validation-Infoset (PSVI) für ein <see cref="T:System.Xml.Linq.XElement" /> enthält.</span><span class="sxs-lookup"><span data-stu-id="c8563-122">A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset (PSVI) for an <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8563-123">Sie können die von dieser Methode zurückgegebenen <xref:System.Xml.Schema.IXmlSchemaInfo> verwenden, um bestimmte Merkmale eines validierten Elements zu bestimmen.</span><span class="sxs-lookup"><span data-stu-id="c8563-123">You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated element.</span></span> <span data-ttu-id="c8563-124">Beispielsweise können Sie den dynamischen Schematyp des Elements bestimmen.</span><span class="sxs-lookup"><span data-stu-id="c8563-124">For example, you can determine the dynamic schema type of the element.</span></span>  
  
 <span data-ttu-id="c8563-125">Verwenden Sie die <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A>-Eigenschaft, um einen partiellen Validierungstyp (<xref:System.Xml.Schema.XmlSchemaElement>) zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="c8563-125">You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement>).</span></span> <span data-ttu-id="c8563-126">Sie können Sie verwenden, um eine Unterstruktur mit einem Element im Stammverzeichnis erneut zu validieren, ohne ein gesamtes Dokument zu überprüfen.</span><span class="sxs-lookup"><span data-stu-id="c8563-126">You can use it to revalidate a sub-tree with an element at its root without validating an entire document.</span></span>  
  
 <span data-ttu-id="c8563-127">Ein Beispiel für diese Eigenschaft finden Sie unter <xref:System.Xml.Schema.Extensions.Validate%2A>.</span><span class="sxs-lookup"><span data-stu-id="c8563-127">For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8563-128">Im folgenden Beispiel wird die-Struktur mit einem PSVI aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="c8563-128">The following example populates the tree with a PSVI.</span></span> <span data-ttu-id="c8563-129">Nach der Überprüfung werden alle in der-Struktur ungültigen Elemente und Attribute ausgegeben, die gemäß der PSVI ungültig sind.</span><span class="sxs-lookup"><span data-stu-id="c8563-129">After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.</span></span>  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
    string xsdMarkup =  
         @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
   <xsd:simpleType name='GCType'>  
    <xsd:restriction base='xsd:token'>  
     <xsd:enumeration value='AAA'/>  
     <xsd:enumeration value='BBB'/>  
    </xsd:restriction>  
   </xsd:simpleType>  
   <xsd:element name='Root'>  
    <xsd:complexType>  
     <xsd:sequence>  
      <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
       <xsd:complexType>  
        <xsd:sequence>  
         <xsd:element name='GrandChild1' type='GCType'/>  
         <xsd:element name='GrandChild2' type='GCType'/>  
         <xsd:element name='GrandChild3' type='GCType'/>  
        </xsd:sequence>  
       </xsd:complexType>  
      </xsd:element>  
     </xsd:sequence>  
    </xsd:complexType>  
   </xsd:element>  
  </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XElement("Child1",  
                new XElement("GrandChild1", "AAA"),  
                new XElement("GrandChild2", "ZZZ"),  
                new XElement("GrandChild3", "ZZZ")  
            )  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:simpleType name='GCType'>  
            <xsd:restriction base='xsd:token'>  
                <xsd:enumeration value='AAA'/>  
                <xsd:enumeration value='BBB'/>  
            </xsd:restriction>  
        </xsd:simpleType>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                        <xsd:complexType>  
                            <xsd:sequence>  
                                <xsd:element name='GrandChild1' type='GCType'/>  
                                <xsd:element name='GrandChild2' type='GCType'/>  
                                <xsd:element name='GrandChild3' type='GCType'/>  
                            </xsd:sequence>  
                        </xsd:complexType>  
                    </xsd:element>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>  
            <GrandChild1>AAA</GrandChild1>  
            <GrandChild2>ZZZ</GrandChild2>  
            <GrandChild3>ZZZ</GrandChild3>  
        </Child1>  
    </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="c8563-130">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="c8563-130">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
The 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
The 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
doc1 did not validate  
Invalid Element /Root  
Invalid Element /Root/Child1  
Invalid Element /Root/Child1/GrandChild2  
Invalid Element /Root/Child1/GrandChild3  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c8563-131">Validiert, ob ein <see cref="T:System.Xml.Linq.XDocument" />, ein <see cref="T:System.Xml.Linq.XElement" /> oder ein <see cref="T:System.Xml.Linq.XAttribute" /> einer XSD in einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-131">Validates that an <see cref="T:System.Xml.Linq.XDocument" />, an <see cref="T:System.Xml.Linq.XElement" />, or an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8563-132">Diese Methoden verwenden eine zugrunde liegende <xref:System.Xml.XmlReader>, um die XML-Struktur anhand einer XSD zu validieren.</span><span class="sxs-lookup"><span data-stu-id="c8563-132">These methods use an underlying <xref:System.Xml.XmlReader> to validate the XML tree against an XSD.</span></span>  
  
 <span data-ttu-id="c8563-133">Validierungs Fehler und Warnmeldungen werden mithilfe des <xref:System.Xml.Schema.ValidationEventHandler> Delegaten behandelt.</span><span class="sxs-lookup"><span data-stu-id="c8563-133">Validation error and warning messages are handled using the <xref:System.Xml.Schema.ValidationEventHandler> delegate.</span></span> <span data-ttu-id="c8563-134">Wenn für diese Methoden kein Ereignishandler bereitgestellt wird, werden Validierungs Fehler als <xref:System.Xml.Schema.XmlSchemaValidationException>verfügbar gemacht.</span><span class="sxs-lookup"><span data-stu-id="c8563-134">If no event handler is provided to these methods, validation errors are exposed as an <xref:System.Xml.Schema.XmlSchemaValidationException>.</span></span> <span data-ttu-id="c8563-135">Validierungs Warnungen bewirken nicht, dass eine <xref:System.Xml.Schema.XmlSchemaValidationException> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="c8563-135">Validation warnings do not cause an <xref:System.Xml.Schema.XmlSchemaValidationException> to be thrown.</span></span>  
  
 <span data-ttu-id="c8563-136">Einige dieser Erweiterungs Methoden ermöglichen optional das Auffüllen des postschema-Validation-Infosets (PSVI).</span><span class="sxs-lookup"><span data-stu-id="c8563-136">Some of these extension methods optionally allow population of the post-schema-validation infoset (PSVI).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XDocument source, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XDocument, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XDocument ^ source, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XDocument * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, schemas, validationEventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XDocument" RefType="this" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="c8563-137">Der zu überprüfende <see cref="T:System.Xml.Linq.XDocument" />.</span><span class="sxs-lookup"><span data-stu-id="c8563-137">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="c8563-138">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, gegen das geprüft wird.</span><span class="sxs-lookup"><span data-stu-id="c8563-138">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="c8563-139">Ein <see cref="T:System.Xml.Schema.ValidationEventHandler" /> für ein Ereignis, das eintritt, wenn der Reader Validierungsfehler empfängt.</span><span class="sxs-lookup"><span data-stu-id="c8563-139">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="c8563-140">Mit dem Wert <see langword="null" /> wird bei Validierungsfehlern eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-140">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="c8563-141">Diese Methode validiert, ob ein <see cref="T:System.Xml.Linq.XDocument" /> einer XSD in einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-141">This method validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8563-142">Diese Erweiterungsmethode überprüft, ob die <xref:System.Xml.Linq.XDocument> dem Schema Inhalts Modell in <xref:System.Xml.Schema.XmlSchemaSet>entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-142">This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8563-143">Das folgende Beispiel erstellt ein <xref:System.Xml.Schema.XmlSchemaSet> und validiert dann anhand des Schemasatzes die beiden <xref:System.Xml.Linq.XDocument>-Objekte.</span><span class="sxs-lookup"><span data-stu-id="c8563-143">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set.</span></span> <span data-ttu-id="c8563-144">Eines der Dokumente ist gültig, das andere nicht.</span><span class="sxs-lookup"><span data-stu-id="c8563-144">One of the documents is valid, the other is not.</span></span>  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child2", "content1")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>content1</Child1>  
        <Child2>content2</Child2>  
    </Root>  
  
    Dim doc2 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>content1</Child1>  
        <Child3>content1</Child3>  
    </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="c8563-145">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="c8563-145">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="c8563-146">Wird bei XSD (XML Schema Definition Language)-Validierungsfehlern ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-146">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XAttribute source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XAttribute, partialValidationType As XmlSchemaObject, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XAttribute ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XAttribute * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="c8563-147">Der zu überprüfende <see cref="T:System.Xml.Linq.XAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="c8563-147">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="c8563-148">Ein <see cref="T:System.Xml.Schema.XmlSchemaObject" />, das die zu validierende Teilstruktur angibt.</span><span class="sxs-lookup"><span data-stu-id="c8563-148">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="c8563-149">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, gegen das geprüft wird.</span><span class="sxs-lookup"><span data-stu-id="c8563-149">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="c8563-150">Ein <see cref="T:System.Xml.Schema.ValidationEventHandler" /> für ein Ereignis, das eintritt, wenn der Reader Validierungsfehler empfängt.</span><span class="sxs-lookup"><span data-stu-id="c8563-150">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="c8563-151">Mit dem Wert <see langword="null" /> wird bei Validierungsfehlern eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-151">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="c8563-152">Diese Methode validiert, ob ein <see cref="T:System.Xml.Linq.XAttribute" /> einem angegebenen <see cref="T:System.Xml.Schema.XmlSchemaObject" /> und einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-152">This method validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8563-153">Mit dieser Methode können Sie überprüfen, ob ein <xref:System.Xml.Linq.XAttribute> einem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-153">You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema.</span></span> <span data-ttu-id="c8563-154">Diese Methode wird normalerweise verwendet, wenn Sie ein Attribut geändert haben, und Sie möchten sicherstellen, dass es weiterhin dem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-154">You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="c8563-155">Sie könnten das gesamte Dokument überprüfen, aber es dauert weniger Verarbeitungszeit, um nur das Attribut zu validieren.</span><span class="sxs-lookup"><span data-stu-id="c8563-155">You could validate the entire document, but it takes less processing time to validate just the attribute.</span></span>  
  
 <span data-ttu-id="c8563-156">Wenn Sie `null` für `validationEventHandler`übergeben, löst diese Methode bei Validierungs Fehlern eine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="c8563-156">If you pass `null` for `validationEventHandler`, this method raises an exception upon validation errors.</span></span> <span data-ttu-id="c8563-157">Validierungs Warnungen werden keine Ausnahme auslöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-157">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="c8563-158">Zum Validieren eines Attributs verwenden Sie eine Instanz von <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="c8563-158">To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="c8563-159">Sie können diese Instanz auf verschiedene Weise abrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-159">You can obtain this instance in various ways.</span></span> <span data-ttu-id="c8563-160">Eine einfache Möglichkeit ist die folgende:</span><span class="sxs-lookup"><span data-stu-id="c8563-160">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="c8563-161">Überprüfen Sie, ob ein Dokument einem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-161">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="c8563-162">Fügen Sie das Post-Schema-Validation-Infoset (PSVI) hinzu, indem Sie die <xref:System.Xml.Schema.Extensions.Validate%2A>-Erweiterungsmethode aufrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-162">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="c8563-163">Rufen Sie die <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>-Erweiterungsmethode auf, um ein Objekt abzurufen, das <xref:System.Xml.Schema.IXmlSchemaInfo>implementiert.</span><span class="sxs-lookup"><span data-stu-id="c8563-163">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="c8563-164">Aus dem abgerufenen Objekt können Sie eine <xref:System.Xml.Schema.XmlSchemaObject>abrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-164">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="c8563-165">Wenn Sie eine <xref:System.Xml.Schema.XmlSchemaObject> für eine <xref:System.Xml.Linq.XElement>erhalten, wird der Typ <xref:System.Xml.Schema.XmlSchemaElement>.</span><span class="sxs-lookup"><span data-stu-id="c8563-165">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="c8563-166">Wenn Sie eine <xref:System.Xml.Schema.XmlSchemaObject> für eine <xref:System.Xml.Linq.XAttribute>erhalten, wird der Typ <xref:System.Xml.Schema.XmlSchemaAttribute>.</span><span class="sxs-lookup"><span data-stu-id="c8563-166">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="c8563-167">Nachdem Sie eine Instanz eines <xref:System.Xml.Schema.XmlSchemaObject>haben, können Sie mit dieser Methode ein Attribut validieren.</span><span class="sxs-lookup"><span data-stu-id="c8563-167">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:simpleContent>  
          <xsd:extension base='xsd:string'>  
           <xsd:attribute name='Lang' use='required'>  
            <xsd:simpleType>  
             <xsd:restriction base='xsd:token'>  
              <xsd:enumeration value='C#'/>  
              <xsd:enumeration value='VB'/>  
             </xsd:restriction>  
            </xsd:simpleType>  
           </xsd:attribute>  
          </xsd:extension>  
         </xsd:simpleContent>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XAttribute("Lang", "C#")  
    )  
);  
  
Console.WriteLine("Validating doc1 ...");  
bool errors = false;  
doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating Lang attribute ...");  
XAttribute lang = doc1.Root.Attribute("Lang");  
  
errors = false;  
lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
  
// the following makes the Lang attribute invalid according to the schema  
lang.Value = "VC";  
  
Console.WriteLine();  
Console.WriteLine("Validating Lang attribute ...");  
  
errors = false;  
lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
      <?xml version='1.0'?>  
      <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
          <xsd:element name='Root'>  
              <xsd:complexType>  
                  <xsd:simpleContent>  
                      <xsd:extension base='xsd:string'>  
                          <xsd:attribute name='Lang' use='required'>  
                              <xsd:simpleType>  
                                  <xsd:restriction base='xsd:token'>  
                                      <xsd:enumeration value='C#'/>  
                                      <xsd:enumeration value='VB'/>  
                                  </xsd:restriction>  
                              </xsd:simpleType>  
                          </xsd:attribute>  
                      </xsd:extension>  
                  </xsd:simpleContent>  
              </xsd:complexType>  
          </xsd:element>  
      </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root Lang='C#'/>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
    Dim lang As XAttribute = doc1.Root.Attribute("Lang")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
  
    ' the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC"  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="c8563-168">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="c8563-168">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Lang attribute ...  
lang validated  
  
Validating Lang attribute ...  
The 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  
lang did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="c8563-169">Wird bei XSD (XML Schema Definition Language)-Validierungsfehlern ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-169">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XDocument source, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XDocument, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler, addSchemaInfo As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XDocument ^ source, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XDocument * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler * bool -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, schemas, validationEventHandler, addSchemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XDocument" RefType="this" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="c8563-170">Der zu überprüfende <see cref="T:System.Xml.Linq.XDocument" />.</span><span class="sxs-lookup"><span data-stu-id="c8563-170">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="c8563-171">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, gegen das geprüft wird.</span><span class="sxs-lookup"><span data-stu-id="c8563-171">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="c8563-172">Ein <see cref="T:System.Xml.Schema.ValidationEventHandler" /> für ein Ereignis, das eintritt, wenn der Reader Validierungsfehler empfängt.</span><span class="sxs-lookup"><span data-stu-id="c8563-172">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="c8563-173">Mit dem Wert <see langword="null" /> wird bei Validierungsfehlern eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-173">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="c8563-174">Ein <see cref="T:System.Boolean" />, der angibt, ob das Post-Schema-Validation-Infoset (PSVI) aufgefüllt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c8563-174">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="c8563-175">Validiert, ob ein <see cref="T:System.Xml.Linq.XDocument" /> einer XSD in einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> entspricht, und füllt die XML-Struktur optional mit dem Post-Schema-Validation-Infoset (PSVI) auf.</span><span class="sxs-lookup"><span data-stu-id="c8563-175">Validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8563-176">Diese Erweiterungsmethode überprüft, ob die <xref:System.Xml.Linq.XDocument> dem Schema Inhalts Modell in <xref:System.Xml.Schema.XmlSchemaSet>entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-176">This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.</span></span>  
  
 <span data-ttu-id="c8563-177">Wenn `addSchemaInfo` `true`ist, füllt diese Methode die XML-Struktur mit dem Post-Schema-Validation-Infoset (PSVI) auf.</span><span class="sxs-lookup"><span data-stu-id="c8563-177">If `addSchemaInfo` is `true`, this method populates the XML tree with the post-schema-validation infoset (PSVI).</span></span>  
  
 <span data-ttu-id="c8563-178">Zum Auffüllen der XML-Struktur mit der PSVI müssen zwei Schritte ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c8563-178">There are two steps to populating the XML tree with the PSVI.</span></span>  
  
1.  <span data-ttu-id="c8563-179">Zuerst wird eine Anmerkung zu allen Knoten in der Struktur hinzugefügt, sodass Sie <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> oder <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> auf einem Element oder Attribut in der Struktur aufzurufen können.</span><span class="sxs-lookup"><span data-stu-id="c8563-179">First, an annotation is added to all nodes in the tree to enable you to call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> or <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> on an element or attribute in the tree.</span></span>  
  
2.  <span data-ttu-id="c8563-180">Zweitens werden der XML-Struktur Standardelemente und Attribute hinzugefügt, die in der XSD definiert sind.</span><span class="sxs-lookup"><span data-stu-id="c8563-180">Second, default elements and attributes defined in the XSD are added to the XML tree.</span></span> <span data-ttu-id="c8563-181">Indem Sie eine der <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>-Methoden aufrufen, können Sie bestimmen, ob ein bestimmtes Element oder Attribut aus XSD als Standardelement oder-Attribut hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="c8563-181">By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8563-182">Das folgende Beispiel enthält ein XSD-Element, das das `Child2`-Element mit einem `Att1`-Attribut mit einem Standardwert definiert.</span><span class="sxs-lookup"><span data-stu-id="c8563-182">The following example contains an XSD that defines the `Child2` element with an `Att1` attribute with a default value.</span></span> <span data-ttu-id="c8563-183">Nachdem das Dokument erfolgreich überprüft wurde, wird das Attribut mit dem Standardwert der XML-Struktur hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="c8563-183">After successfully validating the document, the attribute with the default value is added to the XML tree.</span></span> <span data-ttu-id="c8563-184">Beachten Sie, dass das default-Attribut nicht `doc2`hinzugefügt wird, das nicht anhand des Schemas überprüft wird.</span><span class="sxs-lookup"><span data-stu-id="c8563-184">Note that the default attribute is not added to `doc2`, which does not validate against the schema.</span></span>  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:simpleContent>  
             <xsd:extension base='xsd:string'>  
              <xsd:attribute name='Att1' default='Att1 Default Value'/>  
             </xsd:extension>  
            </xsd:simpleContent>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "c1"),  
        new XElement("Child2", "c2")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                           {  
                               Console.WriteLine("{0}", e.Message);  
                               errors = true;  
                           }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc1:");  
Console.WriteLine(doc1);  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc2:");  
Console.WriteLine(doc2);  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
                        <xsd:complexType>  
                            <xsd:simpleContent>  
                                <xsd:extension base='xsd:string'>  
                                    <xsd:attribute name='Att1' default='Att1 Default Value'/>  
                                </xsd:extension>  
                            </xsd:simpleContent>  
                        </xsd:complexType>  
                    </xsd:element>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root>  
                                <Child1>c1</Child1>  
                                <Child2>c2</Child2>  
                            </Root>  
    Dim doc2 As XDocument = <?xml version='1.0'?>  
                            <Root>  
                                <Child1>content1</Child1>  
                                <Child3>content1</Child3>  
                            </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc1:")  
    Console.WriteLine(doc1)  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc2:")  
    Console.WriteLine(doc2)  
End Sub  
```  
  
 <span data-ttu-id="c8563-185">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="c8563-185">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
  
Contents of doc1:  
<Root>  
  <Child1>c1</Child1>  
  <Child2 Att1="Att1 Default Value">c2</Child2>  
</Root>  
  
Contents of doc2:  
<Root>  
  <Child1>content1</Child1>  
  <Child3>content1</Child3>  
</Root>  
```  
  
 <span data-ttu-id="c8563-186">Im folgenden Beispiel wird die-Struktur mit PSVI aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="c8563-186">The following example populates the tree with PSVI.</span></span> <span data-ttu-id="c8563-187">Nach der Überprüfung werden alle in der-Struktur ungültigen Elemente und Attribute ausgegeben, die gemäß der PSVI ungültig sind.</span><span class="sxs-lookup"><span data-stu-id="c8563-187">After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.</span></span>  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
   string xsdMarkup =  
        @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
           <xsd:simpleType name='GCType'>  
            <xsd:restriction base='xsd:token'>  
             <xsd:enumeration value='AAA'/>  
             <xsd:enumeration value='BBB'/>  
            </xsd:restriction>  
           </xsd:simpleType>  
           <xsd:element name='Root'>  
            <xsd:complexType>  
             <xsd:sequence>  
              <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
               <xsd:complexType>  
                <xsd:sequence>  
                 <xsd:element name='GrandChild1' type='GCType'/>  
                 <xsd:element name='GrandChild2' type='GCType'/>  
                 <xsd:element name='GrandChild3' type='GCType'/>  
                </xsd:sequence>  
               </xsd:complexType>  
              </xsd:element>  
             </xsd:sequence>  
            </xsd:complexType>  
           </xsd:element>  
          </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XElement("Child1",  
                new XElement("GrandChild1", "AAA"),  
                new XElement("GrandChild2", "ZZZ"),  
                new XElement("GrandChild3", "ZZZ")  
            )  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
        {  
            Console.WriteLine(e.Message);  
            errors = true;  
        }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:simpleType name='GCType'>  
                <xsd:restriction base='xsd:token'>  
                    <xsd:enumeration value='AAA'/>  
                    <xsd:enumeration value='BBB'/>  
                </xsd:restriction>  
            </xsd:simpleType>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:sequence>  
                                    <xsd:element name='GrandChild1' type='GCType'/>  
                                    <xsd:element name='GrandChild2' type='GCType'/>  
                                    <xsd:element name='GrandChild3' type='GCType'/>  
                                </xsd:sequence>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>  
                <GrandChild1>AAA</GrandChild1>  
                <GrandChild2>ZZZ</GrandChild2>  
                <GrandChild3>ZZZ</GrandChild3>  
            </Child1>  
        </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="c8563-188">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="c8563-188">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
The 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
The 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
doc1 did not validate  
Invalid Element /Root  
Invalid Element /Root/Child1  
Invalid Element /Root/Child1/GrandChild2  
Invalid Element /Root/Child1/GrandChild3  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="c8563-189">Wird bei XSD (XML Schema Definition Language)-Validierungsfehlern ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-189">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XElement source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XElement, partialValidationType As XmlSchemaObject, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XElement ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XElement * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="c8563-190">Der zu überprüfende <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="c8563-190">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="c8563-191">Ein <see cref="T:System.Xml.Schema.XmlSchemaObject" />, das die zu validierende Teilstruktur angibt.</span><span class="sxs-lookup"><span data-stu-id="c8563-191">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="c8563-192">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, gegen das geprüft wird.</span><span class="sxs-lookup"><span data-stu-id="c8563-192">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="c8563-193">Ein <see cref="T:System.Xml.Schema.ValidationEventHandler" /> für ein Ereignis, das eintritt, wenn der Reader Validierungsfehler empfängt.</span><span class="sxs-lookup"><span data-stu-id="c8563-193">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="c8563-194">Mit dem Wert <see langword="null" /> wird bei Validierungsfehlern eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-194">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <summary><span data-ttu-id="c8563-195">Diese Methode validiert, ob eine <see cref="T:System.Xml.Linq.XElement" />-Teilstruktur einem angegebenen <see cref="T:System.Xml.Schema.XmlSchemaObject" /> und einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-195">This method validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8563-196">Mit dieser Methode können Sie überprüfen, ob eine Teilstruktur (mit einer <xref:System.Xml.Linq.XElement> an ihrem Stamm) einem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-196">You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at its root) conforms to a schema.</span></span> <span data-ttu-id="c8563-197">Normalerweise verwenden Sie diese Methode, wenn Sie eine Unterstruktur geändert haben, und Sie möchten sicherstellen, dass Sie weiterhin ihrem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-197">You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="c8563-198">Sie könnten das gesamte Dokument überprüfen, aber es dauert weniger Verarbeitungszeit, um nur eine Unterstruktur zu validieren.</span><span class="sxs-lookup"><span data-stu-id="c8563-198">You could validate the entire document, but it takes less processing time to validate a just a sub-tree.</span></span>  
  
 <span data-ttu-id="c8563-199">Wenn Sie `null` für `validationEventHandler`übergeben, löst diese Methode bei Validierungs Fehlern eine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="c8563-199">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="c8563-200">Validierungs Warnungen werden keine Ausnahme auslöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-200">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="c8563-201">Um eine Unterstruktur zu validieren, verwenden Sie eine Instanz von <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="c8563-201">To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="c8563-202">Sie können diese Instanz auf verschiedene Weise abrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-202">You can obtain this instance in various ways.</span></span> <span data-ttu-id="c8563-203">Eine einfache Möglichkeit ist die folgende:</span><span class="sxs-lookup"><span data-stu-id="c8563-203">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="c8563-204">Überprüfen Sie, ob ein Dokument einem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-204">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="c8563-205">Fügen Sie das Post-Schema-Validation-Infoset (PSVI) hinzu, indem Sie die <xref:System.Xml.Schema.Extensions.Validate%2A>-Erweiterungsmethode aufrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-205">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="c8563-206">Rufen Sie die <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>-Erweiterungsmethode auf, um ein Objekt abzurufen, das <xref:System.Xml.Schema.IXmlSchemaInfo>implementiert.</span><span class="sxs-lookup"><span data-stu-id="c8563-206">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="c8563-207">Aus dem abgerufenen Objekt können Sie eine <xref:System.Xml.Schema.XmlSchemaObject>abrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-207">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="c8563-208">Wenn Sie eine <xref:System.Xml.Schema.XmlSchemaObject> für eine <xref:System.Xml.Linq.XElement>erhalten, wird der Typ <xref:System.Xml.Schema.XmlSchemaElement>.</span><span class="sxs-lookup"><span data-stu-id="c8563-208">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="c8563-209">Wenn Sie eine <xref:System.Xml.Schema.XmlSchemaObject> für eine <xref:System.Xml.Linq.XAttribute>erhalten, wird der Typ <xref:System.Xml.Schema.XmlSchemaAttribute>.</span><span class="sxs-lookup"><span data-stu-id="c8563-209">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="c8563-210">Nachdem Sie eine Instanz eines <xref:System.Xml.Schema.XmlSchemaObject>haben, können Sie diese Methode verwenden, um eine Unterstruktur zu validieren.</span><span class="sxs-lookup"><span data-stu-id="c8563-210">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an sub-tree.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:sequence>  
             <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  
             <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  
            </xsd:sequence>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1",  
            new XElement("GrandChild1", "gc"),  
            new XElement("GrandChild2", "gc")  
        )  
    )  
);  
  
Console.WriteLine("Validating doc1 ...");  
bool errors = false;  
doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating Child1 after first edit ...");  
XElement child1 = doc1.Element("Root").Element("Child1");  
child1.Add(new XElement("GrandChild2", "gc"));  
errors = false;  
child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("child1 {0}", errors ? "did not validate" : "validated");  
  
// the following makes the Child1 element invalid according to the schema  
child1.Add(new XElement("GrandChild3", "gc"));  
Console.WriteLine();  
Console.WriteLine("Validating Child1 after second edit ...");  
child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("child1 {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:sequence>  
                                    <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  
                                    <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  
                                </xsd:sequence>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>  
                <GrandChild1>gc</GrandChild1>  
                <GrandChild2>gc</GrandChild2>  
            </Child1>  
        </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Child1 after first edit ...")  
    Dim child1 As XElement = doc1.Element("Root").Element("Child1")  
    child1.Add(<GrandChild2>gc</GrandChild2>)  
    errors = False  
    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  
    Console.WriteLine("child1 {0}", IIf(errors, "did not validate", "validated"))  
  
    ' the following makes the Child1 element invalid according to the schema  
    child1.Add(<GrandChild3>gc</GrandChild3>)  
    Console.WriteLine()  
    Console.WriteLine("Validating Child1 after second edit ...")  
    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  
    Console.WriteLine("child1 {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="c8563-211">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="c8563-211">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Child1 after first edit ...  
child1 validated  
  
Validating Child1 after second edit ...  
The element 'Child1' has invalid child element 'GrandChild3'.  
child1 did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="c8563-212">Wird bei XSD (XML Schema Definition Language)-Validierungsfehlern ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-212">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XAttribute source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XAttribute, partialValidationType As XmlSchemaObject, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler, addSchemaInfo As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XAttribute ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XAttribute * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler * bool -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler, addSchemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="c8563-213">Der zu überprüfende <see cref="T:System.Xml.Linq.XAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="c8563-213">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="c8563-214">Ein <see cref="T:System.Xml.Schema.XmlSchemaObject" />, das die zu validierende Teilstruktur angibt.</span><span class="sxs-lookup"><span data-stu-id="c8563-214">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="c8563-215">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, gegen das geprüft wird.</span><span class="sxs-lookup"><span data-stu-id="c8563-215">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="c8563-216">Ein <see cref="T:System.Xml.Schema.ValidationEventHandler" /> für ein Ereignis, das eintritt, wenn der Reader Validierungsfehler empfängt.</span><span class="sxs-lookup"><span data-stu-id="c8563-216">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="c8563-217">Mit dem Wert <see langword="null" /> wird bei Validierungsfehlern eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-217">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="c8563-218">Ein <see cref="T:System.Boolean" />, der angibt, ob das Post-Schema-Validation-Infoset (PSVI) aufgefüllt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c8563-218">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="c8563-219">Validiert, ob ein <see cref="T:System.Xml.Linq.XAttribute" /> einem angegebenen <see cref="T:System.Xml.Schema.XmlSchemaObject" /> und einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> entspricht, und füllt die XML-Struktur optional mit dem Post-Schema-Validation-Infoset (PSVI) auf.</span><span class="sxs-lookup"><span data-stu-id="c8563-219">Validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8563-220">Mit dieser Methode können Sie überprüfen, ob ein <xref:System.Xml.Linq.XAttribute> einem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-220">You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema.</span></span> <span data-ttu-id="c8563-221">Diese Methode wird normalerweise verwendet, wenn Sie ein Attribut geändert haben, und Sie möchten sicherstellen, dass es weiterhin dem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-221">You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="c8563-222">Sie könnten das gesamte Dokument überprüfen, aber es dauert weniger Verarbeitungszeit, um nur das Attribut zu validieren.</span><span class="sxs-lookup"><span data-stu-id="c8563-222">You could validate the entire document, but it takes less processing time to validate just the attribute.</span></span>  
  
 <span data-ttu-id="c8563-223">Wenn `addSchemaInfo` `true`ist, füllt diese Methode das-Attribut mit dem Post-Schema-Validation-Infoset (PSVI) auf.</span><span class="sxs-lookup"><span data-stu-id="c8563-223">If `addSchemaInfo` is `true`, this method populates the attribute with the post-schema-validation infoset (PSVI).</span></span> <span data-ttu-id="c8563-224">Nachdem Sie die XML-Struktur mit der PSVI aufgefüllt haben, können Sie <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> für das validierte Attribut abrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-224">After you have populated the XML tree with the PSVI, you can call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> on the validated attribute.</span></span> <span data-ttu-id="c8563-225">Dies ist hilfreich, wenn Sie Code schreiben, der auf Daten basiert, die von <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="c8563-225">This is useful if you are writing code that relies on data returned by <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.</span></span>  
  
 <span data-ttu-id="c8563-226">Wenn Sie `null` für `validationEventHandler`übergeben, löst diese Methode bei Validierungs Fehlern eine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="c8563-226">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="c8563-227">Validierungs Warnungen werden keine Ausnahme auslöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-227">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="c8563-228">Zum Validieren eines Attributs verwenden Sie eine Instanz von <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="c8563-228">To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="c8563-229">Sie können diese Instanz auf verschiedene Weise abrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-229">You can obtain this instance in various ways.</span></span> <span data-ttu-id="c8563-230">Eine einfache Möglichkeit ist die folgende:</span><span class="sxs-lookup"><span data-stu-id="c8563-230">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="c8563-231">Überprüfen Sie, ob ein Dokument einem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-231">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="c8563-232">Fügen Sie das Post-Schema-Validation-Infoset (PSVI) hinzu, indem Sie die <xref:System.Xml.Schema.Extensions.Validate%2A>-Erweiterungsmethode aufrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-232">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="c8563-233">Rufen Sie die <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>-Erweiterungsmethode auf, um ein Objekt abzurufen, das <xref:System.Xml.Schema.IXmlSchemaInfo>implementiert.</span><span class="sxs-lookup"><span data-stu-id="c8563-233">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="c8563-234">Aus dem abgerufenen Objekt können Sie eine <xref:System.Xml.Schema.XmlSchemaObject>abrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-234">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="c8563-235">Wenn Sie eine <xref:System.Xml.Schema.XmlSchemaObject> für eine <xref:System.Xml.Linq.XElement>erhalten, wird der Typ <xref:System.Xml.Schema.XmlSchemaElement>.</span><span class="sxs-lookup"><span data-stu-id="c8563-235">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="c8563-236">Wenn Sie eine <xref:System.Xml.Schema.XmlSchemaObject> für eine <xref:System.Xml.Linq.XAttribute>erhalten, wird der Typ <xref:System.Xml.Schema.XmlSchemaAttribute>.</span><span class="sxs-lookup"><span data-stu-id="c8563-236">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="c8563-237">Nachdem Sie eine Instanz eines <xref:System.Xml.Schema.XmlSchemaObject>haben, können Sie mit dieser Methode ein Attribut validieren.</span><span class="sxs-lookup"><span data-stu-id="c8563-237">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
    string xsdMarkup =  
        @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:simpleContent>  
          <xsd:extension base='xsd:string'>  
           <xsd:attribute name='Lang' use='required'>  
            <xsd:simpleType>  
             <xsd:restriction base='xsd:token'>  
              <xsd:enumeration value='C#'/>  
              <xsd:enumeration value='VB'/>  
             </xsd:restriction>  
            </xsd:simpleType>  
           </xsd:attribute>  
          </xsd:extension>  
         </xsd:simpleContent>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XAttribute("Lang", "C#")  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
  
    Console.WriteLine();  
    Console.WriteLine("Validating Lang attribute ...");  
    XAttribute lang = doc1.Element("Root").Attribute("Lang");  
  
    errors = false;  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
  
    // the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC";  
  
    Console.WriteLine();  
    Console.WriteLine("Validating Lang attribute ...");  
  
    errors = false;  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:simpleContent>  
                        <xsd:extension base='xsd:string'>  
                            <xsd:attribute name='Lang' use='required'>  
                                <xsd:simpleType>  
                                    <xsd:restriction base='xsd:token'>  
                                        <xsd:enumeration value='C#'/>  
                                        <xsd:enumeration value='VB'/>  
                                    </xsd:restriction>  
                                </xsd:simpleType>  
                            </xsd:attribute>  
                        </xsd:extension>  
                    </xsd:simpleContent>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root Lang='C#'/>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
    Dim lang As XAttribute = doc1.Element("Root").Attribute("Lang")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
  
    ' the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC"  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="c8563-238">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="c8563-238">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Lang attribute ...  
lang validated  
  
Validating Lang attribute ...  
The 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  
lang did not validate  
Invalid Attribute /Root/@Lang  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="c8563-239">Wird bei XSD (XML Schema Definition Language)-Validierungsfehlern ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-239">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XElement source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Validate (source As XElement, partialValidationType As XmlSchemaObject, schemas As XmlSchemaSet, validationEventHandler As ValidationEventHandler, addSchemaInfo As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XElement ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Xml.Linq.XElement * System.Xml.Schema.XmlSchemaObject * System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.ValidationEventHandler * bool -&gt; unit" Usage="System.Xml.Schema.Extensions.Validate (source, partialValidationType, schemas, validationEventHandler, addSchemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="c8563-240">Der zu überprüfende <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="c8563-240">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</span></span></param>
        <param name="partialValidationType"><span data-ttu-id="c8563-241">Ein <see cref="T:System.Xml.Schema.XmlSchemaObject" />, das die zu validierende Teilstruktur angibt.</span><span class="sxs-lookup"><span data-stu-id="c8563-241">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span></span></param>
        <param name="schemas"><span data-ttu-id="c8563-242">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, gegen das geprüft wird.</span><span class="sxs-lookup"><span data-stu-id="c8563-242">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span></span></param>
        <param name="validationEventHandler"><span data-ttu-id="c8563-243">Ein <see cref="T:System.Xml.Schema.ValidationEventHandler" /> für ein Ereignis, das eintritt, wenn der Reader Validierungsfehler empfängt.</span><span class="sxs-lookup"><span data-stu-id="c8563-243">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span></span> <span data-ttu-id="c8563-244">Mit dem Wert <see langword="null" /> wird bei Validierungsfehlern eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-244">If <see langword="null" />, throws an exception upon validation errors.</span></span></param>
        <param name="addSchemaInfo"><span data-ttu-id="c8563-245">Ein <see cref="T:System.Boolean" />, der angibt, ob das Post-Schema-Validation-Infoset (PSVI) aufgefüllt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c8563-245">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span></span></param>
        <summary><span data-ttu-id="c8563-246">Validiert, ob eine <see cref="T:System.Xml.Linq.XElement" />-Teilstruktur einem angegebenen <see cref="T:System.Xml.Schema.XmlSchemaObject" /> und einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> entspricht, und füllt die XML-Struktur optional mit dem Post-Schema-Validation-Infoset (PSVI) auf.</span><span class="sxs-lookup"><span data-stu-id="c8563-246">Validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8563-247">Sie können diese Methode verwenden, um zu überprüfen, ob eine Teilstruktur (mit einer <xref:System.Xml.Linq.XElement> im Stamm der Teilstruktur) einem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-247">You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at the root of the sub-tree) conforms to a schema.</span></span> <span data-ttu-id="c8563-248">Normalerweise verwenden Sie diese Methode, wenn Sie eine Unterstruktur geändert haben, und Sie möchten sicherstellen, dass Sie weiterhin ihrem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-248">You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="c8563-249">Sie könnten das gesamte Dokument überprüfen, aber es dauert weniger Verarbeitungszeit, um nur eine Unterstruktur zu validieren.</span><span class="sxs-lookup"><span data-stu-id="c8563-249">You could validate the entire document, but it takes less processing time to validate a just a sub-tree.</span></span>  
  
 <span data-ttu-id="c8563-250">Wenn `addSchemaInfo` `true`ist, füllt diese Methode die XML-Struktur mit dem Post-Schema-Validation-Infoset (PSVI) auf.</span><span class="sxs-lookup"><span data-stu-id="c8563-250">If `addSchemaInfo` is `true`, then this method populates the XML tree with the post-schema-validation infoset (PSVI).</span></span>  
  
 <span data-ttu-id="c8563-251">Es gibt zwei Aspekte beim Auffüllen der XML-Struktur mit der PSVI.</span><span class="sxs-lookup"><span data-stu-id="c8563-251">There are two aspects of populating the XML tree with the PSVI.</span></span>  
  
 <span data-ttu-id="c8563-252">Zuerst wird eine Anmerkung zu allen Knoten in der Struktur hinzugefügt, sodass Sie jetzt <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> für ein Element oder Attribut in der Struktur abrufen können.</span><span class="sxs-lookup"><span data-stu-id="c8563-252">First, an annotation is added to all nodes in the tree such that you can now call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> on an element or attribute in the tree.</span></span>  
  
 <span data-ttu-id="c8563-253">Zweitens werden der XML-Struktur Standardelemente und Attribute hinzugefügt, die in der XSD definiert sind.</span><span class="sxs-lookup"><span data-stu-id="c8563-253">Second, default elements and attributes defined in the XSD are added to the XML tree.</span></span> <span data-ttu-id="c8563-254">Indem Sie eine der <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>-Methoden aufrufen, können Sie bestimmen, ob ein bestimmtes Element oder Attribut aus XSD als Standardelement oder-Attribut hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="c8563-254">By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.</span></span>  
  
 <span data-ttu-id="c8563-255">Wenn Sie `null` für `validationEventHandler`übergeben, löst diese Methode bei Validierungs Fehlern eine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="c8563-255">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="c8563-256">Validierungs Warnungen werden keine Ausnahme auslöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-256">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="c8563-257">Um eine Unterstruktur zu validieren, verwenden Sie eine Instanz von <xref:System.Xml.Schema.XmlSchemaObject>.</span><span class="sxs-lookup"><span data-stu-id="c8563-257">To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="c8563-258">Sie können diese Instanz auf verschiedene Weise abrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-258">You can obtain this instance in various ways.</span></span> <span data-ttu-id="c8563-259">Eine einfache Möglichkeit ist die folgende:</span><span class="sxs-lookup"><span data-stu-id="c8563-259">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="c8563-260">Überprüfen Sie, ob ein Dokument einem Schema entspricht.</span><span class="sxs-lookup"><span data-stu-id="c8563-260">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="c8563-261">Fügen Sie das Post-Schema-Validation-Infoset (PSVI) hinzu, indem Sie die <xref:System.Xml.Schema.Extensions.Validate%2A>-Erweiterungsmethode aufrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-261">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="c8563-262">Rufen Sie die <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>-Erweiterungsmethode auf, um ein Objekt abzurufen, das <xref:System.Xml.Schema.IXmlSchemaInfo>implementiert.</span><span class="sxs-lookup"><span data-stu-id="c8563-262">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="c8563-263">Aus dem abgerufenen Objekt können Sie eine <xref:System.Xml.Schema.XmlSchemaObject>abrufen.</span><span class="sxs-lookup"><span data-stu-id="c8563-263">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="c8563-264">Wenn Sie eine <xref:System.Xml.Schema.XmlSchemaObject> für eine <xref:System.Xml.Linq.XElement>erhalten, wird der Typ <xref:System.Xml.Schema.XmlSchemaElement>.</span><span class="sxs-lookup"><span data-stu-id="c8563-264">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="c8563-265">Wenn Sie eine <xref:System.Xml.Schema.XmlSchemaObject> für eine <xref:System.Xml.Linq.XAttribute>erhalten, wird der Typ <xref:System.Xml.Schema.XmlSchemaAttribute>.</span><span class="sxs-lookup"><span data-stu-id="c8563-265">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="c8563-266">Nachdem Sie eine Instanz eines <xref:System.Xml.Schema.XmlSchemaObject>haben, können Sie diese Methode verwenden, um eine Unterstruktur zu validieren.</span><span class="sxs-lookup"><span data-stu-id="c8563-266">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate a sub-tree..</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:simpleContent>  
             <xsd:extension base='xsd:string'>  
              <xsd:attribute name='Att1' default='Att1 Default Value'/>  
             </xsd:extension>  
            </xsd:simpleContent>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "c1"),  
        new XElement("Child2", "c2")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc1:");  
Console.WriteLine(doc1);  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc2:");  
Console.WriteLine(doc2);  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                        <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:simpleContent>  
                                    <xsd:extension base='xsd:string'>  
                                        <xsd:attribute name='Att1' default='Att1 Default Value'/>  
                                    </xsd:extension>  
                                </xsd:simpleContent>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>c1</Child1>  
            <Child2>c2</Child2>  
        </Root>  
  
    Dim doc2 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>content1</Child1>  
            <Child3>content1</Child3>  
        </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc1:")  
    Console.WriteLine(doc1)  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc2:")  
    Console.WriteLine(doc2)  
End Sub  
```  
  
 <span data-ttu-id="c8563-267">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="c8563-267">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
  
Contents of doc1:  
<Root>  
  <Child1>c1</Child1>  
  <Child2 Att1="Att1 Default Value">c2</Child2>  
</Root>  
  
Contents of doc2:  
<Root>  
  <Child1>content1</Child1>  
  <Child3>content1</Child3>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><span data-ttu-id="c8563-268">Wird bei XSD (XML Schema Definition Language)-Validierungsfehlern ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c8563-268">Thrown for XML Schema Definition Language (XSD) validation errors.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

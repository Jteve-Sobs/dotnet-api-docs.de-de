<Type Name="AmbiguousImplementationException" FullName="System.Runtime.AmbiguousImplementationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="76db1fa953140d05271fd551209100167490fb0d" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75082316" /></Metadata><TypeSignature Language="C#" Value="public sealed class AmbiguousImplementationException : Exception" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AmbiguousImplementationException extends System.Exception" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.AmbiguousImplementationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AmbiguousImplementationException&#xA;Inherits Exception" />
  <TypeSignature Language="C++ CLI" Value="public ref class AmbiguousImplementationException sealed : Exception" />
  <TypeSignature Language="F#" Value="type AmbiguousImplementationException = class&#xA;    inherit Exception" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Die Ausnahme, die ausgelöst wird, wenn mehrere nicht kompatible Schnittstellenmethoden eine andere Methode überschreiben.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Normalerweise wird ein Kompilierungsfehler generiert, wenn mehrere nicht kompatible Schnittstellen Methoden vorhanden sind, die eine andere Schnittstellen Methode implementieren. `AmbiguousImplementationException` wird ausgelöst, wenn ein Typ in einer abhängigen Assembly eine Schnittstelle aus einer Assembly implementiert, die geändert wurde.

Um den Fehler zu beheben, muss die spezifischere Implementierung der Schnittstellen Methode bereitgestellt werden. Die spezifischere Implementierung der Schnittstellen Methode kann für die Klasse bereitgestellt werden, die die-Schnittstelle implementiert, oder für eine andere Schnittstelle, die erfordert, dass die-Schnittstelle die widersprüchliche Implementierung bereitstellt.

`AmbiguousImplementationException` verwendet die `HRESULT COR_E_AMBIGUOUSIMPLEMENTATION`mit dem Wert `0x8013106A`.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbiguousImplementationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.AmbiguousImplementationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbiguousImplementationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.AmbiguousImplementationException" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbiguousImplementationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.AmbiguousImplementationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbiguousImplementationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new System.Runtime.AmbiguousImplementationException : string -&gt; System.Runtime.AmbiguousImplementationException" Usage="new System.Runtime.AmbiguousImplementationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die Zeichenfolge der lokalisierten Fehlermeldung.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.AmbiguousImplementationException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbiguousImplementationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.AmbiguousImplementationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbiguousImplementationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new System.Runtime.AmbiguousImplementationException : string * Exception -&gt; System.Runtime.AmbiguousImplementationException" Usage="new System.Runtime.AmbiguousImplementationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Eine Zeichenfolge, die den Fehler beschreibt.</param>
        <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.AmbiguousImplementationException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

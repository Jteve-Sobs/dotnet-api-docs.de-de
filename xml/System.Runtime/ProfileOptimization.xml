<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="080972883de9a24a3ad924070590e7903719dc51" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39954803" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <TypeSignature Language="F#" Value="type ProfileOptimization = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Verbessert die Startleistung von Anwendungsdomänen in Anwendungen, die den JIT (Just-In-Time)-Compiler erfordern, indem sie eine Hintergrundkompilierung von Methoden, die wahrscheinlich ausgeführt werden, basierend auf den Profilen ausführen, die bei vorherigen Kompilierungen erstellt wurden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Profiloptimierung ist einer Mehrkerncomputer erforderlich. Die Methoden werden auf anderen Computern ignoriert.  
  
 Jedes Mal, die Sie die profiloptimierung in einer Anwendungsdomäne initiieren, wird das Profil, das während der vorherigen Verwendung erstellt wurde gelesen. Die Informationen in das Profil wird verwendet, die Hintergrundkompilierung führen, indem Sie identifizieren, die Methoden, die am ehesten, die während des Starts ausgeführt werden. Auf Computern mit mehreren Kernen kompiliert das erhöht die Wahrscheinlichkeit, die eine Methode bereits ist die Zeit, die es benötigt wird, sodass der Hauptanwendungsthread nicht unbedingt der JIT-Compiler aufgerufen werden.  
  
 Die Profildatei wird bei jeder Verwendung überschrieben, sodass sie immer die neueste Informationen enthält, darüber, die welche Methoden, während des Starts verwendet werden.  
  
 Optimization-Profile sind nicht für den Anwendungsstart für die Domäne beschränkt. Sie können für jede Aktivität verwendet werden, die intensiven Gebrauch von der JIT-Compiler werden müssen. Damit jeder solche Aktivitäten über ein eigenes Profil verfügt, können Sie mehrere Profile für eine Anwendungsdomäne verwalten.  
  
 Um Profile der Optimierung in einer Anwendungsdomäne zu verwenden, rufen Sie die <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> Methode, und geben Sie den Ordner, in Profile gespeichert sind. Der Ordner muss bereits vorhanden. Um mithilfe eines Profils zu beginnen, rufen Sie die <xref:System.Runtime.ProfileOptimization.StartProfile%2A> Methode, und geben Sie den Dateinamen des Profils. Wenn die Datei nicht zuvor aufgezeichnet wurde, wird es bei der ersten Verwendung erstellt. Es gibt keine Zeit bei der Leistung der Vorteil der ersten, die ein Profil erstellt wurde.  
  
 Profiloptimierung ändert nicht die Reihenfolge, in der Methoden ausgeführt werden. Methoden werden nicht im Hintergrundthread ausgeführt werden; Wenn eine Methode kompiliert aber tatsächlich niemals aufgerufen wird, ist es einfach nicht verwendet. Wenn eine Datei beschädigt ist oder kann nicht in den angegebenen Ordner geschrieben werden (z. B. weil der Ordner nicht vorhanden ist), die programmausführung wird fortgesetzt, ohne Optimierung profilerstellung.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberSignature Language="F#" Value="static member SetProfileRoot : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.SetProfileRoot directoryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">Der vollständige Pfad zu dem Ordner, in dem Profildateien für die aktuelle Anwendungsdomäne gespeichert werden.</param>
        <summary>Aktiviert die Profilerstellung für die Optimierung der aktuellen Anwendungsdomäne und legt den Ordner ab, in dem die Optimierungsprofildateien gespeichert werden. Auf einem einkernigen Computer wird die Methode ignoriert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen diese Methode aufrufen, vor dem Aufruf der <xref:System.Runtime.ProfileOptimization.StartProfile%2A> -Methode zum ersten Mal in der aktuellen Anwendungsdomäne. Wenn Sie aufrufen <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> mehr als einmal in der gleichen Anwendungsdomäne alle Aufrufe nach dem ersten werden ignoriert.  
  
 Der angegebene Ordner muss bereits vorhanden. Wenn es nicht vorhanden ist, das Aufrufen dieser Methode erstellt keinen es, und keine profilerstellung erfolgt.  
  
 Auf Computern, die nicht mit mehreren Kernen verfügen, wird diese Methode ignoriert.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberSignature Language="F#" Value="static member StartProfile : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.StartProfile profile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">Der Name des zu verwendenden Profils.</param>
        <summary>Startet JIT-Kompilierung (Just-In-Time) der Methoden, die zuvor in der angegebenen Profildatei aufgezeichnet wurden, in einem Hintergrundthread. Startet den Prozess zum Aufzeichnen der aktuellen Methodenverwendung, die später die angegebene Profildatei überschreibt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das angegebene Profil im vom angegebenen Ordner vorhanden ist. die <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> -Methode, welche Informationen es enthält wird verwendet, um die Reihenfolge zu bestimmen, in der Methoden im Hintergrundthread kompiliert werden. Die <xref:System.Runtime.ProfileOptimization.StartProfile%2A> Methode erstellt das Profil aus, wenn sie noch nicht vorhanden, und die Aufzeichnung der Methode verwenden startet.  
  
 Nur Methoden, die tatsächlich aufgerufen werden, werden unabhängig davon, ob sie auf den Hintergrund-Thread oder Thread der hauptanwendung kompiliert wurden aufgezeichnet. Eine Methode wird auf dem Thread der hauptanwendung kompiliert, wenn die Anwendung muss ihn aufrufen, bevor es im Hintergrundthread kompiliert wurde.  
  
 Der Code, der die Aufzeichnung führt verfolgt die Rate, mit der Methoden kompiliert werden, einschließlich der Methoden, die sowohl im Hintergrundthread und im Hauptthread kompiliert werden. Wenn die Rate einer vordefinierten Ebene aufzeichnen unterschritten wird beendet. Aufzeichnung wird ebenfalls beendet, wenn die Rate der JIT-Kompilierung eine zuvor festgelegten Obergrenze überschreitet.  
  
 Wenn die <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> Methode nicht für die aktuelle Anwendungsdomäne aufgerufen wurde oder wenn der Computer nicht mit mehreren Kernen verfügt die <xref:System.Runtime.ProfileOptimization.StartProfile%2A> Methode hat keine Auswirkungen.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
  </Members>
</Type>
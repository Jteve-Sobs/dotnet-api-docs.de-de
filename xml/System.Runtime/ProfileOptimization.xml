<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dc4eb4a6f0b443fa56224524d3ed86c4029390b7" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75082232" /></Metadata><TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <TypeSignature Language="F#" Value="type ProfileOptimization = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Verbessert die Startleistung von Anwendungsdomänen in Anwendungen, die den JIT (Just-In-Time)-Compiler erfordern, indem sie eine Hintergrundkompilierung von Methoden, die wahrscheinlich ausgeführt werden, basierend auf den Profilen ausführen, die bei vorherigen Kompilierungen erstellt wurden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Die Profil Optimierung erfordert einen Computer mit mehreren Kernen. Die Methoden werden auf anderen Computern ignoriert.  
  
 Jedes Mal, wenn Sie die Profil Optimierung in einer Anwendungsdomäne initiieren, wird das Profil, das während der vorherigen Verwendung erstellt wurde, gelesen. Die Informationen im Profil werden verwendet, um die Hintergrund Kompilierung zu steuern, indem die Methoden identifiziert werden, die am wahrscheinlichsten während des Starts ausgeführt werden. Auf mehr Kern Computern erhöht sich dadurch die Wahrscheinlichkeit, dass eine Methode bereits zu dem Zeitpunkt kompiliert wird, in dem Sie benötigt wird, damit der Haupt Anwendungs Thread den JIT-Compiler nicht mehr aufruft.  
  
 Die Profil Datei wird bei jeder Verwendung überschrieben, sodass Sie immer die aktuellsten Informationen darüber enthält, welche Methoden beim Start verwendet werden.  
  
 Optimierungs Profile sind nicht auf den Start der Anwendungsdomäne beschränkt. Sie können für jede Aktivität verwendet werden, für die der JIT-Compiler stark genutzt werden muss. Sie können mehrere Profile für eine Anwendungsdomäne verwalten, damit jede solche Aktivität über ein eigenes Profil verfügt.  
  
 Um Optimierungs Profile in einer Anwendungsdomäne zu verwenden, müssen Sie die <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>-Methode und den Ordner angeben, in dem Profile gespeichert werden. Der Ordner muss bereits vorhanden sein. Um mit der Verwendung eines Profils zu beginnen, müssen Sie die <xref:System.Runtime.ProfileOptimization.StartProfile%2A>-Methode aufzurufen und den Dateinamen des Profils angeben. Wenn die Datei nicht zuvor aufgezeichnet wurde, wird Sie bei der ersten Verwendung erstellt. Beim ersten Erstellen eines Profils gibt es keinen Leistungsvorteil.  
  
 Die Profil Optimierung ändert nicht die Reihenfolge, in der Methoden ausgeführt werden. Methoden werden nicht im Hintergrund Thread ausgeführt. Wenn eine Methode kompiliert, aber nie aufgerufen wird, wird Sie einfach nicht verwendet. Wenn eine Profil Datei beschädigt ist oder nicht in den angegebenen Ordner geschrieben werden kann (z. b. weil der Ordner nicht vorhanden ist), wird die Programmausführung ohne Optimierungs Profilerstellung fortgesetzt.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberSignature Language="F#" Value="static member SetProfileRoot : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.SetProfileRoot directoryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">Der vollständige Pfad zu dem Ordner, in dem Profildateien für die aktuelle Anwendungsdomäne gespeichert werden.</param>
        <summary>Aktiviert die Profilerstellung für die Optimierung der aktuellen Anwendungsdomäne und legt den Ordner ab, in dem die Optimierungsprofildateien gespeichert werden. Auf einem einkernigen Computer wird die Methode ignoriert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode muss aufgerufen werden, bevor Sie die <xref:System.Runtime.ProfileOptimization.StartProfile%2A>-Methode zum ersten Mal in der aktuellen Anwendungsdomäne aufzurufen. Wenn Sie <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> in derselben Anwendungsdomäne mehrmals aufrufen, werden alle Aufrufe nach dem ersten ignoriert.  
  
 Der angegebene Ordner muss bereits vorhanden sein. Wenn Sie nicht vorhanden ist, wird Sie durch Aufrufen dieser Methode nicht erstellt, und es erfolgt keine Profilerstellung.  
  
 Auf Computern, die nicht über mehrere Kerne verfügen, wird diese Methode ignoriert.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberSignature Language="F#" Value="static member StartProfile : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.StartProfile profile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">Der Name des zu verwendenden Profils.</param>
        <summary>Startet JIT-Kompilierung (Just-In-Time) der Methoden, die zuvor in der angegebenen Profildatei aufgezeichnet wurden, in einem Hintergrundthread. Startet den Prozess zum Aufzeichnen der aktuellen Methodenverwendung, die später die angegebene Profildatei überschreibt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das angegebene Profil in dem Ordner vorhanden ist, der durch die <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>-Methode angegeben wird, werden die darin enthaltenen Informationen verwendet, um die Reihenfolge zu bestimmen, in der die Methoden im Hintergrund Thread kompiliert werden. Die <xref:System.Runtime.ProfileOptimization.StartProfile%2A>-Methode erstellt das Profil, wenn es nicht bereits vorhanden ist, und initiiert die Aufzeichnung der Methoden Verwendung.  
  
 Nur Methoden, die tatsächlich aufgerufen werden, werden aufgezeichnet, unabhängig davon, ob Sie im Hintergrund Thread oder im Hauptanwendungs Thread kompiliert wurden. Eine Methode wird im Hauptanwendungs Thread kompiliert, wenn Sie von der Anwendung aufgerufen werden muss, bevor der Hintergrund Thread sie kompiliert hat.  
  
 Der Code, der die Aufzeichnung ausführt, verfolgt die Rate, mit der Methoden kompiliert werden, einschließlich der Methoden, die sowohl im Hintergrund Thread als auch im Haupt Thread kompiliert werden. Wenn die Rate unter eine vorgegebene Ebene fällt, wird die Aufzeichnung angehalten. Die Aufzeichnung wird auch beendet, wenn die Rate der JIT-Kompilierung eine vorgegebene Obergrenze überschreitet.  
  
 Wenn die <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>-Methode nicht für die aktuelle Anwendungsdomäne aufgerufen wurde oder wenn der Computer nicht über mehrere Kerne verfügt, hat die <xref:System.Runtime.ProfileOptimization.StartProfile%2A>-Methode keine Auswirkungen.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
  </Members>
</Type>

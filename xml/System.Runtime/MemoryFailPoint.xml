<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e587412be3d7b78f81425cfe97c5e5ad5aa465ba" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77221714" /></Metadata><TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="f4050-101">Überprüfungen auf ausreichende Speicherressourcen, bevor ein Vorgang ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="f4050-101">Checks for sufficient memory resources before executing an operation.</span></span> <span data-ttu-id="f4050-102">Diese Klasse kann nicht vererbt werden.</span><span class="sxs-lookup"><span data-stu-id="f4050-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f4050-103">Diese Klasse ist für die Verwendung in der erweiterten Entwicklung vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="f4050-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="f4050-104">Beim Erstellen einer Instanz der <xref:System.Runtime.MemoryFailPoint> Klasse wird ein Arbeitsspeicher Gate erstellt.</span><span class="sxs-lookup"><span data-stu-id="f4050-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="f4050-105">Ein Speichergate überprüft vor dem Initiieren einer Aktivität, die eine große Menge an Arbeitsspeicher erfordert, auf genügend Ressourcen.</span><span class="sxs-lookup"><span data-stu-id="f4050-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="f4050-106">Wenn die Überprüfung fehlschlägt, wird eine <xref:System.InsufficientMemoryException> Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f4050-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="f4050-107">Diese Ausnahme verhindert, dass ein Vorgang gestartet wird, und reduziert die Möglichkeit eines Ausfalls aufgrund fehlender Ressourcen.</span><span class="sxs-lookup"><span data-stu-id="f4050-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="f4050-108">Dies ermöglicht es Ihnen, die Leistung zu verringern, um eine <xref:System.OutOfMemoryException> Ausnahme und jegliche Zustands Beschädigung zu vermeiden, die sich aus einer unsachgemäßen Behandlung der Ausnahme an beliebigen Positionen im Code ergeben können.</span><span class="sxs-lookup"><span data-stu-id="f4050-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f4050-109">Dieser Typ implementiert die <xref:System.IDisposable>-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="f4050-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="f4050-110">Nach Abschluss der Verwendung sollten Sie den Typ entweder direkt oder indirekt löschen.</span><span class="sxs-lookup"><span data-stu-id="f4050-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="f4050-111">Zum direkten Löschen des Typs rufen Sie seine <xref:System.IDisposable.Dispose%2A>-Methode in einem `try`/`catch`-Block auf.</span><span class="sxs-lookup"><span data-stu-id="f4050-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="f4050-112">Zum indirekten Löschen verwenden Sie ein Sprachkonstrukt wie `using` (in C#) oder `Using` (in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="f4050-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="f4050-113">Weitere Informationen finden Sie im Abschnitt „Verwenden eines Objekts, das IDisposable implementiert“ des Themas „Die <xref:System.IDisposable>-Schnittstelle“.</span><span class="sxs-lookup"><span data-stu-id="f4050-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="f4050-114">Wenn eine <xref:System.InsufficientMemoryException> Ausnahme ausgelöst wird, kann eine Anwendung zwischen einer Schätzung unterscheiden, dass ein Vorgang nicht abgeschlossen werden kann, und ein teilweise abgeschlossener Vorgang, der möglicherweise den Anwendungs Zustand beschädigt hat.</span><span class="sxs-lookup"><span data-stu-id="f4050-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="f4050-115">Dies ermöglicht es einer Anwendung, die Häufigkeit einer pessimistischen Eskalations Richtlinie zu verringern, die möglicherweise das Entladen der aktuellen <xref:System.AppDomain> oder die Wiederverwendung des Prozesses erfordert.</span><span class="sxs-lookup"><span data-stu-id="f4050-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="f4050-116"><xref:System.Runtime.MemoryFailPoint> überprüft, ob genügend Arbeitsspeicher und aufeinander folgender virtueller Adressraum in allen Garbage Collection Heaps verfügbar sind, und erhöht möglicherweise die Größe der Auslagerungs Datei.</span><span class="sxs-lookup"><span data-stu-id="f4050-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="f4050-117"><xref:System.Runtime.MemoryFailPoint> gibt keine Garantie bezüglich der langfristigen Verfügbarkeit des Speichers während der Lebensdauer des Gates, aber Aufrufer sollten immer die <xref:System.Runtime.MemoryFailPoint.Dispose%2A>-Methode verwenden, um sicherzustellen, dass die mit <xref:System.Runtime.MemoryFailPoint> verknüpften Ressourcen freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="f4050-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="f4050-118">Wenn Sie ein Speicher Gate verwenden möchten, müssen Sie ein <xref:System.Runtime.MemoryFailPoint> Objekt erstellen und die Anzahl der Megabyte (MB) des Arbeitsspeichers angeben, die vom nächsten Vorgang verwendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="f4050-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="f4050-119">Wenn nicht genügend Arbeitsspeicher verfügbar ist, wird eine <xref:System.InsufficientMemoryException> Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f4050-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="f4050-120">Der-Parameter des Konstruktors muss eine positive ganze Zahl sein.</span><span class="sxs-lookup"><span data-stu-id="f4050-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="f4050-121">Ein negativer Wert löst eine <xref:System.ArgumentOutOfRangeException> Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="f4050-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="f4050-122"><xref:System.Runtime.MemoryFailPoint> arbeitet mit einer Granularität von 16 MB.</span><span class="sxs-lookup"><span data-stu-id="f4050-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="f4050-123">Werte, die kleiner als 16 MB sind, werden als 16 MB behandelt, und andere Werte werden als das nächstgrößte Vielfache von 16 MB behandelt.</span><span class="sxs-lookup"><span data-stu-id="f4050-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f4050-124"><xref:System.Runtime.MemoryFailPoint> ermöglicht es einer Anwendung, sich selbst zu verlangsamen, um zu vermeiden, dass der Arbeitsspeicher auf beschädigte Weise beschädigt wird.</span><span class="sxs-lookup"><span data-stu-id="f4050-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="f4050-125">Es sollte in einem lexikalischen Gültigkeitsbereich verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="f4050-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="f4050-126">Im folgenden Beispiel werden Threads gestartet, um Elemente in einer Arbeits Warteschlange zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="f4050-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="f4050-127">Bevor der Thread gestartet wird, werden die verfügbaren Arbeitsspeicher Ressourcen mithilfe <xref:System.Runtime.MemoryFailPoint>geprüft.</span><span class="sxs-lookup"><span data-stu-id="f4050-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="f4050-128">Wenn eine Ausnahme ausgelöst wird, wartet die Main-Methode, bis der Arbeitsspeicher verfügbar ist, bevor der nächste Thread gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="f4050-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes"><span data-ttu-id="f4050-129">Die erforderliche Arbeitsspeichergröße in Megabyte.</span><span class="sxs-lookup"><span data-stu-id="f4050-129">The required memory size, in megabytes.</span></span> <span data-ttu-id="f4050-130">Dieser Wert muss positiv sein.</span><span class="sxs-lookup"><span data-stu-id="f4050-130">This must be a positive value.</span></span></param>
        <summary><span data-ttu-id="f4050-131">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.MemoryFailPoint" />-Klasse und gibt die zur erfolgreichen Ausführung erforderliche Arbeitsspeichergröße an.</span><span class="sxs-lookup"><span data-stu-id="f4050-131">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4050-132">Die Menge an Arbeitsspeicher, die von der Anwendung zum Verarbeiten eines Arbeits Elements verwendet wird, kann empirisch bestimmt werden.</span><span class="sxs-lookup"><span data-stu-id="f4050-132">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="f4050-133">Um den Umfang des Arbeitsspeichers zu schätzen, den Ihre Anwendung benötigt, um eine Anforderung zu verarbeiten, können Sie die <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType>-Methode verwenden, um den Arbeitsspeicher zu bestimmen, der vor und nach dem Aufrufen der-Methode, die die Arbeitsaufgabe verarbeitet</span><span class="sxs-lookup"><span data-stu-id="f4050-133">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="f4050-134">Ein Codebeispiel, in dem der Wert für den Parameter `sizeInMegabytes` dynamisch bestimmt wird, finden Sie in der <xref:System.Runtime.MemoryFailPoint>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="f4050-134">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f4050-135">Im folgenden Beispiel wird veranschaulicht, wie die Menge an Arbeitsspeicher bestimmt wird, die bei der Ausführung einer Methode benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="f4050-135">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="f4050-136">Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Runtime.MemoryFailPoint>-Klasse bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="f4050-136">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f4050-137">Die angegebene Arbeitsspeichergröße ist negativ.</span><span class="sxs-lookup"><span data-stu-id="f4050-137">The specified memory size is negative.</span></span></exception>
        <exception cref="T:System.InsufficientMemoryException"><span data-ttu-id="f4050-138">Es ist nicht ausreichend Arbeitsspeicher vorhanden, um die Ausführung des durch das Gate geschützten Codes zu starten.</span><span class="sxs-lookup"><span data-stu-id="f4050-138">There is insufficient memory to begin execution of the code protected by the gate.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4050-139">Gibt alle von <see cref="T:System.Runtime.MemoryFailPoint" /> verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="f4050-139">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4050-140">Rufen Sie <xref:System.Runtime.MemoryFailPoint.Dispose%2A> auf, wenn Sie <xref:System.Runtime.MemoryFailPoint> nicht mehr benötigen.</span><span class="sxs-lookup"><span data-stu-id="f4050-140">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="f4050-141">Die <xref:System.Runtime.MemoryFailPoint.Dispose%2A>-Methode bewirkt, dass <xref:System.Runtime.MemoryFailPoint> nicht mehr verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="f4050-141">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="f4050-142">Nachdem Sie <xref:System.Runtime.MemoryFailPoint>aufgerufen haben, müssen Sie alle Verweise auf die <xref:System.Runtime.MemoryFailPoint> freigeben, damit der Garbage Collector den Speicher freigeben kann, den der <xref:System.Runtime.MemoryFailPoint> belegt hat.</span><span class="sxs-lookup"><span data-stu-id="f4050-142">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="f4050-143">Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.</span><span class="sxs-lookup"><span data-stu-id="f4050-143">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f4050-144">Rufen Sie immer <xref:System.Runtime.MemoryFailPoint.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Runtime.MemoryFailPoint> freigeben.</span><span class="sxs-lookup"><span data-stu-id="f4050-144">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="f4050-145">Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Runtime.MemoryFailPoint>-Methode des `Finalize`-Objekts aufruft.</span><span class="sxs-lookup"><span data-stu-id="f4050-145">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f4050-146">Stellt das Freigeben von Ressourcen und das Ausführen anderer Garbage Collector-Vorgänge sicher, wenn der Garbage Collector das <see cref="T:System.Runtime.MemoryFailPoint" />-Objekt verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="f4050-146">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4050-147">Der Garbage Collector Ruft die <xref:System.Runtime.MemoryFailPoint.Finalize%2A>-Methode auf, wenn das aktuelle-Objekt für die Fertigstellung bereit ist.</span><span class="sxs-lookup"><span data-stu-id="f4050-147">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3b11c2bd29525f877cab2d7c61c490166f17c7eb" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69086717" /></Metadata><TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Überprüfungen auf ausreichende Speicherressourcen, bevor ein Vorgang ausgeführt wird. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Klasse ist für die Verwendung in der erweiterten Entwicklung vorgesehen.  
  
 Durch das <xref:System.Runtime.MemoryFailPoint> Erstellen einer Instanz der-Klasse wird ein Arbeitsspeicher Gate erstellt. Ein Speichergate überprüft vor dem Initiieren einer Aktivität, die eine große Menge an Arbeitsspeicher erfordert, auf genügend Ressourcen. Wenn die Überprüfung fehlschlägt <xref:System.InsufficientMemoryException> , wird eine Ausnahme ausgelöst. Diese Ausnahme verhindert, dass ein Vorgang gestartet wird, und reduziert die Möglichkeit eines Ausfalls aufgrund fehlender Ressourcen. Dies ermöglicht es Ihnen, die Leistung zu <xref:System.OutOfMemoryException> verringern, um eine Ausnahme und jegliche Zustands Beschädigung zu vermeiden, die sich aus einer unsachgemäßen Behandlung der Ausnahme an beliebigen Positionen im Code ergeben können.  
  
> [!IMPORTANT]
>  Dieser Typ implementiert die <xref:System.IDisposable>-Schnittstelle. Nach Abschluss der Verwendung sollten Sie den Typ entweder direkt oder indirekt löschen. Zum direkten Löschen des Typs rufen Sie seine <xref:System.IDisposable.Dispose%2A>-Methode in einem `try`/`catch`-Block auf. Zum indirekten Löschen verwenden Sie ein Sprachkonstrukt wie `using` (in C#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt „Verwenden eines Objekts, das IDisposable implementiert“ des Themas „Die <xref:System.IDisposable>-Schnittstelle“.  
  
 Durch Auslösen einer <xref:System.InsufficientMemoryException> Ausnahme kann eine Anwendung zwischen einer Schätzung unterscheiden, dass ein Vorgang nicht abgeschlossen werden kann, und ein teilweise abgeschlossener Vorgang, der den Anwendungs Zustand möglicherweise beschädigt hat. Dies ermöglicht es einer Anwendung, die Häufigkeit einer pessimistischen Eskalations Richtlinie zu verringern, die möglicherweise <xref:System.AppDomain> das Entladen der aktuellen oder die Wiederverwendung des Prozesses erfordert.  
  
 <xref:System.Runtime.MemoryFailPoint>prüft, ob genügend Arbeitsspeicher und aufeinander folgender virtueller Adressraum in allen Garbage Collection Heaps verfügbar sind, und erhöht möglicherweise die Größe der Auslagerungs Datei.  <xref:System.Runtime.MemoryFailPoint>gibt keine Garantie bezüglich der langfristigen Verfügbarkeit des Speichers während der Lebensdauer des Gates, aber Aufrufer sollten immer die <xref:System.Runtime.MemoryFailPoint.Dispose%2A> -Methode verwenden, um sicherzustellen, dass die <xref:System.Runtime.MemoryFailPoint> zugeordneten Ressourcen freigegeben werden.  
  
 Sie müssen ein <xref:System.Runtime.MemoryFailPoint> -Objekt erstellen und die Anzahl der Megabyte (MB) des Arbeitsspeichers angeben, die vom nächsten Vorgang verwendet werden sollen, um ein Speicher Gate zu verwenden. Wenn nicht genügend Arbeitsspeicher verfügbar ist, <xref:System.InsufficientMemoryException> wird eine Ausnahme ausgelöst.  
  
 Der-Parameter des Konstruktors muss eine positive ganze Zahl sein. Ein negativer Wert löst eine <xref:System.ArgumentOutOfRangeException> Ausnahme aus.  
  
 <xref:System.Runtime.MemoryFailPoint>arbeitet mit einer Granularität von 16 MB. Werte, die kleiner als 16 MB sind, werden als 16 MB behandelt, und andere Werte werden als das nächstgrößte Vielfache von 16 MB behandelt.  
  
   
  
## Examples  
 <xref:System.Runtime.MemoryFailPoint>ermöglicht es einer Anwendung, sich langsam zu verlangsamen, um zu vermeiden, dass der Arbeitsspeicher auf beschädigte Weise beschädigt wird.  Es sollte in einem lexikalischen Gültigkeitsbereich verwendet werden.  Im folgenden Beispiel werden Threads gestartet, um Elemente in einer Arbeits Warteschlange zu verarbeiten.  Bevor der Thread gestartet wird, werden die verfügbaren Arbeitsspeicher Ressourcen <xref:System.Runtime.MemoryFailPoint>mit geprüft.  Wenn eine Ausnahme ausgelöst wird, wartet die Main-Methode, bis der Arbeitsspeicher verfügbar ist, bevor der nächste Thread gestartet wird.  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">zum Aufrufen von nicht verwaltetem Code. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> Sicherheitsaktion:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">Die erforderliche Arbeitsspeichergröße in Megabyte. Dieser Wert muss positiv sein.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.MemoryFailPoint" />-Klasse und gibt die zur erfolgreichen Ausführung erforderlichen Arbeitsspeichergröße an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Menge an Arbeitsspeicher, die von der Anwendung zum Verarbeiten eines Arbeits Elements verwendet wird, kann empirisch bestimmt werden.  Um den Umfang des Arbeitsspeichers zu schätzen, den Ihre Anwendung benötigt, um eine Anforderung <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> zu verarbeiten, sollten Sie die-Methode verwenden, um den Arbeitsspeicher zu bestimmen, der vor und nach dem Aufrufen der-Methode, die die Arbeitsaufgabe verarbeitet Ein Code <xref:System.Runtime.MemoryFailPoint> Beispiel, in dem der Wert für den `sizeInMegabytes` -Parameter dynamisch bestimmt wird, finden Sie in der-Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die Menge an Arbeitsspeicher bestimmt wird, die bei der Ausführung einer Methode benötigt wird. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Runtime.MemoryFailPoint> -Klasse bereitgestellt wird.  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die angegebene Arbeitsspeichergröße ist negativ.</exception>
        <exception cref="T:System.InsufficientMemoryException">Es ist nicht ausreichend Arbeitsspeicher vorhanden, um die Ausführung des durch das Gate geschützten Codes zu starten.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom <see cref="T:System.Runtime.MemoryFailPoint" /> verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Runtime.MemoryFailPoint.Dispose%2A> auf, wenn Sie <xref:System.Runtime.MemoryFailPoint> nicht mehr benötigen. Die <xref:System.Runtime.MemoryFailPoint.Dispose%2A>-Methode bewirkt, dass <xref:System.Runtime.MemoryFailPoint> nicht mehr verwendet werden kann. Nach dem <xref:System.Runtime.MemoryFailPoint>Aufrufen von müssen Sie alle Verweise auf den <xref:System.Runtime.MemoryFailPoint> freigeben, damit der Garbage Collector den Speicher freigeben kann <xref:System.Runtime.MemoryFailPoint> , den der belegt hat. Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.  
  
> [!NOTE]
>  Rufen Sie immer <xref:System.Runtime.MemoryFailPoint.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Runtime.MemoryFailPoint> freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Runtime.MemoryFailPoint>-Methode des `Finalize`-Objekts aufruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stellt das Freigeben von Ressourcen und das Ausführen anderer Garbage Collector-Vorgänge sicher, wenn der Garbage Collector das <see cref="T:System.Runtime.MemoryFailPoint" />-Objekt verarbeitet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Garbage Collector Ruft die <xref:System.Runtime.MemoryFailPoint.Finalize%2A> -Methode auf, wenn das aktuelle-Objekt für die Fertigstellung bereit ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>

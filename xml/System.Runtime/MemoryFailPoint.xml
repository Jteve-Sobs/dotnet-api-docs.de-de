<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MemoryFailPoint.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac561e44bc871caa29f826e0555271beb6a45d2de1c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61e44bc871caa29f826e0555271beb6a45d2de1c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.MemoryFailPoint">
          <source>Checks for sufficient memory resources before executing an operation.</source>
          <target state="translated">Überprüfungen auf ausreichende Speicherressourcen, bevor ein Vorgang ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.MemoryFailPoint">
          <source>This class cannot be inherited.</source>
          <target state="translated">Diese Klasse kann nicht vererbt werden.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This class is intended for use in advanced development.</source>
          <target state="translated">Diese Klasse dient zur Verwendung in erweiterten Entwicklung.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Creating an instance of the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class creates a memory gate.</source>
          <target state="translated">Erstellen einer Instanz von der <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> -Klasse erstellt eine Arbeitsspeicher-Gate.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</source>
          <target state="translated">Ein Speichergate überprüft über ausreichende Ressourcen vor dem Initiieren einer Aktivität, die eine große Menge an Arbeitsspeicher erfordert.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Failing the check results in an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception being thrown.</source>
          <target state="translated">Die Überprüfung fehlschlägt, führt zu einer <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> ausgelöste Ausnahme.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</source>
          <target state="translated">Diese Ausnahme wird verhindert, dass einen Vorgang gestartet wird, und reduziert die Möglichkeit von Fehlern aufgrund fehlender Ressourcen.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This enables you decrease performance to avoid an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</source>
          <target state="translated">Dadurch können Sie beeinträchtigen die Leistung zu vermeiden einer <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> Ausnahme und alle Zustandsänderungen, die aus einer nicht ordnungsgemäßen Behandlung der Ausnahme an beliebigen Stellen im Code führen können.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Dieser Typ implementiert die <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> Schnittstelle.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Wenn Sie mithilfe des Typs abgeschlossen haben, sollten Sie es entweder direkt oder indirekt freigeben.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Aufrufen, um den Typ direkt zu verwerfen, dessen <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode in einer <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> Block.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Um es indirekt freizugeben, verwenden Sie ein Sprachkonstrukt z. B. <ph id="ph1">`using`</ph> (in c#) oder <ph id="ph2">`Using`</ph> (in Visual Basic).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Weitere Informationen finden Sie im Abschnitt "Verwenden eines Objekts, implementiert IDisposable" in der <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> Thema zur Schnittstelle.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>By throwing an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</source>
          <target state="translated">Durch das Auslösen einer <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> Ausnahme, eine Anwendung kann eine Schätzung, die ein Vorgang nicht ausführen können, werden von Unterschieden eines teilweise abgeschlossenen Vorgangs, der den Anwendungsstatus beschädigt haben kann.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> or recycling the process.</source>
          <target state="translated">Dies ermöglicht es einer Anwendung, die Häufigkeit einer Richtlinie Eingeschränkte Eskalation zu verringern, was erfordern kann Entladen der aktuellen <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> oder wiederverwenden des Prozesses.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> überprüft, ob genügend Arbeitsspeicher und aufeinander folgende virtuelle Adressraum heaps in allen Garbagecollection verfügbar sind, und die Größe der Auslagerungsdatei erhöhen.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> method to ensure that resources associated with <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> are released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> macht keine Garantien hinsichtlich der langfristige Verfügbarkeit des Arbeitsspeichers während der Lebensdauer der Gate Aufrufer sollten immer verwenden die <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> Methode, um sicherzustellen, dass Ressourcen zugeordnet <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> freigegeben werden.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To use a memory gate, you must create a <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</source>
          <target state="translated">Um eine Arbeitsspeicher-Gate verwenden zu können, müssen Sie erstellen eine <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> Objekt, und geben Sie die Anzahl der Megabytes (MB) des Arbeitsspeichers, der der nächste Vorgang verwenden soll.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>If enough memory is not available, an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception is thrown.</source>
          <target state="translated">Wenn nicht genügend Arbeitsspeicher verfügbar ist, ist ein <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> Ausnahme wird ausgelöst.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>The parameter of the constructor must be a positive integer.</source>
          <target state="translated">Die Parameter des Konstruktors muss eine positive ganze Zahl sein.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>A negative value raises an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">Ein negativer Wert löst eine <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> Ausnahme.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> operates at a granularity of 16 MB.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> arbeitet mit einer Genauigkeit von 16 MB.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</source>
          <target state="translated">Alle Werte, die kleiner als 16 MB werden als 16 MB und andere Werte als die größte nächste Vielfache von 16 MB behandelt werden.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> enables an application to slow itself to avoid running out of memory in a corrupting manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> ermöglicht einer Anwendung, um zu vermeiden, fehlt und der Arbeitsspeicher knapp langsamer.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>It should be used within a lexical scope.</source>
          <target state="translated">Es sollte in einen lexikalischen Gültigkeitsbereich verwendet werden.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>The following example launches threads to process items in a work queue.</source>
          <target state="translated">Im folgende Beispiel wird die Threads zum Verarbeiten von Elementen in einer Arbeitswarteschlange gestartet.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Before each thread is launched, the available memory resources are checked using <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Vor jeder Thread gestartet wird, die verfügbaren Speicherressourcen werden überprüft mit <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>If an exception is thrown, the main method waits until memory is available before launching the next thread.</source>
          <target state="translated">Wenn eine Ausnahme ausgelöst wird, wartet die main-Methode auf, bis Arbeitsspeicher verfügbar ist, bevor der nächste Thread starten.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>for calling unmanaged code.</source>
          <target state="translated">zum Aufrufen von nicht verwalteten Codes.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">Sicherheitsaktion: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The required memory size, in megabytes.</source>
          <target state="translated">Die erforderliche Arbeitsspeichergröße in Megabyte.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This must be a positive value.</source>
          <target state="translated">Dieser Wert muss positiv sein.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> class, specifying the amount of memory required for successful execution.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>-Klasse und gibt die zur erfolgreichen Ausführung erforderliche Arbeitsspeichergröße an.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The amount of memory used by your application to process a work item can be determined empirically.</source>
          <target state="translated">Die Arbeitsspeichermenge, die von der Anwendung verwendet werden, um eine Arbeitsaufgabe verarbeiten kann empirisch ermittelt werden.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>To estimate the amount of memory your application needs to process a request, consider using the <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType&gt;</ph> method to determine the amount of memory available before and after calling the method that processes the work item.</source>
          <target state="translated">Um die Menge an Arbeitsspeicher zu schätzen Ihre Anwendung benötigt, um eine Anforderung zu verarbeiten, erwägen Sie die <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType&gt;</ph> Methode, um zu bestimmen, die Menge an Arbeitsspeicher verfügbar ist, bevor und nachdem das Arbeitselement Aufrufen der Methode, die verarbeitet werden.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>See the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class for a code example that dynamically determines the value for the <ph id="ph2">`sizeInMegabytes`</ph> parameter.</source>
          <target state="translated">Finden Sie unter der <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> Klasse für ein Codebeispiel, der dynamisch, den Wert für bestimmt die <ph id="ph2">`sizeInMegabytes`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The following example demonstrates how to determine the amount of memory a method requires when executing.</source>
          <target state="translated">Im folgenden Beispiel wird veranschaulicht, wie die Größe des Arbeitsspeichers zu bestimmen, die eine Methode, beim Ausführen erfordert.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class.</source>
          <target state="translated">Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The specified memory size is negative.</source>
          <target state="translated">Die angegebene Arbeitsspeichergröße ist negativ.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>There is insufficient memory to begin execution of the code protected by the gate.</source>
          <target state="translated">Es ist nicht ausreichend Arbeitsspeicher vorhanden, um die Ausführung des durch das Gate geschützten Codes zu starten.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>.</source>
          <target state="translated">Gibt alle vom <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> verwendeten Ressourcen frei.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Rufen Sie <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> auf, wenn Sie <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> nicht mehr benötigen.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> in an unusable state.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph>-Methode bewirkt, dass <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> nicht mehr verwendet werden kann.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> was occupying.</source>
          <target state="translated">Nach dem Aufruf <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>, müssen Sie alle Verweise auf Freigeben der <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> belegt wurde.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Bereinigen von nicht verwalteten Ressourcen<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> und <bpt id="p2">[</bpt>Implementieren einer Dispose-Methode<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Rufen Sie immer <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> auf, bevor Sie den letzten Verweis auf das <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> freigeben.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>-Methode des <ph id="ph2">`Finalize`</ph>-Objekts aufruft.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> object.</source>
          <target state="translated">Stellt das Freigeben von Ressourcen und das Ausführen anderer Garbage Collector-Vorgänge sicher, wenn der Garbage Collector das <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>-Objekt verarbeitet.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Finalize">
          <source>The garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Finalize%2A&gt;</ph> method when the current object is ready to be finalized.</source>
          <target state="translated">Der Garbage Collector Ruft die <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Finalize%2A&gt;</ph> Methode, wenn das aktuelle Objekt finalisiert werden.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
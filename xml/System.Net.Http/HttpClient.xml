<Type Name="HttpClient" FullName="System.Net.Http.HttpClient">
  <TypeSignature Language="C#" Value="public class HttpClient : System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpClient extends System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpClient&#xA;Inherits HttpMessageInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClient : System::Net::Http::HttpMessageInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Http.HttpMessageInvoker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c4d1a-101">Stellt eine Basisklasse zum Senden von HTTP-Anforderungen und Empfangen von HTTP-Antworten aus einer Ressource bereit, die von einem URI identifiziert wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-101">Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-102">Die <xref:System.Net.Http.HttpClient> Klasseninstanz fungiert als eine Sitzung zum Senden von HTTP-Anforderungen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-102">The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests.</span></span> <span data-ttu-id="c4d1a-103">Ein <xref:System.Net.Http.HttpClient> Instanz ist eine Sammlung von Einstellungen für alle Anforderungen, die von dieser Instanz ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-103">An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance.</span></span> <span data-ttu-id="c4d1a-104">Darüber hinaus alle <xref:System.Net.Http.HttpClient> Instanz verwendet ihren eigenen Verbindungspool, Isolieren von Anforderungen aus von anderen ausgeführten Anforderungen, die <xref:System.Net.Http.HttpClient> Instanzen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-104">In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.</span></span>  
  
 <span data-ttu-id="c4d1a-105">Die <xref:System.Net.Http.HttpClient> fungiert außerdem als Basisklasse für spezifischere HTTP-Clients.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-105">The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients.</span></span> <span data-ttu-id="c4d1a-106">Ein Beispiel wäre eine zusätzliche Methoden spezifisch für einen Webdienst Facebook FacebookHttpClient (eine GetFriends-Methode für die Instanz).</span><span class="sxs-lookup"><span data-stu-id="c4d1a-106">An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).</span></span> <span data-ttu-id="c4d1a-107">Abgeleitete Klassen sollten die virtuellen Methoden in der Klasse nicht überschreiben.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-107">Derived classes should not override the virtual methods on the class.</span></span> <span data-ttu-id="c4d1a-108">Verwenden Sie stattdessen eine Überladung des Konstruktors, die akzeptiert <xref:System.Net.Http.HttpMessageHandler> so konfigurieren Sie die keine vor oder nach der Anforderung verarbeiten, stattdessen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-108">Instead, use a constructor overload that accepts <xref:System.Net.Http.HttpMessageHandler> to configure any pre- or post-request processing instead.</span></span>
  
 <span data-ttu-id="c4d1a-109">Standardmäßig <xref:System.Net.HttpWebRequest> wird verwendet, um die Anforderungen an den Server gesendet.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-109">By default, <xref:System.Net.HttpWebRequest> will be used to send requests to the server.</span></span> <span data-ttu-id="c4d1a-110">Dieses Verhalten kann geändert werden, durch Angeben von einem anderen Kanal in einem der Konstruktorüberladungen übernehmen eine <xref:System.Net.Http.HttpMessageHandler> Instanz als Parameter.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-110">This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter.</span></span> <span data-ttu-id="c4d1a-111">Wenn Sie Funktionen wie die Authentifizierung oder die caching erforderlich sind, werden <xref:System.Net.Http.WebRequestHandler> kann verwendet werden, um Einstellungen zu konfigurieren und die Instanz kann an den Konstruktor übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-111">If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor.</span></span> <span data-ttu-id="c4d1a-112">Der zurückgegebene Handler übergeben werden kann, auf einen der Konstruktorüberladungen übernehmen eine <xref:System.Net.Http.HttpMessageHandler> Parameter.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-112">The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.</span></span>  
  
 <span data-ttu-id="c4d1a-113">Wenn eine app mit <xref:System.Net.Http.HttpClient> und verwandten Klassen in der <xref:System.Net.Http> Namespace beabsichtigt, um große Mengen von Daten (50 MB oder mehr) herunterzuladen, und klicken Sie dann die app sollte diese Downloads Streamen und verwenden Sie nicht standardmäßige Pufferung.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-113">If an app using <xref:System.Net.Http.HttpClient> and related classes in the  <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.</span></span> <span data-ttu-id="c4d1a-114">Wenn die standardmäßige Pufferung verwendet wird die Auslastung des Speichers erhalten sehr groß, was potenziell im Wesentlichen zu einer Beeinträchtigung der Leistung.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-114">If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</span></span>  
  
 <span data-ttu-id="c4d1a-115">Die folgenden Methoden sind threadsicher:</span><span class="sxs-lookup"><span data-stu-id="c4d1a-115">The following methods are thread safe:</span></span>  
  
1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  
  
2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  
  
3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  
  
4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  
  
5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  
  
6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  
  
7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  
  
8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  
  
9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  
  
 <span data-ttu-id="c4d1a-116"><xref:System.Net.Http.HttpClient> soll einmal instanziiert und die Lebensdauer einer Anwendung wieder verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-116"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="c4d1a-117">Instanziieren einer Klasse "HttpClient" für jede Anforderung, wird die Anzahl von Sockets verfügbar bei starker Auslastung ausgeschöpft.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-117">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="c4d1a-118">Dies führt zu SocketException-Fehler.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-118">This will result in SocketException errors.</span></span> <span data-ttu-id="c4d1a-119">Es folgt ein Beispiel für "HttpClient" ordnungsgemäß zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-119">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    // OK  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
  
```  
  
<span data-ttu-id="c4d1a-120">Die <xref:System.Net.Http.HttpClient> ist eine allgemeine API, die auf niedrigerer Ebene Funktionalität auf jeder Plattform ausgeführt wird, in denen es umschließt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-120">The <xref:System.Net.Http.HttpClient> is a high-level API that wraps the lower-level functionality available on each platform where it runs.</span></span>

<span data-ttu-id="c4d1a-121">Auf jeder Plattform <xref:System.Net.Http.HttpClient> versucht, die am besten Transport zu verwenden:</span><span class="sxs-lookup"><span data-stu-id="c4d1a-121">On each platform, <xref:System.Net.Http.HttpClient> tries to use the best available transport:</span></span>

| <span data-ttu-id="c4d1a-122">**Host-Laufzeit**</span><span class="sxs-lookup"><span data-stu-id="c4d1a-122">**Host/Runtime**</span></span>            | <span data-ttu-id="c4d1a-123">**Backend**</span><span class="sxs-lookup"><span data-stu-id="c4d1a-123">**Backend**</span></span>                                                                               |
| --------------------------- | ----------------------------------------------------------------------------------------- |
| <span data-ttu-id="c4d1a-124">Windows/.NET Framework</span><span class="sxs-lookup"><span data-stu-id="c4d1a-124">Windows/.NET Framework</span></span>      | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="c4d1a-125">Windows/Mono</span><span class="sxs-lookup"><span data-stu-id="c4d1a-125">Windows/Mono</span></span>                | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="c4d1a-126">Windows/UWP</span><span class="sxs-lookup"><span data-stu-id="c4d1a-126">Windows/UWP</span></span>                 | <span data-ttu-id="c4d1a-127">Windows-systemeigenen <xref:System.Net.Http.WinHttpHandler> (HTTP-2.0-fähig)</span><span class="sxs-lookup"><span data-stu-id="c4d1a-127">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="c4d1a-128">Windows/.NET Core</span><span class="sxs-lookup"><span data-stu-id="c4d1a-128">Windows/.NET Core</span></span>           | <span data-ttu-id="c4d1a-129">Windows-systemeigenen <xref:System.Net.Http.WinHttpHandler> (HTTP-2.0-fähig)</span><span class="sxs-lookup"><span data-stu-id="c4d1a-129">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="c4d1a-130">Android/Xamarin</span><span class="sxs-lookup"><span data-stu-id="c4d1a-130">Android/Xamarin</span></span>             | <span data-ttu-id="c4d1a-131">Zum Zeitpunkt der Erstellung ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-131">Selected at build-time.</span></span> <span data-ttu-id="c4d1a-132">Können entweder <xref:System.Net.HttpWebRequest> oder zum Verwenden von Android-Native konfiguriert [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span><span class="sxs-lookup"><span data-stu-id="c4d1a-132">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Android's native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span></span> |
| <span data-ttu-id="c4d1a-133">iOS, tvOS, watchOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="c4d1a-133">iOS, tvOS, watchOS/Xamarin</span></span>  | <span data-ttu-id="c4d1a-134">Zum Zeitpunkt der Erstellung ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-134">Selected at build-time.</span></span> <span data-ttu-id="c4d1a-135">Können entweder <xref:System.Net.HttpWebRequest> oder zum Verwenden von Apple konfiguriert [ `NSUrlSession` ](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP-2.0-fähig)</span><span class="sxs-lookup"><span data-stu-id="c4d1a-135">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="c4d1a-136">macOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="c4d1a-136">macOS/Xamarin</span></span>               | <span data-ttu-id="c4d1a-137">Zum Zeitpunkt der Erstellung ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-137">Selected at build-time.</span></span> <span data-ttu-id="c4d1a-138">Können entweder <xref:System.Net.HttpWebRequest> oder zum Verwenden von Apple konfiguriert [ `NSUrlSession` ](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP-2.0-fähig)</span><span class="sxs-lookup"><span data-stu-id="c4d1a-138">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="c4d1a-139">macOS/Mono</span><span class="sxs-lookup"><span data-stu-id="c4d1a-139">macOS/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                                          |
| <span data-ttu-id="c4d1a-140">macOS/.NET Core</span><span class="sxs-lookup"><span data-stu-id="c4d1a-140">macOS/.NET Core</span></span>             | <span data-ttu-id="c4d1a-141">`libcurl`-basierte HTTP-Transport (HTTP-2.0-fähig)</span><span class="sxs-lookup"><span data-stu-id="c4d1a-141">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="c4d1a-142">Linux/Mono</span><span class="sxs-lookup"><span data-stu-id="c4d1a-142">Linux/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="c4d1a-143">Linux/.NET Core</span><span class="sxs-lookup"><span data-stu-id="c4d1a-143">Linux/.NET Core</span></span>             | <span data-ttu-id="c4d1a-144">`libcurl`-basierte HTTP-Transport (HTTP-2.0-fähig)</span><span class="sxs-lookup"><span data-stu-id="c4d1a-144">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |

<span data-ttu-id="c4d1a-145">Benutzer können auch konfigurieren, einen bestimmten Transport für <xref:System.Net.Http.HttpClient> durch Aufrufen der <xref:System.Net.Http.HttpClient.%23ctor*> Konstruktor, akzeptiert eine <xref:System.Net.Http.HttpMessageHandler>.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-145">Users can also configure a specific transport for <xref:System.Net.Http.HttpClient> by invoking the <xref:System.Net.Http.HttpClient.%23ctor*> constructor that takes an <xref:System.Net.Http.HttpMessageHandler>.</span></span>
  
## Examples  
 [!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4d1a-146">Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.HttpClient" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-146">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-147"><xref:System.Net.Http.HttpClient> soll einmal instanziiert und die Lebensdauer einer Anwendung wieder verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-147"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="c4d1a-148">Instanziieren einer Klasse "HttpClient" für jede Anforderung, wird die Anzahl von Sockets verfügbar bei starker Auslastung ausgeschöpft.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-148">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="c4d1a-149">Dies führt zu SocketException-Fehler.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-149">This will result in SocketException errors.</span></span> <span data-ttu-id="c4d1a-150">Es folgt ein Beispiel für "HttpClient" ordnungsgemäß zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-150">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    // OK  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4d1a-151">Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.HttpClient" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-151">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="c4d1a-152">Der HTTP-Handlerstapel, der zum Senden von Anforderungen zu verwenden ist.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-152">The HTTP handler stack to use for sending requests.</span></span></param>
        <summary><span data-ttu-id="c4d1a-153">Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.HttpClient" />-Klasse mit einem bestimmten Handler.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-153">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with a specific handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-154">`handler` durch den Aufruf verworfen [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span><span class="sxs-lookup"><span data-stu-id="c4d1a-154">`handler` will be disposed of by calling [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-155"><paramref name="handler" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-155">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler, bool disposeHandler);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="c4d1a-156">Der <see cref="T:System.Net.Http.HttpMessageHandler" />, der für die Verarbeitung der HTTP-Antwortnachrichten verantwortlich ist.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-156">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</span></span></param>
        <param name="disposeHandler">
          <span data-ttu-id="c4d1a-157"><see langword="true" />, wenn der innere Handler von [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose) verworfen werden soll. <see langword="false" />, wenn Sie beabsichtigen, den inneren Handler wiederzuverwenden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-157"><see langword="true" /> if the inner handler should be disposed of by [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose), <see langword="false" /> if you intend to reuse the inner handler.</span></span></param>
        <summary><span data-ttu-id="c4d1a-158">Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.HttpClient" />-Klasse mit einem bestimmten Handler.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-158">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with a specific handler.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-159"><paramref name="handler" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-159">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c4d1a-160">Ruft die Basisadresse des URI (Uniform Resource Identifier) der Internetressource ab, die verwendet wird, wenn Anforderungen gesendet werden, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-160">Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></summary>
        <value><span data-ttu-id="c4d1a-161">Die Basisadresse des URI (Uniform Resource Identifier) der Internetressource, die verwendet wird, wenn Anforderungen gesendet werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-161">The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-162">Beim Senden einer <xref:System.Net.Http.HttpRequestMessage> mit einem relativen Uri wird die Nachricht Uri zu hinzugefügt werden die <xref:System.Net.Http.HttpClient.BaseAddress%2A> Eigenschaft um einen absoluten Uri zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-162">When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRequests">
      <MemberSignature Language="C#" Value="public void CancelPendingRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.CancelPendingRequests" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRequests ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelPendingRequests();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4d1a-163">Alle ausstehenden Anforderungen für diese Instanz abbrechen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-163">Cancel all pending requests on this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-164">Nach dem Aufrufen dieser Methode die <xref:System.Net.Http.HttpClient> Instanz kann weiterhin verwendet, um zusätzliche Anforderungen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-164">After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestHeaders">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpRequestHeaders ^ DefaultRequestHeaders { System::Net::Http::Headers::HttpRequestHeaders ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpRequestHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c4d1a-165">Ruft die Header ab, die mit jeder Anforderung gesendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-165">Gets the headers which should be sent with each request.</span></span></summary>
        <value><span data-ttu-id="c4d1a-166">Die Header, die mit jeder Anforderung gesendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-166">The headers which should be sent with each request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-167">Header legen Sie für diese Eigenschaft müssen nicht erneut für Anforderungsnachrichten festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-167">Headers set on this property don't need to be set on request messages again.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4d1a-168">Eine DELETE-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-168">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-169">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-169">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="c4d1a-170">Eine DELETE-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-170">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-171">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-171">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-172">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-172">This operation will not block.</span></span> <span data-ttu-id="c4d1a-173">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-173">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-174"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-174">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4d1a-175">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-175">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-176">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-176">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-177">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-177">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="c4d1a-178">Eine DELETE-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-178">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-179">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-179">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-180">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-180">This operation will not block.</span></span> <span data-ttu-id="c4d1a-181">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-181">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-182"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-182">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4d1a-183">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-183">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-184">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-184">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-185">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-185">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-186">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-186">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-187">Eine DELETE-Anforderung für den angegebenen URI mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-187">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-188">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-188">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-189">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-189">This operation will not block.</span></span> <span data-ttu-id="c4d1a-190">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-190">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-191"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-191">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4d1a-192">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-192">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-193">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-193">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-194">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-194">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-195">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-195">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-196">Eine DELETE-Anforderung für den angegebenen URI mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-196">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-197">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-197">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-198">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-198">This operation will not block.</span></span> <span data-ttu-id="c4d1a-199">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-199">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-200"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-200">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4d1a-201">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-201">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-202">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-202">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="c4d1a-203"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben. <see langword="false" />, wenn ausschließlich nicht verwaltete Ressourcen freigegeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-203"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="c4d1a-204">Gibt die vom <see cref="T:System.Net.Http.HttpClient" /> verwendeten, nicht verwalteten Ressourcen frei und verwirft optional auch die verwalteten Ressourcen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-204">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-205">Diese Methode wird aufgerufen, der öffentlich `Dispose()` Methode und die <xref:System.Object.Finalize%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-205">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="c4d1a-206">`Dispose()` Ruft die geschützte `Dispose(Boolean)` Methode mit dem `disposing` Parametersatz auf `true`.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-206">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="c4d1a-207"><xref:System.Object.Finalize%2A> Ruft `Dispose` mit `disposing` festgelegt `false`.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-207"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="c4d1a-208">Wenn der `disposing`-Parameter `true` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:System.Net.Http.HttpClient> verweist.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-208">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references.</span></span> <span data-ttu-id="c4d1a-209">Diese Methode ruft die `Dispose()`-Methode aller Objekte auf, auf die verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-209">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 <span data-ttu-id="c4d1a-210">Wenn diese Methode aufgerufen wird, die <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> Methode wird aufgerufen, um alle ausstehenden Anforderungen abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-210">When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4d1a-211">Eine GET-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-211">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-212">Der Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-212">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-213">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-213">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="c4d1a-214">Eine GET-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-214">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-215">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-215">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-216">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-216">This operation will not block.</span></span> <span data-ttu-id="c4d1a-217">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-217">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-218"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-218">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-219">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-219">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-220">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-220">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="c4d1a-221">Eine GET-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-221">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-222">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-222">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-223">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-223">This operation will not block.</span></span> <span data-ttu-id="c4d1a-224">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-224">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-225"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-225">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-226">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-226">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-227">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-227">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="c4d1a-228">Ein HTTP-Abschlussoptions-Wert, der angibt, wann die Operation als abgeschlossen betrachtet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-228">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="c4d1a-229">Eine GET-Anforderung an den angegebenen URI mit einer HTTP-Abschlussoption als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-229">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-230">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-230">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-231">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-231">This operation will not block.</span></span> <span data-ttu-id="c4d1a-232">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> -Objekt abgeschlossen wird basierend auf den `completionOption` Parameter, nachdem die Teils oder aller der Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-232">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-233"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-233">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-234">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-234">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-235">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-235">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-236">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-236">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-237">Eine GET-Anforderung für den angegebenen URI mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-237">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-238">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-238">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-239">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-239">This operation will not block.</span></span> <span data-ttu-id="c4d1a-240">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-240">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-241"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-241">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-242">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-242">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-243">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-243">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="c4d1a-244">Ein HTTP-Abschlussoptions-Wert, der angibt, wann die Operation als abgeschlossen betrachtet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-244">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="c4d1a-245">Eine GET-Anforderung an den angegebenen URI mit einer HTTP-Abschlussoption als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-245">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-246">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-246">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-247">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-247">This operation will not block.</span></span> <span data-ttu-id="c4d1a-248">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> -Objekt abgeschlossen wird basierend auf den `completionOption` Parameter, nachdem die Teils oder aller der Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-248">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-249"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-249">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-250">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-250">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-251">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-251">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-252">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-252">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-253">Eine GET-Anforderung für den angegebenen URI mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-253">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-254">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-254">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-255">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-255">This operation will not block.</span></span> <span data-ttu-id="c4d1a-256">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-256">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-257"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-257">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-258">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-258">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-259">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-259">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="c4d1a-260">Ein HTTP-Abschlussoptions-Wert, der angibt, wann die Operation als abgeschlossen betrachtet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-260">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-261">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-261">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-262">Eine GET-Anforderung an den angegebenen URI mit einer HTTP-Abschlussoption und einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-262">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-263">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-263">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-264">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-264">This operation will not block.</span></span> <span data-ttu-id="c4d1a-265">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> -Objekt abgeschlossen wird basierend auf den `completionOption` Parameter, nachdem die Teils oder aller der Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-265">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-266"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-266">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-267">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-267">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-268">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-268">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="c4d1a-269">Ein HTTP-Abschlussoptions-Wert, der angibt, wann die Operation als abgeschlossen betrachtet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-269">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-270">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-270">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-271">Eine GET-Anforderung an den angegebenen URI mit einer HTTP-Abschlussoption und einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-271">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-272">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-272">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-273">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-273">This operation will not block.</span></span> <span data-ttu-id="c4d1a-274">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> -Objekt abgeschlossen wird basierend auf den `completionOption` Parameter, nachdem die Teils oder aller der Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-274">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-275"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-275">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-276">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-276">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteArrayAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4d1a-277">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Bytearray in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-277">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-278">Der Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-278">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Net.Http.HttpClient/&lt;GetByteArrayAsync&gt;c__async1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-279">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-279">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="c4d1a-280">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Bytearray in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-280">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-281">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-281">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-282">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-282">This operation will not block.</span></span> <span data-ttu-id="c4d1a-283">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem der gesamte Antworttext gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-283">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-284"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-284">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-285">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-285">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Net.Http.HttpClient/&lt;GetByteArrayAsync&gt;c__async2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-286">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-286">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="c4d1a-287">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Bytearray in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-287">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-288">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-288">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-289">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-289">This operation will not block.</span></span> <span data-ttu-id="c4d1a-290">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem der gesamte Antworttext gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-290">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-291"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-291">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-292">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-292">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStreamAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4d1a-293">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Datenstrom in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-293">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-294">Der Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-294">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Net.Http.HttpClient/&lt;GetStreamAsync&gt;c__async3))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-295">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-295">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="c4d1a-296">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Datenstrom in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-296">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-297">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-297">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-298">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-298">This operation will not block.</span></span> <span data-ttu-id="c4d1a-299">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem der gesamte Antworttext gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-299">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span> <span data-ttu-id="c4d1a-300">Den Stream wird von dieser Methode nicht puffert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-300">This method does not buffer the stream.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-301"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-301">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-302">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-302">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Net.Http.HttpClient/&lt;GetStreamAsync&gt;c__async4))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-303">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-303">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="c4d1a-304">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Datenstrom in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-304">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-305">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-305">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-306">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-306">This operation will not block.</span></span> <span data-ttu-id="c4d1a-307">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem der gesamte Antworttext gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-307">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span> <span data-ttu-id="c4d1a-308">Den Stream wird von dieser Methode nicht puffert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-308">This method does not buffer the stream.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-309"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-309">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-310">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-310">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStringAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4d1a-311">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Zeichenfolge in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-311">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-312">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-312">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Net.Http.HttpClient/&lt;GetStringAsync&gt;c__async5))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-313">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-313">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="c4d1a-314">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Zeichenfolge in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-314">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-315">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-315">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-316">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-316">This operation will not block.</span></span> <span data-ttu-id="c4d1a-317">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem der gesamte Antworttext gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-317">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-318"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-318">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-319">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-319">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Net.Http.HttpClient/&lt;GetStringAsync&gt;c__async6))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-320">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-320">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="c4d1a-321">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Zeichenfolge in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-321">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-322">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-322">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-323">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-323">This operation will not block.</span></span> <span data-ttu-id="c4d1a-324">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem der gesamte Antworttext gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-324">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-325"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-325">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-326">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-326">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseContentBufferSize">
      <MemberSignature Language="C#" Value="public long MaxResponseContentBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxResponseContentBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseContentBufferSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxResponseContentBufferSize { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c4d1a-327">Ruft beim Lesen des Antwortinhalts die maximale Anzahl zwischenzuspeichernder Bytes ab oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-327">Gets or sets the maximum number of bytes to buffer when reading the response content.</span></span></summary>
        <value><span data-ttu-id="c4d1a-328">Die maximale Anzahl zu puffernder Bytes, wenn der Antwortinhalt gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-328">The maximum number of bytes to buffer when reading the response content.</span></span> <span data-ttu-id="c4d1a-329">Der Standardwert für diese Eigenschaft ist 2 GB.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-329">The default value for this property is 2 gigabytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-330">Legen Sie eine app kann die <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> Eigenschaft auf einen niedrigeren Wert die Größe der Antwort auf den Puffer zu beschränken, beim Lesen der Antwort.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-330">An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response.</span></span> <span data-ttu-id="c4d1a-331">Wenn die Größe des Inhalts der Antwort übersteigt die <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> -Eigenschaft, eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-331">If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c4d1a-332">Die angegebene Größe ist kleiner oder gleich 0 (null).</span><span class="sxs-lookup"><span data-stu-id="c4d1a-332">The size specified is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4d1a-333">Es wurde bereits ein Vorgang für die aktuelle Instanz gestartet.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-333">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c4d1a-334">Die aktuelle Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-334">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4d1a-335">Eine POST-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-335">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-336">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-336">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-337">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-337">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="c4d1a-338">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-338">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="c4d1a-339">Eine POST-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-339">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-340">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-340">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-341">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-341">This operation will not block.</span></span> <span data-ttu-id="c4d1a-342">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-342">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-343"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-343">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-344">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-344">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-345">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-345">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="c4d1a-346">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-346">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="c4d1a-347">Eine POST-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-347">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-348">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-348">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-349">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-349">This operation will not block.</span></span> <span data-ttu-id="c4d1a-350">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-350">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-351"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-351">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-352">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-352">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-353">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-353">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="c4d1a-354">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-354">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-355">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-355">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-356">Eine POST-Anforderung mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-356">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-357">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-357">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-358">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-358">This operation will not block.</span></span> <span data-ttu-id="c4d1a-359">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-359">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-360"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-360">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-361">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-361">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-362">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-362">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="c4d1a-363">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-363">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-364">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-364">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-365">Eine POST-Anforderung mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-365">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-366">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-366">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-367">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-367">This operation will not block.</span></span> <span data-ttu-id="c4d1a-368">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-368">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-369"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-369">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-370">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-370">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PutAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4d1a-371">Eine PUT-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-371">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-372">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-372">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-373">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-373">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="c4d1a-374">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-374">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="c4d1a-375">Eine PUT-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-375">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-376">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-376">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-377">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-377">This operation will not block.</span></span> <span data-ttu-id="c4d1a-378">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-378">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-379"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-379">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-380">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-380">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-381">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-381">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="c4d1a-382">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-382">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="c4d1a-383">Eine PUT-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-383">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-384">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-384">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-385">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-385">This operation will not block.</span></span> <span data-ttu-id="c4d1a-386">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-386">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-387"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-387">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-388">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-388">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-389">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-389">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="c4d1a-390">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-390">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-391">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-391">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-392">Eine PUT-Anforderung mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-392">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-393">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-393">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-394">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-394">This operation will not block.</span></span> <span data-ttu-id="c4d1a-395">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-395">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-396"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-396">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-397">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-397">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="c4d1a-398">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-398">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="c4d1a-399">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-399">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-400">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-400">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-401">Eine PUT-Anforderung mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-401">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-402">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-402">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-403">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-403">This operation will not block.</span></span> <span data-ttu-id="c4d1a-404">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-404">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-405"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-405">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-406">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-406">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4d1a-407">Senden Sie eine HTTP-Anforderung als asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-407">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-408">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-408">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="c4d1a-409">Die zu sendende HTTP-Anforderungsmeldung.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-409">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="c4d1a-410">Senden Sie eine HTTP-Anforderung als asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-410">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-411">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-411">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-412">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-412">This operation will not block.</span></span> <span data-ttu-id="c4d1a-413">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, sobald die ganze Antwort einschließlich Inhalt gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-413">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-414"><paramref name="request" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-414">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4d1a-415">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-415">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-416">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-416">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="c4d1a-417">Die zu sendende HTTP-Anforderungsmeldung.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-417">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="c4d1a-418">Wann der Vorgang abgeschlossen werden sollte (sobald eine Antwort verfügbar ist, oder nach dem Lesen des gesamten Inhalts der Antwort).</span><span class="sxs-lookup"><span data-stu-id="c4d1a-418">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <summary><span data-ttu-id="c4d1a-419">Senden Sie eine HTTP-Anforderung als asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-419">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-420">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-420">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-421">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-421">This operation will not block.</span></span> <span data-ttu-id="c4d1a-422">Abhängig vom Wert der `completionOption` Parameter, kann das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, sobald eine Antwort verfügbar ist oder die ganze Antwort einschließlich Inhalt gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-422">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-423"><paramref name="request" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-423">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4d1a-424">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-424">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-425">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-425">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="c4d1a-426">Die zu sendende HTTP-Anforderungsmeldung.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-426">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-427">Das Abbruchtoken, um den Vorgang abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-427">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-428">Senden Sie eine HTTP-Anforderung als asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-428">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-429">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-429">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-430">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-430">This operation will not block.</span></span> <span data-ttu-id="c4d1a-431">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, sobald die ganze Antwort einschließlich Inhalt gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-431">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-432"><paramref name="request" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-432">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4d1a-433">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-433">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-434">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-434">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="c4d1a-435">Die zu sendende HTTP-Anforderungsmeldung.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-435">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="c4d1a-436">Wann der Vorgang abgeschlossen werden sollte (sobald eine Antwort verfügbar ist, oder nach dem Lesen des gesamten Inhalts der Antwort).</span><span class="sxs-lookup"><span data-stu-id="c4d1a-436">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c4d1a-437">Das Abbruchtoken, um den Vorgang abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-437">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="c4d1a-438">Senden Sie eine HTTP-Anforderung als asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-438">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c4d1a-439">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-439">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-440">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-440">This operation will not block.</span></span> <span data-ttu-id="c4d1a-441">Abhängig vom Wert der `completionOption` Parameter, kann das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, sobald eine Antwort verfügbar ist oder die ganze Antwort einschließlich Inhalt gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-441">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4d1a-442"><paramref name="request" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-442">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4d1a-443">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-443">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="c4d1a-444">Die Anforderung konnte wg. eines zugrunde liegenden Problems wie Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats oder Timeout nicht durchgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-444">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c4d1a-445">Ruft die Zeitspanne ab, nach der das Zeitlimit der Anforderung überschritten ist, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-445">Gets or sets the timespan to wait before the request times out.</span></span></summary>
        <value><span data-ttu-id="c4d1a-446">Die Zeitspanne, nach der das Zeitlimit der Anforderung überschritten ist.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-446">The timespan to wait before the request times out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4d1a-447">Der Standardwert ist 100.000 Millisekunden (100 Sekunden).</span><span class="sxs-lookup"><span data-stu-id="c4d1a-447">The default value is 100,000 milliseconds (100 seconds).</span></span>  
  
 <span data-ttu-id="c4d1a-448">Um einen unendlichen Timeout festlegen möchten, legen Sie den Wert der Eigenschaft auf <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-448">To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span></span>  
  
 <span data-ttu-id="c4d1a-449">Eine Domain Name System (DNS)-Abfrage kann bis zu 15 Sekunden zurückgegeben oder ein Timeout dauern. Ihre Anforderung enthält einen Hostnamen an, die Lösung erforderlich sind, und legen Sie <xref:System.Net.Http.HttpClient.Timeout%2A> auf einen Wert kleiner als 15 Sekunden dauert möglicherweise 15 Sekunden oder mehr vor einer <xref:System.Net.WebException> wird ausgelöst, um ein Timeout für die Anforderung anzugeben.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-449">A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.</span></span>  
  
 <span data-ttu-id="c4d1a-450">Das gleiche Timeout gilt für alle Anforderungen, die mit diesem <xref:System.Net.Http.HttpClient> Instanz.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-450">The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.</span></span>  <span data-ttu-id="c4d1a-451">Sie können auch festlegen, unterschiedlicher Timeouts für einzelne Anforderungen, die mit einem <xref:System.Threading.CancellationTokenSource> auf eine Aufgabe.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-451">You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task.</span></span> <span data-ttu-id="c4d1a-452">Beachten Sie, dass nur der kürzere der beiden Timeouts angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-452">Note that only the shorter of the two timeouts will apply.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c4d1a-453">Der angegebene Timeoutwert ist kleiner oder gleich 0 (null) und nicht <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-453">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4d1a-454">Es wurde bereits ein Vorgang für die aktuelle Instanz gestartet.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-454">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c4d1a-455">Die aktuelle Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="c4d1a-455">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
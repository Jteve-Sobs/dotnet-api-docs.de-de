<Type Name="HttpClient" FullName="System.Net.Http.HttpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a255f281927c43b0a13b7f57d78225e6fd8d3825" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86801678" /></Metadata><TypeSignature Language="C#" Value="public class HttpClient : System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpClient extends System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpClient&#xA;Inherits HttpMessageInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClient : System::Net::Http::HttpMessageInvoker" />
  <TypeSignature Language="F#" Value="type HttpClient = class&#xA;    inherit HttpMessageInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Http" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Net.Http.HttpMessageInvoker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5303b-101">Stellt eine Basisklasse zum Senden von HTTP-Anforderungen und Empfangen von HTTP-Antworten aus einer Ressource bereit, die von einem URI identifiziert wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-101">Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-102">Die- <xref:System.Net.Http.HttpClient> Klasseninstanz fungiert als Sitzung zum Senden von HTTP-Anforderungen.</span><span class="sxs-lookup"><span data-stu-id="5303b-102">The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests.</span></span> <span data-ttu-id="5303b-103">Eine <xref:System.Net.Http.HttpClient> Instanz ist eine Sammlung von Einstellungen, die auf alle von dieser Instanz ausgeführten Anforderungen angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-103">An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance.</span></span> <span data-ttu-id="5303b-104">Außerdem <xref:System.Net.Http.HttpClient> verwendet jede Instanz ihren eigenen Verbindungspool, um die Anforderungen von Anforderungen zu isolieren, die von anderen Instanzen ausgeführt werden <xref:System.Net.Http.HttpClient> .</span><span class="sxs-lookup"><span data-stu-id="5303b-104">In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.</span></span>  
  
 <span data-ttu-id="5303b-105">Das <xref:System.Net.Http.HttpClient> fungiert auch als Basisklasse für spezifischere HTTP-Clients.</span><span class="sxs-lookup"><span data-stu-id="5303b-105">The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients.</span></span> <span data-ttu-id="5303b-106">Ein Beispiel wäre ein facebookhttpclient, der zusätzliche Methoden bereitstellt, die speziell für einen Facebook-Webdienst spezifisch sind (z. b. eine getfriends-Methode).</span><span class="sxs-lookup"><span data-stu-id="5303b-106">An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).</span></span> <span data-ttu-id="5303b-107">Abgeleitete Klassen sollten die virtuellen Methoden der-Klasse nicht überschreiben.</span><span class="sxs-lookup"><span data-stu-id="5303b-107">Derived classes should not override the virtual methods on the class.</span></span> <span data-ttu-id="5303b-108">Verwenden Sie stattdessen eine Konstruktorüberladung, die akzeptiert, <xref:System.Net.Http.HttpMessageHandler> um die Verarbeitung vor oder nach der Anforderung zu konfigurieren.</span><span class="sxs-lookup"><span data-stu-id="5303b-108">Instead, use a constructor overload that accepts <xref:System.Net.Http.HttpMessageHandler> to configure any pre- or post-request processing instead.</span></span>
  
 <span data-ttu-id="5303b-109">Standardmäßig wird bei .NET Framework und Mono zum <xref:System.Net.HttpWebRequest> Senden von Anforderungen an den Server verwendet.</span><span class="sxs-lookup"><span data-stu-id="5303b-109">By default on .NET Framework and Mono, <xref:System.Net.HttpWebRequest> is used to send requests to the server.</span></span> <span data-ttu-id="5303b-110">Dieses Verhalten kann durch Angabe eines anderen Kanals in einer der Konstruktorüberladungen geändert werden, die eine- <xref:System.Net.Http.HttpMessageHandler> Instanz als Parameter aufrufen.</span><span class="sxs-lookup"><span data-stu-id="5303b-110">This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter.</span></span> <span data-ttu-id="5303b-111">Wenn Features wie Authentifizierung oder Zwischenspeicherung erforderlich sind, <xref:System.Net.Http.WebRequestHandler> kann verwendet werden, um Einstellungen zu konfigurieren, und die Instanz kann an den-Konstruktor übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-111">If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor.</span></span> <span data-ttu-id="5303b-112">Der zurückgegebene Handler kann an eine der Konstruktorüberladungen übergeben werden, die einen-Parameter übernehmen <xref:System.Net.Http.HttpMessageHandler> .</span><span class="sxs-lookup"><span data-stu-id="5303b-112">The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.</span></span>  
  
 <span data-ttu-id="5303b-113">Wenn eine APP <xref:System.Net.Http.HttpClient> , die und verwandte Klassen im- <xref:System.Net.Http> Namespace verwendet, große Datenmengen herunterladen soll (50 Megabyte oder mehr), sollte die APP diese Downloads streamen und nicht die Standard Pufferung verwenden.</span><span class="sxs-lookup"><span data-stu-id="5303b-113">If an app using <xref:System.Net.Http.HttpClient> and related classes in the <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.</span></span> <span data-ttu-id="5303b-114">Wenn die Standard Pufferung verwendet wird, wird die Speicherauslastung des Clients sehr groß, was möglicherweise zu einer erheblich geringeren Leistung führt.</span><span class="sxs-lookup"><span data-stu-id="5303b-114">If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</span></span>  

 <span data-ttu-id="5303b-115">Die Eigenschaften von <xref:System.Net.Http.HttpClient> sollten nicht geändert werden, solange ausstehende Anforderungen vorliegen, da Sie nicht Thread sicher sind.</span><span class="sxs-lookup"><span data-stu-id="5303b-115">Properties of <xref:System.Net.Http.HttpClient> should not be modified while there are outstanding requests, because it is not thread-safe.</span></span>

   
 <span data-ttu-id="5303b-116">Die folgenden Methoden sind Thread sicher:</span><span class="sxs-lookup"><span data-stu-id="5303b-116">The following methods are thread safe:</span></span>  
  
1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  
  
2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  
  
3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  
  
4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  
  
5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  
  
6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  
  
7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  
  
8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  
  
9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  
  
 <span data-ttu-id="5303b-117"><xref:System.Net.Http.HttpClient> soll einmal instanziiert und während der gesamten Lebensdauer einer Anwendung wieder verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-117"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="5303b-118">Durch das Instanziieren einer HttpClient-Klasse für jede Anforderung wird die Anzahl der verfügbaren Sockets bei starker Auslastung erschöpft.</span><span class="sxs-lookup"><span data-stu-id="5303b-118">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="5303b-119">Dies führt zu SocketException-Fehlern.</span><span class="sxs-lookup"><span data-stu-id="5303b-119">This will result in SocketException errors.</span></span> <span data-ttu-id="5303b-120">Im folgenden finden Sie ein Beispiel für die korrekte Verwendung von HttpClient.</span><span class="sxs-lookup"><span data-stu-id="5303b-120">Below is an example using HttpClient correctly.</span></span>  
  
```csharp
public class GoodController : ApiController
{
    private static readonly HttpClient HttpClient;

    static GoodController()
    {
        HttpClient = new HttpClient();
    }
}
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient  
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

<span data-ttu-id="5303b-121"><xref:System.Net.Http.HttpClient>Ist eine API auf hoher Ebene, die die Funktionen auf niedrigerer Ebene umschließt, die auf jeder Plattform verfügbar sind, auf der Sie ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-121">The <xref:System.Net.Http.HttpClient> is a high-level API that wraps the lower-level functionality available on each platform where it runs.</span></span>

<span data-ttu-id="5303b-122">Auf jeder Plattform wird von <xref:System.Net.Http.HttpClient> versucht, den am besten verfügbaren Transport zu verwenden:</span><span class="sxs-lookup"><span data-stu-id="5303b-122">On each platform, <xref:System.Net.Http.HttpClient> tries to use the best available transport:</span></span>

| <span data-ttu-id="5303b-123">**Host/Laufzeit**</span><span class="sxs-lookup"><span data-stu-id="5303b-123">**Host/Runtime**</span></span>            | <span data-ttu-id="5303b-124">**Back-End**</span><span class="sxs-lookup"><span data-stu-id="5303b-124">**Backend**</span></span>                                                                               |
| --------------------------- | ----------------------------------------------------------------------------------------- |
| <span data-ttu-id="5303b-125">Windows/. NET-Framework</span><span class="sxs-lookup"><span data-stu-id="5303b-125">Windows/.NET Framework</span></span>      | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="5303b-126">Windows/Mono</span><span class="sxs-lookup"><span data-stu-id="5303b-126">Windows/Mono</span></span>                | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="5303b-127">Windows/UWP</span><span class="sxs-lookup"><span data-stu-id="5303b-127">Windows/UWP</span></span>                 | <span data-ttu-id="5303b-128">Windows Native <xref:System.Net.Http.WinHttpHandler> (http 2,0-fähig)</span><span class="sxs-lookup"><span data-stu-id="5303b-128">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="5303b-129">Windows/. net Core 1.0-2.0</span><span class="sxs-lookup"><span data-stu-id="5303b-129">Windows/.NET Core 1.0-2.0</span></span>   | <span data-ttu-id="5303b-130">Windows Native <xref:System.Net.Http.WinHttpHandler> (http 2,0-fähig)</span><span class="sxs-lookup"><span data-stu-id="5303b-130">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="5303b-131">Android/xamarin</span><span class="sxs-lookup"><span data-stu-id="5303b-131">Android/Xamarin</span></span>             | <span data-ttu-id="5303b-132">Zum Zeitpunkt der Erstellung ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="5303b-132">Selected at build-time.</span></span> <span data-ttu-id="5303b-133">Kann entweder verwenden <xref:System.Net.HttpWebRequest> oder für die Verwendung der systemeigenen Android-Verwendung konfiguriert werden. [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span><span class="sxs-lookup"><span data-stu-id="5303b-133">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Android's native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span></span> |
| <span data-ttu-id="5303b-134">IOS, tvos, watchos/xamarin</span><span class="sxs-lookup"><span data-stu-id="5303b-134">iOS, tvOS, watchOS/Xamarin</span></span>  | <span data-ttu-id="5303b-135">Zum Zeitpunkt der Erstellung ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="5303b-135">Selected at build-time.</span></span> <span data-ttu-id="5303b-136">Kann entweder verwenden <xref:System.Net.HttpWebRequest> oder für die Verwendung von Apple [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (http 2,0-fähig) konfiguriert werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-136">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="5303b-137">macOS/xamarin</span><span class="sxs-lookup"><span data-stu-id="5303b-137">macOS/Xamarin</span></span>               | <span data-ttu-id="5303b-138">Zum Zeitpunkt der Erstellung ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="5303b-138">Selected at build-time.</span></span> <span data-ttu-id="5303b-139">Kann entweder verwenden <xref:System.Net.HttpWebRequest> oder für die Verwendung von Apple [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (http 2,0-fähig) konfiguriert werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-139">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="5303b-140">macOS/Mono</span><span class="sxs-lookup"><span data-stu-id="5303b-140">macOS/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="5303b-141">macOS/. net Core 1.0-2.0</span><span class="sxs-lookup"><span data-stu-id="5303b-141">macOS/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="5303b-142">`libcurl`-basierter HTTP-Transport (http 2,0-fähig)</span><span class="sxs-lookup"><span data-stu-id="5303b-142">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="5303b-143">Linux/Mono</span><span class="sxs-lookup"><span data-stu-id="5303b-143">Linux/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="5303b-144">Linux/. net Core 1.0-2.0</span><span class="sxs-lookup"><span data-stu-id="5303b-144">Linux/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="5303b-145">`libcurl`-basierter HTTP-Transport (http 2,0-fähig)</span><span class="sxs-lookup"><span data-stu-id="5303b-145">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="5303b-146">.Net Core 2,1 und höher</span><span class="sxs-lookup"><span data-stu-id="5303b-146">.NET Core 2.1 and later</span></span>     | <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>                    |

<span data-ttu-id="5303b-147">Benutzer können auch einen bestimmten Transport für konfigurieren <xref:System.Net.Http.HttpClient> , indem Sie den- <xref:System.Net.Http.HttpClient.%23ctor*> Konstruktor aufrufen, der einen annimmt <xref:System.Net.Http.HttpMessageHandler> .</span><span class="sxs-lookup"><span data-stu-id="5303b-147">Users can also configure a specific transport for <xref:System.Net.Http.HttpClient> by invoking the <xref:System.Net.Http.HttpClient.%23ctor*> constructor that takes an <xref:System.Net.Http.HttpMessageHandler>.</span></span>

### <a name="httpclient-and-net-core"></a><span data-ttu-id="5303b-148">HttpClient und .net Core</span><span class="sxs-lookup"><span data-stu-id="5303b-148">HttpClient and .NET Core</span></span>

<span data-ttu-id="5303b-149">Ab .net Core 2,1 bietet die- <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> Klasse anstelle von `HttpClientHandler` die-Implementierung, die von http-Netzwerk Klassen auf höherer Ebene wie verwendet wird `HttpClient` .</span><span class="sxs-lookup"><span data-stu-id="5303b-149">Starting with .NET Core 2.1, the <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> class instead of `HttpClientHandler` provides the implementation used by higher-level HTTP networking classes such as `HttpClient`.</span></span> <span data-ttu-id="5303b-150">Die Verwendung von <xref:System.Net.Http.SocketsHttpHandler> bietet eine Reihe von Vorteilen:</span><span class="sxs-lookup"><span data-stu-id="5303b-150">The use of <xref:System.Net.Http.SocketsHttpHandler> offers a number of advantages:</span></span>

- <span data-ttu-id="5303b-151">Eine beträchtliche Leistungssteigerung im Vergleich zur früheren Implementierung.</span><span class="sxs-lookup"><span data-stu-id="5303b-151">A significant performance improvement when compared with the previous implementation.</span></span>

- <span data-ttu-id="5303b-152">Die Beseitigung von Platt Form Abhängigkeiten, die die Bereitstellung und Wartung vereinfachen.</span><span class="sxs-lookup"><span data-stu-id="5303b-152">The elimination of platform dependencies, which simplifies deployment and servicing.</span></span> <span data-ttu-id="5303b-153">Beispielsweise `libcurl` ist keine Abhängigkeit mehr von .net Core für macOS und .net Core für Linux.</span><span class="sxs-lookup"><span data-stu-id="5303b-153">For example, `libcurl` is no longer a dependency on .NET Core for macOS and .NET Core for Linux.</span></span>

- <span data-ttu-id="5303b-154">Konsistentes Verhalten für alle .net-Plattformen.</span><span class="sxs-lookup"><span data-stu-id="5303b-154">Consistent behavior across all .NET platforms.</span></span>

<span data-ttu-id="5303b-155">Wenn diese Änderung nicht erwünscht ist, können Sie die Anwendung so konfigurieren, dass Sie die ältere verwendet, und zwar <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> auf verschiedene Weise:</span><span class="sxs-lookup"><span data-stu-id="5303b-155">If this change is undesirable, you can configure your application to use the older <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> instead in a number of ways:</span></span>

- <span data-ttu-id="5303b-156">Durch Aufrufen der- <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> Methode wie folgt:</span><span class="sxs-lookup"><span data-stu-id="5303b-156">By calling the <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> method as follows:</span></span>

   ```csharp
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", false);
   ```

   ```vb
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", False)
   ``` 
- <span data-ttu-id="5303b-157">Durch die Definition des `System.Net.Http.UseSocketsHttpHandler` Schalters in der *.netcore.runtimeconfig.jsfür* die Konfigurationsdatei:</span><span class="sxs-lookup"><span data-stu-id="5303b-157">By defining the `System.Net.Http.UseSocketsHttpHandler` switch in the *.netcore.runtimeconfig.json* configuration file:</span></span>

  ```json
  "runtimeOptions": {
    "configProperties": {
        "System.Net.Http.UseSocketsHttpHandler": false
    }
  }
  ```
  
- <span data-ttu-id="5303b-158">Definieren Sie eine Umgebungsvariable mit dem Namen `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` , und legen Sie Sie entweder auf `false` oder auf 0 fest.</span><span class="sxs-lookup"><span data-stu-id="5303b-158">By defining an environment variable named `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` and setting it to either `false` or 0.</span></span>

## Examples  
 [!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]  
 [!code-vb[System.Net.Http.HttpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.http.httpclient/vb/source.vb#1)]

 <span data-ttu-id="5303b-159">Im vorangehenden Codebeispiel wird ein `async Task Main()` Einstiegspunkt verwendet.</span><span class="sxs-lookup"><span data-stu-id="5303b-159">The preceding code example uses an `async Task Main()` entry point.</span></span> <span data-ttu-id="5303b-160">Diese Funktion erfordert c# 7,1 oder höher.</span><span class="sxs-lookup"><span data-stu-id="5303b-160">That feature requires C# 7.1 or later.</span></span>
 
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=245696"><span data-ttu-id="5303b-161">Herstellen einer Verbindung mit einem Webdienst</span><span class="sxs-lookup"><span data-stu-id="5303b-161">Connecting to a web service</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245697"><span data-ttu-id="5303b-162">Quickstart: Connecting using HttpClient (Schnellstart: Verbindungsherstellung mithilfe von „HttpClient“)</span><span class="sxs-lookup"><span data-stu-id="5303b-162">Quickstart: Connecting using HttpClient</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245699"><span data-ttu-id="5303b-163">Verwenden des HttpClient-Handlers</span><span class="sxs-lookup"><span data-stu-id="5303b-163">How to use HttpClient handlers</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245698"><span data-ttu-id="5303b-164">Sichern von HttpClient-Verbindungen</span><span class="sxs-lookup"><span data-stu-id="5303b-164">How to secure HttpClient connections</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=242550"><span data-ttu-id="5303b-165">HttpClient Sample (HttpClient-Beispiel)</span><span class="sxs-lookup"><span data-stu-id="5303b-165">HttpClient Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5303b-166">Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.HttpClient" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="5303b-166">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-167"><xref:System.Net.Http.HttpClient> soll einmal instanziiert und während der gesamten Lebensdauer einer Anwendung wieder verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-167"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="5303b-168">Durch das Instanziieren einer HttpClient-Klasse für jede Anforderung wird die Anzahl der verfügbaren Sockets bei starker Auslastung erschöpft.</span><span class="sxs-lookup"><span data-stu-id="5303b-168">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="5303b-169">Dies führt zu SocketException-Fehlern.</span><span class="sxs-lookup"><span data-stu-id="5303b-169">This will result in SocketException errors.</span></span> <span data-ttu-id="5303b-170">Im folgenden finden Sie ein Beispiel für die korrekte Verwendung von HttpClient.</span><span class="sxs-lookup"><span data-stu-id="5303b-170">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5303b-171">Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.HttpClient" />-Klasse mithilfe eines <see cref="T:System.Net.Http.HttpClientHandler" />-Objekts, das bei Freigabe dieser Instanz freigegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-171">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class using a <see cref="T:System.Net.Http.HttpClientHandler" /> that is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="5303b-172">Die Verwendung dieses Konstruktors entspricht dem Aufrufen des [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="5303b-172">Using this constructor is equivalent to calling the [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="5303b-173">Der HTTP-Handlerstapel, der zum Senden von Anforderungen zu verwenden ist.</span><span class="sxs-lookup"><span data-stu-id="5303b-173">The HTTP handler stack to use for sending requests.</span></span></param>
        <summary><span data-ttu-id="5303b-174">Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.HttpClient" />-Klasse mit dem angegebenen Handler.</span><span class="sxs-lookup"><span data-stu-id="5303b-174">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the specified handler.</span></span> <span data-ttu-id="5303b-175">Der Handler wird freigegeben, wenn diese Instanz freigegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-175">The handler is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="5303b-176">Die Verwendung dieses Konstruktors entspricht dem Aufrufen des [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="5303b-176">Using this constructor is equivalent to calling the [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>

<span data-ttu-id="5303b-177">Der angegebene `handler` wird verworfen, indem [HttpClient.](xref:System.Net.Http.HttpMessageInvoker.Dispose)verwerfen aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-177">The specified `handler` will be disposed of by calling [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span></span>  
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-178"><paramref name="handler" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-178">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler, bool disposeHandler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler * bool -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient (handler, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="5303b-179">Der <see cref="T:System.Net.Http.HttpMessageHandler" />, der für die Verarbeitung der HTTP-Antwortnachrichten verantwortlich ist.</span><span class="sxs-lookup"><span data-stu-id="5303b-179">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</span></span></param>
        <param name="disposeHandler"><span data-ttu-id="5303b-180"><see langword="true" /> , wenn der innere Handler von [HttpClient.](xref:System.Net.Http.HttpMessageInvoker.Dispose)verwerfen verworfen werden soll. <see langword="false" /> Wenn Sie beabsichtigen, den inneren Handler wiederzuverwenden.</span><span class="sxs-lookup"><span data-stu-id="5303b-180"><see langword="true" /> if the inner handler should be disposed of by [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose); <see langword="false" /> if you intend to reuse the inner handler.</span></span></param>
        <summary><span data-ttu-id="5303b-181">Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.HttpClient" />-Klasse mit dem bereitgestellten Handler und gibt an, ob dieser Handler freigegeben werden soll, wenn diese Instanz freigegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-181">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the provided handler, and specifies whether that handler should be disposed when this instance is disposed.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-182"><paramref name="handler" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-182">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : Uri with get, set" Usage="System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="C#" Value="public Uri? BaseAddress { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5303b-183">Ruft die Basisadresse des URI (Uniform Resource Identifier) der Internetressource ab, die verwendet wird, wenn Anforderungen gesendet werden, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="5303b-183">Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></summary>
        <value><span data-ttu-id="5303b-184">Die Basisadresse des URI (Uniform Resource Identifier) der Internetressource, die verwendet wird, wenn Anforderungen gesendet werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-184">The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-185">Beim Senden eines <xref:System.Net.Http.HttpRequestMessage> mit einem relativen URI wird der Nachrichten-URI der-Eigenschaft hinzugefügt, <xref:System.Net.Http.HttpClient.BaseAddress%2A> um einen absoluten URI zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="5303b-185">When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRequests">
      <MemberSignature Language="C#" Value="public void CancelPendingRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.CancelPendingRequests" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRequests ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelPendingRequests();" />
      <MemberSignature Language="F#" Value="member this.CancelPendingRequests : unit -&gt; unit" Usage="httpClient.CancelPendingRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5303b-186">Alle ausstehenden Anforderungen für diese Instanz abbrechen.</span><span class="sxs-lookup"><span data-stu-id="5303b-186">Cancel all pending requests on this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-187">Nach dem Aufrufen dieser Methode <xref:System.Net.Http.HttpClient> kann die Instanz weiterhin verwendet werden, um zusätzliche Anforderungen auszuführen.</span><span class="sxs-lookup"><span data-stu-id="5303b-187">After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.IWebProxy DefaultProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.IWebProxy DefaultProxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultProxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::IWebProxy ^ DefaultProxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultProxy : System.Net.IWebProxy with get, set" Usage="System.Net.Http.HttpClient.DefaultProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5303b-188">Ruft den globalen HTTP-Proxy ab oder legt diesen fest.</span><span class="sxs-lookup"><span data-stu-id="5303b-188">Gets or sets the global Http proxy.</span></span></summary>
        <value><span data-ttu-id="5303b-189">Ein Proxy, der von jedem-Rückruf verwendet wird, der einen instanziiert <see cref="T:System.Net.HttpWebRequest" /> .</span><span class="sxs-lookup"><span data-stu-id="5303b-189">A proxy used by every call that instantiates a <see cref="T:System.Net.HttpWebRequest" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
<span data-ttu-id="5303b-190">Diese statische Eigenschaft bestimmt den Standard Proxy, der von allen  <xref:System.Net.Http.HttpClient>   Instanzen verwendet wird, wenn kein Proxy explizit in dem  <xref:System.Net.Http.HttpClientHandler> über den Konstruktor übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-190">This static property determines the default proxy that all <xref:System.Net.Http.HttpClient> instances use if no proxy is set explicitly in the <xref:System.Net.Http.HttpClientHandler> passed through its constructor.</span></span> 

<span data-ttu-id="5303b-191">Die Standard Instanz, die von dieser Eigenschaft zurückgegeben wird, initialisiert je nach Plattform einen anderen Regelsatz:</span><span class="sxs-lookup"><span data-stu-id="5303b-191">The default instance returned by this property will initialize following a different set of rules depending on your platform:</span></span>
* <span data-ttu-id="5303b-192">**Für Windows:** Liest die Proxykonfiguration aus den Umgebungsvariablen oder, wenn diese nicht definiert sind, aus den Proxy Einstellungen des Benutzers.</span><span class="sxs-lookup"><span data-stu-id="5303b-192">**For Windows:** Reads proxy configuration from environment variables or, if those are not defined, from the user's proxy settings.</span></span>

* <span data-ttu-id="5303b-193">**Für macOS:** Liest die Proxykonfiguration aus den Umgebungsvariablen oder, wenn diese nicht definiert sind, aus den Proxy Einstellungen des Systems.</span><span class="sxs-lookup"><span data-stu-id="5303b-193">**For macOS:** Reads proxy configuration from environment variables or, if those are not defined, from the system's proxy settings.</span></span>

* <span data-ttu-id="5303b-194">**Für Linux:** Liest die Proxykonfiguration aus Umgebungsvariablen, oder wenn diese nicht definiert sind, initialisiert diese Eigenschaft eine nicht konfigurierte Instanz, die alle Adressen umgeht.</span><span class="sxs-lookup"><span data-stu-id="5303b-194">**For Linux:** Reads proxy configuration from environment variables or, in case those are not defined, this property initializes a non-configured instance that bypasses all addresses.</span></span>

<span data-ttu-id="5303b-195">Die Umgebungsvariablen, die für die `DefaultProxy` Initialisierung auf Windows-und UNIX-basierten Plattformen verwendet werden, sind:</span><span class="sxs-lookup"><span data-stu-id="5303b-195">The environment variables used for `DefaultProxy` initialization on Windows and Unix-based platforms are:</span></span>
* <span data-ttu-id="5303b-196">HTTP_PROXY: der Hostname oder die IP-Adresse des Proxy Servers, der für HTTP-Anforderungen verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-196">HTTP_PROXY: the hostname or IP address of the proxy server used on HTTP requests.</span></span>
* <span data-ttu-id="5303b-197">HTTPS_PROXY: der Hostname oder die IP-Adresse des Proxy Servers, der für HTTPS-Anforderungen verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-197">HTTPS_PROXY: the hostname or IP address of the proxy server used on HTTPS requests.</span></span>
* <span data-ttu-id="5303b-198">ALL_PROXY: der Hostname oder die IP-Adresse des Proxy Servers, der für http-und/oder HTTPS-Anforderungen verwendet wird, falls HTTP_PROXY und/oder HTTPS_PROXY nicht definiert sind.</span><span class="sxs-lookup"><span data-stu-id="5303b-198">ALL_PROXY: the hostname or IP address of the proxy server used on HTTP and/or HTTPS requests in case HTTP_PROXY and/or HTTPS_PROXY are not defined.</span></span>
* <span data-ttu-id="5303b-199">NO_PROXY: eine durch Trennzeichen getrennte Liste von Hostnamen, die von der Proxy Datei ausgeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5303b-199">NO_PROXY: a comma-separated list of hostnames that should be excluded from proxying.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-200">Der übergebene Wert kann nicht <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="5303b-200">The value passed cannot be <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestHeaders">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpRequestHeaders ^ DefaultRequestHeaders { System::Net::Http::Headers::HttpRequestHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestHeaders : System.Net.Http.Headers.HttpRequestHeaders" Usage="System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpRequestHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5303b-201">Ruft die Header ab, die mit jeder Anforderung gesendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5303b-201">Gets the headers which should be sent with each request.</span></span></summary>
        <value><span data-ttu-id="5303b-202">Die Header, die mit jeder Anforderung gesendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5303b-202">The headers which should be sent with each request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-203">Header, die für diese Eigenschaft festgelegt wurden, müssen nicht erneut für Anforderungs Nachrichten festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-203">Headers set on this property don't need to be set on request messages again.</span></span> <span data-ttu-id="5303b-204">`DefaultRequestHeaders` sollte nicht geändert werden, solange ausstehende Anforderungen vorhanden sind, da es nicht Thread sicher ist.</span><span class="sxs-lookup"><span data-stu-id="5303b-204">`DefaultRequestHeaders` should not be modified while there are outstanding requests, because it is not thread-safe.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestVersion">
      <MemberSignature Language="C#" Value="public Version DefaultRequestVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version DefaultRequestVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultRequestVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ DefaultRequestVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestVersion : Version with get, set" Usage="System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5303b-205">Ruft die HTTP-Standardversion ab, die für nachfolgende Anforderungen dieser <see cref="T:System.Net.Http.HttpClient" />-Klasse verwendet wird, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="5303b-205">Gets or sets the default HTTP version used on subsequent requests made by this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></summary>
        <value><span data-ttu-id="5303b-206">Die Standardversion, die für alle Anforderungen verwendet werden soll, die mit dieser Instanz vorgenommen wurden <see cref="T:System.Net.Http.HttpClient" /> .</span><span class="sxs-lookup"><span data-stu-id="5303b-206">The default version to use for any requests made with this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="5303b-207">`DefaultRequestVersion` ist standardmäßig <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5303b-207">`DefaultRequestVersion` is <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType> by default.</span></span>

<span data-ttu-id="5303b-208">Die- `DefaultRequestVersion` Eigenschaft gibt die Standard-HTTP-Version an, die für Anforderungen verwendet <xref:System.Net.Http.HttpClient> werden soll, die mit dieser Instanz gesendet werden, wenn der <xref:System.Net.Http.HttpRequestMessage> zum Senden erstellt wird, insbesondere bei Aufrufen von Methoden wie <xref:System.Net.Http.HttpClient.DeleteAsync%2A> , <xref:System.Net.Http.HttpClient.GetAsync%2A> , <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A> , <xref:System.Net.Http.HttpClient.GetStreamAsync%2A> , <xref:System.Net.Http.HttpClient.GetStringAsync%2A> , <xref:System.Net.Http.HttpClient.PatchAsync%2A> , <xref:System.Net.Http.HttpClient.PostAsync%2A> und <xref:System.Net.Http.HttpClient.PutAsync%2A> .</span><span class="sxs-lookup"><span data-stu-id="5303b-208">The `DefaultRequestVersion` property specifies the default HTTP version to use for requests sent using this <xref:System.Net.Http.HttpClient> instance when it constructs the <xref:System.Net.Http.HttpRequestMessage> to send, specifically with calls to methods such as <xref:System.Net.Http.HttpClient.DeleteAsync%2A>, <xref:System.Net.Http.HttpClient.GetAsync%2A>, <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>, <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>, <xref:System.Net.Http.HttpClient.GetStringAsync%2A>, <xref:System.Net.Http.HttpClient.PatchAsync%2A>, <xref:System.Net.Http.HttpClient.PostAsync%2A>, and <xref:System.Net.Http.HttpClient.PutAsync%2A>.</span></span>

<span data-ttu-id="5303b-209">Die- `DefaultRequestVersion` Eigenschaft gilt nicht für die- <xref:System.Net.Http.HttpClient.SendAsync%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5303b-209">The `DefaultRequestVersion` property doesn't apply to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method.</span></span> <span data-ttu-id="5303b-210">Der <xref:System.Net.Http.HttpRequestMessage> Parameter, der als Argument an die- <xref:System.Net.Http.HttpClient.SendAsync%2A> Methode übergeben wird, verfügt über eine eigene- `Version` Eigenschaft, die die für die Anforderung verwendete HTTP-Version steuert.</span><span class="sxs-lookup"><span data-stu-id="5303b-210">The <xref:System.Net.Http.HttpRequestMessage> parameter passed as the argument to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method has its own `Version` property that controls the HTTP version used for the request.</span></span>

<span data-ttu-id="5303b-211">Die- `DefaultRequestVersion` Eigenschaft kann geändert werden, solange die <xref:System.Net.Http.HttpClient> Instanz keine Anforderung gestartet hat.</span><span class="sxs-lookup"><span data-stu-id="5303b-211">The `DefaultRequestVersion` property can be changed as long as the <xref:System.Net.Http.HttpClient> instance has not started any request.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-212"><see langword="DefaultRequestVersion" /> ist in einem Mengenvorgang <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-212">In a set operation, <see langword="DefaultRequestVersion" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5303b-213">Die <see cref="T:System.Net.Http.HttpClient" />-Klasse hat bereits eine oder mehrere Anforderungen gestartet.</span><span class="sxs-lookup"><span data-stu-id="5303b-213">The <see cref="T:System.Net.Http.HttpClient" /> instance has already started one or more requests.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5303b-214">Die <see cref="T:System.Net.Http.HttpClient" />-Klasse wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="5303b-214">The <see cref="T:System.Net.Http.HttpClient" /> instance has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5303b-215">Eine DELETE-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-215">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-216">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-216">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="5303b-217">Eine DELETE-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-217">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-218">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-218">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-219">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-219">This operation will not block.</span></span> <span data-ttu-id="5303b-220">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-220">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-221">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-221">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-222"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-222"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-223"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-223"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-224"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-224"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-225"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-225">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5303b-226">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="5303b-226">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-227">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-227">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-228">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-228">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-229">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-229">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="5303b-230">Eine DELETE-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-230">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-231">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-231">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-232">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-232">This operation will not block.</span></span> <span data-ttu-id="5303b-233">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-233">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-234">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-234">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-235"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-235"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-236"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-236"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-237"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-237"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-238"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-238">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5303b-239">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="5303b-239">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-240">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-240">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-241">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-241">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-242">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-242">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-243">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-243">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-244">Eine DELETE-Anforderung für den angegebenen URI mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-244">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-245">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-245">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-246">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-246">This operation will not block.</span></span> <span data-ttu-id="5303b-247">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-247">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-248">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-248">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-249"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-249"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-250"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-250"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-251"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-251"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-252"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-252">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5303b-253">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="5303b-253">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-254">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-254">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-255">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-255">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-256">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-256">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-257">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-257">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-258">Eine DELETE-Anforderung für den angegebenen URI mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-258">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-259">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-259">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-260">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-260">This operation will not block.</span></span> <span data-ttu-id="5303b-261">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-261">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-262">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-262">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-263"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-263"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-264"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-264"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-265"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-265"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-266"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-266">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5303b-267">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="5303b-267">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-268">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-268">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-269">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-269">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="httpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="5303b-270"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben. <see langword="false" />, wenn ausschließlich nicht verwaltete Ressourcen freigegeben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5303b-270"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="5303b-271">Gibt die vom <see cref="T:System.Net.Http.HttpClient" /> verwendeten, nicht verwalteten Ressourcen frei und verwirft optional auch die verwalteten Ressourcen.</span><span class="sxs-lookup"><span data-stu-id="5303b-271">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-272">Diese Methode wird von der öffentlichen `Dispose()` -Methode und der- <xref:System.Object.Finalize%2A> Methode aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="5303b-272">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="5303b-273">`Dispose()` Ruft die geschützte `Dispose(Boolean)` Methode auf, wobei der- `disposing` Parameter auf festgelegt ist `true` .</span><span class="sxs-lookup"><span data-stu-id="5303b-273">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="5303b-274"><xref:System.Object.Finalize%2A> Ruft `Dispose` `disposing` auf, wobei auf gesetzt ist `false` .</span><span class="sxs-lookup"><span data-stu-id="5303b-274"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="5303b-275">Wenn der `disposing`-Parameter `true` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:System.Net.Http.HttpClient> verweist.</span><span class="sxs-lookup"><span data-stu-id="5303b-275">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references.</span></span> <span data-ttu-id="5303b-276">Diese Methode ruft die `Dispose()`-Methode jedes referenzierten Objekts auf.</span><span class="sxs-lookup"><span data-stu-id="5303b-276">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 <span data-ttu-id="5303b-277">Wenn diese Methode aufgerufen wird, wird die- <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> Methode aufgerufen, um alle ausstehenden Anforderungen abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="5303b-277">When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5303b-278">Eine GET-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-278">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-279">Der Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-279">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-280">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-280">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="5303b-281">Eine GET-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-281">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-282">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-282">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-283">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-283">This operation will not block.</span></span> <span data-ttu-id="5303b-284">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-284">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-285">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-285">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-286"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-286"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-287"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-287"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-288"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-288"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-289"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-289">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-290">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-290">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-291">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-291">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-292">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-292">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="5303b-293">Eine GET-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-293">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-294">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-294">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-295">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-295">This operation will not block.</span></span> <span data-ttu-id="5303b-296">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-296">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-297">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-297">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-298"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-298"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-299"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-299"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-300"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-300"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-301"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-301">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-302">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-302">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-303">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-303">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-304">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-304">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="5303b-305">Ein HTTP-Abschlussoptions-Wert, der angibt, wann die Operation als abgeschlossen betrachtet werden soll.</span><span class="sxs-lookup"><span data-stu-id="5303b-305">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="5303b-306">Eine GET-Anforderung an den angegebenen URI mit einer HTTP-Abschlussoption als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-306">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-307">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-307">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-308">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-308">This operation will not block.</span></span> <span data-ttu-id="5303b-309">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird basierend auf dem-Parameter vollständig ausgeführt, `completionOption` nachdem der Teil oder die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-309">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-310">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-310">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-311"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-311"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-312"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-312"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-313"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-313"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-314"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-314">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-315">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-315">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-316">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-316">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-317">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-317">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-318">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-318">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-319">Eine GET-Anforderung für den angegebenen URI mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-319">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-320">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-320">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-321">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-321">This operation will not block.</span></span> <span data-ttu-id="5303b-322">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-322">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-323">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-323">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-324"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-324"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-325"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-325"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-326"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-326"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-327"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-327">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-328">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-328">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-329">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-329">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-330">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-330">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="5303b-331">Ein HTTP-Abschlussoptions-Wert, der angibt, wann die Operation als abgeschlossen betrachtet werden soll.</span><span class="sxs-lookup"><span data-stu-id="5303b-331">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="5303b-332">Eine GET-Anforderung an den angegebenen URI mit einer HTTP-Abschlussoption als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-332">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-333">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-333">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-334">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-334">This operation will not block.</span></span> <span data-ttu-id="5303b-335">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird basierend auf dem-Parameter vollständig ausgeführt, `completionOption` nachdem der Teil oder die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-335">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-336">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-336">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-337"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-337"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-338"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-338"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-339"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-339"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-340"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-340">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-341">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-341">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-342">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-342">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-343">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-343">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-344">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-344">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-345">Eine GET-Anforderung für den angegebenen URI mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-345">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-346">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-346">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-347">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-347">This operation will not block.</span></span> <span data-ttu-id="5303b-348">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-348">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-349">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-349">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-350"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-350"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-351"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-351"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-352"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-352"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-353"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-353">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-354">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-354">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-355">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-355">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-356">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-356">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="5303b-357">Ein HTTP-Abschlussoptions-Wert, der angibt, wann die Operation als abgeschlossen betrachtet werden soll.</span><span class="sxs-lookup"><span data-stu-id="5303b-357">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-358">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-358">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-359">Eine GET-Anforderung an den angegebenen URI mit einer HTTP-Abschlussoption und einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-359">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-360">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-360">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-361">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-361">This operation will not block.</span></span> <span data-ttu-id="5303b-362">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird basierend auf dem-Parameter vollständig ausgeführt, `completionOption` nachdem der Teil oder die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-362">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-363">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-363">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-364"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-364"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-365"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-365"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-366"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-366"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-367"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-367">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-368">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-368">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-369">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-369">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-370">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-370">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="5303b-371">Ein HTTP-Abschlussoptions-Wert, der angibt, wann die Operation als abgeschlossen betrachtet werden soll.</span><span class="sxs-lookup"><span data-stu-id="5303b-371">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-372">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-372">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-373">Eine GET-Anforderung an den angegebenen URI mit einer HTTP-Abschlussoption und einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-373">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-374">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-374">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-375">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-375">This operation will not block.</span></span> <span data-ttu-id="5303b-376">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird basierend auf dem-Parameter vollständig ausgeführt, `completionOption` nachdem der Teil oder die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-376">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-377">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-377">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-378"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-378"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-379"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-379"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-380"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-380"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-381"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-381">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-382">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-382">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-383">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-383">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteArrayAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5303b-384">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Bytearray in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="5303b-384">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-385">Der Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-385">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-386">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-386">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="5303b-387">Sendet eine GET-Anforderung an den angegebenen URI und gibt den Antworttext in einem asynchronen Vorgang als Bytearray zurück.</span><span class="sxs-lookup"><span data-stu-id="5303b-387">Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-388">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-388">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-389">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-389">This operation will not block.</span></span> <span data-ttu-id="5303b-390">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem der gesamte Antworttext gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-390">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-391">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-391">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-392"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-392"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-393"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-393"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-394"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-394"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-395"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-395">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-396">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-396">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-397">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-397">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-398">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-398">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="5303b-399">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Bytearray in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="5303b-399">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-400">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-400">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-401">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-401">This operation will not block.</span></span> <span data-ttu-id="5303b-402">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem der gesamte Antworttext gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-402">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-403">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-403">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-404"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-404"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-405"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-405"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-406"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-406"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-407"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-407">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-408">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-408">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-409">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-409">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStreamAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5303b-410">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Datenstrom in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="5303b-410">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-411">Der Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-411">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-412">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-412">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="5303b-413">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Datenstrom in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="5303b-413">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-414">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-414">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-415">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-415">This operation will not block.</span></span> <span data-ttu-id="5303b-416">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die Antwortheader gelesen wurden.</span><span class="sxs-lookup"><span data-stu-id="5303b-416">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="5303b-417">Mit dieser Methode wird der Antworttext weder gelesen noch gepuffert.</span><span class="sxs-lookup"><span data-stu-id="5303b-417">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-418">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-418">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-419"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-419"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-420"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-420"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-421"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-421"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-422"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-422">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-423">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-423">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-424">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-424">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-425">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-425">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="5303b-426">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Datenstrom in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="5303b-426">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-427">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-427">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-428">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-428">This operation will not block.</span></span> <span data-ttu-id="5303b-429">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die Antwortheader gelesen wurden.</span><span class="sxs-lookup"><span data-stu-id="5303b-429">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="5303b-430">Mit dieser Methode wird der Antworttext weder gelesen noch gepuffert.</span><span class="sxs-lookup"><span data-stu-id="5303b-430">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-431">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-431">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-432"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-432"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-433"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-433"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-434"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-434"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-435"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-435">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-436">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-436">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-437">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-437">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStringAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5303b-438">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Zeichenfolge in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="5303b-438">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-439">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-439">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-440">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-440">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="5303b-441">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Zeichenfolge in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="5303b-441">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-442">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-442">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-443">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-443">This operation will not block.</span></span> <span data-ttu-id="5303b-444">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem der gesamte Antworttext gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-444">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-445">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-445">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-446"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-446"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-447"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-447"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-448"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-448"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-449"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-449">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-450">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-450">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-451">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-451">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-452">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-452">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="5303b-453">Senden Sie eine GET-Anforderung an den angegebenen URI und geben Sie den Antworttext als Zeichenfolge in einem asynchronen Vorgang zurück.</span><span class="sxs-lookup"><span data-stu-id="5303b-453">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-454">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-454">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-455">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-455">This operation will not block.</span></span> <span data-ttu-id="5303b-456">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem der gesamte Antworttext gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-456">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-457">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-457">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-458"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-458"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-459"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-459"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-460"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-460"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-461"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-461">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-462">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-462">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-463">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-463">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseContentBufferSize">
      <MemberSignature Language="C#" Value="public long MaxResponseContentBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxResponseContentBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseContentBufferSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxResponseContentBufferSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseContentBufferSize : int64 with get, set" Usage="System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5303b-464">Ruft beim Lesen des Antwortinhalts die maximale Anzahl zwischenzuspeichernder Bytes ab oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="5303b-464">Gets or sets the maximum number of bytes to buffer when reading the response content.</span></span></summary>
        <value><span data-ttu-id="5303b-465">Die maximale Anzahl zu puffernder Bytes, wenn der Antwortinhalt gelesen wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-465">The maximum number of bytes to buffer when reading the response content.</span></span> <span data-ttu-id="5303b-466">Der Standardwert für diese Eigenschaft ist 2 GB.</span><span class="sxs-lookup"><span data-stu-id="5303b-466">The default value for this property is 2 gigabytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-467">Eine APP kann die- <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> Eigenschaft auf einen niedrigeren Wert festlegen, um die Größe der Antwort auf den Puffer beim Lesen der Antwort einzuschränken.</span><span class="sxs-lookup"><span data-stu-id="5303b-467">An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response.</span></span> <span data-ttu-id="5303b-468">Wenn die Größe des Antwort Inhalts größer als die-  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> Eigenschaft ist, wird eine-Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-468">If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5303b-469">Die angegebene Größe ist kleiner oder gleich 0 (null).</span><span class="sxs-lookup"><span data-stu-id="5303b-469">The size specified is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5303b-470">Es wurde bereits ein Vorgang für die aktuelle Instanz gestartet.</span><span class="sxs-lookup"><span data-stu-id="5303b-470">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5303b-471">Die aktuelle Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="5303b-471">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-472">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-472">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-473">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-473">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="5303b-474">Sendet eine PATCH-Anforderung an einen Uri, der als eine Zeichenfolge als asynchroner Vorgang festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="5303b-474">Sends a PATCH request to a Uri designated as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-475">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-475">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-476">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-476">This operation will not block.</span></span> <span data-ttu-id="5303b-477">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-477">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-478">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-478">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-479">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-479">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="5303b-480">Sendet eine PATCH-Anforderung als asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="5303b-480">Sends a PATCH request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-481">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-481">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-482">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-482">This operation will not block.</span></span> <span data-ttu-id="5303b-483">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-483">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-484">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-484">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-485">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-485">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-486">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-486">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-487">Sendet eine PATCH-Anforderung mit einem Abbruchtoken an einen URI, dargestellt als Zeichenfolge als asynchroner Vorgang.</span><span class="sxs-lookup"><span data-stu-id="5303b-487">Sends a PATCH request with a cancellation token to a Uri represented as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-488">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-488">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-489">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-489">This operation will not block.</span></span> <span data-ttu-id="5303b-490">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-490">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-491">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-491">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-492">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-492">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-493">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-493">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-494">Sendet eine PATCH-Anforderung mit einem Abbruchtoken als einen asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="5303b-494">Sends a PATCH request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-495">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-495">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-496">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-496">This operation will not block.</span></span> <span data-ttu-id="5303b-497">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-497">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5303b-498">Eine POST-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-498">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-499">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-499">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-500">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-500">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-501">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-501">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="5303b-502">Eine POST-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-502">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-503">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-503">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-504">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-504">This operation will not block.</span></span> <span data-ttu-id="5303b-505">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-505">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-506">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-506">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-507"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-507"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-508"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-508"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-509"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-509"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-510"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-510">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-511">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-511">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-512">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-512">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-513">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-513">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-514">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-514">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="5303b-515">Eine POST-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-515">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-516">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-516">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-517">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-517">This operation will not block.</span></span> <span data-ttu-id="5303b-518">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-518">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-519">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-519">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-520"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-520"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-521"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-521"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-522"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-522"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-523"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-523">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-524">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-524">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-525">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-525">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-526">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-526">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-527">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-527">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-528">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-528">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-529">Eine POST-Anforderung mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-529">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-530">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-530">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-531">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-531">This operation will not block.</span></span> <span data-ttu-id="5303b-532">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-532">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-533">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-533">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-534"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-534"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-535"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-535"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-536"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-536"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-537"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-537">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-538">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-538">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-539">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-539">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-540">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-540">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-541">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-541">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-542">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-542">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-543">Eine POST-Anforderung mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-543">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-544">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-544">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-545">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-545">This operation will not block.</span></span> <span data-ttu-id="5303b-546">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-546">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-547">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-547">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-548"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-548"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-549"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-549"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-550"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-550"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-551"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-551">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-552">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-552">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-553">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-553">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PutAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5303b-554">Eine PUT-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-554">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-555">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-555">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-556">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-556">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-557">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-557">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="5303b-558">Eine PUT-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-558">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-559">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-559">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-560">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-560">This operation will not block.</span></span> <span data-ttu-id="5303b-561">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-561">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-562">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-562">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-563"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-563"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-564"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-564"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-565"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-565"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-566"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-566">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-567">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-567">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-568">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-568">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-569">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-569">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-570">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-570">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="5303b-571">Eine PUT-Anforderung an den angegebenen URI als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-571">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-572">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-572">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-573">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-573">This operation will not block.</span></span> <span data-ttu-id="5303b-574">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-574">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-575">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-575">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-576"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-576"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-577"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-577"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-578"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-578"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-579"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-579">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-580">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-580">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-581">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-581">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-582">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-582">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-583">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-583">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-584">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-584">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-585">Eine PUT-Anforderung mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-585">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-586">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-586">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-587">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-587">This operation will not block.</span></span> <span data-ttu-id="5303b-588">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-588">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-589">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-589">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-590"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-590"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-591"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-591"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-592"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-592"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-593"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-593">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-594">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-594">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-595">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-595">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="5303b-596">Der URI, an den die Anforderung gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-596">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="5303b-597">Der Inhalt der HTTP-Anforderung, die an den Server gesendet wird.</span><span class="sxs-lookup"><span data-stu-id="5303b-597">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-598">Ein Abbruchtoken, das von anderen Objekten oder Threads verwendet werden kann, um Nachricht vom Abbruch zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="5303b-598">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="5303b-599">Eine PUT-Anforderung mit einem Abbruchtoken als asynchronen Vorgang senden.</span><span class="sxs-lookup"><span data-stu-id="5303b-599">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-600">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-600">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-601">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-601">This operation will not block.</span></span> <span data-ttu-id="5303b-602">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, nachdem die gesamte Antwort (einschließlich Inhalt) gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-602">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-603">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-603">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-604"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-604"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-605"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-605"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-606"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-606"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-607"><paramref name="requestUri" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-607">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-608">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-608">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-609">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-609">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5303b-610">Senden Sie eine HTTP-Anforderung als asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="5303b-610">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-611">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-611">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="5303b-612">Die zu sendende HTTP-Anforderungsmeldung.</span><span class="sxs-lookup"><span data-stu-id="5303b-612">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="5303b-613">Senden Sie eine HTTP-Anforderung als asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="5303b-613">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-614">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-614">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-615">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-615">This operation will not block.</span></span> <span data-ttu-id="5303b-616">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, sobald die gesamte Antwort einschließlich Inhalt gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-616">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-617">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-617">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-618"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-618"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-619"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-619"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-620"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-620"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-621"><paramref name="request" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-621">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5303b-622">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="5303b-622">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-623">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-623">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-624">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-624">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="5303b-625">Die zu sendende HTTP-Anforderungsmeldung.</span><span class="sxs-lookup"><span data-stu-id="5303b-625">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="5303b-626">Wann der Vorgang abgeschlossen werden sollte (sobald eine Antwort verfügbar ist, oder nach dem Lesen des gesamten Inhalts der Antwort).</span><span class="sxs-lookup"><span data-stu-id="5303b-626">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <summary><span data-ttu-id="5303b-627">Senden Sie eine HTTP-Anforderung als asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="5303b-627">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-628">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-628">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-629">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-629">This operation will not block.</span></span> <span data-ttu-id="5303b-630">Abhängig vom Wert des- `completionOption` Parameters wird das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt beendet, sobald eine Antwort verfügbar ist oder die gesamte Antwort einschließlich Inhalt gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-630">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-631">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-631">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-632"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-632"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-633"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-633"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-634"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-634"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-635"><paramref name="request" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-635">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5303b-636">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="5303b-636">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-637">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-637">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-638">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-638">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SendAsync (request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="5303b-639">Die zu sendende HTTP-Anforderungsmeldung.</span><span class="sxs-lookup"><span data-stu-id="5303b-639">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-640">Das Abbruchtoken, um den Vorgang abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="5303b-640">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="5303b-641">Senden Sie eine HTTP-Anforderung als asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="5303b-641">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-642">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-642">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-643">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-643">This operation will not block.</span></span> <span data-ttu-id="5303b-644">Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird beendet, sobald die gesamte Antwort einschließlich Inhalt gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-644">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-645">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-645">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-646"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-646"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-647"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-647"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-648"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-648"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-649"><paramref name="request" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-649">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5303b-650">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="5303b-650">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-651">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-651">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-652">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-652">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="5303b-653">Die zu sendende HTTP-Anforderungsmeldung.</span><span class="sxs-lookup"><span data-stu-id="5303b-653">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="5303b-654">Wann der Vorgang abgeschlossen werden sollte (sobald eine Antwort verfügbar ist, oder nach dem Lesen des gesamten Inhalts der Antwort).</span><span class="sxs-lookup"><span data-stu-id="5303b-654">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="5303b-655">Das Abbruchtoken, um den Vorgang abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="5303b-655">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="5303b-656">Senden Sie eine HTTP-Anforderung als asynchronen Vorgang.</span><span class="sxs-lookup"><span data-stu-id="5303b-656">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5303b-657">Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="5303b-657">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-658">Dieser Vorgang wird nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5303b-658">This operation will not block.</span></span> <span data-ttu-id="5303b-659">Abhängig vom Wert des- `completionOption` Parameters wird das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt beendet, sobald eine Antwort verfügbar ist oder die gesamte Antwort einschließlich Inhalt gelesen wurde.</span><span class="sxs-lookup"><span data-stu-id="5303b-659">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="5303b-660">Im Falle eines Timeouts werden verschiedene Ausnahmen für verschiedene .net-Implementierungen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-660">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="5303b-661"><xref:System.Net.Http.HttpRequestException> wird für alle anwendbaren .NET Framework Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-661"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="5303b-662"><xref:System.Threading.Tasks.TaskCanceledException> ohne eine innere Ausnahme wird für alle anwendbaren .net Core-Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-662"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="5303b-663"><xref:System.Threading.Tasks.TaskCanceledException> die schachtelt a <xref:System.TimeoutException> wird in .net 5,0 und höheren Versionen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="5303b-663"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5303b-664"><paramref name="request" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-664">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5303b-665">Die Anforderungsnachricht wurde bereits von der <see cref="T:System.Net.Http.HttpClient" />-Instanz gesendet.</span><span class="sxs-lookup"><span data-stu-id="5303b-665">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="5303b-666">Die Anforderung war aufgrund eines Problems (Netzwerkkonnektivität, DNS-Fehler, Überprüfung des Serverzertifikats, Timeout oder Ähnliches) nicht erfolgreich.</span><span class="sxs-lookup"><span data-stu-id="5303b-666">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="5303b-667">Nur .net Core und .net 5,0: die Anforderung konnte aufgrund eines Timeouts nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-667">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.Net.Http.HttpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5303b-668">Ruft die Zeitspanne ab, nach der das Zeitlimit der Anforderung überschritten ist, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="5303b-668">Gets or sets the timespan to wait before the request times out.</span></span></summary>
        <value><span data-ttu-id="5303b-669">Die Zeitspanne, nach der das Zeitlimit der Anforderung überschritten ist.</span><span class="sxs-lookup"><span data-stu-id="5303b-669">The timespan to wait before the request times out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5303b-670">Der Standardwert ist 100.000 Millisekunden (100 Sekunden).</span><span class="sxs-lookup"><span data-stu-id="5303b-670">The default value is 100,000 milliseconds (100 seconds).</span></span>  
  
 <span data-ttu-id="5303b-671">Legen Sie den-Eigenschafts Wert auf fest, um ein unendliches Timeout festzulegen <xref:System.Threading.Timeout.InfiniteTimeSpan> .</span><span class="sxs-lookup"><span data-stu-id="5303b-671">To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span></span>  
  
 <span data-ttu-id="5303b-672">Eine Domain Name System (DNS)-Abfrage kann bis zu 15 Sekunden dauern, bis eine Rückgabe oder ein Timeout auftritt. Wenn Ihre Anforderung einen Hostnamen enthält, der aufgelöst werden muss, und Sie <xref:System.Net.Http.HttpClient.Timeout%2A> auf einen Wert weniger als 15 Sekunden festlegen, kann es 15 Sekunden oder länger dauern, bis eine ausgelöst <xref:System.Net.WebException> wird, um ein Timeout für Ihre Anforderung anzugeben.</span><span class="sxs-lookup"><span data-stu-id="5303b-672">A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.</span></span>  
  
 <span data-ttu-id="5303b-673">Das gleiche Timeout gilt für alle Anforderungen, die diese <xref:System.Net.Http.HttpClient> Instanz verwenden.</span><span class="sxs-lookup"><span data-stu-id="5303b-673">The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.</span></span>  <span data-ttu-id="5303b-674">Sie können auch unterschiedliche Timeouts für einzelne Anforderungen mit einem für <xref:System.Threading.CancellationTokenSource> eine Aufgabe festlegen.</span><span class="sxs-lookup"><span data-stu-id="5303b-674">You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task.</span></span> <span data-ttu-id="5303b-675">Beachten Sie, dass nur die kürzere der beiden Timeouts angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="5303b-675">Note that only the shorter of the two timeouts will apply.</span></span>  
  
 ## Examples
 
 <span data-ttu-id="5303b-676">Im folgenden Beispiel wird die-Eigenschaft festgelegt `Timeout` .</span><span class="sxs-lookup"><span data-stu-id="5303b-676">The following example sets the `Timeout` property.</span></span>
  
```csharp
HttpClient httpClient = new HttpClient();
httpClient.Timeout = TimeSpan.FromMinutes(10);
```

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5303b-677">Der angegebene Timeoutwert ist kleiner oder gleich 0 (null) und nicht <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span><span class="sxs-lookup"><span data-stu-id="5303b-677">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5303b-678">Es wurde bereits ein Vorgang für die aktuelle Instanz gestartet.</span><span class="sxs-lookup"><span data-stu-id="5303b-678">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5303b-679">Die aktuelle Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="5303b-679">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

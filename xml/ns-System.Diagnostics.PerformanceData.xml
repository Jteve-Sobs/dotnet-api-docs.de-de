<Namespace Name="System.Diagnostics.PerformanceData">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8813c8ce03149b4c97305ad0ee10d1cdd88ce604" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="34173736" />
  </Metadata>
  <Docs>
    <summary>Verwenden Sie die Klassen in diesem Namespace, um Zählerdaten bereitzustellen. Die Zähler werden verwendet, um Leistungsmetriken wie den Systemmonitor für Consumer verfügbar zu machen. Der Namespace enthält keine Klassen zum Verarbeiten der Zählerdaten. Eine vollständige Beschreibung der Leistungsindikatorenarchitektur finden Sie unter <see href="https://msdn.microsoft.com/library/windows/desktop/aa373083\(v=vs.85\">Performance Counters</see>.aspx) (Leistungsindikatoren).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Klassen in diesem Namespace unterstützen die neue Architektur (Version 2.0) für die Leistungsindikatoren, die in Windows Vista eingeführt wurde. In der neuen Architektur und der Anbieter nicht mehr direkt auf Consumeranforderungen antwortet, jedoch stattdessen einfach die Indikatordaten verwaltet. Das System Fügt einen Thread in den Prozess des Anbieters, wenn der Anbieter eine Instanz des Indikatorensatzes erstellt; der Thread ist verantwortlich für die Verarbeitung von Consumeranforderungen.  
  
 Die folgenden Schritte zeigen den Prozess zum Schreiben eines Anbieters Leistungsindikatoren.  
  
1.  Die Leistungsindikatoren, die vom Anbieter wird in ein XML-basierten Manifest definiert ist. Die Leistungsindikatoren werden in Indikatorensätzen logisch gruppiert. Die Indikatoren in einem Indikatorensatz werden durch einen numerischen Bezeichner identifiziert, die innerhalb der Indikatorensatz eindeutig ist. Ein Anbieter kann eine oder mehrere Indikatorensätze definieren. Ein Indikatorensatz wird durch eine Guid identifiziert, die an einen Anbieter eindeutig ist. Beachten Sie, dass, wenn Sie diese Klassen verwenden, um Ihres Anbieters zu schreiben:  
  
    -   Die Rückrufattribut des Anbieterelements wird ignoriert.  
  
    -   Der Verweiswert für das Namensattribut des CounterAttribute-Elements wird ignoriert.  
  
     Weitere Informationen zum Schreiben des Manifests finden Sie unter [Leistung Leistungsindikatorenschema](https://msdn.microsoft.com/library/windows/desktop/aa373092\(v=vs.85\).aspx).  
  
2.  Verwenden Sie nach dem Schreiben des Manifests die [CTRPP](https://msdn.microsoft.com/library/windows/desktop/aa372128\(v=vs.85\).aspx) Tool, um das Manifest (Ctrpp provider.man) zu kompilieren. Das Tool generiert vier Dateien: h "," c "," RC, und * _r.h. Sie können die h- und c-Dateien ignorieren. Die RC-Datei enthält die lokalisierten Zeichenfolgen, die in Ihrem Manifest definiert. Sie verwenden die RC- und die Datei * _r.h-Dateien, um die kompilierte Ressourcendatei (. res) zu erstellen, die in Ihrem Projekt enthalten. Der folgende Aufruf veranschaulicht, wie die Ressourcendatei zu kompilieren:  
  
    ```console  
    rc /r /i "c:\Program Files\Microsoft SDKs\Windows\v6.0\Include" provider.rc  
    ```  
  
     Wenn Sie eine Fehlermeldung erhalten, die sal.h verweist, kopieren Sie die sal.h-Datei aus Ihrer Microsoft Visual Studio, Visual C# include-Verzeichnis in das Verzeichnis, das Sie für den Schalter/i angeben.  
  
     Fügen Sie einen Pfad zu die kompilierte Ressourcendatei (. res) auf der Seite der Anwendungseigenschaften des Projekts hinzu.  
  
3.  Schreiben Sie den Anbieter. Die folgenden Schritte zeigen die Aufrufe von einem Anbieter:  
  
    1.  Rufen Sie die <xref:System.Diagnostics.PerformanceData.CounterSet.%23ctor%2A?displayProperty=nameWithType> Konstruktor zum Definieren eines Leistungsindikators. Rufen Sie diese Methode für jeden Leistungsindikator im Manifest definierten festgelegt.  
  
    2.  Für jeden Leistungsindikator, rufen Sie eine der der <xref:System.Diagnostics.PerformanceData.CounterSet.AddCounter%2A?displayProperty=nameWithType> Methoden, um die Indikatoren hinzufügen. Rufen Sie diese Methode für jeden Indikator in der Indikatorensatz definiert.  
  
    3.  Rufen Sie die <xref:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance%2A?displayProperty=nameWithType> Methode, um eine Instanz des Indikatorensatzes erstellen (eine Instanz enthält die Indikatordaten). Rufen Sie für einzelne Instanz von Indikatorensätzen diese Methode nur einmal. Rufen Sie diese Methode für jede Instanz, die für die Sie um Zählerdaten bereitzustellen (verwenden einen eindeutigen Namen für jede Instanz) müssen für mehrere Instanz Indikatorensätze.  
  
    4.  Verwenden der <xref:System.Diagnostics.PerformanceData.CounterSetInstance.Counters%2A?displayProperty=nameWithType> Eigenschaft, um Zugriff auf und setzen Sie den Indikator für den Leistungsindikator.  
  
4.  Nachdem Sie Ihren Anbieter haben, verwenden Sie des LodCtr-Tools, um die Leistungsindikatoren auf dem Computer zu registrieren. Ein auf ein Objekt angewendeter  
  
    ```console  
    lodctr /m:provider.man  
    ```  
  
     Im Beispiel wird vorausgesetzt, das Manifest, und ausführbaren Datei befinden sich im aktuellen Verzeichnis. Ausführliche Informationen zur Verwendung der LodCtr finden Sie unter [Microsoft Technet](Http://Go.Microsoft.Com/FWLink/?LinkId=84000).  
  
 Sie können die Klassen in diesem Namespace auf Computern verwenden, die die Windows Vista und späteren Betriebssystemen ausgeführt werden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt ein einfaches Manifest:  
  
```xml  
<!-- <?xml version="1.0" encoding="UTF-16"?> -->  
<instrumentationManifest xsi:schemaLocation="http://schemas.microsoft.com/win/2004/08/events eventman.xsd"   
     xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events"   
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
     xmlns:xs="http://www.w3.org/2001/XMLSchema"   
     xmlns:trace=http://schemas.microsoft.com/win/2004/08/events/trace>  
  
    <instrumentation>  
  
        <counters xmlns=http://schemas.microsoft.com/win/2005/12/counters>  
  
            <provider  
              applicationIdentity = "provider1.exe"  
              providerType = "userMode"  
              providerGuid = "{51D1685C-35ED-45be-99FE-17261A4F27F3}">  
  
               <counterSet guid = "{582803C9-AACD-45e5-8C30-571141A22092}"  
                  uri = "Microsoft.Windows.System.PerfCounters.Typing"  
                  name = "$(string.CounterSet1.Name)"   
                  description = "$(string.CounterSet1.Description)"   
                  instances = "single">  
  
                    <counter id = "1"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.TotalWords"  
                      name = "$(string.CS1.Counter1.Name)"  
                      description = "$(string.CS1.Counter1.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "2"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsInInterval"  
                      name = "$(string.CS1.Counter2.Name)"  
                      description = "$(string.CS1.Counter2.Description)"  
                      type = "perf_counter_delta"  
                      detailLevel = "standard"/>  
  
                    <counter id = "3"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.LetterAPressed"  
                      name = "$(string.CS1.Counter3.Name)"  
                      description = "$(string.CS1.Counter3.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "4"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsContainingLetterA"  
                      name = "$(string.CS1.Counter4.Name)"   
                      description = "$(string.CS1.Counter4.Description)"   
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "5"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentOfWordsContainingLetterA"  
                      name = "$(string.CS1.Counter5.Name)"   
                      description = "$(string.CS1.Counter5.Description)"   
                      type = "perf_sample_fraction"  
                      baseID = "6"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "displayAsReal" />  
                      </counterAttributes>  
                    </counter>  
  
                    <counter id = "6"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentBase"  
                      type = "perf_sample_base"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "noDisplay" />  
                      </counterAttributes>  
                    </counter>  
  
                </counterSet>  
            </provider>  
        </counters>  
    </instrumentation>  
  
    <localization>  
        <resources culture="en-US">  
            <stringTable>  
  
                <string id="CounterSet1.Name" value="Typing"/>  
                <string id="CounterSet1.Description" value="Captures simple typing metrics."/>  
                <string id="CS1.Counter1.Name" value="Total Words Typed"/>   
                <string id="CS1.Counter1.Description" value="The total number of words typed."/>  
                <string id="CS1.Counter2.Name" value="Words Typed In Interval"/>   
                <string id="CS1.Counter2.Description" value="The total number of words typed in the interval."/>  
                <string id="CS1.Counter3.Name" value="Letter A Pressed"/>   
                <string id="CS1.Counter3.Description" value="The number of times that the letter A is pressed."/>  
                <string id="CS1.Counter4.Name" value="Words Containing A"/>   
                <string id="CS1.Counter4.Description" value="The number of words that contain the letter A."/>  
                <string id="CS1.Counter5.Name" value="Percent of Words Containing A"/>   
                <string id="CS1.Counter5.Description" value="The percent of words that contain the letter A in the last interval."/>  
  
            </stringTable>  
        </resources>  
    </localization>  
</instrumentationManifest>  
```  
  
 Das folgende Beispiel zeigt einen einfachen anbieterimplementierung für das Manifest:  
  
```cs  
using System.Diagnostics.PerformanceData;  
  
        private static Guid providerId = new Guid("{51D1685C-35ED-45be-99FE-17261A4F27F3}");  
        private static Guid typingCounterSetId = new Guid("{582803C9-AACD-45e5-8C30-571141A22092}");  
  
        private static CounterSet typingCounterSet;         // Defines the counter set  
        private static CounterSetInstance typingCsInstance; // Instance of the counter set  
  
        private static int numberOfLetterAInWord = 0;  
  
        . . .  
  
            // Create the 'Typing' counter set.  
            typingCounterSet = new CounterSet(providerId, typingCounterSetId, CounterSetInstanceType.Single);  
  
            // Add the counters to the counter set definition.  
            typingCounterSet.AddCounter(1, CounterType.RawData32, "Total Word Count");  
            typingCounterSet.AddCounter(2, CounterType.Delta32, "Words Typed In Interval");  
            typingCounterSet.AddCounter(3, CounterType.RawData32, "A Key Pressed");  
            typingCounterSet.AddCounter(4, CounterType.RawData32, "Words Containing A");  
            typingCounterSet.AddCounter(5, CounterType.SampleFraction, "Percent of Words Containg A");  
            typingCounterSet.AddCounter(6, CounterType.SampleBase, "Percent Base");  
  
            // Create an instance of the counter set (contains the counter data).  
            typingCsInstance = typingCounterSet.CreateCounterSetInstance("Typing Instance");  
            typingCsInstance.Counters[1].Value = 0;  
            typingCsInstance.Counters[2].Value = 0;  
            typingCsInstance.Counters[3].Value = 0;  
            typingCsInstance.Counters[4].Value = 0;  
            typingCsInstance.Counters[5].Value = 0;  
            typingCsInstance.Counters[6].Value = 0;  
  
        . . .  
  
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)  
        {  
            typingCounterSet.Dispose();  
        }  
  
        // Simple effort to capture letter A key press and words typed.  
        private void textInput_KeyDown(object sender, KeyEventArgs e)  
        {  
            Keys keyData = e.KeyData;  
  
            switch (e.KeyData)  
            {  
                case Keys.A :  
                    // In the .NET 3.5 Framework, you had to use the  
                    // Value property to set and increment the counter   
                    // value. Beginning with the .NET 4.0 Framework,   
                    // the Value property is safe to use in a multi-  
                    // threaded application.  
                    typingCsInstance.Counters["A Key Pressed"].Value++;  
                    numberOfLetterAInWord++;  
  
                    break;  
  
                case Keys.Enter:  
                case Keys.Space:  
                case Keys.Tab:  
  
                    if (numberOfLetterAInWord > 0)  
                    {  
                        // Beginning with the .NET 4.0 Framework, you   
                        // can use the Increment method to increment   
                        // the counter value by 1. The Increment method   
                        // is safe to use in a multi-threaded   
                        // application.  
                        typingCsInstance.Counters["Words Containing A"].Increment();  
                        typingCsInstance.Counters["Percent of Words Containg A"].Increment();  
                        numberOfLetterAInWord = 0;  
                    }  
  
                    typingCsInstance.Counters["Percent Base"].Increment();  
                    typingCsInstance.Counters["Total Word Count"].Increment();  
                    typingCsInstance.Counters["Words Typed In Interval"].Increment();  
  
                    break;  
            }  
        }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>
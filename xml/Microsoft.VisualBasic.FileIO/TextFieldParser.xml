<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="26e2c-101">Stellt Methoden und Eigenschaften zur Analyse strukturierter Textdateien bereit.</span><span class="sxs-lookup"><span data-stu-id="26e2c-101">Provides methods and properties for parsing structured text files.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-102">Die `TextFieldParser` -Objekt stellt Methoden und Eigenschaften zur Analyse strukturierter Textdateien.</span><span class="sxs-lookup"><span data-stu-id="26e2c-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="26e2c-103">Analysieren eine Textdatei mit der `TextFieldParser` ähnelt der Iteration über eine Textdatei, während die `ReadFields` Methode zum Extrahieren von Textfeldern ist vergleichbar mit Teilen der Zeichenfolgen.</span><span class="sxs-lookup"><span data-stu-id="26e2c-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="26e2c-104">Die `TextFieldParser` können zwei Arten von Dateien analysieren: mit Trennzeichen oder feste Breite.</span><span class="sxs-lookup"><span data-stu-id="26e2c-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="26e2c-105">Einige Eigenschaften, z. B. `Delimiters` und `HasFieldsEnclosedInQuotes` sind nur sinnvoll bei der Arbeit mit durch Trennzeichen getrennte Dateien dagegen die `FieldWidths` Eigenschaft ist sinnvoll, nur bei der Arbeit mit Dateien mit fester Breite.</span><span class="sxs-lookup"><span data-stu-id="26e2c-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="26e2c-106">Die folgende Tabelle enthält Beispiele für Aufgaben im Zusammenhang mit der `Microsoft.VisualBasic.FileIO.TextFieldParser` Objekt.</span><span class="sxs-lookup"><span data-stu-id="26e2c-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="26e2c-107">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="26e2c-107">To</span></span>|<span data-ttu-id="26e2c-108">Siehe</span><span class="sxs-lookup"><span data-stu-id="26e2c-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="26e2c-109">Lesen Sie aus einer durch Trennzeichen getrennte Textdatei</span><span class="sxs-lookup"><span data-stu-id="26e2c-109">Read from a delimited text file</span></span>|[<span data-ttu-id="26e2c-110">Gewusst wie: Lesen aus Textdateien mit Kommatrennung</span><span class="sxs-lookup"><span data-stu-id="26e2c-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="26e2c-111">Lesen Sie aus einer Textdatei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="26e2c-112">Gewusst wie: Lesen aus einer Textdatei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="26e2c-113">Lesen Sie aus einer Textdatei mit mehreren Formaten</span><span class="sxs-lookup"><span data-stu-id="26e2c-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="26e2c-114">Gewusst wie: Lesen aus Textdateien mit mehreren Formaten</span><span class="sxs-lookup"><span data-stu-id="26e2c-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-115">In diesem Beispiel wird durch eine Tabstopps getrennte Textdatei analysiert `Bigfile`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="26e2c-116">Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="26e2c-116">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="26e2c-117"><see cref="T:System.IO.Stream" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-117"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="26e2c-118">Der zu analysierende Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="26e2c-118">The stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="26e2c-119">Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="26e2c-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-120">Erstellt ein neues `TextFieldParser` dargestellte Objekt, das Analysieren der Datei oder den stream, der die `stream` Parameter.</span><span class="sxs-lookup"><span data-stu-id="26e2c-120">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26e2c-121"><paramref name="stream" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-121"><paramref name="stream" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="26e2c-122"><paramref name="stream" /> kann nicht gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-122"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="26e2c-123"><see cref="T:System.IO.TextReader" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-123"><see cref="T:System.IO.TextReader" />.</span></span> <span data-ttu-id="26e2c-124">Der zu analysierende <see cref="T:System.IO.TextReader" />-Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="26e2c-124">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="26e2c-125">Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="26e2c-125">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-126">Erstellt ein neues `TextFieldParser` dargestellte Objekt, das Analysieren der Datei oder den stream, der die `reader` Parameter.</span><span class="sxs-lookup"><span data-stu-id="26e2c-126">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26e2c-127"><paramref name="reader" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-127"><paramref name="reader" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="26e2c-128"><see langword="String" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-128"><see langword="String" />.</span></span> <span data-ttu-id="26e2c-129">Der vollständige Pfad der zu analysierenden Datei.</span><span class="sxs-lookup"><span data-stu-id="26e2c-129">The complete path of the file to be parsed.</span></span></param>
        <summary><span data-ttu-id="26e2c-130">Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="26e2c-130">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-131">Erstellt ein neues `TextFieldParser` Objekt zum Analysieren der Datei gemäß der `path` Parameter.</span><span class="sxs-lookup"><span data-stu-id="26e2c-131">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26e2c-132"><paramref name="path" /> ist eine leere Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="26e2c-132"><paramref name="path" /> is an empty string.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="26e2c-133"><see cref="T:System.IO.Stream" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-133"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="26e2c-134">Der zu analysierende Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="26e2c-134">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="26e2c-135"><see cref="T:System.Text.Encoding" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-135"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="26e2c-136">Die zu verwendende Zeichencodierung, wenn die Codierung nicht aus der Datei ermittelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="26e2c-136">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="26e2c-137">Der Standardwert ist <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-137">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="26e2c-138">Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="26e2c-138">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-139">Erstellt ein neues `TextFieldParser` dargestellte Objekt, das Analysieren der Datei oder den stream, der die `stream` Parameter.</span><span class="sxs-lookup"><span data-stu-id="26e2c-139">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="26e2c-140">Wenn Sie einen Satz von Zeichen mit einer bestimmten kultureinstellung kompilieren und dieser dieselben Zeichen mit einer anderen kultureinstellung abrufen, werden die Zeichen möglicherweise nicht interpretiert werden und können dazu führen, dass eine Ausnahme ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-140">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26e2c-141"><paramref name="stream" /> oder <paramref name="defaultEncoding" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-141"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="26e2c-142"><paramref name="stream" /> kann nicht gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-142"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="26e2c-143"><see langword="String" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-143"><see langword="String" />.</span></span> <span data-ttu-id="26e2c-144">Der vollständige Pfad der zu analysierenden Datei.</span><span class="sxs-lookup"><span data-stu-id="26e2c-144">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="26e2c-145"><see cref="T:System.Text.Encoding" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-145"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="26e2c-146">Die zu verwendende Zeichencodierung, wenn die Codierung nicht aus der Datei ermittelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="26e2c-146">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="26e2c-147">Der Standardwert ist <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-147">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="26e2c-148">Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="26e2c-148">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-149">Erstellt ein neues `TextFieldParser` Objekt zum Analysieren der Datei gemäß der `path` Parameter.</span><span class="sxs-lookup"><span data-stu-id="26e2c-149">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="26e2c-150">Wenn Sie einen Satz von Zeichen mit einer bestimmten kultureinstellung kompilieren und dieser dieselben Zeichen mit einer anderen kultureinstellung abrufen, werden die Zeichen möglicherweise nicht interpretiert werden und können dazu führen, dass eine Ausnahme ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-150">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26e2c-151"><paramref name="path" /> ist eine leere Zeichenfolge, oder <paramref name="defaultEncoding" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-151"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="26e2c-152"><see cref="T:System.IO.Stream" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-152"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="26e2c-153">Der zu analysierende Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="26e2c-153">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="26e2c-154"><see cref="T:System.Text.Encoding" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-154"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="26e2c-155">Die zu verwendende Zeichencodierung, wenn die Codierung nicht aus der Datei ermittelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="26e2c-155">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="26e2c-156">Der Standardwert ist <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-156">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding">
          <span data-ttu-id="26e2c-157"><see langword="Boolean" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-157"><see langword="Boolean" />.</span></span> <span data-ttu-id="26e2c-158">Gibt an, ob am Anfang der Datei nach Bytereihenfolgemarken gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="26e2c-158">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="26e2c-159">Der Standardwert ist <see langword="True" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-159">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="26e2c-160">Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="26e2c-160">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-161">Erstellt ein neues `TextFieldParser` dargestellte Objekt, das Analysieren der Datei oder den stream, der die `stream` Parameter.</span><span class="sxs-lookup"><span data-stu-id="26e2c-161">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="26e2c-162">Wenn die `detectEncoding` Parameter ist `True`, diesen Konstruktor versucht, die Codierung durch einen Blick auf die ersten drei Bytes der Datei bzw. dem Stream zu erkennen.</span><span class="sxs-lookup"><span data-stu-id="26e2c-162">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="26e2c-163">Er erkennt automatisch UTF-8 "," little-Endian Unicode und big-Endian Unicode-Text, wenn die Datei mit den entsprechenden Bytereihenfolge-Marken beginnt.</span><span class="sxs-lookup"><span data-stu-id="26e2c-163">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="26e2c-164">Sie andernfalls die Codierung von angegebene `defaultEncoding` verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="26e2c-164">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="26e2c-165">Wenn Sie einen Satz von Zeichen mit einer bestimmten kultureinstellung kompilieren und dieser dieselben Zeichen mit einer anderen kultureinstellung abrufen, werden die Zeichen möglicherweise nicht interpretiert werden und können dazu führen, dass eine Ausnahme ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-165">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26e2c-166"><paramref name="stream" /> oder <paramref name="defaultEncoding" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-166"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="26e2c-167"><paramref name="stream" /> kann nicht gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-167"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="26e2c-168"><see langword="String" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-168"><see langword="String" />.</span></span> <span data-ttu-id="26e2c-169">Der vollständige Pfad der zu analysierenden Datei.</span><span class="sxs-lookup"><span data-stu-id="26e2c-169">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="26e2c-170"><see cref="T:System.Text.Encoding" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-170"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="26e2c-171">Die zu verwendende Zeichencodierung, wenn die Codierung nicht aus der Datei ermittelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="26e2c-171">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="26e2c-172">Der Standardwert ist <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-172">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding">
          <span data-ttu-id="26e2c-173"><see langword="Boolean" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-173"><see langword="Boolean" />.</span></span> <span data-ttu-id="26e2c-174">Gibt an, ob am Anfang der Datei nach Bytereihenfolgemarken gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="26e2c-174">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="26e2c-175">Der Standardwert ist <see langword="True" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-175">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="26e2c-176">Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="26e2c-176">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-177">Erstellt ein neues `TextFieldParser` Objekt zum Analysieren der Datei gemäß der `path` Parameter.</span><span class="sxs-lookup"><span data-stu-id="26e2c-177">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="26e2c-178">Wenn die `detectEncoding` Parameter ist `True`, diesen Konstruktor versucht, die Codierung durch einen Blick auf die ersten drei Bytes der Datei bzw. dem Stream zu erkennen.</span><span class="sxs-lookup"><span data-stu-id="26e2c-178">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="26e2c-179">Er erkennt automatisch UTF-8 "," little-Endian Unicode und big-Endian Unicode-Text, wenn die Datei mit den entsprechenden Bytereihenfolge-Marken beginnt.</span><span class="sxs-lookup"><span data-stu-id="26e2c-179">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="26e2c-180">Sie andernfalls die Codierung von angegebene `defaultEncoding` verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="26e2c-180">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="26e2c-181">Wenn Sie einen Satz von Zeichen mit einer bestimmten kultureinstellung kompilieren und dieser dieselben Zeichen mit einer anderen kultureinstellung abrufen, werden die Zeichen möglicherweise nicht interpretiert werden und können dazu führen, dass eine Ausnahme ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-181">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26e2c-182"><paramref name="path" /> ist eine leere Zeichenfolge, oder <paramref name="defaultEncoding" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-182"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="26e2c-183"><see cref="T:System.IO.Stream" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-183"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="26e2c-184">Der zu analysierende Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="26e2c-184">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding">
          <span data-ttu-id="26e2c-185"><see cref="T:System.Text.Encoding" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-185"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="26e2c-186">Die zu verwendende Zeichencodierung, wenn die Codierung nicht aus der Datei ermittelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="26e2c-186">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="26e2c-187">Der Standardwert ist <see cref="P:System.Text.Encoding.UTF8" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-187">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding">
          <span data-ttu-id="26e2c-188"><see langword="Boolean" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-188"><see langword="Boolean" />.</span></span> <span data-ttu-id="26e2c-189">Gibt an, ob am Anfang der Datei nach Bytereihenfolgemarken gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="26e2c-189">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="26e2c-190">Der Standardwert ist <see langword="True" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-190">Default is <see langword="True" />.</span></span></param>
        <param name="leaveOpen">
          <span data-ttu-id="26e2c-191"><see langword="Boolean" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-191"><see langword="Boolean" />.</span></span> <span data-ttu-id="26e2c-192">Gibt an, ob <c>stream</c> geöffnet bleiben soll, wenn das <see langword="TextFieldParser" />-Objekt geschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="26e2c-192">Indicates whether to leave <c>stream</c> open when the <see langword="TextFieldParser" /> object is closed.</span></span> <span data-ttu-id="26e2c-193">Der Standardwert ist <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-193">Default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="26e2c-194">Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="26e2c-194">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-195">Erstellt ein neues `TextFieldParser` dargestellte Objekt, das Analysieren der Datei oder den stream, der die `stream` Parameter.</span><span class="sxs-lookup"><span data-stu-id="26e2c-195">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="26e2c-196">Wenn die `detectEncoding` Parameter ist `True`, diesen Konstruktor versucht, die Codierung durch einen Blick auf die ersten drei Bytes der Datei bzw. dem Stream zu erkennen.</span><span class="sxs-lookup"><span data-stu-id="26e2c-196">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="26e2c-197">Er erkennt automatisch UTF-8 "," little-Endian Unicode und big-Endian Unicode-Text, wenn die Datei mit den entsprechenden Bytereihenfolge-Marken beginnt.</span><span class="sxs-lookup"><span data-stu-id="26e2c-197">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="26e2c-198">Sie andernfalls die Codierung von angegebene `defaultEncoding` verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="26e2c-198">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="26e2c-199">Wenn Sie einen Satz von Zeichen mit einer bestimmten kultureinstellung kompilieren und dieser dieselben Zeichen mit einer anderen kultureinstellung abrufen, werden die Zeichen möglicherweise nicht interpretiert werden und können dazu führen, dass eine Ausnahme ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-199">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26e2c-200"><paramref name="stream" /> oder <paramref name="defaultEncoding" /> ist <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-200"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="26e2c-201"><paramref name="stream" /> kann nicht gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-201"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="26e2c-202">Schließt das aktuelle <see langword="TextFieldParser" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="26e2c-202">Closes the current <see langword="TextFieldParser" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="26e2c-203">Dieses Beispiel schließt den `TextFieldParser.FileReader`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-203">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="26e2c-204">Definiert Kommentartoken.</span><span class="sxs-lookup"><span data-stu-id="26e2c-204">Defines comment tokens.</span></span> <span data-ttu-id="26e2c-205">Ein Kommentartoken ist eine Zeichenfolge am Anfang einer Zeile, die angibt, dass die Zeile ein Kommentar ist und vom Parser ignoriert werden soll.</span><span class="sxs-lookup"><span data-stu-id="26e2c-205">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span></span></summary>
        <value><span data-ttu-id="26e2c-206">Ein Zeichenfolgenarray, das alle Kommentartoken für das <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="26e2c-206">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-207">Dies ist ein erweiterter Member. Es werden keine in IntelliSense angezeigt, es sei denn, Sie klicken Sie auf die **alle** Registerkarte.</span><span class="sxs-lookup"><span data-stu-id="26e2c-207">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="26e2c-208">Mit der Länge Null Kommentartoken werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="26e2c-208">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-209">In diesem Beispiel gibt an, dass für die `TextFieldParser`, `FileReader` Zeilen ab der ein einfaches Anführungszeichen (') ignoriert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="26e2c-209">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="26e2c-210">Ein Kommentartoken enthält Leerzeichen.</span><span class="sxs-lookup"><span data-stu-id="26e2c-210">A comment token includes white space.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="26e2c-211">Definiert die Trennzeichen für eine Textdatei.</span><span class="sxs-lookup"><span data-stu-id="26e2c-211">Defines the delimiters for a text file.</span></span></summary>
        <value><span data-ttu-id="26e2c-212">Ein Zeichenfolgenarray, das alle Feldtrennzeichen für das <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="26e2c-212">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-213">Diese Eigenschaft ist genannte nur, wenn die <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> -Eigenschaftensatz auf `FieldType.Delimited`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-213">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="26e2c-214">Definieren die Trennzeichen für eine Textdatei ebenfalls mit erreicht werden kann die <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="26e2c-214">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="26e2c-215">Die folgende Tabelle enthält ein Beispiel für eine Aufgabe mit der `Delimiters` Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="26e2c-215">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="26e2c-216">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="26e2c-216">To</span></span>|<span data-ttu-id="26e2c-217">Siehe</span><span class="sxs-lookup"><span data-stu-id="26e2c-217">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="26e2c-218">Lesen Sie aus einer durch Trennzeichen getrennte Textdatei</span><span class="sxs-lookup"><span data-stu-id="26e2c-218">Read from a delimited text file</span></span>|[<span data-ttu-id="26e2c-219">Gewusst wie: Lesen aus Textdateien mit Kommatrennung</span><span class="sxs-lookup"><span data-stu-id="26e2c-219">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-220">In diesem Beispiel gibt an, dass das Trennzeichen für die `TextFieldParser` Objekt `FileReader`, ist ein Komma (,).</span><span class="sxs-lookup"><span data-stu-id="26e2c-220">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="26e2c-221">Ein Trennzeichenwert wird auf ein Neue-Zeile-Zeichen, eine leere Zeichenfolge oder <see langword="Nothing" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="26e2c-221">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="26e2c-222">Gibt vom <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt verwendete Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="26e2c-222">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="26e2c-223">Gibt vom <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt verwendete Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="26e2c-223">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="26e2c-224">Boolesch.</span><span class="sxs-lookup"><span data-stu-id="26e2c-224">Boolean.</span></span> <span data-ttu-id="26e2c-225">Bei <see langword="True" /> werden sowohl verwaltete als auch nicht verwaltete Ressourcen, bei <see langword="False" /> nur nicht verwaltete Ressourcen freigegeben.</span><span class="sxs-lookup"><span data-stu-id="26e2c-225"><see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="26e2c-226">Gibt vom <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt verwendete Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="26e2c-226">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="26e2c-227">Gibt <see langword="True" /> zurück, wenn sich zwischen der aktuellen Cursorposition und dem Dateiende keine Zeilen befinden, die nicht leer bzw. keine Kommentare sind.</span><span class="sxs-lookup"><span data-stu-id="26e2c-227">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span></span></summary>
        <value>
          <span data-ttu-id="26e2c-228"><see langword="True" />, wenn keine weiteren Daten gelesen werden, andernfalls <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-228"><see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-229">Diese Eigenschaft kann beim Lesen aus Dateien verwendet werden, um zu bestimmen, das Ende der Daten gelesen werden können.</span><span class="sxs-lookup"><span data-stu-id="26e2c-229">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="26e2c-230">Die folgende Tabelle enthält Beispiele für Aufgaben im Zusammenhang mit der `EndOfData` Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="26e2c-230">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="26e2c-231">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="26e2c-231">To</span></span>|<span data-ttu-id="26e2c-232">Siehe</span><span class="sxs-lookup"><span data-stu-id="26e2c-232">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="26e2c-233">Lesen Sie aus einer durch Trennzeichen getrennten Datei</span><span class="sxs-lookup"><span data-stu-id="26e2c-233">Read from a delimited file</span></span>|[<span data-ttu-id="26e2c-234">Gewusst wie: Lesen aus Textdateien mit Kommatrennung</span><span class="sxs-lookup"><span data-stu-id="26e2c-234">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="26e2c-235">Lesen Sie aus einer Datei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-235">Read from a fixed-width file</span></span>|[<span data-ttu-id="26e2c-236">Gewusst wie: Lesen aus einer Textdatei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-236">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-237">Dieses Beispiel verwendet die `EndofData` Eigenschaft so durchlaufen Sie alle Felder in der Datei mit den `TextFieldReader`, `FileReader`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-237">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="26e2c-238">Gibt die Zeile zurück, die die letzte <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Ausnahme verursacht hat.</span><span class="sxs-lookup"><span data-stu-id="26e2c-238">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="26e2c-239">Die Zeile, die die letzte <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Ausnahme verursacht hat.</span><span class="sxs-lookup"><span data-stu-id="26e2c-239">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-240">Wenn kein <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> Ausnahmen ausgelöst wurden, wird eine leere Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="26e2c-240">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="26e2c-241">Die <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> Eigenschaft kann verwendet werden, um die Nummer der Zeile angezeigt, die die Ausnahme verursacht hat.</span><span class="sxs-lookup"><span data-stu-id="26e2c-241">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="26e2c-242">Die folgende Tabelle enthält Beispiele für Aufgaben im Zusammenhang mit der `ErrorLine` Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="26e2c-242">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="26e2c-243">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="26e2c-243">To</span></span>|<span data-ttu-id="26e2c-244">Siehe</span><span class="sxs-lookup"><span data-stu-id="26e2c-244">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="26e2c-245">Lesen Sie aus einer durch Trennzeichen getrennten Datei</span><span class="sxs-lookup"><span data-stu-id="26e2c-245">Read from a delimited file</span></span>|[<span data-ttu-id="26e2c-246">Gewusst wie: Lesen aus Textdateien mit Kommatrennung</span><span class="sxs-lookup"><span data-stu-id="26e2c-246">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="26e2c-247">Lesen Sie aus einer Datei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-247">Read from a fixed-width file</span></span>|[<span data-ttu-id="26e2c-248">Gewusst wie: Lesen aus einer Textdatei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-248">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-249">Dieses Beispiel verwendet die `ErrorLine` die Zeile, die das aktuelle verursacht anzuzeigende Eigenschaft <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="26e2c-249">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="26e2c-250">Gibt die Nummer der Zeile zurück, die die letzte <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Ausnahme verursacht hat.</span><span class="sxs-lookup"><span data-stu-id="26e2c-250">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="26e2c-251">Die Nummer der Zeile, die die letzte <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Ausnahme verursacht hat.</span><span class="sxs-lookup"><span data-stu-id="26e2c-251">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-252">Wenn kein <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> Ausnahmen ausgelöst wurden, wird-1 zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="26e2c-252">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="26e2c-253">Die <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> Eigenschaft kann verwendet werden, um die Nummer der Zeile angezeigt, die die Ausnahme verursacht hat.</span><span class="sxs-lookup"><span data-stu-id="26e2c-253">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="26e2c-254">Leerzeilen und Kommentare werden nicht ignoriert, wenn die Nummer der Zeile bestimmt.</span><span class="sxs-lookup"><span data-stu-id="26e2c-254">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="26e2c-255">Die folgende Tabelle enthält Beispiele für Aufgaben im Zusammenhang mit der `ErrorLineNumber` Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="26e2c-255">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="26e2c-256">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="26e2c-256">To</span></span>|<span data-ttu-id="26e2c-257">Siehe</span><span class="sxs-lookup"><span data-stu-id="26e2c-257">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="26e2c-258">Lesen Sie aus einer durch Trennzeichen getrennten Datei</span><span class="sxs-lookup"><span data-stu-id="26e2c-258">Read from a delimited file</span></span>|[<span data-ttu-id="26e2c-259">Gewusst wie: Lesen aus Textdateien mit Kommatrennung</span><span class="sxs-lookup"><span data-stu-id="26e2c-259">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="26e2c-260">Lesen Sie aus einer Datei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-260">Read from a fixed-width file</span></span>|[<span data-ttu-id="26e2c-261">Gewusst wie: Lesen aus einer Textdatei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-261">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-262">Dieses Beispiel verwendet die `ErrorLineNumber` Eigenschaft, um die Position der Zeile, die das aktuelle verursacht anzuzeigen <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="26e2c-262">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="26e2c-263">Kennzeichnet die Breite der einzelnen Spalten in der Textdatei, die analysiert wird.</span><span class="sxs-lookup"><span data-stu-id="26e2c-263">Denotes the width of each column in the text file being parsed.</span></span></summary>
        <value><span data-ttu-id="26e2c-264">Ein Array mit ganzen Zahlen, das die Breite jeder Spalte in der Textdatei enthält, die analysiert wird.</span><span class="sxs-lookup"><span data-stu-id="26e2c-264">An integer array that contains the width of each column in the text file that is being parsed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-265">Diese Eigenschaft ist genannte nur, wenn die <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> -Eigenschaftensatz auf `FieldType.FixedWidth`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-265">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="26e2c-266">Wenn der letzte Eintrag im Array kleiner als oder gleich 0 (null) ist, wird davon ausgegangen, dass das Feld variabler Breite aufweisen.</span><span class="sxs-lookup"><span data-stu-id="26e2c-266">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="26e2c-267">Die <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> Methode kann auch verwendet werden, um Feldbreiten festzulegen.</span><span class="sxs-lookup"><span data-stu-id="26e2c-267">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="26e2c-268">Die folgende Tabelle enthält Beispiele für Aufgaben im Zusammenhang mit der `FieldWidths` Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="26e2c-268">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="26e2c-269">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="26e2c-269">To</span></span>|<span data-ttu-id="26e2c-270">Siehe</span><span class="sxs-lookup"><span data-stu-id="26e2c-270">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="26e2c-271">Lesen Sie aus einer Textdatei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-271">Read from a fixed-width text file</span></span>|[<span data-ttu-id="26e2c-272">Gewusst wie: Lesen aus einer Textdatei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-272">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-273">In diesem Beispiel liest die Datei `ParserText.txt`, die erste Spalte ist 5 Zeichen breit, die zweite ist 10, der dritte ist 11 und der vierte ist variabler Breite angeben der breiten;</span><span class="sxs-lookup"><span data-stu-id="26e2c-273">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="26e2c-274">Ein Wert für die Breite eines beliebigen Eintrags außer dem letzten Eintrag des Arrays ist kleiner oder gleich 0 (null).</span><span class="sxs-lookup"><span data-stu-id="26e2c-274">A width value in any location other than the last entry of the array is less than or equal to zero.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="26e2c-275">Ermöglicht es dem <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor dieser vom Garbage Collector wieder zugänglich gemacht wird.</span><span class="sxs-lookup"><span data-stu-id="26e2c-275">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="26e2c-276">Gibt beim Analysieren einer Datei mit Trennzeichen an, ob die Felder in Anführungszeichen eingeschlossen sind.</span><span class="sxs-lookup"><span data-stu-id="26e2c-276">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span></span></summary>
        <value>
          <span data-ttu-id="26e2c-277"><see langword="True" />, wenn Felder in Anführungszeichen eingeschlossen sind, andernfalls <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-277"><see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-278">Dies ist ein erweiterter Member. Es werden keine in IntelliSense angezeigt, es sei denn, Sie klicken Sie auf die **alle** Registerkarte.</span><span class="sxs-lookup"><span data-stu-id="26e2c-278">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="26e2c-279">Wenn die Eigenschaft `True`, der Parser wird davon ausgegangen, dass Felder in Anführungszeichen eingeschlossen sind ("") und Zeilenenden enthalten kann.</span><span class="sxs-lookup"><span data-stu-id="26e2c-279">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="26e2c-280">Wenn ein Feld in Anführungszeichen, z. B. eingeschlossen ist `abc, "field2a,field2b", field3` und diese Eigenschaft ist `True`, klicken Sie dann alle Text in Anführungszeichen eingeschlossen wird unverändert zurückgegeben werden, da in diesem Beispiel würden `abc|field2a,field2b|field3`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-280">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="26e2c-281">Wenn diese Eigenschaft auf `False` würde in diesem Beispiel machen return `abc|"field2a|field2b"|field3`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-281">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-282">In diesem Beispiel wird die `HasFieldsEnclosedInQuotes` Eigenschaft `True` für `myReader`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-282">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="26e2c-283">Gibt die aktuelle Zeilennummer oder -1 zurück, wenn im Stream keine weiteren Zeichen verfügbar sind.</span><span class="sxs-lookup"><span data-stu-id="26e2c-283">Returns the current line number, or returns -1 if no more characters are available in the stream.</span></span></summary>
        <value><span data-ttu-id="26e2c-284">Die aktuelle Zeilennummer.</span><span class="sxs-lookup"><span data-stu-id="26e2c-284">The current line number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-285">Dies ist ein erweiterter Member. Es werden keine in IntelliSense angezeigt, es sei denn, Sie klicken Sie auf die **alle** Registerkarte.</span><span class="sxs-lookup"><span data-stu-id="26e2c-285">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="26e2c-286">Leerzeilen und Kommentare werden nicht ignoriert, wenn die Nummer der Zeile bestimmt.</span><span class="sxs-lookup"><span data-stu-id="26e2c-286">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-287">In diesem Beispiel sucht nach dem Namen "Jones" in der Textdatei und meldet welche Zeile(n) es auftritt.</span><span class="sxs-lookup"><span data-stu-id="26e2c-287">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <span data-ttu-id="26e2c-288"><see langword="Int32" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-288"><see langword="Int32" />.</span></span> <span data-ttu-id="26e2c-289">Anzahl der zu lesenden Zeichen.</span><span class="sxs-lookup"><span data-stu-id="26e2c-289">Number of characters to read.</span></span> <span data-ttu-id="26e2c-290">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="26e2c-290">Required.</span></span></param>
        <summary><span data-ttu-id="26e2c-291">Liest die angegebene Anzahl von Zeichen, ohne die Cursorposition zu ändern.</span><span class="sxs-lookup"><span data-stu-id="26e2c-291">Reads the specified number of characters without advancing the cursor.</span></span></summary>
        <returns><span data-ttu-id="26e2c-292">Eine Zeichenfolge, die die angegebene Anzahl gelesener Zeichen enthält.</span><span class="sxs-lookup"><span data-stu-id="26e2c-292">A string that contains the specified number of characters read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-293">Die `numberOfChars` Wert muss kleiner als die Gesamtzahl der Zeichen in der Zeile sein.</span><span class="sxs-lookup"><span data-stu-id="26e2c-293">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="26e2c-294">Ist dies nicht der Fall, die zurückgegebene Zeichenfolge `PeekChars` wird auf die Länge der Zeile abgeschnitten werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-294">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="26e2c-295">Leere Zeilen werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="26e2c-295">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="26e2c-296">End-of-Line-Zeichen werden nicht zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="26e2c-296">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="26e2c-297">Die `PeekChars` Methode führt keine Analyse; ein End-of-Line-Zeichen in einem Feld mit Trennzeichen als tatsächliches Ende der Zeile interpretiert wird.</span><span class="sxs-lookup"><span data-stu-id="26e2c-297">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="26e2c-298">Die folgende Tabelle enthält Beispiele für Aufgaben im Zusammenhang mit der `PeekChars` Methode.</span><span class="sxs-lookup"><span data-stu-id="26e2c-298">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="26e2c-299">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="26e2c-299">To</span></span>|<span data-ttu-id="26e2c-300">Siehe</span><span class="sxs-lookup"><span data-stu-id="26e2c-300">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="26e2c-301">Bestimmen Sie das Format eines Felds vor dem Analysieren ihn</span><span class="sxs-lookup"><span data-stu-id="26e2c-301">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="26e2c-302">Gewusst wie: Lesen aus Textdateien mit mehreren Formaten</span><span class="sxs-lookup"><span data-stu-id="26e2c-302">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-303">Dieses Beispiel verwendet `PeekChars` ermittelt das Ende der Daten und Analyse der Datei an diesem Punkt beendet.</span><span class="sxs-lookup"><span data-stu-id="26e2c-303">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="26e2c-304"><paramref name="numberOfChars" /> ist kleiner als 0.</span><span class="sxs-lookup"><span data-stu-id="26e2c-304"><paramref name="numberOfChars" /> is less than 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="26e2c-305">Liest alle Felder in der aktuellen Zeile, gibt sie als Zeichenfolgenarray zurück und setzt den Cursor in die nächste Zeile mit Daten.</span><span class="sxs-lookup"><span data-stu-id="26e2c-305">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span></span></summary>
        <returns><span data-ttu-id="26e2c-306">Ein Array von Zeichenfolgen, das Feldwerte für die aktuelle Zeile enthält.</span><span class="sxs-lookup"><span data-stu-id="26e2c-306">An array of strings that contains field values for the current line.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-307">Damit Benutzer beim Analysieren von Textdateien in verschiedenen Formaten können die `ReadFields` -Methode untersucht dann die Werte der `TextFieldType`, `Delimiters`, und `FieldWidths`, wenn sie festgelegt sind, jedes Mal aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="26e2c-307">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="26e2c-308">Benutzer müssen nicht ordnungsgemäß konfiguriert die `TextFieldType` und `FieldWidths` oder `Delimiters` Eigenschaften nach Bedarf.</span><span class="sxs-lookup"><span data-stu-id="26e2c-308">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="26e2c-309">Wenn `TextFieldType` festgelegt ist, um `Delimited`, und `Delimiters` nicht festgelegt ist, oder wenn `TextFieldType` auf festgelegt ist `FixedWidth` und `FieldWidths`, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="26e2c-309">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="26e2c-310">Wenn `ReadFields` erkennt leere Zeilen werden sie übersprungen und die nächste nicht leere Zeile zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="26e2c-310">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="26e2c-311">Wenn die `ReadFields` Methode die aktuelle Zeile kann nicht analysiert werden, es wird eine Ausnahme ausgelöst und nicht zur nächsten Zeile verschoben.</span><span class="sxs-lookup"><span data-stu-id="26e2c-311">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="26e2c-312">Dadurch kann es sich um die Anwendung versucht, die Zeile erneut analysiert.</span><span class="sxs-lookup"><span data-stu-id="26e2c-312">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="26e2c-313">Die folgende Tabelle enthält Beispiele für Aufgaben im Zusammenhang mit der `ReadFields` Methode.</span><span class="sxs-lookup"><span data-stu-id="26e2c-313">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="26e2c-314">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="26e2c-314">To</span></span>|<span data-ttu-id="26e2c-315">Siehe</span><span class="sxs-lookup"><span data-stu-id="26e2c-315">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="26e2c-316">Lesen Sie aus einer durch Trennzeichen getrennten Datei</span><span class="sxs-lookup"><span data-stu-id="26e2c-316">Read from a delimited file</span></span>|[<span data-ttu-id="26e2c-317">Gewusst wie: Lesen aus Textdateien mit Kommatrennung</span><span class="sxs-lookup"><span data-stu-id="26e2c-317">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="26e2c-318">Lesen Sie aus einer Datei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-318">Read from a fixed-width file</span></span>|[<span data-ttu-id="26e2c-319">Gewusst wie: Lesen aus einer Textdatei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-319">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-320">Dieses Beispiel verwendet die `ReadFields` Methode zum Lesen aus der durch Trennzeichen getrennte Datei `ParserText.txt`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-320">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="26e2c-321">Das Beispiel schreibt die Felder `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-321">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException"><span data-ttu-id="26e2c-322">Ein Feld kann mit dem angegebenen Format nicht analysiert werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-322">A field cannot be parsed by using the specified format.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="26e2c-323">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-323">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="26e2c-324">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="26e2c-324">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="26e2c-325">Gibt die aktuelle Zeile als Zeichenfolge zurück und setzt den Cursor in die nächste Zeile.</span><span class="sxs-lookup"><span data-stu-id="26e2c-325">Returns the current line as a string and advances the cursor to the next line.</span></span></summary>
        <returns><span data-ttu-id="26e2c-326">Die aktuelle Zeile aus der Datei oder dem Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="26e2c-326">The current line from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-327">Die `ReadLine` Methode führt keine Analyse; ein End-of-Line-Zeichen in einem Feld mit Trennzeichen als tatsächliches Ende der Zeile interpretiert wird.</span><span class="sxs-lookup"><span data-stu-id="26e2c-327">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="26e2c-328">`Nothing` wird zurückgegeben, wenn das Ende der Datei erreicht ist.</span><span class="sxs-lookup"><span data-stu-id="26e2c-328">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-329">In diesem Beispiel liest mithilfe der Datei `ParserText.txt` und schreibt ihn auf `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-329">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="26e2c-330">Wenn `Testfile.txt` nicht vorhanden ist, wird erstellt, indem die `WriteAllText` Methode.</span><span class="sxs-lookup"><span data-stu-id="26e2c-330">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="26e2c-331">In diesem Beispiel schreibt die Felder als eine einzelne Zeichenfolge; Jede Zeile in einer eigenen Zeile in der Zieldatei angezeigt haben eine `VbCrLf` Zeichen am Ende jeder Zeile angefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="26e2c-331">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="26e2c-332">Liest die verbleibende Textdatei und gibt sie als Zeichenfolge zurück.</span><span class="sxs-lookup"><span data-stu-id="26e2c-332">Reads the remainder of the text file and returns it as a string.</span></span></summary>
        <returns><span data-ttu-id="26e2c-333">Der verbleibende Text aus der Datei oder dem Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="26e2c-333">The remaining text from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-334">Dies ist ein erweiterter Member. Es werden keine in IntelliSense angezeigt, es sei denn, Sie klicken Sie auf die **alle** Registerkarte.</span><span class="sxs-lookup"><span data-stu-id="26e2c-334">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="26e2c-335">Wenn keine weiteren zu lesen, da das Ende der Datei erreicht wurde, `Nothing` wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="26e2c-335">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="26e2c-336">Die `ReadToEnd` Methode nicht leere Zeilen und Kommentare ignoriert.</span><span class="sxs-lookup"><span data-stu-id="26e2c-336">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-337">Dieses Beispiel verwendet die `ReadToEnd` Methode zum Lesen der vollständigen Datei `ParserText.txt` und schreibt es in die Datei `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-337">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="26e2c-338">Wenn `Testfile.txt` nicht vorhanden ist, wird erstellt, indem die `WriteAllText` Methode.</span><span class="sxs-lookup"><span data-stu-id="26e2c-338">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters"><span data-ttu-id="26e2c-339">Array vom Typ <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-339">Array of type <see langword="String" />.</span></span></param>
        <summary><span data-ttu-id="26e2c-340">Legt die Trennzeichen für den Reader auf die angegebenen Werte und den Feldtyp auf <see langword="Delimited" /> fest.</span><span class="sxs-lookup"><span data-stu-id="26e2c-340">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-341">Den vorhandenen Inhalt der `Delimiters` Eigenschaft sind deaktiviert, wenn diese Methode festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="26e2c-341">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="26e2c-342">Diese Methode bietet eine Möglichkeit, die Trennzeichen festlegen, ohne das Erstellen eines Arrays.</span><span class="sxs-lookup"><span data-stu-id="26e2c-342">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="26e2c-343">Die folgende Tabelle enthält ein Beispiel für eine Aufgabe mit der `SetDelimiters` Methode.</span><span class="sxs-lookup"><span data-stu-id="26e2c-343">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="26e2c-344">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="26e2c-344">To</span></span>|<span data-ttu-id="26e2c-345">Siehe</span><span class="sxs-lookup"><span data-stu-id="26e2c-345">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="26e2c-346">Analysieren einer Textdatei</span><span class="sxs-lookup"><span data-stu-id="26e2c-346">Parse a text file</span></span>|[<span data-ttu-id="26e2c-347">Analysieren von Textdateien mit dem TextFieldParser-Objekt</span><span class="sxs-lookup"><span data-stu-id="26e2c-347">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-348">In diesem Beispiel öffnet einen Text-Feld-Parser und definiert das Trennzeichen als `vbTab`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-348">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="26e2c-349">Ersetzen Sie den Pfad `C:\logs\test.log` durch den Pfad und Name der Datei, die Sie analysieren möchten.</span><span class="sxs-lookup"><span data-stu-id="26e2c-349">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="26e2c-350">Ein Trennzeichen hat die Länge 0 (null).</span><span class="sxs-lookup"><span data-stu-id="26e2c-350">A delimiter is zero-length.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths"><span data-ttu-id="26e2c-351">Array von <see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-351">Array of <see langword="Integer" />.</span></span></param>
        <summary><span data-ttu-id="26e2c-352">Legt die Trennzeichen für den Reader auf die angegebenen Werte fest.</span><span class="sxs-lookup"><span data-stu-id="26e2c-352">Sets the delimiters for the reader to the specified values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-353">Den vorhandenen Inhalt der `Delimiters` Eigenschaft sind deaktiviert, wenn diese Option festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="26e2c-353">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="26e2c-354">Diese Methode bietet eine Möglichkeit, die Trennzeichen festlegen, ohne das Erstellen eines Arrays.</span><span class="sxs-lookup"><span data-stu-id="26e2c-354">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="26e2c-355">Die folgende Tabelle enthält Beispiele für Aufgaben im Zusammenhang mit der `SetFieldWidths` Methode.</span><span class="sxs-lookup"><span data-stu-id="26e2c-355">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="26e2c-356">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="26e2c-356">To</span></span>|<span data-ttu-id="26e2c-357">Siehe</span><span class="sxs-lookup"><span data-stu-id="26e2c-357">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="26e2c-358">Eine Textdatei zu analysieren.</span><span class="sxs-lookup"><span data-stu-id="26e2c-358">Parse a text file.</span></span>|[<span data-ttu-id="26e2c-359">Analysieren von Textdateien mit dem TextFieldParser-Objekt</span><span class="sxs-lookup"><span data-stu-id="26e2c-359">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-360">In diesem Beispiel wird einen Textfeld Parser geöffnet und definiert die Breite des Felds als `5`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-360">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="26e2c-361">Ersetzen Sie den Pfad `C:\logs\test.log` durch den Pfad und Name der Datei, die Sie analysieren möchten.</span><span class="sxs-lookup"><span data-stu-id="26e2c-361">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="26e2c-362">Im folgenden Beispiel wird einen Textfeld Parser geöffnet und definiert die Feldbreiten `5`, `10`, und die Variable.</span><span class="sxs-lookup"><span data-stu-id="26e2c-362">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="26e2c-363">Ersetzen Sie den Pfad `C:\logs\test.log` durch den Pfad und Name der Datei, die Sie analysieren möchten.</span><span class="sxs-lookup"><span data-stu-id="26e2c-363">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="26e2c-364">Gibt an, ob die zu analysierende Datei Trennzeichen enthält oder eine feste Breite aufweist.</span><span class="sxs-lookup"><span data-stu-id="26e2c-364">Indicates whether the file to be parsed is delimited or fixed-width.</span></span></summary>
        <value><span data-ttu-id="26e2c-365">Ein <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />-Wert, der angibt, ob die zu analysierende Datei Trennzeichen enthält oder eine feste Breite aufweist.</span><span class="sxs-lookup"><span data-stu-id="26e2c-365">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-366">Der Standardwert dieser Eigenschaft ist begrenzt.</span><span class="sxs-lookup"><span data-stu-id="26e2c-366">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="26e2c-367">Die folgende Tabelle enthält Beispiele für Aufgaben im Zusammenhang mit der `TextFieldType` Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="26e2c-367">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="26e2c-368">Beschreibung</span><span class="sxs-lookup"><span data-stu-id="26e2c-368">To</span></span>|<span data-ttu-id="26e2c-369">Siehe</span><span class="sxs-lookup"><span data-stu-id="26e2c-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="26e2c-370">Lesen Sie aus einer durch Trennzeichen getrennte Textdatei</span><span class="sxs-lookup"><span data-stu-id="26e2c-370">Read from a delimited text file</span></span>|[<span data-ttu-id="26e2c-371">Gewusst wie: Lesen aus Textdateien mit Kommatrennung</span><span class="sxs-lookup"><span data-stu-id="26e2c-371">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="26e2c-372">Lesen Sie aus einer Textdatei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-372">Read from a fixed-width text file</span></span>|[<span data-ttu-id="26e2c-373">Gewusst wie: Lesen aus einer Textdatei mit fester Breite</span><span class="sxs-lookup"><span data-stu-id="26e2c-373">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="26e2c-374">Lesen Sie aus einer Textdatei mit mehreren Formaten</span><span class="sxs-lookup"><span data-stu-id="26e2c-374">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="26e2c-375">Gewusst wie: Lesen aus Textdateien mit mehreren Formaten</span><span class="sxs-lookup"><span data-stu-id="26e2c-375">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-376">In diesem Beispiel wird eine `TextFieldParser`, `FileReader`, und gibt an, dass Trennzeichen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="26e2c-376">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="26e2c-377">In diesem Beispiel wird eine `TextFieldParser`, `FileReader`, und gibt an, dass es mit fester Breite ist.</span><span class="sxs-lookup"><span data-stu-id="26e2c-377">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="26e2c-378">Gibt an, ob vorangestellte und nachfolgende Leerzeichen aus Feldwerten entfernt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="26e2c-378">Indicates whether leading and trailing white space should be trimmed from field values.</span></span></summary>
        <value>
          <span data-ttu-id="26e2c-379"><see langword="True" />, wenn vorangestellte und nachfolgende Leerzeichen aus Feldwerten entfernt werden sollen, andernfalls <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="26e2c-379"><see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26e2c-380">Der Standardwert für diese Eigenschaft ist `True`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-380">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26e2c-381">In diesem Beispiel wird eine `TextFieldParser`, `FileReader`, und legt die `TrimWhiteSpace` Eigenschaft `True`.</span><span class="sxs-lookup"><span data-stu-id="26e2c-381">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
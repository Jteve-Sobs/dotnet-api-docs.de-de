<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="682738b4136d074223cbe025a9380b3cca9bc1d0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480254" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Listet die Ressourcen in einer binären Ressourcendatei (.resources) durch Lesen von sequenziellen Ressourcenname-/Wert-Paaren auf.  
  
 **Sicherheitshinweis**: Aufrufen von Methoden in dieser Klasse mit nicht vertrauenswürdigen Daten stellt ein Sicherheitsrisiko dar. Rufen Sie die Methoden in der Klasse nur mit vertrauenswürdigen Daten auf. Weitere Informationen finden Sie unter [Sicherheitsrisiken durch nicht vertrauenswürdige Daten](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceReader> -Klasse stellt eine Standardimplementierung von der <xref:System.Resources.IResourceReader> Schnittstelle. Ein <xref:System.Resources.ResourceReader> Instanz darstellt, entweder eine eigenständige RESOURCES-Datei oder eine RESOURCES-Datei, die in einer Assembly eingebettet ist. Es dient zum Auflisten der Ressourcen in eine RESOURCES-Datei und Abrufen von dessen Name/Wert-Paaren. Sie unterscheidet sich von der <xref:System.Resources.ResourceManager> -Klasse, die mit dem angegebene benannten Ressourcen aus einer RESOURCES-Datei abgerufen, die in einer Assembly eingebettet ist. Die <xref:System.Resources.ResourceManager> Klasse dient zum Abrufen von Ressourcen, deren Namen im Voraus bekannt sind, während die <xref:System.Resources.ResourceReader> Klasse ist hilfreich zum Abrufen von Ressourcen, deren Anzahl oder den genauen Namen nicht zum Zeitpunkt der Kompilierung bekannt sind. Beispielsweise kann eine Anwendung eine Resources-Datei verwenden, um Konfigurationsinformationen zu speichern, die in Abschnitte und Elemente in einem Abschnitt, in dem die Anzahl von Abschnitten oder Elementen in einem Abschnitt im Voraus nicht bekannt ist unterteilt ist. Ressourcen können dann generisch benannt werden (z. B. `Section1`, `Section1Item1`, `Section1Item2`usw.) und abgerufen, indem eine <xref:System.Resources.ResourceReader> Objekt.  
  
> [!IMPORTANT]
>  Dieser Typ implementiert die <xref:System.IDisposable> Schnittstelle. Wenn Sie mithilfe des Typs abgeschlossen haben, sollten Sie es entweder direkt oder indirekt freigeben. Aufrufen, um den Typ direkt zu verwerfen, dessen <xref:System.IDisposable.Dispose%2A> Methode in einer `try` / `catch` Block. Um es indirekt freizugeben, verwenden Sie ein Sprachkonstrukt z. B. `using` (in c#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt "Verwenden eines Objekts, implementiert IDisposable" in der <xref:System.IDisposable> Thema zur Schnittstelle.  
  
 Weitere Informationen zum Verwenden der <xref:System.Resources.ResourceReader> Klasse, finden Sie unter den folgenden Abschnitten:  
  
-   [Instanziieren eines Objekts ResourceReader](#instantiate)  
  
-   [Auflisten der Ressourcen ein ResourceReader-Objekt](#enumerate)  
  
    -   [Abrufen von Ressourcen mithilfe von IDictionaryEnumerator-Eigenschaften](#idictionaryenumerator)  
  
    -   [Abrufen von Ressourcen anhand des Namens mit GetResourceData](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a>Instanziieren eines Objekts ResourceReader  
 Eine RESOURCES-Datei ist eine Binärdatei, die aus einer Textdatei oder durch eine XML-RESX-Datei kompiliert wurde [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md). Ein <xref:System.Resources.ResourceReader> Objekt kann entweder eine eigenständige RESOURCES-Datei oder eine RESOURCES-Datei, die in einer Assembly eingebettet wurde darstellen.  
  
 Beim Instanziieren einer <xref:System.Resources.ResourceReader> -Objekt, dass Lesevorgänge aus einer eigenständigen RESOURCES-Datei verwenden die <xref:System.Resources.ResourceReader> Klassenkonstruktor mit einem Eingabestream oder eine Zeichenfolge, die Namen der RESOURCES-Datei enthält. Im folgende Beispiel werden beide Ansätze veranschaulicht. Die erste instanziiert einen <xref:System.Resources.ResourceReader> Objekt, das eine RESOURCES-Datei mit dem Namen darstellt `Resources1.resources` anhand des Dateinamens. Die zweite instanziiert einen <xref:System.Resources.ResourceReader> Objekt, das eine RESOURCES-Datei mit dem Namen darstellt `Resources2.resources` mit einem Stream, aus der Datei erstellt.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 Zum Erstellen einer <xref:System.Resources.ResourceReader> instanziieren Objekt, das eine eingebettete RESOURCES-Datei darstellt ein <xref:System.Reflection.Assembly> Objekt aus der Assembly, in dem die RESOURCES-Datei eingebettet ist. Die <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.IO.Stream> -Objekt, das übergeben werden kann die <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> Konstruktor. Das folgende Beispiel instanziiert einen <xref:System.Resources.ResourceReader> -Objekt, das eine eingebettete RESOURCES-Datei darstellt.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a>Auflisten der Ressourcen ein ResourceReader-Objekt  
 Um die Ressourcen in eine RESOURCES-Datei auflisten, rufen Sie die <xref:System.Resources.ResourceReader.GetEnumerator%2A> -Methode, die gibt ein <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> Objekt. Rufen Sie die `IDictionaryEnumerator.MoveNext` Methode, um eine Ressource zum nächsten zu wechseln. Die Methode gibt `false` Wenn wurde alle Ressourcen in RESOURCES-Datei aufgelistet.  
  
> [!NOTE]
>  Obwohl die <xref:System.Resources.ResourceReader> -Klasse implementiert die <xref:System.Collections.IEnumerable> Schnittstelle und die <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> -Methode, die <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> Methode bietet keine die <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> Implementierung. Stattdessen die <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Collections.IDictionaryEnumerator> Schnittstellenobjekts, das Zugriff auf jede Ressource Name/Wert-Paar enthält.  
  
 Sie können die einzelnen Ressourcen in der Auflistung auf zwei Arten abrufen:  
  
-   Sie können jede Ressource in durchlaufen die <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> Datensammlungs- und <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> Eigenschaften zum Abrufen des Resource-Name und Wert. Diese Technik wird empfohlen, wenn alle Ressourcen vom selben Typ sind, oder Sie wissen, dass den Datentyp jeder Ressource.  
  
-   Sie können den Namen jeder Ressource abrufen, wenn Sie durchlaufen die <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> Auflistung und rufen die <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode zum Abrufen von Daten für die Ressource. Dieser Ansatz wird empfohlen, wenn Sie nicht, dass den Datentyp jeder Ressource wissen oder der vorherige Ansatz Ausnahmen auslöst.  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a>Abrufen von Ressourcen mithilfe von IDictionaryEnumerator-Eigenschaften  
 Die erste Methode zum Auflisten der Ressourcen in eine RESOURCES-Datei umfasst jede Ressource Name/Wert-Paar direkt abrufen. Nach dem Aufruf der `IDictionaryEnumerator.MoveNext` -Methode für jede Ressource in der Auflistung zu verschieben, können Sie die Ressource abrufen Namen aus der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> -Eigenschaft und die Ressourcendaten aus der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Das folgende Beispiel zeigt, wie Sie mit dem Namen und Wert der einzelnen Ressourcen in eine RESOURCES-Datei Abrufen der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> und <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaften. Erstellen Sie zum Ausführen des Beispiels die folgende Textdatei, die mit dem Namen ApplicationResources.txt Zeichenfolgenressourcen definieren.  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 Sie können dann die Text-Ressourcendatei in eine Binärdatei, die mit dem Namen ApplicationResources.resources mithilfe des folgenden Befehls konvertieren:  
  
 **resgen ApplicationResources.txt**  
  
 Klicken Sie dann das folgende Beispiel verwendet die <xref:System.Resources.ResourceReader> Klasse, um jede Ressource in der eigenständigen binäre RESOURCES-Datei auflisten und die Schlüsselnamen und den entsprechenden Wert angezeigt.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 Der Versuch zum Abrufen von Ressourcendaten aus der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaft kann die folgenden Ausnahmen auslösen:  
  
-   Ein <xref:System.FormatException> , wenn die Daten nicht das erwartete Format ist.  
  
-   Ein <xref:System.IO.FileNotFoundException> , wenn die Assembly, die den Typ enthält, der die Daten gehören, nicht gefunden werden kann.  
  
-   Ein <xref:System.TypeLoadException> , wenn der Typ, der die Daten gehören, nicht werden nicht gefunden werden.  
  
 In der Regel werden diese Ausnahmen ausgelöst, wenn die RESOURCES-Datei manuell geändert wurde, wenn die Assembly, in der ein Typ definiert ist, entweder nicht in einer Anwendung enthalten wurde oder versehentlich gelöscht wurde oder die Assembly mit einer älteren Version vorliegt, die ist ein Vorläufer des ein Typ. Wenn eine dieser Ausnahmen ausgelöst wird, können Sie Ressourcen abrufen, indem jede Ressource auflisten und Aufrufen der <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode, wie im folgenden Abschnitt gezeigt. Dieser Ansatz bietet Ihnen einige Informationen zu den Daten geben, die die <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaft hat versucht, zurückzugeben.  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a>Abrufen von Ressourcen anhand des Namens mit GetResourceData  
 Der zweite Ansatz zum Aufzählen von Ressourcen in eine RESOURCES-Datei auch umfasst das Navigieren durch die Ressourcen in der Datei durch Aufrufen der `IDictionaryEnumerator.MoveNext` Methode. Für jede Ressource rufen Sie den Namen der Ressource aus der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> -Eigenschaft, die dann an die <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> Methode zum Abrufen von Daten für die Ressource. Dies wird zurückgegeben, als ein Bytearray in die `resourceData` Argument.  
  
 Dieser Lösungsansatz ist jedoch umständlicher als Abrufen der Ressourcenname und den Wert aus der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> und <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaften, da es sich um die tatsächlichen Bytes zurückgibt, die den Ressourcenwert bilden. Jedoch, wenn der Versuch zum Abrufen der Ressource eine Ausnahme auslöst, die <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode können die Quelle der Ausnahme durch Angabe von Informationen zum Datentyp für die Ressource identifiziert. Weitere Informationen zu der Zeichenfolge, die den Datentyp der Ressource angibt, finden Sie unter <xref:System.Resources.ResourceReader.GetResourceData%2A>.  
  
 Das folgende Beispiel veranschaulicht, wie Sie diesen Ansatz verwenden, zum Abrufen von Ressourcen und zum Behandeln von Ausnahmen, die ausgelöst werden. Er erstellt programmgesteuert eine binäre RESOURCES-Datei, die vier Zeichenfolgen, ein boolescher Wert, eine ganze Zahl, einer Bitmap und eine benutzerdefinierte enthält `DateTimeTZI` Objekt. Um das Beispiel auszuführen, führen Sie folgende Schritte aus:  
  
1.  Erstellen Sie eine Assembly mit dem Namen Library.dll, die enthält die `DateTimeTZI` Struktur. Im folgenden ist der Quellcode für die Assembly.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     Kompilieren Sie den Quellcode in c# mithilfe des folgenden Befehls:  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     Oder Sie können Sie mithilfe des folgenden Befehls in Visual Basic kompilieren:  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  Kompilieren Sie und führen Sie den folgenden Quellcode, der eine RESOURCES-Datei mit dem Namen ContactResources.resources erstellt.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     Die Quellcodedatei heißt CreateResources.cs. Sie können es in c# kompilieren, mithilfe des folgenden Befehls:  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     Oder Sie können Sie mithilfe des folgenden Befehls in Visual Basic kompilieren:  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  Kompilieren Sie und führen Sie den folgenden Code zum Auflisten der Ressourcen in der Datei ContactResources.resources.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     Nach dem Ändern des Quellcodes (z. B. durch das Auslösen von absichtlich eine <xref:System.FormatException> am Ende der `try` Block) oder die Assembly Library.dll umbenennen, so, dass sie zur Laufzeit nicht verfügbar ist, Ausführen des Beispiels finden Sie unter wie Aufrufe von <xref:System.Resources.ResourceReader.GetResourceData%2A> Aktivieren Sie abgerufen oder neu erstellen einige Ressourceninformationen.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceReader" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Verwenden eine Instanz dieses Objekts mit nicht vertrauenswürdigen Daten stellt ein Sicherheitsrisiko dar. Verwenden Sie dieses Objekt nur mit vertrauenswürdigen Daten. Weitere Informationen finden Sie unter [Datenvalidierung](https://www.owasp.org/index.php/Data_Validation).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Der Eingabedatenstrom zum Lesen von Ressourcen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceReader" />-Klasse für den angegebenen Stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> Konstruktor instanziiert einen <xref:System.Resources.ResourceReader> Objekt, das Ressourcen abruft, entweder von einer eigenständigen RESOURCES-Datei oder aus einer RESOURCES-Datei, die, in einer Assembly eingebettet. Um eine eigenständige RESOURCES-Datei zu lesen, Instanziieren einer <xref:System.IO.Stream> Objekt, und übergeben Sie sie an der <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> Konstruktor. Um eine eingebettete RESOURCES-Datei zu lesen, rufen Sie die <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> Methode mit dem Namen Groß-/Kleinschreibung beachtet, der die RESOURCES-Datei, und übergeben Sie das zurückgegebene <xref:System.IO.Stream> -Objekt an die <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> Konstruktor.  
  
> [!IMPORTANT]
>  Verwenden eine Instanz dieses Objekts mit nicht vertrauenswürdigen Daten stellt ein Sicherheitsrisiko dar. Verwenden Sie dieses Objekt nur mit vertrauenswürdigen Daten. Weitere Informationen finden Sie unter [Datenvalidierung](https://www.owasp.org/index.php/Data_Validation).  
  
   
  
## Examples  
 Im Beispiel in diesem Abschnitt wird die folgende txt-Datei mit dem Namen `PatientForm.txt` zu definieren, die von einer Anwendung verwendeten Ressourcen.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 Sie können die TXT-Datei in eine RESOURCES-Datei kompilieren, indem Sie den folgenden Befehl ausgeben:  
  
 **resgen PatientForm.txt**  
  
 Im folgende Beispiel wird davon ausgegangen, dass die Ressourcendatei in der Assembly eingebettet ist, der ausführbare Code der Anwendung enthält. Ruft ab eine Ressourcendatei namens `PatientForm.resources` aus den aktuell ausgeführten Assemblys und zeigt den Namen und Wert der einzelnen Ressourcen.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 Wenn im C#-Beispiel heißt `Example.cs`, Sie können mithilfe des folgenden Befehls kompilieren:  
  
 **CSC "example.cs" /res:PatientForm.resources**  
  
 Wenn das Visual Basic-Beispiel heißt `Example.vb`, Sie können mithilfe des folgenden Befehls kompilieren:  
  
 **Vbc Example.vb /res:PatientForm.resources**  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="stream" />-Parameter ist nicht lesbar.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="stream" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Beim Zugriff auf <paramref name="stream" /> ist ein E/A-Fehler aufgetreten.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für das Bereitstellen von Serialisierungsdiensten. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Pfad und der Name der zu lesenden Ressourcen-Datei. Bei <c>filename</c> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceReader" />-Klasse für die angegebene benannten Ressourcendatei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> Konstruktor instanziiert einen <xref:System.Resources.ResourceReader> -Objekt, das Ressourcen aus einer eigenständigen RESOURCES-Datei abruft. Verwenden Sie zum Abrufen von Ressourcen aus einer eingebettete RESOURCES-Datei der <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> Konstruktor.  
  
> [!IMPORTANT]
>  Verwenden eine Instanz dieses Objekts mit nicht vertrauenswürdigen Daten stellt ein Sicherheitsrisiko dar. Verwenden Sie dieses Objekt nur mit vertrauenswürdigen Daten. Weitere Informationen finden Sie unter [Datenvalidierung](https://www.owasp.org/index.php/Data_Validation).  
  
   
  
## Examples  
 Im Beispiel in diesem Abschnitt wird die folgende txt-Datei mit dem Namen `PatientForm.txt` zu definieren, die von einer Anwendung verwendeten Ressourcen.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 Sie können diese txt-Datei in eine RESOURCES-Datei kompilieren, indem Sie den folgenden Befehl ausgeben:  
  
 **resgen PatientForm.txt**  
  
 Das folgende Beispiel listet die Ressourcen in `PatientForm.resources` und zeigt den Namen und Wert der einzelnen.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Die Datei kann nicht gefunden werden.</exception>
        <exception cref="T:System.IO.IOException">Ein E/A-Fehler ist aufgetreten.</exception>
        <exception cref="T:System.BadImageFormatException">Die Ressourcendatei weist ein ungültiges Format auf. Zum Beispiel kann die Länge der Datei 0 (null) sein.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle diesem <see cref="T:System.Resources.ResourceReader" />-Objekt zugeordneten Ressourcen des Betriebssystems frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.Close%2A> kann problemlos mehrmals aufgerufen werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird über die Ressourcen einer Datei und zeigt alle Schlüssel-Wert-Paare, die es findet. Anschließend verwendet der Code die <xref:System.Resources.ResourceReader.Close%2A> Methode zum Herunterfahren der <xref:System.Resources.ResourceReader> und alle von diesem verwendeten Ressourcen freizugeben.  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Resources.ResourceReader" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie mithilfe einer Instanz des fertig sind <xref:System.Resources.ResourceReader>, rufen Sie <xref:System.Resources.ResourceReader.Dispose%2A> alle von dieser Objektinstanz verwendete Ressourcen freizugeben. Vermeiden Sie die weiteren Verweise auf diesen <xref:System.Resources.ResourceReader> Instanz fest, damit der Garbage Collector den Speicher der Instanz statt auf einen Abschluss warten aktiv halten freigeben kann.  
  
 <xref:System.Resources.ResourceReader.Dispose%2A> Ruft die private Dispose(Boolean)-Methode, die enthält den Code, um verwaltete und nicht verwaltete Ressourcen freizugeben. Weitere Informationen finden Sie unter [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt zurück.</summary>
        <returns>Ein Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel Aufzählen von Ressourcen durch Aufrufen der <xref:System.Resources.ResourceReader.GetEnumerator%2A> -Methode und dem anschließenden wiederholt Aufrufen der <xref:System.Collections.IEnumerator.MoveNext%2A> Methode für das zurückgegebene <xref:System.Collections.IDictionaryEnumerator> Objekt, bis der Methodenrückgabe `false`. Der Ressourcenname ist von der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> -Eigenschaft, deren Werte von der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaft. Das Beispiel veranschaulicht das Auflisten der Ressourcen auf diese Weise.  
  
 Die Implementierung der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaft, indem die <xref:System.Resources.ResourceReader> Klasse kann die folgenden Ausnahmen auslösen:  
  
-   <xref:System.IO.FileNotFoundException>  
  
     Die Assembly, die den Typ enthält, zu dem die Daten gehört, kann nicht gefunden werden.  
  
-   <xref:System.FormatException>  
  
     Die Daten sind nicht das erwartete Format auf.  
  
-   <xref:System.TypeLoadException>  
  
     Der Typ, den die Daten angehört, kann nicht gefunden werden.  
  
 Sie können die Ausnahme behandeln, durch Aufrufen der <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode zum Abrufen von Informationen über den Datentyp und das Bytearray, das auf die benannte Ressource zugewiesen. Weitere Informationen finden Sie im Abschnitt "Abrufen von Ressourcen von Namen mit GetResourceData" in der <xref:System.Resources.ResourceReader> klassenthema.  
  
> [!IMPORTANT]
>  Die <xref:System.Resources.ResourceReader> Klasse enthält zwei Methoden, die Enumeratoren zurückgeben. Die <xref:System.Resources.ResourceReader.GetEnumerator%2A> Methode gibt ein <xref:System.Collections.IDictionaryEnumerator> oberflächenobjekts und ist die empfohlene Methode zum Aufrufen beim Auflisten der Ressourcen.  
  
   
  
## Examples  
 Im Beispiel in diesem Abschnitt wird die folgende txt-Datei mit dem Namen `PatientForm.txt` zu definieren, die von einer Anwendung verwendeten Ressourcen.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 Sie können die TXT-Datei in eine RESOURCES-Datei kompilieren, indem Sie den folgenden Befehl ausgeben:  
  
 **resgen PatientForm.txt**  
  
 Das folgende Beispiel listet die Ressourcen in `PatientForm.resources` und zeigt den Namen und Wert der einzelnen.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Reader wurde geschlossen oder freigegeben, der Zugriff ist daher nicht möglich.</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="resourceData" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceName">Der Name einer Ressource.</param>
        <param name="resourceType">Diese Methode gibt eine Zeichenfolge zurück, die den Typnamen der abgerufenen Ressource darstellt. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <param name="resourceData">Wenn diese Methode beendet wird, enthält sie ein Bytearray, das die Binärdarstellung des abgerufenen Typs ist. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Ruft den Typnamen und die Daten einer benannten Ressource aus einer geöffneten Ressourcendatei oder einem geöffneten Datenstrom ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode ruft den Wert einer benannten Ressource als Bytearray ab. Ist in der Regel verwendet, wenn die <xref:System.Collections.IDictionaryEnumerator.Value%2A> -Eigenschaft löst eine Ausnahme aus, wenn er versucht, den Wert einer Ressource abzurufen.  
  
 `resourceType` ist eine Zeichenfolge, die den Datentyp der Ressource darstellt. Die folgenden Werte sind möglich:  
  
-   Die angegebene Zeichenfolgendarstellung einer `ResourceTypeCode` Enumerationsmember, der den Datentyp der Ressource angibt. `ResourceTypeCode` ist eine private Enumeration, die von Textzeigers verwendet wird anzugeben, dass ein spezielles binären Format verwendet wird, um 19 gängige Datentypen zu speichern. Dazu gehören die .NET Framework-primitive Datentypen (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), sowie <xref:System.String>, <xref:System.DateTime>, und <xref:System.TimeSpan>, darüber hinaus die `ResourceTypeCode` Enumeration enthält die Werte, die in der folgenden Tabelle gezeigt.  
  
    |ResourceTypeCode Wert|Beschreibung |  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|Die Daten sind ein Byte-Array. Geben Sie diese Daten häufig Ergebnisse aus dem Aufruf der <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> Methode.|  
    |`ResourceTypeCode.Null`|Die Daten sind ein null-Verweis. Geben Sie diese Daten häufig Ergebnisse aus dem Aufruf der <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> Methode mit einem Objekt, dessen Wert `null`.|  
    |`ResourceTypeCode.Stream`|Die Daten werden in einem Stream gespeichert. Geben Sie diese Daten häufig Ergebnisse aus dem Aufruf der <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> oder <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> Methode.|  
  
     Vorausgesetzt, dass `resourceData` wurde nicht beschädigt, es in der Regel konvertiert werden kann aus einem Bytearray zurück auf den ursprünglichen Wert durch den Aufruf einer <xref:System.BitConverter> oder <xref:System.IO.BinaryReader> Methode.  
  
-   Eine Zeichenfolge, die den vollqualifizierten Namen des Typs enthält, deren serialisierten Daten zugewiesen ist, die `resourceData` Argument (z. B. `System.String`). Darüber hinaus enthält die Zeichenfolge für Typen, die nicht Bestandteil der .NET Framework-Klassenbibliothek sind, der Name, Version, Kultur und öffentlicher Schlüssel der Assembly, die den Typ enthält. Die folgende Zeichenfolge gibt beispielsweise an, dass die serialisierten Daten eine Instanz von darstellt der `Person` Geben Sie in der `Extensions` gefunden wird, in einer Assembly namens Hilfsprogramm, das kein öffentlicher Schlüssel und keine anderen festgelegte Kultur verfügt, Version 1.0-Namespace.  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     Vorausgesetzt, dass `resourceData` nicht beschädigt wurde und dass der Quelltyp verfügbar ist `resourceData` konvertiert werden kann aus einem Bytearray auf den ursprünglichen Wert wieder zurückgewandelt das Bytearray, eine <xref:System.IO.Stream> -Objekt, und übergeben den Datenstrom an die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>Methode.  
  
-   Die Zeichenfolge zum Beschreiben des Datentyps in der <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> -Methodenaufruf.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> existiert nicht.</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="resourceName" /> besitzt einen ungültigen Typ.</exception>
        <exception cref="T:System.FormatException">Die abgerufenen Ressourcendaten sind beschädigt.</exception>
        <exception cref="T:System.InvalidOperationException">Das aktuelle <see cref="T:System.Resources.ResourceReader" />-Objekt wurde nicht initialisiert, weil es wahrscheinlich geschlossen ist.</exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt zurück.</summary>
        <returns>Ein Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> ist eine explizite schnittstellenimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Resources.ResourceReader>-Instanz in eine <xref:System.Collections.IEnumerable>-Schnittstelle umgewandelt wird. Die empfohlene Vorgehensweise zum Auflisten der Ressourcen in eine RESOURCES-Datei besteht im Aufrufen der <xref:System.Collections.IEnumerator.MoveNext%2A> Methode der <xref:System.Collections.IDictionaryEnumerator> zurückgegebenes Objekt die <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Reader wurde bereits geschlossen, der Zugriff ist nicht möglich.</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
  </Members>
</Type>
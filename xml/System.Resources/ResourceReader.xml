<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f2814539bf76d998ae0f4c7bdb789f22102804ce" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52734772" /></Metadata><TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IResourceReader&#xA;    interface IEnumerable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Listet die Ressourcen in einer binären Ressourcendatei (.resources) durch Lesen von sequenziellen Ressourcenname-/Wert-Paaren auf.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-class-note](~/includes/untrusted-data-class-note.md)]

 Die <xref:System.Resources.ResourceReader> -Klasse stellt eine Standardimplementierung von der <xref:System.Resources.IResourceReader> Schnittstelle. Ein <xref:System.Resources.ResourceReader> Instanz darstellt, entweder eine eigenständige RESOURCES-Datei oder eine RESOURCES-Datei, die in einer Assembly eingebettet ist. Es wird zum Auflisten von Ressourcen in eine RESOURCES-Datei und Abrufen von dessen Name/Wert-Paaren. Es unterscheidet sich von der <xref:System.Resources.ResourceManager> -Klasse, die mit dem angegebene benannten Ressourcen aus einer RESOURCES-Datei abgerufen, die in einer Assembly eingebettet ist. Die <xref:System.Resources.ResourceManager> Klasse dient zum Abrufen von Ressourcen, deren Namen im Voraus bekannt sind, während die <xref:System.Resources.ResourceReader> -Klasse ist hilfreich zum Abrufen von Ressourcen, deren Anzahl oder den genauen Namen sind zum Zeitpunkt der Kompilierung nicht bekannt. Beispielsweise kann eine Anwendung eine Ressourcendatei verwenden, um Konfigurationsinformationen zu speichern, die organisiert werden, in den Abschnitten und Elemente in einem Abschnitt, in dem die Anzahl von Abschnitten oder Elemente in einem Abschnitt im Voraus nicht bekannt ist. Ressourcen können dann generisch benannt werden (z. B. `Section1`, `Section1Item1`, `Section1Item2`usw.) und abgerufen, indem Sie mit einer <xref:System.Resources.ResourceReader> Objekt.  
  
> [!IMPORTANT]
>  Dieser Typ implementiert die <xref:System.IDisposable> Schnittstelle. Wenn Sie mit dem Typ haben, sollten Sie es entweder direkt oder indirekt freigeben. Damit des Typs direkt freigegeben werden, rufen Sie die <xref:System.IDisposable.Dispose%2A> -Methode in einer `try` / `catch` Block. Um sie indirekt löschen, verwenden Sie ein Sprachkonstrukt wie `using` (in c#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt "mithilfe von ein-Objekt, das implementiert" IDisposable "" in der <xref:System.IDisposable> schnittstellenthema.  
  
 Weitere Informationen zur Verwendung der <xref:System.Resources.ResourceReader> Klasse, finden Sie unter den folgenden Abschnitten:  
  
-   [Instanziieren eines Objekts ResourceReader](#instantiate)  
  
-   [Auflisten von Ressourcen des Objekts ein ResourceReader](#enumerate)  
  
    -   [Abrufen von Ressourcen mithilfe von IDictionaryEnumerator-Eigenschaften](#idictionaryenumerator)  
  
    -   [Abrufen von Ressourcen anhand des Namens mit GetResourceData](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a>Instanziieren eines Objekts ResourceReader  
 Eine RESOURCES-Datei ist eine binäre Datei, die entweder aus einer Textdatei oder durch eine XML-RESX-Datei kompiliert wurde [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md). Ein <xref:System.Resources.ResourceReader> Objekt kann entweder eine eigenständige RESOURCES-Datei oder eine RESOURCES-Datei, die in einer Assembly eingebettet wurde darstellen.  
  
 Instanziiert eine <xref:System.Resources.ResourceReader> Objekt, mit dem Lesevorgänge von eigenständigen .resources-Datei, die <xref:System.Resources.ResourceReader> Konstruktor der Klasse mit einem Eingabestream oder eine Zeichenfolge, die Namen der RESOURCES-Datei enthält. Das folgende Beispiel zeigt beide Ansätze. Die erste instanziiert ein <xref:System.Resources.ResourceReader> Objekt, das eine RESOURCES-Datei mit dem Namen darstellt `Resources1.resources` unter Verwendung des Dateinamens. Die zweite instanziiert ein <xref:System.Resources.ResourceReader> Objekt, das eine RESOURCES-Datei mit dem Namen darstellt `Resources2.resources` mithilfe eines Datenstroms, der aus der Datei erstellt.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 Zum Erstellen einer <xref:System.Resources.ResourceReader> instanziieren-Objekt, das eine eingebettete RESOURCES-Datei, stellt eine <xref:System.Reflection.Assembly> Objekt aus der Assembly, in dem die RESOURCES-Datei eingebettet ist. Die <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.IO.Stream> -Objekt, das übergeben werden kann die <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> Konstruktor. Das folgende Beispiel instanziiert ein <xref:System.Resources.ResourceReader> -Objekt, das eine eingebettete RESOURCES-Datei darstellt.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a>Auflisten von Ressourcen des Objekts ein ResourceReader  
 Rufen Sie zum Auflisten von Ressourcen in eine RESOURCES-Datei der <xref:System.Resources.ResourceReader.GetEnumerator%2A> -Methode, die gibt ein <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> Objekt. Rufen Sie die `IDictionaryEnumerator.MoveNext` Methode, um aus einer Ressource zum nächsten zu wechseln. Gibt die Methode zurück `false` Wenn haben alle Ressourcen in die RESOURCES-Datei aufgelistet wurden.  
  
> [!NOTE]
>  Obwohl die <xref:System.Resources.ResourceReader> -Klasse implementiert die <xref:System.Collections.IEnumerable> Schnittstelle und die <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> -Methode, die <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> Methode bietet keine die <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> Implementierung. Stattdessen die <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Collections.IDictionaryEnumerator> Schnittstellenobjekts, das Zugriff auf jede Ressource Name-Wert-Paar bereitstellt.  
  
 Sie können die einzelnen Ressourcen in der Auflistung auf zwei Arten abrufen:  
  
-   Sie können jede Ressource im Durchlaufen der <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> Erfassung und Verwendung <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> Eigenschaften zum Abrufen der Resource-Name und Wert. Diese Methode wird empfohlen, wenn alle Ressourcen, die vom gleichen Typ sind, oder Sie wissen, dass den Datentyp der einzelnen Ressourcen.  
  
-   Sie können den Namen der einzelnen Ressourcen abrufen, wenn Sie durchlaufen die <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> Sammlung, und rufen die <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode, um die Daten der Ressource abzurufen. Dieser Ansatz wird empfohlen, wenn Sie nicht, dass den Datentyp der einzelnen Ressourcen wissen oder der vorherige Ansatz, Ausnahmen auslöst.  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a>Abrufen von Ressourcen mithilfe von IDictionaryEnumerator-Eigenschaften  
 Die erste Methode zum Auflisten von Ressourcen in eine RESOURCES-Datei wird direkt jeder Ressource Name/Wert-Paar. Nach dem Aufrufen der `IDictionaryEnumerator.MoveNext` -Methode auf jede Ressource in der Auflistung zu verschieben, können Sie abrufen, die Ressource zu benennen, aus der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> -Eigenschaft und die Ressourcendaten aus der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Das folgende Beispiel zeigt, wie zum Abrufen von Name und Wert der einzelnen Ressourcen in eine RESOURCES-Datei mithilfe der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> und <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaften. Um das Beispiel auszuführen, erstellen Sie die folgende Textdatei, die mit dem Namen ApplicationResources.txt Zeichenfolgenressourcen definieren.  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 Sie können dann die Text-Ressourcendatei in eine Binärdatei, die mit dem Namen ApplicationResources.resources mithilfe des folgenden Befehls konvertieren:  
  
 **Resgen ApplicationResources.txt**  
  
 Im folgenden Beispiel wird, klicken Sie dann die <xref:System.Resources.ResourceReader> Klasse, um jede Ressource in der eigenständigen binäre RESOURCES-Datei aufgelistet werden und um die Schlüsselnamen und den entsprechenden Wert anzuzeigen.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 Der Versuch zum Abrufen von Ressourcendaten aus der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaft kann die folgenden Ausnahmen auslösen:  
  
-   Ein <xref:System.FormatException> ist die Daten nicht im erwarteten Format.  
  
-   Ein <xref:System.IO.FileNotFoundException> , wenn die Assembly, die den Typ enthält, die Daten gehören, nicht gefunden werden kann.  
  
-   Ein <xref:System.TypeLoadException> , wenn der Typ, der die Daten gehören, nicht werden wurde nicht gefunden.  
  
 In der Regel sind diese Ausnahmen ausgelöst, wenn die RESOURCES-Datei manuell geändert wurde, wenn die Assembly, in der ein Typ definiert ist, entweder nicht in einer Anwendung enthalten wurde, oder versehentlich gelöscht wurde oder die Assembly mit einer älteren Version vorliegt, die ist ein Vorläufer des ein Typ. Wenn eine dieser Ausnahmen ausgelöst wird, können Sie Ressourcen abrufen, indem Auflisten von jeder Ressource und das Aufrufen der <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode, wie im folgenden Abschnitt gezeigt. Dieser Ansatz bietet Sie einige Informationen zu den Daten eingeben, die die <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> versucht-Eigenschaft zurück.  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a>Abrufen von Ressourcen anhand des Namens mit GetResourceData  
 Der zweite Ansatz zum Auflisten von Ressourcen in eine RESOURCES-Datei auch umfasst das Navigieren durch die Ressourcen in der Datei durch Aufrufen der `IDictionaryEnumerator.MoveNext` Methode. Für jede Ressource, rufen Sie den Namen der Ressource aus der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> -Eigenschaft, die dann an die <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> Methode, um die Daten der Ressource abzurufen. Als Byte-Array im Rückgabewert die `resourceData` Argument.  
  
 Dieser Ansatz ist umständlicher als das Abrufen von den Ressourcennamen und der Wert aus der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> und <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaften, da es sich um die tatsächlichen Bytes zurückgibt, die den Ressourcenwert bilden. Jedoch, wenn der Versuch zum Abrufen der Ressource eine Ausnahme auslöst, die <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode können Sie identifizieren die Quelle der Ausnahme durch Angabe von Informationen zu Datentyp der Ressource. Weitere Informationen zu die Zeichenfolge, die den Datentyp der Ressource angibt, finden Sie unter <xref:System.Resources.ResourceReader.GetResourceData%2A>.  
  
 Das folgende Beispiel veranschaulicht, wie Sie diesen Ansatz verwenden, um Ressourcen abzurufen und um alle Ausnahmen zu behandeln, die ausgelöst werden. Es erstellt programmgesteuert eine binäre RESOURCES-Datei mit vier Zeichenfolgen, ein boolescher Wert, eine ganze Zahl, eine Bitmap und benutzerdefinierte `DateTimeTZI` Objekt. Um das Beispiel auszuführen, führen Sie folgende Schritte aus:  
  
1.  Erstellen Sie eine Assembly mit dem Namen Library.dll, die enthält die `DateTimeTZI` Struktur. Folgendes ist der Quellcode für die Assembly.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     Kompilieren Sie den Quellcode in c# mithilfe des folgenden Befehls:  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     Oder Sie können es in Visual Basic kompilieren, mithilfe des folgenden Befehls:  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  Kompilieren Sie und führen Sie den folgenden Quellcode, der eine RESOURCES-Datei mit dem Namen ContactResources.resources erstellt.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     Die Quellcodedatei Namen CreateResources.cs. Sie können es in C# -Code kompilieren, mithilfe des folgenden Befehls:  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     Oder Sie können es in Visual Basic kompilieren, mithilfe des folgenden Befehls:  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  Kompilieren Sie und führen Sie den folgenden Code zum Auflisten der Ressourcen in der Datei ContactResources.resources.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     Nach der Änderung des Quellcodes (z. B. durch Auslösen von absichtlich eine <xref:System.FormatException> am Ende der `try` Block) oder Umbenennen von der Assembly Library.dll, damit es zur Laufzeit nicht verfügbar ist, können Sie das Beispiel finden Sie unter ausführen wie Aufrufe von <xref:System.Resources.ResourceReader.GetResourceData%2A> ermöglichen Sie abrufen oder erstellen Sie einige Informationen zur Ressource neu.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceReader" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)].
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : System.IO.Stream -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Der Eingabedatenstrom zum Lesen von Ressourcen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceReader" />-Klasse für den angegebenen Stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> Konstruktor instanziiert ein <xref:System.Resources.ResourceReader> -Objekt, das Ressourcen abruft, eigenständige RESOURCES-Datei oder auf einem resources-Datei, die, in einer Assembly eingebettet. Um eine eigenständige RESOURCES-Datei lesen zu können, instanziieren Sie ein <xref:System.IO.Stream> -Objekt und übergeben Sie sie an der <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> Konstruktor. Um eine eingebettete RESOURCES-Datei zu lesen, rufen Sie die <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> Methode mit dem Namen Groß-/Kleinschreibung beachtet, der die RESOURCES-Datei, und übergeben Sie das zurückgegebene <xref:System.IO.Stream> -Objekt an die <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> Konstruktor.  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
## Examples  
 Im Beispiel in diesem Abschnitt wird die folgenden txt-Datei mit dem Namen `PatientForm.txt` , die von einer Anwendung verwendeten Ressourcen zu definieren.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 Sie können die TXT-Datei in eine RESOURCES-Datei kompilieren, indem Sie den folgenden Befehl ausgeben:  
  
 **Resgen PatientForm.txt**  
  
 Im folgende Beispiel wird davon ausgegangen, dass die Ressourcendatei in der Assembly eingebettet ist, der ausführbare Code der Anwendung enthält. Ruft ab eine Ressourcendatei namens `PatientForm.resources` aus den aktuell ausgeführten Assemblys und zeigt den Namen und Wert der einzelnen darin enthaltenen Ressourcen.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 Wenn das C#-Beispiel heißt `Example.cs`, Sie können es kompilieren, mithilfe des folgenden Befehls:  
  
 **CSC "example.cs" /res:PatientForm.resources**  
  
 Wenn die Visual Basic-Beispiel heißt `Example.vb`, Sie können es kompilieren, mithilfe des folgenden Befehls:  
  
 **Vbc Example.vb /res:PatientForm.resources**  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="stream" />-Parameter ist nicht lesbar.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="stream" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Beim Zugriff auf <paramref name="stream" /> ist ein E/A-Fehler aufgetreten.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">zum Bereitstellen von Serialisierungsdiensten. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : string -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Pfad und der Name der zu lesenden Ressourcen-Datei. Bei <c>filename</c> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceReader" />-Klasse für die angegebene benannten Ressourcendatei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> Konstruktor instanziiert ein <xref:System.Resources.ResourceReader> -Objekt, das Ressourcen aus einer eigenständigen RESOURCES-Datei abruft. Verwenden Sie zum Abrufen von Ressourcen aus einer eingebetteten .resources-Datei der <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> Konstruktor.  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]

## Examples  
 Im Beispiel in diesem Abschnitt wird die folgenden txt-Datei mit dem Namen `PatientForm.txt` , die von einer Anwendung verwendeten Ressourcen zu definieren.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 Sie können dieses txt-Datei in eine RESOURCES-Datei kompilieren, durch den folgenden Befehl ausgeben:  
  
 **Resgen PatientForm.txt**  
  
 Das folgende Beispiel listet die Ressourcen in `PatientForm.resources` und zeigt den Namen und Wert jedes.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Die Datei kann nicht gefunden werden.</exception>
        <exception cref="T:System.IO.IOException">Ein E/A-Fehler ist aufgetreten.</exception>
        <exception cref="T:System.BadImageFormatException">Die Ressourcendatei weist ein ungültiges Format auf. Zum Beispiel kann die Länge der Datei 0 (null) sein.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="resourceReader.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle diesem <see cref="T:System.Resources.ResourceReader" />-Objekt zugeordneten Ressourcen des Betriebssystems frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.Close%2A> kann problemlos mehrmals aufgerufen werden.  
  
   
  
## Examples  
 Das folgende Beispiel durchläuft die Ressourcen einer Datei und zeigt alle Schlüssel/Wert-Paare, die sie findet. Dann verwendet der Code die <xref:System.Resources.ResourceReader.Close%2A> Methode zum Herunterfahren der <xref:System.Resources.ResourceReader> und alle von diesem verwendeten Ressourcen freizugeben.  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="resourceReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Resources.ResourceReader" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie mithilfe dieser Instanz von haben <xref:System.Resources.ResourceReader>, rufen Sie <xref:System.Resources.ResourceReader.Dispose%2A> alle von dieser Instanz verwendeten Ressourcen freizugeben. Sollten Sie weitere Verweise auf eliminieren <xref:System.Resources.ResourceReader> -Instanz, damit der Garbage Collector den Arbeitsspeicher der Instanz statt jedoch ständig die aktiv auf einen Abschluss warten freigeben kann.  
  
 <xref:System.Resources.ResourceReader.Dispose%2A> Ruft die private Dispose(Boolean)-Methode, die enthält den Code, um verwaltete und nicht verwaltete Ressourcen freizugeben. Weitere Informationen finden Sie unter [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt zurück.</summary>
        <returns>Ein Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel zählen Sie Ressourcen durch Aufrufen der <xref:System.Resources.ResourceReader.GetEnumerator%2A> -Methode, und klicken Sie dann durch wiederholtes Aufrufen der <xref:System.Collections.IEnumerator.MoveNext%2A> Methode für das zurückgegebene <xref:System.Collections.IDictionaryEnumerator> Objekt, bis der Methodenrückgabe `false`. Der Ressourcenname ist verfügbar, aus der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> -Eigenschaft, deren Werte von der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaft. Das Beispiel veranschaulicht die Vorgehensweise beim Auflisten der Ressourcen auf diese Weise.  
  
 Die Implementierung der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaft, indem die <xref:System.Resources.ResourceReader> -Klasse kann die folgenden Ausnahmen auslösen:  
  
-   <xref:System.IO.FileNotFoundException>  
  
     Die Assembly, die den Typ enthält, die Daten gehören, wurde nicht gefunden.  
  
-   <xref:System.FormatException>  
  
     Die Daten sind nicht das erwartete Format auf.  
  
-   <xref:System.TypeLoadException>  
  
     Der Typ, den die Daten gehören, wurde nicht gefunden.  
  
 Sie können die Ausnahme behandeln, durch den Aufruf der <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode zum Abrufen von Informationen über den Datentyp und das Array von Bytes, die die benannte Ressource zugewiesen. Weitere Informationen finden Sie im Abschnitt "Abrufen von Ressourcen von Namen mit GetResourceData" in der <xref:System.Resources.ResourceReader> Thema-Klasse.  
  
> [!IMPORTANT]
>  Die <xref:System.Resources.ResourceReader> Klasse enthält zwei Methoden, die Enumeratoren zurückgeben. Die <xref:System.Resources.ResourceReader.GetEnumerator%2A> Methode gibt ein <xref:System.Collections.IDictionaryEnumerator> oberflächenobjekts und ist die empfohlene Methode zum Aufrufen beim Auflisten der Ressourcen.  
  
   
  
## Examples  
 Im Beispiel in diesem Abschnitt wird die folgenden txt-Datei mit dem Namen `PatientForm.txt` , die von einer Anwendung verwendeten Ressourcen zu definieren.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 Sie können die TXT-Datei in eine RESOURCES-Datei kompilieren, indem Sie den folgenden Befehl ausgeben:  
  
 **Resgen PatientForm.txt**  
  
 Das folgende Beispiel listet die Ressourcen in `PatientForm.resources` und zeigt den Namen und Wert jedes.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Reader wurde geschlossen oder freigegeben, der Zugriff ist daher nicht möglich.</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberSignature Language="F#" Value="member this.GetResourceData : string *  *  -&gt; unit" Usage="resourceReader.GetResourceData (resourceName, resourceType, resourceData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String" RefType="out" />
        <Parameter Name="resourceData" Type="System.Byte[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceName">Der Name einer Ressource.</param>
        <param name="resourceType">Diese Methode gibt eine Zeichenfolge zurück, die den Typnamen der abgerufenen Ressource darstellt. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <param name="resourceData">Wenn diese Methode beendet wird, enthält sie ein Bytearray, das die Binärdarstellung des abgerufenen Typs ist. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Ruft den Typnamen und die Daten einer benannten Ressource aus einer geöffneten Ressourcendatei oder einem geöffneten Datenstrom ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode ruft den Wert einer benannten Ressource als Bytearray ab. In der Regel verwendet, wenn die <xref:System.Collections.IDictionaryEnumerator.Value%2A> Eigenschaft löst eine Ausnahme aus, wenn er versucht, den Wert einer Ressource abzurufen.  
  
 `resourceType` ist eine Zeichenfolge, die den Datentyp der Ressource darstellt. Eines der folgenden Werte sind möglich:  
  
-   Die angegebene Zeichenfolgendarstellung einer `ResourceTypeCode` -Enumerationsmember, der den Datentyp der Ressource angibt. `ResourceTypeCode` ist eine private Enumeration, mit dem Textzeigers anzugeben, dass ein spezielles binäres Format zum Speichern von einer der 19 allgemeine Datentypen verwendet wird. Dazu zählen die .NET Framework-primitiven Datentypen (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), als auch <xref:System.String>, <xref:System.DateTime>, und <xref:System.TimeSpan>, darüber hinaus die `ResourceTypeCode` Enumeration enthält die Werte, die in der folgenden Tabelle gezeigt.  
  
    |ResourceTypeCode Wert|Beschreibung |  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|Die Daten sind ein Byte-Array. Geben Sie diese Daten häufig Ergebnisse aus dem Aufruf der <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> Methode.|  
    |`ResourceTypeCode.Null`|Die Daten sind ein null-Verweis. Geben Sie diese Daten häufig Ergebnisse aus dem Aufruf der <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> Methode mit einem Objekt, dessen Wert `null`.|  
    |`ResourceTypeCode.Stream`|Die Daten werden in einem Stream gespeichert. Geben Sie diese Daten häufig Ergebnisse aus dem Aufruf der <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> oder <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> Methode.|  
  
     Vorausgesetzt, dass `resourceData` wurde nicht beschädigt, er kann in der Regel konvertiert werden aus einem Bytearray zurück auf den ursprünglichen Wert durch den Aufruf einer <xref:System.BitConverter> oder <xref:System.IO.BinaryReader> Methode.  
  
-   Eine Zeichenfolge, die den vollqualifizierten Namen des Typs enthält, deren serialisierten Daten zugewiesen werden, die `resourceData` Argument (z. B. `System.String`). Darüber hinaus enthält die Zeichenfolge für Typen, die nicht Teil der .NET Framework-Klassenbibliothek sind, der Name, Version, Kultur und öffentlichen Schlüssel der Assembly, die den Typ enthält. Die folgende Zeichenfolge gibt beispielsweise an, dass die serialisierten Daten mit eine Instanz von darstellt der `Person` Geben Sie in der `Extensions` gefunden wird, in einer Assembly mit dem Namen Hilfsprogramm, das kein öffentlicher Schlüssel und keine anderen festgelegten Kultur verfügt, Version 1.0-Namespace.  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     Vorausgesetzt, dass `resourceData` ist nicht beschädigt und der Quelltyp verfügbar ist, ist `resourceData` konvertiert werden kann aus einem Bytearray zurück auf den ursprünglichen Wert durch die Konvertierung von Byte-Array für eine <xref:System.IO.Stream> -Objekt, und übergeben den Datenstrom an die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>Methode.  
  
-   Die Zeichenfolge verwendet, um den Datentyp in beschreiben die <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> Methodenaufruf.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="resourceName" /> existiert nicht.</exception>
        <exception cref="T:System.BadImageFormatException"><paramref name="resourceName" /> besitzt einen ungültigen Typ.</exception>
        <exception cref="T:System.FormatException">Die abgerufenen Ressourcendaten sind beschädigt.</exception>
        <exception cref="T:System.InvalidOperationException">Das aktuelle <see cref="T:System.Resources.ResourceReader" />-Objekt wurde nicht initialisiert, weil es wahrscheinlich geschlossen ist.</exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt zurück.</summary>
        <returns>Ein Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> ist eine explizite schnittstellenimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Resources.ResourceReader>-Instanz in eine <xref:System.Collections.IEnumerable>-Schnittstelle umgewandelt wird. Die empfohlene Vorgehensweise zum Auflisten von Ressourcen in eine RESOURCES-Datei wird zum Aufrufen der <xref:System.Collections.IEnumerator.MoveNext%2A> Methode der <xref:System.Collections.IDictionaryEnumerator> zurückgegebenes Objekt der <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Reader wurde bereits geschlossen, der Zugriff ist nicht möglich.</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die von der <see cref="T:System.Resources.ResourceReader" /> verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Aufrufen von Dispose kann die Ressourcen, die ein, die die <xref:System.Resources.ResourceReader> , für andere Zwecke verschoben werden. Weitere Informationen zu Dispose, finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md).

## Examples  
Im folgenden Codebeispiel durchläuft die Ressourcen einer Datei und gibt alle Schlüssel/Wert-Paare, die sie findet. Dann verwendet der Code theIDisposable.Dispose-Methode zum Herunterfahren der <xref:System.Resources.ResourceReader> und alle von diesem verwendeten Ressourcen freizugeben.

```vb
Imports System
Imports System.Resources
Imports System.Collections

Public Class ReadResources

    Public Shared Sub Main(args() As String)
        ' Create a resource reader for items.resources 
        ' and get an enumerator to iterate through the file. 
        Dim reader As IResourceReader = New ResourceReader("items.resources")
        Dim en As IDictionaryEnumerator = reader.GetEnumerator()

        ' Iterate through the file, printing the key and value pairs. 
        While en.MoveNext()
            Console.WriteLine()
            Console.WriteLine("Name: {0}", en.Key)
            Console.WriteLine("Value: {0}", en.Value)
        End While 

        ' Clean up all resources associated with the reader. 
        ' Calling Dispose is equivalent to calling Close.
        reader.Dispose()
    End Sub 

End Class
```

```csharp
using System;
using System.Resources;
using System.Collections;

public class ReadResources 
{
    public static void Main(string[] args) 
    {
        // Create a resource reader for items.resources 
        // and get an enumerator to iterate through the file.
        IResourceReader reader = new ResourceReader("items.resources");
        IDictionaryEnumerator en = reader.GetEnumerator();

        // Iterate through the file, printing the key/value pairs. 
        while (en.MoveNext()) 
        {
            Console.WriteLine();
            Console.WriteLine("Name: {0}", en.Key);
            Console.WriteLine("Value: {0}", en.Value);
        }

        // Clean up all resources associated with the reader. 
        // Calling Dispose is equivalent to calling Close.
        reader.Dispose();
    }
}
```

```cpp
using namespace System;
using namespace System::Resources;
using namespace System::Collections;
int main()
{
   array<String^>^args = Environment::GetCommandLineArgs();

   // Create a resource reader for items.resources 
   // and get an enumerator to iterate through the file.
   IResourceReader^ reader = gcnew ResourceReader( "items.resources" );
   IDictionaryEnumerator^ en = reader->GetEnumerator();

   // Iterate through the file, printing the key/value pairs. 
   while ( en->MoveNext() )
   {
      Console::WriteLine();
      Console::WriteLine( "Name: {0}", en->Key );
      Console::WriteLine( "Value: {0}", en->Value );
   }

   // Clean up all resources associated with the reader. 
   // Calling the destructor is equivalent to calling Close.
   reader->~IResourceReader();
}
```

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="90a9f0f98e3e3dfbb3f2fe73cfa1490c77e01632" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83523650" /></Metadata><TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IEnumerable&#xA;    interface IDisposable&#xA;    interface IResourceReader" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : IDisposable, System.Collections.IEnumerable, System.Resources.IResourceReader" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IDisposable, IEnumerable, IResourceReader" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : IDisposable, System::Collections::IEnumerable, System::Resources::IResourceReader" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IResourceReader&#xA;    interface IEnumerable&#xA;    interface IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Resources.ResourceManager" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="4.1.0.0" To="System.Resources.ResourceManager" ToVersion="4.1.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="4.1.1.0" To="System.Resources.ResourceManager" ToVersion="4.1.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="4.1.2.0" To="System.Resources.ResourceManager" ToVersion="4.1.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Listet die Ressourcen in einer binären Ressourcendatei (.resources) durch Lesen von sequenziellen Ressourcenname-/Wert-Paaren auf.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-class-note](~/includes/untrusted-data-class-note.md)]

 Die <xref:System.Resources.ResourceReader>-Klasse stellt eine Standard Implementierung der <xref:System.Resources.IResourceReader>-Schnittstelle bereit. Eine <xref:System.Resources.ResourceReader>-Instanz stellt entweder eine eigenständige resources-Datei oder eine resources-Datei dar, die in eine Assembly eingebettet ist. Sie wird verwendet, um die Ressourcen in einer resources-Datei aufzulisten und die Name-Wert-Paare abzurufen. Sie unterscheidet sich von der <xref:System.Resources.ResourceManager>-Klasse, die zum Abrufen der angegebenen benannten Ressourcen aus einer resources-Datei verwendet wird, die in eine Assembly eingebettet ist. Die <xref:System.Resources.ResourceManager>-Klasse wird verwendet, um Ressourcen abzurufen, deren Namen im Voraus bekannt sind, während die <xref:System.Resources.ResourceReader> Klasse zum Abrufen von Ressourcen nützlich ist, deren Anzahl oder genaue Namen zum Zeitpunkt der Kompilierung nicht bekannt sind. Beispielsweise kann eine Anwendung eine Ressourcen Datei verwenden, um Konfigurationsinformationen zu speichern, die in Abschnitten und Elementen in einem Abschnitt organisiert sind, wobei die Anzahl der Abschnitte oder Elemente in einem Abschnitt nicht im Voraus bekannt ist. Ressourcen können dann generisch benannt werden (z. b. `Section1`, `Section1Item1`, `Section1Item2`usw.) und mithilfe eines <xref:System.Resources.ResourceReader> Objekts abgerufen werden.  
  
> [!IMPORTANT]
>  Dieser Typ implementiert die <xref:System.IDisposable>-Schnittstelle. Nach Abschluss der Verwendung sollten Sie den Typ entweder direkt oder indirekt löschen. Zum direkten Löschen des Typs rufen Sie seine <xref:System.IDisposable.Dispose%2A>-Methode in einem `try`/`catch`-Block auf. Zum indirekten Löschen verwenden Sie ein Sprachkonstrukt wie `using` (in C#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt „Verwenden eines Objekts, das IDisposable implementiert“ des Themas „Die <xref:System.IDisposable>-Schnittstelle“.  
  
 Weitere Informationen zum Verwenden der <xref:System.Resources.ResourceReader>-Klasse finden Sie in den folgenden Abschnitten:  
  
-   [Instanziieren eines ResourceReader-Objekts](#instantiate)  
  
-   [Auflisten der Ressourcen eines ResourceReader-Objekts](#enumerate)  
  
    -   [Abrufen von Ressourcen mithilfe von iatortionaryenumerator-Eigenschaften](#idictionaryenumerator)  
  
    -   [Abrufen von Ressourcen nach Namen mit getresourcedata](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a>Instanziieren eines ResourceReader-Objekts  
 Bei einer resources-Datei handelt es sich um eine Binärdatei, die von [Resgen. exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)entweder aus einer Textdatei oder aus einer XML. resx-Datei kompiliert wurde. Ein <xref:System.Resources.ResourceReader>-Objekt kann entweder eine eigenständige resources-Datei oder eine resources-Datei darstellen, die in eine Assembly eingebettet wurde.  
  
 Um ein <xref:System.Resources.ResourceReader> Objekt zu instanziieren, das aus einer eigenständigen resources-Datei liest, verwenden Sie den <xref:System.Resources.ResourceReader>-Klassenkonstruktor mit einem Eingabedaten Strom oder einer Zeichenfolge, die den Namen der resources-Datei enthält. Im folgenden Beispiel werden beide Ansätze veranschaulicht. Der erste instanziiert ein <xref:System.Resources.ResourceReader> Objekt, das eine resources-Datei mit dem Namen `Resources1.resources` mit dem Dateinamen darstellt. Die zweite instanziiert ein <xref:System.Resources.ResourceReader> Objekt, das eine resources-Datei mit dem Namen `Resources2.resources` mit einem Stream darstellt, der aus der Datei erstellt wurde.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 Zum Erstellen eines <xref:System.Resources.ResourceReader> Objekts, das eine eingebettete resources-Datei darstellt, instanziieren Sie ein <xref:System.Reflection.Assembly> Objekt aus der Assembly, in die die resources-Datei eingebettet ist. Die <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType>-Methode gibt ein <xref:System.IO.Stream> Objekt zurück, das an den <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>-Konstruktor übergeben werden kann. Im folgenden Beispiel wird ein <xref:System.Resources.ResourceReader>-Objekt instanziiert, das eine eingebettete resources-Datei darstellt.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a>Auflisten der Ressourcen eines ResourceReader-Objekts  
 Um die Ressourcen in einer resources-Datei aufzulisten, nennen Sie die <xref:System.Resources.ResourceReader.GetEnumerator%2A>-Methode, die ein <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>-Objekt zurückgibt. Sie können die `IDictionaryEnumerator.MoveNext`-Methode aufzurufen, um von einer Ressource zum nächsten zu wechseln. Die Methode gibt `false` zurück, wenn alle Ressourcen in der resources-Datei aufgezählt wurden.  
  
> [!NOTE]
>  Obwohl die <xref:System.Resources.ResourceReader>-Klasse die <xref:System.Collections.IEnumerable>-Schnittstelle und die <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType>-Methode implementiert, stellt die <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>-Methode nicht die <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType>-Implementierung bereit. Stattdessen gibt die <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>-Methode ein <xref:System.Collections.IDictionaryEnumerator> Interface-Objekt zurück, das Zugriff auf das Name-Wert-Paar der einzelnen Ressourcen bietet.  
  
 Die einzelnen Ressourcen in der Sammlung können auf zwei Arten abgerufen werden:  
  
-   Sie können jede Ressource in der <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> Auflistung durchlaufen und <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> Eigenschaften verwenden, um den Ressourcennamen und-Wert abzurufen. Diese Vorgehensweise wird empfohlen, wenn alle Ressourcen denselben Typ haben oder Sie den Datentyp der einzelnen Ressourcen kennen.  
  
-   Sie können den Namen der einzelnen Ressourcen abrufen, wenn Sie die <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> Auflistung durchlaufen, und die <xref:System.Resources.ResourceReader.GetResourceData%2A>-Methode aufrufen, um die Daten der Ressource abzurufen. Diese Vorgehensweise wird empfohlen, wenn Sie den Datentyp der einzelnen Ressourcen nicht kennen oder wenn der vorherige Ansatz Ausnahmen auslöst.  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a>Abrufen von Ressourcen mithilfe von iatortionaryenumerator-Eigenschaften  
 Die erste Methode zum Auflisten der Ressourcen in einer resources-Datei umfasst das direkte Abrufen des Name-Wert-Paars der einzelnen Ressourcen. Nachdem Sie die `IDictionaryEnumerator.MoveNext`-Methode aufgerufen haben, um zu jeder Ressource in der Auflistung zu wechseln, können Sie den Ressourcennamen aus der Eigenschaft <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> und den Ressourcen Daten aus der Eigenschaft <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> abrufen.  
  
 Im folgenden Beispiel wird gezeigt, wie der Name und der Wert der einzelnen Ressourcen in einer resources-Datei mithilfe der Eigenschaften <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> und <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> abgerufen werden. Um das Beispiel auszuführen, erstellen Sie die folgende Textdatei mit dem Namen "applicationresources. txt", um Zeichen folgen Ressourcen zu definieren.  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 Anschließend können Sie die Textressourcen Datei mithilfe des folgenden Befehls in eine Binärdatei mit dem Namen applicationresources. Resources konvertieren:  
  
 **Resgen applicationresources. txt**  
  
 Im folgenden Beispiel wird dann die <xref:System.Resources.ResourceReader>-Klasse verwendet, um jede Ressource in der eigenständigen Binary. resources-Datei aufzulisten und den Schlüsselnamen und den entsprechenden Wert anzuzeigen.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 Der Versuch, Ressourcen Daten aus der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>-Eigenschaft abzurufen, kann die folgenden Ausnahmen auslösen:  
  
-   Eine <xref:System.FormatException>, wenn die Daten nicht im erwarteten Format vorliegen.  
  
-   Eine <xref:System.IO.FileNotFoundException>, wenn die Assembly, die den Typ enthält, zu dem die Daten gehören, nicht gefunden werden kann.  
  
-   Eine <xref:System.TypeLoadException>, wenn der Typ, zu dem die Daten gehören, nicht gefunden werden kann.  
  
 Normalerweise werden diese Ausnahmen ausgelöst, wenn die resources-Datei manuell geändert wurde, wenn die Assembly, in der ein Typ definiert ist, entweder nicht in einer Anwendung enthalten ist oder versehentlich gelöscht wurde, oder wenn die Assembly eine ältere Version ist, die einen Typ voranstellt. Wenn eine dieser Ausnahmen ausgelöst wird, können Sie Ressourcen abrufen, indem Sie die einzelnen Ressourcen aufzählen und die <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode aufrufen, wie im folgenden Abschnitt gezeigt. Diese Vorgehensweise bietet Ihnen einige Informationen über den Datentyp, der von der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> Eigenschaft zurückgegeben wurde.  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a>Abrufen von Ressourcen nach Namen mit getresourcedata  
 Der zweite Ansatz zum Auflisten von Ressourcen in einer resources-Datei umfasst auch das Navigieren durch die Ressourcen in der Datei durch Aufrufen der `IDictionaryEnumerator.MoveNext`-Methode. Für jede Ressource rufen Sie den Namen der Ressource aus der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>-Eigenschaft ab, die dann an die <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29>-Methode weitergegeben wird, um die Daten der Ressource abzurufen. Dies wird als Bytearray im `resourceData` Argument zurückgegeben.  
  
 Diese Vorgehensweise ist schwieriger als das Abrufen des Ressourcen namens und-Werts aus den Eigenschaften <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> und <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>, da die eigentlichen Bytes zurückgegeben werden, die den Ressourcen Wert bilden. Wenn der Versuch zum Abrufen der Ressource jedoch eine Ausnahme auslöst, kann die <xref:System.Resources.ResourceReader.GetResourceData%2A> Methode helfen, die Quelle der Ausnahme zu identifizieren, indem Informationen zum Datentyp der Ressource bereitgestellt werden. Weitere Informationen über die Zeichenfolge, die den Datentyp der Ressource angibt, finden Sie unter <xref:System.Resources.ResourceReader.GetResourceData%2A>.  
  
 Im folgenden Beispiel wird veranschaulicht, wie diese Methode zum Abrufen von Ressourcen und zum behandeln ausgelösten Ausnahmen verwendet wird. Er erstellt Programm gesteuert eine binäre RESOURCES-Datei, die vier Zeichen folgen, einen booleschen Wert, eine ganze Zahl, eine Bitmap und ein benutzerdefiniertes `DateTimeTZI` Objekt enthält. Gehen Sie folgendermaßen vor, um das Beispiel auszuführen:  
  
1.  Erstellen Sie eine Assembly mit dem Namen Library. dll, die die `DateTimeTZI` Struktur enthält. Im folgenden finden Sie den Quellcode für die Assembly.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     Kompilieren Sie den Quellcode in C# mit dem folgenden Befehl:  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     Oder Sie können Sie in Visual Basic kompilieren, indem Sie den folgenden Befehl verwenden:  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  Kompilieren Sie den folgenden Quellcode, und führen Sie ihn aus, der eine resources-Datei mit dem Namen contactresources. resources erstellt.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     Der Name der Quell Code Datei lautet CreateResources.cs. Sie können ihn mit dem C# folgenden Befehl in kompilieren:  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     Oder Sie können Sie in Visual Basic kompilieren, indem Sie den folgenden Befehl verwenden:  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  Kompilieren Sie den folgenden Code, und führen Sie ihn aus, um die Ressourcen in der Datei contactresources. Resources aufzuzählen.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     Nachdem Sie den Quellcode geändert haben (z. b. durch das absichtliche Auslösen einer <xref:System.FormatException> am Ende des `try` Blocks) oder indem Sie die Assembly. dll-Assembly so umbenennen, dass Sie zur Laufzeit nicht verfügbar ist, können Sie das Beispiel ausführen, um zu erfahren, wie Sie mithilfe von Aufrufen von <xref:System.Resources.ResourceReader.GetResourceData%2A> Ressourcen Informationen abrufen oder wiederherstellen können.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Resources.ResourceReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[https://login.microsoftonline.com/consumers/]([!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]).
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : System.IO.Stream -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Der Eingabedatenstrom zum Lesen von Ressourcen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceReader" />-Klasse für den angegebenen Stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>-Konstruktor instanziiert ein <xref:System.Resources.ResourceReader> Objekt, das Ressourcen aus einer eigenständigen resources-Datei oder aus einer resources-Datei, die in eine Assembly eingebettet ist, abruft. Zum Lesen aus einer eigenständigen resources-Datei instanziieren Sie ein <xref:System.IO.Stream>-Objekt und übergeben es an den <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>-Konstruktor. Um aus einer eingebetteten resources-Datei zu lesen, müssen Sie die <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType>-Methode mit dem Namen der resources-Datei unter Berücksichtigung von Groß-/Kleinschreibung aufzurufen und das zurückgegebene <xref:System.IO.Stream> Objekt an den <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>-Konstruktor übergeben.  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
## Examples  
 Im Beispiel in diesem Abschnitt wird die folgende txt-Datei mit dem Namen `PatientForm.txt` verwendet, um die von einer Anwendung verwendeten Ressourcen zu definieren.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 Sie können die txt-Datei in eine resources-Datei kompilieren, indem Sie den folgenden Befehl ausgeben:  
  
 **Resgen patientform. txt**  
  
 Im folgenden Beispiel wird davon ausgegangen, dass die Ressourcen Datei in die Assembly eingebettet ist, die den ausführbaren Code der Anwendung enthält. Er ruft eine Ressourcen Datei mit dem Namen `PatientForm.resources` aus den aktuell ausgeführten Assemblys ab und zeigt den Namen und den Wert der einzelnen Ressourcen an.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 Wenn das C# Beispiel mit dem Namen `Example.cs`benannt wird, können Sie es mit dem folgenden Befehl kompilieren:  
  
 **CSC example.cs/res: patientform. Resources**  
  
 Wenn das Visual Basic Beispiel `Example.vb`genannt wird, können Sie es mit dem folgenden Befehl kompilieren:  
  
 **Vbc-Beispiel. vb/res: patientform. Resources**  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="stream" />-Parameter ist nicht lesbar.</exception>
        <exception cref="T:System.ArgumentNullException">Der Parameter <paramref name="stream" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Beim Zugriff auf <paramref name="stream" /> ist ein E/A-Fehler aufgetreten.</exception>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : string -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Pfad und der Name der zu lesenden Ressourcen-Datei. Bei <c>filename</c> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceReader" />-Klasse für die angegebene benannten Ressourcendatei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Resources.ResourceReader.%23ctor%28System.String%29>-Konstruktor instanziiert ein <xref:System.Resources.ResourceReader> Objekt, das Ressourcen aus einer eigenständigen resources-Datei abruft. Um Ressourcen aus einer eingebetteten resources-Datei abzurufen, verwenden Sie den <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>-Konstruktor.  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]

## Examples  
 Im Beispiel in diesem Abschnitt wird die folgende txt-Datei mit dem Namen `PatientForm.txt` verwendet, um die von einer Anwendung verwendeten Ressourcen zu definieren.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 Sie können diese txt-Datei in eine resources-Datei kompilieren, indem Sie den folgenden Befehl ausgeben:  
  
 **Resgen patientform. txt**  
  
 Im folgenden Beispiel werden die Ressourcen in `PatientForm.resources` aufgelistet und der Name und der Wert der einzelnen Werte angezeigt.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Parameter <paramref name="fileName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Die Datei kann nicht gefunden werden.</exception>
        <exception cref="T:System.IO.IOException">Ein E/A-Fehler ist aufgetreten.</exception>
        <exception cref="T:System.BadImageFormatException">Die Ressourcendatei weist ein ungültiges Format auf. Zum Beispiel kann die Länge der Datei 0 (null) sein.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="resourceReader.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle diesem <see cref="T:System.Resources.ResourceReader" />-Objekt zugeordneten Ressourcen des Betriebssystems frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.Close%2A> können sicher mehrmals aufgerufen werden.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Ressourcen einer Datei durchlaufen, und alle gefundenen Schlüssel-Wert-Paare werden angezeigt. Der Code verwendet dann die <xref:System.Resources.ResourceReader.Close%2A>-Methode, um den <xref:System.Resources.ResourceReader> zu beenden und alle von ihm verwendeten Ressourcen freizugeben.  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="resourceReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Resources.ResourceReader" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie diese Instanz von <xref:System.Resources.ResourceReader>nicht mehr benötigen, können Sie <xref:System.Resources.ResourceReader.Dispose%2A> abrufen, um alle von dieser Instanz verwendeten Ressourcen freizugeben. Sie sollten weitere Verweise auf diese <xref:System.Resources.ResourceReader> Instanz entfernen, damit die Garbage Collector den Speicher der Instanz freigeben kann, anstatt Sie für die Beendigung aufrechtzuerhalten.  
  
 <xref:System.Resources.ResourceReader.Dispose%2A> Ruft die private verwerfen (Boolean)-Methode auf, die den Code zum Freigeben von verwalteten und nicht verwalteten Ressourcen enthält. Weitere Informationen finden Sie unter [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionaryEnumerator ^ GetEnumerator();" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt zurück.</summary>
        <returns>Ein Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel listet Sie Ressourcen auf, indem Sie die <xref:System.Resources.ResourceReader.GetEnumerator%2A>-Methode aufrufen und dann wiederholt die <xref:System.Collections.IEnumerator.MoveNext%2A>-Methode für das zurückgegebene <xref:System.Collections.IDictionaryEnumerator> Objekt aufrufen, bis die Methode `false`zurückgibt. Der Ressourcen Name ist in der <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>-Eigenschaft verfügbar. der Wert aus der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>-Eigenschaft. Das Beispiel veranschaulicht, wie Ressourcen auf diese Weise aufgelistet werden.  
  
 Die Implementierung der <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>-Eigenschaft durch die <xref:System.Resources.ResourceReader>-Klasse kann die folgenden Ausnahmen auslösen:  
  
-   <xref:System.IO.FileNotFoundException>  
  
     Die Assembly, die den Typ enthält, zu dem die Daten gehören, kann nicht gefunden werden.  
  
-   <xref:System.FormatException>  
  
     Die Daten haben nicht das erwartete Format.  
  
-   <xref:System.TypeLoadException>  
  
     Der Typ, zu dem die Daten gehören, kann nicht gefunden werden.  
  
 Sie können die Ausnahme behandeln, indem Sie die <xref:System.Resources.ResourceReader.GetResourceData%2A>-Methode aufrufen, um Informationen über den Datentyp und das Bytearray abzurufen, das der benannten Ressource zugewiesen ist. Weitere Informationen finden Sie im Abschnitt "Abrufen von Ressourcen nach Name mit getresourcedata" im Thema <xref:System.Resources.ResourceReader>-Klasse.  
  
> [!IMPORTANT]
>  Die <xref:System.Resources.ResourceReader>-Klasse enthält zwei Methoden, die Enumeratoren zurückgeben. Die <xref:System.Resources.ResourceReader.GetEnumerator%2A>-Methode gibt ein <xref:System.Collections.IDictionaryEnumerator> Interface-Objekt zurück und ist die empfohlene Methode, die beim Auflisten von Ressourcen aufgerufen werden soll.  
  
   
  
## Examples  
 Im Beispiel in diesem Abschnitt wird die folgende txt-Datei mit dem Namen `PatientForm.txt` verwendet, um die von einer Anwendung verwendeten Ressourcen zu definieren.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 Sie können die txt-Datei in eine resources-Datei kompilieren, indem Sie den folgenden Befehl ausgeben:  
  
 **Resgen patientform. txt**  
  
 Im folgenden Beispiel werden die Ressourcen in `PatientForm.resources` aufgelistet und der Name und der Wert der einzelnen Werte angezeigt.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Reader wurde geschlossen oder freigegeben, der Zugriff ist daher nicht möglich.</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberSignature Language="F#" Value="member this.GetResourceData : string * string * Byte[] -&gt; unit" Usage="resourceReader.GetResourceData (resourceName, resourceType, resourceData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resourceType" Type="System.String" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resourceData" Type="System.Byte[]" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="resourceName">Der Name einer Ressource.</param>
        <param name="resourceType">Diese Methode gibt eine Zeichenfolge zurück, die den Typnamen der abgerufenen Ressource darstellt. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <param name="resourceData">Wenn diese Methode beendet wird, enthält sie ein Bytearray, das die Binärdarstellung des abgerufenen Typs ist. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Ruft den Typnamen und die Daten einer benannten Ressource aus einer geöffneten Ressourcendatei oder einem geöffneten Datenstrom ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceReader.GetResourceData%2A>-Methode ruft den Wert einer benannten Ressource als Bytearray ab. Sie wird normalerweise verwendet, wenn die <xref:System.Collections.IDictionaryEnumerator.Value%2A>-Eigenschaft eine Ausnahme auslöst, wenn Sie versucht, den Wert einer Ressource abzurufen.  
  
 `resourceType` ist eine Zeichenfolge, die den Datentyp der Ressource darstellt. Dabei kann es sich um einen der folgenden Werte handeln:  
  
-   Die Zeichen folgen Darstellung eines `ResourceTypeCode` Enumerationsmembers, der den Datentyp der Ressource angibt. `ResourceTypeCode` ist eine private Enumeration, die von verwendet wird. damit wird angegeben, dass ein spezielles Binärformat verwendet wird, um einen von 19 allgemeinen Datentypen zu speichern. Hierzu gehören die .NET Framework Grund Datentypen (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>) sowie <xref:System.String>, <xref:System.DateTime>und <xref:System.TimeSpan>. Außerdem enthält die `ResourceTypeCode`-Enumeration die Werte, die in der folgenden Tabelle aufgeführt sind.  
  
    |Resourcetypeer Code-Wert|BESCHREIBUNG|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|Bei den Daten handelt es sich um ein Bytearray. Dieser Datentyp ergibt sich normalerweise aus dem aufzurufenden <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType>-Methode.|  
    |`ResourceTypeCode.Null`|Bei den Daten handelt es sich um einen NULL-Verweis. Dieser Datentyp ergibt sich häufig aus dem aufzurufenden <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType>-Methode mit einem Objekt, dessen Wert `null`ist.|  
    |`ResourceTypeCode.Stream`|Die Daten werden in einem Stream gespeichert. Dieser Datentyp ergibt sich normalerweise aus dem aufzurufenden <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> oder <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> Methode.|  
  
     Wenn `resourceData` nicht beschädigt wurde, kann er normalerweise durch Aufrufen einer <xref:System.BitConverter>-oder <xref:System.IO.BinaryReader>-Methode von einem Bytearray zurück in seinen ursprünglichen Wert konvertiert werden.  
  
-   Eine Zeichenfolge, die den voll qualifizierten Namen des Typs enthält, dessen serialisierte Daten dem `resourceData`-Argument zugewiesen werden (z. b. `System.String`). Außerdem enthält die Zeichenfolge für Typen, die nicht Teil der .NET Framework-Klassenbibliothek sind, den Namen, die Version, die Kultur und den öffentlichen Schlüssel der Assembly, die den Typ enthält. Beispielsweise gibt die folgende Zeichenfolge an, dass die serialisierten Daten eine Instanz des `Person` Typs im `Extensions`-Namespace darstellen, der in Version 1,0 einer Assembly namens Utility gefunden wird, die über keinen öffentlichen Schlüssel und keine festgelegte Kultur verfügt.  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     Wenn `resourceData` nicht beschädigt wurde und der Quelltyp verfügbar ist, können `resourceData` von einem Bytearray zurück in seinen ursprünglichen Wert konvertiert werden, indem das Bytearray in ein <xref:System.IO.Stream> Objekt konvertiert und der Datenstrom an die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>-Methode übergeben wird.  
  
-   Die Zeichenfolge, die verwendet wird, um den Datentyp im <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> Methoden aufzurufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceName" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="resourceName" /> existiert nicht.</exception>
        <exception cref="T:System.BadImageFormatException"><paramref name="resourceName" /> besitzt einen ungültigen Typ.</exception>
        <exception cref="T:System.FormatException">Die abgerufenen Ressourcendaten sind beschädigt.</exception>
        <exception cref="T:System.InvalidOperationException">Das aktuelle <see cref="T:System.Resources.ResourceReader" />-Objekt wurde nicht initialisiert, weil es wahrscheinlich geschlossen ist.</exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="resourceReader.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt zurück.</summary>
        <returns>Ein Enumerator für dieses <see cref="T:System.Resources.ResourceReader" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> ist eine explizite Schnittstellen Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Resources.ResourceReader>-Instanz in eine <xref:System.Collections.IEnumerable>-Schnittstelle umgewandelt wird. Die empfohlene Vorgehensweise zum Auflisten der Ressourcen in einer resources-Datei besteht darin, die <xref:System.Collections.IEnumerator.MoveNext%2A>-Methode des <xref:System.Collections.IDictionaryEnumerator> Objekts aufzurufen, das von der <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>-Methode zurückgegeben wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Reader wurde bereits geschlossen, der Zugriff ist nicht möglich.</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="resourceReader.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die von <see cref="T:System.Resources.ResourceReader" /> verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Durch den Aufruf von "verwerfen" können die Ressourcen, die von der <xref:System.Resources.ResourceReader> verwendet werden, für andere Zwecke neu zugewiesen werden Weitere Informationen zu verwerfen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md).

## Examples  
Im folgenden Codebeispiel werden die Ressourcen einer Datei durchlaufen, und alle gefundenen Schlüssel-Wert-Paare werden gedruckt. Der Code verwendet dann die theiverwerf. verwerfen-Methode, um die <xref:System.Resources.ResourceReader> herunterzufahren und alle von ihr verwendeten Ressourcen freizugeben.

```vb
Imports System
Imports System.Resources
Imports System.Collections

Public Class ReadResources

    Public Shared Sub Main(args() As String)
        ' Create a resource reader for items.resources 
        ' and get an enumerator to iterate through the file. 
        Dim reader As IResourceReader = New ResourceReader("items.resources")
        Dim en As IDictionaryEnumerator = reader.GetEnumerator()

        ' Iterate through the file, printing the key and value pairs. 
        While en.MoveNext()
            Console.WriteLine()
            Console.WriteLine("Name: {0}", en.Key)
            Console.WriteLine("Value: {0}", en.Value)
        End While 

        ' Clean up all resources associated with the reader. 
        ' Calling Dispose is equivalent to calling Close.
        reader.Dispose()
    End Sub 

End Class
```

```csharp
using System;
using System.Resources;
using System.Collections;

public class ReadResources 
{
    public static void Main(string[] args) 
    {
        // Create a resource reader for items.resources 
        // and get an enumerator to iterate through the file.
        IResourceReader reader = new ResourceReader("items.resources");
        IDictionaryEnumerator en = reader.GetEnumerator();

        // Iterate through the file, printing the key/value pairs. 
        while (en.MoveNext()) 
        {
            Console.WriteLine();
            Console.WriteLine("Name: {0}", en.Key);
            Console.WriteLine("Value: {0}", en.Value);
        }

        // Clean up all resources associated with the reader. 
        // Calling Dispose is equivalent to calling Close.
        reader.Dispose();
    }
}
```

```cpp
using namespace System;
using namespace System::Resources;
using namespace System::Collections;
int main()
{
   array<String^>^args = Environment::GetCommandLineArgs();

   // Create a resource reader for items.resources 
   // and get an enumerator to iterate through the file.
   IResourceReader^ reader = gcnew ResourceReader( "items.resources" );
   IDictionaryEnumerator^ en = reader->GetEnumerator();

   // Iterate through the file, printing the key/value pairs. 
   while ( en->MoveNext() )
   {
      Console::WriteLine();
      Console::WriteLine( "Name: {0}", en->Key );
      Console::WriteLine( "Value: {0}", en->Value );
   }

   // Clean up all resources associated with the reader. 
   // Calling the destructor is equivalent to calling Close.
   reader->~IResourceReader();
}
```

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

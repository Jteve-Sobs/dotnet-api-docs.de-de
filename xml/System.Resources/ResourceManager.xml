<Type Name="ResourceManager" FullName="System.Resources.ResourceManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="692563aa6d92481417bd478c268265e6eafe07b8" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73390187" /></Metadata><TypeSignature Language="C#" Value="public class ResourceManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ResourceManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ResourceManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceManager" />
  <TypeSignature Language="F#" Value="type ResourceManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-1.0;netstandard-1.1;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6">
      <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Ressourcen-Manager dar, der einfachen Zugriff auf kulturabhängige Ressourcen zur Laufzeit ermöglicht.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-class-note](~/includes/untrusted-data-class-note.md)]

 Die <xref:System.Resources.ResourceManager>-Klasse ruft Ressourcen aus einer binären resources-Datei ab, die in eine Assembly oder aus einer eigenständigen resources-Datei eingebettet ist. Wenn eine APP lokalisiert wurde und lokalisierte Ressourcen in [Satellitenassemblys](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)bereitgestellt wurden, sucht Sie nach Kultur abhängigen Ressourcen, bietet einen Ressourcen Fall Back, wenn keine lokalisierte Ressource vorhanden ist, und unterstützt die Ressourcenserialisierung.  
  
 Weitere Informationen zum Erstellen und Verwalten von Ressourcen in Desktop-Apps und [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-apps finden Sie in den folgenden Abschnitten:  
  
-   [Desktop-Apps](#desktop)  
  
    -   [Erstellen von Ressourcen](#creating_resources)  
  
    -   [Instanziieren eines ResourceManager-Objekts](#instantiating)  
  
    -   [ResourceManager und kulturspezifische Ressourcen](#CultureSpecific)  
  
    -   [Abrufen von Ressourcen](#retrieving)  
  
    -   [Behandeln von MissingManifestResourceException-und MissingSatelliteAssemblyException-Ausnahmen](#exception)  
  
    -   [Ressourcen Versionsverwaltung](#versioning)  
  
    -   [\<satelliteassemblys > Konfigurationsdatei Knoten](#config)  
  
-   [Windows Store-Apps](#ws)  
  
<a name="desktop"></a>   
## <a name="desktop-apps"></a>Desktop-Apps  
 Bei Desktop-Apps Ruft die <xref:System.Resources.ResourceManager>-Klasse Ressourcen aus binären Ressourcen Dateien (. Resources) ab. In der Regel bettet ein sprach Compiler oder der [Assembly Linker (Al. exe)](~/docs/framework/tools/al-exe-assembly-linker.md) diese Ressourcen Dateien in eine Assembly ein. Sie können ein <xref:System.Resources.ResourceManager> Objekt auch verwenden, um Ressourcen direkt aus einer resources-Datei abzurufen, die nicht in einer Assembly eingebettet ist, indem Sie die <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A>-Methode aufrufen.  
  
> [!CAUTION]
>  Durch die Verwendung von eigenständigen resources-Dateien in einer ASP.net-APP wird die XCOPY-Bereitstellung beendet, da die Ressourcen gesperrt bleiben, bis Sie explizit durch die <xref:System.Resources.ResourceManager.ReleaseAllResources%2A>-Methode freigegeben werden Wenn Sie Ressourcen mit Ihren ASP.net-apps bereitstellen möchten, sollten Sie Ihre resources-Dateien in Satellitenassemblys kompilieren.  
  
 In einer ressourcenbasierten app enthält eine resources-Datei die Ressourcen der Standard Kultur, deren Ressourcen verwendet werden, wenn keine kulturspezifischen Ressourcen gefunden werden können. Wenn die Standard Kultur einer App z. b. Englisch (en) ist, werden die englischsprachigen Ressourcen immer dann verwendet, wenn lokalisierte Ressourcen für eine bestimmte Kultur nicht gefunden werden können, z. b. Englisch (USA) (en-US) oder Französisch (Frankreich) (fr-FR). In der Regel werden die Ressourcen für die Standard Kultur in die Hauptassembly der APP eingebettet, und Ressourcen für andere lokalisierte Kulturen werden in Satellitenassemblys eingebettet. Satellitenassemblys enthalten nur Ressourcen. Sie haben den gleichen Stamm Dateinamen wie die Hauptassembly und die Erweiterung ". resources. dll". Für apps, deren Assemblys nicht im globalen Assemblycache registriert sind, werden Satellitenassemblys in einem Unterverzeichnis der APP gespeichert, dessen Name der Kultur der Assembly entspricht.  
  
<a name="creating_resources"></a>   
### <a name="creating-resources"></a>Erstellen von Ressourcen  
 Wenn Sie eine ressourcenbasierte App entwickeln, speichern Sie Ressourcen Informationen in Textdateien (Dateien mit der Erweiterung TXT oder. restext) oder XML-Dateien (Dateien mit der Erweiterung. resx). Anschließend kompilieren Sie die Text-oder XML-Dateien mit dem [Resource File Generator (Resgen. exe)](~/docs/framework/tools/resgen-exe-resource-file-generator.md) , um eine binäre RESOURCES-Datei zu erstellen. Anschließend können Sie die resultierende resources-Datei in eine ausführbare Datei oder Bibliothek einbetten, indem Sie eine-Compileroption wie `/resources` für die C# Compiler-und-Visual Basic verwenden, oder Sie können Sie mithilfe von in eine Satellitenassembly einbetten. Wenn Sie eine RESX-Datei in das Visual Studio-Projekt einschließen, verarbeitet Visual Studio die Kompilierung und Einbettung von standardmäßigen und lokalisierten Ressourcen automatisch als Teil des Buildprozesses.  
  
 Im Idealfall sollten Sie Ressourcen für jede von ihrer App unterstützte Sprache oder zumindest für eine sinnvolle Teilmenge jeder Sprache erstellen. Die Binärdatei der resources-Datei folgt der Benennungs Konvention *baseName*. *cultureName*. Resources, wobei *baseName* der Name der APP oder der Name einer Klasse ist, abhängig von der gewünschten Detailebene. Die <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>-Eigenschaft wird zum Bestimmen von *cultureName*verwendet. Eine Ressource für die Standard Kultur der APP sollte den Namen *baseName*. Resources haben.  
  
 Angenommen, eine Assembly verfügt über mehrere Ressourcen in einer Ressourcen Datei, die den Basis Namen myResources hat. Diese Ressourcen Dateien sollten Namen wie myResources. ja-JP. Resources für die Kultur Japan (Japanisch), myResources. de. Resources für die deutsche Kultur, myResources. zh-CHS. Resources für die vereinfachte chinesische Kultur und MyResources.fr-be. Resources für die Kultur Französisch (Belgien). Die Standard Ressourcen Datei sollte den Namen myResources. Resources haben. Die kulturspezifischen Ressourcen Dateien werden häufig in Satellitenassemblys für jede Kultur verpackt. Die Standard Ressourcen Datei sollte in die Hauptassembly der APP eingebettet werden.  
  
 Beachten Sie [](~/docs/framework/tools/al-exe-assembly-linker.md) , dass der Assemblylinker ermöglicht, dass Ressourcen als privat gekennzeichnet werden, Sie sollten Sie jedoch immer als öffentlich markieren, damit andere Assemblys darauf zugreifen können. (Da eine Satellitenassembly keinen Code enthält, sind Ressourcen, die als privat gekennzeichnet sind, über einen beliebigen Mechanismus für Ihre APP nicht verfügbar.)  
  
 Weitere Informationen zum Erstellen, Verpacken und Bereitstellen von Ressourcen finden Sie in den Artikeln [Erstellen von Ressourcen Dateien](~/docs/framework/resources/creating-resource-files-for-desktop-apps.md), [Erstellen von Satellitenassemblys](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)und [Verpacken und](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)Bereitstellen von Ressourcen.  
  
<a name="instantiating"></a>   
### <a name="instantiating-a-resourcemanager-object"></a>Instanziieren eines ResourceManager-Objekts  
 Sie instanziieren ein <xref:System.Resources.ResourceManager> Objekt, das Ressourcen aus einer eingebetteten resources-Datei abruft, indem es eine seiner klassenkonstruktorüberladungen aufruft. Dadurch wird ein <xref:System.Resources.ResourceManager> Objekt eng mit einer bestimmten resources-Datei und mit zugeordneten lokalisierten RESOURCES-Dateien in Satellitenassemblys verknüpft.  
  
 Die beiden am häufigsten aufgerufenen Konstruktoren sind:  
  
-   <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> sucht Ressourcen basierend auf zwei von Ihnen bereitgestellten Informationen: dem Basis Namen der resources-Datei und der Assembly, in der sich die Datei "default. Resources" befindet. Der Basisname enthält den Namespace und den Stamm Namen der resources-Datei ohne Kultur oder Erweiterung. Beachten Sie, dass resources-Dateien, die über die Befehlszeile kompiliert werden, in der Regel keinen Namespace Namen enthalten, wohingegen resources-Dateien, die in der Visual Studio-Umgebung erstellt werden, dies tun. Wenn eine Ressourcen Datei beispielsweise MyCompany. uningresources. Resources heißt und der <xref:System.Resources.ResourceManager>-Konstruktor von einer statischen Methode namens `Example.Main`aufgerufen wird, instanziiert der folgende Code ein <xref:System.Resources.ResourceManager> Objekt, das Ressourcen aus der resources-Datei abrufen kann:  
  
     [!code-csharp[Conceptual.Resources.Retrieving#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/ctor1.cs#1)]
     [!code-vb[Conceptual.Resources.Retrieving#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/ctor1.vb#1)]  
  
-   <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29> sucht Ressourcen in Satellitenassemblys auf der Grundlage von Informationen aus einem Typobjekt. Der voll qualifizierte Name des Typs entspricht dem Basis Namen der resources-Datei ohne die Dateinamenerweiterung. In Desktop-Apps, die mit dem Visual Studio-Ressourcen-Designer erstellt werden, erstellt Visual Studio eine Wrapper Klasse, deren voll qualifizierter Name dem Stamm Namen der resources-Datei entspricht. Wenn eine Ressourcen Datei z. b. mycompany. straningresources. Resources heißt und eine Wrapper Klasse mit dem Namen `MyCompany.StringResources`vorhanden ist, instanziiert der folgende Code ein <xref:System.Resources.ResourceManager> Objekt, das Ressourcen aus der resources-Datei abrufen kann:  
  
     [!code-csharp[Conceptual.Resources.Retrieving#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/ctor1.cs#2)]
     [!code-vb[Conceptual.Resources.Retrieving#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/ctor1.vb#2)]  
  
 Wenn die entsprechenden Ressourcen nicht gefunden werden können, erstellt der konstruktorbefehl ein gültiges <xref:System.Resources.ResourceManager> Objekt. Der Versuch, eine Ressource abzurufen, löst jedoch eine <xref:System.Resources.MissingManifestResourceException> Ausnahme aus. Weitere Informationen zum Umgang mit der Ausnahme finden Sie weiter unten in diesem Artikel im Abschnitt [Behandeln von MissingManifestResourceException-und missingsatelliteassembly-Ausnahmen](#exception) .  
  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Resources.ResourceManager>-Objekt instanziiert wird. Sie enthält den Quellcode für eine ausführbare Datei mit dem Namen "Showtime. exe". Außerdem ist die folgende Textdatei mit dem Namen Strings. txt enthalten, die eine einzige Zeichen folgen Ressource enthält, `TimeHeader`:  
  
```  
TimeHeader=The current time is  
```  
  
 Sie können eine Batchdatei verwenden, um die Ressourcen Datei zu generieren und in die ausführbare Datei einzubetten. Im folgenden finden Sie die Batchdatei zum Generieren einer ausführbaren C# Datei mithilfe des Compilers:  
  
```  
  
resgen strings.txt  
csc ShowTime.cs /resource:strings.resources  
  
```  
  
 Für den Visual Basic-Compiler können Sie die folgende Batchdatei verwenden:  
  
```  
  
resgen strings.txt  
vbc ShowTime.vb /resource:strings.resources  
  
```  
  
 [!code-csharp[System.Resources.ResourceManager.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showtime.cs#1)]
 [!code-vb[System.Resources.ResourceManager.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showtime.vb#1)]  
  
<a name="CultureSpecific"></a>   
### <a name="resourcemanager-and-culture-specific-resources"></a>ResourceManager und kulturspezifische Ressourcen  
 Für eine lokalisierte App müssen Ressourcen bereitgestellt werden, wie im Artikel [Verpacken und](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)Bereitstellen von Ressourcen erläutert. Wenn die Assemblys ordnungsgemäß konfiguriert sind, bestimmt der Ressourcen-Manager, welche Ressourcen basierend auf der <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft des aktuellen Threads abgerufen werden sollen. (Diese Eigenschaft gibt auch die Benutzeroberflächen Kultur des aktuellen Threads zurück.) Wenn eine APP beispielsweise mit den englischen Standardsprachen Ressourcen in der Hauptassembly und mit französischen und russischen Sprachressourcen in zwei Satellitenassemblys kompiliert wird und die <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft auf fr-FR festgelegt ist, ruft der Ressourcen-Manager die französische verfügt.  
  
 Sie können die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>-Eigenschaft explizit oder implizit festlegen. Die festgelegte Methode bestimmt, wie das <xref:System.Resources.ResourceManager> Objektressourcen basierend auf der Kultur abruft:  
  
-   Wenn Sie die <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft explizit auf eine bestimmte Kultur festlegen, ruft der Ressourcen-Manager die Ressourcen für diese Kultur unabhängig von der Browser-oder Betriebssystem Sprache des Benutzers ab. Angenommen, eine APP wird mit den englischen Standardsprachen Ressourcen und drei Satellitenassemblys mit Ressourcen für Englisch (USA), Französisch (Frankreich) und Russisch (Russische Föderation) zusammengefasst. Wenn die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>-Eigenschaft auf "fr-FR" festgelegt ist, ruft das <xref:System.Resources.ResourceManager> Objekt immer die französischen Ressourcen (Frankreich) ab, selbst wenn die Betriebssystem Sprache des Benutzers nicht Französisch ist. Stellen Sie sicher, dass dies das gewünschte Verhalten ist, bevor Sie die-Eigenschaft explizit festlegen.  
  
     In ASP.net-apps müssen Sie die <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft explizit festlegen, da es unwahrscheinlich ist, dass die Einstellung auf dem Server eingehenden Client Anforderungen entspricht. Eine ASP.net-App kann die <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft explizit auf die Browser Accept-Sprache des Benutzers festlegen.  
  
     Wenn Sie die <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft explizit festlegen, wird die aktuelle Benutzeroberflächen Kultur für diesen Thread definiert. Dies hat keine Auswirkung auf die aktuelle Benutzeroberflächen Kultur anderer Threads in einer App.  
  
-   Sie können die Benutzeroberflächen Kultur für alle Threads in einer APP-Domäne festlegen, indem Sie der Eigenschaft statischer <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> ein <xref:System.Globalization.CultureInfo> Objekt zuweisen, das diese Kultur darstellt.  
  
-   Wenn Sie die aktuelle Benutzeroberflächen Kultur nicht explizit festlegen und keine Standard Kultur für die aktuelle App-Domäne definieren, wird die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft implizit von der Windows `GetUserDefaultUILanguage`-Funktion festgelegt. Diese Funktion wird von der Mi (mehrsprachige Benutzeroberfläche) bereitgestellt, die es dem Benutzer ermöglicht, die Standardsprache festzulegen. Wenn die Benutzeroberflächen Sprache nicht vom Benutzer festgelegt wird, wird standardmäßig die System installierte Sprache verwendet. Dies ist die Sprache der Betriebssystemressourcen.  
  
 Im folgenden einfachen "Hello World"-Beispiel wird die aktuelle Benutzeroberflächen Kultur explizit festgelegt. Sie enthält Ressourcen für drei Kulturen: Englisch (USA) oder en-US, Französisch (Frankreich), fr-FR und Russisch (Russische Föderation) oder ru-ru. Die en-US-Ressourcen sind in einer Textdatei mit dem Namen "Greetings. txt" enthalten:  
  
```  
HelloString=Hello world!  
```  
  
 Die fr-FR-Ressourcen sind in einer Textdatei mit dem Namen Greetings.fr-fr. txt enthalten:  
  
```  
HelloString=Salut tout le monde!  
```  
  
 Die ru-ru-Ressourcen sind in einer Textdatei mit dem Namen "Greetings.ru-ru. txt" enthalten:  
  
```  
HelloString=Всем привет!  
```  
  
 Hier ist der Quellcode für das Beispiel (z. b. vb für die Visual Basic Version oder example.cs für C# die Version):  
  
 [!code-csharp[Conceptual.Resources.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.currentculture/cs/example.cs#1)]
 [!code-vb[Conceptual.Resources.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.currentculture/vb/example.vb#1)]  
  
 Um dieses Beispiel zu kompilieren, erstellen Sie eine Batchdatei (bat-Datei), die die folgenden Befehle enthält, und führen Sie Sie von der Eingabeaufforderung aus. Wenn Sie verwenden C#, geben Sie `csc` anstelle von `vbc` und `Example.cs` anstelle von `Example.vb`an.  
  
```  
resgen Greetings.txt   
vbc Example.vb /resource:Greetings.resources  
  
resgen Greetings.fr-FR.txt  
Md fr-FR  
al /embed:Greetings.fr-FR.resources /culture:fr-FR /out:fr-FR\Example.resources.dll  
  
resgen Greetings.ru-RU.txt  
Md ru-RU  
al /embed:Greetings.ru-RU.resources /culture:ru-RU /out:ru-RU\Example.resources.dll  
```  
  
<a name="retrieving"></a>   
### <a name="retrieving-resources"></a>Abrufen von Ressourcen  
 Sie können die Methoden <xref:System.Resources.ResourceManager.GetObject%28System.String%29> und <xref:System.Resources.ResourceManager.GetString%28System.String%29> aufrufen, um auf eine bestimmte Ressource zuzugreifen. Sie können auch die <xref:System.Resources.ResourceManager.GetStream%28System.String%29>-Methode aufrufen, um nicht-Zeichen folgen Ressourcen als Bytearray abzurufen. Standardmäßig geben diese Methoden in einer APP, die über lokalisierte Ressourcen verfügt, die Ressource für die Kultur zurück, die durch die aktuelle Benutzeroberflächen Kultur des Threads bestimmt wird, der den-Befehl durchgeführt hat. Weitere Informationen zur Definition der aktuellen Benutzeroberflächen Kultur eines Threads finden Sie im vorherigen Abschnitt [ResourceManager und kulturspezifische Ressourcen](#CultureSpecific). Wenn der Ressourcen-Manager die Ressource für die Benutzeroberflächen Kultur des aktuellen Threads nicht finden kann, verwendet er einen Fall Backprozess zum Abrufen der angegebenen Ressource. Wenn der Ressourcen-Manager keine lokalisierten Ressourcen finden kann, verwendet er die Ressourcen der Standard Kultur. Weitere Informationen zu Ressourcen Fall Back Regeln finden Sie im Abschnitt "Ressourcen Fall Back-Prozess" im Artikel [Verpacken und](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)Bereitstellen von Ressourcen.  
  
> [!NOTE]
>  Wenn die im <xref:System.Resources.ResourceManager>-Klassenkonstruktor angegebene resources-Datei nicht gefunden werden kann, löst der Versuch, eine Ressource abzurufen, eine <xref:System.Resources.MissingManifestResourceException> oder <xref:System.Resources.MissingSatelliteAssemblyException> Ausnahme aus. Weitere Informationen zum Umgang mit der Ausnahme finden Sie im Abschnitt [Behandlung von MissingManifestResourceException und MissingSatelliteAssemblyException](#exception) weiter unten in diesem Thema.  
  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceManager.GetString%2A>-Methode verwendet, um kulturspezifische Ressourcen abzurufen. Es besteht aus Ressourcen, die aus txt-Dateien für die Kulturen Englisch (en), Französisch (Frankreich) (fr-FR) und Russisch (Russland) (ru-ru) kompiliert wurden. Im Beispiel wird die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur in Englisch (USA), Französisch (Frankreich), Russisch (Russische Föderation) und Schwedisch (Schweden) geändert. Anschließend wird die <xref:System.Resources.ResourceManager.GetString%2A>-Methode aufgerufen, um die lokalisierte Zeichenfolge abzurufen, die zusammen mit dem aktuellen Tag und Monat angezeigt wird. Beachten Sie, dass die Ausgabe die entsprechende lokalisierte Zeichenfolge anzeigt, es sei denn, die aktuelle Benutzeroberflächen Kultur ist Schwedisch (Sweden). Da die schwedischen Sprachressourcen nicht verfügbar sind, verwendet die APP stattdessen die Ressourcen der Standard Kultur (Englisch).  
  
 Das Beispiel erfordert die textbasierten Ressourcen Dateien, die in der folgenden Tabelle aufgeführt sind. Jede verfügt über eine einzelne Zeichen folgen Ressource mit dem Namen `DateStart`.  
  
|culture|Dateiname|Ressourcenname|Ressourcenwert|  
|-------------|---------------|-------------------|--------------------|  
|en-US|Datestrings. txt|`DateStart`|Heute ist|  
|fr-FR|DateStrings.fr-fr. txt|`DateStart`|Aujourd Hui, c/c|  
|ru-RU|DateStrings.ru-ru. txt|`DateStart`|In der|  
  
 Im folgenden finden Sie den Quellcode für das Beispiel (showdate. vb für die Visual Basic Version oder ShowDate.cs für C# die Version des Codes).  
  
 [!code-csharp[System.Resources.ResourceManager.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate.cs#2)]
 [!code-vb[System.Resources.ResourceManager.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate.vb#2)]  
  
 Um dieses Beispiel zu kompilieren, erstellen Sie eine Batchdatei, die die folgenden Befehle enthält, und führen Sie Sie von der Eingabeaufforderung aus. Wenn Sie verwenden C#, geben Sie `csc` anstelle von `vbc` und `showdate.cs` anstelle von `showdate.vb`an.  
  
```  
  
resgen DateStrings.txt  
vbc showdate.vb /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
  
```  
  
 Es gibt zwei Möglichkeiten, die Ressourcen einer bestimmten Kultur als der aktuellen Benutzeroberflächen Kultur abzurufen:  
  
-   Sie können die <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>-, <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29>-oder <xref:System.Resources.ResourceManager.GetStream%28System.String%2CSystem.Globalization.CultureInfo%29>-Methode aufrufen, um eine Ressource für eine bestimmte Kultur abzurufen. Wenn eine lokalisierte Ressource nicht gefunden werden kann, verwendet der Ressourcen-Manager den Ressourcen Fall Backprozess, um eine entsprechende Ressource zu suchen.  
  
-   Sie können die <xref:System.Resources.ResourceManager.GetResourceSet%2A>-Methode zum Abrufen eines <xref:System.Resources.ResourceSet> Objekts, das die Ressourcen für eine bestimmte Kultur darstellt, abrufen. Im Methoden Befehl können Sie bestimmen, ob der Ressourcen-Manager für übergeordnete Kulturen prüft, wenn keine lokalisierten Ressourcen gefunden werden können, oder ob er einfach auf die Ressourcen der Standard Kultur zurückgreift. Anschließend können Sie die <xref:System.Resources.ResourceSet>-Methoden verwenden, um über den Namen auf die Ressourcen (lokalisiert für diese Kultur) zuzugreifen oder um die Ressourcen im Satz aufzulisten.  
  
<a name="exception"></a>   
### <a name="handling-missingmanifestresourceexception-and-missingsatelliteassemblyexception-exceptions"></a>Behandeln von MissingManifestResourceException-und MissingSatelliteAssemblyException-Ausnahmen  
 Wenn Sie versuchen, eine bestimmte Ressource abzurufen, aber der Ressourcen-Manager diese Ressource nicht findet und entweder keine Standard Kultur definiert wurde oder die Ressourcen der Standard Kultur nicht gefunden werden können, löst der Ressourcen-Manager eine <xref:System.Resources.MissingManifestResourceException> Ausnahme aus, wenn dies erwartet. Suchen Sie die Ressourcen in der Hauptassembly oder eine <xref:System.Resources.MissingSatelliteAssemblyException>, wenn die Ressourcen in einer Satellitenassembly gefunden werden sollen. Beachten Sie, dass die Ausnahme ausgelöst wird, wenn Sie eine Ressourcen Abruf Methode, z. b. <xref:System.Resources.ResourceManager.GetString%2A> oder <xref:System.Resources.ResourceManager.GetObject%2A>, und nicht beim Instanziieren eines <xref:System.Resources.ResourceManager> Objekts aufruft.  
  
 Die Ausnahme wird in der Regel unter den folgenden Bedingungen ausgelöst:  
  
-   Die entsprechende Ressourcen Datei oder Satellitenassembly ist nicht vorhanden. Wenn der Ressourcen-Manager erwartet, dass die Standard Ressourcen der app in die Haupt-App-Assembly eingebettet werden, sind Sie nicht vorhanden. Wenn das <xref:System.Resources.NeutralResourcesLanguageAttribute> Attribut angibt, dass sich die Standard Ressourcen der app in einer Satellitenassembly befinden, kann diese Assembly nicht gefunden werden. Wenn Sie die APP kompilieren, stellen Sie sicher, dass die Ressourcen in die Hauptassembly eingebettet sind oder dass die erforderliche Satellitenassembly generiert wird und entsprechend benannt wird. Der Name sollte das Format " *appname*. resources. dll" aufweisen, und es sollte sich in einem Verzeichnis befinden, das nach der Kultur, in der es enthalten ist, benannt wird.  
  
-   Für Ihre APP ist keine standardmäßige oder neutrale Kultur definiert. Fügen Sie das <xref:System.Resources.NeutralResourcesLanguageAttribute>-Attribut einer Quell Code Datei oder der Projekt Informationsdatei (AssemblyInfo. vb für eine Visual Basic APP oder AssemblyInfo.cs für eine C# App-Datei) hinzu.  
  
-   Der `baseName`-Parameter im <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29>-Konstruktor gibt nicht den Namen einer resources-Datei an. Der Name muss den voll qualifizierten Namespace der Ressourcen Datei, aber nicht die Dateinamenerweiterung enthalten. In der Regel enthalten Ressourcen Dateien, die in Visual Studio erstellt werden, Namespace Namen, Ressourcen Dateien, die an der Eingabeaufforderung erstellt und kompiliert werden, jedoch nicht. Sie können die Namen eingebetteter resources-Dateien ermitteln, indem Sie das folgende Hilfsprogramm kompilieren und ausführen. Dabei handelt es sich um eine Konsolen-APP, die den Namen einer Hauptassembly oder Satellitenassembly als Befehlszeilenparameter akzeptiert. Sie zeigt die Zeichen folgen an, die als `baseName` Parameter bereitgestellt werden sollen, damit der Ressourcen-Manager die Ressource ordnungsgemäß identifizieren kann.  
  
     [!code-csharp[System.Resources.ResourceManager.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/resourcenames.cs#4)]
     [!code-vb[System.Resources.ResourceManager.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/resourcenames.vb#4)]  
  
 Wenn Sie die aktuelle Kultur der Anwendung explizit ändern, sollten Sie auch daran denken, dass der Ressourcen-Manager einen Ressourcen Satz basierend auf dem Wert der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft und nicht der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft abruft. Wenn Sie einen Wert ändern, sollten Sie in der Regel auch den anderen ändern.  
  
<a name="versioning"></a>   
### <a name="resource-versioning"></a>Ressourcen Versionsverwaltung  
 Da die Hauptassembly, die die Standard Ressourcen einer app enthält, von den Satellitenassemblys der APP getrennt ist, können Sie eine neue Version Ihrer Hauptassembly freigeben, ohne die Satellitenassemblys erneut bereitstellen zu müssen. Verwenden Sie das <xref:System.Resources.SatelliteContractVersionAttribute>-Attribut, um vorhandene Satellitenassemblys zu verwenden, und weisen Sie den Ressourcen-Manager an, Sie nicht erneut mit einer neuen Version Ihrer Hauptassembly bereitzustellen.  
  
 Weitere Informationen zur Versions Unterstützung für Satellitenassemblys finden Sie im Artikel [Abrufen von Ressourcen](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md).  
  
<a name="config"></a>   
### <a name="satelliteassemblies-configuration-file-node"></a>\<satelliteassemblys > Konfigurationsdatei Knoten  
 Bei ausführbaren Dateien, die von einer Website (href. exe-Dateien) bereitgestellt und ausgeführt werden, kann das <xref:System.Resources.ResourceManager> Objekt über das Internet nach Satellitenassemblys suchen, was die Leistung Ihrer APP beeinträchtigen kann. Um das Leistungsproblem zu beseitigen, können Sie diese Überprüfung auf die Satellitenassemblys beschränken, die Sie mit Ihrer APP bereitgestellt haben. Zu diesem Zweck erstellen Sie einen `<satelliteassemblies>` Knoten in der Konfigurationsdatei Ihrer APP, um anzugeben, dass Sie einen bestimmten Satz von Kulturen für Ihre APP bereitgestellt haben, und dass das <xref:System.Resources.ResourceManager> Objekt nicht versuchen soll, eine andere Kultur zu suchen, die nicht in diesem Knoten aufgeführt ist.  
  
> [!NOTE]
>  Die bevorzugte Alternative zum Erstellen eines `<satelliteassemblies>` Knotens ist die Verwendung des [ClickOnce-Bereitstellungs Manifest](https://msdn.microsoft.com/library/8457e615-e3b6-4990-8dcf-11bc590e4e9b) -Features.  
  
 Erstellen Sie in der Konfigurationsdatei Ihrer APP einen Abschnitt ähnlich dem folgenden:  
  
```  
<?xml version ="1.0"?>  
<configuration>  
    <satelliteassemblies>  
        <assembly name="MainAssemblyName, Version=versionNumber, Culture=neutral, PublicKeyToken=null|yourPublicKeyToken">  
            <culture>cultureName1</culture>  
            <culture>cultureName2</culture>  
            <culture>cultureName3</culture>  
        </assembly>  
    </satelliteassemblies>  
</configuration>  
```  
  
 Bearbeiten Sie diese Konfigurationsinformationen wie folgt:  
  
-   Geben Sie mindestens einen `<assembly>` Knoten für jede Hauptassembly an, die Sie bereitstellen, wobei jeder Knoten einen voll qualifizierten Assemblynamen angibt. Geben Sie anstelle von *MainAssemblyName*den Namen der Hauptassembly an, und geben Sie die Werte für `Version`, `PublicKeyToken`und `Culture` Attribute an, die der Hauptassembly entsprechen.  
  
     Geben Sie für das `Version`-Attribut die Versionsnummer der Assembly an. Beispielsweise kann die erste Version der Assembly die Versionsnummer 1.0.0.0 sein.  
  
     Geben Sie für das `PublicKeyToken`-Attribut das Schlüsselwort `null` an, wenn Sie die Assembly nicht mit einem starken Namen signiert haben, oder geben Sie das Token des öffentlichen Schlüssels an, wenn Sie die Assembly signiert haben.  
  
     Geben Sie für das `Culture`-Attribut das Schlüsselwort `neutral` an, um die Hauptassembly festzulegen, und bewirken Sie, dass die <xref:System.Resources.ResourceManager> Klasse nur die Kulturen testet, die in den `<culture>` Knoten aufgeführt sind.  
  
     Weitere Informationen zu voll qualifizierten Assemblynamen finden Sie im [](~/docs/standard/assembly/names.md)Artikel Assemblynamen. Weitere Informationen zu Assemblys mit starkem Namen finden Sie im Artikel erstellen und Verwenden von Assemblys [mit starkem Namen](~/docs/standard/assembly/create-use-strong-named.md).  
  
-   Geben Sie mindestens einen `<culture>` Knoten mit einem bestimmten Kultur Namen an, z. b. "fr-FR", oder einem neutralen Kultur Namen, z. b. "fr".  
  
 Wenn für eine Assembly, die nicht unter dem Knoten `<satelliteassemblies>` aufgeführt ist, Ressourcen benötigt werden, testet die <xref:System.Resources.ResourceManager>-Klasse mithilfe von Standard Überprüfungs Regeln nach Kulturen.  
  
<a name="ws"></a>   
## <a name="includewin8_appname_longincludeswin8-appname-long-mdmd-apps"></a>[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps  
  
> [!IMPORTANT]
>  Obwohl die <xref:System.Resources.ResourceManager>-Klasse in [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps unterstützt wird, wird deren Verwendung nicht empfohlen. Verwenden Sie diese Klasse nur, wenn Sie [!INCLUDE[net_portable](~/includes/net-portable-md.md)] Projekte entwickeln, die mit [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps verwendet werden können. Verwenden Sie stattdessen die [Windows. applicationmodel. resources. resourceloader](https://go.microsoft.com/fwlink/p/?LinkId=238182) -Klasse, um Ressourcen aus [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-apps abzurufen.  
  
 Bei [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-apps Ruft die <xref:System.Resources.ResourceManager>-Klasse Ressourcen von PRI-Dateien (Package Resource Index) ab. Eine einzelne PRI-Datei (die PRI-Datei des Anwendungspakets) enthält die Ressourcen für die Standard Kultur und alle lokalisierten Kulturen. Verwenden Sie das makepri-Hilfsprogramm, um eine PRI-Datei aus einer oder mehreren Ressourcen Dateien im XML-Ressourcen Format (. resw) zu erstellen. Für Ressourcen, die in einem Visual Studio-Projekt enthalten sind, behandelt Visual Studio den Prozess, bei dem die PRI-Datei automatisch erstellt und verpackt wird. Anschließend können Sie die .NET Framework <xref:System.Resources.ResourceManager>-Klasse verwenden, um auf die Ressourcen der APP oder der Bibliothek zuzugreifen.  
  
 Sie können ein <xref:System.Resources.ResourceManager> Objekt für eine [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-App auf die gleiche Weise instanziieren wie für eine Desktop-App.  
  
 Sie können dann auf die Ressourcen für eine bestimmte Kultur zugreifen, indem Sie den Namen der abzurufenden Ressource an die <xref:System.Resources.ResourceManager.GetString%28System.String%29>-Methode übergeben. Standardmäßig gibt diese Methode die Ressource für die Kultur zurück, die durch die aktuelle Benutzeroberflächen Kultur des Threads bestimmt wird, der den-Befehl durchgeführt hat. Sie können die Ressourcen für eine bestimmte Kultur auch abrufen, indem Sie den Namen der Ressource und ein <xref:System.Globalization.CultureInfo> Objekt, das die Kultur darstellt, deren Ressource für die <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>-Methode abgerufen werden soll, übergeben. Wenn die Ressource für die aktuelle Benutzeroberflächen Kultur oder die angegebene Kultur nicht gefunden werden kann, verwendet der Ressourcen-Manager eine Fall Back Liste für die Benutzeroberflächen Sprache, um eine geeignete Ressource zu suchen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie eine explizite Kultur und die implizite aktuelle UI-Kultur verwendet werden, um Zeichen folgen Ressourcen aus einer Hauptassembly und einer Satellitenassembly abzurufen. Weitere Informationen finden Sie im Abschnitt "Verzeichnis Speicherorte für Satellitenassemblys, die nicht im globalen Assemblycache installiert sind" im Thema [Erstellen von Satellitenassemblys](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) .  
  
 So führen Sie dieses Beispiel aus:  
  
1.  Erstellen Sie im App-Verzeichnis eine Datei namens RMC. txt, die die folgenden Ressourcen Zeichenfolgen enthält:  
  
    ```  
  
    day=Friday  
    year=2006  
    holiday="Cinco de Mayo"  
  
    ```  
  
2.  Verwenden Sie den [Ressourcen Datei-Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) , um die Ressourcen Datei "RMC. Resources" aus der Eingabedatei "RMC. txt" wie folgt zu generieren:  
  
    ```  
    resgen rmc.txt  
    ```  
  
3.  Erstellen Sie ein Unterverzeichnis des App-Verzeichnisses, und nennen Sie es "es-MX". Dies ist der Kultur Name der Satellitenassembly, die Sie in den nächsten drei Schritten erstellen werden.  
  
4.  Erstellen Sie im Verzeichnis "es-MX" eine Datei mit dem Namen RMC.es-MX. txt, die die folgenden Ressourcen Zeichenfolgen enthält:  
  
    ```  
  
    day=Viernes  
    year=2006  
    holiday="Cinco de Mayo"  
  
    ```  
  
5.  Verwenden Sie den [Ressourcen Datei-Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) , um die Ressourcen Datei "RMC.es-MX. Resources" aus der Eingabedatei "RMC.es-MX. txt" wie folgt zu generieren:  
  
    ```  
    resgen rmc.es-MX.txt  
    ```  
  
6.  Angenommen, der Dateiname für dieses Beispiel lautet RMC. vb oder RMC.cs. Kopieren Sie den folgenden Quellcode in eine Datei. Kompilieren Sie Sie anschließend, und Betten Sie die hauptassemblyressourcendatei RMC. Resources in die ausführbare Assembly ein. Wenn Sie den Visual Basic-Compiler verwenden, lautet die Syntax wie folgt:  
  
    ```  
    vbc rmc.vb /resource:rmc.resources  
    ```  
  
     Die entsprechende Syntax für den C# Compiler lautet:  
  
    ```  
    csc /resource:rmc.resources rmc.cs  
    ```  
  
7.  Verwenden Sie den [Assembly Linker](~/docs/framework/tools/al-exe-assembly-linker.md) zum Erstellen einer Satellitenassembly. Wenn der Basisname der APP RMC ist, muss der Name der Satellitenassembly RMC. resources. dll lauten. Die Satellitenassembly sollte im Verzeichnis "es-MX" erstellt werden. Wenn es-MX das aktuelle Verzeichnis ist, verwenden Sie den folgenden Befehl:  
  
    ```  
    al /embed:rmc.es-MX.resources /c:es-MX /out:rmc.resources.dll   
    ```  
  
8.  Führen Sie RMC. exe aus, um die eingebetteten Ressourcen Zeichenfolgen abzurufen und anzuzeigen.  
  
 [!code-csharp[ResourceManager_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/ResourceManager_Class/cs/rmc.cs#1)]
 [!code-vb[ResourceManager_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ResourceManager_Class/vb/rmc.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Dieser Typ ist threadsicher.</threadsafe>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
    <altmember cref="T:System.Resources.SatelliteContractVersionAttribute" />
    <related type="Article" href="https://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890">Ressourcen in Anwendungen</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceManager" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ResourceManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ResourceManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceManager" />-Klasse mit Standardwerten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor ist nur nützlich, wenn Sie eine eigene Klasse schreiben, die von der <xref:System.Resources.ResourceManager>-Klasse abgeleitet ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (Type resourceSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type resourceSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resourceSource As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(Type ^ resourceSource);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceManager : Type -&gt; System.Resources.ResourceManager" Usage="new System.Resources.ResourceManager resourceSource" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="resourceSource" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="resourceSource">Ein Typ, aus dem der Ressourcen-Manager alle Informationen zum Suchen von RESOURCES-Dateien ableitet.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceManager" />-Klasse, die Ressourcen in Satellitenassemblys auf der Grundlage der Informationen aus dem angegebenen Typobjekt sucht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Desktop-Apps  
 In Desktop-Apps verwendet der Ressourcen-Manager den `resourceSource`-Parameter, um eine bestimmte Ressourcen Datei wie folgt zu laden:  
  
-   Wenn das <xref:System.Resources.NeutralResourcesLanguageAttribute>-Attribut nicht verwendet wird, um anzugeben, dass sich die Ressourcen der Standard Kultur in einer Satellitenassembly befinden, geht der Ressourcen-Manager davon aus, dass sich die Ressourcen Datei für die Standard Kultur in derselben Assembly befindet wie der Typ, der vom angegeben wird `resourceSource` Parame.  
  
-   Der Ressourcen-Manager geht davon aus, dass die Standard Ressourcen Datei denselben Basis Namen wie der durch den `resourceSource`-Parameter angegebene Typ aufweist.  
  
-   Der Ressourcen-Manager verwendet die Standard-<xref:System.Resources.ResourceSet>-Klasse, um die Ressourcen Datei zu bearbeiten.  
  
 Wenn beispielsweise ein Typ mit dem Namen "MyCompany. MyProduct. MyType" angegeben ist, sucht der Ressourcen-Manager in der Assembly, die MyType definiert, nach einer resources-Datei mit dem Namen "MyCompany. MyProduct. MyType. Resources".  
  
 In Visual Studio generiert der Ressourcen-Designer automatisch Code, der eine `internal` (in C#) oder `Friend` (in Visual Basic)-Klasse definiert, deren Name mit dem Basisnamen der resources-Datei für die Standard Kultur identisch ist. Dadurch ist es möglich, ein <xref:System.Resources.ResourceManager> Objekt zu instanziieren und mit einem bestimmten Satz von Ressourcen zu verknüpfen, indem er ein Typobjekt erhält, dessen Name dem Namen der Ressource entspricht, denn solange die Klasse für den Compiler sichtbar ist, müssen die Ressourcen ebenfalls gleich sein. Wenn eine resources-Datei z. b. den Namen "" Resource1 "hat, instanziiert die folgende Anweisung ein <xref:System.Resources.ResourceManager> Objekt, um die resources-Datei mit dem Namen" "Resource1" zu verwalten:  
  
 [!code-csharp[System.Resources.ResourceManager.ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/ctor1.cs#2)]  
  
 Wenn Sie nicht Visual Studio verwenden, können Sie eine Klasse ohne Member erstellen, deren Namespace und Name mit denen der standardmäßigen resources-Datei übereinstimmen. Dies wird im Beispiel veranschaulicht.  
  
## <a name="includewin8_appname_longincludeswin8-appname-long-mdmd-apps"></a>[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps  
  
> [!IMPORTANT]
>  Obwohl die <xref:System.Resources.ResourceManager>-Klasse in [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps unterstützt wird, wird deren Verwendung nicht empfohlen. Verwenden Sie diese Klasse nur, wenn Sie [!INCLUDE[net_portable](~/includes/net-portable-md.md)] Projekte entwickeln, die mit [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps verwendet werden können. Verwenden Sie stattdessen die [Windows. applicationmodel. resources. resourceloader](https://go.microsoft.com/fwlink/p/?LinkId=238182) -Klasse, um Ressourcen aus [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-apps abzurufen.  
  
 In [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps verwendet <xref:System.Resources.ResourceManager> den `resourceSource`-Parameter, um die Assembly, den Basisnamen und den Namespace abzuleiten, in denen sich die Ressourcen Elemente in der Paket Ressourcen Index-Datei (PRI) der APP befinden. Wenn beispielsweise ein Typ mit dem Namen "MyCompany. MyProduct. MyType" in `MyAssembly`definiert ist, sucht der Ressourcen-Manager nach einem Ressourcen Satz Bezeichner mit dem Namen myAssembly und sucht in diesem Ressourcen Satz nach einem Bereich MyCompany. MyProduct. MyType. Der Ressourcen-Manager sucht nach Ressourcen Elementen in diesem Bereich unter dem Standardkontext (aktuelle Kultur, aktuelle Einstellung für hohe Kontraste usw.).  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29>-Konstruktor verwendet, um ein <xref:System.Resources.ResourceManager>-Objekt zu instanziieren. Es besteht aus Ressourcen, die aus txt-Dateien für die Kulturen Englisch (en), Französisch (Frankreich) (fr-FR) und Russisch (Russland) (ru-ru) kompiliert wurden. Im Beispiel wird die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur in Englisch (USA), Französisch (Frankreich), Russisch (Russische Föderation) und Schwedisch (Schweden) geändert. Anschließend wird die <xref:System.Resources.ResourceManager.GetString%28System.String%29>-Methode aufgerufen, um die lokalisierte Zeichenfolge abzurufen, die eine Begrüßung anzeigt, die von der Tageszeit abhängt.  
  
 Für das Beispiel sind drei textbasierte Ressourcen Dateien erforderlich, wie in der folgenden Tabelle aufgeführt. Jede Datei enthält Zeichen folgen Ressourcen mit dem Namen `Morning`, `Afternoon`und `Evening`.  
  
|culture|Dateiname|Ressourcenname|Ressourcenwert|  
|-------------|---------------|-------------------|--------------------|  
|en-US|Greetingresources. txt|`Morning`|Guten Morgen|  
|en-US|Greetingresources. txt|`Afternoon`|Guten Tag|  
|en-US|Greetingresources. txt|`Evening`|Guten Abend|  
|fr-FR|GreetingResources.fr-fr. txt|`Morning`|Bonjour|  
|fr-FR|GreetingResources.fr-fr. txt|`Afternoon`|Bonjour|  
|fr-FR|GreetingResources.fr-fr. txt|`Evening`|Bonsoir|  
|ru-RU|GreetingResources.ru-ru. txt|`Morning`|"".|  
|ru-RU|GreetingResources.ru-ru. txt|`Afternoon`|"".|  
|ru-RU|GreetingResources.ru-ru. txt|`Evening`|"-Вечер"|  
  
 Mit der folgenden Batchdatei können Sie das Visual Basic Beispiel kompilieren und eine ausführbare Datei mit dem Namen "Gruß. exe" erstellen. Um mit C#zu kompilieren, ändern Sie den Compilernamen von `vbc` in `csc` und die Dateierweiterung von `.vb` in `.cs`.  
  
```  
  
resgen GreetingResources.txt  
vbc Greet.vb /resource: GreetingResources.resources  
  
md fr-FR  
resgen GreetingResources.fr-FR.txt  
al /out:fr-FR\Greet.resources.dll /culture:fr-FR /embed: GreetingResources.fr-FR.resources   
  
md ru-RU  
resgen GreetingResources.ru-RU.txt  
al /out:ru-RU\Greet.resources.dll /culture:ru-RU /embed: GreetingResources.ru-RU.resources  
  
```  
  
 Im folgenden finden Sie den Quellcode für das Beispiel (showdate. vb für die Visual Basic Version oder ShowDate.cs für C# die Version des Codes).  
  
 [!code-csharp[System.Resources.ResourceManager.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/greet.cs#3)]
 [!code-vb[System.Resources.ResourceManager.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/vb/greet.vb#3)]  
  
 Zusätzlich zum Definieren einer App-Klasse mit dem Namen "`Example`" definiert der Quellcode eine interne Klasse, deren Name, `GreetingResources`, mit dem Basisnamen der Ressourcen Dateien identisch ist. Dadurch ist es möglich, ein <xref:System.Resources.ResourceManager> Objekt durch Aufrufen des <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29>-Konstruktors erfolgreich zu instanziieren.  
  
 Beachten Sie, dass die Ausgabe die entsprechende lokalisierte Zeichenfolge anzeigt, es sei denn, die aktuelle Benutzeroberflächen Kultur ist Schwedisch (Sweden). in diesem Fall werden englischsprachige Ressourcen verwendet. Da die schwedischen Sprachressourcen nicht verfügbar sind, verwendet die APP stattdessen die Ressourcen der Standard Kultur gemäß der Definition des <xref:System.Resources.NeutralResourcesLanguageAttribute> Attributs.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="resourceSource" />-Parameter ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (string baseName, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string baseName, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(System::String ^ baseName, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceManager : string * System.Reflection.Assembly -&gt; System.Resources.ResourceManager" Usage="new System.Resources.ResourceManager (baseName, assembly)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="baseName">Der Stammname der Ressourcendatei ohne Erweiterung, aber einschließlich eines beliebigen vollqualifizierten Namespacenamens. Der Stammname der Ressourcendatei "MyApplication.MyResource.en-US.resources" lautet beispielsweise "MyApplication.MyResource".</param>
        <param name="assembly">Die Hauptassembly für die Ressourcen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceManager" />-Klasse zum Suchen von Ressourcen in Dateien mit dem angegebenen Stammnamen in der angegebenen Assembly.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Desktop-Apps  
 In Desktop-Apps sollten die einzelnen kulturspezifischen Ressourcen Dateien in Satellitenassemblys enthalten sein, und die Ressourcen Datei der Standard Kultur sollte in der Hauptassembly enthalten sein. Es wird davon ausgegangen, dass eine Satellitenassembly Ressourcen für eine einzelne Kultur enthält, die im Manifest der Assembly angegeben ist, und wird bei Bedarf geladen.  
  
> [!NOTE]
>  Wenn Sie Ressourcen direkt aus Ressourcen Dateien abrufen möchten, anstatt Sie aus Assemblys abzurufen, müssen Sie stattdessen die <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A>-Methode aufrufen, um ein <xref:System.Resources.ResourceManager>-Objekt zu instanziieren.  
  
 Wenn die durch `baseName` identifizierte Ressourcen Datei in `assembly`nicht gefunden werden kann, instanziiert die-Methode ein <xref:System.Resources.ResourceManager>-Objekt, aber der Versuch, eine bestimmte Ressource abzurufen, löst in der Regel <xref:System.Resources.MissingManifestResourceException>aus. Weitere Informationen zur Diagnose der Ursache der Ausnahme finden Sie im Abschnitt "behandeln der MissingManifestResourceException-Ausnahme" im Thema <xref:System.Resources.ResourceManager>-Klasse.  
  
## <a name="includewin8_appname_longincludeswin8-appname-long-mdmd-apps"></a>[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps  
  
> [!IMPORTANT]
>  Obwohl die <xref:System.Resources.ResourceManager>-Klasse in [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps unterstützt wird, wird deren Verwendung nicht empfohlen. Verwenden Sie diese Klasse nur, wenn Sie [!INCLUDE[net_portable](~/includes/net-portable-md.md)] Projekte entwickeln, die mit [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps verwendet werden können. Verwenden Sie stattdessen die [Windows. applicationmodel. resources. resourceloader](https://go.microsoft.com/fwlink/p/?LinkId=238182) -Klasse, um Ressourcen aus [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-apps abzurufen.  
  
 In [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps verwendet der Ressourcen-Manager den einfachen Namen des `assembly`-Parameters, um nach einem passenden Ressourcen Satz in der Paket Ressourcen Indexdatei (PRI) der APP zu suchen. Der `baseName`-Parameter wird verwendet, um ein Ressourcen Element innerhalb des Ressourcen Satzes zu suchen. Der Stammname für PortableLibrary1.Resource1.de-de. resources lautet z. b. PortableLibrary1. "Resource1.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine einfache nicht lokalisierte "Hallo Welt"-App verwendet, um den <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29>-Konstruktor zu veranschaulichen. Das folgende Beispiel zeigt den Inhalt einer Textdatei mit dem Namen "exampleresources. txt". Wenn die APP kompiliert ist, wird die Ressource in die Haupt-App-Assembly eingebettet.  
  
```  
Greeting=Hello  
```  
  
 Die Textdatei kann mithilfe des [Ressourcen Datei-Generators (Resgen. exe)](~/docs/framework/tools/resgen-exe-resource-file-generator.md) an der Eingabeaufforderung wie folgt in eine binäre Ressourcen Datei konvertiert werden:  
  
```  
resgen ExampleResources.txt  
```  
  
 Im folgenden Beispiel wird der ausführbare Code bereitstellt, der ein <xref:System.Resources.ResourceManager> Objekt instanziiert, den Benutzer zur Eingabe eines Namens auffordert und eine Begrüßung anzeigt.  
  
 [!code-csharp[System.Resources.ResourceManager.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/example.cs#1)]
 [!code-vb[System.Resources.ResourceManager.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/vb/example.vb#1)]  
  
 Er kann mit dem folgenden Befehl in Visual Basic kompiliert werden:  
  
```  
vbc Example.vb /resource:ExampleResources.resources  
```  
  
 oder verwenden Sie den folgenden Befehl in C#:  
  
```  
csc Example.cs /resource:ExampleResources.resources  
```  
  
 Beachten Sie, dass im Beispiel ein Verweis auf die Assembly mit der Ressourcen Datei abgerufen wird, indem ein in dieser Assembly definierter Typ an die `typeof` Funktion ( C#in) oder die `GetType`-Funktion (in Visual Basic) übergeben und der Wert des <xref:System.Type.Assembly%2A?displayProperty=nameWithType> abgerufen wird. Property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="baseName" />-Parameter oder der <paramref name="assembly" />-Parameter ist <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Dieser Konstruktor verwendet die vom System bereitgestellte <see cref="T:System.Resources.ResourceSet" /> Implementierung. Wenn Sie ein benutzerdefiniertes Ressourcen Dateiformat verwenden möchten, sollten Sie von der <see cref="T:System.Resources.ResourceSet" />-Klasse ableiten, die <see cref="M:System.Resources.ResourceSet.GetDefaultReader" />-und <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" />-Methoden überschreiben und diesen Typ an den <see cref="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)" />-Konstruktor übergeben. Die Verwendung eines benutzerdefinierten <see cref="T:System.Resources.ResourceSet" /> kann nützlich sein, um die Richtlinie zum Zwischenspeichern von Ressourcen zu steuern oder Ihr eigenes Ressourcen Dateiformat zu unterstützen</para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (string baseName, System.Reflection.Assembly assembly, Type usingResourceSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string baseName, class System.Reflection.Assembly assembly, class System.Type usingResourceSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(System::String ^ baseName, System::Reflection::Assembly ^ assembly, Type ^ usingResourceSet);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceManager : string * System.Reflection.Assembly * Type -&gt; System.Resources.ResourceManager" Usage="new System.Resources.ResourceManager (baseName, assembly, usingResourceSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="usingResourceSet" Type="System.Type" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="baseName">Der Stammname der Ressourcendatei ohne Erweiterung, aber einschließlich eines beliebigen vollqualifizierten Namespacenamens. Der Stammname der Ressourcendatei "MyApplication.MyResource.en-US.resources" lautet beispielsweise "MyApplication.MyResource".</param>
        <param name="assembly">Die Hauptassembly für die Ressourcen.</param>
        <param name="usingResourceSet">Der Typ des zu verwendenden benutzerdefinierten <see cref="T:System.Resources.ResourceSet" />. Wenn <see langword="null" />, wird das für die Laufzeit standardmäßig festgelegte <see cref="T:System.Resources.ResourceSet" />-Objekt verwendet.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceManager" />-Klasse, die eine angegebene <see cref="T:System.Resources.ResourceSet" />-Klasse verwendet, um Ressourcen in Dateien mit dem angegebenen Stammnamen in der angegebenen Assembly zu suchen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die einzelnen kulturspezifischen Ressourcen Dateien sollten in Satellitenassemblys enthalten sein, und die Ressourcen Datei der Standard Kultur sollte in der Hauptassembly enthalten sein. Es wird davon ausgegangen, dass eine Satellitenassembly Ressourcen für eine einzelne Kultur enthält, die im Manifest der Assembly angegeben ist, und wird bei Bedarf geladen.  
  
> [!NOTE]
>  Wenn Sie Ressourcen direkt aus Ressourcen Dateien abrufen möchten, anstatt Sie aus Assemblys abzurufen, müssen Sie stattdessen die <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A>-Methode aufrufen, um ein <xref:System.Resources.ResourceManager>-Objekt zu instanziieren.  
  
 Wenn die durch `baseName` identifizierte Ressourcen Datei in `assembly`nicht gefunden werden kann, instanziiert die-Methode ein <xref:System.Resources.ResourceManager>-Objekt, aber der Versuch, eine bestimmte Ressource abzurufen, löst in der Regel <xref:System.Resources.MissingManifestResourceException>aus. Weitere Informationen zur Diagnose der Ursache der Ausnahme finden Sie im Abschnitt "behandeln der MissingManifestResourceException-Ausnahme" im Thema <xref:System.Resources.ResourceManager>-Klasse.  
  
> [!NOTE]
>  Der `usingResourceSet`-Parameter wird verwendet, um Ihr eigenes Ressourcen Format zu unterstützen, und wird häufig `null`. Dies unterscheidet sich von dem Konstruktor, der nur eine <xref:System.Type> annimmt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="usingResourceset" /> ist keine von <see cref="T:System.Resources.ResourceSet" /> abgeleitete Klasse.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="baseName" />-Parameter oder der <paramref name="assembly" />-Parameter ist <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Mit diesem Konstruktor können Sie eine <see cref="T:System.Resources.ResourceSet" />-Implementierung angeben. Wenn Sie keine bestimmte <see cref="T:System.Resources.ResourceSet" /> Implementierung verwenden möchten, aber ein benutzerdefiniertes Ressourcen Dateiformat verwenden möchten, sollten Sie von der <see cref="T:System.Resources.ResourceSet" /> Klasse ableiten, die <see cref="M:System.Resources.ResourceSet.GetDefaultReader" />-und <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /> Methoden überschreiben und diesen Typ an diesen Konstruktor übergeben.</para></block>
      </Docs>
    </Member>
    <Member MemberName="BaseName">
      <MemberSignature Language="C#" Value="public virtual string BaseName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseName" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.BaseName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BaseName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseName : string" Usage="System.Resources.ResourceManager.BaseName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Stammnamen der Ressourcendateien ab, die der <see cref="T:System.Resources.ResourceManager" /> nach Ressourcen durchsucht.</summary>
        <value>Der Stammname der Ressourcendateien, die der <see cref="T:System.Resources.ResourceManager" /> nach Ressourcen durchsucht.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceManager.BaseName%2A>-Eigenschaft gibt den voll qualifizierten Namespace Namen und den Stamm Ressourcennamen einer Ressourcen Datei ohne Kultur-oder Dateinamenerweiterung wieder. Wenn z. b. die Standard Ressourcen Datei einer APP `SampleApps.StringResources.resources`benannt ist, lautet der Wert der <xref:System.Resources.ResourceManager.BaseName%2A>-Eigenschaft "sampleapps. straningresources". Wenn die Standard Ressourcen Datei einer APP `SampleApps.StringResources.en-US.resources` benannt ist und in eine Satellitenassembly eingebettet ist, ist der Wert der Eigenschaft <xref:System.Resources.ResourceManager.BaseName%2A> weiterhin "sampleapps. straningresources".  
  
> [!IMPORTANT]
>  Der <xref:System.Resources.ResourceManager.BaseName%2A>-Eigenschafts Wert einer Ressourcen Datei, die von der Befehlszeile kompiliert und eingebettet wird, enthält keinen Namespace Namen, es sei denn, Sie schließen beim Kompilieren der Datei explizit einen Namespace ein. Andererseits enthält der Wert der <xref:System.Resources.ResourceManager.BaseName%2A>-Eigenschaft einer Ressourcen Datei, die in der Visual Studio-Umgebung kompiliert und eingebettet wird, in der Regel den Standard Namespace Namen.  
  
 Der <xref:System.Resources.ResourceManager.BaseName%2A>-Eigenschafts Wert ist identisch mit der Zeichenfolge, die beim Instanziieren einer <xref:System.Resources.ResourceManager>-Instanz an den <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29>-oder <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29>-Konstruktor übergeben wird.  
  
   
  
## Examples  
 Sie können die Namen eingebetteter resources-Dateien ermitteln, indem Sie das folgende Hilfsprogramm kompilieren und ausführen. Dabei handelt es sich um eine Konsolen-APP, die den Namen einer Hauptassembly oder Satellitenassembly als Befehlszeilenparameter akzeptiert. Sie zeigt die Zeichen folgen an, die als `baseName`-Parameter des <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> oder <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29> Konstruktors bereitgestellt werden sollen, damit der Ressourcen-Manager die Ressource ordnungsgemäß identifizieren kann.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/resourcenames.cs#4)]
 [!code-vb[System.Resources.ResourceManager.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/resourcenames.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseNameField">
      <MemberSignature Language="C#" Value="protected string BaseNameField;" />
      <MemberSignature Language="ILAsm" Value=".field family string BaseNameField" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.BaseNameField" />
      <MemberSignature Language="VB.NET" Value="Protected BaseNameField As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ BaseNameField;" />
      <MemberSignature Language="F#" Value="val mutable BaseNameField : string" Usage="System.Resources.ResourceManager.BaseNameField" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Stammnamen der Ressourcendateien an, die der <see cref="T:System.Resources.ResourceManager" /> nach Ressourcen durchsucht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Resources.ResourceManager.BaseNameField>-Feld ist nur nützlich, wenn Sie eine eigene Klasse schreiben, die von der <xref:System.Resources.ResourceManager>-Klasse abgeleitet wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFileBasedResourceManager">
      <MemberSignature Language="C#" Value="public static System.Resources.ResourceManager CreateFileBasedResourceManager (string baseName, string resourceDir, Type usingResourceSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Resources.ResourceManager CreateFileBasedResourceManager(string baseName, string resourceDir, class System.Type usingResourceSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFileBasedResourceManager (baseName As String, resourceDir As String, usingResourceSet As Type) As ResourceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Resources::ResourceManager ^ CreateFileBasedResourceManager(System::String ^ baseName, System::String ^ resourceDir, Type ^ usingResourceSet);" />
      <MemberSignature Language="F#" Value="static member CreateFileBasedResourceManager : string * string * Type -&gt; System.Resources.ResourceManager" Usage="System.Resources.ResourceManager.CreateFileBasedResourceManager (baseName, resourceDir, usingResourceSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="resourceDir" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="usingResourceSet" Type="System.Type" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="baseName">Der Stammname der Ressourcen. Der Stammname der Ressourcendatei "MyResource.en-US.resources" lautet beispielsweise "MyResource".</param>
        <param name="resourceDir">Der Name des Verzeichnisses, das nach Ressourcen durchsucht werden soll. <paramref name="resourceDir" /> kann ein absoluter Pfad oder ein relativer Pfad im Anwendungsverzeichnis sein.</param>
        <param name="usingResourceSet">Der Typ des zu verwendenden benutzerdefinierten <see cref="T:System.Resources.ResourceSet" />. Wenn <see langword="null" />, wird das für die Laufzeit standardmäßig festgelegte <see cref="T:System.Resources.ResourceSet" />-Objekt verwendet.</param>
        <summary>Gibt ein <see cref="T:System.Resources.ResourceManager" />-Objekt zurück, der anstelle eines Assemblymanifests ein bestimmtes Verzeichnis nach Ressourcen durchsucht.</summary>
        <returns>Eine neue Instanz eines Ressourcen-Managers, der das angegebene Verzeichnis anstelle eines Assemblymanifests nach Ressourcen durchsucht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt einen Ressourcen-Manager zurück, der Ressourcen aus einer resources-Datei abruft, die nicht in einer Assembly eingebettet ist. Sie können dieses <xref:System.Resources.ResourceManager> Objekt zum Laden von Ressourcen für eine ASP.NET Seite oder zum Testen einer <xref:System.Resources.ResourceSet> Implementierung verwenden.  Ein Beispiel für das Abrufen von Ressourcen aus einer eigenständigen resources-Datei finden Sie im Artikel [Abrufen von Ressourcen](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md) .  
  
 Mit dieser Methode können Sie eine <xref:System.Resources.ResourceSet>-Implementierung angeben. Wenn Sie keine bestimmte <xref:System.Resources.ResourceSet> Implementierung verwenden möchten, aber ein benutzerdefiniertes Ressourcen Dateiformat verwenden möchten, sollten Sie von der <xref:System.Resources.ResourceSet> Klasse ableiten, die <xref:System.Resources.ResourceSet.GetDefaultReader%2A>-und <xref:System.Resources.ResourceSet.GetDefaultWriter%2A> Methoden überschreiben und diesen Typ an diesen Konstruktor übergeben.  
  
> [!CAUTION]
>  Durch die Verwendung von eigenständigen resources-Dateien in einer ASP.net-APP wird die XCOPY-Bereitstellung beendet, da die Ressourcen gesperrt bleiben, bis Sie explizit durch die <xref:System.Resources.ResourceManager.ReleaseAllResources%2A>-Methode freigegeben werden Wenn Sie Ressourcen mit Ihren ASP.net-apps bereitstellen möchten, kompilieren Sie Ihre resources-Dateien in Satellitenassemblys.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="baseName" />-Parameter oder der <paramref name="resourceDir" />-Parameter ist <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FallbackLocation">
      <MemberSignature Language="C#" Value="protected System.Resources.UltimateResourceFallbackLocation FallbackLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Resources.UltimateResourceFallbackLocation FallbackLocation" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.FallbackLocation" />
      <MemberSignature Language="VB.NET" Value="Protected Property FallbackLocation As UltimateResourceFallbackLocation" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Resources::UltimateResourceFallbackLocation FallbackLocation { System::Resources::UltimateResourceFallbackLocation get(); void set(System::Resources::UltimateResourceFallbackLocation value); };" />
      <MemberSignature Language="F#" Value="member this.FallbackLocation : System.Resources.UltimateResourceFallbackLocation with get, set" Usage="System.Resources.ResourceManager.FallbackLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.UltimateResourceFallbackLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Speicherort für das Abrufen von Standard-Fallbackressourcen ab oder legt diesen fest.</summary>
        <value>Einer der Enumerationswerte, der angibt, wo der Ressourcen-Manager nach Fallbackressourcen suchen kann.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceManager.FallbackLocation%2A>-Eigenschaft ist nur nützlich, wenn Sie eine eigene Klasse schreiben, die von der <xref:System.Resources.ResourceManager>-Klasse abgeleitet wird.  
  
 Mit dem <xref:System.Resources.NeutralResourcesLanguageAttribute>-Attribut können Sie den Ressourcen-Manager darüber informieren, wo die Standard Kultur für eine APP zu finden ist: in der Hauptassembly (Standard) oder in einer Satellitenassembly.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.UltimateResourceFallbackLocation" />
        <altmember cref="T:System.Resources.NeutralResourcesLanguageAttribute" />
        <related type="Article" href="~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md">Verpacken und Bereitstellen von Ressourcen</related>
      </Docs>
    </Member>
    <Member MemberName="GetNeutralResourcesLanguage">
      <MemberSignature Language="C#" Value="protected static System.Globalization.CultureInfo GetNeutralResourcesLanguage (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Globalization.CultureInfo GetNeutralResourcesLanguage(class System.Reflection.Assembly a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetNeutralResourcesLanguage (a As Assembly) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Globalization::CultureInfo ^ GetNeutralResourcesLanguage(System::Reflection::Assembly ^ a);" />
      <MemberSignature Language="F#" Value="static member GetNeutralResourcesLanguage : System.Reflection.Assembly -&gt; System.Globalization.CultureInfo" Usage="System.Resources.ResourceManager.GetNeutralResourcesLanguage a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="a">Die Assembly, für die kulturspezifische Informationen zurückgegeben werden sollen.</param>
        <summary>Gibt kulturspezifische Informationen für die Standardressourcen der Hauptassembly zurück, indem der Wert des <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" />-Attributs in einer angegebenen Assembly gelesen wird.</summary>
        <returns>Die Kultur des <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" />-Attributs, sofern gefunden, andernfalls die invariante Kultur.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt den Wert der angegebenen Ressource, die keine Zeichenfolge ist, für die aktuelle Kultur zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : string -&gt; obj&#xA;override this.GetObject : string -&gt; obj" Usage="resourceManager.GetObject name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Ressource.</param>
        <summary>Gibt den Wert der angegebenen Ressource, die keine Zeichenfolge ist, zurück.</summary>
        <returns>Der Wert der Ressource, die für die aktuellen Kultureinstellungen des Aufrufers lokalisiert wurde. Wenn ein entsprechender Ressourcensatz vorhanden ist, jedoch <paramref name="name" /> nicht gefunden werden kann, gibt die Methode <see langword="null" /> zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceManager.GetObject%2A>-Methode wird verwendet, um nicht-Zeichen folgen Ressourcen abzurufen. Dazu zählen Werte, die zu primitiven Datentypen gehören, z. b. <xref:System.Int32> oder <xref:System.Double>, Bitmaps (z. b. ein <xref:System.Drawing.Bitmap?displayProperty=nameWithType> Objekt) oder benutzerdefinierte serialisierte Objekte. In der Regel muss das zurückgegebene Objekt in ein C#Objekt des entsprechenden Typs umgewandelt (in) oder (in Visual Basic) konvertiert werden.  
  
 Die zurückgegebene Ressource wird für die Benutzeroberflächen Kultur des aktuellen Threads lokalisiert, der durch die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft definiert wird. Wenn die Ressource für diese Kultur nicht lokalisiert ist, verwendet der Ressourcen-Manager Fall Back Regeln, um eine entsprechende Ressource zu laden. Wenn kein verwendender Satz lokalisierter Ressourcen gefunden wird, wird der <xref:System.Resources.ResourceManager> auf die Ressourcen der Standard Kultur zurückgegriffen. Wenn keine Ressourcen Menge für die Standard Kultur gefunden wird, löst die Methode eine <xref:System.Resources.MissingManifestResourceException> Ausnahme aus, oder, wenn erwartet wird, dass sich der Ressourcen Satz in einer Satellitenassembly befindet, eine <xref:System.Resources.MissingSatelliteAssemblyException> Ausnahme. Wenn der Ressourcen-Manager einen geeigneten Ressourcen Satz laden kann, aber keine Ressource mit dem Namen `name`finden kann, gibt die Methode `null`zurück.  
  
 Die <xref:System.Resources.ResourceManager.IgnoreCase%2A>-Eigenschaft bestimmt, ob beim Vergleich von `name` mit den Namen der Ressourcen die Groß-/Kleinschreibung beachtet wird oder die Groß-/Kleinschreibung beachtet wird.  
  
> [!CAUTION]
>  Diese Methode kann weitere Ausnahmen auslösen, als aufgeführt sind. Ein Grund hierfür könnte sein, dass eine Methode, die von dieser Methode aufgerufen wird, eine Ausnahme auslöst.  Beispielsweise kann eine <xref:System.IO.FileLoadException> Ausnahme ausgelöst werden, wenn ein Fehler beim Bereitstellen oder Installieren einer Satellitenassembly aufgetreten ist, oder es kann eine <xref:System.Runtime.Serialization.SerializationException> Ausnahme ausgelöst werden, wenn ein benutzerdefinierter Typ eine benutzerdefinierte Ausnahme auslöst, wenn der Typ deserialisiert wird.  
  
## <a name="performance-considerations"></a>Überlegungen zur Leistung  
 Wenn Sie die <xref:System.Resources.ResourceManager.GetObject%2A>-Methode mehrmals mit demselben `name` Parameter aufrufen, ist nicht von der Methode abhängig, die einen Verweis auf das gleiche Objekt mit jedem-Befehl zurückgibt. Dies liegt daran, dass die <xref:System.Resources.ResourceManager.GetObject%2A>-Methode einen Verweis auf ein vorhandenes Ressourcen Objekt in einem Cache zurückgeben oder die Ressource neu laden und einen Verweis auf ein neues Ressourcen Objekt zurückgeben kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceManager.GetObject%28System.String%29> -Methode verwendet, um ein benutzerdefiniertes Objekt zu deserialisieren. Das Beispiel enthält eine Quell Code Datei mit dem Namen UIElements.cs (UIElements. vb, wenn Sie Visual Basic), die die folgende Struktur mit dem Namen `PersonTable`definiert. Diese Struktur soll von einer allgemeinen Tabellen-Anzeigeroutine verwendet werden, die den lokalisierten Namen der Tabellenspalten anzeigt. Beachten Sie, dass die `PersonTable` -Struktur ist mit dem <xref:System.SerializableAttribute> -Attribut gekennzeichnet ist.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#6](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example.cs#6)]
 [!code-vb[Conceptual.Resources.Retrieving#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example.vb#6)]  
  
 Der folgende Code aus einer Datei mit dem Namen CreateResources.cs (CreateResources.vb für Visual Basic) erstellt eine XML-Ressourcendatei mit dem Namen UIResources.resx, die einen Tabellentitel und ein `PersonTable` -Objekt speichert, das Informationen für eine App enthält, die für die englische Sprache lokalisiert ist.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#7](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example1.cs#7)]
 [!code-vb[Conceptual.Resources.Retrieving#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example.vb#7)]  
  
 Der folgende Code in eine Quellcodedatei mit dem Namen GetObject.cs (GetObject.vb) ruft dann die Ressourcen ab und zeigt sie auf der Konsole an.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#8](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example2.cs#8)]
 [!code-vb[Conceptual.Resources.Retrieving#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example2.vb#8)]  
  
 Mit der folgenden Batchdatei können Sie die erforderliche Ressourcendatei und Assemblys erstellen und die App ausführen. Verwenden Sie die Option `/r` , um Resgen.exe einen Verweis auf UIElements.dll bereitzustellen, damit die Anwendung Zugriff auf Informationen über die `PersonTable` -Struktur erhält. Wenn Sie C# verwenden, ersetzen Sie den `vbc` -Compilernamen mit `csc`und ersetzen Sie die `.vb` -Erweiterung mit `.cs`.  
  
```  
  
vbc /t:library UIElements.vb  
vbc CreateResources.vb /r:UIElements.dll  
CreateResources  
  
resgen UIResources.resx  /r:UIElements.dll  
vbc GetObject.vb /r:UIElements.dll /resource:UIResources.resources  
  
GetObject.exe  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Es wurde kein passender Satz von lokalisierten Ressourcen gefunden, und es sind keine Standardkulturressourcen vorhanden. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Die Ressourcen der Standardkultur befinden sich in einer Satellitenassembly, die nicht gefunden werden konnte. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <altmember cref="M:System.Resources.ResourceManager.GetStream(System.String)" />
        <related type="Article" href="~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md">Verpacken und Bereitstellen von Ressourcen</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String, culture As CultureInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : string * System.Globalization.CultureInfo -&gt; obj&#xA;override this.GetObject : string * System.Globalization.CultureInfo -&gt; obj" Usage="resourceManager.GetObject (name, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Ressource.</param>
        <param name="culture">Die Kultur, für die die Ressource lokalisiert wurde. Wenn die Ressource für diese Kultur nicht lokalisiert ist, dann sucht der Ressourcen-Manager unter Verwendung von Fallback-Regeln nach einer geeigneten Ressource.  
  
Wenn dieser Wert <see langword="null" /> ist, wird das <see cref="T:System.Globalization.CultureInfo" />-Objekt durch die <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />-Eigenschaft abgerufen.</param>
        <summary>Ruft den Wert der angegebenen Ressource ab, die keine Zeichenfolge ist und für die angegebene Kultur lokalisiert wurde.</summary>
        <returns>Der Wert der Ressource, die für die angegebene Kultur lokalisiert wurde. Wenn ein entsprechender Ressourcensatz vorhanden ist, jedoch <paramref name="name" /> nicht gefunden werden kann, gibt die Methode <see langword="null" /> zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29>-Methode wird verwendet, um nicht-Zeichen folgen Ressourcen abzurufen. Dazu zählen Werte, die zu primitiven Datentypen gehören, z. b. <xref:System.Int32> oder <xref:System.Double>, Bitmaps (z. b. ein <xref:System.Drawing.Bitmap?displayProperty=nameWithType> Objekt) oder benutzerdefinierte serialisierte Objekte. In der Regel muss das zurückgegebene Objekt in ein C#Objekt des entsprechenden Typs umgewandelt (in) oder (in Visual Basic) konvertiert werden.  
  
 Die zurückgegebene Ressource ist für die Kultur lokalisiert, die durch `culture`angegeben wird, oder für die Kultur, die durch die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft angegeben wird, wenn `culture` `null`ist. Wenn die Ressource für diese Kultur nicht lokalisiert ist, verwendet der Ressourcen-Manager Fall Back Regeln, um eine entsprechende Ressource zu laden. Wenn kein verwendender Satz lokalisierter Ressourcen gefunden wird, greift der Ressourcen-Manager auf die Ressourcen der Standard Kultur zurück. Wenn keine Ressourcen Menge für die Standard Kultur gefunden wird, löst die Methode eine <xref:System.Resources.MissingManifestResourceException> Ausnahme aus, oder, wenn erwartet wird, dass sich der Ressourcen Satz in einer Satellitenassembly befindet, eine <xref:System.Resources.MissingSatelliteAssemblyException> Ausnahme. Wenn der Ressourcen-Manager einen geeigneten Ressourcen Satz laden kann, aber keine Ressource mit dem Namen `name`finden kann, gibt die Methode `null`zurück.  
  
 Die <xref:System.Resources.ResourceManager.IgnoreCase%2A>-Eigenschaft bestimmt, ob beim Vergleich von `name` mit den Namen der Ressourcen die Groß-/Kleinschreibung beachtet wird (Standardeinstellung) oder die Groß-/Kleinschreibung beachtet  
  
> [!CAUTION]
>  Diese Methode kann weitere Ausnahmen auslösen, als aufgeführt sind. Ein Grund hierfür könnte sein, dass eine Methode, die von dieser Methode aufgerufen wird, eine Ausnahme auslöst.  Beispielsweise kann eine <xref:System.IO.FileLoadException> Ausnahme ausgelöst werden, wenn ein Fehler beim Bereitstellen oder Installieren einer Satellitenassembly aufgetreten ist, oder es kann eine <xref:System.Runtime.Serialization.SerializationException> Ausnahme ausgelöst werden, wenn ein benutzerdefinierter Typ eine benutzerdefinierte Ausnahme auslöst, wenn der Typ deserialisiert wird.  
  
## <a name="performance-considerations"></a>Überlegungen zur Leistung  
 Wenn Sie die <xref:System.Resources.ResourceManager.GetObject%2A>-Methode mehrmals mit demselben `name` Parameter aufrufen, ist nicht von der Methode abhängig, die einen Verweis auf das gleiche Objekt mit jedem-Befehl zurückgibt. Dies liegt daran, dass die <xref:System.Resources.ResourceManager.GetObject%2A>-Methode einen Verweis auf ein vorhandenes Ressourcen Objekt in einem Cache zurückgeben oder die Ressource neu laden und einen Verweis auf ein neues Ressourcen Objekt zurückgeben kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29> -Methode verwendet, um ein benutzerdefiniertes Objekt zu deserialisieren. Das Beispiel enthält eine Quell Code Datei mit dem Namen NumberInfo.cs ("numInfo. vb", wenn Sie Visual Basic), die die folgende Struktur mit dem Namen "`Numbers`" definiert. Diese Struktur ist für die Verwendung durch eine einfache Schulungs-APP gedacht, die nicht englischsprachige Schüler und Studenten in englischer Sprache anzählt. Beachten Sie, dass die `Numbers`-Klasse mit dem <xref:System.SerializableAttribute>-Attribut markiert ist.  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/numberinfo.cs#1)]
 [!code-vb[System.Resources.ResourceManager.GetObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/numberinfo.vb#1)]  
  
 Der folgende Quellcode aus einer Datei mit dem Namen CreateResources.cs Visual Basic ("") erstellt XML-Ressourcen Dateien für die englischsprachige Standardsprache sowie für die Sprachen Französisch, Portugiesisch und Russisch.  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/createresources.cs#2)]
 [!code-vb[System.Resources.ResourceManager.GetObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/createresources.vb#2)]  
  
 Die Ressourcen werden von der folgenden App genutzt, mit der die aktuelle Benutzeroberflächen Kultur auf Französisch (Frankreich), Portugiesisch (Brasilien) oder Russisch (Russische Föderation) festgelegt wird. Er ruft die <xref:System.Resources.ResourceManager.GetObject%28System.String%29>-Methode auf, um ein `Numbers` Objekt zu erhalten, das lokalisierte Zahlen enthält, und die <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29>-Methode, um ein `Numbers` Objekt zu erhalten, das englische sprach Nummern enthält Anschließend werden ungerade Zahlen mithilfe der aktuellen Benutzeroberflächen Kultur und der englischen Sprache angezeigt. Die Quell Code Datei hat den Namen ShowNumbers.cs (shownumbers. vb).  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/shownumbers.cs#3)]
 [!code-vb[System.Resources.ResourceManager.GetObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/shownumbers.vb#3)]  
  
 Sie können die folgende Batchdatei verwenden, um die Visual Basic-Version des Beispiels zu erstellen und auszuführen. Wenn Sie verwenden C#, ersetzen Sie `vbc` durch `csc`, und ersetzen Sie die Erweiterung `.vb` durch `.cs`.  
  
```  
  
vbc /t:library NumberInfo.vb  
  
vbc CreateResources.vb /r:NumberInfo.dll  
CreateResources  
  
resgen NumberResources.resx /r:NumberInfo.dll  
  
resgen NumberResources.fr.resx /r:Numberinfo.dll  
Md fr  
al /embed:NumberResources.fr.resources /culture:fr /t:lib /out:fr\ShowNumbers.resources.dll  
  
resgen NumberResources.pt.resx  /r:Numberinfo.dll  
Md pt  
al /embed:NumberResources.pt.resources /culture:pt /t:lib /out:pt\ShowNumbers.resources.dll  
  
resgen NumberResources.ru.resx /r:Numberinfo.dll  
Md ru  
al /embed:NumberResources.ru.resources /culture:ru /t:lib /out:ru\ShowNumbers.resources.dll  
  
vbc ShowNumbers.vb /r:NumberInfo.dll /resource:NumberResources.resources  
ShowNumbers.exe  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Es wurde kein passender Satz von Ressourcen gefunden, und es sind keine Standardkulturressourcen vorhanden. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Die Ressourcen der Standardkultur befinden sich in einer Satellitenassembly, die nicht gefunden werden konnte. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <threadsafe>Die <see cref="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)" />-Methode ist Thread sicher.</threadsafe>
        <altmember cref="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md">Verpacken und Bereitstellen von Ressourcen</related>
      </Docs>
    </Member>
    <Member MemberName="GetResourceFileName">
      <MemberSignature Language="C#" Value="protected virtual string GetResourceFileName (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetResourceFileName(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetResourceFileName (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetResourceFileName(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetResourceFileName : System.Globalization.CultureInfo -&gt; string&#xA;override this.GetResourceFileName : System.Globalization.CultureInfo -&gt; string" Usage="resourceManager.GetResourceFileName culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Das Kulturobjekt, für das ein Ressourcendateiname erstellt wird.</param>
        <summary>Generiert den Ressourcendateinamen für das angegebene <see cref="T:System.Globalization.CultureInfo" />-Objekt.</summary>
        <returns>Der Name, der für eine Ressourcendatei des angegebenen <see cref="T:System.Globalization.CultureInfo" />-Objekts verwendet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceManager.GetResourceFileName%2A>-Methode ist nur nützlich, wenn Sie eine eigene Klasse schreiben, die von der <xref:System.Resources.ResourceManager>-Klasse abgeleitet wird.  
  
 Diese Methode verwendet die <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>-Eigenschaft als Teil des Datei namens für alle Kulturen außer der invarianten Kultur. Diese Methode sucht nicht im Manifest einer Assembly oder berührt den Datenträger und wird nur zum Erstellen eines Ressourcen Dateinamens (geeignet für die Übergabe an den <xref:System.Resources.ResourceReader>-Konstruktor) oder eines manifestressourcenblobnamens verwendet.  
  
 Eine abgeleitete Klasse kann diese Methode überschreiben, um nach einer anderen Erweiterung zu suchen, z. b. ". RESX "oder ein völlig anderes Schema für die Benennung von Ressourcen Dateien. Beachten Sie, dass die-Methode verwendet werden kann, um den Namen einer Ressourcen Datei innerhalb einer Satellitenassembly anzupassen und nicht den Namen der Satellitenassembly selbst anzupassen.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/index.md">Globalisieren und Lokalisieren von .NET-Anwendungen</related>
      </Docs>
    </Member>
    <Member MemberName="GetResourceSet">
      <MemberSignature Language="C#" Value="public virtual System.Resources.ResourceSet GetResourceSet (System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Resources.ResourceSet GetResourceSet(class System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceSet (culture As CultureInfo, createIfNotExists As Boolean, tryParents As Boolean) As ResourceSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Resources::ResourceSet ^ GetResourceSet(System::Globalization::CultureInfo ^ culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="F#" Value="abstract member GetResourceSet : System.Globalization.CultureInfo * bool * bool -&gt; System.Resources.ResourceSet&#xA;override this.GetResourceSet : System.Globalization.CultureInfo * bool * bool -&gt; System.Resources.ResourceSet" Usage="resourceManager.GetResourceSet (culture, createIfNotExists, tryParents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="createIfNotExists" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="tryParents" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Die Kultur, deren Ressourcen abgerufen werden sollen.</param>
        <param name="createIfNotExists"><see langword="true" />, um den Ressourcensatz zu laden, falls er noch nicht geladen wurde; andernfalls <see langword="false" />.</param>
        <param name="tryParents"><see langword="true" />, um Ressourcenfallback zu verwenden, um eine entsprechende Ressource zu laden, wenn der Ressourcensatz nicht gefunden werden kann; <see langword="false" />, um den Ressourcenfallback-Prozess zu umgehen.</param>
        <summary>Ruft die Ressource ab, die für eine bestimmte Kultur festgelegt wird.</summary>
        <returns>Die Ressource, die für die angegebene Kultur festgelegt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der zurückgegebene Ressourcen Satz stellt die Ressourcen dar, die für die angegebene Kultur lokalisiert sind. Wenn die Ressourcen für diese Kultur nicht lokalisiert wurden und `tryParents` `true`ist, verwendet <xref:System.Resources.ResourceManager.GetResourceSet%2A> Ressourcen Fall Back Regeln, um eine entsprechende Ressource zu laden. Wenn `tryParents` `false` und ein kulturspezifischer Ressourcen Satz nicht gefunden werden kann, gibt die Methode `null`zurück. Weitere Informationen zum Ressourcen Fall Back finden Sie im Abschnitt "Ressourcen Fall Back-Prozess" im Artikel [Verpacken und](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) Bereitstellen von Ressourcen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceManager.GetResourceSet%2A>-Methode aufgerufen, um kulturspezifische Ressourcen für die Kultur Französisch (Frankreich) abzurufen. Anschließend werden alle Ressourcen im Ressourcen Satz aufgelistet. Sie enthält den Quellcode für eine ausführbare Datei mit dem Namen "shownumbers. exe". Sie enthält auch die folgenden beiden Textdateien, die die Namen von Zahlen enthalten. Der erste, "numresources. txt", enthält die Namen der Zahlen von 1 bis 10 in der englischen Sprache:  
  
```  
  
one=one  
two=two  
three=three  
four=four  
five=five  
six=six  
seven=seven  
eight=eight  
nine=nine  
ten=ten  
  
```  
  
 Die zweite, NumberResources.fr-fr. txt, enthält die Namen der Zahlen von einem bis vier in der französischen Sprache:  
  
```  
  
one=un  
two=deux  
three=trois  
four=quatre  
  
```  
  
 Sie können eine Batchdatei verwenden, um die Ressourcen Dateien zu generieren, die englischsprachige Ressourcen Datei in die ausführbare Datei einzubetten und eine Satellitenassembly für die französischsprachigen Ressourcen zu erstellen. Im folgenden finden Sie die Batchdatei zum Generieren einer ausführbaren Datei mithilfe des Visual Basic-Compilers:  
  
```  
  
resgen NumberResources.txt  
vbc shownumbers.vb /resource:NumberResources.resources  
  
md fr-FR  
resgen NumberResources.fr-FR.txt  
al /out:fr-FR\ShowNumbers.resources.dll /culture:fr-FR /embed:NumberResources.fr-FR.resources  
```  
  
 Für den C# Compiler können Sie die folgende Batchdatei verwenden:  
  
```  
  
resgen NumberResources.txt  
csc shownumbers.cs /resource:NumberResources.resources  
  
md fr-FR  
resgen NumberResources.fr-FR.txt  
al /out:fr-FR\ShowNumbers.resources.dll /culture:fr-FR /embed:NumberResources.fr-FR.resources  
  
```  
  
 [!code-csharp[System.Resources.ResourceManager.GetResourceSet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getresourceset/cs/shownumbers.cs#1)]
 [!code-vb[System.Resources.ResourceManager.GetResourceSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getresourceset/vb/shownumbers.vb#1)]  
  
 Beachten Sie Folgendes: Wenn Sie den Wert des `createIfNotExists` Arguments in `false`ändern, gibt der Methodenaufrufe `null`zurück, da Ressourcen-Manager nicht bereits die französischen Sprachressourcen geladen hat.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="culture" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException"><paramref name="tryParents" /> ist <see langword="true" />, es wurde kein passender Satz von Ressourcen gefunden, und es sind keine Ressourcen für die Standardkultur vorhanden.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/index.md">Globalisieren und Lokalisieren von .NET-Anwendungen</related>
      </Docs>
    </Member>
    <Member MemberName="GetSatelliteContractVersion">
      <MemberSignature Language="C#" Value="protected static Version GetSatelliteContractVersion (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Version GetSatelliteContractVersion(class System.Reflection.Assembly a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetSatelliteContractVersion (a As Assembly) As Version" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Version ^ GetSatelliteContractVersion(System::Reflection::Assembly ^ a);" />
      <MemberSignature Language="F#" Value="static member GetSatelliteContractVersion : System.Reflection.Assembly -&gt; Version" Usage="System.Resources.ResourceManager.GetSatelliteContractVersion a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="a">Die Assembly, die auf das <see cref="T:System.Resources.SatelliteContractVersionAttribute" />-Attribut überprüft werden soll.</param>
        <summary>Gibt die vom <see cref="T:System.Resources.SatelliteContractVersionAttribute" />-Attribut in der gegebenen Assembly angegebene Version zurück.</summary>
        <returns>Die Satellitenvertragsversion der angegebenen Assembly oder <see langword="null" />, wenn keine Version gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zur Versionierung von Satellitenassemblys finden Sie im <xref:System.Resources.SatelliteContractVersionAttribute> Referenz Thema.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die in der Assembly <paramref name="a" /> gefundene <see cref="T:System.Version" /> ist ungültig.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="a" /> ist <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <altmember cref="T:System.Resources.SatelliteContractVersionAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStream">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt ein nicht verwaltetes Arbeitsspeicher-Datenstromobjekt aus einer angegebenen Ressource zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.UnmanagedMemoryStream GetStream (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.UnmanagedMemoryStream GetStream(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (name As String) As UnmanagedMemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::UnmanagedMemoryStream ^ GetStream(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetStream : string -&gt; System.IO.UnmanagedMemoryStream" Usage="resourceManager.GetStream name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.UnmanagedMemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Der Name einer Ressource.</param>
        <summary>Gibt ein nicht verwaltetes Arbeitsspeicher-Datenstromobjekt aus der angegebenen Ressource zurück.</summary>
        <returns>Ein nicht verwaltetes Arbeitsspeicherstreamobjekt, das eine Ressource darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceManager.GetStream%2A>-Methode nimmt den Namen einer Ressource an, die als <xref:System.IO.MemoryStream>-Objekt gespeichert ist, Ruft den Wert der <xref:System.Object>-Ressource ab und gibt ein <xref:System.IO.UnmanagedMemoryStream> Objekt zurück. Hierfür ist es erforderlich, dass Sie direkt mit einem Stream von Bytes arbeiten, die Sie dann in ein Objekt konvertieren. Diese Methode ist hauptsächlich aus Leistungsgründen nützlich: das Abrufen einer Ressource als Bytestream anstelle eines expliziten Objekts kann die Leistung verbessern.  
  
 Die zurückgegebene Ressource wird für die Benutzeroberflächen Kultur des aktuellen Threads lokalisiert, der durch die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft definiert wird. Wenn die Ressource für diese Kultur nicht lokalisiert ist, verwendet der Ressourcen-Manager Fall Back Regeln, um eine entsprechende Ressource zu laden. Wenn kein verwendender Satz lokalisierter Ressourcen gefunden wird, wird der <xref:System.Resources.ResourceManager> auf die Ressourcen der Standard Kultur zurückgegriffen. Wenn keine Ressourcen Menge für die Standard Kultur gefunden wird, löst die Methode eine <xref:System.Resources.MissingManifestResourceException> Ausnahme aus, oder, wenn erwartet wird, dass sich der Ressourcen Satz in einer Satellitenassembly befindet, eine <xref:System.Resources.MissingSatelliteAssemblyException> Ausnahme. Wenn der Ressourcen-Manager einen geeigneten Ressourcen Satz laden kann, aber keine Ressource mit dem Namen `name`finden kann, gibt die Methode `null`zurück.  
  
 Die <xref:System.Resources.ResourceManager.IgnoreCase%2A>-Eigenschaft bestimmt, ob beim Vergleich von `name` mit den Namen der Ressourcen die Groß-/Kleinschreibung beachtet wird (Standardeinstellung) oder die Groß-/Kleinschreibung beachtet  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceManager.GetStream%28System.String%29> -Methode verwendet, um eine Bitmap abzurufen, die im Begrüßungsbildschirm-Fenster einer App erscheint. Der folgende Quellcode aus einer Datei mit dem Namen CreateResources.cs ( C#for) oder der Datei "kreateresources. vb" (für Visual Basic) generiert eine. resx-Datei mit dem Namen "appresources. resx", die das serialisierte Bild enthält. In diesem Fall wird das Bild aus einer Datei namens SplashScreen.jpg geladen. Sie können den Dateinamen ändern und damit Ihr eigenes Bild laden.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#4](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/createresources.cs#4)]
 [!code-vb[Conceptual.Resources.Retrieving#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/createresources.vb#4)]  
  
 Der folgende Code aus einer Datei mit dem Namen GetStream.cs C#(für) oder GetStream. vb (für Visual Basic) ruft dann die Ressource ab und zeigt das Bild in einem <xref:System.Windows.Forms.PictureBox?displayProperty=nameWithType>-Steuerelement an.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#5](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/getstream.cs#5)]
 [!code-vb[Conceptual.Resources.Retrieving#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/getstream.vb#5)]  
  
 Sie können die folgende Batchdatei verwenden, um das C#-Beispiel zu erstellen. Ändern Sie in Visual Basic `csc` in `vbc`und ändern Sie die Erweiterung des Quellcodes von `.cs` in `.vb`. 
  
```  
  
csc CreateResources.cs  
CreateResources  
  
resgen AppResources.resx  
  
csc GetStream.cs /resource:AppResources.resources  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Wert der angegebenen Ressource ist kein <see cref="T:System.IO.MemoryStream" />-Objekt.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Es wurde kein passender Satz von Ressourcen gefunden, und es sind keine Standardressourcen vorhanden. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Die Ressourcen der Standardkultur befinden sich in einer Satellitenassembly, die nicht gefunden werden konnte. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.UnmanagedMemoryStream GetStream (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.UnmanagedMemoryStream GetStream(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (name As String, culture As CultureInfo) As UnmanagedMemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::UnmanagedMemoryStream ^ GetStream(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetStream : string * System.Globalization.CultureInfo -&gt; System.IO.UnmanagedMemoryStream" Usage="resourceManager.GetStream (name, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.UnmanagedMemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Der Name einer Ressource.</param>
        <param name="culture">Ein Objekt, das die Kultur für die Ressourcensuche angibt. Wenn <paramref name="culture" /><see langword="null" /> ist, wird die Kultur für den aktuellen Thread verwendet.</param>
        <summary>Gibt mithilfe der angegebenen Kultur ein nicht verwaltetes Arbeitsspeicherstreamobjekt aus der angegebenen Ressource zurück.</summary>
        <returns>Ein nicht verwaltetes Arbeitsspeicherstreamobjekt, das eine Ressource darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceManager.GetStream%2A>-Methode nimmt den Namen einer Ressource an, die als <xref:System.IO.MemoryStream>-Objekt gespeichert ist, Ruft den Wert der <xref:System.Object>-Ressource ab und gibt ein <xref:System.IO.UnmanagedMemoryStream> Objekt zurück. Hierfür ist es erforderlich, dass Sie direkt mit einem Stream von Bytes arbeiten, die Sie dann in ein Objekt konvertieren. Diese Methode ist hauptsächlich aus Leistungsgründen nützlich: das Abrufen einer Ressource als Bytestream anstelle eines expliziten Objekts kann die Leistung verbessern.  
  
 Die zurückgegebene Ressource ist für die Kultur lokalisiert, die durch `culture`angegeben wird, oder für die Kultur, die durch die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft angegeben wird, wenn `culture` `null`ist. Wenn die Ressource für diese Kultur nicht lokalisiert ist, verwendet der Ressourcen-Manager Fall Back Regeln, um eine entsprechende Ressource zu laden. Wenn kein verwendender Satz lokalisierter Ressourcen gefunden wird, wird der <xref:System.Resources.ResourceManager> auf die Ressourcen der Standard Kultur zurückgegriffen. Wenn keine Ressourcen Menge für die Standard Kultur gefunden wird, löst die Methode eine <xref:System.Resources.MissingManifestResourceException> Ausnahme aus, oder, wenn erwartet wird, dass sich der Ressourcen Satz in einer Satellitenassembly befindet, eine <xref:System.Resources.MissingSatelliteAssemblyException> Ausnahme. Wenn der Ressourcen-Manager einen geeigneten Ressourcen Satz laden kann, aber keine Ressource mit dem Namen `name`finden kann, gibt die Methode `null`zurück.  
  
 Die <xref:System.Resources.ResourceManager.IgnoreCase%2A>-Eigenschaft bestimmt, ob beim Vergleich von `name` mit den Namen der Ressourcen die Groß-/Kleinschreibung beachtet wird (Standardeinstellung) oder die Groß-/Kleinschreibung beachtet  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Wert der angegebenen Ressource ist kein <see cref="T:System.IO.MemoryStream" />-Objekt.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Es wurde kein passender Satz von Ressourcen gefunden, und es sind keine Standardressourcen vorhanden. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Die Ressourcen der Standardkultur befinden sich in einer Satellitenassembly, die nicht gefunden werden konnte. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetString">
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt die angegebene Zeichenfolgenressource für die angegebene Kultur oder die aktuelle UI-Kultur zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (string name);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(string name) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString (name As String) As String" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString(System::String ^ name);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="F#" Value="member this.GetString : string -&gt; string" Usage="resourceManager.GetString name" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="C#" Value="public virtual string GetString (string name);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name) cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String) As String" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetString : string -&gt; string&#xA;override this.GetString : string -&gt; string" Usage="resourceManager.GetString name" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Ressource.</param>
        <summary>Gibt den Wert der angegebenen Zeichenkette zurück.</summary>
        <returns>Der Wert der Ressource, die für die aktuelle Benutzeroberflächenkultur des Aufrufers lokalisiert wurde, oder <see langword="null" />, wenn <paramref name="name" /> nicht in einem Ressourcensatz gefunden werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Desktop-Apps  
 In Desktop-Apps wird die Ressource, die zurückgegeben wird, für die Benutzeroberflächen Kultur des aktuellen Threads lokalisiert, wie durch die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft definiert. Wenn die Ressource nicht für diese Kultur lokalisiert wurde, testet der Resource Manager nach einer Ressource, indem er die im Artikel [Verpacken und](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) Bereitstellen von Ressourcen beschriebenen Schritte im Abschnitt "Ressourcen Fall Back-Prozess" durchführt. Wenn kein verwendender Satz lokalisierter Ressourcen gefunden wird, greift der Ressourcen-Manager auf die Ressourcen der Standard Kultur zurück. Wenn der Ressourcen-Manager den Ressourcen Satz der Standard Kultur nicht laden kann, löst die Methode eine <xref:System.Resources.MissingManifestResourceException> Ausnahme aus oder, wenn erwartet wird, dass sich der Ressourcen Satz in einer Satellitenassembly befindet, eine <xref:System.Resources.MissingSatelliteAssemblyException> Ausnahme. Wenn der Ressourcen-Manager einen geeigneten Ressourcen Satz laden kann, aber keine Ressource mit dem Namen `name`finden kann, gibt die Methode `null`zurück.  
  
 Die <xref:System.Resources.ResourceManager.IgnoreCase%2A>-Eigenschaft bestimmt, ob beim Vergleich von `name` mit den Namen der Ressourcen die Groß-/Kleinschreibung beachtet wird (Standardeinstellung) oder die Groß-/Kleinschreibung beachtet  
  
> [!CAUTION]
>  Diese Methode kann weitere Ausnahmen auslösen, als aufgeführt sind. Ein Grund hierfür könnte sein, dass eine Methode, die von dieser Methode aufgerufen wird, eine Ausnahme auslöst.  Beispielsweise kann eine <xref:System.IO.FileLoadException> Ausnahme ausgelöst werden, wenn ein Fehler beim Bereitstellen oder Installieren einer Satellitenassembly aufgetreten ist, oder es kann eine <xref:System.Runtime.Serialization.SerializationException> Ausnahme ausgelöst werden, wenn ein benutzerdefinierter Typ eine benutzerdefinierte Ausnahme auslöst, wenn der Typ deserialisiert wird.  
  
## <a name="includewin8_appname_longincludeswin8-appname-long-mdmd-apps"></a>[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps  
  
> [!IMPORTANT]
>  Obwohl die <xref:System.Resources.ResourceManager>-Klasse in [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps unterstützt wird, wird deren Verwendung nicht empfohlen. Verwenden Sie diese Klasse nur, wenn Sie [!INCLUDE[net_portable](~/includes/net-portable-md.md)] Projekte entwickeln, die mit [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps verwendet werden können. Verwenden Sie stattdessen die [Windows. applicationmodel. resources. resourceloader](https://go.microsoft.com/fwlink/p/?LinkId=238182) -Klasse, um Ressourcen aus [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-apps abzurufen.  
  
 In [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-apps gibt die <xref:System.Resources.ResourceManager.GetString%28System.String%29>-Methode den Wert der `name` Zeichen folgen Ressource zurück, die für die aktuellen UI-Kultur Einstellungen des Aufrufers lokalisiert wurde. Die Liste der Kulturen wird von der bevorzugten UI-Sprachliste des Betriebssystems abgeleitet. Wenn der Ressourcen-Manager `name`nicht abgleichen kann, gibt die Methode `null`zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceManager.GetString%2A>-Methode verwendet, um kulturspezifische Ressourcen abzurufen. Es besteht aus Ressourcen, die aus txt-Dateien für die Kulturen Englisch (en), Französisch (Frankreich) (fr-FR) und Russisch (Russland) (ru-ru) kompiliert wurden. Im Beispiel wird die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur in Englisch (USA), Französisch (Frankreich), Russisch (Russische Föderation) und Schwedisch (Schweden) geändert. Anschließend wird die <xref:System.Resources.ResourceManager.GetString%2A>-Methode aufgerufen, um die lokalisierte Zeichenfolge abzurufen, die zusammen mit dem aktuellen Tag und Monat angezeigt wird. Beachten Sie, dass die Ausgabe die entsprechende lokalisierte Zeichenfolge anzeigt, es sei denn, die aktuelle Benutzeroberflächen Kultur ist Schwedisch (Sweden). Da die schwedischen Sprachressourcen nicht verfügbar sind, verwendet die APP stattdessen die Ressourcen der Standard Kultur (Englisch). Das Beispiel erfordert die textbasierten Ressourcen Dateien, die in der folgenden Tabelle aufgeführt sind. Jede verfügt über eine einzelne Zeichen folgen Ressource mit dem Namen `DateStart`.  
  
|culture|Dateiname|Ressourcenname|Ressourcenwert|  
|-------------|---------------|-------------------|--------------------|  
|en-US|Datestrings. txt|`DateStart`|Heute ist|  
|fr-FR|DateStrings.fr-fr. txt|`DateStart`|Aujourd Hui, c/c|  
|ru-RU|DateStrings.ru-ru. txt|`DateStart`|In der|  
  
 Sie können die folgende Batchdatei verwenden, um das C# Beispiel zu kompilieren. Ändern Sie in Visual Basic `csc` in `vbc`und ändern Sie die Erweiterung des Quellcodes von `.cs` in `.vb`.  
  
```  
resgen DateStrings.txt  
csc showdate.cs /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
```  
  
 Im folgenden finden Sie den Quellcode für das Beispiel (showdate. vb für die Visual Basic Version oder ShowDate.cs für C# die-Version).  
  
 [!code-csharp[System.Resources.ResourceManager.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate.cs#2)]
 [!code-vb[System.Resources.ResourceManager.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Der Wert der angegebenen Ressource ist keine Zeichenfolge.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Es wurde kein passender Satz von Ressourcen gefunden, und es sind keine neutralen Ressourcen für eine neutrale Kultur vorhanden. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Die Ressourcen der Standardkultur befinden sich in einer Satellitenassembly, die nicht gefunden werden konnte. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <threadsafe>Die <see cref="M:System.Resources.ResourceManager.GetString(System.String)" />-Methode ist Thread sicher.</threadsafe>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md">Verpacken und Bereitstellen von Ressourcen</related>
        <related type="Article" href="https://msdn.microsoft.com/library/eca16922-1c46-4f68-aefe-e7a12283641f">Abrufen von Ressourcen in Satellitenassemblys</related>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String, culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetString : string * System.Globalization.CultureInfo -&gt; string&#xA;override this.GetString : string * System.Globalization.CultureInfo -&gt; string" Usage="resourceManager.GetString (name, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Ressource.</param>
        <param name="culture">Das Objekt, das die Kultur darstellt, für die die Ressource lokalisiert wird.</param>
        <summary>Gibt den Wert der Zeichenfolgenressource zurück, die für die angegebene Kultur lokalisiert wurde.</summary>
        <returns>Der Wert der Ressource, die für die angegebene Kultur lokalisiert wurde, oder <see langword="null" />, wenn <paramref name="name" /> nicht in einem Ressourcensatz gefunden werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Desktop-Apps  
 Wenn `culture` in Desktop-Apps `null`ist, verwendet die <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>-Methode die aktuelle Benutzeroberflächen Kultur, die von der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft abgerufen wird.  
  
 Die Ressource, die zurückgegeben wird, wird für die durch den `culture`-Parameter angegebene Kultur lokalisiert. Wenn die Ressource nicht für `culture`lokalisiert wurde, testet der Ressourcen-Manager nach einer Ressource, indem Sie die im Abschnitt "Ressourcen Fall Back-Prozess" des Themas [Verpacken und](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) Bereitstellen von Ressourcen beschriebenen Schritte ausführen. Wenn kein verwendender Ressourcen Satz gefunden wird, greift der Ressourcen-Manager auf die Ressourcen der Standard Kultur zurück. Wenn der Ressourcen-Manager den Ressourcen Satz der Standard Kultur nicht laden kann, löst die Methode eine <xref:System.Resources.MissingManifestResourceException> Ausnahme aus oder, wenn erwartet wird, dass sich der Ressourcen Satz in einer Satellitenassembly befindet, eine <xref:System.Resources.MissingSatelliteAssemblyException> Ausnahme. Wenn der Ressourcen-Manager einen geeigneten Ressourcen Satz laden kann, aber keine Ressource mit dem Namen `name`finden kann, gibt die Methode `null`zurück.  
  
 Die <xref:System.Resources.ResourceManager.IgnoreCase%2A>-Eigenschaft bestimmt, ob beim Vergleich von `name` mit den Namen der Ressourcen die Groß-/Kleinschreibung beachtet wird (Standardeinstellung) oder die Groß-/Kleinschreibung beachtet  
  
> [!CAUTION]
>  Diese Methode kann weitere Ausnahmen auslösen, als aufgeführt sind. Ein Grund hierfür könnte sein, dass eine Methode, die von dieser Methode aufgerufen wird, eine Ausnahme auslöst.  Beispielsweise kann eine <xref:System.IO.FileLoadException> Ausnahme ausgelöst werden, wenn ein Fehler beim Bereitstellen oder Installieren einer Satellitenassembly aufgetreten ist, oder es kann eine <xref:System.Runtime.Serialization.SerializationException> Ausnahme ausgelöst werden, wenn ein benutzerdefinierter Typ eine benutzerdefinierte Ausnahme auslöst, wenn der Typ deserialisiert wird.  
  
## <a name="includewin8_appname_longincludeswin8-appname-long-mdmd-apps"></a>[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps  
  
> [!IMPORTANT]
>  Obwohl die <xref:System.Resources.ResourceManager>-Klasse in [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps unterstützt wird, wird deren Verwendung nicht empfohlen. Verwenden Sie diese Klasse nur, wenn Sie [!INCLUDE[net_portable](~/includes/net-portable-md.md)] Projekte entwickeln, die mit [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-Apps verwendet werden können. Verwenden Sie stattdessen die [Windows. applicationmodel. resources. resourceloader](https://go.microsoft.com/fwlink/p/?LinkId=238182) -Klasse, um Ressourcen aus [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-apps abzurufen.  
  
 In [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]-apps gibt die <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>-Methode den Wert der `name` Zeichen folgen Ressource zurück, die für die vom `culture`-Parameter angegebene Kultur lokalisiert wird. Wenn die Ressource nicht für die `culture` Kultur lokalisiert ist, wird in der Suche die gesamte [!INCLUDE[win8](~/includes/win8-md.md)] Sprachen-fallbackliste verwendet, und nach dem Betrachten der Standard Kultur wird angehalten. Wenn der Ressourcen-Manager `name`nicht abgleichen kann, gibt die Methode `null`zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>-Methode verwendet, um kulturspezifische Ressourcen abzurufen. Die Standard Kultur des Beispiels ist Englisch (en) und umfasst Satellitenassemblys für die Kulturen Französisch (Frankreich) (fr-FR) und Russisch (Russland) (ru-ru). Im Beispiel wird die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur in Russisch (Russische Föderation) geändert, bevor <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>aufgerufen wird. Anschließend werden die <xref:System.Resources.ResourceManager.GetString%2A>-Methode und die <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>-Methode aufgerufen, und <xref:System.Globalization.CultureInfo> Objekte, die die Kulturen Französisch (Frankreich) und Schwedisch (Schweden) darstellen, werden an jede Methode weitergeleitet. In der Ausgabe werden der Monat und der Tag des Monats sowie die Zeichenfolge, die Ihnen vorangestellt ist, in Französisch angezeigt, da die <xref:System.Resources.ResourceManager.GetString%2A> Methode die französische Sprachressource abrufen kann. Wenn jedoch die Kultur Swedish (Sweden) verwendet wird, werden der Monat und der Tag des Monats in Schwedisch angezeigt, obwohl die Zeichenfolge, die Ihnen vorangestellt ist, Englisch ist. Der Grund hierfür ist, dass der Ressourcen-Manager keine lokalisierten schwedischen Sprachressourcen finden kann, daher wird stattdessen eine Ressource für die englische Standard Kultur zurückgegeben.  
  
 Das Beispiel erfordert die textbasierten Ressourcen Dateien, die in der folgenden Tabelle aufgeführt sind. Jede verfügt über eine einzelne Zeichen folgen Ressource mit dem Namen `DateStart`.  
  
|culture|Dateiname|Ressourcenname|Ressourcenwert|  
|-------------|---------------|-------------------|--------------------|  
|en-US|Datestrings. txt|`DateStart`|Heute ist|  
|fr-FR|DateStrings.fr-fr. txt|`DateStart`|Aujourd Hui, c/c|  
|ru-RU|DateStrings.ru-ru. txt|`DateStart`|In der|  
  
 Sie können die folgende Batchdatei verwenden, um das Visual Basic Beispiel zu kompilieren. Um in C#zu kompilieren, ändern Sie `vbc` in `csc`, und ändern Sie die Erweiterung der Quell Code Datei von `.vb` in `.cs`.  
  
```  
resgen DateStrings.txt  
vbc showdate.vb /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
```  
  
 Im folgenden finden Sie den Quellcode für das Beispiel (showdate. vb für die Visual Basic Version oder ShowDate.cs für C# die-Version).  
  
 [!code-csharp[System.Resources.ResourceManager.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate2.cs#3)]
 [!code-vb[System.Resources.ResourceManager.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Der Wert der angegebenen Ressource ist keine Zeichenfolge.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Es wurde kein passender Satz von Ressourcen gefunden, und es sind keine Ressourcen für eine Standardkultur vorhanden. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Die Ressourcen der Standardkultur befinden sich in einer Satellitenassembly, die nicht gefunden werden konnte. Informationen zur Behandlung dieser Ausnahme finden Sie im Abschnitt über die Behandlung von MissingManifestResourceException- und MissingSatelliteAssemblyException-Ausnahmen im Thema zur <see cref="T:System.Resources.ResourceManager" />-Klasse.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <threadsafe>Die <see cref="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)" />-Methode ist Thread sicher.</threadsafe>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md">Verpacken und Bereitstellen von Ressourcen</related>
      </Docs>
    </Member>
    <Member MemberName="HeaderVersionNumber">
      <MemberSignature Language="C#" Value="public static readonly int HeaderVersionNumber;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 HeaderVersionNumber" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.HeaderVersionNumber" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeaderVersionNumber As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int HeaderVersionNumber;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeaderVersionNumber : int" Usage="System.Resources.ResourceManager.HeaderVersionNumber" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Version der Ressourcendateiheader an, die die aktuelle Implementierung von <see cref="T:System.Resources.ResourceManager" /> interpretieren und erstellen kann.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreCase">
      <MemberSignature Language="C#" Value="public virtual bool IgnoreCase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.IgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property IgnoreCase As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IgnoreCase { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreCase : bool with get, set" Usage="System.Resources.ResourceManager.IgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen booleschen Wert ab, der angibt, ob der Ressourcen-Manager eine Ressourcensuche ohne Berücksichtigung der Groß- und Kleinschreibung in der <see cref="M:System.Resources.ResourceManager.GetString(System.String)" />-Methode und der <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" />-Methode zulässt, oder legt diesen fest.</summary>
        <value><see langword="true" />, um die Groß-/Kleinschreibung während der Ressourcensuche zu ignorieren; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert der <xref:System.Resources.ResourceManager.IgnoreCase%2A>-Eigenschaft `false`ist, entspricht eine Ressource mit dem Namen "Resource" nicht der Ressource mit dem Namen "Resource". Wenn <xref:System.Resources.ResourceManager.IgnoreCase%2A> `true`ist, entspricht eine Ressource mit dem Namen "Resource" der Ressource mit dem Namen "Resource". Beachten Sie jedoch, dass die <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType>-und <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType>-Methode <xref:System.Resources.ResourceManager.IgnoreCase%2A> bei `true`die Groß-/Kleinschreibung für Zeichen folgen Vergleiche mit der invarianten Kultur durchführt. Der Vorteil besteht darin, dass die Ergebnisse der Zeichen folgen Vergleiche ohne Berücksichtigung der Groß-/Kleinschreibung auf allen Computern identisch sind, unabhängig von der Kultur. Der Nachteil ist, dass die Ergebnisse nicht mit den Regeln für die Groß-und Kleinschreibung aller Kulturen übereinstimmen.  
  
 Das türkische Alphabet hat beispielsweise zwei Versionen des Zeichens I: eins mit einem Punkt und eins ohne Punkt. In der türkischen Sprache wird das Zeichen I (Unicode 0049) als Großbuchstaben Version eines anderen Zeichen (Unicode 0131) betrachtet. Das Zeichen i (Unicode 0069) gilt als klein geschriebene Version von noch einem anderen Zeichen i (Unicode 0130). Gemäß diesen Regeln für die Groß-und Kleinschreibung sollte ein Zeichen folgen Vergleich der Zeichen i (Unicode 0069) und i (Unicode 0049) für die Kultur "tr-TR" (Türkisch in der Türkei) nicht beachtet werden. Da der Vergleich jedoch mithilfe der Regeln für die Groß-und Kleinschreibung der invarianten Kultur durchgeführt wird, wenn <xref:System.Resources.ResourceManager.IgnoreCase%2A> `true`ist, wird dieser Vergleich erfolgreich durchgeführt.  
  
> [!NOTE]
>  Aus Leistungsgründen empfiehlt es sich, stets die richtige Groß-/Kleinschreibung für Ihre Ressourcennamen anzugeben. Wenn Sie <xref:System.Resources.ResourceManager.IgnoreCase%2A> auf `true` festlegen, kann dies zu einer deutlichen Steigerung des Arbeits Satzes und einem erheblichen Leistungsabfall führen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalGetResourceSet">
      <MemberSignature Language="C#" Value="protected virtual System.Resources.ResourceSet InternalGetResourceSet (System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Resources.ResourceSet InternalGetResourceSet(class System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function InternalGetResourceSet (culture As CultureInfo, createIfNotExists As Boolean, tryParents As Boolean) As ResourceSet" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Resources::ResourceSet ^ InternalGetResourceSet(System::Globalization::CultureInfo ^ culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="F#" Value="abstract member InternalGetResourceSet : System.Globalization.CultureInfo * bool * bool -&gt; System.Resources.ResourceSet&#xA;override this.InternalGetResourceSet : System.Globalization.CultureInfo * bool * bool -&gt; System.Resources.ResourceSet" Usage="resourceManager.InternalGetResourceSet (culture, createIfNotExists, tryParents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="createIfNotExists" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="tryParents" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Das Kulturobjekt, nach dem gesucht werden soll.</param>
        <param name="createIfNotExists"><see langword="true" />, um den Ressourcensatz zu laden, falls er noch nicht geladen wurde; andernfalls <see langword="false" />.</param>
        <param name="tryParents"><see langword="true" />, um übergeordnete <see cref="T:System.Globalization.CultureInfo" />-Objekte zu prüfen, wenn der Ressourcensatz nicht geladen werden kann; andernfalls <see langword="false" />.</param>
        <summary>Stellt die Implementierung zum Suchen eines Ressourcensatzes bereit.</summary>
        <returns>Der angegebene Ressourcensatz.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Resources.MissingManifestResourceException">Die Hauptassembly enthält keine .resources-Datei, die erforderlich ist, um eine Ressource zu suchen.</exception>
        <exception cref="T:System.ExecutionEngineException">In der Laufzeit ist ein interner Fehler aufgetreten.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Die <paramref name="culture" /> zugeordnete Satellitenassembly konnte sich nicht gefunden werden.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
        <block subset="none" type="overrides"><para>Diese Methode schließt den gesamten Arbeitsaufwand ab, der zum Suchen eines Ressourcen Satzes erforderlich ist, und kann rekursiv und reentrant sein. Mit anderen Worten: Diese Methode lädt möglicherweise eine Assembly und löst ein <see cref="E:System.AppDomain.AssemblyLoad" /> Ereignis aus, das dann ein <see cref="T:System.Resources.ResourceManager" /> Objekt zurückgibt, das nicht vollständig initialisiert wurde. Um zusätzliche Sperren zu vermeiden, ist diese Methode nicht Thread sicher. Die Methoden <see cref="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />, <see cref="M:System.Resources.ResourceManager.GetString(System.String)" />und <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /> führen die gesamte erforderliche Synchronisierung durch.</para></block>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/index.md">Globalisieren und Lokalisieren von .NET-Anwendungen</related>
      </Docs>
    </Member>
    <Member MemberName="MagicNumber">
      <MemberSignature Language="C#" Value="public static readonly int MagicNumber;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 MagicNumber" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.MagicNumber" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MagicNumber As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int MagicNumber;" />
      <MemberSignature Language="F#" Value=" staticval mutable MagicNumber : int" Usage="System.Resources.ResourceManager.MagicNumber" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enthält die für die Identifizierung von Ressourcendateien verwendete Nummer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert wird auf 0xBEEFCACE festgelegt. Die ersten vier Bytes des standardmäßigen System Dateiformats enthalten eine 32-Bit-Ganzzahl mit Vorzeichen im Little-Endian-Format (siehe <xref:System.Text.Encoding>).  
  
 Wenn die <xref:System.Resources.ResourceManager.MagicNumber> gefunden wird, sind die folgenden Bytes eine Versionsnummer für einen <xref:System.Resources.ResourceManager> Header, gefolgt von einer Zahl, die angibt, wie viele Bytes ausgelassen werden sollen, um den Header zu überspringen. Die nächste Zahl gibt die Version der <xref:System.Resources.ResourceManager> an, die den Header erstellt hat, gefolgt von Versions spezifischen Informationen.  
  
 Die Versionsnummer für die aktuelle Implementierung ist 1. Die nächsten Bytes stellen eine Zeichenfolge mit Längen Präfix dar, die den Namen einer <xref:System.Resources.IResourceReader>enthält, die diese Datei lesen kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MainAssembly">
      <MemberSignature Language="C#" Value="protected System.Reflection.Assembly MainAssembly;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Reflection.Assembly MainAssembly" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.MainAssembly" />
      <MemberSignature Language="VB.NET" Value="Protected MainAssembly As Assembly " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Reflection::Assembly ^ MainAssembly;" />
      <MemberSignature Language="F#" Value="val mutable MainAssembly : System.Reflection.Assembly" Usage="System.Resources.ResourceManager.MainAssembly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Hauptassembly an, die die Ressourcen enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Resources.ResourceManager.MainAssembly>-Feld ist nur nützlich, wenn Sie eine eigene Klasse schreiben, die von der <xref:System.Resources.ResourceManager>-Klasse abgeleitet wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllResources">
      <MemberSignature Language="C#" Value="public virtual void ReleaseAllResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseAllResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.ReleaseAllResources" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseAllResources ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseAllResources();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseAllResources : unit -&gt; unit&#xA;override this.ReleaseAllResources : unit -&gt; unit" Usage="resourceManager.ReleaseAllResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Teilt dem Ressourcen-Manager mit, die <see cref="M:System.Resources.ResourceSet.Close" />-Methode bei allen <see cref="T:System.Resources.ResourceSet" />-Objekten aufzurufen und alle Ressourcen freizugeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode wird das Workingset in einer laufenden app verkleinert. Alle zukünftigen Ressourcen Suchvorgänge in diesem <xref:System.Resources.ResourceManager> Objekt sind so teuer wie die erste Suche, da der Ressourcen-Manager Ressourcen erneut suchen und laden muss. Dies kann in einigen komplexen Threading Szenarien nützlich sein, in denen das Erstellen eines neuen <xref:System.Resources.ResourceManager> Objekts das geeignete Verhalten ist.  
  
> [!NOTE]
>  Beginnend mit der .NET Framework Version 2,0, ist die <xref:System.Resources.ResourceManager.ReleaseAllResources%2A>-Methode in Bezug auf die Vorgänge <xref:System.Resources.ResourceManager.GetObject%2A>, <xref:System.Resources.ResourceManager.GetString%2A>und <xref:System.Resources.ResourceManager.GetStream%2A> nicht Thread sicher. Der Vorteil dieser Änderung ist eine Leistungsverbesserung für mehrere Threads, die auf Ressourcen zugreifen. Wenn Sie jedoch die <xref:System.Resources.ResourceManager.ReleaseAllResources%2A>-Methode in einem Thread aufzurufen, während gleichzeitig eine Ressource in einem anderen Thread ausgeführt wird, kann der Get-Vorgang eine <xref:System.ObjectDisposedException> Ausnahme auslösen.  
  
 Diese Methode kann auch in Situationen verwendet werden, in denen die verwalteten Instanzen für die vom aktuellen Ressourcen-Manager erstellten Ressourcen deterministisch freigegeben werden müssen, ohne darauf zu warten, dass der Ressourcen-Manager vollständig außerhalb des gültigen Bereichs liegt und die Garbage Collection durchgeführt wird.  
  
> [!NOTE]
>  Durch Aufrufen dieser Methode werden Satellitenassemblys nicht entladen. Verwenden Sie zum Entladen von Satellitenassemblys die <xref:System.AppDomain.Unload%2A>-Methode.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Wenn Sie spät gebunden durch Mechanismen wie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> aufgerufen wird. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ResourceSets">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ResourceSets;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Collections.Hashtable ResourceSets" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.ResourceSets" />
      <MemberSignature Language="VB.NET" Value="Protected ResourceSets As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Collections::Hashtable ^ ResourceSets;" />
      <MemberSignature Language="F#" Value="val mutable ResourceSets : System.Collections.Hashtable" Usage="System.Resources.ResourceManager.ResourceSets" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("call InternalGetResourceSet instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enthält eine <see cref="T:System.Collections.Hashtable" /> die eine Zuordnung von Kulturen zu <see cref="T:System.Resources.ResourceSet" />-Objekten zurückgibt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSetType">
      <MemberSignature Language="C#" Value="public virtual Type ResourceSetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ResourceSetType" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.ResourceSetType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ResourceSetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ResourceSetType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ResourceSetType : Type" Usage="System.Resources.ResourceManager.ResourceSetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ des Ressourcensatzobjekts ab, das der Ressourcen-Manager verwendet, um ein <see cref="T:System.Resources.ResourceSet" />-Objekt zu erstellen.</summary>
        <value>Der Typ des Ressourcensatzobjekts, das der Ressourcen-Manager verwendet, um ein <see cref="T:System.Resources.ResourceSet" />-Objekt zu erstellen.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="IVsaCodeItem" FullName="Microsoft.Vsa.IVsaCodeItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="367398b1e255f6e2e14ba2513fb433a4748755fa" /><Meta Name="ms.sourcegitcommit" Value="218a2e36017b9f4ffa6c10e1644404e6d7d6bd1e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/05/2019" /><Meta Name="ms.locfileid" Value="74839663" /></Metadata><TypeSignature Language="C#" Value="public interface IVsaCodeItem : Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IVsaCodeItem implements class Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Vsa.IVsaCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVsaCodeItem&#xA;Implements IVsaItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IVsaCodeItem : Microsoft::Vsa::IVsaItem" />
  <TypeSignature Language="F#" Value="type IVsaCodeItem = interface&#xA;    interface IVsaItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Vsa</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Vsa.IVsaItem</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Obsolete("Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("E0C0FFE7-7eea-4ee5-b7e4-0080c7eb0b74")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein von der Skript-Engine zu kompilierendes Codeelement dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks  
Das angegebene Code Element kann Klassen, Module oder anderen Quelltext enthalten.

Zum Aufrufen von Membern der IVsaCodeItem-Schnittstelle sind keine Berechtigungen erforderlich.

Die Skript-Engine implementiert diese Schnittstelle, um Code Elemente hinzuzufügen.

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddEventSource">
      <MemberSignature Language="C#" Value="public void AddEventSource (string eventSourceName, string eventSourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventSource(string eventSourceName, string eventSourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEventSource (eventSourceName As String, eventSourceType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEventSource(System::String ^ eventSourceName, System::String ^ eventSourceType);" />
      <MemberSignature Language="F#" Value="abstract member AddEventSource : string * string -&gt; unit" Usage="iVsaCodeItem.AddEventSource (eventSourceName, eventSourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
        <Parameter Name="eventSourceType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Ein programmgesteuerter Name der Ereignisquelle.</param>
        <param name="eventSourceType">Der Typname der Ereignisquelle.</param>
        <summary>Fügt dem Codeelement eine Ereignisquelle hinzu. Das Codeelement verwendet die Ereignisquelle, um ein Ereignis mit der benannten Ereignisquelle zu verknüpfen, indem es die vom Host implementierte IVsaSite.GetEventSourceInstance-Methode aufruft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Die Skript-Engine verwendet Informationen, die von der AddEventSource-Methode bereitgestellt werden, um Ereignisse mit der benannten Ereignis Quelle zu verbinden. Er ruft Ereignis Quellen durch Aufrufen der IVsaSite. GetEventSourceInstance-Methode ab, die vom Host implementiert wird. Die AddEventSource-Methode erstellt eine Klasse, die Ereignisse behandelt, die von einem vom Host bereitgestellten Objekt ausgelöst werden.

> [!NOTE]
> Diese Methode wird von der JScript .NET-Skript-Engine nicht unterstützt. In Fällen, in denen das JScript .NET-Modul ein Ereignis anschließen muss, müssen Sie dazu ein globales Element verwenden. Anstelle von Ereignis Quellen verwendet die JScript .net-Engine AppGlobal-Elementtypen. Weitere Informationen finden Sie unter VsaItemType.


Innerhalb des Code Elements können Sie anhand des Namens auf das Ereignis Quell Objekt zugreifen. Nachdem Sie darauf zugegriffen haben, können Sie Ereignishandler für das-Objekt schreiben. Der Ereignis Quelltyp wird als Zeichenfolge und nicht als Typobjekt, um die Implementierung von Ereignis Quellen durch nicht verwaltete Hosts zu vereinfachen.

Der Compiler verwendet den eventSourceType-Parameter, um an Methoden zu binden, die vom-Typ bereitgestellt werden. Sie wird auch später verwendet, wenn die Skript-Engine die IVsaSite. GetEventSourceInstance-Methode aufruft, um eine Instanz des Type-Objekts anzufordern.

Weitere Informationen zu den Mechanismen zum Einbinden von Ereignissen für die Skript-Engine finden Sie in der IVsaSite. GetEventSourceInstance-Methode.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSourceText">
      <MemberSignature Language="C#" Value="public void AppendSourceText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendSourceText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AppendSourceText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSourceText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSourceText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AppendSourceText : string -&gt; unit" Usage="iVsaCodeItem.AppendSourceText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der an das Codeelement anzufügende Text.</param>
        <summary>Fügt den angegebenen Text an das Ende des Codeelements an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Der angefügte Quelltext wird nicht überprüft. Aus diesem Grund werden ggf. Fehler beim nächsten-Befehl der IVsaEngine. Compile-Methode angezeigt.

Der angefügte Quelltext wird als einzelne Zeichenfolge bereitgestellt. Wenn die Zeichenfolge formatiert werden muss, müssen Sie diese selbst bereitstellen.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeDOM">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeObject CodeDOM { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeObject CodeDOM" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDOM As CodeObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeObject ^ CodeDOM { System::CodeDom::CodeObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDOM : System.CodeDom.CodeObject" Usage="Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das im Codeelement dargestellte CodeDOM (Code Document Object Model) ab.</summary>
        <value>Der CodeDom für das Code Element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Die CodeDOM-Eigenschaft wird in der Regel im Rahmen des Kompilierungs Schritts der Skript-Engine generiert, sodass Sie erst nach einem-Aufrufvorgang der IVsaEngine. Compile-Methode verfügbar ist. Einige VSA-Implementierungen können den CodeDom möglicherweise dynamisch bereitstellen, ohne dass ein expliziter Kompilierungs Schritt erforderlich ist. Hosts können sich jedoch nicht auf dieses Verhalten verlassen. Einige Skript Module, z. b. die JScript .NET-Skript-Engine, unterstützen dieses Verhalten nicht.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventSource">
      <MemberSignature Language="C#" Value="public void RemoveEventSource (string eventSourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventSource(string eventSourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventSource (eventSourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEventSource(System::String ^ eventSourceName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventSource : string -&gt; unit" Usage="iVsaCodeItem.RemoveEventSource eventSourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Der programmgesteuerte Name der zu entfernenden Ereignisquelle.</param>
        <summary>Entfernt die angegebene Ereignisquelle aus dem Codeelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Durch das Entfernen einer Ereignis Quelle wird der zugrunde liegende Ereignishandler nicht aus dem Quelltext entfernt. Stattdessen werden keine Benachrichtigungen mehr für den Ereignishandler erhoben. Daher erhalten Sie einen Compilerfehler, wenn Sie eine Ereignis Quelle löschen, aber die zugrunde liegende Funktion im Quellcode belassen.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceText">
      <MemberSignature Language="C#" Value="public string SourceText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceText : string with get, set" Usage="Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Text für ein angegebenes Codeelement (ggf. einschließlich automatisch generiertem Code) ab oder legt diesen fest.</summary>
        <value>Der Quelltext des Code Elements.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Wenn Sie diese Eigenschaft festlegen, wird der Text nicht der Validierung unterzogen. Aus diesem Grund werden ggf. Fehler beim nächsten-Befehl der IVsaEngine. Compile-Methode angezeigt.

Die sourcetext-Eigenschaft gibt den Quelltext in einer großen Zeichenfolge zurück, einschließlich Formatierungen von Zeichen wie Wagen Rücklauf Zeichen.

Um diese Eigenschaft zu erhalten, darf die Engine nicht geschlossen werden. Zum Festlegen dieser Eigenschaft darf die Engine nicht geschlossen werden, und die Engine darf nicht ausgeführt werden.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

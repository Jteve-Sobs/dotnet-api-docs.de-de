<Type Name="AntiXssEncoder" FullName="System.Web.Security.AntiXss.AntiXssEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="31e388abcbc5c78d78481fd53c9856e9dff9d05e" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="78772976" /></Metadata><TypeSignature Language="C#" Value="public class AntiXssEncoder : System.Web.Util.HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AntiXssEncoder extends System.Web.Util.HttpEncoder" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class AntiXssEncoder&#xA;Inherits HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AntiXssEncoder : System::Web::Util::HttpEncoder" />
  <TypeSignature Language="F#" Value="type AntiXssEncoder = class&#xA;    inherit HttpEncoder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Util.HttpEncoder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Codiert eine Zeichenfolge für die Verwendung in HTML-, XML-, CSS- und URL-Zeichenfolgen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die- <xref:System.Web.Security.AntiXss.AntiXssEncoder> Klasse verwenden, um die-Klasse zu überschreiben <xref:System.Web.Util.HttpEncoder> , die standardmäßig zum Codieren und Decodieren von Zeichen folgen in Methoden von Klassen wie <xref:System.Web.HttpUtility> , und verwendet wird <xref:System.Web.HttpServerUtility> <xref:System.Net.HttpResponseHeader> .  
  
 In der <xref:System.Web.Security.AntiXss.AntiXssEncoder> -Klasse werden alle Zeichen, die nicht in der sicheren Liste gefunden werden, von der <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A> -Methode und der-Methode codiert <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A> .  
  
 <xref:System.Web.Util.HttpEncoder>Wenn Sie die-Klasse durch die-Klasse ersetzen möchten <xref:System.Web.Security.AntiXss.AntiXssEncoder> , registrieren Sie Sie mit dem- `encoderType` Attribut des httpRuntime-Elements in der Web.config-Datei, wie im folgenden Beispiel gezeigt:  
  
```  
<httpRuntime encoderType="System.Web.Security.AntiXss.AntiXssEncoder" />  
```  
  
 Eine Liste der standardmäßigen sicheren Zeichen für verschiedene Codierungs Methoden finden Sie in den Hinweisen für <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A> die <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A> Methoden,, <xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode%2A> und <xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode%2A> . Die standardmäßige sichere Liste kann mithilfe der-Methode geändert werden <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> .  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AntiXssEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AntiXssEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CssEncode">
      <MemberSignature Language="C#" Value="public static string CssEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CssEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.CssEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CssEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CssEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member CssEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.CssEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Die zu codierende Zeichenfolge.</param>
        <summary>Codiert die angegebene Zeichenfolge für die Verwendung in CSS (Cascading Stylesheets).</summary>
        <returns>Die codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind.  
  
> [!NOTE]
>  Setzen Sie die resultierende Zeichenfolge in Anführungszeichen (""), bevor Sie Sie einem Cascading Stylesheet hinzufügen.  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle stammen aus den [Unicode-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich.
  
|Zeichen|Beschreibung|  
|--------------------|-----------------|  
|A-Z|Großbuchstaben (alphabetische Zeichen)|  
|a-z|Kleinbuchstaben (alphabetische Zeichen)|  
|0-9|Zahlen|  
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert\000028\000027XSS\000020Attack\000021\000027\000029\00003B`|  
|`user@contoso.com`|`user\000040contoso\00002Ecom`|  
|`Anti-Cross Site Scripting Namespace`|`Anti\00002DCross\000020Site\000020Scripting\000020Namespace`|  
  
 Die Escapesequenz für CSS-Zeichen besteht aus einem umgekehrten Schrägstrich ( \\ ), gefolgt von bis zu sechs hexadezimalen Ziffern, die einen Zeichencode aus dem ISO 10646-Standard darstellen. (Der ISO 10646-Standard entspricht in der Tat Unicode.) Jedes andere Zeichen als eine hexadezimale Ziffer beendet die Escapesequenz. Wenn ein Zeichen, das auf die Escapesequenz folgt, auch eine gültige hexadezimale Ziffer ist, muss es entweder sechs Ziffern in der Escapesequenz enthalten oder ein Leerzeichen zum Beenden der Escapesequenz verwenden. Beispielsweise `\000020` deutet auf ein Leerzeichen hin.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Die zu codierende Zeichenfolge.</param>
        <param name="output">Der Textwriter, der verwendet werden soll, um die Zeichenfolge auszugeben.</param>
        <summary>Codiert und gibt die angegebene Zeichenfolge für die Verwendung in einem HTML-Attribut aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `&#DECIMAL;` .  
  
> [!NOTE]
>  Setzen Sie die resultierende Zeichenfolge in doppelte Anführungszeichen ("") oder einfache Anführungszeichen (""), bevor Sie Sie einer Seite hinzufügen.  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich, sofern in der Beschreibungs Spalte nicht angegeben  
  
|Zeichen|Beschreibung|  
|--------------------|-----------------|  
|A-Z|Großbuchstaben lateinische alphabetische Zeichen|  
|a-z|Lateinische alphabetische Zeichen (Kleinbuchstaben)|  
|0-9|Zahlen|  
|\!|Ausrufezeichen|  
|\#|Nummern Zeichen, Hash|  
|\$|Dollar Zeichen|  
|\%|Prozentzeichen (%)|  
|( )|Klammern|  
|\*|Sternchen|  
|\+|Pluszeichen|  
|\,|Komma|  
|\-|Bindestrich, minus|  
|\.|Punkt, Punkt, vollständiger Vorgang|  
|\/|ßen|  
|\:|Doppelpunkt|  
|\;|Semicolon|  
|\=|Gleichheitszeichen|  
|\?|Fragezeichen|  
|\@|Kommerzielles at-Sign|  
|\[ \]|Eckige Klammern|  
|\\ |Umgekehrter Schrägstrich|  
|\^|Einfügemarke|  
|\_|Unterstrich|  
|\`|Schwerwiegender Akzent|  
|\{ \}|Geschweifte Klammern, eckige Klammern|  
|\||Vertikale Linie|  
|\~|Tilde|  
|0x00A1-0x00ac|Sonderzeichen zwischen 0x00A1 (161 Decimal) und 0x00ac (172 Decimal) aus den Unicode [C1-Steuerelementen und dem Latin-1-Ergänzungs](https://www.unicode.org/charts/PDF/U0080.pdf) Zeichenbereich.|  
|0x00ae-0x00FF|Sonderzeichen zwischen 0x00ae (174 Decimal) und 0x00FF (255 Decimal) aus den Unicode [C1-Steuerelementen und dem Latin-1-Ergänzungs](https://www.unicode.org/charts/PDF/U0080.pdf) Zeichenbereich.|  
|0x0100-0x017f|Zeichen zwischen 0x0100 (256 Decimal) und 0x017f (383 Decimal). (Der Unicode-Zeichenbereich mit [einer lateinischen Erweiterung](https://www.unicode.org/charts/PDF/U0100.pdf) .)|
|0x0180-0x024F|Zeichen zwischen 0x0180 (384 Decimal) und 0x024F (591 Decimal). (Der Zeichenbereich des Unicode [-lateinischen-Extended-B](https://www.unicode.org/charts/PDF/U0180.pdf) .)|  
|0x0250-0x02af|Zeichen zwischen 0x0250 (592 Decimal) und 0x02af (687 Decimal). (Der Unicode- [IPA-Erweiterungs](https://www.unicode.org/charts/PDF/U0250.pdf) Zeichenbereich.)| 
|0x02b0-0x02ff|Zeichen zwischen 0x02b0 (688 Decimal) und 0x02ff (767 Decimal). (Der Zeichenbereich des Unicode- [Abstands Modifizierers](https://www.unicode.org/charts/PDF/U02B0.pdf) .)|
|0x0300-0x036f|Zeichen zwischen 0x0300 (768 Decimal) und 0x036f (879 Decimal). (Der Zeichenbereich der Unicode- [kombinierten diakritischen Zeichen](https://www.unicode.org/charts/PDF/U0300.pdf) .)|  
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|Beispiele für Eingaben| Codierte Ausgaben|  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Um die sichere Liste anzupassen, müssen Sie die-Methode aufzurufen <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codiert die angegebene Zeichenfolge zur Verwendung als Text im HTML-Markup.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlEncode (string input, bool useNamedEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlEncode(string input, bool useNamedEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlEncode (input As String, useNamedEntities As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlEncode(System::String ^ input, bool useNamedEntities);" />
      <MemberSignature Language="F#" Value="static member HtmlEncode : string * bool -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode (input, useNamedEntities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="useNamedEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">Die zu codierende Zeichenfolge.</param>
        <param name="useNamedEntities"><see langword="true" />, um benannte HTML 4.0-Entitäten für bestimmte Zeichencodierungen zu verwenden; <see langword="false" />, um die Codierung nur mit der <c>&amp;#DECIMAL;</c>-Notation durchzuführen.</param>
        <summary>Codiert die angegebene Zeichenfolge für die Verwendung als Text im HTML-Markup und gibt optional an, ob HTML 4.0 benannte Entitäten verwendet.</summary>
        <returns>Die codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `&#DECIMAL;` .  
  
> [!NOTE]
>  Setzen Sie die resultierende Zeichenfolge in doppelte Anführungszeichen ("") oder einfache Anführungszeichen (""), bevor Sie Sie einer Seite hinzufügen.  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich, sofern in der Beschreibungs Spalte nicht angegeben.
  
|Zeichen|Beschreibung|  
|--------------------|-----------------|  
|A-Z|Großbuchstaben lateinische alphabetische Zeichen|  
|a-z|Lateinische alphabetische Zeichen (Kleinbuchstaben)|  
|0-9|Zahlen|  
|BRaum|Leerzeichen|  
|!|Ausrufezeichen|  
|#|Nummern Zeichen, Hash|  
|$|Dollar Zeichen|  
|%|Prozentzeichen (%)|  
|( )|Klammern|  
|*|Sternchen|  
|+|Pluszeichen|  
|,|Komma|  
|-|Bindestrich, minus|  
|.|Punkt, Punkt, vollständiger Vorgang|  
|/|ßen|  
|:|Doppelpunkt|  
|;|Semicolon|  
|=|Gleichheitszeichen|  
|?|Fragezeichen|  
|@|Kommerziell um|  
|[ ]|Eckige Klammern|  
|&#92;|Umgekehrter Schrägstrich|  
|^|Einfügemarke|  
|_|Unterstrich|  
|\`|Schwerwiegender Akzent|  
|{ }|Geschweifte Klammern, eckige Klammern|  
|&#124;|Vertikale Linie|  
|~|Tilde|  
|0x00A1-0x00ac|Sonderzeichen zwischen 0x00A1 (161 Decimal) und 0x00ac (172 Decimal) aus den Unicode [C1-Steuerelementen und dem Latin-1-Ergänzungs](https://www.unicode.org/charts/PDF/U0080.pdf) Zeichenbereich. Zeichen in diesem Bereich werden codiert, wenn den Wert hat `useNamedEntities` `true` .|  
|0x00ae-0x00FF|Sonderzeichen zwischen 0x00ae (174 Decimal) und 0x00FF (255 Decimal) aus den Unicode [C1-Steuerelementen und dem Latin-1-Ergänzungs](https://www.unicode.org/charts/PDF/U0080.pdf) Zeichenbereich. Zeichen in diesem Bereich werden codiert, wenn den Wert hat `useNamedEntities` `true` .|  
|0x0100-0x017f|Zeichen zwischen 0x0100 (256 Decimal) und 0x017f (383 Decimal). (Der Unicode-Zeichenbereich mit [einer lateinischen Erweiterung](https://www.unicode.org/charts/PDF/U0100.pdf) .)|
|0x0180-0x024F|Zeichen zwischen 0x0180 (384 Decimal) und 0x024F (591 Decimal). (Der Zeichenbereich des Unicode [-lateinischen-Extended-B](https://www.unicode.org/charts/PDF/U0180.pdf) .)|  
|0x0250-0x02af|Zeichen zwischen 0x0250 (592 Decimal) und 0x02af (687 Decimal). (Der Unicode- [IPA-Erweiterungs](https://www.unicode.org/charts/PDF/U0250.pdf) Zeichenbereich.)|  
|0x02b0-0x02ff|Zeichen zwischen 0x02b0 (688 Decimal) und 0x02ff (767 Decimal). (Der Zeichenbereich des Unicode- [Abstands Modifizierers](https://www.unicode.org/charts/PDF/U02B0.pdf) .)|
|0x0300-0x036f|Zeichen zwischen 0x0300 (768 Decimal) und 0x036f (879 Decimal). (Der Zeichenbereich der Unicode- [kombinierten diakritischen Zeichen](https://www.unicode.org/charts/PDF/U0300.pdf) .)| 
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Um die sichere Liste anzupassen, müssen Sie die-Methode aufzurufen <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Die zu codierende Zeichenfolge.</param>
        <param name="output">Der Textwriter, der verwendet werden soll, um die Zeichenfolge auszugeben.</param>
        <summary>Codiert die angegebene Zeichenfolge zur Verwendung als Text im HTML-Markup und gibt die Zeichenfolge unter Verwendung des angegebenen Textwriter aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `&#DECIMAL;` .  
  
> [!NOTE]
>  Setzen Sie die resultierende Zeichenfolge in doppelte Anführungszeichen ("") oder einfache Anführungszeichen (""), bevor Sie Sie einer Seite hinzufügen.  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich, sofern in der Beschreibungs Spalte nicht angegeben.
  
|Zeichen|Beschreibung|  
|--------------------|-----------------|  
|A-Z|Großbuchstaben lateinische alphabetische Zeichen|  
|a-z|Lateinische alphabetische Zeichen (Kleinbuchstaben)|  
|0-9|Zahlen|  
|BRaum|Leerzeichen|  
|!|Ausrufezeichen|  
|#|Nummern Zeichen, Hash|  
|$|Dollar Zeichen|  
|%|Prozentzeichen (%)|  
|( )|Klammern|  
|*|Sternchen|  
|+|Pluszeichen|  
|,|Komma|  
|-|Bindestrich, minus|  
|.|Punkt, Punkt, vollständiger Vorgang|  
|/|ßen|  
|:|Doppelpunkt|  
|;|Semicolon|  
|=|Gleichheitszeichen|  
|?|Fragezeichen|  
|@|Kommerziell um|  
|[ ]|Eckige Klammern|  
|&#92;|Umgekehrter Schrägstrich|  
|^|Einfügemarke|  
|_|Unterstrich|  
|\`|Schwerwiegender Akzent|  
|{ }|Geschweifte Klammern, eckige Klammern|  
|&#124;|Vertikale Linie|  
|~|Tilde|  
|0x00A1-0x00ac|Sonderzeichen zwischen 0x00A1 (161 Decimal) und 0x00ac (172 Decimal) aus den Unicode [C1-Steuerelementen und dem Latin-1-Ergänzungs](https://www.unicode.org/charts/PDF/U0080.pdf) Zeichenbereich. Zeichen in diesem Bereich werden codiert, wenn den Wert hat `useNamedEntities` `true` .|  
|0x00ae-0x00FF|Sonderzeichen zwischen 0x00ae (174 Decimal) und 0x00FF (255 Decimal) aus den Unicode [C1-Steuerelementen und dem Latin-1-Ergänzungs](https://www.unicode.org/charts/PDF/U0080.pdf) Zeichenbereich. Zeichen in diesem Bereich werden codiert, wenn den Wert hat `useNamedEntities` `true` .|  
|0x0100-0x017f|Zeichen zwischen 0x0100 (256 Decimal) und 0x017f (383 Decimal). (Der Unicode-Zeichenbereich mit [einer lateinischen Erweiterung](https://www.unicode.org/charts/PDF/U0100.pdf) .)|
|0x0180-0x024F|Zeichen zwischen 0x0180 (384 Decimal) und 0x024F (591 Decimal). (Der Zeichenbereich des Unicode [-lateinischen-Extended-B](https://www.unicode.org/charts/PDF/U0180.pdf) .)| 
|0x0250-0x02af|Zeichen zwischen 0x0250 (592 Decimal) und 0x02af (687 Decimal). (Der Unicode- [IPA-Erweiterungs](https://www.unicode.org/charts/PDF/U0250.pdf) Zeichenbereich.)| 
|0x02b0-0x02ff|Zeichen zwischen 0x02b0 (688 Decimal) und 0x02ff (767 Decimal). (Der Zeichenbereich des Unicode- [Abstands Modifizierers](https://www.unicode.org/charts/PDF/U02B0.pdf) .)|
|0x0300-0x036f|Zeichen zwischen 0x0300 (768 Decimal) und 0x036f (879 Decimal). (Der Zeichenbereich der Unicode- [kombinierten diakritischen Zeichen](https://www.unicode.org/charts/PDF/U0300.pdf) .)| 
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Um die sichere Liste anzupassen, müssen Sie die-Methode aufzurufen <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlFormUrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codiert die angegebene Zeichenfolge für die Verwendung in Formularübermittlung, deren MIME-Typ "application/x-www-form-urlencoded" ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Die zu codierende Zeichenfolge.</param>
        <summary>Codiert die angegebene Zeichenfolge für die Verwendung in Formularübermittlung, deren MIME-Typ "application/x-www-form-urlencoded" ist.</summary>
        <returns>Die codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `%SINGLE_BYTE_HEX` . 
  
> [!NOTE]
>  Setzen Sie die resultierende Zeichenfolge in doppelte Anführungszeichen ("") oder einfache Anführungszeichen (""), bevor Sie Sie einer Seite hinzufügen.   

In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich. 
    
|Unicode-Code Diagramm|Zeichen|Beschreibung|  
|------------------------|--------------------|-----------------|  
|A-Z|Großbuchstaben (alphabetische Zeichen)|  
|a-z|Kleinbuchstaben (alphabetische Zeichen)|  
|0-9|Zahlen|  
|-|Bindestrich, minus|  
|.|Punkt, Punkt, vollständiger Vorgang|  
|_|Unterstrich|  
|~|Tilde|  
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user@contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">Die zu codierende Zeichenfolge.</param>
        <param name="codePage">Die Codepage, die zur Codierung der <paramref name="input" />-Zeichenfolge zu verwenden ist.</param>
        <summary>Codiert die angegebene Zeichenfolge für die Verwendung in Formularübermittlung, deren MIME-Typ "application/x-www-form-urlencoded" lautet, indem die angegebene Codepage verwendet wird.</summary>
        <returns>Die codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `%SINGLE_BYTE_HEX` .  
  
> [!NOTE]
>  Setzen Sie die resultierende Zeichenfolge in doppelte Anführungszeichen ("") oder einfache Anführungszeichen (""), bevor Sie Sie einer Seite hinzufügen.  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich. 
  
|Zeichen|Beschreibung|  
|--------------------|-----------------|  
|A-Z|Großbuchstaben (alphabetische Zeichen)|  
|a-z|Kleinbuchstaben (alphabetische Zeichen)|  
|0-9|Zahlen|  
|-|Bindestrich, minus|  
|.|Punkt, Punkt, vollständiger Vorgang|  
|_|Unterstrich|  
|~|Tilde|  
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">Die zu codierende Zeichenfolge.</param>
        <param name="inputEncoding">Der Eingabecodiertyp.</param>
        <summary>Codiert die angegebene Zeichenfolge für die Formularübermittlung, deren MIME-Typ "application/x-www-form-urlencoded" ist, indem er den angegebenen Zeichencodierungstyp verwendet.</summary>
        <returns>Die codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `%SINGLE_BYTE_HEX` .  
  
> [!NOTE]
>  Setzen Sie die resultierende Zeichenfolge in doppelte Anführungszeichen ("") oder einfache Anführungszeichen (""), bevor Sie Sie einer Seite hinzufügen.  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich. 
  
|Zeichen|Beschreibung|  
|--------------------|-----------------|  
|A-Z|Großbuchstaben (alphabetische Zeichen)|  
|a-z|Kleinbuchstaben (alphabetische Zeichen)|  
|0-9|Zahlen|  
|-|Bindestrich, minus|  
|.|Punkt, Punkt, vollständiger Vorgang|  
|_|Unterstrich|  
|~|Tilde|  
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkAsSafe">
      <MemberSignature Language="C#" Value="public static void MarkAsSafe (System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarkAsSafe(valuetype System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, valuetype System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, valuetype System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, valuetype System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, valuetype System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MarkAsSafe (lowerCodeCharts As LowerCodeCharts, lowerMidCodeCharts As LowerMidCodeCharts, midCodeCharts As MidCodeCharts, upperMidCodeCharts As UpperMidCodeCharts, upperCodeCharts As UpperCodeCharts)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MarkAsSafe(System::Web::Security::AntiXss::LowerCodeCharts lowerCodeCharts, System::Web::Security::AntiXss::LowerMidCodeCharts lowerMidCodeCharts, System::Web::Security::AntiXss::MidCodeCharts midCodeCharts, System::Web::Security::AntiXss::UpperMidCodeCharts upperMidCodeCharts, System::Web::Security::AntiXss::UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="F#" Value="static member MarkAsSafe : System.Web.Security.AntiXss.LowerCodeCharts * System.Web.Security.AntiXss.LowerMidCodeCharts * System.Web.Security.AntiXss.MidCodeCharts * System.Web.Security.AntiXss.UpperMidCodeCharts * System.Web.Security.AntiXss.UpperCodeCharts -&gt; unit" Usage="System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe (lowerCodeCharts, lowerMidCodeCharts, midCodeCharts, upperMidCodeCharts, upperCodeCharts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerCodeCharts" Type="System.Web.Security.AntiXss.LowerCodeCharts" />
        <Parameter Name="lowerMidCodeCharts" Type="System.Web.Security.AntiXss.LowerMidCodeCharts" />
        <Parameter Name="midCodeCharts" Type="System.Web.Security.AntiXss.MidCodeCharts" />
        <Parameter Name="upperMidCodeCharts" Type="System.Web.Security.AntiXss.UpperMidCodeCharts" />
        <Parameter Name="upperCodeCharts" Type="System.Web.Security.AntiXss.UpperCodeCharts" />
      </Parameters>
      <Docs>
        <param name="lowerCodeCharts">Die Kombination aus unteren Zeichentabellen, die als sicher zu kennzeichnen sind.</param>
        <param name="lowerMidCodeCharts">Die Kombination aus Zeichentabellen des unteren Mittelfelds, die als sicher zu kennzeichnen sind.</param>
        <param name="midCodeCharts">Die Kombination aus mittleren Zeichentabellen, die als sicher zu kennzeichnen sind.</param>
        <param name="upperMidCodeCharts">Die Kombination aus Zeichentabellen des oberen Mittelfelds, die als sicher zu kennzeichnen sind.</param>
        <param name="upperCodeCharts">Die Kombination aus oberen Zeichentabellen, die als sicher zu kennzeichnen sind.</param>
        <summary>Markiert Zeichen angegebener Unicode-Codeübersichten als sicher.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die sichere Liste wirkt sich auf alle HTML-XML-, CSS-und URL-Codierungs Methoden aus.  
  
 Mit einigen Ausnahmen entsprechen Unicode-Code Diagramme nicht direkt geschriebenen Sprachen. Zum Hinzufügen von Unterstützung für eine bestimmte Sprache oder einen Satz von Sprachen müssen häufig mehrere Code Diagramme als sicher markiert werden.  
  
 Verwenden Sie die folgende Syntax, um Unterstützung für die japanische Sprache hinzuzufügen, während Sie weiterhin Englisch zulassen:  
  
```  
  
MarkAsSafe(  
            LowerCodeCharts.Default,  
            LowerMidCodeCharts.HangulJamo,  
            MidCodeCharts.None,  
            UpperMidCodeCharts.CjkRadicalsSupplement |   
            UpperMidCodeCharts.CjkSymbolsAndPunctuation |   
            UpperMidCodeCharts.Hiragana |   
            UpperMidCodeCharts.Katakana |   
            UpperMidCodeCharts.KatakanaPhoneticExtensions |   
            UpperMidCodeCharts.LatinExtendedD |  
            UpperMidCodeCharts.CjkUnifiedIdeographs,  
            UpperCodeCharts.None);  
```  
  
> [!NOTE]
>  Die- <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> Methode muss in der- `Application_Start` Methode in der Datei Global. asax aufgerufen werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" />-Methode wurde außerhalb der <see langword="Application_Start" />-Methode in der Datei Global.asax aufgerufen.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codiert Zeichenfolgen und Bytearrays für die Verwendung in einer URL.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Die zu codierende Zeichenfolge.</param>
        <summary>Codiert die angegebene Zeichenfolge für die Verwendung in einer URL.</summary>
        <returns>Die codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `%SINGLE_BYTE_HEX` .  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich. 
    
  
|Zeichen|Beschreibung|  
|--------------------|-----------------|  
|A-Z|Großbuchstaben (alphabetische Zeichen)|  
|a-z|Kleinbuchstaben (alphabetische Zeichen)|  
|0-9|Zahlen|  
|-|Bindestrich, minus|  
|.|Punkt, Punkt, vollständiger Vorgang|  
|_|Unterstrich|  
|~|Tilde|  
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">Die zu codierende Zeichenfolge.</param>
        <param name="codePage">Die Codepage, die zur Codierung der <paramref name="input" />-Zeichenfolge zu verwenden ist.</param>
        <summary>Codiert die angegebene Zeichenfolge für die Verwendung in einem URL unter Verwendung der angegebenen Codepage.</summary>
        <returns>Die codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `%SINGLE_BYTE_HEX` .  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich. 
    
  
|Unicode-Code Diagramm|Zeichen|Beschreibung|  
|------------------------|--------------------|-----------------|  
|A-Z|Großbuchstaben (alphabetische Zeichen)|  
|a-z|Kleinbuchstaben (alphabetische Zeichen)|  
|0-9|Zahlen|  
|-|Bindestrich, minus|  
|.|Punkt, Punkt, vollständiger Vorgang|  
|_|Unterstrich|  
|~|Tilde|  
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">Die zu codierende Zeichenfolge.</param>
        <param name="inputEncoding">Der Eingabecodiertyp.</param>
        <summary>Codiert die angegebene Zeichenfolge für die Verwendung in einem URL unter Verwendung des angegebenen Zeichencodierungstyps.</summary>
        <returns>Die codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `%SINGLE_BYTE_HEX` .  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich. 
    
  
|Zeichen|Beschreibung|  
|--------------------|-----------------|  
|A-Z|Großbuchstaben (alphabetische Zeichen)|  
|a-z|Kleinbuchstaben (alphabetische Zeichen)|  
|0-9|Zahlen|  
|-|Bindestrich, minus|  
|.|Punkt, Punkt, vollständiger Vorgang|  
|_|Unterstrich|  
|~|Tilde|  
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal override byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="antiXssEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">Das zu codierende Bytearray.</param>
        <param name="offset">Der Index des ersten zu codierenden Bytes.</param>
        <param name="count">Die Anzahl von zu codierenden Bytes.</param>
        <summary>Codiert das angegebene Bytearray zur Verwendung in einer URL, beginnend beim angegebenen Offset im Bytearray und codiert die angegebene Anzahl von Bytes.</summary>
        <returns>Das codierte Bytearray.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `%SINGLE_BYTE_HEX` .  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich. 
   
  
|Zeichen|Beschreibung|  
|--------------------|-----------------|  
|A-Z|Großbuchstaben (alphabetische Zeichen)|  
|a-z|Kleinbuchstaben (alphabetische Zeichen)|  
|0-9|Zahlen|  
|-|Bindestrich, minus|  
|.|Punkt, Punkt, vollständiger Vorgang|  
|_|Unterstrich|  
|~|Tilde|  
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal override string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.UrlPathEncode : string -&gt; string" Usage="antiXssEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Die zu codierende Zeichenfolge.</param>
        <summary>Codiert Pfadzeichenfolgen für die Verwendung in einer URL.</summary>
        <returns>Die URL, die den codierten Pfad enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `%SINGLE_BYTE_HEX` .  

In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich. 
    
|Zeichen|Beschreibung|  
|--------------------|-----------------|  
|A-Z|Großbuchstaben (alphabetische Zeichen)|  
|a-z|Kleinbuchstaben (alphabetische Zeichen)|  
|0-9|Zahlen|  
|#|Nummern Zeichen, Hash|  
|%|Prozentzeichen (%)|  
|( )|Klammern|  
|-|Bindestrich, minus|  
|.|Punkt, Punkt, vollständiger Vorgang|  
|/|ßen|  
|&#92;|Umgekehrter Schrägstrich|  
|_|Unterstrich|  
|{ }|Geschweifte Klammern, eckige Klammern|  
|&#124;|Vertikale Linie|  
|~|Tilde|  
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`http://www.contoso.com:8080/<en-us>/[page].htm?v={value1}#x=[amount]`|`http://www.contoso.com:8080/%3cen-us%3e/%5bpage%5d.htm?v={value1}#x=[amount]`|  
|`alert('XSS Attack!');`|`alert(%27XSS%20Attack%21%27)%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert(%27XSS%20Attack%21%27)%3b%3c/script%3e`|  
|`alert('XSSあAttack!');`|`alert(%27XSS%e3%81%82Attack%21%27)%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 Diese Methode codiert nur den Pfad einer URL. Diese Methode codiert das Schema (z. b., `http:` , `ftp:` oder `file:` ), die Autorität (z. b. `www.northwind.com` oder `www.contoso.com:8080` ) oder die Abfrage oder das Fragment (z. b `?v=s978dfs9#x=103` .) nicht. Wenn in der Zeichenfolge kein Schema oder keine Zertifizierungsstelle vorhanden ist, wird davon ausgegangen, dass die Zeichenfolge ein relativer Pfad ist und der Pfad codiert ist. In der folgenden URL wird nur die Teil Zeichenfolge `/default.htm` codiert:  
  
 `http://www.contoso.com:8080/default.htm?v=s978dfs9#x=103`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttributeEncode">
      <MemberSignature Language="C#" Value="public static string XmlAttributeEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlAttributeEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlAttributeEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlAttributeEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlAttributeEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Die zu codierende Zeichenfolge.</param>
        <summary>Codiert die angegebene Zeichenfolge für die Verwendung in XML-Attributen.</summary>
        <returns>Die codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `&#DECIMAL;` .  
  
> [!NOTE]
>  Setzen Sie die resultierende Zeichenfolge in doppelte Anführungszeichen ("") oder einfache Anführungszeichen (""), bevor Sie Sie einer Seite hinzufügen.  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich, sofern in der Beschreibungs Spalte nicht angegeben.  
   
  
|Unicode-Code Diagramm|Zeichen|Beschreibung|  
|------------------------|--------------------|-----------------|  
|A-Z|Großbuchstaben lateinische alphabetische Zeichen|  
|a-z|Lateinische alphabetische Zeichen (Kleinbuchstaben)|  
|0-9|Zahlen|  
|!|Ausrufezeichen|  
|#|Nummern Zeichen, Hash|  
|$|Dollar Zeichen|  
|%|Prozentzeichen (%)|  
|( )|Klammern|  
|*|Sternchen|  
|+|Pluszeichen|  
|,|Komma|  
|-|Bindestrich, minus|  
|.|Punkt, Punkt, vollständiger Vorgang|  
|/|ßen|  
|:|Doppelpunkt|  
|;|Semicolon|  
|=|Gleichheitszeichen|  
|?|Fragezeichen|  
|@|Kommerzielles at-Sign|  
|[ ]|Eckige Klammern|  
|&#92;|Umgekehrter Schrägstrich|  
|^|Einfügemarke|  
|_|Unterstrich|  
|\`|Schwerwiegender Akzent|  
|{ }|Geschweifte Klammern, eckige Klammern|  
|&#124;|Vertikale Linie|  
|~|Tilde|  
|0x00A1-0x00ac|Sonderzeichen zwischen 0x00A1 (161 Decimal) und 0x00ac (172 Decimal) aus den Unicode [C1-Steuerelementen und dem Latin-1-Ergänzungs](https://www.unicode.org/charts/PDF/U0080.pdf) Zeichenbereich.|  
|Sonderzeichen zwischen 0x00ae (174 Decimal) und 0x00FF (255 Decimal) aus den Unicode [C1-Steuerelementen und dem Latin-1-Ergänzungs](https://www.unicode.org/charts/PDF/U0080.pdf) Zeichenbereich.|  
|0x0100-0x017f|Zeichen zwischen 0x0100 (256 Decimal) und 0x017f (383 Decimal). (Der Unicode-Zeichenbereich mit [einer lateinischen Erweiterung](https://www.unicode.org/charts/PDF/U0100.pdf) .)| 
|0x0180-0x024F|Zeichen zwischen 0x0180 (384 Decimal) und 0x024F (591 Decimal). (Der Zeichenbereich des Unicode [-lateinischen-Extended-B](https://www.unicode.org/charts/PDF/U0180.pdf) .)| 
|0x0250-0x02af|Zeichen zwischen 0x0250 (592 Decimal) und 0x02af (687 Decimal). (Der Unicode- [IPA-Erweiterungs](https://www.unicode.org/charts/PDF/U0250.pdf) Zeichenbereich.)| 
|0x02b0-0x02ff|Zeichen zwischen 0x02b0 (688 Decimal) und 0x02ff (767 Decimal). (Der Zeichenbereich des Unicode- [Abstands Modifizierers](https://www.unicode.org/charts/PDF/U02B0.pdf) .)|
|0x0300-0x036f|Zeichen zwischen 0x0300 (768 Decimal) und 0x036f (879 Decimal). (Der Zeichenbereich der Unicode- [kombinierten diakritischen Zeichen](https://www.unicode.org/charts/PDF/U0300.pdf) .)|  
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&apos;XSS&#32;Attack!&apos;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS&#32;Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Um die sichere Liste anzupassen, müssen Sie die-Methode aufzurufen <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncode">
      <MemberSignature Language="C#" Value="public static string XmlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Die zu codierende Zeichenfolge.</param>
        <summary>Codiert die angegebene Zeichenfolge für die Verwendung in XML-Attributen.</summary>
        <returns>Die codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode codiert alle Zeichen mit Ausnahme derjenigen, die in der sicheren Liste enthalten sind. Zeichen werden mithilfe von Notation codiert `&#DECIMAL;` .  
  
> [!NOTE]
>  Setzen Sie die resultierende Zeichenfolge in doppelte Anführungszeichen ("") oder einfache Anführungszeichen (""), bevor Sie Sie einer Seite hinzufügen.  
  
 In der folgenden Tabelle sind die standardmäßigen sicheren Zeichen aufgelistet. Alle Zeichen stammen aus den Unicode [-Steuerelementen und dem grundlegenden lateinischen](https://www.unicode.org/charts/PDF/U0000.pdf) Zeichenbereich, außer wenn Sie in der Beschreibungs Spalte angegeben sind.   
  
|Zeichen|Beschreibung|  
|--------------------|-----------------|  
|A-Z|Großbuchstaben lateinische alphabetische Zeichen|  
|a-z|Lateinische alphabetische Zeichen (Kleinbuchstaben)|  
|0-9|Zahlen|  
|BRaum|Leerzeichen|  
|!|Ausrufezeichen|  
|#|Nummern Zeichen, Hash|  
|$|Dollar Zeichen|  
|%|Prozentzeichen (%)|  
|( )|Klammern|  
|*|Sternchen|  
|+|Pluszeichen|  
|,|Komma|  
|-|Bindestrich, minus|  
|.|Zeitraum|  
|/|ßen|  
|:|Doppelpunkt|  
|;|Semicolon|  
|=|Gleichheitszeichen|  
|?|Fragezeichen|  
|@|Kommerziell um|  
|[ ]|Eckige Klammern|  
|&#92;|Umgekehrter Schrägstrich|  
|^|Einfügemarke|  
|_|Unterstrich|  
|\`|Schwerwiegender Akzent|  
|{ }|Geschweifte Klammern, eckige Klammern|  
|&#124;|Vertikale Linie|  
|~|Tilde|  
|0x00A1-0x00ac|Sonderzeichen zwischen 0x00A1 (161 Decimal) und 0x00ac (172 Decimal) aus den Unicode [C1-Steuerelementen und dem Latin-1-Ergänzungs](https://www.unicode.org/charts/PDF/U0080.pdf) Zeichenbereich. Zeichen in diesem Bereich werden codiert, wenn den Wert hat `useNamedEntities` `true` .|  
|0x00ae-0x00FF|Sonderzeichen zwischen 0x00ae (174 Decimal) und 0x00FF (255 Decimal) aus den Unicode [C1-Steuerelementen und dem Latin-1-Ergänzungs](https://www.unicode.org/charts/PDF/U0080.pdf) Zeichenbereich. Zeichen in diesem Bereich werden codiert, wenn den Wert hat `useNamedEntities` `true` .|  
|0x0100-0x017f|Zeichen zwischen 0x0100 (256 Decimal) und 0x017f (383 Decimal). (Der Unicode-Zeichenbereich mit [einer lateinischen Erweiterung](https://www.unicode.org/charts/PDF/U0100.pdf) .)| 
|0x0180-0x024F|Zeichen zwischen 0x0180 (384 Decimal) und 0x024F (591 Decimal). (Der Zeichenbereich des Unicode [-lateinischen-Extended-B](https://www.unicode.org/charts/PDF/U0180.pdf) .)|
|0x0250-0x02af|Zeichen zwischen 0x0250 (592 Decimal) und 0x02af (687 Decimal). (Der Unicode- [IPA-Erweiterungs](https://www.unicode.org/charts/PDF/U0250.pdf) Zeichenbereich.)| 
|0x02b0-0x02ff|Zeichen zwischen 0x02b0 (688 Decimal) und 0x02ff (767 Decimal). (Der Zeichenbereich des Unicode- [Abstands Modifizierers](https://www.unicode.org/charts/PDF/U02B0.pdf) .)|
|0x0300-0x036f|Zeichen zwischen 0x0300 (768 Decimal) und 0x036f (879 Decimal). (Der Zeichenbereich der Unicode- [kombinierten diakritischen Zeichen](https://www.unicode.org/charts/PDF/U0300.pdf) .)| 
  
 In der folgenden Tabelle sind Beispiele für Eingaben und die entsprechenden codierten Ausgaben aufgeführt.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Um die sichere Liste anzupassen, müssen Sie die-Methode aufzurufen <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Stream.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54568f892f5b7d17d7b27e180e0f3f0087bd2650b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4568f892f5b7d17d7b27e180e0f3f0087bd2650b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Provides a generic view of a sequence of bytes.</source>
          <target state="translated">Stellt eine allgemeine Ansicht einer Folge von Bytes bereit.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>This is an abstract class.</source>
          <target state="translated">Dies ist eine abstrakte Klasse.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> ist die abstrakte Basisklasse aller Streams.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket.</source>
          <target state="translated">Ein Stream (Datenstream) ist eine Abstraktion einer Folge von Bytes, beispielsweise eine Datei, ein Eingabe-/Ausgabegerät, eine Pipe für die Kommunikation zwischen Prozessen oder ein TCP/IP-Socket.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> Klasse und abgeleitete Klassen stellen eine allgemeine Ansicht dieser verschiedenen Gruppentypen Eingabe-und Ausgabetypen und sodass Programmierer sich nicht den Einzelheiten des Betriebssystems und der zugrunde liegenden Geräte.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Streams involve three fundamental operations:</source>
          <target state="translated">Streams umfassen drei grundlegende Vorgänge:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can read from streams.</source>
          <target state="translated">Sie können aus Streams lesen.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Reading is the transfer of data from a stream into a data structure, such as an array of bytes.</source>
          <target state="translated">Lesen wird die Übertragung von Daten aus einem Stream in eine Datenstruktur, z. B. ein Array von Bytes.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can write to streams.</source>
          <target state="translated">Sie können in Streams schreiben.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Writing is the transfer of data from a data structure into a stream.</source>
          <target state="translated">Schreiben wird die Übertragung von Daten aus einer Datenstruktur in einen Stream.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Streams can support seeking.</source>
          <target state="translated">Datenströme können Suchvorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Seeking refers to querying and modifying the current position within a stream.</source>
          <target state="translated">Suchvorgänge bezieht sich auf Abfragen und ändern die aktuelle Position im Stream.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Seek capability depends on the kind of backing store a stream has.</source>
          <target state="translated">Seek-Funktion hängt von der Art der Sicherungsspeicher hat ein Datenstrom.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.</source>
          <target state="translated">Klicken Sie z. B. Netzwerkstreams unterstützen keine einheitliche eine aktuelle Position, und daher in der Regel unterstützen keine Suchvorgänge.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Some of the more commonly used streams that inherit from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> are <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">Einige der häufiger häufig verwendete Streams, die von erben <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> sind <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, und <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Depending on the underlying data source or repository, streams might support only some of these capabilities.</source>
          <target state="translated">Streams möglicherweise nur einige dieser Funktionen unterstützen, abhängig von der zugrunde liegenden Datenquelle oder vom Repository.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can query a stream for its capabilities by using the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">Sie können einen Datenstrom, damit seine Funktionen mithilfe von Abfragen die <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>, und <ph id="ph3">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> Eigenschaften der <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> methods read and write data in a variety of formats.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> Methoden lesen und Schreiben von Daten in einer Vielzahl von Formaten.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For streams that support seeking, use the <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph> methods and the <ph id="ph3">&lt;xref:System.IO.Stream.Position%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.Stream.Length%2A&gt;</ph> properties to query and modify the current position and length of a stream.</source>
          <target state="translated">Verwenden Sie für Datenströme, die Suchvorgänge unterstützt, die <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph> Methoden und die <ph id="ph3">&lt;xref:System.IO.Stream.Position%2A&gt;</ph> und <ph id="ph4">&lt;xref:System.IO.Stream.Length%2A&gt;</ph> Eigenschaften Abfragen und ändern die aktuelle Position und Länge eines Streams.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Dieser Typ implementiert die <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> Schnittstelle.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Wenn Sie mithilfe des Typs abgeschlossen haben, sollten Sie es entweder direkt oder indirekt freigeben.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Aufrufen, um den Typ direkt zu verwerfen, dessen <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode in einer <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> Block.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Um es indirekt freizugeben, verwenden Sie ein Sprachkonstrukt z. B. <ph id="ph1">`using`</ph> (in c#) oder <ph id="ph2">`Using`</ph> (in Visual Basic).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Weitere Informationen finden Sie im Abschnitt "Verwenden eines Objekts, implementiert IDisposable" in der <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> Thema zur Schnittstelle.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Disposing a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object flushes any buffered data, and essentially calls the <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method for you.</source>
          <target state="translated">Freigeben einer <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> Objekt Leert alle gepufferten Daten, und im Wesentlichen Ruft die <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> Methode für Sie.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> Betriebssystem-Ressourcen wie Dateihandles, Netzwerkverbindungen oder Speicher für interne Pufferung verwendet auch frei.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> -Klasse bietet die Möglichkeit, einen anderen Stream um verbessern lesen und schreiben die Leistung einen gepufferten Datenstrom umgebrochen.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class includes async methods to simplify asynchronous operations.</source>
          <target state="translated">Beginnend mit der <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>die <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> Klasse enthält asynchrone Methoden, um asynchrone Vorgänge zu vereinfachen.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>An async method contains <ph id="ph1">`Async`</ph> in its name, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>.</source>
          <target state="translated">Eine asynchrone Methode enthält <ph id="ph1">`Async`</ph> in ihrem Namen, z. B. <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, und <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>These methods enable you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">Diese Methoden können Sie ressourcenintensive e/a-Vorgänge ausführen, ohne den Hauptthread zu blockieren.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Diese Überlegungen zur Leistung sind insbesondere in einer <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>-App oder <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>-App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Die Async-Methoden werden verwendet, in Verbindung mit der <ph id="ph1">`async`</ph> und <ph id="ph2">`await`</ph> in Visual Basic und C#-Schlüsselwörter.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When used in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app, <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> includes two extension methods: <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;</ph>.</source>
          <target state="translated">Bei der Verwendung in einem <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> enthält zwei Erweiterungsmethoden: <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt;</ph> und <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>These methods convert a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object to a stream in the <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>.</source>
          <target state="translated">Diese Methoden wandeln eine <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> Objekt in einen Stream in den <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can also convert a stream in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> to a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object by using the <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt;</ph> methods.</source>
          <target state="translated">Sie können auch einen Stream in Konvertieren der <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> zu eine <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> -Objekt mithilfe der <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt;</ph> und <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Convert Between .NET Framework Streams and Windows Runtime Streams<ept id="p1">](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept></source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>wie: Konvertieren zwischen .NET Framework-Streams und Windows-Runtime-Streams<ept id="p1">](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Some stream implementations perform local buffering of the underlying data to improve performance.</source>
          <target state="translated">Einige datenstromimplementierungen führen lokalen Pufferung von der zugrunde liegenden Daten zur Verbesserung der Leistung.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For such streams, you can use the <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.</source>
          <target state="translated">Für solche Datenströme, können Sie die <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> Methode, um alle internen Puffer zu löschen, und stellen Sie sicher, dass alle Daten auf dem zugrunde liegenden Datenquelle oder das Repository geschrieben wurden.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>If you need a stream with no backing store (also known as a bit bucket), use the <ph id="ph1">&lt;xref:System.IO.Stream.Null&gt;</ph> field to retrieve an instance of a stream that is designed for this purpose.</source>
          <target state="translated">Wenn Sie einen Stream ohne Sicherungsspeicher (auch bekannt als Bitbucket), verwenden die <ph id="ph1">&lt;xref:System.IO.Stream.Null&gt;</ph> Feld, das eine Instanz eines Datenstroms abgerufen, die für diesen Zweck entwickelt wurde.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The following example demonstrates how to use two <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objects to asynchronously copy the files from one directory to another directory.</source>
          <target state="translated">Im folgenden Beispiel wird veranschaulicht, wie zwei <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> -Objekten, die Dateien asynchron aus einem Verzeichnis in ein anderes Verzeichnis zu kopieren.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>-Klasse wird aus der <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>-Klasse abgeleitet.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id="ph3">`async`</ph> modifier because it calls an asynchronous method.</source>
          <target state="translated">Beachten Sie, dass der <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> -Ereignishandler für das <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> -Steuerelement mit dem <ph id="ph3">`async`</ph> -Modifizierer markiert wird, da er eine asynchrone Methode aufruft.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you implement a derived class of <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, you must provide implementations for the <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> methods.</source>
          <target state="translated">Wenn Sie eine abgeleitete Klasse implementieren <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, müssen Sie angeben, die Implementierungen für die <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> und <ph id="ph3">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The asynchronous methods <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /&gt;</ph> use the synchronous methods <ph id="ph4">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph5">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> in their implementations.</source>
          <target state="translated">Die asynchronen Methoden <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, und <ph id="ph3">&lt;see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /&gt;</ph> verwenden Sie die synchronen Methoden <ph id="ph4">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> und <ph id="ph5">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> in ihren Implementierungen.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Therefore, your implementations of <ph id="ph1">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> will work correctly with the asynchronous methods.</source>
          <target state="translated">Aus diesem Grund wird die Implementierung von <ph id="ph1">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> und <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> funktionieren ordnungsgemäß mit der asynchronen Methoden.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The default implementations of <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadByte" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteByte(System.Byte)" /&gt;</ph> create a new single-element byte array, and then call your implementations of <ph id="ph3">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">Die standardmäßigen Implementierungen von <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadByte" /&gt;</ph> und <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteByte(System.Byte)" /&gt;</ph> erstellen Sie ein neues Einzelelement-Bytearray, und rufen Sie dann Ihre Implementierungen von <ph id="ph3">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> und <ph id="ph4">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you derive from <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, we recommend that you override these methods to access your internal buffer, if you have one, for substantially better performance.</source>
          <target state="translated">Beim Ableiten von <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, es wird empfohlen, die Sie überschreiben diese Methoden, um den internen Puffer zugreifen, wenn Sie eine erheblich bessere Leistung haben.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You must also provide implementations of <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanRead" /&gt;</ph>, <ph id="ph2">&lt;see cref="P:System.IO.Stream.CanSeek" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.IO.Stream.Length" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.IO.Stream.Position" /&gt;</ph>, <ph id="ph7">&lt;see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph>, and <ph id="ph8">&lt;see cref="M:System.IO.Stream.SetLength(System.Int64)" /&gt;</ph>.</source>
          <target state="translated">Sie müssen auch Implementierungen der bereitstellen <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanRead" /&gt;</ph>, <ph id="ph2">&lt;see cref="P:System.IO.Stream.CanSeek" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.IO.Stream.Length" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.IO.Stream.Position" /&gt;</ph>, <ph id="ph7">&lt;see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph>, und <ph id="ph8">&lt;see cref="M:System.IO.Stream.SetLength(System.Int64)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all the <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> cleanup logic in the <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Überschreiben Sie nicht die <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> -Methode, stattdessen werden alle der <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> Bereinigungslogik in die <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Implementieren einer Dispose-Methode<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.#ctor">
          <source><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> ist die abstrakte Basisklasse aller Streams.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.#ctor">
          <source>Some of the more commonly used streams that inherit from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> are <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">Einige der häufiger häufig verwendete Streams, die von erben <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> sind <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, und <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to read the data into.</source>
          <target state="translated">Der Puffer, in den die Daten gelesen werden sollen.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data read from the stream.</source>
          <target state="translated">Der Byteoffset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, ab dem gelesene Daten aus dem Stream geschrieben werden sollen.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Die maximale Anzahl der zu lesenden Bytes.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the read is complete.</source>
          <target state="translated">Ein optionaler asynchroner Rückruf, der nach Abschluss des Lesevorgangs aufgerufen werden soll.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">Ein vom Benutzer bereitgestelltes Objekt, das diese asynchrone Leseanforderung von anderen Anforderungen unterscheidet.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">Beginnt einen asynchronen Lesevorgang.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Verwenden Sie stattdessen <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous read, which could still be pending.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>, das den asynchronen Lesevorgang darstellt, der möglicherweise noch aussteht.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">In .NET Framework 4 und vorherigen Versionen müssen Sie Methoden wie <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> verwenden, um asynchrone E/A-Vorgänge zu implementieren.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Diese Methoden sind weiterhin verfügbar, in der <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> zur Unterstützung von legacy-Code; allerdings der neuen asynchronen Methoden, wie z. B. <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, und <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, Hilfe, die Sie implementieren leichter asynchrone e/a-Vorgänge.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The default implementation of <ph id="ph1">`BeginRead`</ph> on a stream calls the <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> method synchronously, which means that <ph id="ph3">`Read`</ph> might block on some streams.</source>
          <target state="translated">Die standardmäßige Implementierung des <ph id="ph1">`BeginRead`</ph> für einen Datenstrom Aufrufe der <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> Methode synchron, was bedeutet, dass <ph id="ph3">`Read`</ph> auf einige Datenströme blockiert werden könnten.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>However, instances of classes such as <ph id="ph1">`FileStream`</ph> and <ph id="ph2">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.</source>
          <target state="translated">Allerdings Instanzen von Klassen, z. B. <ph id="ph1">`FileStream`</ph> und <ph id="ph2">`NetworkStream`</ph> vollständig asynchrone Vorgänge unterstützt, wenn die Instanzen asynchron geöffnet worden sein.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Therefore, calls to <ph id="ph1">`BeginRead`</ph> will not block on those streams.</source>
          <target state="translated">Aus diesem Grund Aufrufe von <ph id="ph1">`BeginRead`</ph> Datenströme nicht blockiert.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can override <ph id="ph1">`BeginRead`</ph> (by using async delegates, for example) to provide asynchronous behavior.</source>
          <target state="translated">Sie können außer Kraft setzen <ph id="ph1">`BeginRead`</ph> (mithilfe von asynchronen Delegaten, z. B.) um asynchrones Verhalten bereitzustellen.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the <ph id="ph1">`IAsyncResult`</ph> return value to the <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> method of the stream to determine how many bytes were read and to release operating system resources used for reading.</source>
          <target state="translated">Übergeben Sie die <ph id="ph1">`IAsyncResult`</ph> Rückgabewert auf die <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> -Methode des Datenstroms, um zu bestimmen, wie viele Bytes gelesen wurden, und zum Freigeben von Betriebssystemressourcen, die zum Lesen.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> muss einmal für jeden Aufruf aufgerufen werden <ph id="ph2">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can do this either by using the same code that called <ph id="ph1">`BeginRead`</ph> or in a callback passed to <ph id="ph2">`BeginRead`</ph>.</source>
          <target state="translated">Hierzu können Sie entweder über den gleichen Code, der aufgerufen <ph id="ph1">`BeginRead`</ph> oder einen Rückruf, der an übergebene <ph id="ph2">`BeginRead`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.</source>
          <target state="translated">Die aktuelle Position im Stream wird aktualisiert, wenn die asynchrone Lese- oder Schreibberechtigungen ausgegeben wird nicht verwendet werden, wenn der e/a-Vorgang abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">Mehrere gleichzeitige asynchrone Anforderungen das Rendern der Anforderung Abschluss unsicher.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Lesevorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">`BeginRead`</ph>.</source>
          <target state="translated">Wenn ein Stream geschlossen ist, oder Sie ein ungültiges Argument übergeben, Ausnahmen werden ausgelöst, unmittelbar aus <ph id="ph1">`BeginRead`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id="ph1">`EndRead`</ph>.</source>
          <target state="translated">Fehler während einer asynchronen leseanforderung z. B. Fehler auf dem Datenträger während der e/a-Anforderung, für den Thread im Threadpool ausgeführt, und Ausnahmen auslösen, wenn der Aufruf von <ph id="ph1">`EndRead`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous read past the end of the stream, or a disk error occurs.</source>
          <target state="translated">Es wurde versucht, einen asynchronen Lesevorgang über das Ende des Streams hinaus durchzuführen, oder es ist ein Datenträgerfehler aufgetreten.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">Mindestens eines der Argumente ist ungültig.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementation does not support the read operation.</source>
          <target state="translated">Die aktuelle <ph id="ph1">&lt;see langword="Stream" /&gt;</ph>-Implementierung unterstützt den Lesevorgang nicht.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to write data from.</source>
          <target state="translated">Der Puffer, aus dem Daten geschrieben werden sollen.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin writing.</source>
          <target state="translated">Der Byteoffset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, ab dem geschrieben werden soll.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Die maximale Anzahl der zu schreibenden Bytes.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the write is complete.</source>
          <target state="translated">Ein optionaler asynchroner Rückruf, der nach Abschluss des Schreibvorgangs aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">Ein vom Benutzer bereitgestelltes Objekt, das diese asynchrone Schreibanforderung von anderen Anforderungen unterscheidet.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">Beginnt einen asynchronen Schreibvorgang.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Verwenden Sie stattdessen <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see langword="IAsyncResult" /&gt;</ph> that represents the asynchronous write, which could still be pending.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="IAsyncResult" /&gt;</ph>, das den asynchronen Schreibvorgang darstellt, der möglicherweise noch aussteht.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">In .NET Framework 4 und vorherigen Versionen müssen Sie Methoden wie <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> verwenden, um asynchrone E/A-Vorgänge zu implementieren.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Diese Methoden sind weiterhin verfügbar, in der <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> zur Unterstützung von legacy-Code; allerdings der neuen asynchronen Methoden, wie z. B. <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, und <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, Hilfe, die Sie implementieren leichter asynchrone e/a-Vorgänge.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The default implementation of <ph id="ph1">`BeginWrite`</ph> on a stream calls the <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> method synchronously, which means that <ph id="ph3">`Write`</ph> might block on some streams.</source>
          <target state="translated">Die standardmäßige Implementierung des <ph id="ph1">`BeginWrite`</ph> für einen Datenstrom Aufrufe der <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> Methode synchron, was bedeutet, dass <ph id="ph3">`Write`</ph> auf einige Datenströme blockiert werden könnten.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>However, instances of classes such as <ph id="ph1">`FileStream`</ph> and <ph id="ph2">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.</source>
          <target state="translated">Allerdings Instanzen von Klassen, z. B. <ph id="ph1">`FileStream`</ph> und <ph id="ph2">`NetworkStream`</ph> vollständig asynchrone Vorgänge unterstützt, wenn die Instanzen asynchron geöffnet worden sein.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Therefore, calls to <ph id="ph1">`BeginWrite`</ph> will not block on those streams.</source>
          <target state="translated">Aus diesem Grund Aufrufe von <ph id="ph1">`BeginWrite`</ph> Datenströme nicht blockiert.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can override <ph id="ph1">`BeginWrite`</ph> (by using async delegates, for example) to provide asynchronous behavior.</source>
          <target state="translated">Sie können außer Kraft setzen <ph id="ph1">`BeginWrite`</ph> (mithilfe von asynchronen Delegaten, z. B.) um asynchrones Verhalten bereitzustellen.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the <ph id="ph1">`IAsyncResult`</ph> returned by the current method to <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to ensure that the write completes and frees resources appropriately.</source>
          <target state="translated">Übergeben Sie die <ph id="ph1">`IAsyncResult`</ph> zurückgegeben, die für die aktuelle Methode zum <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> um sicherzustellen, dass der Schreibvorgang abgeschlossen ist und die Ressourcen entsprechend freigegeben werden.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> muss einmal für jeden Aufruf aufgerufen werden <ph id="ph2">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can do this either by using the same code that called <ph id="ph1">`BeginWrite`</ph> or in a callback passed to <ph id="ph2">`BeginWrite`</ph>.</source>
          <target state="translated">Hierzu können Sie entweder über den gleichen Code, der aufgerufen <ph id="ph1">`BeginWrite`</ph> oder einen Rückruf, der an übergebene <ph id="ph2">`BeginWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If an error occurs during an asynchronous write, an exception will not be thrown until <ph id="ph1">`EndWrite`</ph> is called with the <ph id="ph2">`IAsyncResult`</ph> returned by this method.</source>
          <target state="translated">Wenn während eines asynchronen Schreibvorgangs ein Fehler auftritt, wird erst dann eine Ausnahme ausgelöst, wenn <ph id="ph1">`EndWrite`</ph> aufgerufen wird und die <ph id="ph2">`IAsyncResult`</ph> von dieser Methode zurückgegeben.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is writable, writing at the end of the stream expands the stream.</source>
          <target state="translated">Wenn ein Stream geschrieben werden kann, erweitert Schreiben am Ende des Streams den Stream.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.</source>
          <target state="translated">Die aktuelle Position im Stream wird aktualisiert, wenn Sie veranlassen, die den asynchronen Lesevorgang oder schreiben, nicht verwendet werden, wenn der e/a-Vorgang abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">Mehrere gleichzeitige asynchrone Anforderungen das Rendern der Anforderung Abschluss unsicher.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Schreibvorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">`BeginWrite`</ph>.</source>
          <target state="translated">Wenn ein Stream geschlossen ist, oder Sie ein ungültiges Argument übergeben, Ausnahmen werden ausgelöst, unmittelbar aus <ph id="ph1">`BeginWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">Fehler während einer asynchronen schreibanforderung, z. B. Fehler auf dem Datenträger während der e/a-Anforderung für den Thread im Threadpool ausgeführt, und Ausnahmen auslösen, wenn der Aufruf von <ph id="ph1">`EndWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous write past the end of the stream, or a disk error occurs.</source>
          <target state="translated">Es wurde versucht, einen asynchronen Schreibvorgang über das Ende des Streams hinaus durchzuführen, oder es ist ein Datenträgerfehler aufgetreten.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">Mindestens eines der Argumente ist ungültig.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementation does not support the write operation.</source>
          <target state="translated">Die aktuelle <ph id="ph1">&lt;see langword="Stream" /&gt;</ph>-Implementierung unterstützt den Schreibvorgang nicht.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanRead">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">Ruft beim Überschreiben in einer abgeleiteten Klasse einen Wert ab, der angibt, ob der aktuelle Stream Lesevorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports reading; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Stream Lesevorgänge unterstützt, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> methods throw a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Wenn von eine Klasse abgeleitet <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> keine Lesevorgänge unterstützt, werden Aufrufe von der <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>, und <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> Methoden lösen eine <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Wenn der Stream geschlossen ist, gibt diese Eigenschaft <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>The following is an example of using the <ph id="ph1">`CanRead`</ph> property.</source>
          <target state="translated">Im folgenden werden gezeigt, wie die <ph id="ph1">`CanRead`</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanSeek">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">Ruft beim Überschreiben in einer abgeleiteten Klasse einen Wert ab, der angibt, ob der aktuelle Stream Suchvorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports seeking; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Stream Suchvorgänge unterstützt, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id="ph2">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Wenn von eine Klasse abgeleitet <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> Suchvorgänge nicht unterstützt, werden Aufrufe von <ph id="ph2">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>, und <ph id="ph5">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> Auslösen einer <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Wenn der Stream geschlossen ist, gibt diese Eigenschaft <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanTimeout">
          <source>Gets a value that determines whether the current stream can time out.</source>
          <target state="translated">Ruft einen Wert ab, der bestimmt, ob für den aktuellen Stream ein Timeout möglich ist.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>A value that determines whether the current stream can time out.</source>
          <target state="translated">Ein Wert, der bestimmt, ob für den aktuellen Stream ein Timeout möglich ist.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph> property always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph>-Eigenschaft gibt immer <ph id="ph2">`false`</ph> zurück.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>Some stream implementations require different behavior, such as <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, which times out if network connectivity is interrupted or lost.</source>
          <target state="translated">Einige datenstromimplementierungen erfordern unterschiedliches Verhalten wie z. B. <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, die ein Timeout auftritt, wenn die Netzwerkkonnektivität unterbrochen wird oder verloren geht.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>If you are implementing a stream that must be able to time out, this property should be overridden to return <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Wenn Sie einen Stream implementieren, die auf einen Timeout beendet werden muss, sollte diese Eigenschaft überschrieben werden, um zurückgeben <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanWrite">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">Ruft beim Überschreiben in einer abgeleiteten Klasse einen Wert ab, der angibt, ob der aktuelle Stream Schreibvorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports writing; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Stream Schreibvorgänge unterstützt, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> throws a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Wenn von eine Klasse abgeleitet <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> unterstützt nicht das Schreiben von einem Aufruf von <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, oder <ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> löst eine <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Wenn der Stream geschlossen ist, gibt diese Eigenschaft <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>The following is an example of using the <ph id="ph1">`CanWrite`</ph> property.</source>
          <target state="translated">Im folgenden werden gezeigt, wie die <ph id="ph1">`CanWrite`</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Close">
          <source>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</source>
          <target state="translated">Schließt den aktuellen Stream und gibt alle dem aktuellen Stream zugeordneten Ressourcen frei (z. B. Sockets und Dateihandles).</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Close">
          <source>Instead of calling this method, ensure that the stream is properly disposed.</source>
          <target state="translated">Anstatt diese Methode aufzurufen, stellen Sie sicher, dass der Stream ordnungsgemäß freigegeben wird.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This method calls <ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>, specifying <ph id="ph2">`true`</ph> to release all resources.</source>
          <target state="translated">Diese Methode ruft <ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>, wobei <ph id="ph2">`true`</ph> alle Ressourcen freizugeben.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>You do not have to specifically call the <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method.</source>
          <target state="translated">Sie müssen nicht explizit aufrufen, die <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Instead, ensure that every <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object is properly disposed.</source>
          <target state="translated">Stattdessen sicher, dass jeder <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> Objekt ordnungsgemäß freigegeben ist.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>You can declare <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> objects within a <ph id="ph2">`using`</ph> block (or <ph id="ph3">`Using`</ph> block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <ph id="ph4">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Sie können deklarieren, <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> Objekte innerhalb einer <ph id="ph2">`using`</ph> Block (oder <ph id="ph3">`Using`</ph> -block in Visual Basic) sicherstellen, dass Streams und aller zugehörigen Ressourcen werden freigegeben, oder Sie explizit aufrufen können, die <ph id="ph4">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">`Close`</ph>.</source>
          <target state="translated">Das Leeren des Streams wird die zugrunde liegende Encoder nicht entleert, es sei denn, Sie explizit, um eine Implementierung von Aufrufen <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> oder <ph id="ph2">`Close`</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">Festlegen von <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> zu <ph id="ph2">`true`</ph> ist, werden Daten aus dem Puffer geleert werden, in den Stream, aber die Encoder-Status wird nicht geleert werden.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">Dadurch wird den Encoder seinen Zustand (teilweise Zeichen) beibehalten, sodass er den nächsten Block von Zeichen richtig zu codieren.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</source>
          <target state="translated">Dieses Szenario betrifft UTF8 und UTF7, in denen bestimmte Zeichen codiert werden können, nachdem der Encoder die angrenzenden Zeichen oder Zeichen empfängt.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Attempts to manipulate the stream after the stream has been closed might throw an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</source>
          <target state="translated">Versucht, den Stream zu bearbeiten, nachdem der Stream geschlossen wurde dies unter Umständen Auslösen einer <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>In derived classes, do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all of the <ph id="ph2">&lt;see langword="Stream" /&gt;</ph> cleanup logic in the <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Überschreiben Sie in abgeleiteten Klassen nicht die <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> -Methode, stattdessen werden alle der <ph id="ph2">&lt;see langword="Stream" /&gt;</ph> Bereinigungslogik in die <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Implementieren einer Dispose-Methode<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Liest alle Bytes aus dem aktuellen Stream und schreibt sie in einen anderen Datenstrom.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">Der Stream, in den der Inhalt des aktuellen Stream kopiert wird.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Liest alle Bytes aus dem aktuellen Stream und schreibt sie in einen anderen Datenstrom.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</source>
          <target state="translated">Kopieren beginnt an der aktuellen Position im aktuellen Stream und setzt nicht die Position im Zielstream zurück, nachdem der Kopiervorgang abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The following example copies the contents of a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> to a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">Im folgenden Beispiel wird kopiert den Inhalt einer <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> auf eine <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The current stream does not support reading.</source>
          <target state="translated">Lesevorgänge werden vom aktuellen Stream nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> does not support writing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> unterstützt das Schreiben nicht.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Either the current stream or <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> were closed before the <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> method was called.</source>
          <target state="translated">Entweder der aktuelle Stream oder <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> wurde geschlossen, bevor die <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph>-Methode aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>An I/O error occurred.</source>
          <target state="translated">E/A-Fehler</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">Der Stream, in den der Inhalt des aktuellen Stream kopiert wird.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The size of the buffer.</source>
          <target state="translated">Die Größe des Puffers.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>This value must be greater than zero.</source>
          <target state="translated">Dieser Wert muss größer als 0 sein.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The default size is 81920.</source>
          <target state="translated">Die Standardgröße ist 81920.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</source>
          <target state="translated">Liest alles Bytes aus dem aktuellen Datenstrom und schreibt sie unter Verwendung einer angegebenen Puffergröße in einen anderen Datenstrom.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</source>
          <target state="translated">Kopieren beginnt an der aktuellen Position im aktuellen Stream und setzt nicht die Position im Zielstream zurück, nachdem der Kopiervorgang abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> ist negativ oder 0 (null).</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The current stream does not support reading.</source>
          <target state="translated">Lesevorgänge werden vom aktuellen Stream nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> does not support writing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> unterstützt das Schreiben nicht.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Either the current stream or <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> were closed before the <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> method was called.</source>
          <target state="translated">Entweder der aktuelle Stream oder <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> wurde geschlossen, bevor die <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph>-Methode aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">E/A-Fehler</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Liest die Bytes asynchron aus dem aktuellen Stream und schreibt sie in einen anderen Stream.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">Der Stream, in den der Inhalt des aktuellen Stream kopiert wird.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">Liest die Bytes asynchron aus dem aktuellen Stream und schreibt sie in einen anderen Stream.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">Eine Aufgabe, die den asynchronen Kopiervorgang darstellt.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> Methode können Sie ressourcenintensive e/a-Vorgänge ausführen, ohne den Hauptthread zu blockieren.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Diese Überlegungen zur Leistung sind insbesondere in einer <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>-App oder <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>-App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Die Async-Methoden werden verwendet, in Verbindung mit der <ph id="ph1">`async`</ph> und <ph id="ph2">`await`</ph> in Visual Basic und C#-Schlüsselwörter.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">Das Kopieren beginnt an der aktuellen Position im aktuellen Stream.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The following example demonstrates how to use two <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objects to asynchronously copy the files from one directory to another.</source>
          <target state="translated">Im folgenden Beispiel wird veranschaulicht, wie zwei <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> -Objekten, die Dateien asynchron aus einem Verzeichnis auf einen anderen zu kopieren.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>-Klasse wird aus der <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>-Klasse abgeleitet.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id="ph3">`async`</ph> modifier because it calls an asynchronous method</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> -Ereignishandler für das <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> Steuerelement markiert ist, mit der <ph id="ph3">`async`</ph> Modifizierer, da es sich um eine asynchrone Methode aufruft</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">Entweder der aktuelle Stream oder der Zielstream wird freigegeben.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">Der aktuelle Stream unterstützt kein Lesen oder Zielstream unterstützt keine Schreibvorgänge.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">Der Stream, in den der Inhalt des aktuellen Stream kopiert wird.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The size, in bytes, of the buffer.</source>
          <target state="translated">Die Größe des Cookies in Bytes.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>This value must be greater than zero.</source>
          <target state="translated">Dieser Wert muss größer als 0 sein.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The default size is 81920.</source>
          <target state="translated">Die Standardgröße ist 81920.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</source>
          <target state="translated">Liest die Bytes asynchron aus dem aktuellen Stream und schreibt sie unter Verwendung einer angegebenen Puffergröße in einen anderen Stream.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">Eine Aufgabe, die den asynchronen Kopiervorgang darstellt.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> Methode können Sie ressourcenintensive e/a-Vorgänge ausführen, ohne den Hauptthread zu blockieren.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Diese Überlegungen zur Leistung sind insbesondere in einer <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>-App oder <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>-App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Die Async-Methoden werden verwendet, in Verbindung mit der <ph id="ph1">`async`</ph> und <ph id="ph2">`await`</ph> in Visual Basic und C#-Schlüsselwörter.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">Das Kopieren beginnt an der aktuellen Position im aktuellen Stream.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>For an example of copying between two streams, see the <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.</source>
          <target state="translated">Ein Beispiel für das Kopieren der zwischen zwei Datenströmen, finden Sie die <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> überladen.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> ist negativ oder 0 (null).</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">Entweder der aktuelle Stream oder der Zielstream wird freigegeben.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">Der aktuelle Stream unterstützt kein Lesen oder Zielstream unterstützt keine Schreibvorgänge.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">Der Stream, in den der Inhalt des aktuellen Stream kopiert wird.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The size, in bytes, of the buffer.</source>
          <target state="translated">Die Größe des Cookies in Bytes.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>This value must be greater than zero.</source>
          <target state="translated">Dieser Wert muss größer als 0 sein.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The default size is 81920.</source>
          <target state="translated">Die Standardgröße ist 81920.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Das Token zum überwachen von Abbruchanforderungen.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</source>
          <target state="translated">Liest die Bytes asynchron aus dem aktuellen Stream und schreibt sie unter Verwendung einer angegebenen Puffergröße und eines Abbruchtokens in einen anderen Stream.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">Eine Aufgabe, die den asynchronen Kopiervorgang darstellt.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> Methode können Sie ressourcenintensive e/a-Vorgänge ausführen, ohne den Hauptthread zu blockieren.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Diese Überlegungen zur Leistung sind insbesondere in einer <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>-App oder <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>-App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Die Async-Methoden werden verwendet, in Verbindung mit der <ph id="ph1">`async`</ph> und <ph id="ph2">`await`</ph> in Visual Basic und C#-Schlüsselwörter.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Wenn der Vorgang abgebrochen wird, bevor er abgeschlossen wurde, enthält die zurückgegebene Aufgabe der <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Wert für die <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">Das Kopieren beginnt an der aktuellen Position im aktuellen Stream.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>For an example of copying between two streams, see the <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.</source>
          <target state="translated">Ein Beispiel für das Kopieren der zwischen zwei Datenströmen, finden Sie die <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> überladen.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> ist negativ oder 0 (null).</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">Entweder der aktuelle Stream oder der Zielstream wird freigegeben.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">Der aktuelle Stream unterstützt kein Lesen oder Zielstream unterstützt keine Schreibvorgänge.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>Allocates a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> object.</source>
          <target state="translated">Reserviert ein <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>A reference to the allocated <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph>.</source>
          <target state="translated">Ein Verweis auf das reservierte <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>When called for the first time, the current method creates a <ph id="ph1">`WaitHandle`</ph> object and returns it.</source>
          <target state="translated">Wenn zum ersten Mal aufgerufen wird, wird die aktuelle Methode erstellt eine <ph id="ph1">`WaitHandle`</ph> Objekt und gibt ihn zurück.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>On subsequent calls, <ph id="ph1">`CreateWaitHandle`</ph> returns a reference to a new wait handle.</source>
          <target state="translated">Bei nachfolgenden Aufrufen <ph id="ph1">`CreateWaitHandle`</ph> gibt einen Verweis auf ein neues Wait-Handle.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>Use this method if you implement the asynchronous methods and require a way of blocking in <ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> until the asynchronous operation is complete.</source>
          <target state="translated">Verwenden Sie diese Methode, wenn Sie die asynchronen Methoden zu implementieren und eine Möglichkeit zum Blockieren benötigen in <ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> bis der asynchrone Vorgang abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">Gibt alle vom <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>-Objekt verwendeten Ressourcen frei.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">Gibt alle vom <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> verwendeten Ressourcen frei.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.</source>
          <target state="translated">Diese Methode verwirft den Stream und durch das Schreiben von Änderungen in den Sicherungsspeicher und Schließen des Streams um Ressourcen freizugeben.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Calling <ph id="ph1">`Dispose`</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">Aufrufen von <ph id="ph1">`Dispose`</ph> können Ressourcen von der <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> neu für andere Zwecke reserviert werden.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">`Dispose`</ph>, finden Sie unter <bpt id="p1">[</bpt>Bereinigen von nicht verwalteten Ressourcen<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Place all cleanup logic for your stream object in <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">Fügen Sie alle Bereinigungslogik für das Streamobjekt in <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Do not override <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>.</source>
          <target state="translated">Überschreiben Sie nicht <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Note that because of backward compatibility requirements, this method's implementation differs from the recommended guidance for the Dispose pattern.</source>
          <target state="translated">Beachten Sie, dass aufgrund der Abwärtskompatibilität Anforderungen, die Implementierung dieser Methode die empfohlene Vorgehensweise für das Dispose-Muster unterscheidet.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>This method calls <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>, which then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">Diese Methode ruft <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>, wodurch wiederum <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <ph id="ph2">&lt;see langword="false" /&gt;</ph>, um ausschließlich nicht verwaltete Ressourcen freizugeben.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Gibt die von <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>You should release all resources by specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`disposing`</ph>.</source>
          <target state="translated">Sie sollten alle Ressourcen freizugeben, indem Sie angeben <ph id="ph1">`true`</ph> für <ph id="ph2">`disposing`</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>When <ph id="ph1">`disposing`</ph> is <ph id="ph2">`true`</ph>, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.</source>
          <target state="translated">Wenn <ph id="ph1">`disposing`</ph> ist <ph id="ph2">`true`</ph>, der Datenstrom kann außerdem sicherstellen, Daten in den zugrunde liegenden Puffer geleert werden, und auf andere finalisierbare Objekte zugreifen.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>This may not be possible when called from a finalizer due a lack of ordering among finalizers.</source>
          <target state="translated">Dies kann nicht möglich, beim Aufruf von einem Finalizer einen mangelnde Reihenfolge von Finalizern sein.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>If your stream is using an operating system handle to communicate with its source, consider using a subclass of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> for this purpose.</source>
          <target state="translated">Wenn der Stream ein Betriebssystemhandle für die Kommunikation mit der Quelle verwendet wird, erwägen Sie eine Unterklasse von <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> für diesen Zweck.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Diese Methode wird aufgerufen, der öffentlich <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> Methode und die <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> Ruft die geschützte <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> Methode mit dem <ph id="ph3">`disposing`</ph> Parametersatz auf <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> Ruft <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> mit <ph id="ph3">`disposing`</ph> festgelegt <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>In derived classes, do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all of the Stream cleanup logic in the <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Überschreiben Sie in abgeleiteten Klassen nicht die <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> -Methode, werden alle in den Stream der Bereinigungslogik stattdessen die <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> kann von anderen Objekten mehrmals aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">Beim Überschreiben von <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> müssen Sie darauf achten, nicht auf Objekte zu verweisen, die durch einen früheren Aufruf von <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> freigegeben wurden.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Weitere Informationen zum Implementieren <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, finden Sie unter <bpt id="p1">[</bpt>Implementieren einer Dispose-Methode<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> und <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, finden Sie unter <bpt id="p1">[</bpt>Bereinigen von nicht verwalteten Ressourcen<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request to finish.</source>
          <target state="translated">Der Verweis auf die ausstehende asynchrone Anforderung, die beendet werden soll.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Waits for the pending asynchronous read to complete.</source>
          <target state="translated">Wartet, bis der ausstehende asynchrone Lesevorgang abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Verwenden Sie stattdessen <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the stream, between zero (0) and the number of bytes you requested.</source>
          <target state="translated">Die Anzahl der aus dem Stream gelesenen Bytes. Diese Anzahl kann zwischen 0 und der Anzahl der angeforderten Bytes liegen.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</source>
          <target state="translated">Streams geben nur am Ende des Streams 0 zurück, andernfalls sollten sie blockieren, bis mindestens 1 Byte verfügbar ist.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">In .NET Framework 4 und vorherigen Versionen müssen Sie Methoden wie <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> verwenden, um asynchrone E/A-Vorgänge zu implementieren.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Diese Methoden sind weiterhin verfügbar, in der <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> zur Unterstützung von legacy-Code; allerdings der neuen asynchronen Methoden, wie z. B. <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, und <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, Hilfe, die Sie implementieren leichter asynchrone e/a-Vorgänge.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Call <ph id="ph1">`EndRead`</ph> to determine how many bytes were read from the stream.</source>
          <target state="translated">Rufen Sie <ph id="ph1">`EndRead`</ph> zu bestimmen, wie viele Bytes aus dem Stream gelesen wurden.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">`EndRead`</ph> can be called once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`EndRead`</ph> kann auf einmal aufgerufen werden alle <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> aus <ph id="ph3">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">Diese Methode blockiert, bis die E/A-Operation abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>A handle to the pending read operation is not available.</source>
          <target state="translated">Ein Handle für den ausstehenden Lesevorgang ist nicht verfügbar.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The pending operation does not support reading.</source>
          <target state="translated">Die anstehende Operation unterstützt keine Lesevorgänge.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> basiert nicht auf einer <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph>-Methode im aktuellen Stream.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">Der Stream ist geschlossen, oder ein interner Fehler ist aufgetreten.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>A reference to the outstanding asynchronous I/O request.</source>
          <target state="translated">Ein Verweis auf die ausstehende asynchrone E/A-Anforderung.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Ends an asynchronous write operation.</source>
          <target state="translated">Beendet einen asynchronen Schreibvorgang.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(Verwenden Sie stattdessen <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">In .NET Framework 4 und vorherigen Versionen müssen Sie Methoden wie <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> verwenden, um asynchrone E/A-Vorgänge zu implementieren.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">Diese Methoden sind weiterhin verfügbar, in der <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> zur Unterstützung von legacy-Code; allerdings der neuen asynchronen Methoden, wie z. B. <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, und <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, Hilfe, die Sie implementieren leichter asynchrone e/a-Vorgänge.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">`EndWrite`</ph> must be called exactly once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`EndWrite`</ph> muss genau einmal aufgerufen werden, für jede <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> aus <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">Diese Methode blockiert, bis die E/A-Operation abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">Fehler während einer asynchronen schreibanforderung, z. B. Fehler auf dem Datenträger während der e/a-Anforderung für den Thread im Threadpool ausgeführt, und werden bei einem Aufruf sichtbar <ph id="ph1">`EndWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Exceptions thrown by the thread pool thread will not be visible when calling <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">Der Thread des Threadpools ausgelöste Ausnahmen werden nicht sichtbar sein, beim Aufrufen von <ph id="ph1">`EndWrite`</ph>.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>A handle to the pending write operation is not available.</source>
          <target state="translated">Ein Handle für den ausstehenden Schreibvorgang ist nicht verfügbar.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>The pending operation does not support writing.</source>
          <target state="translated">Die anstehende Operation unterstützt keine Schreibvorgänge.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> basiert nicht auf einer <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph>-Methode im aktuellen Stream.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">Der Stream ist geschlossen, oder ein interner Fehler ist aufgetreten.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Flush">
          <source>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">Löscht beim Überschreiben in einer abgeleiteten Klasse alle Puffer für diesen Stream und veranlasst die Ausgabe aller gepufferten Daten an das zugrunde liegende Gerät.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Override <ph id="ph1">`Flush`</ph> on streams that implement a buffer.</source>
          <target state="translated">Überschreiben Sie <ph id="ph1">`Flush`</ph> für Streams aus, die einen Puffer zu implementieren.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both.</source>
          <target state="translated">Verwenden Sie diese Methode, verschieben alle Informationen aus einem zugrunde liegenden Puffer an ihr Ziel, deaktivieren Sie den Puffer oder beides.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking).</source>
          <target state="translated">Je nach Zustand des Objekts, müssen Sie möglicherweise die aktuelle Position im Stream ändern (beispielsweise, wenn die zugrunde liegende stream mit Suchvorgänge unterstützt).</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>For additional information see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>When using the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> class, do not flush the base <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
          <target state="translated">Bei Verwendung der <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> oder <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> Klasse, leert Sie nicht die Basis <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Instead, use the class's <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.</source>
          <target state="translated">Verwenden Sie stattdessen der Klasse <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> -Methode, die sicherstellt, dass die Daten zuerst auf den zugrunde liegenden Stream geleert und klicken Sie dann in die Datei geschrieben werden.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Flush">
          <source>An I/O error occurs.</source>
          <target state="translated">Ein E/A-Fehler tritt auf.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">Löscht sämtliche Puffer für diesen Stream asynchron und veranlasst die Ausgabe aller gepufferten Daten an das zugrunde liegende Gerät.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">Löscht sämtliche Puffer für diesen Stream asynchron und veranlasst die Ausgabe aller gepufferten Daten an das zugrunde liegende Gerät.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">Eine Aufgabe, die die asynchrone Leerung darstellt.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync">
          <source>If a derived class, such as <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.</source>
          <target state="translated">Wenn eine abgeleitete Klasse, wie z. B. <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> oder <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, leert den Puffer in seiner Implementierung von der <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> -Methode, die <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> Methode wird nicht entleert den Puffer.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>The stream has been disposed.</source>
          <target state="translated">Der Stream wurde verworfen.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Das Token zum überwachen von Abbruchanforderungen.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</source>
          <target state="translated">Löscht alle Puffer für diesen Stream asynchron, veranlasst die Ausgabe aller gepufferten Daten an das zugrunde liegende Gerät und überwacht Abbruchanforderungen.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">Eine Aufgabe, die die asynchrone Leerung darstellt.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Wenn der Vorgang abgebrochen wird, bevor er abgeschlossen wurde, enthält die zurückgegebene Aufgabe der <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Wert für die <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>If a derived class, such as <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.</source>
          <target state="translated">Wenn eine abgeleitete Klasse, wie z. B. <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> oder <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, leert den Puffer in seiner Implementierung von der <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> -Methode, die <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> Methode wird nicht entleert den Puffer.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Der Stream wurde verworfen.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>When overridden in a derived class, gets the length in bytes of the stream.</source>
          <target state="translated">Ruft beim Überschreiben in einer abgeleiteten Klasse die Länge des Streams in Bytes ab.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Length">
          <source>A long value representing the length of the stream in bytes.</source>
          <target state="translated">Ein Long-Wert, der die Länge des Streams in Bytes darstellt.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>A class derived from <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> does not support seeking.</source>
          <target state="translated">Eine aus <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> abgeleitete Klasse unterstützt keine Suchvorgänge.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="F:System.IO.Stream.Null">
          <source>A <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> with no backing store.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> ohne Sicherungsspeicher.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source>Use <ph id="ph1">`Null`</ph> to redirect output to a stream that will not consume any operating system resources.</source>
          <target state="translated">Verwendung <ph id="ph1">`Null`</ph> Umleiten von Ausgaben in einen Stream, der keine Ressourcen des Betriebssystems belegt wird.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source>When the methods of <ph id="ph1">`Stream`</ph> that provide writing are invoked on <ph id="ph2">`Null`</ph>, the call simply returns, and no data is written.</source>
          <target state="translated">Wenn die Methoden der <ph id="ph1">`Stream`</ph> , die Schreiben von aufgerufen werden bereitstellen <ph id="ph2">`Null`</ph>, der Aufruf zurückgegeben und keine Daten geschrieben werden.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source><ph id="ph1">`Null`</ph> also implements a <ph id="ph2">`Read`</ph> method that returns zero without reading data.</source>
          <target state="translated"><ph id="ph1">`Null`</ph> implementiert auch eine <ph id="ph2">`Read`</ph> Methode, die 0 (null), ohne Lesen von Daten zurückgibt.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ObjectInvariant">
          <source>Provides support for a <ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.Contract" /&gt;</ph>.</source>
          <target state="translated">Bietet Unterstützung für einen <ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.Contract" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>When overridden in a derived class, gets or sets the position within the current stream.</source>
          <target state="translated">Ruft beim Überschreiben in einer abgeleiteten Klasse die Position im aktuellen Stream ab oder legt diese fest.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The current position within the stream.</source>
          <target state="translated">Die aktuelle Position innerhalb des Streams.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The stream must support seeking to get or set the position.</source>
          <target state="translated">Der Datenstrom muss Suchvorgänge zum Abrufen oder Festlegen der Position unterstützt.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the stream supports seeking.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob der Stream Suchvorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">Suchvorgänge, die an einem beliebigen Speicherort überschreitet die Länge des Streams wird unterstützt.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The <ph id="ph1">`Position`</ph> property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</source>
          <target state="translated">Die <ph id="ph1">`Position`</ph> Eigenschaft ist nicht behalten Sie den Überblick über der Anzahl von Bytes aus der Datenstrom, der verarbeitet wurden übersprungen, oder beides.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>An I/O error occurs.</source>
          <target state="translated">Ein E/A-Fehler tritt auf.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>The stream does not support seeking.</source>
          <target state="translated">Vom Stream wird Suchen nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Ein Bytearray.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, the buffer contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">Wenn diese Methode zurückgegeben wird, enthält der Puffer das angegebene Bytearray mit den Werten zwischen <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> und (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> –1), die durch aus der aktuellen Quelle gelesene Bytes ersetzt wurden.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin storing the data read from the current stream.</source>
          <target state="translated">Der nullbasierte Byteoffset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, ab dem die aus dem aktuellen Stream gelesenen Daten gespeichert werden sollen.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to be read from the current stream.</source>
          <target state="translated">Die maximale Anzahl an Bytes, die aus dem aktuellen Stream gelesen werden sollen.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">Liest beim Überschreiben in einer abgeleiteten Klasse eine Folge von Bytes aus dem aktuellen Stream und erhöht die Position im Stream um die Anzahl der gelesenen Bytes.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">Die Gesamtanzahl der in den Puffer gelesenen Bytes.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</source>
          <target state="translated">Dies kann weniger als die Anzahl der angeforderten Bytes sein, wenn diese Anzahl an Bytes derzeit nicht verfügbar ist, oder 0, wenn das Ende des Streams erreicht ist.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Lesevorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method to read asynchronously from the current stream.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> Methode, um asynchron aus dem aktuellen Stream zu lesen.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Implementations of this method read a maximum of <ph id="ph1">`count`</ph> bytes from the current stream and store them in <ph id="ph2">`buffer`</ph> beginning at <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Implementierungen dieser Methode lesen maximal <ph id="ph1">`count`</ph> Bytes aus dem aktuellen stream und speichert diese im <ph id="ph2">`buffer`</ph> beginnend <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.</source>
          <target state="translated">Die aktuelle Position im Stream wird durch die Anzahl der gelesenen Bytes erweitert; Wenn eine Ausnahme auftritt, bleibt die aktuelle Position im Stream jedoch unverändert.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Implementations return the number of bytes read.</source>
          <target state="translated">Implementierungen geben die Anzahl der gelesenen Bytes zurück.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The implementation will block until at least one byte of data can be read, in the event that no data is available.</source>
          <target state="translated">Die Implementierung blockiert, bis mindestens 1 Byte Daten gelesen werden kann, dass keine Daten verfügbar sind.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> nur, wenn keine weiteren Daten in den Datenstrom vorhanden ist und nicht mehr (z. B. ein geschlossener Socket oder ein Dateiende) erwartet wird, wird 0 zurückgegeben.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">Eine Implementierung kann weniger Bytes als angefordert zurückgeben, selbst wenn das Ende des Streams nicht erreicht wurde.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.</source>
          <target state="translated">Verwendung <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> zum Lesen von primitiven Datentypen.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> to read a block of data.</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> einen Block von Daten zu lesen.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">Die Summe von <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> und <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist größer als die Pufferlänge.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist ein negativer Wert.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">Ein E/A-Fehler tritt auf.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">Lesevorgänge werden vom Stream nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">Liest eine Bytesequenz asynchron aus dem aktuellen Stream und setzt die Position in diesem Stream um die Anzahl der gelesenen Bytes nach vorn.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write the data into.</source>
          <target state="translated">Der Puffer, in den die Daten geschrieben werden sollen.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">Der Byteoffset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, ab dem Daten aus dem Stream geschrieben werden sollen.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Die maximale Anzahl der zu lesenden Bytes.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">Liest eine Bytesequenz asynchron aus dem aktuellen Stream und setzt die Position in diesem Stream um die Anzahl der gelesenen Bytes nach vorn.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Eine Aufgabe, die den asynchronen Lesevorgang darstellt.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">Der Wert des <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>-Parameters enthält die Gesamtzahl der Bytes, die in den Puffer gelesen werden.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">Der Ergebniswert kann niedriger als die Anzahl der angeforderten Bytes sein, wenn die Anzahl an derzeit verfügbaren Bytes kleiner ist als die angeforderte Anzahl, oder sie kann 0 (null) sein, wenn das Datenstromende erreicht ist.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> Methode können Sie ressourcenintensive e/a-Vorgänge ausführen, ohne den Hauptthread zu blockieren.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Diese Überlegungen zur Leistung sind insbesondere in einer <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>-App oder <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>-App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Die Async-Methoden werden verwendet, in Verbindung mit der <ph id="ph1">`async`</ph> und <ph id="ph2">`await`</ph> in Visual Basic und C#-Schlüsselwörter.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Lesevorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to read from a file asynchronously.</source>
          <target state="translated">Im folgende Beispiel wird gezeigt, wie asynchron aus einer Datei gelesen werden.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class, which derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">Im Beispiel wird die <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> -Klasse, abgeleitet von der <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist ein negativer Wert.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">Die Summe von <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> und <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist größer als die Pufferlänge.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">Lesevorgänge werden vom Stream nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream has been disposed.</source>
          <target state="translated">Der Stream wurde verworfen.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">Der Stream wird zurzeit von einem vorherigen Lesevorgang verwendet.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">Der Puffer, in den die Daten geschrieben werden sollen.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">Der Byteoffset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, ab dem Daten aus dem Stream geschrieben werden sollen.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Die maximale Anzahl der zu lesenden Bytes.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Das Token zum überwachen von Abbruchanforderungen.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">Liest eine Folge von Bytes asynchron aus dem aktuellen Stream, erhöht die Position im Stream um die Anzahl der gelesenen Bytes und überwacht Abbruchanfragen.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Eine Aufgabe, die den asynchronen Lesevorgang darstellt.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">Der Wert des <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>-Parameters enthält die Gesamtzahl der Bytes, die in den Puffer gelesen werden.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">Der Ergebniswert kann niedriger als die Anzahl der angeforderten Bytes sein, wenn die Anzahl an derzeit verfügbaren Bytes kleiner ist als die angeforderte Anzahl, oder sie kann 0 (null) sein, wenn das Datenstromende erreicht ist.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> Methode können Sie ressourcenintensive e/a-Vorgänge ausführen, ohne den Hauptthread zu blockieren.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Diese Überlegungen zur Leistung sind insbesondere in einer <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>-App oder <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>-App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Die Async-Methoden werden verwendet, in Verbindung mit der <ph id="ph1">`async`</ph> und <ph id="ph2">`await`</ph> in Visual Basic und C#-Schlüsselwörter.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Lesevorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Wenn der Vorgang abgebrochen wird, bevor er abgeschlossen wurde, enthält die zurückgegebene Aufgabe der <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Wert für die <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.</source>
          <target state="translated">Ein Beispiel finden Sie unter der <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> überladen.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist ein negativer Wert.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">Die Summe von <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> und <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist größer als die Pufferlänge.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support reading.</source>
          <target state="translated">Lesevorgänge werden vom Stream nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Der Stream wurde verworfen.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">Der Stream wird zurzeit von einem vorherigen Lesevorgang verwendet.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</source>
          <target state="translated">Liest ein Byte aus dem Stream und erhöht die Position im Stream um ein Byte, oder gibt -1 zurück, wenn das Ende des Streams erreicht ist.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>The unsigned byte cast to an <ph id="ph1">&lt;see langword="Int32" /&gt;</ph>, or -1 if at the end of the stream.</source>
          <target state="translated">Das Byte ohne Vorzeichen, umgewandelt in <ph id="ph1">&lt;see langword="Int32" /&gt;</ph>, oder -1, wenn das Ende des Streams erreicht ist.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Lesevorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Attempts to manipulate the stream after the stream has been closed could throw an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</source>
          <target state="translated">Der Stream bearbeiten, nachdem der Stream geschlossen wurde auslösen konnte ein <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>The stream does not support reading.</source>
          <target state="translated">Lesevorgänge werden vom Stream nicht unterstützt.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">Die standardmäßige Implementierung auf <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> erstellt ein neues Single-Byte-Array und ruft dann <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">Während dies formal richtig ist, ist es ineffizient.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">Jeder Stream mit einem internen Puffer sollte diese Methode überschreiben und eine wesentlich effizienter Version, die den Puffer direkt, liest die Zuordnung zusätzlichen Array bei jedem Aufruf zu vermeiden.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.ReadTimeout">
          <source>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</source>
          <target state="translated">Ruft einen Wert in Millisekunden ab, der bestimmt, wie lange der Stream versucht, Lesevorgänge durchzuführen, bevor ein Timeout auftritt, oder legt diesen fest.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</source>
          <target state="translated">Ein Wert in Millisekunden, der bestimmt, wie lange der Stream versucht, Lesevorgänge durchzuführen, bevor ein Timeout auftritt.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.ReadTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> method always throws an <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph>-Methode löst immer eine <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> aus.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> property should be overridden to provide the appropriate behavior for the stream.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> Eigenschaft sollte überschrieben werden, um das entsprechende Verhalten für den Stream bereitzustellen.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>If the stream does not support timing out, this property should raise an <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">Wenn der Stream ein Timeout nicht unterstützt, sollte diese Eigenschaft Auslösen einer <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A byte offset relative to the <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Ein Byteoffset, der relativ zum <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>-Parameter ist.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> indicating the reference point used to obtain the new position.</source>
          <target state="translated">Ein Wert vom Typ <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>, der den Bezugspunkt angibt, von dem aus die neue Position ermittelt wird.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>When overridden in a derived class, sets the position within the current stream.</source>
          <target state="translated">Legt beim Überschreiben in einer abgeleiteten Klasse die Position im aktuellen Stream fest.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position within the current stream.</source>
          <target state="translated">Die neue Position innerhalb des aktuellen Streams.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the current instance supports seeking.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Suchvorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is negative, the new position is required to precede the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Wenn <ph id="ph1">`offset`</ph> ist negativ ist, die neue Position ist erforderlich, um vor der der angegebenen Position <ph id="ph2">`origin`</ph> durch die Anzahl der Bytes, die vom angegebenen <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is zero (0), the new position is required to be the position specified by <ph id="ph2">`origin`</ph>.</source>
          <target state="translated">Wenn <ph id="ph1">`offset`</ph> ist 0 (null), die neue Position ist erforderlich, um die angegebene Position von <ph id="ph2">`origin`</ph>.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is positive, the new position is required to follow the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Wenn <ph id="ph1">`offset`</ph> positiv ist, wird die neue Position ist erforderlich, um der angegebenen Position <ph id="ph2">`origin`</ph> durch die Anzahl der Bytes, die vom angegebenen <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Classes derived from <ph id="ph1">`Stream`</ph> that support seeking must override this method to provide the functionality described above.</source>
          <target state="translated">Abgeleitete Klassen von <ph id="ph1">`Stream`</ph> , dass Suchvorgänge unterstützen diese Methode, um die oben beschriebenen Funktionen bereitstellen muss außer Kraft gesetzt.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">Suchvorgänge, die an einem beliebigen Speicherort überschreitet die Länge des Streams wird unterstützt.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>An I/O error occurs.</source>
          <target state="translated">Ein E/A-Fehler tritt auf.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</source>
          <target state="translated">Der Stream unterstützt keine Suchvorgänge. Dies ist beispielsweise der Fall, wenn der Stream aus einer Pipe- oder Konsolenausgabe erstellt wird.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>The desired length of the current stream in bytes.</source>
          <target state="translated">Die gewünschte Länge des aktuellen Streams in Bytes.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>When overridden in a derived class, sets the length of the current stream.</source>
          <target state="translated">Legt beim Überschreiben in einer abgeleiteten Klasse die Länge des aktuellen Streams fest.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the specified value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">Wenn der angegebene Wert kleiner als die aktuelle Länge des Streams ist, wird der Stream abgeschnitten.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the specified value is larger than the current length of the stream, the stream is expanded.</source>
          <target state="translated">Wenn der angegebene Wert größer als die aktuelle Länge des Streams ist, wird der Stream erweitert.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the stream is expanded, the contents of the stream between the old and the new length are not defined.</source>
          <target state="translated">Wenn der Stream erweitert wird, werden der Inhalt des Streams zwischen der alten und die neue Länge nicht definiert.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">`SetLength`</ph> to work.</source>
          <target state="translated">Ein Stream muss Schreib- und Suchvorgänge für unterstützen <ph id="ph1">`SetLength`</ph> arbeiten.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing, and the <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether seeking is supported.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Schreibvorgänge unterstützt und die <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob Suchvorgänge unterstützt werden.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>An I/O error occurs.</source>
          <target state="translated">Ein E/A-Fehler tritt auf.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</source>
          <target state="translated">Der Stream unterstützt nicht sowohl Lese- als auch Schreibvorgänge. Dies ist beispielsweise der Fall, wenn der Stream aus einer Pipe- oder Konsolenausgabe erstellt wird.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object to synchronize.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>-Objekt, das synchronisiert werden soll.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>Creates a thread-safe (synchronized) wrapper around the specified <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">Erstellt um das angegebene <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>-Objekt einen threadsicheren (synchronisierten) Wrapper.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>A thread-safe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">Ein threadsicheres <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>This method returns a class that wraps the specified <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object and restricts access to it from multiple threads.</source>
          <target state="translated">Diese Methode gibt eine Klasse, die den angegebenen umschließt <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> -Objekt und den Zugriff von mehreren Threads darauf beschränkt.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>All access to the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object will be thread safe.</source>
          <target state="translated">Der gesamte Zugriff auf die <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> Objekt ist threadsicher.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Ein Bytearray.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>This method copies <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept> bytes from <bpt id="p2">&lt;c&gt;</bpt>buffer<ept id="p2">&lt;/c&gt;</ept> to the current stream.</source>
          <target state="translated">Diese Methode kopiert <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept>-Bytes aus <bpt id="p2">&lt;c&gt;</bpt>buffer<ept id="p2">&lt;/c&gt;</ept> in den aktuellen Stream.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated">Der nullbasierte Byteoffset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, ab dem Daten in den aktuellen Stream kopiert werden sollen.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to be written to the current stream.</source>
          <target state="translated">Die Anzahl an Bytes, die in den aktuellen Stream geschrieben werden sollen.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">Schreibt beim Überschreiben in einer abgeleiteten Klasse eine Folge von Bytes in den aktuellen Stream und erhöht die aktuelle Position im Stream um die Anzahl der geschriebenen Bytes.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Schreibvorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method to write asynchronously to the current stream.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> -Methode asynchron in den aktuellen Stream geschrieben.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If the write operation is successful, the position within the stream advances by the number of bytes written.</source>
          <target state="translated">Wenn der Schreibvorgang erfolgreich ist, setzt die Position im Stream um die Anzahl der geschriebenen Bytes.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the position within the stream remains unchanged.</source>
          <target state="translated">Wenn eine Ausnahme auftritt, bleibt die Position im Stream unverändert.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is greater than the buffer length.</source>
          <target state="translated">Die Summe von <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> und <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist größer als die Pufferlänge.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist ein negativer Wert.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occured, such as the specified file cannot be found.</source>
          <target state="translated">Ein E/A-Fehler ist aufgetreten, z.B. „Die angegebene Datei kann nicht gefunden werden.“</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">Der Stream unterstützt das Schreiben nicht.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> was called after the stream was closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> wurde aufgerufen, nachdem der Stream geschlossen wurde.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">Schreibt eine Bytesequenz asynchron in den aktuellen Stream und setzt die aktuelle Position in diesem Stream um die Anzahl der geschriebenen Bytes nach vorn.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write data from.</source>
          <target state="translated">Der Puffer, aus dem Daten geschrieben werden sollen.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">Der nullbasierte Byteoffset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, ab dem Bytes in den Stream kopiert werden sollen.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Die maximale Anzahl der zu schreibenden Bytes.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">Schreibt eine Bytesequenz asynchron in den aktuellen Stream und setzt die aktuelle Position in diesem Stream um die Anzahl der geschriebenen Bytes nach vorn.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> Methode können Sie ressourcenintensive e/a-Vorgänge ausführen, ohne den Hauptthread zu blockieren.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Diese Überlegungen zur Leistung sind insbesondere in einer <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>-App oder <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>-App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Die Async-Methoden werden verwendet, in Verbindung mit der <ph id="ph1">`async`</ph> und <ph id="ph2">`await`</ph> in Visual Basic und C#-Schlüsselwörter.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Schreibvorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to write asynchronously to a file.</source>
          <target state="translated">Im folgende Beispiel wird gezeigt, wie asynchron in eine Datei geschrieben wird.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class, which derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">Im Beispiel wird die <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> -Klasse, abgeleitet von der <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist ein negativer Wert.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">Die Summe von <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> und <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist größer als die Pufferlänge.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">Der Stream unterstützt das Schreiben nicht.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream has been disposed.</source>
          <target state="translated">Der Stream wurde verworfen.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">Der Stream wird zurzeit von einem vorherigen Schreibvorgang verwendet.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">Der Puffer, aus dem Daten geschrieben werden sollen.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">Der nullbasierte Byteoffset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, ab dem Bytes in den Stream kopiert werden sollen.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Die maximale Anzahl der zu schreibenden Bytes.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Das Token zum überwachen von Abbruchanforderungen.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">Schreibt eine Folge von Bytes asynchron in den aktuellen Stream, erhöht die aktuelle Position im Stream um die Anzahl der geschriebenen Bytes und überwacht Abbruchanforderungen.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> Methode können Sie ressourcenintensive e/a-Vorgänge ausführen, ohne den Hauptthread zu blockieren.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">Diese Überlegungen zur Leistung sind insbesondere in einer <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>-App oder <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph>-App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">Die Async-Methoden werden verwendet, in Verbindung mit der <ph id="ph1">`async`</ph> und <ph id="ph2">`await`</ph> in Visual Basic und C#-Schlüsselwörter.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Schreibvorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Wenn der Vorgang abgebrochen wird, bevor er abgeschlossen wurde, enthält die zurückgegebene Aufgabe der <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Wert für die <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.</source>
          <target state="translated">Ein Beispiel finden Sie unter der <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> überladen.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist ein negativer Wert.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">Die Summe von <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> und <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist größer als die Pufferlänge.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support writing.</source>
          <target state="translated">Der Stream unterstützt das Schreiben nicht.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Der Stream wurde verworfen.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">Der Stream wird zurzeit von einem vorherigen Schreibvorgang verwendet.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The byte to write to the stream.</source>
          <target state="translated">Das Byte, das in den Stream geschrieben werden soll.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</source>
          <target state="translated">Schreibt ein Byte an die aktuellen Position im Stream und erhöht die aktuelle Position im Stream um ein Byte.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Schreibvorgänge unterstützt.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>An I/O error occurs.</source>
          <target state="translated">Ein E/A-Fehler tritt auf.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The stream does not support writing, or the stream is already closed.</source>
          <target state="translated">Der Stream unterstützt keine Schreibvorgänge, oder er wurde bereits geschlossen.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">Die standardmäßige Implementierung auf <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> erstellt ein neues Single-Byte-Array und ruft dann <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">Während dies formal richtig ist, ist es ineffizient.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that writes to the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">Jeder Stream mit einem internen Puffer sollte diese Methode überschreiben und eine wesentlich effizienter Version, die direkt in den Puffer schreibt die Zuordnung zusätzlichen Array bei jedem Aufruf zu vermeiden.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.WriteTimeout">
          <source>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</source>
          <target state="translated">Ruft einen Wert in Millisekunden ab, der bestimmt, wie lange der Stream versucht, Schreibvorgänge durchzuführen, bevor ein Timeout auftritt, oder legt diesen fest.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</source>
          <target state="translated">Ein Wert in Millisekunden, der bestimmt, wie lange der Stream versucht, Schreibvorgänge durchzuführen, bevor ein Timeout auftritt.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.WriteTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> method always throws an <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph>-Methode löst immer eine <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> aus.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> property should be overridden to provide the appropriate behavior for the stream.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> Eigenschaft sollte überschrieben werden, um das entsprechende Verhalten für den Stream bereitzustellen.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>If the stream does not support timing out, this property should raise an <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">Wenn der Stream ein Timeout nicht unterstützt, sollte diese Eigenschaft Auslösen einer <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
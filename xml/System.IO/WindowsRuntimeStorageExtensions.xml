<Type Name="WindowsRuntimeStorageExtensions" FullName="System.IO.WindowsRuntimeStorageExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="01b28c46c9d6a250ef56456032d2e9e0b7397cc9" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78703525" /></Metadata><TypeSignature Language="C#" Value="public static class WindowsRuntimeStorageExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit WindowsRuntimeStorageExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.WindowsRuntimeStorageExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module WindowsRuntimeStorageExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsRuntimeStorageExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type WindowsRuntimeStorageExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
    <AssemblyVersion>4.0.15.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-uwp-10.0">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enthält Erweiterungsmethoden für <see cref="T:Windows.Storage.IStorageFile" /> und <see cref="T:Windows.Storage.IStorageFolder" />-Schnittstellen in der Windows-Runtime bei der Entwicklung von Microsoft Store-Apps.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Diese Erweiterungs Methoden sind nur verfügbar, wenn Sie Windows Store-Apps entwickeln. Die-Methoden stellen bequeme Möglichkeiten zum Öffnen von Dateien zum Lesen oder schreiben in Windows Store-Apps bereit. Sie erstellen keine Instanz der `WindowsRuntimeStorageExtensions`-Klasse. Stattdessen verwenden Sie diese Methoden aus Instanzen der Schnittstellen <xref:Windows.Storage.IStorageFile> und <xref:Windows.Storage.IStorageFolder>.

Die `WindowsRuntimeStorageExtensions`-Klasse enthält zwei Methoden, die <xref:Windows.Storage.IStorageFile> zum Lesen oder schreiben erweitern:

  - <xref:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFile)>
  - <xref:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFile)>

Die windowsruntimestorageextensions-Klasse enthält zwei Methoden, die <xref:Windows.Storage.IStorageFolder> zum Lesen und schreiben erweitern:
  - <xref:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFolder,System.String)>
  - <xref:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFolder,System.String,Windows.Storage.CreationCollisionOption)>

## Examples

Im folgenden Beispiel wird gezeigt, wie Sie eine Datei in den Anwendungsdaten als <xref:System.IO.Stream> in einer Windows Store-APP öffnen und mithilfe einer Instanz der <xref:System.IO.StreamWriter>-Klasse in diese schreiben. Anschließend wird der Inhalt für die Datei mithilfe einer Instanz der <xref:System.IO.StreamReader>-Klasse gelesen.

[!code-csharp[windowsruntimestorageextensions#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage4.xaml.cs#8)]
[!code-vb[windowsruntimestorageextensions#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/vb/blankpage4.xaml.vb#8)]

Im nächsten Beispiel wird der XAML-Code gezeigt, der mit dem vorherigen Beispiel verknüpft ist. 

[!code-xaml[windowsruntimestorageextensions#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage4.xaml#7)]

]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateSafeFileHandle">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Er erstellt einen Verweis und gibt diesen auf einem sicheren Dateihandle für die IStorage-Instanz zurück, die erweitert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Mit dem Windows 10 Anniversary Update wurden <xref:Windows.Storage.IStorageFolder> und <xref:Windows.Storage.IStorageFile> neue Schnittstellen hinzugefügt, die das Erstellen eines Standard-Win32-Datei Handles ermöglichen: `IStorageFolderHandleAccess` und `IStorageItemHandleAccess`. Die `CreateSafeFileHandle` Gruppe der Erweiterungs Methoden nutzt die `Create` Methoden dieser Schnittstellen.

Der Hauptvorteil der API ist der Zugriff auf eine vermittelte `SafeFileHandle`. Dies ist äußerst wichtig, wenn Sie eine <xref:System.IO.FileStream> um eine <xref:Windows.Storage.IStorageItem> oder <xref:Windows.Storage.IStorageFolder> erstellen möchten, wenn Sie in einem [appcontainer](https://docs.microsoft.com/windows/win32/secauthz/appcontainer-isolation)ausführen. Bei der Ausführung in einem appcontainer hat die Anwendung sehr eingeschränkte Dateizugriffsrechte. Für Dinge wie Bild-und Dokument Ordner muss das systemeigene Datei Handle über `RuntimeBroker.exe`per Proxy bereitgestellt werden, da der Anwendungsprozess selbst über keine Rechte für die meisten Dateien verfügt. Diese API ruft das Proxy Handle ab. Wenn Sie auf Benutzerdaten Ordner zugreifen oder eine Dateiauswahl verwenden, sollte diese API immer verwendet werden, um <xref:System.IO.FileStream>zu erstellen. Die Verwendung eines Pfads löst häufig <xref:System.AccessViolationException> in diesen Fällen aus.

          ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateSafeFileHandle">
      <MemberSignature Language="C#" Value="public static Microsoft.Win32.SafeHandles.SafeFileHandle CreateSafeFileHandle (this Windows.Storage.IStorageFolder rootDirectory, string relativePath, System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Win32.SafeHandles.SafeFileHandle CreateSafeFileHandle(class Windows.Storage.IStorageFolder rootDirectory, string relativePath, valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStorageExtensions.CreateSafeFileHandle(Windows.Storage.IStorageFolder,System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateSafeFileHandle (rootDirectory As IStorageFolder, relativePath As String, mode As FileMode) As SafeFileHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Win32::SafeHandles::SafeFileHandle ^ CreateSafeFileHandle(Windows::Storage::IStorageFolder ^ rootDirectory, System::String ^ relativePath, System::IO::FileMode mode);" />
      <MemberSignature Language="F#" Value="static member CreateSafeFileHandle : Windows.Storage.IStorageFolder * string * System.IO.FileMode -&gt; Microsoft.Win32.SafeHandles.SafeFileHandle" Usage="System.IO.WindowsRuntimeStorageExtensions.CreateSafeFileHandle (rootDirectory, relativePath, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootDirectory" Type="Windows.Storage.IStorageFolder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="relativePath" Type="System.String" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="mode" Type="System.IO.FileMode" Index="2" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
      </Parameters>
      <Docs>
        <param name="rootDirectory">Die aktuelle Speicherordnerinstanz</param>
        <param name="relativePath">Der Name der Datei, die einen Ziehpunkt enthalten soll</param>
        <param name="mode">Der Modus, in dem das Betriebssystem die Datei öffnen soll</param>
        <summary>Erstellt einen sicheren Dateihandle für eine Datei, die sich in der aktuellen Speicherordnerinstanz befindet</summary>
        <returns>Eine sichere Dateihandleinstanz, falls der Vorgang erfolgreich ist; <see langword="null" />, falls die Umwandlung von <paramref name="rootDirectory" /> in eine IStorageFolderHandleAccess-Instanz <see langword="null" /> zurückgibt</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Wenn beim Aufrufen dieser Methode der angegebene Modus <xref:System.IO.FileMode.Append?displayProperty=nameWithType>ist, wird die Datei mit <xref:System.IO.FileAccess.Read?displayProperty=nameWithType> Zugriffsberechtigung geöffnet. Für alle anderen Modi wird die Datei mit <xref:System.IO.FileAccess.ReadWrite?displayProperty=nameWithType> Access-Berechtigung geöffnet.

Darüber hinaus öffnet diese Methode die Datei mit <xref:System.IO.FileShare.Read?displayProperty=nameWithType> Stream-Freigabe Zugriff und mit <xref:System.IO.FileOptions.None?displayProperty=nameWithType> erweiterten Datei Erstellungs Optionen.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rootDirectory" /> ist <see langword="null" />

Oder

<paramref name="relativePath" /> ist <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateSafeFileHandle">
      <MemberSignature Language="C#" Value="public static Microsoft.Win32.SafeHandles.SafeFileHandle CreateSafeFileHandle (this Windows.Storage.IStorageFile windowsRuntimeFile, System.IO.FileAccess access = System.IO.FileAccess.ReadWrite, System.IO.FileShare share = System.IO.FileShare.Read, System.IO.FileOptions options = System.IO.FileOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Win32.SafeHandles.SafeFileHandle CreateSafeFileHandle(class Windows.Storage.IStorageFile windowsRuntimeFile, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, valuetype System.IO.FileOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStorageExtensions.CreateSafeFileHandle(Windows.Storage.IStorageFile,System.IO.FileAccess,System.IO.FileShare,System.IO.FileOptions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateSafeFileHandle (windowsRuntimeFile As IStorageFile, Optional access As FileAccess = System.IO.FileAccess.ReadWrite, Optional share As FileShare = System.IO.FileShare.Read, Optional options As FileOptions = System.IO.FileOptions.None) As SafeFileHandle" />
      <MemberSignature Language="F#" Value="static member CreateSafeFileHandle : Windows.Storage.IStorageFile * System.IO.FileAccess * System.IO.FileShare * System.IO.FileOptions -&gt; Microsoft.Win32.SafeHandles.SafeFileHandle" Usage="System.IO.WindowsRuntimeStorageExtensions.CreateSafeFileHandle (windowsRuntimeFile, access, share, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeFile" Type="Windows.Storage.IStorageFile" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="access" Type="System.IO.FileAccess" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="share" Type="System.IO.FileShare" Index="2" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="options" Type="System.IO.FileOptions" Index="3" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeFile">Die Instanz einer Speicherdatei</param>
        <param name="access">Die Zugriffsart, die beim Öffnen einer Datei verwendet werden soll Standardwert: <see cref="F:System.IO.FileAccess.ReadWrite" />.</param>
        <param name="share">Die Art des Zugriffs auf die Streamfreigabe, die andere <see cref="T:System.IO.FileStream" />-Objekte für dieselbe Datei haben können. Standardwert: <see cref="F:System.IO.FileShare.Read" />.</param>
        <param name="options">Erweiterte Optionen für das Erstellen des <see cref="T:System.IO.FileStream" />-Objekts Standardwert: <see cref="F:System.IO.FileOptions.None" />.</param>
        <summary>Erstellt einen sicheren Dateihandle für die aktuelle Instanz der Speicherdatei</summary>
        <returns>Eine sichere Dateihandleinstanz, falls der Vorgang erfolgreich ist; <see langword="null" />, falls die Umwandlung von <paramref name="windowsRuntimeFile" /> in eine IStorageItemHandleAccess-Instanz <see langword="null" /> zurückgibt</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeFile" /> ist <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateSafeFileHandle">
      <MemberSignature Language="C#" Value="public static Microsoft.Win32.SafeHandles.SafeFileHandle CreateSafeFileHandle (this Windows.Storage.IStorageFolder rootDirectory, string relativePath, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share = System.IO.FileShare.Read, System.IO.FileOptions options = System.IO.FileOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Win32.SafeHandles.SafeFileHandle CreateSafeFileHandle(class Windows.Storage.IStorageFolder rootDirectory, string relativePath, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, valuetype System.IO.FileOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStorageExtensions.CreateSafeFileHandle(Windows.Storage.IStorageFolder,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.FileOptions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateSafeFileHandle (rootDirectory As IStorageFolder, relativePath As String, mode As FileMode, access As FileAccess, Optional share As FileShare = System.IO.FileShare.Read, Optional options As FileOptions = System.IO.FileOptions.None) As SafeFileHandle" />
      <MemberSignature Language="F#" Value="static member CreateSafeFileHandle : Windows.Storage.IStorageFolder * string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare * System.IO.FileOptions -&gt; Microsoft.Win32.SafeHandles.SafeFileHandle" Usage="System.IO.WindowsRuntimeStorageExtensions.CreateSafeFileHandle (rootDirectory, relativePath, mode, access, share, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootDirectory" Type="Windows.Storage.IStorageFolder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="relativePath" Type="System.String" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="mode" Type="System.IO.FileMode" Index="2" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="access" Type="System.IO.FileAccess" Index="3" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="share" Type="System.IO.FileShare" Index="4" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="options" Type="System.IO.FileOptions" Index="5" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
      </Parameters>
      <Docs>
        <param name="rootDirectory">Die aktuelle Speicherordnerinstanz</param>
        <param name="relativePath">Der Name der Datei, die einen Ziehpunkt enthalten soll</param>
        <param name="mode">Der Modus, in dem das Betriebssystem die Datei öffnen soll</param>
        <param name="access">Die Zugriffsart, die beim Öffnen einer Datei verwendet werden soll</param>
        <param name="share">Die Art des Zugriffs auf die Streamfreigabe, die andere <see cref="T:System.IO.FileStream" />-Objekte für dieselbe Datei haben können. Standardwert: <see cref="F:System.IO.FileShare.Read" />.</param>
        <param name="options">Erweiterte Optionen für das Erstellen des <see cref="T:System.IO.FileStream" />-Objekts Standardwert: <see cref="F:System.IO.FileOptions.None" />.</param>
        <summary>Erstellt einen sicheren Dateihandle für eine Datei, die sich in der aktuellen Speicherordnerinstanz befindet</summary>
        <returns>Eine sichere Dateihandleinstanz, falls der Vorgang erfolgreich ist; <see langword="null" />, falls die Umwandlung von <paramref name="rootDirectory" /> in eine IStorageFolderHandleAccess-Instanz <see langword="null" /> zurückgibt</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rootDirectory" /> ist <see langword="null" />

Oder

<paramref name="relativePath" /> ist <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="OpenStreamForReadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenStreamForReadAsync (this Windows.Storage.IStorageFile windowsRuntimeFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenStreamForReadAsync(class Windows.Storage.IStorageFile windowsRuntimeFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFile)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OpenStreamForReadAsync (windowsRuntimeFile As IStorageFile) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenStreamForReadAsync(Windows::Storage::IStorageFile ^ windowsRuntimeFile);" />
      <MemberSignature Language="F#" Value="static member OpenStreamForReadAsync : Windows.Storage.IStorageFile -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync windowsRuntimeFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeFile" Type="Windows.Storage.IStorageFile" RefType="this" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeFile">Das Windows-Runtime-<see cref="T:Windows.Storage.IStorageFile" />-Objekt, aus dem gelesen werden soll.</param>
        <summary>Ruft einen Stream zum Lesen aus einer angegebenen Datei ab.</summary>
        <returns>Eine Aufgabe, die den asynchronen Lesevorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> In Visual Basic und C#können Sie diese Methode als Instanzmethode für ein beliebiges Objekt vom Typ <xref:Windows.Storage.IStorageFile>abrufen. Bei Verwendung der Syntax für Instanzenmethoden lassen Sie den ersten Parameter aus. Weitere Informationen finden Sie unter [Erweiterungs Methoden (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) oder [Erweiterungs Methoden (C# Programmier Handbuch)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

## Examples

Das folgende Beispiel zeigt, wie Sie eine Datei als <xref:System.IO.Stream> in einer Windows Store-APP öffnen und ihren Inhalt mithilfe einer Instanz der <xref:System.IO.StreamReader>-Klasse lesen.

[!code-csharp[windowsruntimestorageextensions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml.cs#2)]
[!code-vb[windowsruntimestorageextensions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/vb/blankpage.xaml.vb#2)]

Im nächsten Beispiel wird der XAML-Code gezeigt, der mit dem vorherigen Beispiel verknüpft ist. 

[!code-xaml[windowsruntimestorageextensions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage.xaml#1)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeFile" /> ist <see langword="null" /></exception>
        <exception cref="T:System.IO.IOException">Die Datei konnte nicht als Stream geöffnet oder abgerufen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenStreamForReadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenStreamForReadAsync (this Windows.Storage.IStorageFolder rootDirectory, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenStreamForReadAsync(class Windows.Storage.IStorageFolder rootDirectory, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFolder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OpenStreamForReadAsync (rootDirectory As IStorageFolder, relativePath As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenStreamForReadAsync(Windows::Storage::IStorageFolder ^ rootDirectory, System::String ^ relativePath);" />
      <MemberSignature Language="F#" Value="static member OpenStreamForReadAsync : Windows.Storage.IStorageFolder * string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync (rootDirectory, relativePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootDirectory" Type="Windows.Storage.IStorageFolder" RefType="this" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rootDirectory">Das Windows-Runtime-<see cref="T:Windows.Storage.IStorageFile" />-Objekt, das die zu lesende Datei enthält.</param>
        <param name="relativePath">Der Pfad, relativ zum Stammordner, zur Datei, aus der gelesen werden soll.</param>
        <summary>Ruft einen Stream zum Lesen aus einer Datei im angegebenen übergeordneten Ordner ab.</summary>
        <returns>Eine Aufgabe, die den asynchronen Lesevorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> In Visual Basic und C#können Sie diese Methode als Instanzmethode für ein beliebiges Objekt vom Typ istoragefolder abrufen. Bei Verwendung der Syntax für Instanzenmethoden lassen Sie den ersten Parameter aus. Weitere Informationen finden Sie unter [Erweiterungs Methoden (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) oder [Erweiterungs Methoden (C# Programmier Handbuch)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

## Examples

Das folgende Beispiel zeigt, wie Sie eine Datei als <xref:System.IO.Stream> in einer Windows Store-APP öffnen und ihren Inhalt mithilfe einer Instanz der <xref:System.IO.StreamReader>-Klasse lesen.

[!code-csharp[windowsruntimestorageextensions#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage2.xaml.cs#4)]
[!code-vb[windowsruntimestorageextensions#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/vb/blankpage2.xaml.vb#4)]

Im nächsten Beispiel wird der XAML-Code gezeigt, der mit dem vorherigen Beispiel verknüpft ist. 

[!code-xaml[windowsruntimestorageextensions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage2.xaml#3)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rootDirectory" /> oder <paramref name="relativePath" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="relativePath" /> ist leer oder enthält nur Leerzeichen.</exception>
        <exception cref="T:System.IO.IOException">Die Datei konnte nicht als Stream geöffnet oder abgerufen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenStreamForWriteAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenStreamForWriteAsync (this Windows.Storage.IStorageFile windowsRuntimeFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenStreamForWriteAsync(class Windows.Storage.IStorageFile windowsRuntimeFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFile)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OpenStreamForWriteAsync (windowsRuntimeFile As IStorageFile) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenStreamForWriteAsync(Windows::Storage::IStorageFile ^ windowsRuntimeFile);" />
      <MemberSignature Language="F#" Value="static member OpenStreamForWriteAsync : Windows.Storage.IStorageFile -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync windowsRuntimeFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeFile" Type="Windows.Storage.IStorageFile" RefType="this" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeFile">Das Windows-Runtime-<see cref="T:Windows.Storage.IStorageFile" />-Objekt, in das geschrieben werden soll.</param>
        <summary>Ruft einen Stream zum Schreiben in eine angegebene Datei ab.</summary>
        <returns>Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> In Visual Basic und C#können Sie diese Methode als Instanzmethode für ein beliebiges Objekt vom Typ <xref:Windows.Storage.IStorageFile>abrufen. Bei Verwendung der Syntax für Instanzenmethoden lassen Sie den ersten Parameter aus. Weitere Informationen finden Sie unter [Erweiterungs Methoden (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) oder [Erweiterungs Methoden (C# Programmier Handbuch)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

## Examples

Im folgenden Beispiel wird gezeigt, wie Sie eine Datei als <xref:System.IO.Stream> in einer Windows Store-APP öffnen und mithilfe einer Instanz der <xref:System.IO.StreamReader>-Klasse in diese schreiben.

[!code-csharp[windowsruntimestorageextensions#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage3.xaml.cs#6)]
[!code-vb[windowsruntimestorageextensions#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/vb/blankpage3.xaml.vb#6)]

Im nächsten Beispiel wird der XAML-Code gezeigt, der mit dem vorherigen Beispiel verknüpft ist. 

[!code-xaml[windowsruntimestorageextensions#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage3.xaml#5)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeFile" /> ist <see langword="null" /></exception>
        <exception cref="T:System.IO.IOException">Die Datei konnte nicht als Stream geöffnet oder abgerufen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenStreamForWriteAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenStreamForWriteAsync (this Windows.Storage.IStorageFolder rootDirectory, string relativePath, Windows.Storage.CreationCollisionOption creationCollisionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenStreamForWriteAsync(class Windows.Storage.IStorageFolder rootDirectory, string relativePath, valuetype Windows.Storage.CreationCollisionOption creationCollisionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFolder,System.String,Windows.Storage.CreationCollisionOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OpenStreamForWriteAsync (rootDirectory As IStorageFolder, relativePath As String, creationCollisionOption As CreationCollisionOption) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenStreamForWriteAsync(Windows::Storage::IStorageFolder ^ rootDirectory, System::String ^ relativePath, Windows::Storage::CreationCollisionOption creationCollisionOption);" />
      <MemberSignature Language="F#" Value="static member OpenStreamForWriteAsync : Windows.Storage.IStorageFolder * string * Windows.Storage.CreationCollisionOption -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync (rootDirectory, relativePath, creationCollisionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootDirectory" Type="Windows.Storage.IStorageFolder" RefType="this" />
        <Parameter Name="relativePath" Type="System.String" />
        <Parameter Name="creationCollisionOption" Type="Windows.Storage.CreationCollisionOption" />
      </Parameters>
      <Docs>
        <param name="rootDirectory">Das Windows-Runtime-<see cref="T:Windows.Storage.IStorageFile" />-Objekt, das die Datei enthält, in die geschrieben werden soll.</param>
        <param name="relativePath">Der Pfad, relativ zum Stammordner, zur Datei, in die geschrieben werden soll.</param>
        <param name="creationCollisionOption">Der Windows-Runtime-<see cref="T:Windows.Storage.CreationCollisionOption" />-Enumerationswert, der das Verhalten angibt, das verwendet werden soll, wenn der Name der zu erstellenden Datei mit dem einer vorhandenen Datei übereinstimmt.</param>
        <summary>Ruft einen Stream zum Schreiben in eine Datei im angegebenen übergeordneten Ordner ab.</summary>
        <returns>Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> In Visual Basic und C#können Sie diese Methode als Instanzmethode für ein beliebiges Objekt vom Typ <xref:Windows.Storage.IStorageFolder>abrufen. Bei Verwendung der Syntax für Instanzenmethoden lassen Sie den ersten Parameter aus. Weitere Informationen finden Sie unter [Erweiterungs Methoden (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) oder [Erweiterungs Methoden (C# Programmier Handbuch)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

## Examples

Im folgenden Beispiel wird gezeigt, wie Sie eine Datei als <xref:System.IO.Stream> in einer Windows Store-APP öffnen und mithilfe einer Instanz der <xref:System.IO.StreamReader>-Klasse in diese schreiben.

[!code-csharp[windowsruntimestorageextensions#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage4.xaml.cs#8)]
[!code-vb[windowsruntimestorageextensions#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/vb/blankpage4.xaml.vb#8)]

Im nächsten Beispiel wird der XAML-Code gezeigt, der mit dem vorherigen Beispiel verknüpft ist. 

[!code-xaml[windowsruntimestorageextensions#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestorageextensions/cs/blankpage4.xaml#7)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rootDirectory" /> oder <paramref name="relativePath" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="relativePath" /> ist leer oder enthält nur Leerzeichen.</exception>
        <exception cref="T:System.IO.IOException">Die Datei konnte nicht als Stream geöffnet oder abgerufen werden.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

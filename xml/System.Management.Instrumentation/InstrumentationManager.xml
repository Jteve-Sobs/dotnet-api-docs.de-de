<Type Name="InstrumentationManager" FullName="System.Management.Instrumentation.InstrumentationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="57c8f02f177566e76601df0b5d3378d1209f62ea" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30425904" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class InstrumentationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed InstrumentationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.InstrumentationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstrumentationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="2bfd1-101">Stellt Methoden bereit, die die Lebensdauer und das Modell für entkoppelte Anbieter verwalten.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2bfd1-101">Provides methods that manage the lifetime and the model used for decoupled providers.</span>
      </span>
      <span data-ttu-id="2bfd1-102">Hinweis: Die WMI .NET-Bibliotheken werden jetzt als abgeschlossen betrachtet, und keine weiteren Entwicklungen, Verbesserungen oder Updates werden für nicht sicherheitsrelevante Aspekte verfügbar sein, die diese Bibliotheken betreffen.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2bfd1-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span>
      </span>
      <span data-ttu-id="2bfd1-103">Die [MI-APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) sollten für alle Neuentwicklungen verwendet werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2bfd1-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bfd1-104">Entkoppelte Anbieter werden von einer Anwendung gehostet.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-104">Decoupled providers are hosted by an application.</span></span> <span data-ttu-id="2bfd1-105">Zwei Methoden können von der Anwendung verwendet werden, um Instanzen von WMI-Klassen verfügbar zu machen: Veröffentlichen/Revoke oder die Rückrufmethode.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-105">Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</span></span> <span data-ttu-id="2bfd1-106">Die Rückrufmethode verwendet die <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> und <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-106">The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.</span></span>  
  
 <span data-ttu-id="2bfd1-107">Im Modell veröffentlichen/Revoke bietet die WMI-Infrastruktur Standardverhalten für viele der Methoden, die Sie selbst der Rückrufmethode schreiben müssen.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-107">In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</span></span> <span data-ttu-id="2bfd1-108">Diese umfassen die Enumeration und Methoden zu binden.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-108">These include the enumeration and bind methods.</span></span> <span data-ttu-id="2bfd1-109">In diesem Modell die Anwendung Instanzen erstellt und veröffentlicht.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-109">In this model, the application creates instances and publishes them.</span></span> <span data-ttu-id="2bfd1-110">Die Anwendung ist dafür verantwortlich, dass die wichtigsten Eigenschaften der Klassen eingehalten werden.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-110">The application is responsible for ensuring that the key properties of the classes are respected.</span></span> <span data-ttu-id="2bfd1-111">Die Anwendung ist auch für das Löschen von Instanzen zuständig.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-111">The application is also responsible for deleting instances.</span></span>  
  
 <span data-ttu-id="2bfd1-112">Die WMI-Infrastruktur erwartet in das Modell Rückruf die Anwendung von Methoden, die Enumeration, Bindung und alle anderen Methoden zum Implementieren der Funktionalität des Anbieters erforderlich behandeln.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-112">In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</span></span> <span data-ttu-id="2bfd1-113">In der Anwendung für diese Funktion aufruft, und schlägt fehl, wenn er nicht vorhanden oder wurde nicht ordnungsgemäß implementiert.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-113">It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</span></span> <span data-ttu-id="2bfd1-114">Die Anwendung registriert den Typ der WMI-Klassen mit der Infrastruktur, durch den Aufruf <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> und gibt an, dass es nicht mehr die WMI-Klassen, die verfügbar gemacht werden, durch Aufrufen möchte <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-114">The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bfd1-115">Im folgenden Beispiel wird veranschaulicht, wie das Veröffentlichen/Revoke-Modell zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-115">The following example demonstrates how to use the publish/revoke model.</span></span> <span data-ttu-id="2bfd1-116">Zwei Instanzen der Routerklasse werden erstellt und veröffentlicht.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-116">Two instances of the router class are created and published.</span></span> <span data-ttu-id="2bfd1-117">Sie werden später widerrufen.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-117">They are later revoked.</span></span>  
  
```  
public class Sample_InstanceProvider  
{  
public int Main (string[] args)   
{  
Router r_one = new Router ();  
r_one.Name = "one";  
InstrumentationManager.Publish(r_one);  
Router r_two = new Router ();  
r_two.Name = "two";  
InstrumentationManager.Publish(r_two);  
// ....  
InstrumentationManager.Revoke(r_one);  
InstrumentationManager.Revoke(r_two);  
return 0;  
}  
}  
```  
  
 <span data-ttu-id="2bfd1-118">Im nächsten Beispiel wird die Rückrufmethode der Registrierung verwendet, die RouterNew-Klasse verfügbar gemacht.</span><span class="sxs-lookup"><span data-stu-id="2bfd1-118">In the next example, the callback method of registration is used to expose the RouterNew class.</span></span>  
  
```  
public int MainNew(string[] args)   
{  
    InstrumentationManager.RegisterType(typeof(RouterNew));  
    // ....  
    InstrumentationManager.UnRegisterType(typeof(RouterNew));  
    return 0;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public static void Publish (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="2bfd1-119">Eine Instanz der Klasse, die den zu veröffentlichenden Anbieter implementiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-119">An instance of the class that implements the provider to publish.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bfd1-120">Macht eine Instanz eines Anbieters innerhalb der WMI-Infrastruktur verfügbar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-120">Makes an instance of a provider available within the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">
          <span data-ttu-id="2bfd1-121">Die zu registrierende Assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-121">The assembly to register.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bfd1-122">Registriert eine Assembly bei der WMI-Infrastruktur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-122">Registers an assembly with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterType">
      <MemberSignature Language="C#" Value="public static void RegisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">
          <span data-ttu-id="2bfd1-123">Der Typ der Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-123">The type of the class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bfd1-124">Registriert eine Klasse bei der WMI-Infrastruktur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-124">Registers a class with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```  
static int Main(string[] args)  
{  
   InstrumentationManager.RegisterType(typeof(MySampleProvider));  
   return 0;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public static void Revoke (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="2bfd1-125">Eine Instanz der Klasse, die den zurückzurufenden Anbieter implementiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-125">An instance of the class that implements the provider to revoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bfd1-126">Akzeptiert eine Instanz eines aktuell verfügbaren Anbieters und markiert diese in der WMI-Infrastruktur als nicht verfügbar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-126">Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">
          <span data-ttu-id="2bfd1-127">Die registrierte Assembly, deren Registrierung aufgehoben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-127">The registered assembly to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bfd1-128">Hebt die Registrierung einer derzeit bei der WMI-Infrastruktur registrierten Assembly auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-128">Unregisters an assembly currently registered with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterType">
      <MemberSignature Language="C#" Value="public static void UnregisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">
          <span data-ttu-id="2bfd1-129">Der registrierte Typ, dessen Registrierung aufgehoben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-129">The registered type to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2bfd1-130">Hebt die Registrierung einer bei der WMI-Infrastruktur registrierten Klasse auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2bfd1-130">Unregisters a class registered with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
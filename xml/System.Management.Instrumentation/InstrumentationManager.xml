<Type Name="InstrumentationManager" FullName="System.Management.Instrumentation.InstrumentationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a1a58226001ede68007f08c403346b9d7ffe8f66" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48727699" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class InstrumentationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed InstrumentationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.InstrumentationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstrumentationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type InstrumentationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Methoden bereit, die die Lebensdauer und das Modell für entkoppelte Anbieter verwalten.  
  
Hinweis: Die WMI .NET-Bibliotheken werden jetzt als abgeschlossen betrachtet, und keine weiteren Entwicklungen, Verbesserungen oder Updates werden für nicht sicherheitsrelevante Aspekte verfügbar sein, die diese Bibliotheken betreffen. Die [MI-APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) sollten für alle Neuentwicklungen verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entkoppelte Anbieter werden von einer Anwendung gehostet. Zwei Methoden können von der Anwendung verwendet werden, um Instanzen der WMI-Klassen verfügbar zu machen: Veröffentlichen/widerrufen oder die Callback-Methode. Die Callback-Methode verwendet die <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> und <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> Methoden.  
  
 Im Veröffentlichen/Revoke-Modell bietet die WMI-Infrastruktur Standardverhalten für viele der Methoden Sie sich in der Rückrufmethode zu schreiben müssen. Diese umfassen die Enumeration und Methoden zu binden. In diesem Modell wird die Anwendung Instanzen erstellt und veröffentlicht werden. Die Anwendung ist dafür verantwortlich, sicherzustellen, dass die wichtigsten Eigenschaften der Klassen berücksichtigt werden. Die Anwendung ist auch verantwortlich für das Löschen von Instanzen.  
  
 Die WMI-Infrastruktur erwartet die Anwendung Methoden verfügen über die Behandlung von Enumeration, die Bindung und alle anderen Methoden erforderlich, um die Funktionalität des Anbieters zu implementieren, in dem rückrufmodell. Bei der Anwendung für diese Funktionalität wird, und schlägt fehl, wenn er nicht vorhanden oder wurde nicht richtig implementiert. Die Anwendung registriert den Typ der WMI-Klassen mit der Infrastruktur, durch den Aufruf <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> und gibt an, dass er nicht mehr über die WMI-Klassen, die verfügbar gemacht werden, durch den Aufruf will <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie das Veröffentlichen/Revoke-Modell verwendet wird. Zwei Instanzen der Routerklasse erstellt und veröffentlicht. Sie werden später widerrufen.  
  
```  
public class Sample_InstanceProvider  
{  
public int Main (string[] args)   
{  
Router r_one = new Router ();  
r_one.Name = "one";  
InstrumentationManager.Publish(r_one);  
Router r_two = new Router ();  
r_two.Name = "two";  
InstrumentationManager.Publish(r_two);  
// ....  
InstrumentationManager.Revoke(r_one);  
InstrumentationManager.Revoke(r_two);  
return 0;  
}  
}  
```  
  
 Im nächsten Beispiel wird die Callback-Methode der Registrierung verwendet, um die RouterNew-Klasse verfügbar zu machen.  
  
```  
public int MainNew(string[] args)   
{  
    InstrumentationManager.RegisterType(typeof(RouterNew));  
    // ....  
    InstrumentationManager.UnRegisterType(typeof(RouterNew));  
    return 0;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public static void Publish (object obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object obj) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (obj As Object)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="static member Publish : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Publish obj" FrameworkAlternate="netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static void Publish (object value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object value) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (value As Object)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Publish : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Publish value" FrameworkAlternate="netframework-4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Eine Instanz der Klasse, die den zu veröffentlichenden Anbieter implementiert.</param>
        <param name="obj">To be added.</param>
        <summary>Macht eine Instanz eines Anbieters innerhalb der WMI-Infrastruktur verfügbar.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberSignature Language="F#" Value="static member RegisterAssembly : System.Reflection.Assembly -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.RegisterAssembly managementAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">Die zu registrierende Assembly.</param>
        <summary>Registriert eine Assembly bei der WMI-Infrastruktur.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterType">
      <MemberSignature Language="C#" Value="public static void RegisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterType(Type ^ managementType);" />
      <MemberSignature Language="F#" Value="static member RegisterType : Type -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.RegisterType managementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">Der Typ der Klasse.</param>
        <summary>Registriert eine Klasse bei der WMI-Infrastruktur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```  
static int Main(string[] args)  
{  
   InstrumentationManager.RegisterType(typeof(MySampleProvider));  
   return 0;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public static void Revoke (object obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object obj) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (obj As Object)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="static member Revoke : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Revoke obj" FrameworkAlternate="netframework-3.5;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static void Revoke (object value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object value) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (value As Object)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Revoke : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Revoke value" FrameworkAlternate="netframework-4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Eine Instanz der Klasse, die den zurückzurufenden Anbieter implementiert.</param>
        <param name="obj">To be added.</param>
        <summary>Akzeptiert eine Instanz eines aktuell verfügbaren Anbieters und markiert diese in der WMI-Infrastruktur als nicht verfügbar.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberSignature Language="F#" Value="static member UnregisterAssembly : System.Reflection.Assembly -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly managementAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">Die registrierte Assembly, deren Registrierung aufgehoben werden soll.</param>
        <summary>Hebt die Registrierung einer derzeit bei der WMI-Infrastruktur registrierten Assembly auf.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterType">
      <MemberSignature Language="C#" Value="public static void UnregisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterType(Type ^ managementType);" />
      <MemberSignature Language="F#" Value="static member UnregisterType : Type -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.UnregisterType managementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">Der registrierte Typ, dessen Registrierung aufgehoben werden soll.</param>
        <summary>Hebt die Registrierung einer bei der WMI-Infrastruktur registrierten Klasse auf.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="InstrumentationManager" FullName="System.Management.Instrumentation.InstrumentationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="14889782c165d6782702104cde4ab07934bc08ea" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="82292205" /></Metadata><TypeSignature Language="C#" Value="public static class InstrumentationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed InstrumentationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.InstrumentationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstrumentationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type InstrumentationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1783d-101">Stellt Methoden bereit, die die Lebensdauer und das Modell für entkoppelte Anbieter verwalten.</span><span class="sxs-lookup"><span data-stu-id="1783d-101">Provides methods that manage the lifetime and the model used for decoupled providers.</span></span>  
  
<span data-ttu-id="1783d-102">Hinweis: Die WMI .NET-Bibliotheken werden jetzt als abgeschlossen betrachtet, und keine weiteren Entwicklungen, Verbesserungen oder Updates werden für nicht sicherheitsrelevante Aspekte verfügbar sein, die diese Bibliotheken betreffen.</span><span class="sxs-lookup"><span data-stu-id="1783d-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span></span> <span data-ttu-id="1783d-103">Die [MI-APIs](https://docs.microsoft.com/previous-versions/windows/desktop/wmi_v2/windows-management-infrastructure) sollten für alle Neuentwicklungen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="1783d-103">The [MI APIs](https://docs.microsoft.com/previous-versions/windows/desktop/wmi_v2/windows-management-infrastructure) should be used for all new development.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1783d-104">Entkoppelte Anbieter werden von einer Anwendung gehostet.</span><span class="sxs-lookup"><span data-stu-id="1783d-104">Decoupled providers are hosted by an application.</span></span> <span data-ttu-id="1783d-105">Zwei Methoden können von der Anwendung verwendet werden, um Instanzen von WMI-Klassen verfügbar zu machen: veröffentlichen/widerrufen oder Rückruf Methode.</span><span class="sxs-lookup"><span data-stu-id="1783d-105">Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</span></span> <span data-ttu-id="1783d-106">Die Rückruf Methode verwendet die <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> -Methode und die-Methode <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> .</span><span class="sxs-lookup"><span data-stu-id="1783d-106">The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.</span></span>  
  
 <span data-ttu-id="1783d-107">Im Veröffentlichungs-/widerrufungsmodell stellt die WMI-Infrastruktur Standardverhalten für viele der Methoden bereit, die Sie selbst in der Rückruf Methode schreiben müssen.</span><span class="sxs-lookup"><span data-stu-id="1783d-107">In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</span></span> <span data-ttu-id="1783d-108">Hierzu gehören die Enumerationsmethoden und die Bind-Methode.</span><span class="sxs-lookup"><span data-stu-id="1783d-108">These include the enumeration and bind methods.</span></span> <span data-ttu-id="1783d-109">In diesem Modell werden von der Anwendung Instanzen erstellt und veröffentlicht.</span><span class="sxs-lookup"><span data-stu-id="1783d-109">In this model, the application creates instances and publishes them.</span></span> <span data-ttu-id="1783d-110">Die Anwendung ist dafür verantwortlich, sicherzustellen, dass die Schlüsseleigenschaften der Klassen beachtet werden.</span><span class="sxs-lookup"><span data-stu-id="1783d-110">The application is responsible for ensuring that the key properties of the classes are respected.</span></span> <span data-ttu-id="1783d-111">Die Anwendung ist auch für das Löschen von-Instanzen verantwortlich.</span><span class="sxs-lookup"><span data-stu-id="1783d-111">The application is also responsible for deleting instances.</span></span>  
  
 <span data-ttu-id="1783d-112">Im Rückruf Modell erwartet die WMI-Infrastruktur Methoden, die die Enumeration, die Bindung und alle anderen Methoden, die zum Implementieren der Funktionalität des Anbieters erforderlich sind, verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="1783d-112">In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</span></span> <span data-ttu-id="1783d-113">Sie ruft die Anwendung für diese Funktionalität auf und schlägt fehl, wenn Sie nicht vorhanden oder nicht ordnungsgemäß implementiert ist.</span><span class="sxs-lookup"><span data-stu-id="1783d-113">It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</span></span> <span data-ttu-id="1783d-114">Die Anwendung registriert den Typ der WMI-Klassen bei der-Infrastruktur, indem aufgerufen wird <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> , und gibt an, dass die WMI-Klassen nicht mehr durch Aufrufen von verfügbar gemacht werden sollen <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> .</span><span class="sxs-lookup"><span data-stu-id="1783d-114">The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1783d-115">Im folgenden Beispiel wird veranschaulicht, wie das Veröffentlichungs-/widerrufenmodell verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="1783d-115">The following example demonstrates how to use the publish/revoke model.</span></span> <span data-ttu-id="1783d-116">Es werden zwei Instanzen der Routerklasse erstellt und veröffentlicht.</span><span class="sxs-lookup"><span data-stu-id="1783d-116">Two instances of the router class are created and published.</span></span> <span data-ttu-id="1783d-117">Sie werden später widerrufen.</span><span class="sxs-lookup"><span data-stu-id="1783d-117">They are later revoked.</span></span>  
  
```csharp
public class Sample_InstanceProvider  
{  
    public int Main (string[] args)   
    {  
        var r_one = new Router();
        r_one.Name = "one";  
        InstrumentationManager.Publish(r_one);  
        var r_two = new Router ();  
        r_two.Name = "two";  
        InstrumentationManager.Publish(r_two);  
        // ....  
        InstrumentationManager.Revoke(r_one);  
        InstrumentationManager.Revoke(r_two);  
        return 0;  
    }  
}  
```  
  
 <span data-ttu-id="1783d-118">Im nächsten Beispiel wird die Rückruf Methode der Registrierung verwendet, um die routernew-Klasse verfügbar zu machen.</span><span class="sxs-lookup"><span data-stu-id="1783d-118">In the next example, the callback method of registration is used to expose the RouterNew class.</span></span>  
  
```csharp
public int MainNew(string[] args)   
{  
    InstrumentationManager.RegisterType(typeof(RouterNew));  
    // ....  
    InstrumentationManager.UnRegisterType(typeof(RouterNew));  
    return 0;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public static void Publish (object obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object obj) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (obj As Object)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="static member Publish : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Publish obj" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C#" Value="public static void Publish (object value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object value) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (value As Object)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Publish : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Publish value" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1783d-119">Eine Instanz der Klasse, die den zu veröffentlichenden Anbieter implementiert.</span><span class="sxs-lookup"><span data-stu-id="1783d-119">An instance of the class that implements the provider to publish.</span></span></param>
        <param name="value"><span data-ttu-id="1783d-120">Eine Instanz der Klasse, die den zu veröffentlichenden Anbieter implementiert.</span><span class="sxs-lookup"><span data-stu-id="1783d-120">An instance of the class that implements the provider to publish.</span></span></param>
        <summary><span data-ttu-id="1783d-121">Macht eine Instanz eines Anbieters innerhalb der WMI-Infrastruktur verfügbar.</span><span class="sxs-lookup"><span data-stu-id="1783d-121">Makes an instance of a provider available within the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberSignature Language="F#" Value="static member RegisterAssembly : System.Reflection.Assembly -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.RegisterAssembly managementAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly"><span data-ttu-id="1783d-122">Die zu registrierende Assembly.</span><span class="sxs-lookup"><span data-stu-id="1783d-122">The assembly to register.</span></span></param>
        <summary><span data-ttu-id="1783d-123">Registriert eine Assembly bei der WMI-Infrastruktur.</span><span class="sxs-lookup"><span data-stu-id="1783d-123">Registers an assembly with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterType">
      <MemberSignature Language="C#" Value="public static void RegisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterType(Type ^ managementType);" />
      <MemberSignature Language="F#" Value="static member RegisterType : Type -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.RegisterType managementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType"><span data-ttu-id="1783d-124">Der Typ der Klasse.</span><span class="sxs-lookup"><span data-stu-id="1783d-124">The type of the class.</span></span></param>
        <summary><span data-ttu-id="1783d-125">Registriert eine Klasse bei der WMI-Infrastruktur.</span><span class="sxs-lookup"><span data-stu-id="1783d-125">Registers a class with the WMI infrastructure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp
static int Main(string[] args)
{
   InstrumentationManager.RegisterType(typeof(MySampleProvider));
   return 0;
}
```
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public static void Revoke (object obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object obj) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (obj As Object)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ obj);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="static member Revoke : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Revoke obj" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C#" Value="public static void Revoke (object value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object value) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (value As Object)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ value);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Revoke : obj -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.Revoke value" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1783d-126">Eine Instanz der Klasse, die den zurückzurufenden Anbieter implementiert.</span><span class="sxs-lookup"><span data-stu-id="1783d-126">An instance of the class that implements the provider to revoke.</span></span></param>
        <param name="value"><span data-ttu-id="1783d-127">Eine Instanz der Klasse, die den zurückzurufenden Anbieter implementiert.</span><span class="sxs-lookup"><span data-stu-id="1783d-127">An instance of the class that implements the provider to revoke.</span></span></param>
        <summary><span data-ttu-id="1783d-128">Akzeptiert eine Instanz eines aktuell verfügbaren Anbieters und markiert diese in der WMI-Infrastruktur als nicht verfügbar.</span><span class="sxs-lookup"><span data-stu-id="1783d-128">Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberSignature Language="F#" Value="static member UnregisterAssembly : System.Reflection.Assembly -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly managementAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly"><span data-ttu-id="1783d-129">Die registrierte Assembly, deren Registrierung aufgehoben werden soll.</span><span class="sxs-lookup"><span data-stu-id="1783d-129">The registered assembly to unregister.</span></span></param>
        <summary><span data-ttu-id="1783d-130">Hebt die Registrierung einer derzeit bei der WMI-Infrastruktur registrierten Assembly auf.</span><span class="sxs-lookup"><span data-stu-id="1783d-130">Unregisters an assembly currently registered with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterType">
      <MemberSignature Language="C#" Value="public static void UnregisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterType(Type ^ managementType);" />
      <MemberSignature Language="F#" Value="static member UnregisterType : Type -&gt; unit" Usage="System.Management.Instrumentation.InstrumentationManager.UnregisterType managementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType"><span data-ttu-id="1783d-131">Der registrierte Typ, dessen Registrierung aufgehoben werden soll.</span><span class="sxs-lookup"><span data-stu-id="1783d-131">The registered type to unregister.</span></span></param>
        <summary><span data-ttu-id="1783d-132">Hebt die Registrierung einer bei der WMI-Infrastruktur registrierten Klasse auf.</span><span class="sxs-lookup"><span data-stu-id="1783d-132">Unregisters a class registered with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

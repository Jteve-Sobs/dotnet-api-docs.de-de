<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="727f94b84fb3059cd238ddb0db653c4a2697a109" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83894452" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="F#" Value="type MessageQueueTransaction = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="05a1e-101">Stellt eine interne Message Queuing-Transaktion bereit.</span><span class="sxs-lookup"><span data-stu-id="05a1e-101">Provides a Message Queuing internal transaction.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05a1e-102">Um eine Nachricht als Teil einer Transaktion zu senden oder zu empfangen, können Sie die <xref:System.Messaging.MessageQueueTransaction> -Klasse verwenden, um eine Transaktion zu erstellen und an eine Überladung der- <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> Methode oder der-Methode zu übergeben <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> , die einen- `transaction` Parameter annimmt.</span><span class="sxs-lookup"><span data-stu-id="05a1e-102">To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> method that takes a `transaction` parameter.</span></span> <span data-ttu-id="05a1e-103">Nachrichten, die als Teil einer Transaktion gesendet werden, müssen an Transaktions Warteschlangen gesendet werden.</span><span class="sxs-lookup"><span data-stu-id="05a1e-103">Messages sent as part of a transaction must be sent to transactional queues.</span></span> <span data-ttu-id="05a1e-104">Nachrichten, die von Transaktions Warteschlangen empfangen werden, müssen mithilfe einer angegebenen Transaktion empfangen werden.</span><span class="sxs-lookup"><span data-stu-id="05a1e-104">Messages received from transactional queues must be received using a specified transaction.</span></span>  
  
 <span data-ttu-id="05a1e-105">Neben der- <xref:System.Messaging.MessageQueue.Receive%2A> Methode können Sie auch Nachrichten mit einem angegebenen Bezeichner oder einer angegebenen Korrelations-ID empfangen.</span><span class="sxs-lookup"><span data-stu-id="05a1e-105">In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier.</span></span> <span data-ttu-id="05a1e-106"><xref:System.Messaging.MessageQueue.ReceiveById%2A> <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> Weitere Informationen zum selektiven empfangen von Nachrichten aus Transaktions Warteschlangen finden Sie unter den Methoden und.</span><span class="sxs-lookup"><span data-stu-id="05a1e-106">See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.</span></span>  
  
 <span data-ttu-id="05a1e-107">An Transaktions Warteschlangen gesendete Nachrichten werden entfernt, wenn für die Transaktion ein Commit ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="05a1e-107">Messages sent to transactional queues are removed if the transaction is committed.</span></span> <span data-ttu-id="05a1e-108">Ebenso werden von transaktionalen Warteschlangen empfangene Nachrichten an die Warteschlange zurückgegeben, wenn für die Transaktion ein Rollback ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="05a1e-108">Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</span></span>  
  
 <span data-ttu-id="05a1e-109">Wenn Sie einen instanziieren <xref:System.Messaging.MessageQueueTransaction> und ihn an eine anwendbare Überladung der- <xref:System.Messaging.MessageQueue.Send%2A> Methode oder- <xref:System.Messaging.MessageQueue.Receive%2A> Methode übergeben, um eine Nachricht an eine nicht transaktionale Warteschlange zu senden oder eine Nachricht von einer nicht transaktionalen Warteschlange zu empfangen, löst die Methode eine Ausnahme aus, die angibt, dass die Transaktions Verwendung falsch ist.</span><span class="sxs-lookup"><span data-stu-id="05a1e-109">If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</span></span>  
  
 <span data-ttu-id="05a1e-110"><xref:System.Messaging.MessageQueueTransaction>ist Thread-Apartment-fähig, sodass `STA` Sie die Transaktion nicht in mehreren Threads verwenden können, wenn der Apartment Zustand ist.</span><span class="sxs-lookup"><span data-stu-id="05a1e-110"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="05a1e-111">Visual Basic legt den Status des Haupt Threads auf fest `STA` , sodass Sie den <xref:System.MTAThreadAttribute> in der `Main` Unterroutine anwenden müssen.</span><span class="sxs-lookup"><span data-stu-id="05a1e-111">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="05a1e-112">Andernfalls wird durch das Senden einer Transaktionsmeldung mithilfe eines anderen Threads eine <xref:System.Messaging.MessageQueueException>-Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="05a1e-112">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="05a1e-113">Sie wenden das mit <xref:System.MTAThreadAttribute> dem folgenden Fragment an.</span><span class="sxs-lookup"><span data-stu-id="05a1e-113">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="05a1e-114">Dieser Typ ist threadsicher.</span><span class="sxs-lookup"><span data-stu-id="05a1e-114">This type is thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="05a1e-115">Initialisiert eine neue Instanz der <see cref="T:System.Messaging.MessageQueueTransaction" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="05a1e-115">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueTransaction" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05a1e-116">Dieser Konstruktor legt die- <xref:System.Messaging.MessageQueueTransaction.Status%2A> Eigenschaft auf fest `Initialized` .</span><span class="sxs-lookup"><span data-stu-id="05a1e-116">This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="messageQueueTransaction.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="05a1e-117">Führt einen Rollback der anstehenden internen Transaktion aus.</span><span class="sxs-lookup"><span data-stu-id="05a1e-117">Rolls back the pending internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05a1e-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A>markiert den erfolglosen Abschluss eines Prozesses, der bei einem-Rückruf gestartet wurde <xref:System.Messaging.MessageQueueTransaction.Begin%2A> .</span><span class="sxs-lookup"><span data-stu-id="05a1e-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="05a1e-119">In der Regel Ruft ein-Element <xref:System.Messaging.MessageQueueTransaction.Begin%2A> innerhalb eines `Try...Catch` Ausnahme Behandlungs Blocks auf, wobei in der-Klausel ein aufzurufende aufgerufen <xref:System.Messaging.MessageQueueTransaction.Commit%2A> `Try` und <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in der-Klausel aufgerufen wird `Catch` .</span><span class="sxs-lookup"><span data-stu-id="05a1e-119">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 <span data-ttu-id="05a1e-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A>führt ein Rollback für die gesamte Transaktion aus.</span><span class="sxs-lookup"><span data-stu-id="05a1e-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction.</span></span> <span data-ttu-id="05a1e-121">Dies schließt alle nach dem-Aufrufe gesendeten oder empfangenen Nachrichten ein <xref:System.Messaging.MessageQueueTransaction.Begin%2A> .</span><span class="sxs-lookup"><span data-stu-id="05a1e-121">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="05a1e-122">Die interne Transaktion, für die Sie einen Rollback ausführen möchten, wurde nicht gestartet.</span><span class="sxs-lookup"><span data-stu-id="05a1e-122">The internal transaction you are attempting to roll back has not started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="05a1e-123">Ein interner Message Queuing-Fehler tritt auf.</span><span class="sxs-lookup"><span data-stu-id="05a1e-123">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="messageQueueTransaction.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="05a1e-124">Beginnt eine neue interne Message Queuing-Transaktion.</span><span class="sxs-lookup"><span data-stu-id="05a1e-124">Begins a new Message Queuing internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05a1e-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A>markiert den Beginn der Verarbeitung, für den ein Commit oder ein Rollback ausgeführt wird, je nach Erfolg der Transaktion.</span><span class="sxs-lookup"><span data-stu-id="05a1e-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</span></span> <span data-ttu-id="05a1e-126">Wenn während der Verarbeitung eine Ausnahme auftritt, wird für die gesamte Transaktion ein Rollback ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="05a1e-126">If an exception occurs during processing, the entire transaction is rolled back.</span></span> <span data-ttu-id="05a1e-127">Dies schließt alle nach dem-Aufrufe gesendeten oder empfangenen Nachrichten ein <xref:System.Messaging.MessageQueueTransaction.Begin%2A> .</span><span class="sxs-lookup"><span data-stu-id="05a1e-127">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="05a1e-128">In der Regel Ruft ein-Element <xref:System.Messaging.MessageQueueTransaction.Begin%2A> innerhalb eines `Try...Catch` Ausnahme Behandlungs Blocks auf, wobei in der-Klausel ein aufzurufende aufgerufen <xref:System.Messaging.MessageQueueTransaction.Commit%2A> `Try` und <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in der-Klausel aufgerufen wird `Catch` .</span><span class="sxs-lookup"><span data-stu-id="05a1e-128">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="05a1e-129">Die Transaktion wurde bereits gestartet.</span><span class="sxs-lookup"><span data-stu-id="05a1e-129">The transaction has already been started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="05a1e-130">Ein interner Message Queuing-Fehler tritt auf.</span><span class="sxs-lookup"><span data-stu-id="05a1e-130">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="messageQueueTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="05a1e-131">Führt einen Commit für eine anstehende interne Transaktion aus.</span><span class="sxs-lookup"><span data-stu-id="05a1e-131">Commits a pending internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05a1e-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A>markiert den erfolgreichen Abschluss der Verarbeitung, die bei einem-Rückruf gestartet wurde <xref:System.Messaging.MessageQueueTransaction.Begin%2A> .</span><span class="sxs-lookup"><span data-stu-id="05a1e-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span> <span data-ttu-id="05a1e-133">Wenn eine Ausnahme zwischen dem <xref:System.Messaging.MessageQueueTransaction.Begin%2A> -und dem- <xref:System.Messaging.MessageQueueTransaction.Commit%2A> Aufrufvorgang auftritt, wird für die gesamte Transaktion ein Rollback ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="05a1e-133">If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back.</span></span> <span data-ttu-id="05a1e-134">Dies schließt alle nach dem-Aufrufe gesendeten oder empfangenen Nachrichten ein <xref:System.Messaging.MessageQueueTransaction.Begin%2A> .</span><span class="sxs-lookup"><span data-stu-id="05a1e-134">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="05a1e-135">In der Regel Ruft ein-Element <xref:System.Messaging.MessageQueueTransaction.Begin%2A> innerhalb eines `Try...Catch` Ausnahme Behandlungs Blocks auf, wobei in der-Klausel ein aufzurufende aufgerufen <xref:System.Messaging.MessageQueueTransaction.Commit%2A> `Try` und <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in der-Klausel aufgerufen wird `Catch` .</span><span class="sxs-lookup"><span data-stu-id="05a1e-135">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="05a1e-136">Die Transaktion, für die ein Commit ausgeführt werden soll, wurde nicht gestartet.</span><span class="sxs-lookup"><span data-stu-id="05a1e-136">The transaction you are trying to commit has not started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="05a1e-137">Ein interner Message Queuing-Fehler tritt auf.</span><span class="sxs-lookup"><span data-stu-id="05a1e-137">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="05a1e-138">Gibt die von der <see cref="T:System.Messaging.MessageQueueTransaction" /> verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="05a1e-138">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueTransaction.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="05a1e-139">Gibt alle vom <see cref="T:System.Messaging.MessageQueueTransaction" /> verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="05a1e-139">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05a1e-140"><xref:System.Messaging.MessageQueueTransaction.Dispose%2A>Durch Aufrufen von können die Ressourcen, die von verwendet <xref:System.Messaging.MessageQueueTransaction> werden, für andere Zwecke neu zugeordnet werden.</span><span class="sxs-lookup"><span data-stu-id="05a1e-140">Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes.</span></span> <span data-ttu-id="05a1e-141">Weitere Informationen zu `Dispose` finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](/dotnet/standard/garbage-collection/unmanaged).</span><span class="sxs-lookup"><span data-stu-id="05a1e-141">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>  
  
 <span data-ttu-id="05a1e-142">Alle ausstehenden internen Transaktionen werden von zurückgesetzt <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> .</span><span class="sxs-lookup"><span data-stu-id="05a1e-142">Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueTransaction.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="05a1e-143"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="05a1e-143"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="05a1e-144">Gibt die von <see cref="T:System.Messaging.MessageQueueTransaction" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="05a1e-144">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05a1e-145">Diese Methode wird von der öffentlichen <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> -Methode und der- <xref:System.Object.Finalize%2A> Methode aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="05a1e-145">This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="05a1e-146">`Dispose`Ruft die geschützte `Dispose(Boolean)` Methode auf, wobei der- `disposing` Parameter auf festgelegt ist `true` .</span><span class="sxs-lookup"><span data-stu-id="05a1e-146">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="05a1e-147"><xref:System.Object.Finalize%2A>Ruft `Dispose` `disposing` auf, wobei auf gesetzt ist `false` .</span><span class="sxs-lookup"><span data-stu-id="05a1e-147"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="05a1e-148">Wenn der `disposing`-Parameter `true` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:System.Messaging.MessageQueueTransaction> verweist.</span><span class="sxs-lookup"><span data-stu-id="05a1e-148">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references.</span></span> <span data-ttu-id="05a1e-149">Diese Methode ruft die `Dispose`-Methode aller Objekte auf, auf die verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="05a1e-149">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="05a1e-150">
            <see langword="Dispose" /> kann von anderen Objekten mehrmals aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="05a1e-150">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="05a1e-151">Beim Überschreiben von <see langword="Dispose(Boolean)" /> müssen Sie darauf achten, nicht auf Objekte zu verweisen, die durch einen früheren Aufruf von <see langword="Dispose" /> freigegeben wurden.</span><span class="sxs-lookup"><span data-stu-id="05a1e-151">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="05a1e-152">Weitere Informationen zum Implementieren von finden Sie <see langword="Dispose" /> unter [Implementieren einer](/dotnet/standard/garbage-collection/implementing-dispose)verwerfen-Methode.</span><span class="sxs-lookup"><span data-stu-id="05a1e-152">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
<span data-ttu-id="05a1e-153">Weitere Informationen zu <see langword="Dispose" /> und <see langword="Finalize" /> finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](/dotnet/standard/garbage-collection/unmanaged) und überschreiben [der Finalize-Methode](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span><span class="sxs-lookup"><span data-stu-id="05a1e-153">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueTransaction.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="05a1e-154">Gibt die von der aktuellen Instanz reservierten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="05a1e-154">Releases the resources held by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05a1e-155">Diese Methode überschreibt <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="05a1e-155">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="05a1e-156">Der Anwendungscode sollte diese Methode nicht aufzurufen. die-Methode eines Objekts <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> wird automatisch während Garbage Collection aufgerufen, es sei denn, die Garbage Collector wurde durch einen Aufruf der- <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> Methode deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="05a1e-156">Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="05a1e-157">Weitere Informationen finden Sie unter [Finalize-Methoden und debugtoren](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [Bereinigen von nicht verwalteten Ressourcen](/dotnet/standard/garbage-collection/unmanaged)und überschreiben [der Finalize-Methode](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span><span class="sxs-lookup"><span data-stu-id="05a1e-157">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Messaging.MessageQueueTransactionStatus" Usage="System.Messaging.MessageQueueTransaction.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="05a1e-158">Ruft den Status der Transaktion ab.</span><span class="sxs-lookup"><span data-stu-id="05a1e-158">Gets the status of the transaction.</span></span></summary>
        <value><span data-ttu-id="05a1e-159">Einer der <see cref="T:System.Messaging.MessageQueueTransactionStatus" />-Werte, der angibt, ob ein Commit für die Transaktion ausgeführt wurde, ob diese abgebrochen oder initialisiert wurde oder ob sie anstehend ist.</span><span class="sxs-lookup"><span data-stu-id="05a1e-159">One of the <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05a1e-160">Wenn eine Instanz der- <xref:System.Messaging.MessageQueueTransaction> Klasse erstellt wurde, wird der <xref:System.Messaging.MessageQueueTransaction.Status%2A> vom-Konstruktor auf festgelegt `Initialized` .</span><span class="sxs-lookup"><span data-stu-id="05a1e-160">When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`.</span></span> <span data-ttu-id="05a1e-161">Nach einem-Rückruf, <xref:System.Messaging.MessageQueueTransaction.Begin%2A> aber vor einem- <xref:System.Messaging.MessageQueueTransaction.Commit%2A> oder-Rückruf <xref:System.Messaging.MessageQueueTransaction.Abort%2A> , ist der gleich <xref:System.Messaging.MessageQueueTransaction.Status%2A> `Pending` .</span><span class="sxs-lookup"><span data-stu-id="05a1e-161">After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>

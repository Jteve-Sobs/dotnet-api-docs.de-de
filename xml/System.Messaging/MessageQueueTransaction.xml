<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2437017ed9b6b1b0bf366b5d4b834fcb0bdf84bd" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69115822" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="F#" Value="type MessageQueueTransaction = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt eine interne Message Queuing-Transaktion bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um eine Nachricht als Teil einer Transaktion zu senden oder zu empfangen, können Sie die <xref:System.Messaging.MessageQueueTransaction> -Klasse verwenden, um eine Transaktion zu erstellen und an eine <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> Überladung der- <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> Methode oder der- `transaction` Methode zu übergeben, die einen-Parameter annimmt. Nachrichten, die als Teil einer Transaktion gesendet werden, müssen an Transaktions Warteschlangen gesendet werden. Nachrichten, die von Transaktions Warteschlangen empfangen werden, müssen mithilfe einer angegebenen Transaktion empfangen werden.  
  
 Neben der <xref:System.Messaging.MessageQueue.Receive%2A> -Methode können Sie auch Nachrichten mit einem angegebenen Bezeichner oder einer angegebenen Korrelations-ID empfangen. Weitere Informationen <xref:System.Messaging.MessageQueue.ReceiveById%2A> zum <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> selektiven empfangen von Nachrichten aus Transaktions Warteschlangen finden Sie unter den Methoden und.  
  
 An Transaktions Warteschlangen gesendete Nachrichten werden entfernt, wenn für die Transaktion ein Commit ausgeführt wird. Ebenso werden von transaktionalen Warteschlangen empfangene Nachrichten an die Warteschlange zurückgegeben, wenn für die Transaktion ein Rollback ausgeführt wird.  
  
 Wenn Sie einen <xref:System.Messaging.MessageQueueTransaction> instanziieren und ihn an eine anwendbare <xref:System.Messaging.MessageQueue.Send%2A> Überladung der-Methode oder <xref:System.Messaging.MessageQueue.Receive%2A> -Methode übergeben, um eine Nachricht an eine nicht transaktionale Warteschlange zu senden oder eine Nachricht von einer nicht transaktionalen Warteschlange zu empfangen, löst die Methode eine Ausnahme aus, die gibt "falsche Transaktions Verwendung" an.  
  
 <xref:System.Messaging.MessageQueueTransaction>ist Thread-Apartment-fähig, sodass Sie die Transaktion nicht `STA`in mehreren Threads verwenden können, wenn der Apartment Zustand ist. Visual Basic legt den Status des Haupt Threads auf `STA`fest, sodass Sie den <xref:System.MTAThreadAttribute> in der `Main` Unterroutine anwenden müssen. Andernfalls wird durch das Senden einer Transaktionsmeldung mithilfe eines anderen Threads eine <xref:System.Messaging.MessageQueueException>-Ausnahme ausgelöst. Sie wenden das <xref:System.MTAThreadAttribute> mit dem folgenden Fragment an.  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>Dieser Typ ist threadsicher.</threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Messaging.MessageQueueTransaction" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor legt die <xref:System.Messaging.MessageQueueTransaction.Status%2A> -Eigenschaft `Initialized`auf fest.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="messageQueueTransaction.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt einen Rollback der anstehenden internen Transaktion aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A>markiert den erfolglosen Abschluss eines Prozesses, <xref:System.Messaging.MessageQueueTransaction.Begin%2A>der bei einem-Rückruf gestartet wurde.  
  
 In der Regel Ruft ein-Element <xref:System.Messaging.MessageQueueTransaction.Begin%2A> innerhalb eines `Try...Catch` Ausnahme Behandlungs Blocks auf <xref:System.Messaging.MessageQueueTransaction.Commit%2A> , wobei <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in der `Try` -Klausel ein aufzurufende aufgerufen und in der `Catch` -Klausel aufgerufen wird.  
  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A>führt ein Rollback für die gesamte Transaktion aus. Dies schließt alle nach dem-Aufrufe <xref:System.Messaging.MessageQueueTransaction.Begin%2A>gesendeten oder empfangenen Nachrichten ein.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die interne Transaktion, für die Sie einen Rollback ausführen möchten, wurde nicht gestartet.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Ein interner Message Queuing-Fehler tritt auf.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="messageQueueTransaction.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beginnt eine neue interne Message Queuing-Transaktion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>markiert den Beginn der Verarbeitung, für den ein Commit oder ein Rollback ausgeführt wird, je nach Erfolg der Transaktion. Wenn während der Verarbeitung eine Ausnahme auftritt, wird für die gesamte Transaktion ein Rollback ausgeführt. Dies schließt alle nach dem-Aufrufe <xref:System.Messaging.MessageQueueTransaction.Begin%2A>gesendeten oder empfangenen Nachrichten ein.  
  
 In der Regel Ruft ein-Element <xref:System.Messaging.MessageQueueTransaction.Begin%2A> innerhalb eines `Try...Catch` Ausnahme Behandlungs Blocks auf <xref:System.Messaging.MessageQueueTransaction.Commit%2A> , wobei <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in der `Try` -Klausel ein aufzurufende aufgerufen und in der `Catch` -Klausel aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Transaktion wurde bereits gestartet.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Ein interner Message Queuing-Fehler tritt auf.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="messageQueueTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt einen Commit für eine anstehende interne Transaktion aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Commit%2A>markiert den erfolgreichen Abschluss der Verarbeitung, <xref:System.Messaging.MessageQueueTransaction.Begin%2A>die bei einem-Rückruf gestartet wurde. Wenn eine Ausnahme zwischen dem <xref:System.Messaging.MessageQueueTransaction.Begin%2A> -und dem- <xref:System.Messaging.MessageQueueTransaction.Commit%2A>Aufrufvorgang auftritt, wird für die gesamte Transaktion ein Rollback ausgeführt. Dies schließt alle nach dem-Aufrufe <xref:System.Messaging.MessageQueueTransaction.Begin%2A>gesendeten oder empfangenen Nachrichten ein.  
  
 In der Regel Ruft ein-Element <xref:System.Messaging.MessageQueueTransaction.Begin%2A> innerhalb eines `Try...Catch` Ausnahme Behandlungs Blocks auf <xref:System.Messaging.MessageQueueTransaction.Commit%2A> , wobei <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in der `Try` -Klausel ein aufzurufende aufgerufen und in der `Catch` -Klausel aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Transaktion, für die ein Commit ausgeführt werden soll, wurde nicht gestartet.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Ein interner Message Queuing-Fehler tritt auf.</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt die von der <see cref="T:System.Messaging.MessageQueueTransaction" /> verwendeten Ressourcen frei.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueTransaction.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom <see cref="T:System.Messaging.MessageQueueTransaction" /> verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch Aufrufen <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> von können die Ressourcen ,dievonverwendetwerden,fürandereZweckeneuzugeordnetwerden.<xref:System.Messaging.MessageQueueTransaction> Weitere Informationen zu finden `Dispose`Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md).  
  
 Alle ausstehenden internen Transaktionen werden von <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>zurückgesetzt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueTransaction.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Gibt die von <see cref="T:System.Messaging.MessageQueueTransaction" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der öffentlichen <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> -Methode und der <xref:System.Object.Finalize%2A> -Methode aufgerufen. `Dispose`Ruft die geschützte `Dispose(Boolean)` Methode auf, `disposing` wobei der- `true`Parameter auf festgelegt ist. <xref:System.Object.Finalize%2A>Ruft `Dispose` auf `disposing` , wobei `false`auf gesetzt ist.  
  
 Wenn der `disposing`-Parameter `true` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:System.Messaging.MessageQueueTransaction> verweist. Diese Methode ruft die `Dispose`-Methode aller Objekte auf, auf die verwiesen wird.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> kann von anderen Objekten mehrmals aufgerufen werden. Beim Überschreiben von <see langword="Dispose(Boolean)" /> müssen Sie darauf achten, nicht auf Objekte zu verweisen, die durch einen früheren Aufruf von <see langword="Dispose" /> freigegeben wurden. Weitere Informationen zum Implementieren <see langword="Dispose" />von finden Sie unter [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.  
  
Weitere Informationen zu und <see langword="Dispose" /> <see langword="Finalize" />finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und überschreiben [der Finalize-Methode](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueTransaction.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die von der aktuellen Instanz reservierten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.Finalize%2A?displayProperty=nameWithType>. Der Anwendungscode sollte diese Methode nicht aufzurufen. die- <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> Methode eines Objekts wird automatisch während Garbage Collection aufgerufen, es sei denn, die Garbage Collector wurde durch einen Aufruf der <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> -Methode deaktiviert.  
  
 Weitere Informationen finden Sie unter [Finalize-Methoden und](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100))debugtoren, [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md)und überschreiben [der Finalize-Methode](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Messaging.MessageQueueTransactionStatus" Usage="System.Messaging.MessageQueueTransaction.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Status der Transaktion ab.</summary>
        <value>Einer der <see cref="T:System.Messaging.MessageQueueTransactionStatus" />-Werte, der angibt, ob ein Commit für die Transaktion ausgeführt wurde, ob diese abgebrochen oder initialisiert wurde oder ob sie anstehend ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Instanz der <xref:System.Messaging.MessageQueueTransaction> -Klasse erstellt wurde, wird der <xref:System.Messaging.MessageQueueTransaction.Status%2A> vom-Konstruktor auf `Initialized`festgelegt. Nach einem-Rückruf <xref:System.Messaging.MessageQueueTransaction.Begin%2A> , aber vor einem- <xref:System.Messaging.MessageQueueTransaction.Commit%2A> oder <xref:System.Messaging.MessageQueueTransaction.Abort%2A>-Rückruf <xref:System.Messaging.MessageQueueTransaction.Status%2A> , `Pending`ist der gleich.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>

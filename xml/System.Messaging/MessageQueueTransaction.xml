<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d2f750339c17f272f8cc360d38e3f1850a40606b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="11867-101">Stellt eine interne Message Queuing-Transaktion bereit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="11867-101">Provides a Message Queuing internal transaction.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11867-102">Zum Senden oder Empfangen einer Meldung als Teil einer Transaktion, können Sie die <xref:System.Messaging.MessageQueueTransaction> Klasse, um eine Transaktion erstellen und übergeben Sie ihn an eine Überladung der <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> Methode oder die <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> Methode, eine `transaction` Parameter.</span><span class="sxs-lookup"><span data-stu-id="11867-102">To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> method that takes a `transaction` parameter.</span></span> <span data-ttu-id="11867-103">Nachrichten, die als Teil einer Transaktion gesendet, die an Transaktionswarteschlangen gesendet werden müssen.</span><span class="sxs-lookup"><span data-stu-id="11867-103">Messages sent as part of a transaction must be sent to transactional queues.</span></span> <span data-ttu-id="11867-104">Empfangenen Nachrichten von Transaktionswarteschlangen müssen unter Verwendung einer angegebenen Transaktions empfangen werden.</span><span class="sxs-lookup"><span data-stu-id="11867-104">Messages received from transactional queues must be received using a specified transaction.</span></span>  
  
 <span data-ttu-id="11867-105">Zusätzlich zu den <xref:System.Messaging.MessageQueue.Receive%2A> -Methode, können Sie Nachrichten mit einem angegebenen Bezeichner oder einer angegebenen Korrelations-ID erhalten.</span><span class="sxs-lookup"><span data-stu-id="11867-105">In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier.</span></span> <span data-ttu-id="11867-106">Finden Sie unter der <xref:System.Messaging.MessageQueue.ReceiveById%2A> und <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> Methoden für Weitere Informationen zu selektiv empfangen von Nachrichten von Transaktionswarteschlangen.</span><span class="sxs-lookup"><span data-stu-id="11867-106">See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.</span></span>  
  
 <span data-ttu-id="11867-107">An Transaktionswarteschlangen gesendete Nachrichten werden entfernt, wenn die Transaktion ein Commit ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="11867-107">Messages sent to transactional queues are removed if the transaction is committed.</span></span> <span data-ttu-id="11867-108">Auf ähnliche Weise werden von Transaktionswarteschlangen empfangene Nachrichten an die Warteschlange zurückgegeben, wenn die Transaktion ein Rollback ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="11867-108">Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</span></span>  
  
 <span data-ttu-id="11867-109">Wenn Sie Instanziieren einer <xref:System.Messaging.MessageQueueTransaction> sowie deren Übergabe an eine Überladung gilt, der die <xref:System.Messaging.MessageQueue.Send%2A> Methode oder <xref:System.Messaging.MessageQueue.Receive%2A> Methode, um eine Nachricht an eine nicht transaktionale Warteschlange senden oder Empfangen von Nachrichten aus einer nicht transaktionalen Warteschlange, die Methode löst eine Ausnahme aus, die Gibt "Falsche Transaktionsverwendung."</span><span class="sxs-lookup"><span data-stu-id="11867-109">If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</span></span>  
  
 <span data-ttu-id="11867-110"><xref:System.Messaging.MessageQueueTransaction> Apartmentthreading fähig ist, wenn der Apartmentzustand `STA`, die Transaktion in mehreren Threads nicht verwendet werden können.</span><span class="sxs-lookup"><span data-stu-id="11867-110"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="11867-111">Visual Basic legt den Zustand des Hauptthreads auf `STA`, sodass Sie anwenden, müssen die <xref:System.MTAThreadAttribute> in die `Main` Unterroutine.</span><span class="sxs-lookup"><span data-stu-id="11867-111">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="11867-112">Andernfalls wird durch das Senden einer Transaktionsmeldung mithilfe eines anderen Threads eine <xref:System.Messaging.MessageQueueException>-Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="11867-112">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="11867-113">Sie wenden die <xref:System.MTAThreadAttribute> mit dem folgenden Fragment.</span><span class="sxs-lookup"><span data-stu-id="11867-113">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="11867-114">Dieser Typ ist threadsicher.</span>
      <span class="sxs-lookup">
        <span data-stu-id="11867-114">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="11867-115">Initialisiert eine neue Instanz der <see cref="T:System.Messaging.MessageQueueTransaction" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-115">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueTransaction" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11867-116">Dieser Konstruktor legt die <xref:System.Messaging.MessageQueueTransaction.Status%2A> Eigenschaft `Initialized`.</span><span class="sxs-lookup"><span data-stu-id="11867-116">This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="11867-117">Führt einen Rollback der anstehenden internen Transaktion aus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-117">Rolls back the pending internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11867-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> markiert den nicht erfolgreichen Abschluss eines Prozesses, der mit einem Aufruf von begonnen wurde <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="11867-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="11867-119">In der Regel wird ein Aufruf zum <xref:System.Messaging.MessageQueueTransaction.Begin%2A> innerhalb einer `Try...Catch` Ausnahmebehandlung-Block aufzurufen <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in der `Try` -Klausel und einem Aufruf von <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in die `Catch` Klausel.</span><span class="sxs-lookup"><span data-stu-id="11867-119">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 <span data-ttu-id="11867-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> Führt einen Rollback für die gesamte Transaktion aus.</span><span class="sxs-lookup"><span data-stu-id="11867-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction.</span></span> <span data-ttu-id="11867-121">Dies umfasst alle Nachrichten gesendet oder empfangen wurden, nach dem Aufruf von <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="11867-121">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="11867-122">Die interne Transaktion, für die Sie einen Rollback ausführen möchten, wurde nicht gestartet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-122">The internal transaction you are attempting to roll back has not started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="11867-123">Ein interner Message Queuing-Fehler tritt auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-123">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="11867-124">Beginnt eine neue interne Message Queuing-Transaktion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-124">Begins a new Message Queuing internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11867-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> markiert den Beginn der Verarbeitung, die ein Commit oder Rollback ausgeführt, je nach den Erfolg der Transaktion.</span><span class="sxs-lookup"><span data-stu-id="11867-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</span></span> <span data-ttu-id="11867-126">Wenn eine Ausnahme während der Verarbeitung auftritt, wird für die gesamte Transaktion ein Rollback ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="11867-126">If an exception occurs during processing, the entire transaction is rolled back.</span></span> <span data-ttu-id="11867-127">Dies umfasst alle Nachrichten gesendet oder empfangen wurden, nach dem Aufruf von <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="11867-127">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="11867-128">In der Regel wird ein Aufruf zum <xref:System.Messaging.MessageQueueTransaction.Begin%2A> innerhalb einer `Try...Catch` Ausnahmebehandlung-Block aufzurufen <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in der `Try` -Klausel und einem Aufruf von <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in die `Catch` Klausel.</span><span class="sxs-lookup"><span data-stu-id="11867-128">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="11867-129">Die Transaktion wurde bereits gestartet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-129">The transaction has already been started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="11867-130">Ein interner Message Queuing-Fehler tritt auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-130">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="11867-131">Führt einen Commit für eine anstehende interne Transaktion aus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-131">Commits a pending internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11867-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> markiert den erfolgreichen Abschluss der Verarbeitung begonnen, die bei einem Aufruf von <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="11867-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span> <span data-ttu-id="11867-133">Wenn eine Ausnahme, zwischen dem Aufruf auftritt der <xref:System.Messaging.MessageQueueTransaction.Begin%2A> und der Aufruf von <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, die gesamte Transaktion zurückgesetzt wird.</span><span class="sxs-lookup"><span data-stu-id="11867-133">If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back.</span></span> <span data-ttu-id="11867-134">Dies umfasst alle Nachrichten gesendet oder empfangen wurden, nach dem Aufruf von <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="11867-134">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="11867-135">In der Regel wird ein Aufruf zum <xref:System.Messaging.MessageQueueTransaction.Begin%2A> innerhalb einer `Try...Catch` Ausnahmebehandlung-Block aufzurufen <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in der `Try` -Klausel und einem Aufruf von <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in die `Catch` Klausel.</span><span class="sxs-lookup"><span data-stu-id="11867-135">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="11867-136">Die Transaktion, für die ein Commit ausgeführt werden soll, wurde nicht gestartet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-136">The transaction you are trying to commit has not started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="11867-137">Ein interner Message Queuing-Fehler tritt auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-137">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="11867-138">Gibt die von der <see cref="T:System.Messaging.MessageQueueTransaction" /> verwendeten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-138">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="11867-139">Gibt alle vom <see cref="T:System.Messaging.MessageQueueTransaction" /> verwendeten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-139">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11867-140">Aufrufen von <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> können Ressourcen von der <xref:System.Messaging.MessageQueueTransaction> neu für andere Zwecke reserviert werden.</span><span class="sxs-lookup"><span data-stu-id="11867-140">Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes.</span></span> <span data-ttu-id="11867-141">Weitere Informationen zu `Dispose`, finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="11867-141">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="11867-142">Alle anstehenden internen Transaktionen ein Rollback von <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="11867-142">Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="11867-143">
            <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-143">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="11867-144">Gibt die von <see cref="T:System.Messaging.MessageQueueTransaction" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-144">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11867-145">Diese Methode wird aufgerufen, der öffentlich <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> Methode und die <xref:System.Object.Finalize%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="11867-145">This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="11867-146">`Dispose` Ruft die geschützte `Dispose(Boolean)` Methode mit dem `disposing` Parametersatz auf `true`.</span><span class="sxs-lookup"><span data-stu-id="11867-146">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="11867-147"><xref:System.Object.Finalize%2A> Ruft `Dispose` mit `disposing` festgelegt `false`.</span><span class="sxs-lookup"><span data-stu-id="11867-147"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="11867-148">Wenn der `disposing`-Parameter `true` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:System.Messaging.MessageQueueTransaction> verweist.</span><span class="sxs-lookup"><span data-stu-id="11867-148">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references.</span></span> <span data-ttu-id="11867-149">Diese Methode ruft die `Dispose`-Methode aller Objekte auf, auf die verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="11867-149">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="11867-150">
              <see langword="Dispose" /> kann von anderen Objekten mehrmals aufgerufen werden.</span>
            <span class="sxs-lookup">
              <span data-stu-id="11867-150">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="11867-151">Beim Überschreiben von <see langword="Dispose(Boolean)" /> müssen Sie darauf achten, nicht auf Objekte zu verweisen, die durch einen früheren Aufruf von <see langword="Dispose" /> freigegeben wurden.</span>
            <span class="sxs-lookup">
              <span data-stu-id="11867-151">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="11867-152">Weitere Informationen zum Implementieren <see langword="Dispose" />, finden Sie unter [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            <span class="sxs-lookup">
              <span data-stu-id="11867-152">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="11867-153">Weitere Informationen zu <see langword="Dispose" /> und <see langword="Finalize" />, finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Überschreiben der Finalize-Methode](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            <span class="sxs-lookup">
              <span data-stu-id="11867-153">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="11867-154">Gibt die von der aktuellen Instanz reservierten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-154">Releases the resources held by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11867-155">Diese Methode überschreibt <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="11867-155">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="11867-156">Diese Methode sollte nicht von Anwendungscode aufgerufen werden. ein Objekt <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> Methode wird automatisch während der Garbagecollection aufgerufen, durch einen Aufruf von seiner Finalisierung verfolgt, durch den Garbage Collector deaktiviert wurde die <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="11867-156">Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="11867-157">Weitere Informationen finden Sie unter [Finalize-Methoden und Destruktoren](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md), und [Überschreiben der Finalize-Methode](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span><span class="sxs-lookup"><span data-stu-id="11867-157">For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="11867-158">Ruft den Status der Transaktion ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-158">Gets the status of the transaction.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="11867-159">Einer der <see cref="T:System.Messaging.MessageQueueTransactionStatus" />-Werte, der angibt, ob ein Commit für die Transaktion ausgeführt wurde, ob diese abgebrochen oder initialisiert wurde oder ob sie anstehend ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11867-159">One of the <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11867-160">Wenn eine Instanz von der <xref:System.Messaging.MessageQueueTransaction> Klasse erstellt wurde, die <xref:System.Messaging.MessageQueueTransaction.Status%2A> wird festgelegt, indem der Konstruktor `Initialized`.</span><span class="sxs-lookup"><span data-stu-id="11867-160">When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`.</span></span> <span data-ttu-id="11867-161">Nach einem Aufruf von <xref:System.Messaging.MessageQueueTransaction.Begin%2A> , aber vor einem Aufruf von <xref:System.Messaging.MessageQueueTransaction.Commit%2A> oder <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, <xref:System.Messaging.MessageQueueTransaction.Status%2A> ist `Pending`.</span><span class="sxs-lookup"><span data-stu-id="11867-161">After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>
<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MessageEnumerator.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56a3039a11d941cd3db611cb997eb17835525e4da.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a3039a11d941cd3db611cb997eb17835525e4da</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Provides a forward-only cursor to enumerate through messages in a message queue.</source>
          <target state="translated">Stellt einen Vorwärtscursor zum Aufzählen der Nachrichten in einer Nachrichtenwarteschlange bereit.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Use <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> for dynamic interaction with messages in a queue.</source>
          <target state="translated">Verwendung <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> für dynamische Interaktion mit Nachrichten in einer Warteschlange.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Methods available through the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class can return either a <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</source>
          <target state="translated">Methoden zur Verfügung, über die <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> Klasse kann entweder Zurückgeben einer <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> verweist auf eine dynamische Liste von Nachrichten in der Warteschlange oder ein Array, das eine Kopie zu einem angegebenen Zeitpunkt - eine Momentaufnahme - der Warteschlange enthält, die zum Zeitpunkt der angegebenen Methode wurde aufgerufen.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Unlike a static snapshot, an enumerator allows you to modify the collection.</source>
          <target state="translated">Ein Enumerator kann im Gegensatz zu einem statischen Snapshot Sie zum Ändern der Auflistung.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Using a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>, you can remove messages from the queue, and the change is immediately reflected in the queue.</source>
          <target state="translated">Mit einem <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>, können Sie Nachrichten aus der Warteschlange entfernt und in der Warteschlange wird die Änderung sofort übernommen.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>An enumerator does not remove the messages from the queue when it queries the queue.</source>
          <target state="translated">Ein Enumerator entfernt nicht die Nachrichten aus der Warteschlange, beim Abfragen der Warteschlangenobjekts.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>It returns information about the message at the current cursor position, but it leaves the message in the queue.</source>
          <target state="translated">Gibt Informationen über die Meldung an der aktuellen Cursorposition eingefügt, aber es bleibt die Nachricht in der Warteschlange.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>A <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> is a cursor, initialized to the head of a dynamic list.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> ist ein Cursor, der an den Anfang einer dynamischen Liste initialisiert.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The list order is the same as the order of the messages in the queue, according to message priority.</source>
          <target state="translated">Die Reihenfolge der Liste entspricht der Reihenfolge der Nachrichten in der Warteschlange gemäß der Priorität der Nachricht.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>You can move the cursor to the first message in the queue by calling <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Bewegen des Cursors auf die erste Nachricht in die Warteschlange durch Aufrufen von <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>After the enumerator has been initialized, you can use <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> to step forward through the remaining messages.</source>
          <target state="translated">Nachdem der Enumerator initialisiert wurde, können Sie <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> um die verbleibenden Nachrichten vorwärts zu durchlaufen.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>You can specify whether to wait for a message to become available by passing a timeout into the <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> method.</source>
          <target state="translated">Sie können angeben, ob warten, bis eine Nachricht verfügbar wird durch das Übergeben eines Timeouts in der <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</source>
          <target state="translated">Da der Enumerator dynamisch ist, eine Nachricht, die hinter der aktuellen Cursorposition (z. B. aufgrund mit niedriger Priorität), angefügt wird möglich vom Enumerator.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>A message that is inserted before the cursor's current position cannot be accessed.</source>
          <target state="translated">Eine Meldung, die eingefügt wird, bevor der aktuellen Cursorposition kann nicht zugegriffen werden.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>It is not possible to step backward with a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>.</source>
          <target state="translated">Es ist nicht möglich, auf eine <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>A cursor allows forward-only movement.</source>
          <target state="translated">Ein Cursor kann nur vorwärts bewegt.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> method enables you to place the cursor back at the beginning of the queue.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> Methode können Sie den Cursor wieder an den Anfang der Warteschlange zu platzieren.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Instances of <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> for a given queue work independently.</source>
          <target state="translated">Instanzen von <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> für eine bestimmte Warteschlange unabhängig arbeiten.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>You can create two <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> instances that apply to the same queue.</source>
          <target state="translated">Erstellen Sie zwei <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> Instanzen, die für dieselbe Warteschlange gelten.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The changes that one <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</source>
          <target state="translated">Die Änderungen, dass eine <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> macht die Nachrichten in der Warteschlange werden sofort in eine zweite Enumerator Wenn der zweite Enumerator vor dem ersten positioniert ist.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> property on the now-deleted message.</source>
          <target state="translated">Jedoch wenn zwei Enumeratoren die gleiche Position haben und einer von ihnen die Meldung an dieser Position entfernt, eine Ausnahme wird ausgelöst, wenn versucht wird, dass der anderen Enumerator Abrufen des Werts der <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> Eigenschaft für die Nachricht sofort gelöscht.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>If you create an instance of <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> with <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType&gt;</ph> set to <ph id="ph3">`true`</ph>, no other application can modify the messages in your enumerator while you have the connection to the queue.</source>
          <target state="translated">Bei der Erstellung einer Instanz von <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> mit <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType&gt;</ph> festgelegt <ph id="ph3">`true`</ph>, keine andere Anwendung kann die Nachrichten in einen Enumerator ändern, während Sie die Verbindung mit der Warteschlange haben.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The following example gets a dynamic list of messages in a queue and counts all messages with the <ph id="ph1">&lt;xref:System.Messaging.Message.Priority%2A&gt;</ph> property set to <ph id="ph2">&lt;xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Im folgenden Beispiel ruft eine dynamische Liste von Nachrichten in einer Warteschlange ab und zählt alle Meldungen mit der <ph id="ph1">&lt;xref:System.Messaging.Message.Priority%2A&gt;</ph> -Eigenschaftensatz auf <ph id="ph2">&lt;xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Close">
          <source>Frees the resources associated with the enumerator.</source>
          <target state="translated">Gibt die dem Enumerator zugeordneten Ressourcen frei.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Close">
          <source>The operating system retains an open handle to the queue during the lifetime of the cursor.</source>
          <target state="translated">Das Betriebssystem behält ein geöffnetes Handle an die Warteschlange, während der Lebensdauer des Cursors.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Close">
          <source>When you have finished working with the enumerator, call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> to release the resources associated with the handle.</source>
          <target state="translated">Wenn Sie die Arbeit mit dem Enumerator abgeschlossen haben, rufen <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> , die dem Handle zugeordneten Ressourcen freizugeben.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>Gets the current <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that this enumerator points to.</source>
          <target state="translated">Ruft das aktuelle <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> ab, auf das dieser Enumerator zeigt.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>The current message.</source>
          <target state="translated">Die aktuelle Meldung.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>When the enumerator is created, it points to the head of the queue, at a location before the first message.</source>
          <target state="translated">Wenn der Enumerator erstellt wird, zeigt es an den Anfang der Warteschlange, an einer Position vor der ersten Meldung.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>In this case, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> is not valid and will throw an exception if it is accessed.</source>
          <target state="translated">In diesem Fall <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> ist ungültig und löst eine Ausnahme aus, wenn darauf zugegriffen wird.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>You must call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> to position the cursor at the first message in the queue.</source>
          <target state="translated">Rufen Sie <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> um den Cursor an die erste Nachricht in die Warteschlange einzufügen.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>You called <ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> before the first call to <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> wurde vor dem ersten Aufruf von <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> aufgerufen.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>The cursor is located before the first element of the message enumeration.</source>
          <target state="translated">Der Cursor befindet sich vor dem ersten Element der Meldungsenumeration.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>You called <ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> after a call to <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> had returned <ph id="ph3">&lt;see langword="false" /&gt;</ph> (indicating the cursor is located after the last element of the message enumeration.)</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> wurde aufgerufen, nachdem bei einem Aufruf von <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> der Wert <ph id="ph3">&lt;see langword="false" /&gt;</ph> zurückgegeben wurde. (Dies bedeutet, dass sich der Cursor hinter dem letzten Element der Meldungsenumeration befindet.)</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>The message the enumerator is currently pointing to no longer exists.</source>
          <target state="translated">Die Meldung, auf die der Enumerator gegenwärtig zeigt, ist nicht mehr vorhanden.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>It might have been deleted.</source>
          <target state="translated">Es wurde möglicherweise gelöscht.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>Gets the native Message Queuing cursor handle used to browse messages in the queue.</source>
          <target state="translated">Ruft das systemeigene Cursorhandle von Message Queuing ab, das zum Durchsuchen von Meldungen in der Warteschlange verwendet wird.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>The native cursor handle.</source>
          <target state="translated">Das systemeigene Cursorhandle.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>This property contains the native handle to the enumeration.</source>
          <target state="translated">Diese Eigenschaft enthält das systemeigene Handle der Enumeration.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>When you have finished working with the enumerator, call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> to release this resource.</source>
          <target state="translated">Wenn Sie die Arbeit mit dem Enumerator abgeschlossen haben, rufen <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> dieser Ressource freigegeben.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>The handle does not exist.</source>
          <target state="translated">Das Handle ist nicht vorhanden.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph>.</source>
          <target state="translated">Gibt die von der <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph> verwendeten Ressourcen frei.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph>.</source>
          <target state="translated">Gibt alle vom <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph> verwendeten Ressourcen frei.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose">
          <source>Calling <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">Aufrufen von <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> können Ressourcen von der <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> neu für andere Zwecke reserviert werden.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose">
          <source>For more information about <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph>, finden Sie unter <bpt id="p1">[</bpt>Bereinigen von nicht verwalteten Ressourcen<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <ph id="ph2">&lt;see langword="false" /&gt;</ph>, um ausschließlich nicht verwaltete Ressourcen freizugeben.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Gibt die von <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Diese Methode wird aufgerufen, der öffentlich <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> Methode und die <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> Ruft die geschützte <ph id="ph2">`Dispose(Boolean)`</ph> Methode mit dem <ph id="ph3">`disposing`</ph> Parametersatz auf <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> Ruft <ph id="ph2">`Dispose`</ph> mit <ph id="ph3">`disposing`</ph> festgelegt <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> references.</source>
          <target state="translated">Wenn der <ph id="ph1">`disposing`</ph>-Parameter <ph id="ph2">`true`</ph> ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <ph id="ph3">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> verweist.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">Diese Methode ruft die <ph id="ph1">`Dispose()`</ph>-Methode aller Objekte auf, auf die verwiesen wird.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> kann von anderen Objekten mehrmals aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">Beim Überschreiben von <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> müssen Sie darauf achten, nicht auf Objekte zu verweisen, die durch einen früheren Aufruf von <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph> freigegeben wurden.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Weitere Informationen zum Implementieren <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>, finden Sie unter <bpt id="p1">[</bpt>Implementieren einer Dispose-Methode<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> und <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, finden Sie unter <bpt id="p1">[</bpt>Bereinigen von nicht verwalteten Ressourcen<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> und <bpt id="p2">[</bpt>Überschreiben der Finalize-Methode<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Advances the enumerator to the next message in the queue.</source>
          <target state="translated">Setzt den Enumerator auf die nächste Meldung in der Warteschlange.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>Advances the enumerator to the next message in the queue, if one is currently available.</source>
          <target state="translated">Setzt den Enumerator auf die nächste Meldung in der Warteschlange, sofern eine Meldung verfügbar ist.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the enumerator was succesfully advanced to the next message; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the enumerator has reached the end of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Enumerator erfolgreich auf die nächste Meldung gesetzt wurde. <ph id="ph2">&lt;see langword="false" /&gt;</ph>, wenn der Enumerator das Ende der Warteschlange erreicht hat.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>This overload returns immediately if there is no message in the queue.</source>
          <target state="translated">Diese Überladung wird sofort zurückgegeben, wenn keine Meldung in der Warteschlange vorhanden ist.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>There is another overload that waits a specified <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> for a message to arrive.</source>
          <target state="translated">Es wird eine andere Überladung, die ein angegebenes wartet <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> für eine Nachricht eintrifft.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph> to the calling method.</source>
          <target state="translated">Wenn eine Nachricht nicht verfügbar ist, weil die Warteschlange leer ist oder Sie hinter dem letzten Element in der Auflistung verschoben haben <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> gibt <ph id="ph2">`false`</ph> an die aufrufende Methode.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> brings the first message of the queue into view.</source>
          <target state="translated">Bei der Erstellung einer konzeptionell Enumerator wird vor die erste Nachricht der Warteschlange und der erste Aufruf von <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> zeigt die erste Nachricht der Warteschlange an.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>An exception specific to Message Queuing was thrown.</source>
          <target state="translated">Es wurde eine Message Queuing-spezifische Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to wait for a message to be available if the enumerator is positioned at the end of the queue.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> gibt die Zeitspanne an, innerhalb derer eine Meldung eingehen muss, wenn der Enumerator auf das Ende der Warteschlange zeigt.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>Advances the enumerator to the next message in the queue.</source>
          <target state="translated">Setzt den Enumerator auf die nächste Meldung in der Warteschlange.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>If the enumerator is positioned at the end of the queue, <ph id="ph1">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> waits until a message is available or the given timeout expires.</source>
          <target state="translated">Wenn sich der Enumerator am Ende der Warteschlange befindet, wartet <ph id="ph1">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph>, bis eine Meldung verfügbar ist oder der angegebene Timeout überschritten wird.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the enumerator successfully advanced to the next message; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Enumerator erfolgreich auf die nächste Meldung gesetzt wurde. <ph id="ph2">&lt;see langword="false" /&gt;</ph>, wenn der Enumerator das Ende der Warteschlange erreicht hat und innerhalb der im <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph>-Parameter angegebenen Zeit keine Meldung eingeht.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</source>
          <target state="translated">Diese Überladung wartet, wenn keine Meldung in der Warteschlange vorhanden ist oder wenn der Cursor am Ende der Warteschlange erreicht hat.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> waits the specified timeout.</source>
          <target state="translated">Wenn eine Nachricht nicht verfügbar ist, weil die Warteschlange leer ist oder Sie hinter dem letzten Element in der Auflistung verschoben haben <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> wartet das festgelegte Timeout.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>If the cursor is already at the end of the queue, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> only returns <ph id="ph2">`true`</ph> if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</source>
          <target state="translated">Wenn der Cursor bereits am Ende der Warteschlange <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> gibt nur <ph id="ph2">`true`</ph> Wenn innerhalb des angegebenen Zeitintervalls die neue Nachricht eingeht, derzeit hat eine niedrigere Priorität als alle Nachrichten in der Warteschlange und wird am Ende der Warteschlange platziert.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>An overload with no parameter returns immediately if no further messages are in the queue.</source>
          <target state="translated">Eine Überladung ohne Parameter wird sofort zurückgegeben, wenn keine weiteren Nachrichten in der Warteschlange befinden.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> brings the first message of the enumeration into view.</source>
          <target state="translated">Bei der Erstellung einer konzeptionell Enumerator wird vor die erste Nachricht der Enumeration und der erste Aufruf von <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> Schaltet die erste Nachricht der Enumeration in der Ansicht.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>The value specified for the timeout parameter is invalid.</source>
          <target state="translated">Der für den Timeoutparameter angegebene Wert ist ungültig.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>It might represent a negative number.</source>
          <target state="translated">Eventuell wurde ein negativer Wert angegeben.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>An exception specific to Message Queuing was thrown.</source>
          <target state="translated">Es wurde eine Message Queuing-spezifische Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>The timeout has expired.</source>
          <target state="translated">Der Timeout wurde überschritten.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Removes the current message from the queue and returns the message to the calling application.</source>
          <target state="translated">Entfernt die aktuelle Meldung aus der Warteschlange und gibt die Meldung an die aufrufende Anwendung zurück.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Removing the message deletes it from the queue.</source>
          <target state="translated">Durch das Entfernen einer Meldung wird diese aus der Warteschlange gelöscht.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The behavior described for these overloads is applicable only if the <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> instance is retrieved by using the <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A&gt;</ph>.</source>
          <target state="translated">Für diese Überladungen beschriebene Verhalten gilt nur, wenn die <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> Instanz abgerufen, indem die <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Do not use <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A&gt;</ph> to retrieve an instance of <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> as this method has been deprecated.</source>
          <target state="translated">Verwenden Sie keine <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A&gt;</ph> zum Abrufen einer Instanz von <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> wie diese Methode wurde als veraltet markiert.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</source>
          <target state="translated">Entfernt die aktuelle Meldung aus einer transaktionalen oder nicht transaktionalen Warteschlange und gibt die Meldung an die aufrufende Anwendung zurück.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">Für das Eintreffen einer Meldung in der Warteschlange ist kein Timeout festgelegt.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>, die auf die erste Meldung in der Warteschlange verweist.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> entfernt, und gibt die Meldung an der aktuellen Cursorposition.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Bei Verwendung von Warteschlange Journaling Entfernen der Nachricht wird eine Kopie, die in der Journalwarteschlange gespeichert sind, ebenso wie die <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> Klasse <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> Methode hat.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Nachricht verschoben.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Sie müssen keine Aufrufen <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> nach dem Aufruf <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</source>
          <target state="translated">Wenn Sie diese Überladung für eine transaktionale Warteschlange aufrufen, erstellt das Message Queuing eine einzelne, interne Transaktion aus.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> object that specifies the transaction in which the message will be removed.</source>
          <target state="translated">Dieses <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph>-Objekt stellt die Transaktion dar, innerhalb der die Meldung entfernt wird.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>Removes the current message from a transactional queue and returns the message to the calling application.</source>
          <target state="translated">Entfernt die aktuelle Meldung aus einer transaktionalen Warteschlange und gibt die Meldung an die aufrufende Anwendung zurück.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">Für das Eintreffen einer Meldung in der Warteschlange ist kein Timeout festgelegt.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>, die auf die erste Meldung in der Warteschlange verweist.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using the internal transaction context defined by the <ph id="ph2">`transaction`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> entfernt, und gibt die Meldung an der aktuellen Cursorposition, mit der internen bereits verwendeten Transaktionskontext durch definiert die <ph id="ph2">`transaction`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Bei Verwendung von Warteschlange Journaling Entfernen der Nachricht wird eine Kopie, die in der Journalwarteschlange gespeichert sind, ebenso wie die <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> Klasse <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> Methode hat.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Bei der Arbeit mit Transaktionswarteschlangen ein Rollback einer Transaktion bewirkt, dass alle Nachrichten, die durch einen Aufruf von entfernt <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> an die Warteschlange zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">Die Entfernung ist nicht nicht rückgängig gemacht werden, bevor die Transaktion ein Commit ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Nachricht verschoben.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Sie müssen keine Aufrufen <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> nach dem Aufruf <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph>-Parameter ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> values, describing the type of transaction context to associate with the message.</source>
          <target state="translated">Einer der <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph>-Werte, der den Typ des Transaktionskontexts beschreibt, der der Meldung zugeordnet werden soll.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>Removes the current message from a queue and returns the message to the calling application.</source>
          <target state="translated">Entfernt die aktuelle Meldung aus einer Warteschlange und gibt die Meldung an die aufrufende Anwendung zurück.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">Für das Eintreffen einer Meldung in der Warteschlange ist kein Timeout festgelegt.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>, die auf die erste Meldung in der Warteschlange verweist.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id="ph2">`transactionType`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> entfernt, und gibt die Meldung an der aktuellen Cursorposition, verwenden einen bereits verwendeten Transaktionskontext durch definiert die <ph id="ph2">`transactionType`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Automatic`</ph> for the <ph id="ph2">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</source>
          <target state="translated">Geben Sie <ph id="ph1">`Automatic`</ph> für die <ph id="ph2">`transactionType`</ph> Parameter an, wenn es bereits ein externer Transaktionskontext ist angefügt wird, an den Thread, die Sie zum Empfangen der Nachricht verwenden möchten.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Single`</ph> if you want to receive the message as a single internal transaction.</source>
          <target state="translated">Geben Sie <ph id="ph1">`Single`</ph> , wenn die Nachricht als eine interne Transaktion empfangen werden sollen.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>You can specify <ph id="ph1">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.</source>
          <target state="translated">Sie können angeben, <ph id="ph1">`None`</ph> Wenn eine Nachricht von einer Transaktionswarteschlange außerhalb eines Transaktionskontexts zu empfangen werden sollen.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Bei Verwendung von Warteschlange Journaling Entfernen der Nachricht wird eine Kopie, die in der Journalwarteschlange gespeichert sind, ebenso wie die <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> Klasse <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> Methode hat.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Bei der Arbeit mit Transaktionswarteschlangen ein Rollback einer Transaktion bewirkt, dass alle Nachrichten, die durch einen Aufruf von entfernt <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> an die Warteschlange zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">Die Entfernung ist nicht nicht rückgängig gemacht werden, bevor die Transaktion ein Commit ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Nachricht verschoben.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Sie müssen keine Aufrufen <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> nach dem Aufruf <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>The <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph> parameter is not one of the <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> members.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph>-Parameter ist keiner der <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph>-Member.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>The interval of time to wait for a message to arrive in the queue.</source>
          <target state="translated">Die Zeit, die auf das Eintreffen einer Meldung gewartet werden soll.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>Removes the current message from the queue and returns the message to the calling application.</source>
          <target state="translated">Entfernt die aktuelle Meldung aus der Warteschlange und gibt die Meldung an die aufrufende Anwendung zurück.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">Wenn eine vorhandene Meldung entfernt werden kann, wird diese von der Methode sofort zurückgegeben.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">Andernfalls wartet die Methode auf das Eingehen einer neuen Meldung, bis der angegebene Timeout überschritten wird.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>, die auf die erste Meldung in der Warteschlange verweist.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> entfernt, und gibt die Meldung an der aktuellen Cursorposition.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">Wenn der Cursor am Ende der Warteschlange befindet, wird diese Überladung der Methode wartet, bis eine Nachricht verfügbar ist oder das Intervall angegeben wird, indem die <ph id="ph1">`timeout`</ph> Parameter ist abgelaufen.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Bei Verwendung von Warteschlange Journaling Entfernen der Nachricht wird eine Kopie, die in der Journalwarteschlange gespeichert sind, ebenso wie die <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> Klasse <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> Methode hat.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Nachricht verschoben.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Sie müssen keine Aufrufen <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> nach dem Aufruf <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</source>
          <target state="translated">Wenn Sie diese Überladung für eine transaktionale Warteschlange aufrufen, erstellt das Message Queuing eine einzelne, interne Transaktion aus.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>The value specified for the <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is invalid.</source>
          <target state="translated">Der für den <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>-Parameter angegebene Wert ist ungültig.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>The timeout has expired.</source>
          <target state="translated">Der Timeout wurde überschritten.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The interval of time to wait for the message to be removed.</source>
          <target state="translated">Die Zeitspanne, in der die zu entfernende Meldung eingehen muss.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> object that specifies the transaction context for the message.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph>-Objekt, das den Transaktionskontext für diese Meldung angibt.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>Removes the current message from a transactional queue and returns the message to the calling application.</source>
          <target state="translated">Entfernt die aktuelle Meldung aus einer transaktionalen Warteschlange und gibt die Meldung an die aufrufende Anwendung zurück.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">Wenn eine vorhandene Meldung entfernt werden kann, wird diese von der Methode sofort zurückgegeben.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">Andernfalls wartet die Methode auf das Eingehen einer neuen Meldung, bis der angegebene Timeout überschritten wird.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>, die auf die erste Meldung in der Warteschlange verweist.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> entfernt, und gibt die Meldung an der aktuellen Cursorposition.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">Wenn der Cursor am Ende der Warteschlange befindet, wird diese Überladung der Methode wartet, bis eine Nachricht verfügbar ist oder das Intervall angegeben wird, indem die <ph id="ph1">`timeout`</ph> Parameter ist abgelaufen.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Bei der Arbeit mit Transaktionswarteschlangen ein Rollback einer Transaktion bewirkt, dass alle Nachrichten, die durch einen Aufruf von entfernt <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> an die Warteschlange zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">Die Entfernung ist nicht nicht rückgängig gemacht werden, bevor die Transaktion ein Commit ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Bei Verwendung von Warteschlange Journaling Entfernen der Nachricht wird eine Kopie, die in der Journalwarteschlange gespeichert sind, ebenso wie die <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> Klasse <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> Methode hat.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Nachricht verschoben.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Sie müssen keine Aufrufen <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> nach dem Aufruf <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The value specified for the <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is invalid.</source>
          <target state="translated">Der für den <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>-Parameter angegebene Wert ist ungültig.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph>-Parameter ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The timeout has expired.</source>
          <target state="translated">Der Timeout wurde überschritten.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The interval of time to wait for the message to be removed.</source>
          <target state="translated">Die Zeitspanne, in der die zu entfernende Meldung eingehen muss.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> values, describing the type of transaction context to associate with the message.</source>
          <target state="translated">Einer der <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph>-Werte, der den Typ des Transaktionskontexts beschreibt, der der Meldung zugeordnet werden soll.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Removes the current message from a queue and returns the message to the calling application.</source>
          <target state="translated">Entfernt die aktuelle Meldung aus einer Warteschlange und gibt die Meldung an die aufrufende Anwendung zurück.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">Wenn eine vorhandene Meldung entfernt werden kann, wird diese von der Methode sofort zurückgegeben.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">Andernfalls wartet die Methode auf das Eingehen einer neuen Meldung, bis der angegebene Timeout überschritten wird.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>, die auf die erste Meldung in der Warteschlange verweist.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id="ph2">`transactionType`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> entfernt, und gibt die Meldung an der aktuellen Cursorposition, verwenden einen bereits verwendeten Transaktionskontext durch definiert die <ph id="ph2">`transactionType`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">Wenn der Cursor am Ende der Warteschlange befindet, wird diese Überladung der Methode wartet, bis eine Nachricht verfügbar ist oder das Intervall angegeben wird, indem die <ph id="ph1">`timeout`</ph> Parameter ist abgelaufen.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Automatic`</ph> for the <ph id="ph2">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</source>
          <target state="translated">Geben Sie <ph id="ph1">`Automatic`</ph> für die <ph id="ph2">`transactionType`</ph> Parameter an, wenn es bereits ein externer Transaktionskontext ist angefügt wird, an den Thread, die Sie zum Empfangen der Nachricht verwenden möchten.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Single`</ph> if you want to receive the message as a single internal transaction.</source>
          <target state="translated">Geben Sie <ph id="ph1">`Single`</ph> , wenn die Nachricht als eine interne Transaktion empfangen werden sollen.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>You can specify <ph id="ph1">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.</source>
          <target state="translated">Sie können angeben, <ph id="ph1">`None`</ph> Wenn eine Nachricht von einer Transaktionswarteschlange außerhalb eines Transaktionskontexts zu empfangen werden sollen.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Bei Verwendung von Warteschlange Journaling Entfernen der Nachricht wird eine Kopie, die in der Journalwarteschlange gespeichert sind, ebenso wie die <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> Klasse <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> Methode hat.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Bei der Arbeit mit Transaktionswarteschlangen ein Rollback einer Transaktion bewirkt, dass alle Nachrichten, die durch einen Aufruf von entfernt <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> an die Warteschlange zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">Die Entfernung ist nicht nicht rückgängig gemacht werden, bevor die Transaktion ein Commit ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Nachricht verschoben.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Sie müssen keine Aufrufen <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> nach dem Aufruf <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The value specified for the <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is invalid.</source>
          <target state="translated">Der für den <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>-Parameter angegebene Wert ist ungültig.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The timeout has expired.</source>
          <target state="translated">Der Timeout wurde überschritten.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph> parameter is not one of the <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> members.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph>-Parameter ist keiner der <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph>-Member.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>Resets the current enumerator so it points to the head of the queue.</source>
          <target state="translated">Setzt den aktuellen Enumerator auf den Anfang der Warteschlange zurück.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>An enumerator can only move in a forward direction.</source>
          <target state="translated">Ein Enumerator kann nur vorwärts verschoben werden.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>Use this method to start over at the beginning of the queue.</source>
          <target state="translated">Verwenden Sie diese Methode am Anfang der Warteschlangenobjekts beginnen.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>After calling <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph>, the cursor points to the first message.</source>
          <target state="translated">Nach dem Aufruf <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph>, der Cursor auf die erste Nachricht verweist.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>You do not need to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> to move the cursor forward to the first message in the queue.</source>
          <target state="translated">Sie müssen nicht aufrufen <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> nach dem Aufruf <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> auf den Cursor in die erste Nachricht in der Warteschlange zu verschieben.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the message at the current cursor position.</source>
          <target state="translated">Gibt eine <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> zurück, die auf die Meldung an der aktuellen Cursorposition verweist.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the message at the current cursor position.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>, die auf die Meldung an der aktuellen Cursorposition verweist.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
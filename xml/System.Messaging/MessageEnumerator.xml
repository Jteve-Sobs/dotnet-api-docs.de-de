<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4096f6ae9125cd6cd98cc1be09adad375d1ea992" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37647572" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="83f61-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span>
      <span class="sxs-lookup">
        <span data-stu-id="83f61-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-102">Verwendung <xref:System.Messaging.MessageEnumerator> dynamische Interaktion mit Nachrichten in einer Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="83f61-102">Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue.</span></span> <span data-ttu-id="83f61-103">Methoden zur Verfügung, über die <xref:System.Messaging.MessageQueue> Klasse zurückgeben kann eine <xref:System.Messaging.MessageEnumerator> verweist auf eine dynamische Liste von Nachrichten in der Warteschlange oder ein Array, das eine Kopie zu einem angegebenen Zeitpunkt – eine Momentaufnahme - der Warteschlange enthält, die zum Zeitpunkt der angegebenen Methode aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="83f61-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="83f61-104">Im Gegensatz zu der eine statische Momentaufnahme kann ein Enumerator die Auflistung geändert werden.</span><span class="sxs-lookup"><span data-stu-id="83f61-104">Unlike a static snapshot, an enumerator allows you to modify the collection.</span></span> <span data-ttu-id="83f61-105">Mit einem <xref:System.Messaging.MessageEnumerator>, können Sie Nachrichten aus der Warteschlange entfernen und in der Warteschlange wird die Änderung sofort übernommen.</span><span class="sxs-lookup"><span data-stu-id="83f61-105">Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.</span></span>  
  
 <span data-ttu-id="83f61-106">Ein Enumerator wird nicht die Nachrichten aus der Warteschlange entfernt, beim Abfragen der Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="83f61-106">An enumerator does not remove the messages from the queue when it queries the queue.</span></span> <span data-ttu-id="83f61-107">Gibt Informationen über die Nachricht an der aktuellen Cursorposition zurück, aber es bleibt die Nachricht in der Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="83f61-107">It returns information about the message at the current cursor position, but it leaves the message in the queue.</span></span>  
  
 <span data-ttu-id="83f61-108">Ein <xref:System.Messaging.MessageEnumerator> wird ein Cursor, an den Anfang einer dynamischen Liste initialisiert.</span><span class="sxs-lookup"><span data-stu-id="83f61-108">A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="83f61-109">Die Reihenfolge der Liste ist identisch mit der Reihenfolge der Nachrichten in der Warteschlange nach Nachrichtenpriorität.</span><span class="sxs-lookup"><span data-stu-id="83f61-109">The list order is the same as the order of the messages in the queue, according to message priority.</span></span> <span data-ttu-id="83f61-110">Sie können den Cursor in die erste Nachricht in die Warteschlange verschieben, durch den Aufruf <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="83f61-110">You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="83f61-111">Nachdem der Enumerator initialisiert wurde, können Sie <xref:System.Messaging.MessageEnumerator.MoveNext%2A> vorwärts zu durchlaufen, bis die verbleibenden Nachrichten.</span><span class="sxs-lookup"><span data-stu-id="83f61-111">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages.</span></span> <span data-ttu-id="83f61-112">Sie können angeben, ob warten, bis eine Nachricht verfügbar sind, übergeben Sie einen Timeout in der <xref:System.Messaging.MessageEnumerator.MoveNext%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="83f61-112">You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.</span></span>  
  
 <span data-ttu-id="83f61-113">Da der Enumerator dynamisch ist, kann eine Nachricht, die angefügt wird, außerhalb der aktuellen Cursorposition (z. B. aufgrund mit niedriger Priorität), zugegriffen werden vom Enumerator.</span><span class="sxs-lookup"><span data-stu-id="83f61-113">Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</span></span> <span data-ttu-id="83f61-114">Eine Meldung, die eingefügt wird, bevor der aktuellen Cursorposition nicht zugegriffen werden kann.</span><span class="sxs-lookup"><span data-stu-id="83f61-114">A message that is inserted before the cursor's current position cannot be accessed.</span></span> <span data-ttu-id="83f61-115">Es ist nicht möglich, auf eine <xref:System.Messaging.MessageEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="83f61-115">It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>.</span></span> <span data-ttu-id="83f61-116">Ein Cursor kann nur vorwärts bewegt werden.</span><span class="sxs-lookup"><span data-stu-id="83f61-116">A cursor allows forward-only movement.</span></span> <span data-ttu-id="83f61-117">Die <xref:System.Messaging.MessageEnumerator.Reset%2A> Methode können Sie den Cursor wieder an den Anfang der Warteschlange zu platzieren.</span><span class="sxs-lookup"><span data-stu-id="83f61-117">The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="83f61-118">Instanzen von <xref:System.Messaging.MessageEnumerator> für eine Warteschlange sind voneinander unabhängig.</span><span class="sxs-lookup"><span data-stu-id="83f61-118">Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently.</span></span> <span data-ttu-id="83f61-119">Erstellen Sie zwei <xref:System.Messaging.MessageEnumerator> Instanzen, die für dieselbe Warteschlange gelten.</span><span class="sxs-lookup"><span data-stu-id="83f61-119">You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue.</span></span> <span data-ttu-id="83f61-120">Die Änderungen, dass ein <xref:System.Messaging.MessageEnumerator> nutzt, um die Nachrichten in der Warteschlange werden sofort in eine zweite Enumerator Wenn der zweite Enumerator vor dem ersten positioniert ist.</span><span class="sxs-lookup"><span data-stu-id="83f61-120">The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</span></span> <span data-ttu-id="83f61-121">Jedoch, wenn zwei Enumeratoren die gleiche Position haben und einer von ihnen die Nachricht an dieser Position entfernt, eine Ausnahme wird ausgelöst, wenn der Enumerator andere versucht, den Wert der abzurufenden der <xref:System.Messaging.MessageEnumerator.Current%2A> Eigenschaft für die Nachricht bereits gelöschte.</span><span class="sxs-lookup"><span data-stu-id="83f61-121">However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83f61-122">Bei der Erstellung einer Instanz von <xref:System.Messaging.MessageQueue> mit <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> festgelegt `true`, keiner anderen Anwendung kann die Nachrichten in Ihrem Enumerator ändern, während Sie die Verbindung mit der Warteschlange haben.</span><span class="sxs-lookup"><span data-stu-id="83f61-122">If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83f61-123">Im folgenden Beispiel ruft eine dynamische Liste von Nachrichten in einer Warteschlange ab und zählt alle Nachrichten mit der <xref:System.Messaging.Message.Priority%2A> -Eigenschaftensatz auf <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="83f61-123">The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83f61-124">Frees the resources associated with the enumerator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-124">Frees the resources associated with the enumerator.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-125">Das Betriebssystem behält ein geöffnetes Handle an die Warteschlange, während der Lebensdauer des Cursors.</span><span class="sxs-lookup"><span data-stu-id="83f61-125">The operating system retains an open handle to the queue during the lifetime of the cursor.</span></span> <span data-ttu-id="83f61-126">Wenn Sie die Arbeit mit dem Enumerator abgeschlossen haben, rufen Sie <xref:System.Messaging.MessageEnumerator.Close%2A> , die dem Handle zugeordneten Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="83f61-126">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.Message" Usage="System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="83f61-127">Gets the current <see cref="T:System.Messaging.Message" /> that this enumerator points to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-127">Gets the current <see cref="T:System.Messaging.Message" /> that this enumerator points to.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="83f61-128">Die aktuelle Meldung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-128">The current message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-129">Wenn der Enumerator erstellt wird, zeigt es an den Anfang der Warteschlange, an einer Position vor der ersten Meldung.</span><span class="sxs-lookup"><span data-stu-id="83f61-129">When the enumerator is created, it points to the head of the queue, at a location before the first message.</span></span> <span data-ttu-id="83f61-130">In diesem Fall <xref:System.Messaging.MessageEnumerator.Current%2A> ist ungültig und löst eine Ausnahme aus, wenn auf sie zugegriffen wird.</span><span class="sxs-lookup"><span data-stu-id="83f61-130">In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="83f61-131">Rufen Sie <xref:System.Messaging.MessageEnumerator.MoveNext%2A> zur Positionierung des Cursors auf die erste Nachricht in der Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="83f61-131">You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="83f61-132">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-132">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span>
          </span>
          <span data-ttu-id="83f61-133">The cursor is located before the first element of the message enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-133">The cursor is located before the first element of the message enumeration.</span>
          </span>
          <span data-ttu-id="83f61-134">-or-  You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned <see langword="false" /> (indicating the cursor is located after the last element of the message enumeration.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-134">-or-  You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned <see langword="false" /> (indicating the cursor is located after the last element of the message enumeration.)</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="83f61-135">The message the enumerator is currently pointing to no longer exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-135">The message the enumerator is currently pointing to no longer exists.</span>
          </span>
          <span data-ttu-id="83f61-136">It might have been deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-136">It might have been deleted.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.CursorHandle : nativeint" Usage="System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="83f61-137">Gets the native Message Queuing cursor handle used to browse messages in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-137">Gets the native Message Queuing cursor handle used to browse messages in the queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="83f61-138">Das systemeigene Cursorhandle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-138">The native cursor handle.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-139">Diese Eigenschaft enthält das systemeigene Handle für die Enumeration.</span><span class="sxs-lookup"><span data-stu-id="83f61-139">This property contains the native handle to the enumeration.</span></span> <span data-ttu-id="83f61-140">Wenn Sie die Arbeit mit dem Enumerator abgeschlossen haben, rufen Sie <xref:System.Messaging.MessageEnumerator.Close%2A> dieser Ressource freigibt.</span><span class="sxs-lookup"><span data-stu-id="83f61-140">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="83f61-141">The handle does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-141">The handle does not exist.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="83f61-142">Releases the resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-142">Releases the resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83f61-143">Releases all resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-143">Releases all resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-144">Aufrufen von <xref:System.Messaging.MessageEnumerator.Dispose%2A> können die Ressourcen, die von verwendet die <xref:System.Messaging.MessageEnumerator> , für andere Zwecke verschoben werden.</span><span class="sxs-lookup"><span data-stu-id="83f61-144">Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="83f61-145">Weitere Informationen zu <xref:System.Messaging.MessageEnumerator.Dispose%2A>, finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="83f61-145">For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="83f61-146">
            <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-146">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83f61-147">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageEnumerator" /> and optionally releases the managed resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-147">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageEnumerator" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-148">Diese Methode wird aufgerufen, von der öffentlichen <xref:System.Messaging.MessageEnumerator.Dispose%2A> Methode und die <xref:System.Object.Finalize%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="83f61-148">This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="83f61-149">`Dispose()` Ruft die geschützte `Dispose(Boolean)` -Methode mit dem `disposing` Parametersatz zu `true`.</span><span class="sxs-lookup"><span data-stu-id="83f61-149">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="83f61-150"><xref:System.Object.Finalize%2A> Ruft `Dispose` mit `disposing` festgelegt `false`.</span><span class="sxs-lookup"><span data-stu-id="83f61-150"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="83f61-151">Wenn der `disposing`-Parameter `true` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:System.Messaging.MessageEnumerator> verweist.</span><span class="sxs-lookup"><span data-stu-id="83f61-151">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references.</span></span> <span data-ttu-id="83f61-152">Diese Methode ruft die `Dispose()`-Methode aller Objekte auf, auf die verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="83f61-152">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="83f61-153">
            <para>
              <see langword="Dispose" /> kann von anderen Objekten mehrmals aufgerufen werden. Beim Überschreiben von <see langword="Dispose(Boolean)" /> müssen Sie darauf achten, nicht auf Objekte zu verweisen, die durch einen früheren Aufruf von <see langword="Dispose" /> freigegeben wurden. Weitere Informationen zur Implementierung <see langword="Dispose" />, finden Sie unter [Implementieren einer Dispose-Method](~/docs/standard/garbage-collection/implementing-dispose.md).  Weitere Informationen zu <see langword="Dispose" /> und <see langword="Finalize" />, finden Sie unter [Bereinigen von nicht verwalteten Resources](~/docs/standard/garbage-collection/unmanaged.md) und [Überschreiben der Finalize-Methode.] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-153">
              <para>
                <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="83f61-154">Advances the enumerator to the next message in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-154">Advances the enumerator to the next message in the queue.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83f61-155">Advances the enumerator to the next message in the queue, if one is currently available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-155">Advances the enumerator to the next message in the queue, if one is currently available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83f61-156">
            <see langword="true" /> if the enumerator was succesfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-156">
              <see langword="true" /> if the enumerator was succesfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-157">Diese Überladung wird sofort zurückgegeben, wenn keine Meldung in der Warteschlange vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="83f61-157">This overload returns immediately if there is no message in the queue.</span></span> <span data-ttu-id="83f61-158">Es gibt eine andere Überladung, die wartet, eine angegebene <xref:System.TimeSpan> für eine Nachricht eintrifft.</span><span class="sxs-lookup"><span data-stu-id="83f61-158">There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.</span></span>  
  
 <span data-ttu-id="83f61-159">Wenn eine Nachricht nicht derzeit verfügbar ist, weil die Warteschlange leer ist oder Sie hinter dem letzten Element in der Auflistung verschoben haben <xref:System.Messaging.MessageEnumerator.MoveNext%2A> gibt `false` an die aufrufende Methode.</span><span class="sxs-lookup"><span data-stu-id="83f61-159">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method.</span></span>  
  
 <span data-ttu-id="83f61-160">Bei der Erstellung einer konzeptionell Enumerator wird vor der ersten Nachricht der Warteschlange und der erste Aufruf <xref:System.Messaging.MessageEnumerator.MoveNext%2A> zeigt die erste Nachricht der Warteschlange an.</span><span class="sxs-lookup"><span data-stu-id="83f61-160">Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="83f61-161">An exception specific to Message Queuing was thrown.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-161">An exception specific to Message Queuing was thrown.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.MoveNext : TimeSpan -&gt; bool" Usage="messageEnumerator.MoveNext timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="83f61-162">The <see cref="T:System.TimeSpan" /> to wait for a message to be available if the enumerator is positioned at the end of the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-162">The <see cref="T:System.TimeSpan" /> to wait for a message to be available if the enumerator is positioned at the end of the queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83f61-163">Advances the enumerator to the next message in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-163">Advances the enumerator to the next message in the queue.</span>
          </span>
          <span data-ttu-id="83f61-164">If the enumerator is positioned at the end of the queue, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> waits until a message is available or the given timeout expires.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-164">If the enumerator is positioned at the end of the queue, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> waits until a message is available or the given timeout expires.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83f61-165">
            <see langword="true" /> if the enumerator successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <paramref name="timeout" /> parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-165">
              <see langword="true" /> if the enumerator successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <paramref name="timeout" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-166">Diese Überladung wartet, wenn keine Meldung in der Warteschlange vorhanden ist oder wenn der Cursor am Ende der Warteschlange erreicht hat.</span><span class="sxs-lookup"><span data-stu-id="83f61-166">This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</span></span> <span data-ttu-id="83f61-167">Wenn eine Nachricht nicht derzeit verfügbar ist, weil die Warteschlange leer ist oder Sie hinter dem letzten Element in der Auflistung verschoben haben <xref:System.Messaging.MessageEnumerator.MoveNext%2A> das angegebene Timeout.</span><span class="sxs-lookup"><span data-stu-id="83f61-167">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.</span></span>  
  
 <span data-ttu-id="83f61-168">Wenn der Cursor ist bereits am Ende der Warteschlange ist <xref:System.Messaging.MessageEnumerator.MoveNext%2A> nur gibt `true` bei Empfang die neue Nachricht innerhalb des angegebenen Zeitintervalls derzeit hat eine niedrigere Priorität als alle Nachrichten in der Warteschlange und wird am Ende der Warteschlange platziert.</span><span class="sxs-lookup"><span data-stu-id="83f61-168">If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</span></span> <span data-ttu-id="83f61-169">Eine Überladung ohne Parameter gibt sofort zurück, wenn keine weiteren Nachrichten in der Warteschlange befinden.</span><span class="sxs-lookup"><span data-stu-id="83f61-169">An overload with no parameter returns immediately if no further messages are in the queue.</span></span>  
  
 <span data-ttu-id="83f61-170">Bei der Erstellung einer konzeptionell Enumerator wird vor der ersten Nachricht von der Enumeration und dem ersten Aufruf von <xref:System.Messaging.MessageEnumerator.MoveNext%2A> die erste Meldung in der Enumeration in der Ansicht.</span><span class="sxs-lookup"><span data-stu-id="83f61-170">Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="83f61-171">The value specified for the timeout parameter is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-171">The value specified for the timeout parameter is invalid.</span>
          </span>
          <span data-ttu-id="83f61-172">It might represent a negative number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-172">It might represent a negative number.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="83f61-173">An exception specific to Message Queuing was thrown.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-173">An exception specific to Message Queuing was thrown.</span>
          </span>
          <span data-ttu-id="83f61-174">-or-  The timeout has expired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-174">-or-  The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="83f61-175">Removes the current message from the queue and returns the message to the calling application.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-175">Removes the current message from the queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="83f61-176">Removing the message deletes it from the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-176">Removing the message deletes it from the queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-177">Für diese Überladungen beschriebene Verhalten gilt nur, wenn die <xref:System.Messaging.MessageEnumerator> Instanz abgerufen wird, mithilfe der <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span><span class="sxs-lookup"><span data-stu-id="83f61-177">The behavior described for these overloads is applicable only if the <xref:System.Messaging.MessageEnumerator> instance is retrieved by using the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span></span> <span data-ttu-id="83f61-178">Verwenden Sie keine <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> zum Abrufen einer Instanz von <xref:System.Messaging.MessageEnumerator> wie diese Methode wurde als veraltet markiert.</span><span class="sxs-lookup"><span data-stu-id="83f61-178">Do not use <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> to retrieve an instance of <xref:System.Messaging.MessageEnumerator> as this method has been deprecated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : unit -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83f61-179">Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-179">Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="83f61-180">There is no timeout specified for a message to arrive in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-180">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83f61-181">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-181">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-182"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> entfernt, und gibt die Meldung an der aktuellen Cursorposition zurück.</span><span class="sxs-lookup"><span data-stu-id="83f61-182"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span>  
  
 <span data-ttu-id="83f61-183">Wenn Sie Warteschlange Journaling verwenden, Entfernen der Nachricht führt dazu, dass eine Kopie in der Journalwarteschlange gespeichert werden sollen, wie die <xref:System.Messaging.MessageQueue> Klasse <xref:System.Messaging.MessageQueue.Receive%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="83f61-183">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="83f61-184">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Meldung verschoben.</span><span class="sxs-lookup"><span data-stu-id="83f61-184">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="83f61-185">Sie müssen keine Aufrufen <xref:System.Messaging.MessageEnumerator.MoveNext%2A> nach dem Aufruf <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="83f61-185">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="83f61-186">Wenn Sie diese Überladung für eine transaktionale Warteschlange aufrufen, erstellt das Message Queuing eine einzelne internen Transaktion aus.</span><span class="sxs-lookup"><span data-stu-id="83f61-186">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">
          <span data-ttu-id="83f61-187">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction in which the message will be removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-187">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction in which the message will be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83f61-188">Removes the current message from a transactional queue and returns the message to the calling application.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-188">Removes the current message from a transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="83f61-189">There is no timeout specified for a message to arrive in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-189">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83f61-190">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-190">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-191"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> entfernt, und gibt die Meldung an die Position des Cursors, mithilfe von definierten internen Transaktionskontext die `transaction` Parameter.</span><span class="sxs-lookup"><span data-stu-id="83f61-191"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter.</span></span>  
  
 <span data-ttu-id="83f61-192">Wenn Sie Warteschlange Journaling verwenden, Entfernen der Nachricht führt dazu, dass eine Kopie in der Journalwarteschlange gespeichert werden sollen, wie die <xref:System.Messaging.MessageQueue> Klasse <xref:System.Messaging.MessageQueue.Receive%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="83f61-192">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="83f61-193">Bei der Arbeit mit Transaktionswarteschlangen ein Rollback einer Transaktion führt dazu, dass alle Nachrichten, die durch einen Aufruf von entfernt <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> an die Warteschlange zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="83f61-193">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="83f61-194">Die Entfernung ist nicht nicht rückgängig gemacht werden, bis die Transaktion ein Commit ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="83f61-194">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="83f61-195">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Meldung verschoben.</span><span class="sxs-lookup"><span data-stu-id="83f61-195">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="83f61-196">Sie müssen keine Aufrufen <xref:System.Messaging.MessageEnumerator.MoveNext%2A> nach dem Aufruf <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="83f61-196">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="83f61-197">The <paramref name="transaction" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-197">The <paramref name="transaction" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType">
          <span data-ttu-id="83f61-198">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-198">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83f61-199">Removes the current message from a queue and returns the message to the calling application.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-199">Removes the current message from a queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="83f61-200">There is no timeout specified for a message to arrive in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-200">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83f61-201">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-201">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-202"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> entfernt, und gibt die Meldung an die Position des Cursors, mithilfe von definierten Transaktionskontext der `transactionType` Parameter.</span><span class="sxs-lookup"><span data-stu-id="83f61-202"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span>  
  
 <span data-ttu-id="83f61-203">Geben Sie `Automatic` für die `transactionType` -Parameters, wenn es bereits ein externer Transaktionskontext ist an den Thread angefügt, die Sie zum Empfangen der Nachricht verwenden möchten.</span><span class="sxs-lookup"><span data-stu-id="83f61-203">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="83f61-204">Geben Sie `Single` sollten Sie die Nachricht als eine interne Transaktion empfangen.</span><span class="sxs-lookup"><span data-stu-id="83f61-204">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="83f61-205">Sie können angeben, `None` sollten Sie eine Nachricht aus einer transaktionalen Warteschlange außerhalb eines Transaktionskontexts zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="83f61-205">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="83f61-206">Wenn Sie Warteschlange Journaling verwenden, Entfernen der Nachricht führt dazu, dass eine Kopie in der Journalwarteschlange gespeichert werden sollen, wie die <xref:System.Messaging.MessageQueue> Klasse <xref:System.Messaging.MessageQueue.Receive%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="83f61-206">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="83f61-207">Bei der Arbeit mit Transaktionswarteschlangen ein Rollback einer Transaktion führt dazu, dass alle Nachrichten, die durch einen Aufruf von entfernt <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> an die Warteschlange zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="83f61-207">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="83f61-208">Die Entfernung ist nicht nicht rückgängig gemacht werden, bis die Transaktion ein Commit ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="83f61-208">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="83f61-209">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Meldung verschoben.</span><span class="sxs-lookup"><span data-stu-id="83f61-209">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="83f61-210">Sie müssen keine Aufrufen <xref:System.Messaging.MessageEnumerator.MoveNext%2A> nach dem Aufruf <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="83f61-210">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="83f61-211">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-211">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="83f61-212">The interval of time to wait for a message to arrive in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-212">The interval of time to wait for a message to arrive in the queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83f61-213">Removes the current message from the queue and returns the message to the calling application.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-213">Removes the current message from the queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="83f61-214">If there is a message to remove, the method returns it immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-214">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="83f61-215">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-215">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83f61-216">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-216">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-217"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> entfernt, und gibt die Meldung an der aktuellen Cursorposition zurück.</span><span class="sxs-lookup"><span data-stu-id="83f61-217"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="83f61-218">Wenn der Cursor am Ende der Warteschlange befindet, wird diese Überladung der Methode wartet, bis eine Meldung verfügbar ist oder das Intervall angegeben wird, indem die `timeout` Parameter ist abgelaufen.</span><span class="sxs-lookup"><span data-stu-id="83f61-218">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="83f61-219">Wenn Sie Warteschlange Journaling verwenden, Entfernen der Nachricht führt dazu, dass eine Kopie in der Journalwarteschlange gespeichert werden sollen, wie die <xref:System.Messaging.MessageQueue> Klasse <xref:System.Messaging.MessageQueue.Receive%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="83f61-219">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="83f61-220">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Meldung verschoben.</span><span class="sxs-lookup"><span data-stu-id="83f61-220">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="83f61-221">Sie müssen keine Aufrufen <xref:System.Messaging.MessageEnumerator.MoveNext%2A> nach dem Aufruf <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="83f61-221">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="83f61-222">Wenn Sie diese Überladung für eine transaktionale Warteschlange aufrufen, erstellt das Message Queuing eine einzelne internen Transaktion aus.</span><span class="sxs-lookup"><span data-stu-id="83f61-222">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="83f61-223">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-223">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="83f61-224">The timeout has expired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-224">The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="83f61-225">The interval of time to wait for the message to be removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-225">The interval of time to wait for the message to be removed.</span>
          </span>
        </param>
        <param name="transaction">
          <span data-ttu-id="83f61-226">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction context for the message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-226">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction context for the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83f61-227">Removes the current message from a transactional queue and returns the message to the calling application.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-227">Removes the current message from a transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="83f61-228">If there is a message to remove, the method returns it immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-228">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="83f61-229">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-229">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83f61-230">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-230">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-231"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> entfernt, und gibt die Meldung an der aktuellen Cursorposition zurück.</span><span class="sxs-lookup"><span data-stu-id="83f61-231"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="83f61-232">Wenn der Cursor am Ende der Warteschlange befindet, wird diese Überladung der Methode wartet, bis eine Meldung verfügbar ist oder das Intervall angegeben wird, indem die `timeout` Parameter ist abgelaufen.</span><span class="sxs-lookup"><span data-stu-id="83f61-232">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="83f61-233">Bei der Arbeit mit Transaktionswarteschlangen ein Rollback einer Transaktion führt dazu, dass alle Nachrichten, die durch einen Aufruf von entfernt <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> an die Warteschlange zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="83f61-233">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="83f61-234">Die Entfernung ist nicht nicht rückgängig gemacht werden, bis die Transaktion ein Commit ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="83f61-234">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="83f61-235">Wenn Sie Warteschlange Journaling verwenden, Entfernen der Nachricht führt dazu, dass eine Kopie in der Journalwarteschlange gespeichert werden sollen, wie die <xref:System.Messaging.MessageQueue> Klasse <xref:System.Messaging.MessageQueue.Receive%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="83f61-235">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="83f61-236">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Meldung verschoben.</span><span class="sxs-lookup"><span data-stu-id="83f61-236">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="83f61-237">Sie müssen keine Aufrufen <xref:System.Messaging.MessageEnumerator.MoveNext%2A> nach dem Aufruf <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="83f61-237">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="83f61-238">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-238">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="83f61-239">The <paramref name="transaction" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-239">The <paramref name="transaction" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="83f61-240">The timeout has expired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-240">The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="83f61-241">The interval of time to wait for the message to be removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-241">The interval of time to wait for the message to be removed.</span>
          </span>
        </param>
        <param name="transactionType">
          <span data-ttu-id="83f61-242">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-242">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83f61-243">Removes the current message from a queue and returns the message to the calling application.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-243">Removes the current message from a queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="83f61-244">If there is a message to remove, the method returns it immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-244">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="83f61-245">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-245">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83f61-246">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-246">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-247"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> entfernt, und gibt die Meldung an die Position des Cursors, mithilfe von definierten Transaktionskontext der `transactionType` Parameter.</span><span class="sxs-lookup"><span data-stu-id="83f61-247"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="83f61-248">Wenn der Cursor am Ende der Warteschlange befindet, wird diese Überladung der Methode wartet, bis eine Meldung verfügbar ist oder das Intervall angegeben wird, indem die `timeout` Parameter ist abgelaufen.</span><span class="sxs-lookup"><span data-stu-id="83f61-248">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="83f61-249">Geben Sie `Automatic` für die `transactionType` -Parameters, wenn es bereits ein externer Transaktionskontext ist an den Thread angefügt, die Sie zum Empfangen der Nachricht verwenden möchten.</span><span class="sxs-lookup"><span data-stu-id="83f61-249">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="83f61-250">Geben Sie `Single` sollten Sie die Nachricht als eine interne Transaktion empfangen.</span><span class="sxs-lookup"><span data-stu-id="83f61-250">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="83f61-251">Sie können angeben, `None` sollten Sie eine Nachricht aus einer transaktionalen Warteschlange außerhalb eines Transaktionskontexts zu empfangen.</span><span class="sxs-lookup"><span data-stu-id="83f61-251">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="83f61-252">Wenn Sie Warteschlange Journaling verwenden, Entfernen der Nachricht führt dazu, dass eine Kopie in der Journalwarteschlange gespeichert werden sollen, wie die <xref:System.Messaging.MessageQueue> Klasse <xref:System.Messaging.MessageQueue.Receive%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="83f61-252">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="83f61-253">Bei der Arbeit mit Transaktionswarteschlangen ein Rollback einer Transaktion führt dazu, dass alle Nachrichten, die durch einen Aufruf von entfernt <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> an die Warteschlange zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="83f61-253">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="83f61-254">Die Entfernung ist nicht nicht rückgängig gemacht werden, bis die Transaktion ein Commit ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="83f61-254">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="83f61-255">Wenn Sie die aktuelle Nachricht entfernen, wird der Cursor auf die nächste Meldung verschoben.</span><span class="sxs-lookup"><span data-stu-id="83f61-255">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="83f61-256">Sie müssen keine Aufrufen <xref:System.Messaging.MessageEnumerator.MoveNext%2A> nach dem Aufruf <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="83f61-256">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="83f61-257">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-257">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="83f61-258">The timeout has expired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-258">The timeout has expired.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="83f61-259">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-259">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83f61-260">Resets the current enumerator so it points to the head of the queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-260">Resets the current enumerator so it points to the head of the queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83f61-261">Ein Enumerator kann nur vorwärts verschoben werden.</span><span class="sxs-lookup"><span data-stu-id="83f61-261">An enumerator can only move in a forward direction.</span></span> <span data-ttu-id="83f61-262">Verwenden Sie diese Methode am Anfang der Warteschlange beginnen.</span><span class="sxs-lookup"><span data-stu-id="83f61-262">Use this method to start over at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="83f61-263">Nach dem Aufruf <xref:System.Messaging.MessageEnumerator.Reset%2A>, zeigt der Cursor auf die erste Nachricht.</span><span class="sxs-lookup"><span data-stu-id="83f61-263">After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message.</span></span> <span data-ttu-id="83f61-264">Sie müssen nicht aufrufen <xref:System.Messaging.MessageEnumerator.MoveNext%2A> nach dem Aufruf <xref:System.Messaging.MessageEnumerator.Reset%2A> auf den Cursor auf die erste Meldung in der Warteschlange zu setzen.</span><span class="sxs-lookup"><span data-stu-id="83f61-264">You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="83f61-265">Returns a <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-265">Returns a <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="83f61-266">Ein <see cref="T:System.Messaging.Message" /> , die auf die Nachricht an der aktuellen Cursorposition verweist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83f61-266">A <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
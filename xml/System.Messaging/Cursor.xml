<Type Name="Cursor" FullName="System.Messaging.Cursor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="35c2f3c29f1472f5e7ddb2f19ad2fe3c84a87424" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37647377" /></Metadata><TypeSignature Language="C#" Value="public sealed class Cursor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Cursor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.Cursor" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Cursor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Cursor sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type Cursor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="0ff8b-101">Beim Lesen der Meldungen einer Warteschlange wird mit einem <see cref="T:System.Messaging.Cursor" /> eine bestimmte Position in dieser <see cref="T:System.Messaging.MessageQueue" /> beizubehalten.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-101">A <see cref="T:System.Messaging.Cursor" /> is used to maintain a specific location in a <see cref="T:System.Messaging.MessageQueue" /> when reading the queue's messages.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ff8b-102">Zum Abrufen eines Cursors für eine <xref:System.Messaging.MessageQueue>, rufen Sie die <xref:System.Messaging.MessageQueue.CreateCursor%2A> Methode für diese Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-102">To get a cursor for a <xref:System.Messaging.MessageQueue>, call the <xref:System.Messaging.MessageQueue.CreateCursor%2A> method for that queue.</span></span>  
  
 <span data-ttu-id="0ff8b-103">Ein <xref:System.Messaging.Cursor> wird verwendet, beispielsweise mit den Methoden <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> und <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> beim Lesen von Nachrichten, die nicht am Anfang der Warteschlange werden sollen.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-103">A <xref:System.Messaging.Cursor> is used with such methods as <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> and <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> when you need to read messages that are not at the front of the queue.</span></span> <span data-ttu-id="0ff8b-104">Dies umfasst das Lesen von Nachrichten synchron oder asynchron.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-104">This includes reading messages synchronously or asynchronously.</span></span> <span data-ttu-id="0ff8b-105">Cursor müssen nicht verwendet werden, um nur die erste Nachricht in einer Warteschlange lesen.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-105">Cursors do not need to be used to read only the first message in a queue.</span></span>  
  
 <span data-ttu-id="0ff8b-106">Beim Lesen von Nachrichten innerhalb einer Transaktion wird Message Queuing nicht Bewegung des Cursors zurückgesetzt, wenn die Transaktion abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-106">When reading messages within a transaction, Message Queuing does not roll back cursor movement if the transaction is aborted.</span></span> <span data-ttu-id="0ff8b-107">Nehmen wir beispielsweise an, dass eine Warteschlange mit zwei Meldungen A1 und A2 vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-107">For example, suppose there is a queue with two messages, A1 and A2.</span></span> <span data-ttu-id="0ff8b-108">Wenn Sie die Meldung A1 in einer Transaktion entfernen, verschiebt das Message Queuing den Cursor Nachricht A2.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-108">If you remove message A1 while in a transaction, Message Queuing moves the cursor to message A2.</span></span> <span data-ttu-id="0ff8b-109">Wenn aus irgendeinem Grund die Transaktion abgebrochen wird, bleibt jedoch Nachricht A1 wieder in die Warteschlange, aber der Cursor wird eingefügt. zeigen Sie auf die Nachricht A2.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-109">However, if the transaction is aborted for any reason, message A1 is inserted back into the queue but the cursor remains pointing at message A2.</span></span>  
  
 <span data-ttu-id="0ff8b-110">Rufen Sie zum Schließen des Cursors <xref:System.Messaging.Cursor.Close%2A>.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-110">To close the cursor, call <xref:System.Messaging.Cursor.Close%2A>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Cursor.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="cursor.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0ff8b-111">Schließt den Cursor und ermöglicht es Message Queuing, die zugeordneten Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-111">Closes the cursor, allowing Message Queuing to release the associated resources.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Cursor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cursor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0ff8b-112">Gibt alle vom <see cref="T:System.Messaging.Cursor" /> verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="0ff8b-112">Releases all resources used by the <see cref="T:System.Messaging.Cursor" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Cursor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Cursor.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Cursor ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="cursor.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
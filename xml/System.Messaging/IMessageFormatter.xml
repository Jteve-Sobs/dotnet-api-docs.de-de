<Type Name="IMessageFormatter" FullName="System.Messaging.IMessageFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f7618f81cc46e64fd1db7e68c55c2b8546a1ab34" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86810986" /></Metadata><TypeSignature Language="C#" Value="public interface IMessageFormatter : ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMessageFormatter implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.IMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMessageFormatter&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMessageFormatter : ICloneable" />
  <TypeSignature Language="F#" Value="type IMessageFormatter = interface&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageFormatterConverter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageFormatterConverter))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Serialisiert bzw. deserialisiert Objekte aus dem Text einer Message Queuing-Meldung.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung eine Nachricht mithilfe einer Instanz der-Klasse an die Warteschlange sendet <xref:System.Messaging.MessageQueue> , serialisiert der Formatierer das Objekt (das eine Instanz einer beliebigen Klasse sein kann) in einen Stream und fügt es in den Nachrichtentext ein. Beim Lesen aus einer Warteschlange mit einem <xref:System.Messaging.MessageQueue> deserialisiert der Formatierer die Nachrichten Daten in die- <xref:System.Messaging.Message.Body%2A> Eigenschaft eines <xref:System.Messaging.Message> .  
  
 <xref:System.Messaging.BinaryMessageFormatter> und <xref:System.Messaging.ActiveXMessageFormatter> bieten einen schnelleren Durchsatz als <xref:System.Messaging.XmlMessageFormatter> . <xref:System.Messaging.ActiveXMessageFormatter>Ermöglicht die Interoperabilität mit Visual Basic 6,0 Message Queuing-Anwendungen. Der <xref:System.Messaging.XmlMessageFormatter> ist lose gekoppelt, d. h., der Server und der Client können den Typ, der unabhängig gesendet und empfangen wird, versieren.  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Messaging.MessageQueue.Formatter" />
    <altmember cref="P:System.Messaging.Message.Formatter" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.XmlMessageFormatter" />
  </Docs>
  <Members>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanRead (message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool" Usage="iMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">Die zu untersuchende <see cref="T:System.Messaging.Message" />.</param>
        <summary>Bestimmt bei der Implementierung in einer Klasse, ob das Formatierungsprogramm den Inhalt der Meldung deserialisieren kann.</summary>
        <returns><see langword="true" />, wenn das Formatierungsprogramm die Meldung deserialisieren kann, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (message As Message) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj" Usage="iMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">Die zu deserialisierende <see cref="T:System.Messaging.Message" />.</param>
        <summary>Liest bei Implementierung in einer Klasse den Inhalt aus der angegebenen Meldung und erstellt ein Objekt mit Daten aus der Meldung.</summary>
        <returns>Die deserialisierte Meldung.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (message As Message, obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit" Usage="iMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">Die <see cref="T:System.Messaging.Message" />, die das serialisierte Objekt aufnehmen soll.</param>
        <param name="obj">Das Objekt, das in die Nachricht serialisiert werden soll.</param>
        <summary>Serialisiert bei Implementierung in einer Klasse ein Objekt in den Text der Meldung.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>

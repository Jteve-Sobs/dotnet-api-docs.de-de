<Type Name="ActiveXMessageFormatter" FullName="System.Messaging.ActiveXMessageFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="faadf8481cd3fb72c4c4e7cd4f515c7c94f12924" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37647416" /></Metadata><TypeSignature Language="C#" Value="public class ActiveXMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ActiveXMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.ActiveXMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class ActiveXMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ActiveXMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type ActiveXMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="9ad81-101">Serialisiert bzw. deserialisiert primitive Datentypen und andere Objekte aus oder in den Text einer Message Queuing-Meldung. Dabei wird ein Format verwendet, das mit der ActiveX-Komponente von MSMQ kompatibel ist.</span><span class="sxs-lookup"><span data-stu-id="9ad81-101">Serializes or deserializes primitive data types and other objects to or from the body of a Message Queuing message, using a format that is compatible with the MSMQ ActiveX Component.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ad81-102">Die <xref:System.Messaging.ActiveXMessageFormatter> ist kompatibel mit Nachrichten, die mithilfe von Message Queuing-COM-Komponenten, die Interoperabilität mit Anwendungen, die die MSMQ-COM-Steuerelement zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="9ad81-102">The <xref:System.Messaging.ActiveXMessageFormatter> is compatible with messages sent using Message Queuing COM components, allowing interoperability with applications that use the MSMQ COM control.</span></span>  
  
 <span data-ttu-id="9ad81-103">Die <xref:System.Messaging.ActiveXMessageFormatter> serialisieren kann, die meisten primitiven als auch Objekte, implementieren die `IPersistStream` OLE-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="9ad81-103">The <xref:System.Messaging.ActiveXMessageFormatter> can serialize most primitives, as well as objects that implement the `IPersistStream` OLE interface.</span></span> <span data-ttu-id="9ad81-104">Der gleiche Satz von primitiven deserialisieren kann, sondern erfordert weitere Aufwand beim Deserialisieren der ein COM-Objekt (z. B. ein Objekt mit Visual Basic 6.0 erstellt), die implementiert `IPersistStream`.</span><span class="sxs-lookup"><span data-stu-id="9ad81-104">It can deserialize the same set of primitives, but requires further effort when deserializing a COM object (for example, an object created using Visual Basic 6.0) that implements `IPersistStream`.</span></span> <span data-ttu-id="9ad81-105">Das zu deserialisierende Objekt muss im Arbeitsspeicher durch das Objekt zuerst in einer .NET Framework-Anwendung importieren.</span><span class="sxs-lookup"><span data-stu-id="9ad81-105">The object to deserialize must be in memory by first importing the object into a .NET Framework application.</span></span>  
  
 <span data-ttu-id="9ad81-106">Wenn eine Anwendung sendet eine Nachricht an die Warteschlange mithilfe einer Instanz von der <xref:System.Messaging.MessageQueue> -Klasse, das Formatierungsprogramm serialisiert das Objekt in einen Datenstrom und fügt sie in den Nachrichtentext ein.</span><span class="sxs-lookup"><span data-stu-id="9ad81-106">When an application sends a message to the queue using an instance of the <xref:System.Messaging.MessageQueue> class, the formatter serializes the object into a stream and inserts it into the message body.</span></span> <span data-ttu-id="9ad81-107">Beim Lesen aus einer Warteschlange eine <xref:System.Messaging.MessageQueue>, deserialisiert die Nachrichtendaten in das Formatierungsprogramm die <xref:System.Messaging.Message.Body%2A> Eigenschaft eine <xref:System.Messaging.Message>.</span><span class="sxs-lookup"><span data-stu-id="9ad81-107">When reading from a queue using a <xref:System.Messaging.MessageQueue>, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.</span></span>  
  
 <span data-ttu-id="9ad81-108">ActiveX-Serialisierung ist sehr kompakt. das macht mithilfe der <xref:System.Messaging.ActiveXMessageFormatter> und MSMQ COM Steuern der Serialisierung eine sehr schnelle Methode.</span><span class="sxs-lookup"><span data-stu-id="9ad81-108">ActiveX serialization is very compact, which makes using the <xref:System.Messaging.ActiveXMessageFormatter> and MSMQ COM control a very fast method of serialization.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActiveXMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActiveXMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ad81-109">Initialisiert eine neue Instanz der <see cref="T:System.Messaging.ActiveXMessageFormatter" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="9ad81-109">Initializes a new instance of the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="activeXMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="9ad81-110">Die zu untersuchende <see cref="T:System.Messaging.Message" />.</span><span class="sxs-lookup"><span data-stu-id="9ad81-110">The <see cref="T:System.Messaging.Message" /> to inspect.</span></span></param>
        <summary><span data-ttu-id="9ad81-111">Bestimmt, ob das Formatierungsprogramm den Inhalt der Meldung deserialisieren kann.</span><span class="sxs-lookup"><span data-stu-id="9ad81-111">Determines whether the formatter can deserialize the contents of the message.</span></span></summary>
        <returns><span data-ttu-id="9ad81-112"><see langword="true" />, wenn der <see cref="T:System.Messaging.ActiveXMessageFormatter" /> die Meldung deserialisieren kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9ad81-112"><see langword="true" /> if the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> can deserialize the message; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ad81-113"><xref:System.Messaging.ActiveXMessageFormatter.CanRead%2A> Gibt `false` ist der Nachrichtentext kein primitiver Typ, der das Message Queuing-ActiveX-Steuerelement deserialisiert werden kann oder wenn es keine implementiert die `IPersistStream` Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="9ad81-113"><xref:System.Messaging.ActiveXMessageFormatter.CanRead%2A> returns `false` if the message body is not a primitive that the Message Queuing ActiveX control can deserialize or if it does not implement the `IPersistStream` interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9ad81-114">Der <paramref name="message" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9ad81-114">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="activeXMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9ad81-115">Erstellt eine Instanz der <see cref="T:System.Messaging.ActiveXMessageFormatter" />-Klasse, die mit dem aktuellen <see cref="T:System.Messaging.ActiveXMessageFormatter" /> übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="9ad81-115">Creates an instance of the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> class that is identical to the current <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</span></span></summary>
        <returns><span data-ttu-id="9ad81-116">Ein Objekt, dessen Eigenschaften mit denen dieses <see cref="T:System.Messaging.ActiveXMessageFormatter" /> übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="9ad81-116">An object whose properties are identical to those of this <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ad81-117">Diese Methode wird verwendet, durch die <xref:System.Messaging.MessageQueue> Klasse, um mehrere Nachrichten gleichzeitig zu erhalten (z. B., wenn die Anwendung asynchron empfangen wird).</span><span class="sxs-lookup"><span data-stu-id="9ad81-117">This method is used by the <xref:System.Messaging.MessageQueue> class in order to receive multiple messages at the same time (for example, if the application is receiving asynchronously).</span></span> <span data-ttu-id="9ad81-118">Sie in der Regel müssen nicht diese Methode in Ihrem Anwendungscode aufrufen.</span><span class="sxs-lookup"><span data-stu-id="9ad81-118">You typically do not need to call this method in your application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="InitStreamedObject">
      <MemberSignature Language="C#" Value="public static void InitStreamedObject (object streamedObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitStreamedObject(object streamedObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitStreamedObject (streamedObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitStreamedObject(System::Object ^ streamedObject);" />
      <MemberSignature Language="F#" Value="static member InitStreamedObject : obj -&gt; unit" Usage="System.Messaging.ActiveXMessageFormatter.InitStreamedObject streamedObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamedObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="streamedObject"><span data-ttu-id="9ad81-119">Ein OLE-Objekt, das <see langword="IPersistStreamInit" /> implementiert.</span><span class="sxs-lookup"><span data-stu-id="9ad81-119">An OLE object that implements <see langword="IPersistStreamInit" />.</span></span></param>
        <summary><span data-ttu-id="9ad81-120">Stellt ein Dienstprogramm für die Serialisierung von COM-Objekten bereit, die <see langword="IPersistStream" /> implementieren und einen Aufruf von <see langword="IPersistStreamInit" /> erfordern.</span><span class="sxs-lookup"><span data-stu-id="9ad81-120">Provides a utility to help serialize COM objects that implement <see langword="IPersistStream" /> and require <see langword="IPersistStreamInit" /> to be called.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="activeXMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="9ad81-121">Die zu deserialisierende <see cref="T:System.Messaging.Message" /> im Format des ActiveX-Steuerelements von MSMQ.</span><span class="sxs-lookup"><span data-stu-id="9ad81-121">The <see cref="T:System.Messaging.Message" />, in MSMQ ActiveX control format, to deserialize.</span></span></param>
        <summary><span data-ttu-id="9ad81-122">Liest den Inhalt aus der angegebenen Meldung und erstellt ein Objekt, das die deserialisierte Meldung enthält.</span><span class="sxs-lookup"><span data-stu-id="9ad81-122">Reads the contents from the given message and creates an object that contains the deserialized message.</span></span></summary>
        <returns><span data-ttu-id="9ad81-123">Die deserialisierte Meldung.</span><span class="sxs-lookup"><span data-stu-id="9ad81-123">The deserialized message.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ad81-124">Wenn der Text der Nachricht eines primitiven Typs, die Nachricht darstellt <xref:System.Messaging.Message.BodyType%2A> -Eigenschaft muss einer der verwalteten Typen in der folgenden Tabelle sein.</span><span class="sxs-lookup"><span data-stu-id="9ad81-124">If the body of the message represents a primitive type, the message's <xref:System.Messaging.Message.BodyType%2A> property must be one of the managed types in the following table.</span></span>  
  
|<span data-ttu-id="9ad81-125">BodyType-Wert</span><span class="sxs-lookup"><span data-stu-id="9ad81-125">BodyType value</span></span>|<span data-ttu-id="9ad81-126">Verwalteter Typ</span><span class="sxs-lookup"><span data-stu-id="9ad81-126">Managed type</span></span>|  
|--------------------|------------------|  
|<span data-ttu-id="9ad81-127">VT_LPSTR</span><span class="sxs-lookup"><span data-stu-id="9ad81-127">VT_LPSTR</span></span>|<span data-ttu-id="9ad81-128"><xref:System.Char> Array (deserialisiert mit ASCII-Codierung)</span><span class="sxs-lookup"><span data-stu-id="9ad81-128"><xref:System.Char> array (deserialized using ASCII encoding)</span></span>|  
|<span data-ttu-id="9ad81-129">VT_BSTR, VT_LPWSTR</span><span class="sxs-lookup"><span data-stu-id="9ad81-129">VT_BSTR, VT_LPWSTR</span></span>|<span data-ttu-id="9ad81-130"><xref:System.String> (mit Unicode-Codierung deserialisiert)</span><span class="sxs-lookup"><span data-stu-id="9ad81-130"><xref:System.String> (deserialized using Unicode encoding)</span></span>|  
|<span data-ttu-id="9ad81-131">VT_VECTOR &AMP;#124; VT_UI1</span><span class="sxs-lookup"><span data-stu-id="9ad81-131">VT_VECTOR &#124; VT_UI1</span></span>|<span data-ttu-id="9ad81-132"><xref:System.Byte>-Array</span><span class="sxs-lookup"><span data-stu-id="9ad81-132"><xref:System.Byte> array</span></span>|  
|<span data-ttu-id="9ad81-133">VT_BOOL</span><span class="sxs-lookup"><span data-stu-id="9ad81-133">VT_BOOL</span></span>|<xref:System.Boolean>|  
|<span data-ttu-id="9ad81-134">VT_CLSID</span><span class="sxs-lookup"><span data-stu-id="9ad81-134">VT_CLSID</span></span>|<xref:System.Guid>|  
|<span data-ttu-id="9ad81-135">VT_CY</span><span class="sxs-lookup"><span data-stu-id="9ad81-135">VT_CY</span></span>|<xref:System.Decimal>|  
|<span data-ttu-id="9ad81-136">VT_DATE</span><span class="sxs-lookup"><span data-stu-id="9ad81-136">VT_DATE</span></span>|<xref:System.DateTime>|  
|<span data-ttu-id="9ad81-137">VT_I1, VT_UI1</span><span class="sxs-lookup"><span data-stu-id="9ad81-137">VT_I1, VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="9ad81-138">VT_I2</span><span class="sxs-lookup"><span data-stu-id="9ad81-138">VT_I2</span></span>|<xref:System.Int16>|  
|<span data-ttu-id="9ad81-139">VT_UI2</span><span class="sxs-lookup"><span data-stu-id="9ad81-139">VT_UI2</span></span>|<xref:System.UInt16>|  
|<span data-ttu-id="9ad81-140">VT_I4</span><span class="sxs-lookup"><span data-stu-id="9ad81-140">VT_I4</span></span>|<xref:System.Int32>|  
|<span data-ttu-id="9ad81-141">VT_UI4</span><span class="sxs-lookup"><span data-stu-id="9ad81-141">VT_UI4</span></span>|<xref:System.UInt32>|  
|<span data-ttu-id="9ad81-142">VT_I8</span><span class="sxs-lookup"><span data-stu-id="9ad81-142">VT_I8</span></span>|<xref:System.Int64>|  
|<span data-ttu-id="9ad81-143">VT_UI8</span><span class="sxs-lookup"><span data-stu-id="9ad81-143">VT_UI8</span></span>|<xref:System.UInt64>|  
|<span data-ttu-id="9ad81-144">VT_R4</span><span class="sxs-lookup"><span data-stu-id="9ad81-144">VT_R4</span></span>|<xref:System.Single>|  
|<span data-ttu-id="9ad81-145">VT_R8</span><span class="sxs-lookup"><span data-stu-id="9ad81-145">VT_R8</span></span>|<xref:System.Double>|  
|<span data-ttu-id="9ad81-146">VT_NULL</span><span class="sxs-lookup"><span data-stu-id="9ad81-146">VT_NULL</span></span>|`null`|  
|<span data-ttu-id="9ad81-147">VT_STREAMED_OBJECT</span><span class="sxs-lookup"><span data-stu-id="9ad81-147">VT_STREAMED_OBJECT</span></span>|<xref:System.Object>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9ad81-148">Die <see cref="P:System.Messaging.Message.BodyType" />-Eigenschaft der als Parameter übergebenen <paramref name="message" /> kann keinem primitiven Typ zugeordnet werden und stellt kein Objekt in einem Stream dar.</span><span class="sxs-lookup"><span data-stu-id="9ad81-148">The <see cref="P:System.Messaging.Message.BodyType" /> property of the <paramref name="message" /> passed as a parameter cannot be mapped to a primitive type, nor does it represent a streamed object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9ad81-149">Der Text stellt ein gespeichertes Objekt dar.</span><span class="sxs-lookup"><span data-stu-id="9ad81-149">The body represents a stored object.</span></span> <span data-ttu-id="9ad81-150">Der <see cref="T:System.Messaging.ActiveXMessageFormatter" /> unterstützt keine Deserialisierung gespeicherter Objekte.</span><span class="sxs-lookup"><span data-stu-id="9ad81-150">The <see cref="T:System.Messaging.ActiveXMessageFormatter" /> does not support deserialization of stored objects.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9ad81-151">Der <paramref name="message" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9ad81-151">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="activeXMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="9ad81-152">Die <see cref="T:System.Messaging.Message" />, deren <see cref="P:System.Messaging.Message.Body" />-Eigenschaft das serialisierte Objekt aufnimmt.</span><span class="sxs-lookup"><span data-stu-id="9ad81-152">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Body" /> property will contain the serialized object.</span></span></param>
        <param name="obj"><span data-ttu-id="9ad81-153">Das in den Meldungstext zu serialisierende Objekt.</span><span class="sxs-lookup"><span data-stu-id="9ad81-153">The object to be serialized into the message body.</span></span></param>
        <summary><span data-ttu-id="9ad81-154">Serialisiert ein Objekt in den Textkörper der Meldung.</span><span class="sxs-lookup"><span data-stu-id="9ad81-154">Serializes an object into the body of the message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ad81-155">Die folgende Tabelle zeigt die Beziehung zwischen verwalteten Typen und die <xref:System.Messaging.Message.BodyType%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="9ad81-155">The following table shows the relationship between managed types and the <xref:System.Messaging.Message.BodyType%2A> property.</span></span> <span data-ttu-id="9ad81-156">Das Objekt, das Sie serialisieren muss einer der diese verwalteten Typen sein oder die OLE implementieren `IPersistStream` Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="9ad81-156">The object that you serialize must be one of these managed types or must implement the OLE `IPersistStream` interface.</span></span>  
  
|<span data-ttu-id="9ad81-157">BodyType-Wert</span><span class="sxs-lookup"><span data-stu-id="9ad81-157">BodyType value</span></span>|<span data-ttu-id="9ad81-158">Verwalteter Typ</span><span class="sxs-lookup"><span data-stu-id="9ad81-158">Managed type</span></span>|  
|--------------------|------------------|  
|<span data-ttu-id="9ad81-159">VT_LPSTR</span><span class="sxs-lookup"><span data-stu-id="9ad81-159">VT_LPSTR</span></span>|<xref:System.Char>|  
|<span data-ttu-id="9ad81-160">VT_BSTR, VT_LPWSTR</span><span class="sxs-lookup"><span data-stu-id="9ad81-160">VT_BSTR, VT_LPWSTR</span></span>|<xref:System.String>|  
|<span data-ttu-id="9ad81-161">VT_VECTOR &AMP;#124; VT_UI1</span><span class="sxs-lookup"><span data-stu-id="9ad81-161">VT_VECTOR &#124; VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="9ad81-162">VT_BOOL</span><span class="sxs-lookup"><span data-stu-id="9ad81-162">VT_BOOL</span></span>|<xref:System.Boolean>|  
|<span data-ttu-id="9ad81-163">VT_CLSID</span><span class="sxs-lookup"><span data-stu-id="9ad81-163">VT_CLSID</span></span>|<xref:System.Guid>|  
|<span data-ttu-id="9ad81-164">VT_CY</span><span class="sxs-lookup"><span data-stu-id="9ad81-164">VT_CY</span></span>|<xref:System.Decimal>|  
|<span data-ttu-id="9ad81-165">VT_DATE</span><span class="sxs-lookup"><span data-stu-id="9ad81-165">VT_DATE</span></span>|<xref:System.DateTime>|  
|<span data-ttu-id="9ad81-166">VT_I1, VT_UI1</span><span class="sxs-lookup"><span data-stu-id="9ad81-166">VT_I1, VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="9ad81-167">VT_I2</span><span class="sxs-lookup"><span data-stu-id="9ad81-167">VT_I2</span></span>|<xref:System.Int16>|  
|<span data-ttu-id="9ad81-168">VT_UI2</span><span class="sxs-lookup"><span data-stu-id="9ad81-168">VT_UI2</span></span>|<xref:System.UInt16>|  
|<span data-ttu-id="9ad81-169">VT_I4</span><span class="sxs-lookup"><span data-stu-id="9ad81-169">VT_I4</span></span>|<xref:System.Int32>|  
|<span data-ttu-id="9ad81-170">VT_UI4</span><span class="sxs-lookup"><span data-stu-id="9ad81-170">VT_UI4</span></span>|<xref:System.UInt32>|  
|<span data-ttu-id="9ad81-171">VT_I8</span><span class="sxs-lookup"><span data-stu-id="9ad81-171">VT_I8</span></span>|<xref:System.Int64>|  
|<span data-ttu-id="9ad81-172">VT_UI8</span><span class="sxs-lookup"><span data-stu-id="9ad81-172">VT_UI8</span></span>|<xref:System.UInt64>|  
|<span data-ttu-id="9ad81-173">VT_R4</span><span class="sxs-lookup"><span data-stu-id="9ad81-173">VT_R4</span></span>|<xref:System.Single>|  
|<span data-ttu-id="9ad81-174">VT_R8</span><span class="sxs-lookup"><span data-stu-id="9ad81-174">VT_R8</span></span>|<xref:System.Double>|  
|<span data-ttu-id="9ad81-175">VT_NULL</span><span class="sxs-lookup"><span data-stu-id="9ad81-175">VT_NULL</span></span>|`null`|  
|<span data-ttu-id="9ad81-176">VT_STREAMED_OBJECT</span><span class="sxs-lookup"><span data-stu-id="9ad81-176">VT_STREAMED_OBJECT</span></span>|<span data-ttu-id="9ad81-177">`IPersistStream` (OLE) <xref:System.Object></span><span class="sxs-lookup"><span data-stu-id="9ad81-177">`IPersistStream` (OLE) <xref:System.Object></span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9ad81-178">Das zu serialisierende Objekt ist weder ein primitiver Typ noch ein in einem Stream befindliches Objekt, das die <see langword="IPersistStream" />-OLE-Schnittstelle implementiert.</span><span class="sxs-lookup"><span data-stu-id="9ad81-178">The object to serialize is neither a primitive nor a streamed object that implements the OLE <see langword="IPersistStream" /> interface.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9ad81-179">Der <paramref name="message" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9ad81-179">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>
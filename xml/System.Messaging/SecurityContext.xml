<Type Name="SecurityContext" FullName="System.Messaging.SecurityContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="07eceb3c5ff786756a2f704065e19d2f93499602" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52598485" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecurityContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecurityContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.SecurityContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecurityContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecurityContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt den Sicherheitskontext für eine Meldung in einer Warteschlange dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Sicherheitskontext enthält zwischengespeicherte Sicherheits-Informationen wie z. B. ein internes Zertifikat, den entsprechenden privaten Schlüssel, die SID des Benutzers, erforderlich, um ein Zertifikat und die Absender-ID an eine Nachricht angefügt werden, wenn Authentifizierung anfordert.  
  
 Wenn ein Client, z. B. eine ASP.NET-Anwendung nimmt die Identität eines Benutzers zum Senden einer Nachricht an eine Warteschlange, wird die Identität des Benutzers verwendet, auf die Warteschlange zuzugreifen. Wenn die Warteschlange remote ist, werden diese Anmeldeinformationen zwischengespeichert und für die anschließend an die Warteschlange gesendeten Meldungen verwendet. Aus diesem Grund werden die SID in nachfolgenden Nachrichten die zwischengespeicherte Identität des Benutzers, der eine Nachricht an die Warteschlange gesendet. Die zwischengespeicherte Identität des Benutzers, der eine Nachricht an die Warteschlange gesendet werden, wird für nachfolgende Benutzer verwendet werden.  
  
 Um dieses Problem zu umgehen, legen Sie den Sicherheitskontext mit <xref:System.Messaging.Message.SecurityContext%2A> vor dem Senden einer Nachricht an eine Remotewarteschlange an, um sicherzustellen, dass die Anmeldeinformationen des aktuellen Benutzers für den Zugriff auf die Warteschlange verwendet werden. Allerdings ist die empfohlene Methode zum:  
  
1.  Stellen Sie der Warteschlange authentifizierte Warteschlange.  
  
2.  Führen Sie die ASP.NET-Anwendung als eine Domänenidentität aus, und autorisieren Sie diese Anwendung zum Schreiben in die Warteschlange.  
  
3.  Führen Sie nicht die Identität des Benutzers beim Verwenden der Warteschlange. Rufen Sie stattdessen die Identität des Aufrufers, und führen Sie die autorisierungsüberprüfung in der ASP.NET-Anwendung oder schließen Sie die Identität des Aufrufers als Teil der Nachricht und führen Sie die autorisierungsüberprüfung in der empfängeranwendung.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.SecurityContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="securityContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom <see cref="T:System.Messaging.SecurityContext" /> verwendeten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SecurityContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.SecurityContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SecurityContext ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="securityContext.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
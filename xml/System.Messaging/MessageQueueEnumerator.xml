<Type Name="MessageQueueEnumerator" FullName="System.Messaging.MessageQueueEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="744ed7e99161f6cb01b915cd9bba30ccb941dd93" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69382577" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageQueueEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="698d6-101">Stellt einen Vorwärtscursor zum Durchlaufen der Meldungen in einer Meldungswarteschlange bereit.</span><span class="sxs-lookup"><span data-stu-id="698d6-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="698d6-102">Verwenden <xref:System.Messaging.MessageQueueEnumerator> Sie für die dynamische Interaktion mit Warteschlangen im Netzwerk.</span><span class="sxs-lookup"><span data-stu-id="698d6-102">Use <xref:System.Messaging.MessageQueueEnumerator> for dynamic interaction with queues on the network.</span></span> <span data-ttu-id="698d6-103">Methoden, die über <xref:System.Messaging.MessageQueue> die-Klasse verfügbar sind <xref:System.Messaging.MessageQueueEnumerator> , können entweder eine mit einer dynamischen Liste von Warteschlangen oder ein Array zurückgeben, das eine Momentaufnahme der Warteschlangen Auflistung zum Zeitpunkt des Aufrufs der angegebenen Methode enthält.</span><span class="sxs-lookup"><span data-stu-id="698d6-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageQueueEnumerator> containing a dynamic list of queues, or an array that contains a snapshot of the queue collection at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="698d6-104">Es gibt keine definierte Reihenfolge von Warteschlangen in einem Netzwerk.</span><span class="sxs-lookup"><span data-stu-id="698d6-104">There is no defined ordering of queues in a network.</span></span> <span data-ttu-id="698d6-105">Sie sind nicht geordnet, z. b. nach Computer, Bezeichnung, öffentlichem oder privatem Status oder anderen vom Benutzer zugänglichen Kriterien.</span><span class="sxs-lookup"><span data-stu-id="698d6-105">They are not ordered, for example, by computer, label, public or private status, or other user-accessible criteria.</span></span> <span data-ttu-id="698d6-106">Ein <xref:System.Messaging.MessageQueueEnumerator> ist ein Cursor, der mit dem Anfang einer dynamischen Liste initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="698d6-106">A <xref:System.Messaging.MessageQueueEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="698d6-107">Sie können den Cursor in die erste Warteschlange der Enumeration verschieben, indem <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>Sie aufrufen.</span><span class="sxs-lookup"><span data-stu-id="698d6-107">You can move the cursor to the first queue of the enumeration by calling <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="698d6-108">Nachdem der Enumerator initialisiert wurde, können Sie verwenden <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> , um die verbleibenden Warteschlangen schrittweise zu durchlaufen.</span><span class="sxs-lookup"><span data-stu-id="698d6-108">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to step forward through the remaining queues.</span></span>  
  
 <span data-ttu-id="698d6-109">Es ist nicht möglich, mit einem <xref:System.Messaging.MessageQueueEnumerator>rückwärts zu wechseln.</span><span class="sxs-lookup"><span data-stu-id="698d6-109">It is not possible to step backward with a <xref:System.Messaging.MessageQueueEnumerator>.</span></span> <span data-ttu-id="698d6-110">Ein Cursor ermöglicht nur eine Vorwärtsbewegung durch die Warteschlangen Enumeration.</span><span class="sxs-lookup"><span data-stu-id="698d6-110">A cursor only allows forward movement through the queue enumeration.</span></span> <span data-ttu-id="698d6-111">Sie können jedoch auch aufzurufen <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> , um die Enumeration zurückzusetzen und den Cursor erneut am Anfang der Liste zu platzieren.</span><span class="sxs-lookup"><span data-stu-id="698d6-111">However, you can call <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to reset the enumeration and put the cursor at the beginning of the list again.</span></span> <span data-ttu-id="698d6-112">Da der Enumerator dynamisch ist, kann auf eine Warteschlange, die über die aktuelle Position des Cursors hinaus angefügt wird, durch den Enumerator zugegriffen werden.</span><span class="sxs-lookup"><span data-stu-id="698d6-112">Because the enumerator is dynamic, a queue that is appended beyond the cursor's current position can be accessed by the enumerator.</span></span> <span data-ttu-id="698d6-113">Auf eine Warteschlange, die vor der aktuellen Cursorposition eingefügt wird, kann nicht zugegriffen werden, ohne dass zuerst Reset aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="698d6-113">A queue that is inserted before the cursor's current position cannot be accessed without first calling Reset.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="698d6-114">Im folgenden Codebeispiel werden alle Nachrichten Warteschlangen im Netzwerk durchlaufen und der Pfad für die einzelnen Warteschlangen überprüft.</span><span class="sxs-lookup"><span data-stu-id="698d6-114">The following code example iterates through all the message queues in the network, and examines the path for each queue.</span></span> <span data-ttu-id="698d6-115">Schließlich wird die Anzahl der öffentlichen Warteschlangen im Netzwerk angezeigt.</span><span class="sxs-lookup"><span data-stu-id="698d6-115">Finally, it displays the number of public queues on the network.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CPP/mqgetmessagequeueenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CS/mqgetmessagequeueenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/VB/mqgetmessagequeueenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageQueueEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="698d6-116">Gibt die dem Enumerator zugeordneten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="698d6-116">Frees the resources associated with the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="698d6-117">Das Betriebssystem speichert ein geöffnetes <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>handle,, während der Lebensdauer des Cursors in den Warteschlangen Enumerator.</span><span class="sxs-lookup"><span data-stu-id="698d6-117">The operating system retains an open handle, <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, to the queue enumerator during the lifetime of the cursor.</span></span> <span data-ttu-id="698d6-118">Wenn Sie die Arbeit mit dem Enumerator abgeschlossen haben <xref:System.Messaging.MessageQueueEnumerator.Close%2A> , geben Sie an, um die dem Handle zugeordneten Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="698d6-118">When you finish working with the enumerator, call <xref:System.Messaging.MessageQueueEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ Current { System::Messaging::MessageQueue ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.MessageQueue" Usage="System.Messaging.MessageQueueEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="698d6-119">Ruft die aktuelle <see cref="T:System.Messaging.MessageQueue" /> der Enumeration ab.</span><span class="sxs-lookup"><span data-stu-id="698d6-119">Gets the current <see cref="T:System.Messaging.MessageQueue" /> of the enumeration.</span></span></summary>
        <value><span data-ttu-id="698d6-120">Die Warteschlange an der aktuellen Position des Cursors.</span><span class="sxs-lookup"><span data-stu-id="698d6-120">The queue at which the cursor is currently positioned.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="698d6-121">Wenn der Enumerator erstellt wird, verweist er nicht auf etwas, ist daher <xref:System.Messaging.MessageQueueEnumerator.Current%2A> ungültig und löst eine Ausnahme aus, wenn darauf zugegriffen wird.</span><span class="sxs-lookup"><span data-stu-id="698d6-121">When the enumerator is created, it does not point to anything, so <xref:System.Messaging.MessageQueueEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="698d6-122">Sie müssen aufzurufen <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> , um den Cursor an der ersten Warteschlange in der-Enumeration zu positionieren.</span><span class="sxs-lookup"><span data-stu-id="698d6-122">You must call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to position the cursor at the first queue in the enumeration.</span></span>  
  
 <span data-ttu-id="698d6-123">Mehrere Aufrufe von <xref:System.Messaging.MessageQueueEnumerator.Current%2A> ohne dazwischen liegende Aufrufe von <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> geben das gleiche <xref:System.Messaging.MessageQueue> -Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="698d6-123">Multiple calls to <xref:System.Messaging.MessageQueueEnumerator.Current%2A> with no intervening calls to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return the same <xref:System.Messaging.MessageQueue> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="698d6-124"><see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> wurde vor dem ersten Aufruf von <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" /> aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="698d6-124">You called <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />.</span></span> <span data-ttu-id="698d6-125">Der Cursor befindet sich vor der ersten Warteschlange der Enumeration.</span><span class="sxs-lookup"><span data-stu-id="698d6-125">The cursor is located before the first queue in the enumeration.</span></span>  
  
<span data-ttu-id="698d6-126">- oder -</span><span class="sxs-lookup"><span data-stu-id="698d6-126">-or-</span></span> 
<span data-ttu-id="698d6-127"><see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> wurde aufgerufen, nachdem bei einem Aufruf von <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" /> der Wert false zurückgegeben wurde. (Dies bedeutet, dass sich der Cursor hinter der letzten Warteschlange der Enumeration befindet.)</span><span class="sxs-lookup"><span data-stu-id="698d6-127">You called <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" /> had returned false (indicating the cursor is located after the last queue in the enumeration).</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.Reset" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="698d6-128">Gibt die von der <see cref="T:System.Messaging.MessageQueueEnumerator" /> verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="698d6-128">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="698d6-129">Gibt alle vom <see cref="T:System.Messaging.MessageQueueEnumerator" /> verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="698d6-129">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="698d6-130">Durch Aufrufen <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> von können die Ressourcen ,dievonverwendetwerden,fürandereZweckeneuzugeordnetwerden.<xref:System.Messaging.MessageQueueEnumerator></span><span class="sxs-lookup"><span data-stu-id="698d6-130">Calling <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="698d6-131">Weitere Informationen zu finden <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="698d6-131">For more information about <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="698d6-132">Bereinigen von nicht verwalteten Ressourcen</span><span class="sxs-lookup"><span data-stu-id="698d6-132">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="698d6-133"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="698d6-133"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="698d6-134">Gibt die von <see cref="T:System.Messaging.MessageQueueEnumerator" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="698d6-134">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="698d6-135">Diese Methode wird von der öffentlichen <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> -Methode und der <xref:System.Object.Finalize%2A> -Methode aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="698d6-135">This method is called by the public <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="698d6-136">`Dispose`Ruft die geschützte `Dispose(Boolean)` Methode auf, `disposing` wobei der- `true`Parameter auf festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="698d6-136">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="698d6-137"><xref:System.Object.Finalize%2A>Ruft `Dispose` auf `disposing` , wobei `false`auf gesetzt ist.</span><span class="sxs-lookup"><span data-stu-id="698d6-137"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="698d6-138">Wenn der `disposing`-Parameter `true` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:System.Messaging.MessageQueueEnumerator> verweist.</span><span class="sxs-lookup"><span data-stu-id="698d6-138">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueEnumerator> references.</span></span> <span data-ttu-id="698d6-139">Diese Methode ruft die `Dispose`-Methode aller Objekte auf, auf die verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="698d6-139">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="698d6-140">
            <see langword="Dispose" /> kann von anderen Objekten mehrmals aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="698d6-140">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="698d6-141">Beim Überschreiben von <see langword="Dispose(Boolean)" /> müssen Sie darauf achten, nicht auf Objekte zu verweisen, die durch einen früheren Aufruf von <see langword="Dispose" /> freigegeben wurden.</span><span class="sxs-lookup"><span data-stu-id="698d6-141">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="698d6-142">Weitere Informationen zum Implementieren <see langword="Dispose" />von finden Sie unter [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.</span><span class="sxs-lookup"><span data-stu-id="698d6-142">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="698d6-143">Weitere Informationen zu und <see langword="Dispose" /> <see langword="Finalize" />finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und überschreiben [der Finalize-Methode](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span><span class="sxs-lookup"><span data-stu-id="698d6-143">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="698d6-144">Implementieren einer Dispose-Methode</span><span class="sxs-lookup"><span data-stu-id="698d6-144">Implementing a Dispose method</span></span></related>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="698d6-145">Bereinigen von nicht verwalteten Ressourcen</span><span class="sxs-lookup"><span data-stu-id="698d6-145">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="698d6-146">Gibt die von dieser Warteschlange reservierten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="698d6-146">Releases the resources held by the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="698d6-147">Diese Methode überschreibt <xref:System.Object.Finalize>.</span><span class="sxs-lookup"><span data-stu-id="698d6-147">This method overrides <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="698d6-148">Der Anwendungscode sollte diese Methode nicht aufzurufen. die Finalize-Methode eines Objekts wird automatisch während Garbage Collection aufgerufen, es sei denn, die Garbage Collector wurde durch einen Aufruf der <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> -Methode deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="698d6-148">Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="698d6-149">Weitere Informationen finden Sie unter [Finalize-Methoden und](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100))debugtoren, [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md)und überschreiben [der Finalize-Methode](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span><span class="sxs-lookup"><span data-stu-id="698d6-149">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocatorHandle">
      <MemberSignature Language="C#" Value="public IntPtr LocatorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int LocatorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.LocatorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocatorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr LocatorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.LocatorHandle : nativeint" Usage="System.Messaging.MessageQueueEnumerator.LocatorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="698d6-150">Ruft das systemeigene Handle von Message Queuing ab, das zum Suchen von Warteschlangen in einem Netzwerk verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="698d6-150">Gets the native Message Queuing handle used to locate queues in a network.</span></span></summary>
        <value><span data-ttu-id="698d6-151">Das systemeigene Handle für die aktuelle Warteschlange.</span><span class="sxs-lookup"><span data-stu-id="698d6-151">The native handle to the current queue.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="698d6-152">Wenn diese <xref:System.Messaging.MessageQueueEnumerator> Instanz nicht mehr benötigt wird, wird <xref:System.Messaging.MessageQueueEnumerator.Close%2A> aufgerufen, um das Handle für die Ressource freizugeben.</span><span class="sxs-lookup"><span data-stu-id="698d6-152">When you no longer need this <xref:System.Messaging.MessageQueueEnumerator> instance, call <xref:System.Messaging.MessageQueueEnumerator.Close%2A> to free this handle to the resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="698d6-153">Das Handle ist nicht vorhanden.</span><span class="sxs-lookup"><span data-stu-id="698d6-153">The handle does not exist.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="698d6-154">Der aufrufende Code verfügt nicht über die zum Durchsuchen erforderlichen Berechtigungen.</span><span class="sxs-lookup"><span data-stu-id="698d6-154">The calling code does not have browse permissions.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageQueueEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="698d6-155">Setzt den Enumerator auf die nächste Warteschlange der Enumeration, sofern eine Warteschlange verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="698d6-155">Advances the enumerator to the next queue of the enumeration, if one is currently available.</span></span></summary>
        <returns><span data-ttu-id="698d6-156"><see langword="true" />, wenn der Enumerator erfolgreich auf die nächste Warteschlange gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Enumeration erreicht hat.</span><span class="sxs-lookup"><span data-stu-id="698d6-156"><see langword="true" /> if the enumerator was successfully advanced to the next queue; <see langword="false" /> if the enumerator has reached the end of the enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="698d6-157"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>wird `false` sofort zurückgegeben, wenn keine Warteschlangen mit der-Enumeration verknüpft sind.</span><span class="sxs-lookup"><span data-stu-id="698d6-157"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> returns `false` immediately if there are no queues associated with the enumeration.</span></span>  
  
 <span data-ttu-id="698d6-158"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>wird zurück `true` gegeben, bis das Ende der Auflistung erreicht ist.</span><span class="sxs-lookup"><span data-stu-id="698d6-158"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return `true` until it has reached the end of the collection.</span></span> <span data-ttu-id="698d6-159">Anschließend wird für jeden `false` aufeinander folgenden Aufrufvorgang zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="698d6-159">It will then return `false` for each successive call.</span></span> <span data-ttu-id="698d6-160">Nachdem <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> jedoch zurückgegeben `false`wurde, wird <xref:System.Messaging.MessageQueueEnumerator.Current%2A> beim Zugriff auf die-Eigenschaft eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="698d6-160">However once <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> has returned `false`, accessing the <xref:System.Messaging.MessageQueueEnumerator.Current%2A> property will throw an exception.</span></span>  
  
 <span data-ttu-id="698d6-161">Bei der Erstellung wird ein Enumerator konzeptionell vor dem ersten <xref:System.Messaging.MessageQueue> der-Enumeration positioniert, und der erste <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> -Befehl führt die erste Warteschlange der-Enumeration in die Ansicht.</span><span class="sxs-lookup"><span data-stu-id="698d6-161">Upon creation, an enumerator is conceptually positioned before the first <xref:System.Messaging.MessageQueue> of the enumeration, and the first call to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> brings the first queue of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="698d6-162">Der aufrufende Code verfügt nicht über die zum Durchsuchen erforderlichen Berechtigungen.</span><span class="sxs-lookup"><span data-stu-id="698d6-162">The calling code does not have browse permissions.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.Reset" />
        <altmember cref="T:System.Messaging.MessageQueue" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageQueueEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="698d6-163">Setzt den Cursor zurück auf den Anfang der Enumeration.</span><span class="sxs-lookup"><span data-stu-id="698d6-163">Resets the cursor, so it points to the beginning of the enumeration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="698d6-164">Ein Enumerator wechselt in Vorwärtsrichtung.</span><span class="sxs-lookup"><span data-stu-id="698d6-164">An enumerator moves in a forward-only direction.</span></span> <span data-ttu-id="698d6-165">Verwenden Sie diese Methode, um zum Anfang der Enumeration von Warteschlangen zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="698d6-165">Use this method to return to the beginning of the enumeration of queues.</span></span>  
  
 <span data-ttu-id="698d6-166"><xref:System.Messaging.MessageQueueEnumerator.Reset%2A>positioniert den Cursor in der ersten Warteschlange in der Liste.</span><span class="sxs-lookup"><span data-stu-id="698d6-166"><xref:System.Messaging.MessageQueueEnumerator.Reset%2A> positions the cursor at the first queue in the list.</span></span> <span data-ttu-id="698d6-167">Sie müssen nach dem Aufruf <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> von nicht aufrufen, um den Cursor in die erste Warteschlange in der-Enumeration zu verschieben.</span><span class="sxs-lookup"><span data-stu-id="698d6-167">You do not need to call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to move the cursor forward to the first queue in the enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="698d6-168">Ruft die aktuelle <see cref="T:System.Messaging.MessageQueue" /> der Enumeration ab.</span><span class="sxs-lookup"><span data-stu-id="698d6-168">Gets the current <see cref="T:System.Messaging.MessageQueue" /> of the enumeration.</span></span></summary>
        <value><span data-ttu-id="698d6-169">Die Warteschlange an der aktuellen Position des Cursors.</span><span class="sxs-lookup"><span data-stu-id="698d6-169">The queue at which the cursor is currently positioned.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

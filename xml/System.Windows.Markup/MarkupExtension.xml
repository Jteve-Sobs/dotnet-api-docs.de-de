<Type Name="MarkupExtension" FullName="System.Windows.Markup.MarkupExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d39f2330859ed94e3805dd0f475ebb9af028b98" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82424532" /></Metadata><TypeSignature Language="C#" Value="public abstract class MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupExtension abstract" />
  <TypeSignature Language="F#" Value="type MarkupExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="WindowsBase" FromVersion="5.0.0.0" To="System.Xaml" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.Xaml" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine Basisklasse für Implementierungen von XAML-Markuperweiterungen bereit, die von .NET Framework-XAML-Diensten sowie anderen XAML-Readern und XAML-Writern unterstützt werden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Markup Erweiterungen geben Objekte auf der Grundlage der Eingabe von Zeichen folgen Attributwerten oder Markup Elementen in XAML an Aufrufer zurück. Markup Erweiterungen geben Objekte auf anspruchsvollere Weise zurück, als Typkonverter allein erreichen können. Ein XAML-objektwriter Ruft einen Typkonverter auf, da einem Typ oder Member eine typkonverterimplementierung zugeordnet ist. Im CLR-Frame des Verweises bedeutet dies, dass ein Typ oder ein Member <xref:System.ComponentModel.TypeConverterAttribute> attributiert ist. Aus der XAML-Typsystem Perspektive bedeutet dies, dass ein XAML-Typ oder ein XAML-Member über einen Wert für die `TypeConverter`-Eigenschaft verfügt. Der Aufruf eines Typkonverters ist an den Typ oder die Eigenschafts Definition gebunden und wird für diese Fälle immer von der XAML-Verarbeitung aufgerufen. Im Gegensatz dazu unterliegt eine Markup Erweiterung eher der Steuerung des Benutzercodes und des Benutzer erstellten Markups und kann immer angewendet werden, wenn Sie von einem Anwendungsszenario benötigt wird. Eine Markup Erweiterung kann aufgerufen und zum Festlegen von unterschiedlichen Typmember-Werten verwendet werden, solange der Rückgabetyp der Markup Erweiterung diesem Wert zugewiesen werden kann.  
  
 Weitere Informationen zum Erstellen einer benutzerdefinierten Markup Erweiterung finden Sie unter <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>. Weitere Informationen zu Markup Erweiterungen im Allgemeinen finden Sie unter [Übersicht über Markup Erweiterungen für XAML](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md). Wenn Sie WPF erstellen und Markup Erweiterungen für XAML verwenden oder erstellen, finden Sie weitere relevante Informationen im Thema [Markup Erweiterungen und WPF-XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  
  
 Die <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>-Methode jeder Markup Erweiterungs Implementierung kann einen <xref:System.IServiceProvider> zur Laufzeit verwenden, der Kontext bereitstellen kann. Diese <xref:System.IServiceProvider> wird dann für bestimmte Dienste abgefragt, die Informationen übergeben, z. b. <xref:System.Windows.Markup.IProvideValueTarget> oder <xref:System.Windows.Markup.IXamlTypeResolver>. Weitere Informationen zu Dienst Kontexten für eine Markup Erweiterung finden Sie unter für [Typkonverter und Markup Erweiterungen verfügbare Dienst Kontexte](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).  
  
 Abgeleitete Klassen sollten mit <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> attributiert werden, um Consumer über den spezifischsten Rückgabetyp zu informieren, der in der <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> Implementierung der Markup Erweiterung verfügbar ist.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/db07a952-05ce-4aa4-b6f9-aac7397d0326">Typkonverter oder Markup Erweiterungen für XAML</related>
    <related type="Article" href="https://msdn.microsoft.com/library/261b2b11-2dc0-462f-8c66-55b8c9c6e436">Übersicht über Markuperweiterungen für XAML</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarkupExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz einer von der <see cref="T:System.Windows.Markup.MarkupExtension" /> abgeleiteten Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Markup.MarkupExtension> abstrakte Klasse enthält keine privaten Werte, für die eine Initialisierung erforderlich ist.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Eine Funktions Markup Erweiterung sollte einen eigenen öffentlichen Parameter losen Konstruktor definieren. Außerdem sollte die Markup Erweiterung Konstruktoren implementieren, die für die gewünschten Funktionen und die Markup Verwendung der Erweiterung geeignet sind. Weitere Informationen finden Sie unter [Übersicht über Markup Erweiterungen für XAML](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</para></block>
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public abstract object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member ProvideValue : IServiceProvider -&gt; obj" Usage="markupExtension.ProvideValue serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Ein Dienstanbieter-Hilfsprogramm, das Dienste für die Markuperweiterung bereitstellen kann.</param>
        <summary>Gibt bei Implementierung in einer abgeleiteten Klasse ein Objekt zurück, das als Wert der Zieleigenschaft für diese Markuperweiterung bereitgestellt wird.</summary>
        <returns>Der Objektwert, der für die Eigenschaft festgelegt werden soll, auf die die Erweiterung angewendet wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein XAML-Prozessor einen Typknoten und einen Elementwert verarbeitet, bei dem es sich um eine Markup Erweiterung handelt, ruft er die <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>-Methode dieser Markup Erweiterung auf und schreibt das Ergebnis in das Objekt Diagramm oder den Serialisierungsstream. Der XAML-objektwriter übergibt den Dienst Kontext über den `serviceProvider`-Parameter an jede dieser Implementierungen.  
  
 Weitere Informationen zum Implementieren von <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> in einer benutzerdefinierten Markup Erweiterung finden Sie im Abschnitt "Hinweise zu Implementierern".  
  
## <a name="wpf-usage-notes"></a>Hinweise zur WPF-Verwendung  
  
> [!IMPORTANT]
>  WPF-Klassen, die über bestimmte Interaktionen mit Markup Satz Vorgängen verfügen, sollten für eine [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] Implementierung nicht auf <xref:System.Windows.Markup.IReceiveMarkupExtension> basieren. Verwenden Sie stattdessen <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>attributierte Rückrufe.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Allgemeine Dienste, die vom Standard Dienstanbieter zurückgegeben werden und in der Regel für eine benutzerdefinierte oder vorhandene <see cref="T:System.Windows.Markup.MarkupExtension" /> Implementierung verfügbar sind, umfassen die folgenden primären Dienste.  
  
-   <see cref="T:System.Windows.Markup.IProvideValueTarget" /> meldet den Objekt Verweis und einen Eigenschafts Bezeichner aus dem Kontext, in dem die Markup Erweiterung verwendet wird. 
-   <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> macht einen Dienst verfügbar, der mit dem allgemeinen Schreibverhalten des XAML-Objekts vergleichbar ist, das eine <see cref="T:System.Type" /> auf Grundlage eines XAML-Typnamens bereitstellen kann. Der Name kann optional ein Präfix für einen zugeordneten XAML-Namespace enthalten.  
  
-   <see cref="T:System.Xaml.IXamlSchemaContextProvider" /> den aktiven XAML-Schema Kontext direkt verfügbar machen. Aus dem gemeldeten <see cref="T:System.Xaml.XamlSchemaContext" />können Sie XAML-Schema Kontextinformationen abrufen, z. b. wie Assemblys für Typunterstützung, bevorzugtes Präfix in Assemblys, Listen der einzelnen <see cref="T:System.Xaml.XamlType" /> in einer Assembly usw. zugeordnet werden.  
  
-Weitere verfügbare Dienste für speziellere Markup Erweiterungs Szenarien: 
    -   <see cref="T:System.Windows.Markup.IUriContext" />  
  
    -   <see cref="T:System.Xaml.IAmbientProvider" />  
  
    -   <see cref="T:System.Xaml.IDestinationTypeProvider" />  
  
    -   <see cref="T:System.Xaml.IRootObjectProvider" />  
  
    -   <see cref="T:System.Xaml.IXamlNameResolver" />  
  
    -   <see cref="T:System.Xaml.IXamlNamespaceResolver" />  
  
Möglicherweise können Implementierungen von <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> den <paramref name="serviceProvider" />-Parameter ignorieren. Dies ist für einige grundlegende Szenarien geeignet, in denen kein Kontext zum Zurückgeben eines Werts erforderlich ist.  
  
In der typischen Verwendung stellen die .NET Framework XAML-Dienste und die implementierten XAML-objektwriter einen Dienstanbieter für alle Wert Konverter-Methoden bereit, die während der XAML-Verarbeitung aufgerufen werden. Aus Gründen der Stabilität sollten Sie jedoch Codepfade für NULL-Werte sowohl für den Dienstanbieter selbst als auch für jeden angeforderten Dienst bereitstellen. NULL-Werte können auftreten, wenn die Markup Erweiterung in einem Fall angewendet wird, dass die von einer XAML-Prozessor Infrastruktur bereitgestellte typische Dienst Unterstützung nicht verfügbar ist.  
  
Weitere Informationen zu verfügbaren Diensten aus dem XAML-Dienstanbieter Kontext und deren Verwendung finden Sie unter [Typkonverter und Markup Erweiterungen für XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md).  
  
Für Implementierungen, bei denen ein bestimmter Dienst verfügbar sein muss, um ein nützliches <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> Ergebnis zu liefern, wird erwartet, dass Ausnahmen ausgelöst werden, wenn dieser Dienst nicht verfügbar ist. Die empfohlene Ausnahme, die ausgelöst werden soll, ist <see cref="T:System.InvalidOperationException" />.  
  
Die Implementierung kann auch Ausnahmen auslösen, wenn eines der Argumente, die die benutzerdefinierte Markup Erweiterung benötigt, um einen Wert anzugeben, NULL ist, für den Datentyp ungültig ist oder keinen Wert enthält, der von der Markup Erweiterung verarbeitet werden kann. Die empfohlene Ausnahme, die ausgelöst werden soll, ist <see cref="T:System.InvalidOperationException" />.</para></block>
        <altmember cref="T:System.Windows.Markup.IProvideValueTarget" />
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/db07a952-05ce-4aa4-b6f9-aac7397d0326">Typkonverter oder Markup Erweiterungen für XAML</related>
        <related type="Article" href="https://msdn.microsoft.com/library/261b2b11-2dc0-462f-8c66-55b8c9c6e436">Übersicht über Markuperweiterungen für XAML</related>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="AmbientAttribute" FullName="System.Windows.Markup.AmbientAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8940c9af8443fa74c3df87a691135082d2648d55" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56354857" /></Metadata><TypeSignature Language="C#" Value="public sealed class AmbientAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AmbientAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.AmbientAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AmbientAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class AmbientAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type AmbientAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gibt an, dass eine Eigenschaft oder ein Typ als Umgebung behandelt werden soll. Das Umgebungskonzept bezieht sich darauf, wie XAML-Prozessoren Typbesitzer von Membern bestimmen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Ambiente-Eigenschaft ist eine Eigenschaft, in denen der Wert muss in der Parserkontext verfügbar sein, beim Erstellen eines Objektdiagramms, aber bei der Suche nach typischen Typ-Membern angehalten wird, im Rahmen der unmittelbaren XAML-Knoten festgelegt, wird erstellt. Es gibt zwei Hauptszenarien für das Umgebungskonzept:  
  
-   Eine andere Eigenschaft desselben Objekts wirkt sich darauf aus, und qualifiziert die Funktionsweise dieser Lookup Objekteigenschaft.  
  
-   Die Eigenschaft darstellt, eine größere verzögerungsmechanismus wird und die ambient-Funktionen für die Suche nach einem Elementwert zu erweitern, auf alle Objekte innerhalb des aktuellen Objekts.  
  
 Dieses Attribut kann auf bestimmte Eigenschaften, die Container erwartet haben, mit denen ein Suchverhalten ambient-Eigenschaft angewendet werden, oder Sie kann auf eine Klasse, um das Verhalten der ambient-Eigenschaft in allen Fällen dieses Werttyps für eine Eigenschaft aktivieren angewendet werden.  
  
 <xref:System.Windows.Markup.AmbientAttribute> kann auch auf eine CLR-Methode, zur Unterstützung eine anfügbare XAML-Eigenschaft als ambient Attributierung angewendet werden. Dies ist möglicherweise erforderlich, da in einer CLR-Implementierung eine XAML angefügten Eigenschaft implementiert/für die Reflektion als ein Accessor-Muster mit dargestellt wird `get` und `set` Methoden. Keine tatsächliche CLR-Eigenschaft zum Attribut vorhanden ist, also eingeschränkt Nutzung für <xref:System.AttributeTargets> zu `Property` nicht hätte einen anfügbaren Member als Umgebung angeben. Attribut für ein anfügbarer Member, die Sie als Umgebung melden möchten, die `get` Accessor. Sie sollten nicht zu Attribut-Methoden, die nicht speziell Unterstützungsmethoden anfügbaren Member sind.  
  
 In früheren Versionen von .NET Framework war diese Klasse in der Assembly "WPF-spezifische" WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.AmbientAttribute> befindet sich in der System.Xaml-Assembly. Weitere Informationen finden Sie unter [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
 Ambient-Typen (Typen, bei denen <xref:System.Windows.Markup.AmbientAttribute> auf Typebene angewendet wird) kann für bestimmte XAML-Verarbeitungssituationen, in denen der Typ einer Eigenschaft aufgelöst werden außerhalb der Reihenfolge muss, verwendet werden.  
  
## <a name="object-writer-scenarios"></a>Objekt-Writer-Szenarien  
 Wenn Sie einen XAML-Objektwriter definieren und einer Eigenschaft/Methode oder Typ treten, in denen <xref:System.Windows.Markup.AmbientAttribute> wird angewendet, Sie in der Regel müssen Zugriff auf einen Dienst, um das Suchverhalten vorgesehenen ambient-Eigenschaft zu ermitteln, die zum Ausgeben von Objekten erforderlich ist. Weitere Informationen finden Sie unter <xref:System.Xaml.IAmbientProvider>.  
  
## <a name="value-converters"></a>Wertkonverter  
 Typkonverter oder Markuperweiterungen müssen möglicherweise die Ambiente-Informationen, um Eigenschaften zu verarbeiten, die indirekte typzuordnungen, z. B. Eigenschaften darstellen, die vom Zeichenfolgennamen mit oder ohne Qualifikation Membern oder Typen angeben. In diesem Szenario <xref:System.Windows.Markup.AmbientAttribute> nicht direkt für den Wert Code Konverterlogik verwendet werden soll. Stattdessen der Wertkonverter sollte sich nur auf die XAML-Writer Verarbeitungsverhalten, das erfolgreich abgeschlossen werden, <xref:System.Xaml.IAmbientProvider> in seinen Dienstkontexten auf Ihre Wert Konverter als aufgerufen.  
  
## <a name="wpf-scenarios-for-ambientattribute"></a>WPF-Szenarios für AmbientAttribute  
  
-   Eine Eigenschaft einer <xref:System.Windows.Style> (<xref:System.Windows.Style.TargetType%2A>) können die erforderliche Eigenschaft Suchvorgänge nach, die erforderlich sind, finden Sie unterstützende Verweise für Eigenschaftsnamen in qualifizieren <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> Werte.  
  
-   Sämtlicher Inhalt innerhalb einer `Resources` Eigenschaft (Elemente eine <xref:System.Windows.ResourceDictionary>) sowie den Inhalt der Vorlage muss auf andere Peers als Werte zugreifen. Deklarieren die gesamte `Resources` Eigenschaft als ambient ruft Logik, die dadurch in der WPF XAML-Parser.  
  
 Finden Sie unter <xref:System.Windows.ResourceDictionary> ein Beispiel für ein Szenario für die Einstellung <xref:System.Windows.Markup.AmbientAttribute> auf Typebene.  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
    <altmember cref="T:System.Xaml.XamlMember" />
    <altmember cref="T:System.Xaml.IAmbientProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/5dfb299a-b6e2-41b8-8694-e6ac987547f1">XAML-bezogene CLR-Attribute für benutzerdefinierte Typen und Bibliotheken</related>
    <related type="Article" href="https://msdn.microsoft.com/library/c2667cbd-2f46-4a7f-9dfc-53696e35e8e4">Definieren von benutzerdefinierten Typen für die Verwendung mit .NET Framework-XAML-Diensten</related>
    <related type="Article" href="https://msdn.microsoft.com/library/0e11f386-808c-4eae-9ba6-029ad7ba2211">NET-XAML Services-Dokumentation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbientAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.AmbientAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbientAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Markup.AmbientAttribute" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f959ba4354f451b9230608a8c50365b809ea10ca" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39795807" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <TypeSignature Language="F#" Value="type INameScope = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert einen Verfahrensvertrag für den Zugriff auf Elemente in einem bestimmten XAML-Namescope und für das Erzwingen der Eindeutigkeit von Namen in diesem XAML-Namescope.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Schnittstelle wird von Klassen implementiert, die über untergeordnete Elemente verfügen, die wiederverwendet werden, über die Vorlage oder die defer-Metapher vorgesehen sind. Vorlagen, Factorys und ähnliche Konstrukte müssen eindeutige XAML-Namescopes, die aus einem Diagramm Hauptobjekt getrennt sind und die Stamm-XAML. Im hier gilt, dass es sollten keine Namenskonflikte sein, wenn Objekte erstellt, die von dieser untergeordneten Elemente einer Anwendung Objektdiagramm eingeführt werden, und DOM-Operationen und XAML-Verweis-Techniken, die auf den Namensbezeichner basieren auf Namen verlassen können die Eindeutigkeit in jeder XAML-Namescope.  
  
 In früheren Versionen von .NET Framework war diese Schnittstelle in der Assembly "WPF-spezifische" WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> befindet sich in der System.Xaml-Assembly. Weitere Informationen finden Sie unter [aus WPF zu System.Xaml migrierte Typen](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
## <a name="wpf-usage-notes"></a>Hinweise zur WPF-Verwendung  
 Diese Schnittstelle wird von der WPF-Klasse implementiert <xref:System.Windows.NameScope>. Die meisten Vorgänge der XAML-Namescope in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] mithilfe der <xref:System.Windows.NameScope> -Instanzen, sondern auch Informationen wird gelegentlich übermittelt, intern mit <xref:System.Windows.Markup.INameScope> verweisen.  
  
 Beispiele für WPF-Klassen, die eine Factory oder zurückstellen Metapher, die zusammen mit Ihrer Darstellung in XAML sind <xref:System.Windows.Style> und <xref:System.Windows.FrameworkTemplate>. Diese Implementierungen beruhen zumeist auf die explizite Versionen der Schnittstellenmethoden verfügbar sind, aus der <xref:System.Windows.NameScope> Klasse.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member FindName : string -&gt; obj" Usage="iNameScope.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Namensbezeichner für das angeforderte Objekt.</param>
        <summary>Gibt ein Objekt zurück, das den bereitgestellten kennzeichnenden Namen aufweist.</summary>
        <returns>Das ggf. gefundene Objekt. Gibt <see langword="null" /> zurück, wenn kein Objekt dieses Namens gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gültige Zeichenfolgen im XAML-Markup müssen die Anforderungen finden Sie im entsprechen [XamlName-Grammatik](~/docs/framework/xaml-services/xamlname-grammar.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit" Usage="iNameScope.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Der zu registrierende Name.</param>
        <param name="scopedElement">Das bestimmte Element, auf das <c>name</c> verweist.</param>
        <summary>Registriert den bereitgestellten Namen im aktuellen XAML-Namescope.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Doppelte Namen in einem XAML-Namescope sind nicht zulässig.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Erlauben Sie keine doppelte Namen registriert werden. Wenn die Eingabe <paramref name="name" /> ist bereits mit einem vorhandenen Element in der internen Darstellung der XAML-Namescope zugewiesen (selbst wenn es sich um einen identisch ist <paramref name="scopedElement" />), löst eine Ausnahme aus.  Berücksichtigen Sie auch eine Ausnahme auszulösen, wenn der angegebene Name nicht entspricht [XamlName-Grammatik](~/docs/framework/xaml-services/xamlname-grammar.md).</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit" Usage="iNameScope.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, dessen Registrierung aufgehoben werden soll.</param>
        <summary>Hebt die Registrierung des bereitgestellten Namens im aktuellen XAML-Namescope auf.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Wenn der Eingabename nicht vorhanden ist, wird eine Ausnahme ausgelöst.  Sie sollten den Namen und das zuvor registrierte-Element, auf die, das Sie aus der Auflistung-Darstellung des XAML-Namescope, verweist, entfernen, sodass Sie der gleiche Namen möglicherweise erneut in der Zukunft registriert werden konnte.</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IProvideValueTarget" FullName="System.Windows.Markup.IProvideValueTarget">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3ee33577ac89d42592b4312a85b5bb89b3f04916" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65004482" /></Metadata><TypeSignature Language="C#" Value="public interface IProvideValueTarget" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProvideValueTarget" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IProvideValueTarget" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProvideValueTarget" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProvideValueTarget" />
  <TypeSignature Language="F#" Value="type IProvideValueTarget = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Dienst dar, der situationsbedingte Objekteigenschaftsbeziehungen zur Auswertung der Markuperweiterung meldet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.IProvideValueTarget>stellt einen Dienst dar, der Informationen über die Objekt Eigenschafts Struktur meldet, in der ein Wert Konverter aufgerufen wird.  
  
 Typkonverter und Markup Erweiterungen können <xref:System.Windows.Markup.IProvideValueTarget> als Dienst im Dienst Kontext Abfragen, der von einem XAML-objektwriter bereitgestellt wird, wenn der XAML-objektwriter das Wert Konvertierungs Verhalten aufruft. Weitere Informationen finden Sie unter [Typkonverter und Markup Erweiterungen für XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) und [Dienst Kontexte, die für Typkonverter und Markup Erweiterungen verfügbar sind](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).  
  
 Insbesondere bei Markup Erweiterungen ist es nützlich, <xref:System.Windows.Markup.IProvideValueTarget> die Gültigkeit der situationsbedingten Verwendung ihrer Markup Erweiterung zu bestimmen. Beispielsweise kann Ihre Markup Erweiterung einen Wert Verzögerungs Mechanismus implementieren, aber die Verwendung dieses Mechanismus ist möglicherweise nur geeignet, wenn das Zielobjekt andere Komponenten des Verzögerungs Mechanismus zur Laufzeit verwenden kann. Sie können die typsystemeigenschaften des Objekts, das als <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> zurückgegeben wird, überprüfen und sicherstellen, dass das Objekt das Verzögerungs Verfahren unterstützt. Wenn dies der Fall ist, gibt Ihre Markup Erweiterung einen Wert zurück. wenn dies nicht der Fall ist, löst die Markup Erweiterung eine Ausnahme aus, die von einem XAML-objektwriter als innere Ausnahme übernommen wird. Ein ähnliches Szenario ist das sicherzustellen, dass eine bestimmte Eigenschaft eine Funktion unterstützt, indem die <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>typsystemmerkmale von überprüft werden.  
  
 Obwohl der API- <xref:System.Windows.Markup.IProvideValueTarget> Name möglicherweise eine <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType>Zuordnung zu impliziert, können die <xref:System.Windows.Markup.IProvideValueTarget> von gemeldeten Informationen auch für eine <xref:System.ComponentModel.TypeConverter> oder <xref:System.Windows.Markup.ValueSerializer>eine nützlich sein. <xref:System.ComponentModel.TypeConverter> Oder<xref:System.Windows.Markup.ValueSerializer> verfügen in der Regel über einen größeren Kontext als eine Markup Erweiterung, da Sie für einen bestimmten Zieltyp oder eine bestimmte Ziel Eigenschaft reserviert sind. Daher ist die Gültigkeitsdauer in der Regel im Typsystem vorhersagbar. Es gibt jedoch auch andere Szenarien. Im folgenden finden Sie eine Liste der Szenarien, die entweder von einem Typkonverter oder einer Markup Erweiterung implementiert werden können:  
  
-   <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> Zum Lesen von Instanzwerten anderer Eigenschaften in diesem Objekt. Beachten Sie, dass die Verarbeitung hier möglicherweise robust ist, wenn die Werte nicht festgelegt werden, da die Verarbeitungsreihenfolge von XAML-Elementen für das Zielobjekt nicht deterministisch sein kann.  
  
-   <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> Zum Lesen von Metadaten auf Typebene oder zum Überprüfen, ob erforderliche Schnittstellen vom Typ implementiert werden.  
  
-   <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> Zum Lesen von Eigenschafts Metadaten.  
  
 Ein Szenario ist die Verwendung <xref:System.Windows.Markup.IProvideValueTarget> von Informationen, um einzuschränken, welche Objekte oder Eigenschaften von ihrer Markup Erweiterung festgelegt werden dürfen.  
  
 Bevor Sie versuchen, den Dienst zu verwenden, stellen Sie sicher, dass der `null` Dienst selbst nicht durch den relevanten Dienstanbieter Parameter, den Sie für den Kontext verwenden, zurückgegeben wird.  
  
> [!IMPORTANT]
>  Wenn Sie den-Dienst verwenden, ist es besonders wichtig, das Objekt, auf das <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> von der-Eigenschaft verwiesen wird, oder andere Objekte zu ändern, auf die dieses Objekt verweist. Speziell für WPF können diese Änderungen unerwartete Änderungen verursachen, die das WPF-Eigenschaften System für ungültig erklären.  
  
> [!NOTE]
>  Verwenden Sie nicht den Typ von <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> , um zu bestimmen, welcher präzise Typ von einer Markup Erweiterung oder einem Typkonverter zurückgegeben werden soll. Dies ist keine bewährte Vorgehensweise. Der Rückgabetyp muss mit der Attributierung<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> (für Markup Erweiterungen) oder Mustern (Klassenname des Typkonverters) konsistent sein.  
  
 In früheren Versionen des .NET Framework war diese Schnittstelle in der WPF-spezifischen Assembly Windows Base vorhanden. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]befindetsichin derSystem.XAML-Assembly.<xref:System.Windows.Markup.IProvideValueTarget> Weitere Informationen finden Sie unter [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
## <a name="wpf-usage-notes"></a>Hinweise zur WPF-Verwendung  
 Dieser Dienst unterstützt Frameworkfeatures wie z. b. die Bindung für eine Abhängigkeits Eigenschaft  
  
 In WPF kann der durch <xref:System.Windows.Markup.IProvideValueTarget> dargestellte Dienst Objekte und Eigenschaften für Situationen zurückgeben, in denen der Wert, der von einer Markup Erweiterung oder einem Typkonverter zurückgegeben wird, vom Kontext abhängig ist.  
  
 <xref:System.Windows.Markup.IProvideValueTarget>wird stark in der internen Implementierung von <xref:System.Windows.Data.BindingBase>genutzt, der Klasse, die den Bindungs Mechanismus für Abhängigkeits Eigenschaften in WPF implementiert.  
  
 Ein interner Standard Dienstanbieter für WPF wird <xref:System.Windows.Markup.IProvideValueTarget> für die Verwendung durch eine benutzerdefinierte Markup Erweiterung oder einen Typkonverter implementiert. Das von <xref:System.Windows.Markup.IProvideValueTarget> gemeldete Objekt und die Eigenschaft können nur vom internen WPF-Dienst festgelegt werden. Wenn Sie diese Definition <xref:System.Windows.Markup.IProvideValueTarget> nicht überschreiten, müssen Sie einen eigenen Dienstanbieter für Markup Erweiterungen und Typkonverter-Verwendungen definieren, die mindestens die <xref:System.Windows.Markup.IProvideValueTarget> Dienste und <xref:System.Windows.Markup.IXamlTypeResolver> implementieren, und das ist eine erweiterte Szenario, das hier nicht beschrieben wird.  
  
 Ein NULL-Wert <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> für <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> oder bedeutet nicht notwendigerweise, dass eine Markup Erweiterung oder ein Typkonverter nicht agieren kann, obwohl dies von ihrer Implementierung abhängt. Ein Beispiel Fall, bei dem die <xref:System.Windows.Markup.IProvideValueTarget> Werte aus null sind, selbst wenn der Dienst verfügbar ist, wenn die Markup Erweiterung in einer anderen Markup Erweiterung geschachtelt <xref:System.Windows.Data.Binding>ist, z. b. Eine-Implementierung, die <xref:System.Windows.Markup.IProvideValueTarget> auf basiert, sollte immer auf NULL-Werte überprüfen, wenn Sie nur eine bestimmte Ausnahme auslösen, wenn dies Ihr beabsichtigter Entwurf ist.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
    <altmember cref="T:System.Windows.Markup.MarkupExtension" />
    <altmember cref="T:System.IServiceProvider" />
  </Docs>
  <Members>
    <Member MemberName="TargetObject">
      <MemberSignature Language="C#" Value="public object TargetObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetObject : obj" Usage="System.Windows.Markup.IProvideValueTarget.TargetObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Zielobjekt ab, das gemeldet wird.</summary>
        <value>Das gemeldete Zielobjekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der von <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> zurückgegebene Wert ist der tatsächliche Verweis, kein Typsystem Bezeichner oder ein anderer Bezeichner. Der Wert kann auch sein `null`. siehe <xref:System.Windows.Markup.IProvideValueTarget>.  
  
> [!IMPORTANT]
>  Wenn Sie den-Dienst verwenden, ist es besonders wichtig, das Objekt, auf das <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> von der-Eigenschaft verwiesen wird, oder andere Objekte, auf die von diesem Objekt verwiesen wird, als Eigenschaften zu ändern, die nicht spezifisch den von Ihnen verwendeten Wert Konvertierungs Fall sind. Speziell für WPF kann das Ändern des Zielobjekts unerwartete Änderungen verursachen, die das WPF-Eigenschaften System für ungültig erklären.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
        <related type="Article" href="https://msdn.microsoft.com/library/db07a952-05ce-4aa4-b6f9-aac7397d0326">Typkonverter oder Markup Erweiterungen für XAML</related>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public object TargetProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetProperty As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetProperty { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetProperty : obj" Usage="System.Windows.Markup.IProvideValueTarget.TargetProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Bezeichner für die Zieleigenschaft ab, die gemeldet wird.</summary>
        <value>Ein Bezeichner für die Zieleigenschaft, die gemeldet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert kann auch sein `null`. siehe <xref:System.Windows.Markup.IProvideValueTarget>.  
  
## <a name="wpf-usage-notes"></a>Hinweise zur WPF-Verwendung  
 Für eine Abhängigkeits Eigenschaft kann der WPF-Standard Dienst eine <xref:System.Windows.DependencyProperty>zurückgeben, sodass die Markup Erweiterung oder der Typkonverter Metadaten verwenden kann. Andernfalls kann das zurückgegebene Objekt ein <xref:System.Reflection.PropertyInfo> für eine CLR-Eigenschaft sein.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
        <related type="Article" href="https://msdn.microsoft.com/library/db07a952-05ce-4aa4-b6f9-aac7397d0326">Typkonverter oder Markup Erweiterungen für XAML</related>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="XmlLanguage" FullName="System.Windows.Markup.XmlLanguage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="949b5d2e6f4e8bbe51d550b6df6cca7d0c9978c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658644" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguage" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguage" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.XmlLanguageConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Sprachtag dar, das in XAML-Markup verwendet werden soll.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die-Sprachtag, vielleicht aber verfügen möglicherweise nicht über ein registriertes <xref:System.Globalization.CultureInfo> vorhanden Systemlast, bei dem der XAML-Code interpretiert wird.  
  
 Diese Klasse ist hilfreich für den Umgang mit Werten, die mit dargestellt `xml:lang` im XML-Format.  
  
 Sprachtags können in Form von zwei Zeichen oder in einer getrennten Sprachgebietsschema Form angegeben werden. Finden Sie unter [RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454).  
  
 Beachten Sie, dass die XML-Spezifikation für eine leere Zeichenfolge ermöglicht `xml:lang`, RFC 3066 nicht zulässig ist daher die <xref:System.Windows.Markup.XmlLanguage> erlaubt geben "" (leere Zeichenfolge). Ein mit den Standardwerten konstruiertes <xref:System.Windows.Markup.XmlLanguage> verhält sich wie mit erstellt "" (leere Zeichenfolge).  
  
<a name="xamlAttributeUsage_XmlLanguage"></a>   
## <a name="xaml-attribute-usage"></a>Verwendung von XAML-Attributen  
  
```  
<object property="prefix"/>  
- or -  
<object property="prefix-subcode"/>  
```  
  
<a name="xamlValues_XmlLanguage"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 *prefix*  
 Language-Präfix, verwenden die Präfixwerte für ISO 639-1-Sprache. Z. B. "En" oder "Zh". Werte in Großbuchstaben werden akzeptiert und in Kleinbuchstaben konvertiert wurden. Dies kann auch ein leeres Attribut sein "".  
  
 *subcode*  
 Wenn angegeben, muss einen einzelnen Bindestrich vorangestellt sein. Klicken Sie dann ein Untercode gemäß RFC 3066. Die häufigste Verwendung, und derjenigen, die höchstwahrscheinlich ordnungsgemäß zugeordnet ist eine <xref:System.Globalization.CultureInfo>, ist ein Land oder eine Bezeichnung wie "-de" oder "-Hk". Werte in Großbuchstaben werden akzeptiert und in Kleinbuchstaben konvertiert wurden.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XmlLanguage Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XmlLanguage ^ Empty { System::Windows::Markup::XmlLanguage ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine statische <see cref="T:System.Windows.Markup.XmlLanguage" />-Instanz ab, so wie diese von <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> mit dem Sprachtag als leere Attributzeichenfolge erstellt würde.</summary>
        <value>Die Version von <see cref="T:System.Windows.Markup.XmlLanguage" /> mit einem leeren Sprachtag, die für Vergleichsoperationen verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Wert ist faktisch die <xref:System.Windows.Markup.XmlLanguage> entspricht <xref:System.String.Empty?displayProperty=nameWithType>, deren <xref:System.Windows.Markup.XmlLanguage.GetEquivalentCulture%2A> Ergebnis <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEquivalentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetEquivalentCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetEquivalentCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEquivalentCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetEquivalentCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die entsprechende äquivalente <see cref="T:System.Globalization.CultureInfo" /> für diese <see cref="T:System.Windows.Markup.XmlLanguage" /> nur dann zurück, wenn diese <see cref="T:System.Globalization.CultureInfo" /> für den <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />-Wert der <see cref="T:System.Windows.Markup.XmlLanguage" /> registriert ist.</summary>
        <returns>Eine <see cref="T:System.Globalization.CultureInfo" />, mit der Aufrufe der Lokalisierungs- und Globalisierungs-API ausgeführt werden können, die den Typ als Argument verwenden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn keine Entsprechung <xref:System.Globalization.CultureInfo> möglich erzeugt, gibt diese Methode eine Ausnahme auslöst. Wenn Sie nicht, um Ausnahmen zu behandeln möchten, rufen <xref:System.Windows.Markup.XmlLanguage.GetSpecificCulture%2A> stattdessen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Für die bereitgestellte <see cref="T:System.Globalization.CultureInfo" /> ist keine registrierte <see cref="T:System.Windows.Markup.XmlLanguage" /> vorhanden, wie dies von einem Aufruf von <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" /> festgelegt ist.</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage GetLanguage (string ietfLanguageTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguage (ietfLanguageTag As String) As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::XmlLanguage ^ GetLanguage(System::String ^ ietfLanguageTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ietfLanguageTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ietfLanguageTag">Ein RFC 3066-Sprachzeichenfolge oder eine leere Zeichenfolge.</param>
        <summary>Gibt eine <see cref="T:System.Windows.Markup.XmlLanguage" />-Instanz zurück, die auf einer Zeichenfolge basiert, die gemäß RFC 3066 die Sprache darstellt.</summary>
        <returns>Eine neue <see cref="T:System.Windows.Markup.XmlLanguage" /> mit der angegebenen Zeichenfolge als deren <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />-Wert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist effektiv der Konstruktor.  
  
 Die Sprachenzeichenfolge kann leer sein, sonst entsprechen [RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454) Regeln:  
  
-   Das erste untergeordnete Tag muss bestehen nur [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] Buchstaben.  
  
-   Die weiteren untergeordneten Tags bestehen müssen [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] Buchstaben oder Ziffern.  
  
-   Untergeordnete Tags werden durch einen einzelnen Bindestrich getrennt.  
  
-   Jedes untergeordnete Tag muss 1 bis 8 Zeichen lang sein.  
  
-   Keine führenden oder nachgestellten Bindestriche sind nicht zulässig.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Der <paramref name="ietfLanguageTag" />-Parameter darf nicht NULL sein.</exception>
        <exception cref="T:System.ArgumentException">
          Der <paramref name="ietfLanguageTag" />-Parameter war zwar nicht leer, entsprach aber nicht der Syntax gemäß RFC 3066.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpecificCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetSpecificCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetSpecificCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecificCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetSpecificCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die nicht neutrale <see cref="T:System.Globalization.CultureInfo" /> für die <see cref="T:System.Windows.Markup.XmlLanguage" /> zurück, die am engsten mit dieser verwandt ist.</summary>
        <returns>Eine <see cref="T:System.Globalization.CultureInfo" />, mit der Aufrufe der Lokalisierungs- und Globalisierungs-[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] ausgeführt werden können, die den Typ als Argument verwenden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese <xref:System.Windows.Markup.XmlLanguage> gleich <xref:System.Windows.Markup.XmlLanguage.Empty%2A?displayProperty=nameWithType> dieser Methode zurückgegeben <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 Diese Methode sucht die registrierte <xref:System.Globalization.CultureInfo> Präfixsuche längsten möglichen dieses <xref:System.Windows.Markup.XmlLanguage>. Wenn die registrierte <xref:System.Globalization.CultureInfo> ist neutral (<xref:System.Globalization.CultureInfo.IsNeutralCulture%2A> ist `true`), und klicken Sie dann einen Aufruf dieser Methode abhängt <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> für die Zuordnung einer neutrale <xref:System.Globalization.CultureInfo> auf eine bestimmte Einstellung.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Für das aktuelle <see cref="T:System.Globalization.CultureInfo" /> ist keine verwandte nicht neutrale <see cref="T:System.Windows.Markup.XmlLanguage" /><see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> registriert.</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolgendarstellung des Sprachtags ab.</summary>
        <value>Die Zeichenfolgendarstellung des Sprachtags.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft kann eine normalisierte Version der ursprünglich angegebenen Zeichenfolge zurück, wie für die <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 Diese Eigenschaft kann auch zurückgeben <xref:System.String.Empty> , wenn eine leere Zeichenfolge bereitgestellt wurde <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine <see cref="T:System.String" /> zurück, die das aktuelle <see cref="T:System.Windows.Markup.XmlLanguage" /> darstellt.</summary>
        <returns>Ein <see cref="T:System.String" />, der den aktuellen <see cref="T:System.Windows.Markup.XmlLanguage" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies gibt die <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A> Wert des aktuellen <xref:System.Windows.Markup.XmlLanguage>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
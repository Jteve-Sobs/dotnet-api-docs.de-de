<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="35c41088e2d1020cd99f7570565c144f44b3e76c" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70500266" /></Metadata><TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <TypeSignature Language="F#" Value="type XamlReader = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Liest XAML-Eingabe und erstellt ein Objektdiagramm und verwendet dazu den WPF-XAML-Standardparser sowie einen zugeordneten XAML-Objektwriter.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die synchronen <xref:System.Windows.Markup.XamlReader.Load%2A> Methoden sind statisch, aber die asynchronen <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> Methoden sind nicht statisch und erfordern eine Instanz der <xref:System.Windows.Markup.XamlReader> -Klasse für die Verwendung von.  
  
 Bei der Ausgabe der `Load` -Methoden handelt es sich um ein einzelnes-Objekt, das das Stamm Objekt einer erstellten Objektstruktur oder eines Objekt Diagramms darstellt. Objekt Diagramme, die von <xref:System.Windows.Markup.XamlReader> erstellt werden, werden in der Regel der vorhandenen Objektstruktur einer WPF-Anwendung zur Laufzeit hinzugefügt. Andernfalls wird das neue Objekt Diagramm für Zwecke des WPF-Anwendungs Modells als getrennt betrachtet. Dies bedeutet, dass Sie nicht mit einer der Objektstruktur Verfahren, die auf die Hauptobjekt Struktur der WPF-Anwendung angewendet werden, und nicht darauf zugegriffen werden kann (z. <xref:System.Windows.FrameworkElement.FindName%2A>b <xref:System.Windows.LogicalTreeHelper>. <xref:System.Windows.Media.VisualTreeHelper>die APIs,,). Weitere Informationen zu Objektstruktur Konzepten finden Sie Unterstrukturen [in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.Markup.XamlReader>unterstützt die folgenden primären Szenarien:  
  
-   **Klonen/Objektfactory**: ohne zusätzliche Mechanismen kann ein Verweistyp im Allgemeinen nicht in einer WPF-Objektstruktur an mehr als einer Position eingeschlossen werden. (Beispiele für zusätzliche Mechanismen, die Unterstützung für die Freigabe oder Wiederverwendung in WPF bieten, sind Objekte, <xref:System.Windows.Freezable>die auf basieren, oder die Unterstützung für häufig <xref:System.Windows.Media.Brush> freigegebene Objekte wie z <xref:System.Windows.ResourceDictionary>. b., auf die als Element von verwiesen wird.) Eine Möglichkeit, ein Objekt zu klonen, das sich bereits in der Objektstruktur befindet, besteht darin, <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>das-Objekt mithilfe von zu serialisieren. Anschließend verwenden Sie die serialisierte Zeichenfolge als Eingabe für einen aufzurufenden <xref:System.Windows.Markup.XamlReader.Load%2A>Datenstrom oder <xref:System.Xml.XmlReader> als Vermittler.  
  
-   **Erstellen von Objekten auf der Grundlage von Just-in-Time-Informationen**: Es gibt oftmals andere Möglichkeiten, eine spät Bindung oder eine vom Benutzer bereitgestellte Eingabe zu ändern. Beispielsweise können Sie denselben Wert verwenden, um mehr als eine Eigenschaft festzulegen oder die Datenbindung zu verwenden. Wenn Sie jedoch ein Szenario haben, in dem auch der Typ des zu erstellenden Objekts nur zur Laufzeit oder bei der Benutzerinteraktion bestimmt werden kann, ist das Erstellen eines solchen Objekts durch <xref:System.Windows.Markup.XamlReader.Load%2A> das Erstellen einer Zeichenfolge für die Eingabe häufig eine sinnvolle Methode.  
  
-   **Verwenden vorhandener Ressourcen Techniken**: <xref:System.IO.Stream> der Typ wird häufig in anderen Frameworks oder Technologien zum Übertragen von Daten oder Objekten über Anwendungsgrenzen hinweg oder in ähnlichen Situationen verwendet. Anschließend können Sie die <xref:System.IO.Stream> Techniken verwenden, um XAML-formatierte Daten zu speichern oder abzurufen, die Sie letztendlich verwenden, um ein Objekt als Teil der Anwendung zu erstellen.  
  
-   **Behobene Dokumente:** Die Anwendung lädt möglicherweise lokale oder heruntergeladene XPS-Dokumente für die Einbindung in eine WPF-Anwendungs Objektstruktur und-Benutzeroberfläche.  
  
> [!NOTE]
>  In dieser Dokumentation wird manchmal ein Objekt Diagramm und nicht eine Objektstruktur beschrieben. Eine strikte Beziehung zwischen übergeordneten und untergeordneten Elementen ist nicht immer in den Laufzeitobjekt Beziehungen einer Laufzeit-WPF-Anwendung vorhanden, sodass ein Objekt Diagramm eine allgemeinere Terminologie ist. Da WPF jedoch auch zwei unterschiedliche strukturkonzeptionalisierungs-APIs (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) enthält, gilt die Struktur-Metapher weiterhin angemessen für die meisten realen Fälle in WPF. Aus der XAML-sprach Perspektive ist das Objekt Diagramm oft die beste Methode, um zu überprüfen, wie Objekte aus XAML erstellt werden, da die XAML-Sprache selbst nicht notwendigerweise hilfsklassenmethodologien angibt, die die Beziehungen in eine die Struktur erneut.  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a>Code Zugriffssicherheit, Loose XAML und XamlReader  
 XAML ist eine Markupsprache, die Objektinstanziierung und -ausführung direkt darstellt. Daher verfügen in XAML erstellte Elemente über dieselbe Fähigkeit zur Interaktion mit Systemressourcen (z.B. Netzwerkzugriff, Dateisystem E/A), wie der gleichwertig generierte Code.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]unterstützt [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] das- [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]Sicherheits Framework. Dies bedeutet, dass in der Internetzone ausgeführter [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Inhalt eingeschränkte Ausführungsberechtigungen hat. "Loose XAML" (Seiten nicht kompilierten XAML-Codes, die beim Laden von einem XAML-Viewer interpretiert werden) und [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] werden normalerweise in dieser Internetzone ausgeführt und verwenden die gleiche Berechtigungsmenge.  Wenn XAML allerdings in eine voll vertrauenswürdige Anwendung geladen wird, hat es den gleichen Zugriff auf Systemressourcen wie die Hostanwendung. Weitere Informationen finden Sie unter [WPF-Sicherheit mit teilweiser Vertrauenswürdigkeit](~/docs/framework/wpf/wpf-partial-trust-security.md).  
  
 Die Auswirkungen dieser-Anweisungen auf <xref:System.Windows.Markup.XamlReader> sind, dass ihr Anwendungs Entwurf Entscheidungen über die XAML treffen muss, die Sie laden möchten. Wenn Sie XAML laden, das nicht vertrauenswürdig ist, sollten Sie eine eigene Sandkasten Technik implementieren, um zu erfahren, wie Sie das resultierende Objekt Diagramm laden.  
  
 <xref:System.Windows.Markup.XamlReader>kann auch von teilweise vertrauenswürdigem Code aufgerufen werden. In diesem Fall wird die Internet Sicherheitszone auf die Code Zugriffssicherheit angewendet. Wenn eine der geladenen XAML-Elemente in der Internet Sicherheitszone ungültig ist, wird eine XAML-Analyse Ausnahme ausgelöst. Unter XBAP und anderen Fällen, die teilweiser Vertrauenswürdigkeit auf Platt Form Ebene <xref:System.Windows.Markup.XamlReader> sind, wobei Teil der Ausführung ist, erhalten Sie das gleiche Ausnahme Verhalten wie bei expliziten partiellen Vertrauens aufrufen.  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a>WPF-XAML, XAML-Reader/Writer und XAML-sprach Versionsverwaltung  
 XAML2009 enthält sprach Features wie [x:Reference](~/docs/framework/xaml-services/x-reference-markup-extension.md) und [x:factorymethod](~/docs/framework/xaml-services/x-factorymethod-directive.md). Sie können Signaturen von `Load` oder `Parse` verwenden, um XAML zu laden, das diese Funktionen verwendet. Diese Sprachfunktionen werden jedoch nicht für XAML unterstützt, das Markup kompiliert werden muss (z. b. XAML für die **Seite** "Buildaktion" in einer WPF-Anwendung), oder XAML, das die Markup Kompilierungs Aufgabe in den Buildaktionen umfasst.  
  
 WPF-Typen und die WPF-Technologie in allgemeinen unterstützen Konzepte, die auf den Zugriff auf WPF-internale basieren. Beispielsweise basiert WPF bei der Implementierung von Abhängigkeits Eigenschaften auf internen Techniken für eine effiziente Typmember-Suche. Der Zugriff auf diese internale wird durch die XAML-Lese-und-Schreib <xref:System.Windows.Markup.XamlWriter> - <xref:System.Windows.Markup.XamlReader> APIs ermöglicht <xref:System.Windows.Markup> , die in und aus der Namespace-und presentationframework-Assembly enthalten sind. Die untergeordneten XAML-Reader und XAML-Writer aus der Assembly "System. XAML" (Klassen, <xref:System.Xaml.XamlReader?displayProperty=nameWithType>die <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>auf, basieren) haben jedoch keinen Zugriff auf die WPF-internale. Es gibt keine Abhängigkeit von System. XAML zu einer WPF-spezifischen Assembly. Ohne Zugriff auf die WPF-internale können System. XAML-Reader und-Writer nicht alle WPF-Typen oder-Typen auf der Grundlage von WPF-Typen ordnungsgemäß laden oder speichern. Insbesondere werden die System. XAML-Reader und-Writer keine Konzepte verstehen, wie z. b. den Eigenschafts Speicher für die WPF-Abhängigkeits Eigenschaft, oder alle Besonderheiten, wie WPF Stile, Ressourcen Wörterbücher und Vorlagen verwendet. Daher haben Sie folgende Möglichkeiten:  
  
-   Wenn Sie WPF-Typen laden und/oder XAML in BAML-Form verwenden, verwenden Sie die presentationframework-XAML-Reader und XAML-Writer.  
  
-   Verwenden Sie die System. xaml-XAML-Reader und XAML-Writer, wenn Sie sich nicht auf WPF-Typen oder die BAML-Form von XAML verlassen und keine andere XAML-Reader-oder XAML-Writer-Implementierung einer anderen Technologie verwenden.  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a>System. XAML-Unterstützungs Implementierung in .NET 4  
 <xref:System.Windows.Markup.XamlReader>die Aufruf Bare API-Oberfläche für den XAML-Parser auf WPF-Frameworkebene. Derselbe zugrunde liegende XAML-Parser führt außerdem das Lauf Zeit-XAML-laden und-Analyse für WPF- [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] Anwendungen [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]aus, die auf und abzielen.  
  
 Wenn Sie auf abzielen [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], ist die externe API identisch, aber Teile der Implementierung basieren auf der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] allgemeinen XAML-Implementierung in der System. XAML-Assembly, die viele der technischen und Berichterstattungs Aspekte bei der XAML-Verarbeitung verbessert. Die [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] Zielvorgabe erfordert, dass Sie System. XAML als Verweis einschließen, und Details der Implementierung, wie z. b. die gemeldeten Ausnahmen, stammen möglicherweise aus System. XAML-definierten Typen.  
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Windows.Controls.Button> mithilfe der <xref:System.Windows.Markup.XamlWriter> -Klasse in eine Zeichenfolge konvertiert.  Die Zeichenfolge wird dann mithilfe der statischen <xref:System.Windows.Controls.Button> <xref:System.Windows.Markup.XamlReader.Load%2A> -Methode für die <xref:System.Windows.Markup.XamlReader> -Klasse wieder in einen geladen.  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Markup.XamlReader" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="xamlReader.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bricht den aktuellen asynchronen Ladevorgang ab, wenn noch ein asynchroner Ladevorgang aussteht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A>ist ein asynchroner Vorgang. Daher kann es vorkommen, dass ein Vorgang geladen wird, bevor der Vorgang abgebrochen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberSignature Language="F#" Value="static member GetWpfSchemaContext : unit -&gt; System.Xaml.XamlSchemaContext" Usage="System.Windows.Markup.XamlReader.GetWpfSchemaContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein <see cref="T:System.Xaml.XamlSchemaContext" />-Objekt zurück, das die Kontexteinstellungen des WPF-Schemas für einen <see cref="T:System.Windows.Markup.XamlReader" /> darstellt.</summary>
        <returns>Ein <see cref="T:System.Xaml.XamlSchemaContext" />-Objekt, das die Kontexteinstellungen des WPF-Schemas für einen <see cref="T:System.Windows.Markup.XamlReader" /> darstellt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Liest XAML-Eingaben und gibt das Stammelement der entsprechenden Objektstruktur zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Das XAML, das geladen werden soll, als Stream.</param>
        <summary>Liest die XAML-Eingabe im angegebenen <see cref="T:System.IO.Stream" /> und gibt ein <see cref="T:System.Object" /> zurück, das das Stammelement der entsprechenden Objektstruktur darstellt.</summary>
        <returns>Das Objekt am Stamm der erstellten Objektstruktur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Windows.Controls.Button> mithilfe der <xref:System.IO.MemoryStream> <xref:System.Windows.Markup.XamlWriter> -Klasse in einem gespeichert. Der Stream wird dann mithilfe der statischen <xref:System.Windows.Controls.Button> <xref:System.Windows.Markup.XamlReader.Load%2A> -Methode für die <xref:System.Windows.Markup.XamlReader> -Klasse wieder in ein-Objekt geladen.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">Ein <see cref="T:System.Xaml.XamlReader" />-Objekt. Es wird davon ausgegangen, dass das Objekt mit Eingabe-XAML initialisiert wird.</param>
        <summary>Liest die XAML-Eingabe über einen bereitgestellten <see cref="T:System.Xaml.XamlReader" /> und gibt ein Objekt zurück, das das Stammelement der entsprechenden Objektstruktur darstellt.</summary>
        <returns>Das Objekt, das das Stammelement der erstellten Objektstruktur darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Eingabe <xref:System.Xaml.XamlReader> kann sein <xref:System.Windows.Baml2006.Baml2006Reader>. Auf diese Weise können Sie BAML zur Laufzeit oder für Lokalisierungs Tool Zwecke laden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see cref="T:System.Xml.XmlReader" />, der die im XML-Format zu ladende XAML-Eingabe bereits geladen hat.</param>
        <summary>Liest die XAML-Eingabe im angegebenen <see cref="T:System.Xml.XmlReader" /> und gibt ein Objekt zurück, das das Stammelement der entsprechenden Objektstruktur darstellt.</summary>
        <returns>Das Objekt, das das Stammelement der erstellten Objektstruktur darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Windows.Controls.Button> mithilfe der <xref:System.Windows.Markup.XamlWriter> -Klasse in eine Zeichenfolge konvertiert.  Die Zeichenfolge wird dann mithilfe der statischen <xref:System.Windows.Controls.Button> <xref:System.Windows.Markup.XamlReader.Load%2A> -Methode für die <xref:System.Windows.Markup.XamlReader> -Klasse wieder in einen geladen.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Der Stream, der die XAML-Eingabe enthält, die geladen werden soll.</param>
        <param name="parserContext">Vom Parser verwendete Kontextinformationen.</param>
        <summary>Liest die XAML-Eingabe im angegebenen <see cref="T:System.IO.Stream" /> und gibt ein Objekt zurück, das das Stammelement der entsprechenden Objektstruktur darstellt.</summary>
        <returns>Das Objekt, das das Stammelement der erstellten Objektstruktur darstellt.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="parserContext" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Liest XAML-Markup und gibt ein Objekt zurück, das dem Stammelement des angegebenen Markups entspricht.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream -&gt; obj" Usage="xamlReader.LoadAsync stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Der Stream, der die zu ladende XAML-Eingabe enthält.</param>
        <summary>Liest die XAML-Eingabe im angegebenen <see cref="T:System.IO.Stream" /> und gibt das Stammelement der entsprechenden Objektstruktur zurück.</summary>
        <returns>Das Objekt, das das Stammelement der erstellten Objektstruktur darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein asynchroner XAML-Ladevorgang gibt anfänglich ein Objekt zurück, das ausschließlich das Stamm Objekt ist. Asynchron wird die XAML-Verarbeitung fortgesetzt, und alle untergeordneten Objekte werden unter dem Stamm ausgefüllt. Dies steht im Gegensatz zum typischen WPF-XAML-Verarbeitungs Verhalten und seiner Interaktion mit WPF-Konzepten der Objekt Lebensdauer. In der typischen (nicht Async-) Interaktion werden alle Eigenschaften eines Objekts, einschließlich aller untergeordneten Auflistungen, ausgefüllt, bevor ein Element zurückgegeben und als geladen gemeldet wird. Dieses Verhalten entspricht einer Bottom-up-Methode zum Erstellen der Struktur, in der das Stamm Objekt das letzte Objekt ist, das verfügbar werden soll.  
  
 In der Regel weisen Sie das zurückgegebene Objekt einem Speicherort in der Objektstruktur Ihrer WPF-Anwendung zu, mit dem wissen, dass der Inhalt noch aufgefüllt wird und möglicherweise inkrementelle Layout-Aktualisierungen verursachen, wenn der gesamte Inhalt als Teil der Benutzeroberfläche verfügbar gemacht wird. Aus diesem Grund ist es typisch, asynchron geladene Objekte aus XAML zu isolieren oder zu virtualisieren und die anwendungsspezifische Logik oder den Anwendungs Zustand zu verwenden, um <xref:System.Windows.Markup.XamlReader.LoadCompleted> zu benachrichtigen, wann behandelt wird.  
  
 Damit XAML-Eingaben asynchron geladen werden können, muss das root-Element in der XAML-Eingabe das Attribut und `x:SynchronousMode="Async"`den Wert enthalten. <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> Der Wert wird bei der Groß-/Kleinschreibung behandelt. Wenn der XAML-Eingabe Stamm nicht enthält `x:SynchronousMode="Async"`, wird keine Ausnahme ausgelöst, und der-Rückruf wird als synchrone Auslastung verarbeitet ( <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>siehe).  
  
 Pro Instanz der <xref:System.Windows.Markup.XamlReader> -Klasse kann jeweils nur ein asynchroner Ladevorgang ausgeführt werden.  Wenn mehrere asynchrone Vorgänge für dieselbe Instanz der <xref:System.Windows.Markup.XamlReader> -Klasse versucht werden, wird eine <xref:System.InvalidOperationException> ausgelöst.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Es stehen mehrere Ladevorgänge mit demselben <see cref="T:System.Windows.Markup.XamlReader" /> gleichzeitig an.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Xml.XmlReader -&gt; obj" Usage="xamlReader.LoadAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Ein vorhandener <see cref="T:System.Xml.XmlReader" />, der die XAML-Eingabe bereits geladen bzw. gelesen hat.</param>
        <summary>Liest die XAML-Eingabe im angegebenen <see cref="T:System.Xml.XmlReader" /> und gibt das Stammelement der entsprechenden Objektstruktur zurück.</summary>
        <returns>Das Stammelement der erstellten Objektstruktur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein asynchroner XAML-Ladevorgang gibt anfänglich ein Objekt zurück, das ausschließlich das Stamm Objekt ist. Asynchron wird die XAML-Verarbeitung fortgesetzt, und alle untergeordneten Objekte werden unter dem Stamm ausgefüllt. Dies steht im Gegensatz zum typischen WPF-XAML-Verarbeitungs Verhalten und seiner Interaktion mit WPF-Konzepten der Objekt Lebensdauer. In der typischen (nicht Async-) Interaktion werden alle Eigenschaften eines Objekts, einschließlich aller untergeordneten Auflistungen, ausgefüllt, bevor ein Element zurückgegeben und als geladen gemeldet wird. Dieses Verhalten entspricht einer Bottom-up-Methode zum Erstellen der Struktur, in der das Stamm Objekt das letzte Objekt ist, das verfügbar werden soll.  
  
 Normalerweise würden Sie das zurückgegebene Objekt <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> von einem Speicherort in der Objektstruktur Ihrer Anwendung aus zuweisen, wobei das wissen, dass der Inhalt noch aufgefüllt wird und möglicherweise inkrementelle Layout-Aktualisierungen verursachen, wenn der gesamte Inhalt als Teil des Angetan. Aus diesem Grund ist es typisch, asynchron geladene Objekte aus XAML zu isolieren oder zu virtualisieren und die anwendungsspezifische Logik oder den Anwendungs Zustand zu verwenden, um <xref:System.Windows.Markup.XamlReader.LoadCompleted> zu benachrichtigen, wann behandelt wird.  
  
 Damit XAML-Eingaben asynchron geladen werden können, muss das root-Element im XAML-Markup das Attribut und den `x:SynchronousMode="Async"`Wert enthalten. <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> Der Wert wird bei der Groß-/Kleinschreibung behandelt. Wenn das XAML-Markup Stammverzeichnis nicht `x:SynchronousMode="Async"`enthält, wird keine Ausnahme ausgelöst, und der-Rückruf wird stattdessen als synchrone Auslastung verarbeitet <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>(siehe).  
  
 Pro Instanz der <xref:System.Windows.Markup.XamlReader> -Klasse kann jeweils nur ein asynchroner Ladevorgang ausgeführt werden.  Wenn mehrere asynchrone Vorgänge für dieselbe Instanz der <xref:System.Windows.Markup.XamlReader> -Klasse versucht werden, wird eine <xref:System.InvalidOperationException> ausgelöst.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Es werden mehrere Ladevorgänge mit demselben <see cref="T:System.Windows.Markup.XamlReader" /> gleichzeitig ausgeführt.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="xamlReader.LoadAsync (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Ein Stream, der die zu ladende XAML-Eingabe enthält.</param>
        <param name="parserContext">Vom Parser verwendete Kontextinformationen.</param>
        <summary>Liest die XAML-Eingabe im angegebenen <see cref="T:System.IO.Stream" /> und gibt das Stammelement der entsprechenden Objektstruktur zurück.</summary>
        <returns>Das Stammelement der erstellten Objektstruktur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein asynchroner XAML-Ladevorgang gibt anfänglich ein Objekt zurück, das ausschließlich das Stamm Objekt ist. Asynchron wird die XAML-Verarbeitung fortgesetzt, und alle untergeordneten Objekte werden unter dem Stamm ausgefüllt. Dies steht im Gegensatz zum typischen WPF-XAML-Verarbeitungs Verhalten und seiner Interaktion mit WPF-Konzepten der Objekt Lebensdauer. In der typischen (nicht Async-) Interaktion werden alle Eigenschaften eines Objekts, einschließlich aller untergeordneten Auflistungen, ausgefüllt, bevor ein Element zurückgegeben und als geladen gemeldet wird. Dieses Verhalten entspricht einer Bottom-up-Methode zum Erstellen der Struktur, in der das Stamm Objekt das letzte Objekt ist, das verfügbar werden soll.  
  
 In der Regel würden Sie das zurückgegebene Objekt einem Speicherort in der Objektstruktur Ihrer Anwendung zuweisen, wobei das wissen, dass der Inhalt noch aufgefüllt wird und möglicherweise inkrementelle Layout-Aktualisierungen verursachen, wenn der gesamte Inhalt als Teil der Benutzeroberfläche verfügbar gemacht wird. Aus diesem Grund ist es typisch, asynchron geladene Objekte aus XAML zu isolieren oder zu virtualisieren und die anwendungsspezifische Logik oder den Anwendungs Zustand zu verwenden, um <xref:System.Windows.Markup.XamlReader.LoadCompleted> zu benachrichtigen, wann behandelt wird.  
  
 Damit das Markup <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> von asynchron geladen werden kann, muss das root-Element im XAML-Markup das Attribut und `x:SynchronousMode="Async"`den Wert enthalten. Der Wert wird bei der Groß-/Kleinschreibung behandelt. Wenn der XAML-Markup Stamm nicht enthält `x:SynchronousMode="Async"`, wird keine Ausnahme ausgelöst, und der-Rückruf wird als synchrone Auslastung verarbeitet ( <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>siehe).  
  
 Pro Instanz der <xref:System.Windows.Markup.XamlReader> -Klasse kann jeweils nur ein asynchroner Ladevorgang ausgeführt werden.  Wenn mehrere asynchrone Vorgänge für dieselbe Instanz der <xref:System.Windows.Markup.XamlReader> -Klasse versucht werden, wird eine <xref:System.InvalidOperationException> ausgelöst.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Es werden mehrere Ladevorgänge mit demselben <see cref="T:System.Windows.Markup.XamlReader" /> gleichzeitig ausgeführt.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein asynchroner Ladevorgang abgeschlossen ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.LoadCompleted>wird auch ausgelöst, wenn ein asynchroner Ladevorgang abgebrochen wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Liest das Markup in der angegebenen Textzeichenfolge und gibt ein Objekt zurück, das dem Stammelement des angegebenen Markups entspricht.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse xamlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">Das Eingabe-XAML als einzelne Textzeichenfolge.</param>
        <summary>Liest die XAML-Eingabe in der angegebenen Textzeichenfolge und gibt ein Objekt zurück, das dem Stammelement des angegebenen entspricht.</summary>
        <returns>Das Stammelement der erstellten Objektstruktur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Implementierung ruft <xref:System.Windows.Markup.XamlReader.Load%2A> intern auf, nachdem ein Stream aus der Zeichenfolge erstellt wurde. Weitere <xref:System.Windows.Markup.XamlReader.Load%2A> Informationen, z. b. mögliche Ausnahmen, finden Sie unter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">Das Eingabe-XAML als einzelne Textzeichenfolge.</param>
        <param name="parserContext">Vom Parser verwendete Kontextinformationen.</param>
        <summary>Liest das XAML-Markup in der angegebenen Textzeichenfolge (mithilfe eines angegebenen <see cref="T:System.Windows.Markup.ParserContext" />) und gibt ein Objekt zurück, das dem Stammelement des angegebenen Markups entspricht.</summary>
        <returns>Das Stammelement der erstellten Objektstruktur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Implementierung ruft <xref:System.Windows.Markup.XamlReader.Load%2A> intern auf, nachdem ein Stream aus der Zeichenfolge erstellt wurde. Weitere <xref:System.Windows.Markup.XamlReader.Load%2A> Informationen, z. b. mögliche Ausnahmen, finden Sie unter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

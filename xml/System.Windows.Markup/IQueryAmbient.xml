<Type Name="IQueryAmbient" FullName="System.Windows.Markup.IQueryAmbient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5b1419b6b996eab65fbdcda1f6ed9782df12197d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502763" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryAmbient" />
  <TypeSignature Language="C++ CLI" Value="public interface class IQueryAmbient" />
  <TypeSignature Language="F#" Value="type IQueryAmbient = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fragt ab, ob eine angegebene Eigenschaft im aktuellen Bereich als Ambient-Eigenschaft behandelt werden soll.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Zweck eines Mechanismus ambient-Eigenschaft ist zur Verbesserung der Analyse Zeit darüber informiert einen XAML-Objektwriter, um zu vermeiden, instanziieren bestimmte Objekte, in Fällen, in denen bekannt ist, dass die Objekte für Werte sind, die für eine typische zur Laufzeit temporär und nicht nützlich sind die Anwendung. In der Regel wird müssten XAML suchen oder Verwendung von XAML-Verarbeitung einer Get-Zugriffsmethode instanziieren solche Objekte, um die objektdiagrammdarstellung mit Ready to Use Werten zu füllen.  
  
 <xref:System.Windows.Markup.IQueryAmbient> ein Member aufweist: <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>.  
  
 <xref:System.Windows.Markup.IQueryAmbient> ist ein paralleler Mechanismus zur <xref:System.Windows.Markup.AmbientAttribute>. <xref:System.Windows.Markup.IQueryAmbient> ist die spezielle Mechanismus, der vermeidet mithilfe von Reflektion Informationen zu ermitteln, und kann auch Situationen (kann ein bestimmtes Objekt Bericht auswählen `true` oder `false` für <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>), wohingegen das Attribut im Wesentlichen statisch ist. Analysis). <xref:System.Windows.Markup.AmbientAttribute> ist der allgemeine Mechanismus, der verwendet werden kann, durch die Verwendung von XAML-Objektwriter und korreliert, die in der Regel auf die Systemeigenschaften der dedizierten Verwendung von XAML-Typ <xref:System.Xaml.XamlMember.IsAmbient%2A> und <xref:System.Xaml.XamlType.IsAmbient%2A>.  
  
## <a name="wpf-implementations-of-iqueryambient"></a>WPF-Implementierungen von IQueryAmbient  
 In WPF <xref:System.Windows.Markup.IQueryAmbient> wird für die Ressource Wörterbuch Suchvorgang verwendet. Beim Suchvorgang ruft aufeinander folgenden `Resources` Werte in der gesamten der logischen Struktur von WPF, arbeiten für den Stamm der Ressourcenbereich bis entweder einen Schlüssel gefunden wird oder ermittelt wird der Schlüssel nicht im Bereich vorhanden. In der Regel wird auf diese Weise müsste Instanziieren einer <xref:System.Windows.ResourceDictionary> jedes Mal, um die Ergebnisse zu erhalten. Deklarieren den Inhalt der `Resources` als Umgebung so lange `Resources` vorhanden ist diesem Suchvorgang optimiert. Diese Schnittstelle wird in WPF in den folgenden Fällen implementiert:  
  
-   <xref:System.Windows.FrameworkElement> implementiert <xref:System.Windows.FrameworkElement.System%23Windows%23Markup%23IQueryAmbient%23IsAmbientPropertyAvailable%2A> zurückzugebenden `true` für alle Eigenschaftsnamen, wenn sie ein vorhandenes enthält <xref:System.Windows.ResourceDictionary> für <xref:System.Windows.FrameworkElement.Resources%2A>, und so lange die Abfrage nicht für die wird die <xref:System.Windows.FrameworkElement.Resources%2A> Eigenschaft selbst.  
  
-   <xref:System.Windows.Style> implementiert das gleiche Muster für seine <xref:System.Windows.Style.Resources%2A>.  
  
-   <xref:System.Windows.Application> implementiert das gleiche Muster für seine <xref:System.Windows.Application.Resources%2A>.  
  
-   <xref:System.Windows.FrameworkContentElement> implementiert das gleiche Muster für seine <xref:System.Windows.FrameworkContentElement.Resources%2A>.  
  
-   <xref:System.Windows.FrameworkTemplate> implementiert das gleiche Muster für seine <xref:System.Windows.FrameworkTemplate.Resources%2A>. Es meldet auch <xref:System.Windows.FrameworkTemplate.Template%2A> Inhalt zurück, Umgebung, aber `false` für Abfragen <xref:System.Windows.FrameworkTemplate.Template%2A> selbst.  
  
-   In jedem dieser Fälle, die relevanten `Resources` -Eigenschaft (und <xref:System.Windows.FrameworkTemplate.Template%2A>) werden als attributiert <xref:System.Windows.Markup.AmbientAttribute>. Die typische Nutzung darin, zum Abfragen der Eigenschaften, die nicht die <xref:System.Windows.Markup.AmbientAttribute> attributiert Eigenschaften des Objekts, das die Schnittstelle definiert. Das heißt, solange ein Ressourcenverzeichnis vorhanden ist, um die potenziellen Laufzeitwert bereitzustellen, wenn Objektdiagramm erstellt wird, kann eine andere Eigenschaft, die als Container für das Ressourcenwörterbuch-Eigenschaft als Umgebung behandelt werden.  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
  </Docs>
  <Members>
    <Member MemberName="IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="public bool IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAmbientPropertyAvailable (propertyName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbientPropertyAvailable(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member IsAmbientPropertyAvailable : string -&gt; bool" Usage="iQueryAmbient.IsAmbientPropertyAvailable propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Der Name der Eigenschaft, die auf den Ambience-Zustand überprüft werden soll.</param>
        <summary>Fragt ab, ob eine angegebene benannte Eigenschaft im aktuellen Bereich als Ambient betrachtet werden kann.</summary>
        <returns>
          <see langword="true" />, wenn die angeforderte Eigenschaft als Ambient betrachtet werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
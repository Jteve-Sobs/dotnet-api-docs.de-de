<Type Name="ExpressionContext" FullName="System.ComponentModel.Design.Serialization.ExpressionContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0b69e5d40d9e01afbcafaeeea472bd573679486d" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78711924" /></Metadata><TypeSignature Language="C#" Value="public sealed class ExpressionContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExpressionContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.ExpressionContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExpressionContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionContext sealed" />
  <TypeSignature Language="F#" Value="type ExpressionContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Design" FromVersion="4.0.0.0" To="System.Windows.Forms.Design" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht die Übergabe von Kontextzustand zwischen Serialisierungsprogrammen. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine <xref:System.ComponentModel.Design.Serialization.ExpressionContext> wird auf dem Kontext Stapel platziert und enthält den relevantesten Ausdruck während der Serialisierung. Der folgende C# Code veranschaulicht eine Zuweisung.  
  
```csharp  
button1.Text = "Hello";  
```  
  
 Während der Serialisierung sind mehrere Serialisierungsprogrammen für das Erstellen dieser einzelnen Anweisung verantwortlich. Eines dieser serialisierungssoren ist für das Erstellen von "Hello" verantwortlich. Es kann vorkommen, dass das Serialisierungsprogramm den Kontext kennen muss, in dem der Ausdruck erstellt wird. Im vorherigen Beispiel ist dieser Kontext nicht erforderlich. Der folgende C# Code zeigt eine Situation, in der Kenntnisse des Kontexts erforderlich sind.  
  
```csharp  
button1.Text = rm.GetString("button1_Text");  
```  
  
 In diesem Fall muss das Serialisierungsprogramm, das für die Erstellung des Ressourcen Ausdrucks zuständig ist, über die Namen der Zielobjekte informiert werden. Hierfür kann die <xref:System.ComponentModel.Design.Serialization.ExpressionContext>-Klasse verwendet werden. Wenn jedes Serialisierungsprogramm einen Ausdruck erstellt und ein Serialisierungsprogramm aufruft, um einen kleineren Teil der Anweisung als Ganzes zu verarbeiten, schiebt das Serialisierungsprogramm einen Ausdrucks Kontext auf den Kontext Stapel. Jeder Ausdrucks Kontext verfügt über eine Parent-Eigenschaft, mit der der nächste Ausdrucks Kontext im Stapel lokalisiert wird. Dadurch wird eine bequeme Durchlauf Funktion bereitstellt.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.CodeDom.CodeExpression" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As CodeExpression, expressionType As Type, owner As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionContext(System::CodeDom::CodeExpression ^ expression, Type ^ expressionType, System::Object ^ owner);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.Serialization.ExpressionContext : System.CodeDom.CodeExpression * Type * obj -&gt; System.ComponentModel.Design.Serialization.ExpressionContext" Usage="new System.ComponentModel.Design.Serialization.ExpressionContext (expression, expressionType, owner)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression">Der jeweilige Codeausdruck.</param>
        <param name="expressionType">Der jeweilige Codeausdruckstyp.</param>
        <param name="owner">Der jeweilige Codeausdrucksbesitzer.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" />-Klasse mit dem angegebenen Ausdruck und Besitzer.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="expression" />, <paramref name="expressionType" /> oder <paramref name="owner" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner, object presetValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner, object presetValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As CodeExpression, expressionType As Type, owner As Object, presetValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionContext(System::CodeDom::CodeExpression ^ expression, Type ^ expressionType, System::Object ^ owner, System::Object ^ presetValue);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.Serialization.ExpressionContext : System.CodeDom.CodeExpression * Type * obj * obj -&gt; System.ComponentModel.Design.Serialization.ExpressionContext" Usage="new System.ComponentModel.Design.Serialization.ExpressionContext (expression, expressionType, owner, presetValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
        <Parameter Name="presetValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression">Der jeweilige Codeausdruck.</param>
        <param name="expressionType">Der jeweilige Codeausdruckstyp.</param>
        <param name="owner">Der jeweilige Codeausdrucksbesitzer.</param>
        <param name="presetValue">Der jeweilige voreingestellte Codeausdruckswert.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" />-Klasse mit einem aktuellen Wert.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="expression" />, <paramref name="expressionType" /> oder <paramref name="owner" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Expression" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Expression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Expression As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ Expression { System::CodeDom::CodeExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Expression : System.CodeDom.CodeExpression" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Ausdruck ab, den dieser Kontext darstellt.</summary>
        <value>Der Ausdruck, den dieser Kontext darstellt.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionType">
      <MemberSignature Language="C#" Value="public Type ExpressionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ExpressionType" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ExpressionType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionType : Type" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Type" /> des Ausdrucks ab.</summary>
        <value>Der <see cref="T:System.Type" /> des Ausdrucks.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können <xref:System.ComponentModel.Design.Serialization.ExpressionContext> verwenden, um zu bestimmen, ob eine Typumwandlung beim Zuweisen zum Ausdruck erforderlich ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public object Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Owner { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : obj" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Objekt ab, das diesen Ausdruck besitzt.</summary>
        <value>Das Objekt, das diesen Ausdruck besitzt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn es sich bei dem Ausdruck um einen Eigenschafts Verweis auf die <xref:System.Windows.Forms.Control.Text%2A>-Eigenschaft einer Instanz von handelt, die <xref:System.Windows.Forms.Button> `button1`aufgerufen wird, gibt <xref:System.ComponentModel.Design.Serialization.ExpressionContext.Owner%2A> `button1`zurück.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="PresetValue">
      <MemberSignature Language="C#" Value="public object PresetValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PresetValue" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PresetValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ PresetValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PresetValue : obj" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den voreingestellten Wert eines Ausdrucks ab.</summary>
        <value>Der voreingestellte Wert dieses Ausdrucks oder <see langword="null" />, wenn kein Wert zugewiesen wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Enthält den voreingestellten Wert eines Ausdrucks, sollte ein Ausdruck vorhanden sein. Wenn der Ausdruck beispielsweise ein Eigenschafts Verweis Ausdruck ist, der auf die <xref:System.Windows.Forms.Control.Controls%2A>-Eigenschaft einer <xref:System.Windows.Forms.Button>verweist, enthält die <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A>-Eigenschaft die Instanz der <xref:System.Windows.Forms.Control.Controls%2A>-Eigenschaft. Dies liegt daran, dass die-Eigenschaft schreibgeschützt ist und vom-Objekt voreingestellt wird, um einen Wert zu enthalten. Andererseits hat eine Eigenschaft, z. b. <xref:System.Windows.Forms.Control.Text%2A> oder <xref:System.Windows.Forms.Control.Visible%2A>, keinen voreingestellten Wert, daher gibt die Eigenschaft <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> `null`zurück.  
  
 Der folgende C# Code zeigt, wie Serialisierungsprogrammen diese Informationen zum Steuern der Serialisierung verwenden können.  
  
```csharp  
Padding p = new Padding();  
p.Left = 5;  
button1.Padding = p;  
  
button1.Padding.Left = 5;  
```  
  
 Der Serialisierer der <xref:System.Windows.Forms.Padding> Struktur muss informiert werden, wenn er das erste oder zweite Formular generieren soll. Standardmäßig wird das erste Formular generiert. Das zweite Formular wird nur generiert, wenn ein <xref:System.ComponentModel.Design.Serialization.ExpressionContext> auf dem Kontext Stapel vorhanden ist, der eine <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> gleich dem Wert des <xref:System.Windows.Forms.Padding> enthält, der gerade serialisiert wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>

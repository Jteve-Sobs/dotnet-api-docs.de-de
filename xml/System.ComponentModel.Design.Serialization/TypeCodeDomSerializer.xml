<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df547ea93372382a9650dc467e5405812dca73d7" /><Meta Name="ms.sourcegitcommit" Value="f9576bf8c61e3d46834aeeff50f858359f2a99ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/09/2020" /><Meta Name="ms.locfileid" Value="77097189" /></Metadata><TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <TypeSignature Language="F#" Value="type TypeCodeDomSerializer = class&#xA;    inherit CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Serialisiert ein Objekt in einen neuen Typ.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>-Klasse führt die gleichen Aufgaben wie eine <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>aus, aber durch die Serialisierung eines Objekts über diese Klasse wird ein neuer Typ definiert.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md">Generieren und Kompilieren von dynamischem Quellcode</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj&#xA;override this.Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj" Usage="typeCodeDomSerializer.Deserialize (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">Der Serialisierungs-Manager, der für die Serialisierung verwendet werden soll.</param>
        <param name="declaration">Die für die Serialisierung zu verwendende Typdeklaration.</param>
        <summary>Deserialisiert die angegebene Typdeklaration.</summary>
        <returns>Das Stammobjekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>-Methode deserialisiert eine zuvor serialisierte Codetyp Deklaration. Die folgende Tabelle zeigt die Aufgaben, die von der Standard Implementierung ausgeführt werden.  
  
|Aufgabe|Beschreibung|  
|----------|-----------------|  
|Überprüfungen der groß-|Die-Implementierung sucht nach einem <xref:System.CodeDom.Compiler.CodeDomProvider>-Dienst, um zu entscheiden, ob Member bei der Groß-/Kleinschreibung beachtet werden sollen.|  
|Anweisungs Sortierung|Alle Element Variablen und lokalen Variablen aus init-Methoden werden in einer Tabelle gespeichert. Anschließend wird jede Anweisung in einer Init-Methode einer Anweisungs Auflistung entsprechend der linken Seite hinzugefügt, sodass alle Anweisungen, die einer bestimmten Variablen zugewiesen oder ausgeführt werden, unter dieser Variablen gruppiert werden. Variablen, die keine-Anweisungen aufweisen, werden verworfen.|  
|Deserialisierung|Die Anweisungs Auflistungen für jede Variable werden entsprechend der Variablen deserialisiert.|  
  
 In der folgenden Tabelle sind die Dienste aufgeführt, die die <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>-Methode erfordert.  
  
|Dienst|Beschreibung|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|Obwohl es nicht unbedingt erforderlich ist, wird der Dienst, falls verfügbar, verwendet, um zu bestimmen, ob bei der Serialisierung die Groß-/Kleinschreibung beachtet werden muss.|  
|<xref:System.ComponentModel.IContainer>|Wenn ein Objekt während der Deserialisierung in der namens Tabelle nicht vorhanden ist, wird eine Abfrage für <xref:System.ComponentModel.IContainer> durchgeführt. Wenn diese Abfrage erfolgreich ausgeführt wird, wird der Container für das Objekt geprüft. Der Container wird auch als ein eigenständiger Container Argument verwendet, das von Komponenten benötigt wird.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="manager" /> oder <paramref name="typeDecl" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md">Generieren und Kompilieren von dynamischem Quellcode</related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod&#xA;override this.GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod" Usage="typeCodeDomSerializer.GetInitializeMethod (manager, declaration, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager">Der Serialisierungs-Manager, der für die Serialisierung verwendet werden soll.</param>
        <param name="declaration">Die Typdeklaration, die für die Serialisierung verwendet werden soll.</param>
        <param name="value">Der für die Serialisierung zu verwendende Wert.</param>
        <summary>Gibt die Methode zurück, in der die Anweisungen zum Serialisieren eines Members gespeichert werden.</summary>
        <returns>Die Methode, die verwendet wird, um für den jeweiligen Member den gesamten Initialisierungscode auszugeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>-Methode gibt die-Methode zurück, um den gesamten Initialisierungs Code für den angegebenen Member auszugeben. Die Standard Implementierung gibt einen leeren Konstruktor zurück. Wenn dieselbe Methode für mehrere Werte zurückgegeben werden soll, sollte dieselbe Instanz der Methode zurückgegeben werden. Sie können das <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> Wörterbuch verwenden, um die von Ihnen erstellten Methoden zu merken. Der `typeDecl`-Parameter kann auch zum Hinzufügen von Infrastruktur Methoden verwendet werden. Wenn Sie z. b. eine separate Methode für jedes Objekt ausgeben möchten, benötigen Sie eine einzelne Methode, die wiederum alle diese Methoden aufruft. Diese Methode kann bei Bedarf der Codetyp Deklaration hinzugefügt werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="manager" />, <paramref name="typeDecl" /> oder <paramref name="value" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md">Generieren und Kompilieren von dynamischem Quellcode</related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]&#xA;override this.GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]" Usage="typeCodeDomSerializer.GetInitializeMethods (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">Der Serialisierungs-Manager, der für die Serialisierung verwendet werden soll.</param>
        <param name="declaration">Die Typdeklaration, die für die Serialisierung verwendet werden soll.</param>
        <summary>Gibt ein Array der Methoden zurück, die bei der Deserialisierung interpretiert werden sollen.</summary>
        <returns>Ein <see cref="T:System.CodeDom.CodeMemberMethod" />-Array der Methoden, die bei der Deserialisierung interpretiert werden sollen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Implementierung gibt ein Array mit einem einzelnen Element mit dem darin-Konstruktor zurück.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="manager" /> oder <paramref name="typeDecl" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md">Generieren und Kompilieren von dynamischem Quellcode</related>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration&#xA;override this.Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration" Usage="typeCodeDomSerializer.Serialize (manager, root, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager">Der Serialisierungs-Manager, der für die Serialisierung verwendet werden soll.</param>
        <param name="root">Das zu serialisierende Objekt.</param>
        <param name="members">Optionale Auflistung der Member. Kann <see langword="null" /> oder leer sein.</param>
        <summary>Serialisiert den Objektstamm durch das Erstellen einer neuen Typdeklaration, die den Stamm definiert.</summary>
        <returns>Eine <see cref="T:System.CodeDom.CodeTypeDeclaration" />, die das Stammobjekt definiert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>-Methode serialisiert das angegebene Stamm Objekt und optional eine Auflistung von Membern, um eine neue Typdefinition zu erstellen. Wenn die `members` Auflistung Werte enthält, werden diese Werte serialisiert. Werte selbst können als Element Variablen oder lokale Variablen serialisiert werden. Diese Bestimmung erfolgt durch die Suche nach einer Extendereigenschaft für das Objekt mit dem Namen `GenerateMember`. Wenn `true`, wird ein Member generiert. Andernfalls wird eine lokale Variable generiert. Der-`members` Auflistung kann das Root-Objekt enthalten. In diesem Fall wird das Stamm Objekt nicht auch als Member oder lokale Variable hinzugefügt.  
  
 Der Name des zurückgegebenen Typs wird aus dem Namen des Stamm Objekts entnommen, wenn es sich um ein benanntes Objekt handelt. Andernfalls wird ein Name aus dem einfachen Typnamen der Stamm Klasse hergestellt.  
  
 In der folgenden Tabelle sind die Aufgaben aufgeführt, die von der Standard Implementierung der <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>-Methode ausgeführt werden.  
  
|Aufgabe|Beschreibung|  
|----------|-----------------|  
|Context-Seeding|Der Serialisierungskontext wird mit Daten initialisiert, einschließlich der <xref:System.ComponentModel.Design.Serialization.RootContext> und <xref:System.CodeDom.CodeTypeDeclaration>|  
|Elementserialisierung|Als nächstes werden <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> alle Member durchlaufen und <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>aufruft. Da die Serialisierung in <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>opportunistisch erfolgt, wird dadurch sichergestellt, dass die Serialisierung nicht zweimal erfolgt.|  
|Stammserialisierung|Als nächstes wird das Stamm Objekt serialisiert, und seine Anweisungen werden der Anweisungs Auflistung hinzugefügt.|  
|Anweisungs Integration|Nachdem alle Objekte serialisiert wurden, ordnet die <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>-Methode die-Anweisungen an und fügt Sie einer Methode hinzu, die von <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>zurückgegeben wird. Schließlich wird ein Konstruktor erfunden, der alle Methoden aufruft, die von <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>zurückgegeben werden.|  
  
-  
  
 In der folgenden Tabelle sind die Objekte aufgeführt, die die <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>-Methode im Kontext Stapel platziert.  
  
|Instanz|Beschreibung|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|Dieses Serialisierungsprogramm. Das Ableiten von Klassen kann es hilfreich sein, dieser Klasse öffentliche Eigenschaften hinzuzufügen.|  
|<xref:System.CodeDom.CodeTypeDeclaration>|Der Typ, der erstellt wird. Die meisten Objekte benötigen keinen direkten Zugriff auf dieses.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="manager" /> oder <paramref name="root" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md">Generieren und Kompilieren von dynamischem Quellcode</related>
      </Docs>
    </Member>
  </Members>
</Type>

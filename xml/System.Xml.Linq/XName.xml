<Type Name="XName" FullName="System.Xml.Linq.XName">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8371b7850f7ea58284880f068e53ee48b362fbc7" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86691875" /></Metadata><TypeSignature Language="C#" Value="public sealed class XName : IEquatable&lt;System.Xml.Linq.XName&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XName" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XName&#xA;Implements IEquatable(Of XName)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class XName sealed : IEquatable&lt;System::Xml::Linq::XName ^&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type XName = class&#xA;    interface IEquatable&lt;XName&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class XName : IEquatable&lt;System.Xml.Linq.XName&gt;, System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XName&#xA;Implements IEquatable(Of XName), ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class XName sealed : IEquatable&lt;System::Xml::Linq::XName ^&gt;, System::Runtime::Serialization::ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type XName = class&#xA;    interface IEquatable&lt;XName&gt;&#xA;    interface ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Xml.Linq" FromVersion="4.0.0.0" To="System.Xml.XDocument" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.XDocument" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xml.Linq.XName&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.Serialization.KnownType(typeof(System.Xml.Linq.NameSerializer))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.KnownType(typeof(System.Xml.Linq.NameSerializer))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a2fc3-101">Stellt einen Namen eines XML-Elements oder -Attributs dar.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-101">Represents a name of an XML element or attribute.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-102">XML-Namen enthalten einen Namespace und einen lokalen Namen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-102">XML names include a namespace and a local name.</span></span> <span data-ttu-id="a2fc3-103">Ein *voll qualifizierter Name* ist die Kombination aus dem Namespace und dem lokalen Namen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-103">A *fully qualified name* is the combination of the namespace and local name.</span></span>  
  
## <a name="creating-an-xname-object"></a><span data-ttu-id="a2fc3-104">Erstellen eines XName-Objekts</span><span class="sxs-lookup"><span data-stu-id="a2fc3-104">Creating an XName Object</span></span>  
 <span data-ttu-id="a2fc3-105"><xref:System.Xml.Linq.XName> enthält keine öffentlichen Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-105"><xref:System.Xml.Linq.XName> does not contain any public constructors.</span></span> <span data-ttu-id="a2fc3-106">Stattdessen stellt diese Klasse eine implizite Konvertierung von bereit <xref:System.String> , die es Ihnen ermöglicht, eine zu erstellen <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-106">Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="a2fc3-107">Diese Konvertierung wird am häufigsten verwendet, wenn ein Element oder Attribut erstellt wird: das erste Argument für den <xref:System.Xml.Linq.XElement> Konstruktor ist ein <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-107">The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="a2fc3-108">Durch die Übergabe einer Zeichenfolge profitieren Sie von der impliziten Konvertierung.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-108">By passing a string, you take advantage of the implicit conversion.</span></span> <span data-ttu-id="a2fc3-109">Der folgende Code erstellt ein Element mit einem Namen, der sich in keinem Namespace befindet:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-109">The following code creates an element with a name that is in no namespace:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
Console.WriteLine(root);  
```  
  
 <span data-ttu-id="a2fc3-110">In Visual Basic ist die Verwendung von XML-Literalen besser geeignet:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-110">In Visual Basic, it is more appropriate to use XML literals:</span></span>  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="a2fc3-111">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-111">This example produces the following output:</span></span>  
  
```xml  
<ElementName>content</ElementName>  
```  
  
 <span data-ttu-id="a2fc3-112">Beim Zuweisen einer Zeichenfolge zu einer wird <xref:System.Xml.Linq.XName> die implizite Konvertierung von verwendet <xref:System.String> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-112">Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="a2fc3-113">Das Visual Basic Beispiel erstellt <xref:System.Xml.Linq.XElement> mithilfe von XML-Literalen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-113">The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals.</span></span> <span data-ttu-id="a2fc3-114">Obwohl XML-Literale verwendet werden, wird ein- <xref:System.Xml.Linq.XName> Objekt für das-Objekt erstellt <xref:System.Xml.Linq.XElement> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-114">Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.</span></span>  
  
 <span data-ttu-id="a2fc3-115">Darüber hinaus können Sie die- <xref:System.Xml.Linq.XName.Get%2A> Methode für ein- <xref:System.Xml.Linq.XName> Objekt aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-115">In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object.</span></span> <span data-ttu-id="a2fc3-116">Die empfohlene Vorgehensweise ist jedoch die Verwendung der impliziten Konvertierung aus einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-116">However, the recommended way is to use the implicit conversion from string.</span></span>  
  
## <a name="creating-an-xname-in-a-namespace"></a><span data-ttu-id="a2fc3-117">Erstellen eines XName in einem Namespace</span><span class="sxs-lookup"><span data-stu-id="a2fc3-117">Creating an XName in a Namespace</span></span>  
 <span data-ttu-id="a2fc3-118">Wie bei XML kann sich ein <xref:System.Xml.Linq.XName> in einem Namespace oder in keinem Namespace befinden.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-118">As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace.</span></span>  
  
 <span data-ttu-id="a2fc3-119">Für c# besteht die empfohlene Vorgehensweise zum Erstellen eines <xref:System.Xml.Linq.XName> in einem Namespace darin, das-Objekt zu deklarieren <xref:System.Xml.Linq.XNamespace> und dann die Überschreibung des Additions Operators zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-119">For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator.</span></span>  
  
 <span data-ttu-id="a2fc3-120">Für Visual Basic ist die empfohlene Vorgehensweise die Verwendung von XML-Literalen und globalen Namespace Deklarationen zum Erstellen von XML-Code, der sich in einem Namespace befindet.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-120">For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <ElementName>content</ElementName>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="a2fc3-121">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-121">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
## <a name="creating-an-xname-in-no-namespace"></a><span data-ttu-id="a2fc3-122">Erstellen eines XName in keinem Namespace</span><span class="sxs-lookup"><span data-stu-id="a2fc3-122">Creating an XName in no Namespace</span></span>  
 <span data-ttu-id="a2fc3-123">Die- <xref:System.Xml.Linq.XName.Namespace%2A> Eigenschaft eines <xref:System.Xml.Linq.XName> Objekts ist garantiert nicht NULL.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-123">The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null.</span></span> <span data-ttu-id="a2fc3-124">Wenn das- <xref:System.Xml.Linq.XName> Objekt keinen Namespace hat, wird die- <xref:System.Xml.Linq.XName.Namespace%2A> Eigenschaft auf festgelegt <xref:System.Xml.Linq.XNamespace.None%2A> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-124">If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span> <span data-ttu-id="a2fc3-125">Dies veranschaulicht der folgende Code:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-125">The following code demonstrates this:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("The element is in no namespace.");  
else  
    Console.WriteLine("The element is in a namespace.");  
```  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
If (root.Name.Namespace Is XNamespace.None) Then  
    Console.WriteLine("The element is in no namespace.")  
Else  
    Console.WriteLine("The element is in a namespace.")  
End If  
```  
  
 <span data-ttu-id="a2fc3-126">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-126">This example produces the following output:</span></span>  
  
```  
The element is in no namespace.  
```  
  
## <a name="using-expanded-names"></a><span data-ttu-id="a2fc3-127">Verwenden erweiterter Namen</span><span class="sxs-lookup"><span data-stu-id="a2fc3-127">Using Expanded Names</span></span>  
 <span data-ttu-id="a2fc3-128">Sie können auch einen <xref:System.Xml.Linq.XName> aus einem erweiterten XML-Namen in der Form erstellen `{namespace}localname` :</span><span class="sxs-lookup"><span data-stu-id="a2fc3-128">You can also create an <xref:System.Xml.Linq.XName> from a expanded XML name in the form `{namespace}localname`:</span></span>  
  
```csharp  
XElement root = new XElement("{http://www.adventure-works.com}ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = New XElement("{http://www.adventure-works.com}ElementName", "content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="a2fc3-129">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-129">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
 <span data-ttu-id="a2fc3-130">Beachten Sie, dass das Erstellen eines <xref:System.Xml.Linq.XName> über einen erweiterten Namen weniger effizient ist als das Erstellen eines <xref:System.Xml.Linq.XNamespace> Objekts und das Verwenden der außer Kraft setzung des Additions Operators.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-130">Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator.</span></span> <span data-ttu-id="a2fc3-131">Es ist auch weniger effizient als das Importieren eines globalen Namespace und das Verwenden von XML-Literalen in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-131">It is also less efficient than importing a global namespace and using XML literals in Visual Basic.</span></span>  
  
 <span data-ttu-id="a2fc3-132">Wenn Sie einen <xref:System.Xml.Linq.XName> mit einem erweiterten Namen erstellen, muss LINQ to XML die atomisierte Instanz eines Namespaces suchen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-132">If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace.</span></span> <span data-ttu-id="a2fc3-133">Diese Arbeit muss für jede Verwendung eines erweiterten Namens wiederholt werden.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-133">This work must be repeated for every use of an expanded name.</span></span> <span data-ttu-id="a2fc3-134">Diese zusätzliche Zeit ist wahrscheinlich unerheblich, wenn LINQ-Abfragen geschrieben werden. Dies kann jedoch beim Erstellen einer großen XML-Struktur von Bedeutung sein.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-134">This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.</span></span>  
  
## <a name="xname-objects-are-atomized"></a><span data-ttu-id="a2fc3-135">XName-Objekte sind atomisiert.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-135">XName Objects are Atomized</span></span>  
 <span data-ttu-id="a2fc3-136"><xref:System.Xml.Linq.XName> Das Atomisieren von Objekten ist garantiert. Das heißt, wenn zwei <xref:System.Xml.Linq.XName> Objekte genau denselben Namespace und genau denselben lokalen Namen aufweisen, verwenden Sie dieselbe Instanz gemeinsam.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-136"><xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance.</span></span> <span data-ttu-id="a2fc3-137">Die Gleichheits-und Vergleichs Operatoren werden ebenfalls explizit zu diesem Zweck bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-137">The equality and comparison operators are also provided explicitly for this purpose.</span></span>  
  
 <span data-ttu-id="a2fc3-138">Diese Funktion ermöglicht neben anderen Vorteilen eine schnellere Ausführung von Abfragen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-138">Among other benefits, this feature allows for faster execution of queries.</span></span> <span data-ttu-id="a2fc3-139">Beim Filtern nach dem Namen von Elementen oder Attributen wird bei den in Prädikaten ausgedrückten vergleichen der Identitäts Vergleich und kein Wert Vergleich verwendet.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-139">When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.</span></span> <span data-ttu-id="a2fc3-140">Es ist viel schneller zu bestimmen, dass zwei Verweise tatsächlich auf das gleiche Objekt verweisen, als zwei Zeichen folgen zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-140">It is much faster to determine that two references actually refer to the same object than to compare two strings.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-141">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-141">LINQ to XML</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xName.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a2fc3-142">Die <see cref="T:System.Xml.Linq.XName" />, die mit der aktuellen <see cref="T:System.Xml.Linq.XName" /> verglichen werden soll.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-142">The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.</span></span></param>
        <summary><span data-ttu-id="a2fc3-143">Bestimmt, ob der angegebene <see cref="T:System.Xml.Linq.XName" /> und dieser <see cref="T:System.Xml.Linq.XName" /> gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-143">Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="a2fc3-144"><see langword="true" />, wenn der angegebene <see cref="T:System.Xml.Linq.XName" /> und der aktuelle <see cref="T:System.Xml.Linq.XName" /> gleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-144"><see langword="true" /> if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-145">Damit zwei <xref:System.Xml.Linq.XName> Objekte gleich sind, müssen Sie denselben erweiterten Namen aufweisen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-145">For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-146">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-146">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Get">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a2fc3-147">Ruft ein <see cref="T:System.Xml.Linq.XName" />-Objekt ab.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-147">Gets an <see cref="T:System.Xml.Linq.XName" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-148">Diese Methode bietet über Ladungen, die es Ihnen ermöglichen, einen <xref:System.Xml.Linq.XName> aus einem erweiterten XML-Namen zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-148">This method provides overloads that allow you to create an <xref:System.Xml.Linq.XName> from a expanded XML name.</span></span> <span data-ttu-id="a2fc3-149">Sie können ein <xref:System.Xml.Linq.XName> -Zeichen aus einer Zeichenfolge im Formular `{namespace}localname` oder in einem Namespace und einem lokalen Namen erstellen, die separat angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-149">You can create an <xref:System.Xml.Linq.XName> from a string in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="a2fc3-150">Eine weitaus allgemeinere und einfachere Möglichkeit zum Erstellen eines <xref:System.Xml.Linq.XName> ist die Verwendung der impliziten Konvertierung aus einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-150">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span> <span data-ttu-id="a2fc3-151">Um einen Namen zu erstellen, der sich in einem Namespace befindet, verwenden Sie die Additions Operator Überladung, die es Ihnen ermöglicht, ein <xref:System.Xml.Linq.XNamespace> Objekt und eine Zeichenfolge zu kombinieren.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-151">To create a name that is in a namespace, the common approach is to use the addition operator overload that allows you to combine an <xref:System.Xml.Linq.XNamespace> object and a string.</span></span>  
  
 <span data-ttu-id="a2fc3-152">Weitere Informationen und Beispiele finden Sie unter Gewusst [wie: Erstellen eines Dokuments mit Namespaces (c#) (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span><span class="sxs-lookup"><span data-stu-id="a2fc3-152">For more information and examples, see [How to: Create a Document with Namespaces (C#) (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span></span>  
  
 <span data-ttu-id="a2fc3-153">Weitere Informationen zur Verwendung von Namespaces in Visual Basic finden Sie unter [Namespaces in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span><span class="sxs-lookup"><span data-stu-id="a2fc3-153">For more information on using namespaces in Visual Basic, see [Namespaces in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span></span>  
  
 <span data-ttu-id="a2fc3-154">Da- <xref:System.Xml.Linq.XName> Objekte atomisiert sind, <xref:System.Xml.Linq.XName> verweist die zugewiesene Variable auf die vorhandene, wenn ein vorhanden ist, der genau denselben Namen hat <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-154">Because <xref:System.Xml.Linq.XName> objects are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="a2fc3-155">Wenn kein vorhandener vorhanden ist <xref:System.Xml.Linq.XName> , wird ein neuer erstellt und initialisiert.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-155">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-156">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-156">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ expandedName);" />
      <MemberSignature Language="F#" Value="static member Get : string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.Get expandedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName"><span data-ttu-id="a2fc3-157">Ein <see cref="T:System.String" />, der einen erweiterten XML-Namen im Format <c>{namespace}localname</c> enthält.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-157">A <see cref="T:System.String" /> that contains an expanded XML name in the format <c>{namespace}localname</c>.</span></span></param>
        <summary><span data-ttu-id="a2fc3-158">Ruft ein <see cref="T:System.Xml.Linq.XName" />-Objekt aus einem erweiterten Namen ab.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-158">Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.</span></span></summary>
        <returns><span data-ttu-id="a2fc3-159">Ein <see cref="T:System.Xml.Linq.XName" />-Objekt, das aus dem erweiterten Namen erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-159">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-160">Diese Methode enthält über Ladungen, die es Ihnen ermöglichen, eine zu erstellen <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-160">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="a2fc3-161">Sie können Sie über einen erweiterten XML-Namen im Formular `{namespace}localname` oder über einen separat angegebenen Namespace und einen lokalen Namen erstellen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-161">You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="a2fc3-162">Eine weitaus allgemeinere und einfachere Möglichkeit zum Erstellen eines <xref:System.Xml.Linq.XName> ist die Verwendung der impliziten Konvertierung aus einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-162">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="a2fc3-163">Da <xref:System.Xml.Linq.XName> atomisiert ist, <xref:System.Xml.Linq.XName> verweist die zugewiesene Variable auf die vorhandene, wenn eine vorhanden ist, die denselben Namen hat <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-163">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="a2fc3-164">Wenn kein vorhandener vorhanden ist <xref:System.Xml.Linq.XName> , wird ein neuer erstellt und initialisiert.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-164">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2fc3-165">Das folgende Beispiel zeigt die Verwendung dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-165">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("{http://www.adventure-works.com}Root");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred approach for specifying the XName in the  
// constructor of XElement.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="a2fc3-166">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-166">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-167">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-167">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string localName, string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string localName, string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (localName As String, namespaceName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ localName, System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member Get : string * string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.Get (localName, namespaceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="a2fc3-168">Ein lokaler (nicht qualifizierter) Name.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-168">A local (unqualified) name.</span></span></param>
        <param name="namespaceName"><span data-ttu-id="a2fc3-169">Ein XML-Namespace.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-169">An XML namespace.</span></span></param>
        <summary><span data-ttu-id="a2fc3-170">Ruft ein <see cref="T:System.Xml.Linq.XName" />-Objekt aus einem lokalen Namen und einem Namespace ab.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-170">Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.</span></span></summary>
        <returns><span data-ttu-id="a2fc3-171">Ein aus dem angegebenen lokalen Namen und Namespace erstelltes <see cref="T:System.Xml.Linq.XName" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-171">An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-172">Diese Methode enthält über Ladungen, die es Ihnen ermöglichen, eine zu erstellen <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-172">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="a2fc3-173">Sie können Sie über einen erweiterten XML-Namen im Formular `{namespace}localname` oder über einen separat angegebenen Namespace und einen lokalen Namen erstellen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-173">You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="a2fc3-174">Eine weitaus allgemeinere und einfachere Möglichkeit zum Erstellen eines <xref:System.Xml.Linq.XName> ist die Verwendung der impliziten Konvertierung aus einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-174">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="a2fc3-175">Da <xref:System.Xml.Linq.XName> atomisiert ist, <xref:System.Xml.Linq.XName> verweist die zugewiesene Variable auf die vorhandene, wenn eine vorhanden ist, die denselben Namen hat <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-175">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="a2fc3-176">Wenn kein vorhandener vorhanden ist <xref:System.Xml.Linq.XName> , wird ein neuer erstellt und initialisiert.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-176">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2fc3-177">Das folgende Beispiel zeigt die Verwendung dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-177">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("Root", "http://www.adventure-works.com");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred form.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="a2fc3-178">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-178">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-179">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-179">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xName.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2fc3-180">Ruft einen Hashcode für diese <see cref="T:System.Xml.Linq.XName" /> ab.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-180">Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="a2fc3-181">Ein <see cref="T:System.Int32" />-Wert, der den Hashcode für den <see cref="T:System.Xml.Linq.XName" /> enthält.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-181">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-182">Diese Methode dient als Hash Funktion für <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-182">This method serves as a hash function for <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="a2fc3-183">Sie können <xref:System.Xml.Linq.XName.GetHashCode%2A> in Hash Algorithmen oder in Datenstrukturen wie einer Hash Tabelle verwenden.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-183">You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-184">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-184">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.Linq.XName.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2fc3-185">Ruft den lokalen (nicht qualifizierten) Teil des Namens ab.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-185">Gets the local (unqualified) part of the name.</span></span></summary>
        <value><span data-ttu-id="a2fc3-186">Ein <see cref="T:System.String" />, der den lokalen (nicht qualifizierten) Teil des Namens enthält.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-186">A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-187">Diese Eigenschaft ist garantiert nicht `null` .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-187">This property is guaranteed to not be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2fc3-188">Das folgende Beispiel zeigt die Verwendung dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-188">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="a2fc3-189">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-189">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XName.Namespace" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-190">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-190">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNamespace Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNamespace ^ Namespace { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XName.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2fc3-191">Ruft den Namespaceteil des vollqualifizierten Namens ab.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-191">Gets the namespace part of the fully qualified name.</span></span></summary>
        <value><span data-ttu-id="a2fc3-192">Ein <see cref="T:System.Xml.Linq.XNamespace" />, der den Namespaceteil des Namens enthält.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-192">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-193">Es ist gewährleistet, dass die <xref:System.Xml.Linq.XName.Namespace%2A>-Eigenschaft nicht `null` ist.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-193">The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`.</span></span> <span data-ttu-id="a2fc3-194">Wenn ein <xref:System.Xml.Linq.XName> keinen Namespace hat, gibt diese Eigenschaft zurück <xref:System.Xml.Linq.XNamespace.None%2A> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-194">If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2fc3-195">Das folgende Beispiel zeigt die Verwendung dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-195">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="a2fc3-196">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-196">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-197">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-197">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Xml.Linq.XName.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2fc3-198">Gibt den URI des <see cref="T:System.Xml.Linq.XNamespace" /> für diesen <see cref="T:System.Xml.Linq.XName" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-198">Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <value><span data-ttu-id="a2fc3-199">Der URI des <see cref="T:System.Xml.Linq.XNamespace" /> für diesen <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-199">The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-200">Dies ist eine praktische Eigenschaft, um den Namespace Namen von einem zu erhalten <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-200">This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2fc3-201">In diesem Beispiel wird ein-Element in einem-Namespace erstellt, und anschließend wird der Namespace des Elements ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-201">This example creates an element in a namespace, and then prints the element's namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root.Name.NamespaceName);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="a2fc3-202">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-202">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-203">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-203">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xml.Linq.XName * System.Xml.Linq.XName -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="a2fc3-204">Der erste zu vergleichende <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-204">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="a2fc3-205">Der zweite zu vergleichende <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-205">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <summary><span data-ttu-id="a2fc3-206">Gibt einen Wert zurück, der angibt, ob zwei Instanzen von <see cref="T:System.Xml.Linq.XName" /> gleich sind.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-206">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.</span></span></summary>
        <returns><span data-ttu-id="a2fc3-207"><see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> gleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-207"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-208">Die überladenen `==` und `!=` eingeschlossen, um Vergleiche zwischen <xref:System.Xml.Linq.XName> und ein `string`, wie z. B.`element.Name == "SomeElementName"`</span><span class="sxs-lookup"><span data-stu-id="a2fc3-208">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="a2fc3-209">Die vordefinierten Reference-Gleichheits Operatoren in c# erfordern, dass ein Operand nur durch Verweis Konvertierungen in den Typ des anderen konvertierbar ist.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-209">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="a2fc3-210">Diese Operatoren können die implizite Konvertierung von String in nicht in Erwägung gezogen <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-210">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="a2fc3-211">Das folgende Beispiel zeigt einige Vergleiche zwischen <xref:System.Xml.Linq.XName> Objekten und Zeichen folgen.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-211">The following example shows some comparisons between <xref:System.Xml.Linq.XName> objects and strings.</span></span>  
  
```csharp  
XName xn;  
xn = XName.Get("Root");  
Console.WriteLine(xn == "Root");  
  
xn = XName.Get("Root", "http://www.adventure-works.com");  
Console.WriteLine(xn == "{http://www.adventure-works.com}Root");  
  
XElement root = new XElement("Root", "content");  
Console.WriteLine(root.Name == "Root");  
```  
  
```vb  
Dim xn As XName  
xn = XName.Get("Root")  
Console.WriteLine(xn = "Root")  
  
xn = XName.Get("Root", "http://www.adventure-works.com")  
Console.WriteLine(xn = "{http://www.adventure-works.com}Root")  
  
Dim root As XElement = New XElement("Root", "content")  
Console.WriteLine(root.Name = "Root")  
```  
  
 <span data-ttu-id="a2fc3-212">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-212">This example produces the following output:</span></span>  
  
```  
True  
True  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-213">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-213">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XName (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Implicit(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XName ^(System::String ^ expandedName);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.op_Implicit expandedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName"><span data-ttu-id="a2fc3-214">Eine Zeichenfolge, die einen erweiterten XML-Namen im Format <c>{namespace}localname</c> enthält.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-214">A string that contains an expanded XML name in the format <c>{namespace}localname</c>.</span></span></param>
        <summary><span data-ttu-id="a2fc3-215">Konvertiert eine als erweiterter XML-Name (d.h. <c>{namespace}localname</c>) formatierte Zeichenfolge in ein <see cref="T:System.Xml.Linq.XName" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-215">Converts a string formatted as an expanded XML name (that is,<c>{namespace}localname</c>) to an <see cref="T:System.Xml.Linq.XName" /> object.</span></span></summary>
        <returns><span data-ttu-id="a2fc3-216">Ein <see cref="T:System.Xml.Linq.XName" />-Objekt, das aus dem erweiterten Namen erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-216">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-217">Sie verwenden diesen impliziten Operator, wenn Sie ein erstellen <xref:System.Xml.Linq.XElement> oder <xref:System.Xml.Linq.XAttribute> indem Sie eine Zeichenfolge an den entsprechenden Konstruktor übergeben.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-217">You are using this implicit operator when you create an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> by passing a string to the appropriate constructor.</span></span>  
  
## Examples  
 <span data-ttu-id="a2fc3-218">Im folgenden Beispiel wird ein erstellt <xref:System.Xml.Linq.XName> , indem ihm eine Zeichenfolge zugewiesen wird, die diesen impliziten Konvertierungs Operator aufruft.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-218">The following example creates an <xref:System.Xml.Linq.XName> by assigning a string to it, which invokes this implicit conversion operator.</span></span>  
  
```csharp  
XElement el = new XElement("{http://www.adventure-works.com}Root", "content");  
Console.WriteLine(el);  
  
// The preferred approach is to initialize an XNamespace object  
// and use the overload of the addition operator.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el As XElement = New XElement("{http://www.adventure-works.com}Root", "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach is to import a global namespace and   
        ' use an XML literal.  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="a2fc3-219">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-219">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-220">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-220">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xml.Linq.XName * System.Xml.Linq.XName -&gt; bool" Usage="System.Xml.Linq.XName.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="a2fc3-221">Der erste zu vergleichende <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-221">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="a2fc3-222">Der zweite zu vergleichende <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-222">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <summary><span data-ttu-id="a2fc3-223">Gibt einen Wert zurück, der angibt, ob zwei Instanzen von <see cref="T:System.Xml.Linq.XName" /> ungleich sind.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-223">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.</span></span></summary>
        <returns><span data-ttu-id="a2fc3-224"><see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-224"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-225">Die überladenen `==` und `!=` eingeschlossen, um Vergleiche zwischen <xref:System.Xml.Linq.XName> und eine Zeichenfolge, z. B.`element.Name == "SomeElementName"`</span><span class="sxs-lookup"><span data-stu-id="a2fc3-225">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="a2fc3-226">Die vordefinierten Reference-Gleichheits Operatoren in c# erfordern, dass ein Operand nur durch Verweis Konvertierungen in den Typ des anderen konvertierbar ist.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-226">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="a2fc3-227">Diese Operatoren können die implizite Konvertierung von String in nicht in Erwägung gezogen <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-227">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="a2fc3-228">Im folgenden c#-Beispiel wird ein- <xref:System.Xml.Linq.XName> Objekt mit einer Zeichenfolge verglichen, die diesen Operator aufruft.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-228">The following C# example compares an <xref:System.Xml.Linq.XName> object to a string, which invokes this operator.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
  
Console.WriteLine(root.Name != "{http://www.adventure-works.com}Root");  
  
// the following is the preferred idiom  
Console.WriteLine(root.Name != aw + "Root");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name <> "{http://www.adventure-works.com}Root")  
  
        ' the following is the preferred idiom  
        Console.WriteLine(root.Name <> GetXmlNamespace() + "Root")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="a2fc3-229">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-229">This example produces the following output:</span></span>  
  
```  
False  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-230">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-230">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals">
      <MemberSignature Language="C#" Value="bool IEquatable&lt;XName&gt;.Equals (System.Xml.Linq.XName other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(class System.Xml.Linq.XName other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#IEquatable&lt;System#Xml#Linq#XName&gt;#Equals(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As XName) As Boolean Implements IEquatable(Of XName).Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(System::Xml::Linq::XName ^ other) = IEquatable&lt;System::Xml::Linq::XName ^&gt;::Equals;" />
      <MemberSignature Language="F#" Value="abstract member System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals : System.Xml.Linq.XName -&gt; bool&#xA;override this.System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals : System.Xml.Linq.XName -&gt; bool" Usage="xName.System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="a2fc3-231">Das <see cref="T:System.Xml.Linq.XName" />, das mit diesem <see cref="T:System.Xml.Linq.XName" /> verglichen werden soll.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-231">The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.</span></span></param>
        <summary><span data-ttu-id="a2fc3-232">Zeigt an, ob der aktuelle <see cref="T:System.Xml.Linq.XName" /> dem angegebenen <see cref="T:System.Xml.Linq.XName" /> entspricht.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-232">Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="a2fc3-233"><see langword="true" />, wenn dieser <see cref="T:System.Xml.Linq.XName" /> dem angegebenen <see cref="T:System.Xml.Linq.XName" /> entspricht, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-233"><see langword="true" /> if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="xName.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="a2fc3-234">Die mit Daten zu füllende <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-234">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="a2fc3-235">Das Ziel (siehe <see cref="T:System.Runtime.Serialization.StreamingContext" />) für diese Serialisierung.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-235">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span></span></param>
        <summary><span data-ttu-id="a2fc3-236">Füllt eine <see cref="T:System.Runtime.Serialization.SerializationInfo" /> mit den Daten auf, die zum Serialisieren des Zielobjekts erforderlich sind.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-236">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2fc3-237">Diese Methode wird intern zum Serialisieren von Objekt Diagrammen verwendet, die LINQ to XML-Objekte enthalten.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-237">This method is used internally to serialize object graphs that contain LINQ to XML objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xName.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2fc3-238">Gibt den erweiterten XML-Namen im Format <c>{namespace}localname</c> zurück.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-238">Returns the expanded XML name in the format <c>{namespace}localname</c>.</span></span></summary>
        <returns><span data-ttu-id="a2fc3-239">Ein <see cref="T:System.String" />, der den erweiterten XML-Namen im Format <c>{namespace}localname</c> enthält.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-239">A <see cref="T:System.String" /> that contains the expanded XML name in the format <c>{namespace}localname</c>.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a2fc3-240">Im folgenden Beispiel <xref:System.Console.WriteLine%2A> wird aufgerufen, wobei ein übergeben wird <xref:System.Xml.Linq.XName> .</span><span class="sxs-lookup"><span data-stu-id="a2fc3-240">The following example calls <xref:System.Console.WriteLine%2A>, passing an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="a2fc3-241">Dies bewirkt <xref:System.Xml.Linq.XName.ToString%2A> , dass die-Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a2fc3-241">This causes the <xref:System.Xml.Linq.XName.ToString%2A> method to be called.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="a2fc3-242">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="a2fc3-242">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="a2fc3-243">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="a2fc3-243">LINQ to XML</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

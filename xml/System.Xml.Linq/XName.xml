<Type Name="XName" FullName="System.Xml.Linq.XName">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ce985f742d2d141dbbba598d6417dd44e27c9ad0" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52372406" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XName : IEquatable&lt;System.Xml.Linq.XName&gt;, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XName" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XName&#xA;Implements IEquatable(Of XName), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XName sealed : IEquatable&lt;System::Xml::Linq::XName ^&gt;, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type XName = class&#xA;    interface IEquatable&lt;XName&gt;&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xml.Linq.XName&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.Xml.Linq.NameSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c25bd-101">Stellt einen Namen eines XML-Elements oder -Attributs dar.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c25bd-101">Represents a name of an XML element or attribute.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-102">XML-Namen enthalten, einen Namespace und einen lokalen Namen.</span><span class="sxs-lookup"><span data-stu-id="c25bd-102">XML names include a namespace and a local name.</span></span> <span data-ttu-id="c25bd-103">Ein *voll gekennzeichneten Namen* ist die Kombination aus Namespace und lokalen Namen.</span><span class="sxs-lookup"><span data-stu-id="c25bd-103">A *fully qualified name* is the combination of the namespace and local name.</span></span>  
  
## <a name="creating-an-xname-object"></a><span data-ttu-id="c25bd-104">Erstellen ein XName-Objekt</span><span class="sxs-lookup"><span data-stu-id="c25bd-104">Creating an XName Object</span></span>  
 <span data-ttu-id="c25bd-105"><xref:System.Xml.Linq.XName> enthält keine öffentlichen Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="c25bd-105"><xref:System.Xml.Linq.XName> does not contain any public constructors.</span></span> <span data-ttu-id="c25bd-106">Diese Klasse stellt stattdessen eine implizite Konvertierung von <xref:System.String> , ermöglicht Ihnen die Erstellung einer <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-106">Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c25bd-107">Am ehesten diese Konvertierung wird beim Erstellen eines Elements oder Attributs: das erste Argument für die <xref:System.Xml.Linq.XElement> Konstruktor ist ein <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-107">The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c25bd-108">Eine Zeichenfolge übergeben, nutzen Sie die implizite Konvertierung.</span><span class="sxs-lookup"><span data-stu-id="c25bd-108">By passing a string, you take advantage of the implicit conversion.</span></span> <span data-ttu-id="c25bd-109">Der folgende Code erstellt ein Element mit einem Namen, der in keinem Namespace befindet:</span><span class="sxs-lookup"><span data-stu-id="c25bd-109">The following code creates an element with a name that is in no namespace:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
Console.WriteLine(root);  
```  
  
 <span data-ttu-id="c25bd-110">In Visual Basic empfiehlt es sich um XML-Literale verwenden:</span><span class="sxs-lookup"><span data-stu-id="c25bd-110">In Visual Basic, it is more appropriate to use XML literals:</span></span>  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c25bd-111">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-111">This example produces the following output:</span></span>  
  
```xml  
<ElementName>content</ElementName>  
```  
  
 <span data-ttu-id="c25bd-112">Eine Zeichenfolge zuweisen einer <xref:System.Xml.Linq.XName> verwendet die implizite Konvertierung von <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-112">Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="c25bd-113">Visual Basic-Beispiel erstellt die <xref:System.Xml.Linq.XElement> mit XML-Literalen.</span><span class="sxs-lookup"><span data-stu-id="c25bd-113">The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals.</span></span> <span data-ttu-id="c25bd-114">Obwohl XML-Literale verwendet werden, ein <xref:System.Xml.Linq.XName> -Objekt wird erstellt, für die <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-114">Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.</span></span>  
  
 <span data-ttu-id="c25bd-115">Sie können darüber hinaus Aufrufen der <xref:System.Xml.Linq.XName.Get%2A> -Methode für ein <xref:System.Xml.Linq.XName> Objekt.</span><span class="sxs-lookup"><span data-stu-id="c25bd-115">In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object.</span></span> <span data-ttu-id="c25bd-116">Allerdings ist die empfohlene Vorgehensweise die implizite Konvertierung von Zeichenfolge verwenden.</span><span class="sxs-lookup"><span data-stu-id="c25bd-116">However, the recommended way is to use the implicit conversion from string.</span></span>  
  
## <a name="creating-an-xname-in-a-namespace"></a><span data-ttu-id="c25bd-117">Erstellen einen XName anzugeben, in einem Namespace</span><span class="sxs-lookup"><span data-stu-id="c25bd-117">Creating an XName in a Namespace</span></span>  
 <span data-ttu-id="c25bd-118">Wie bei XML, ein <xref:System.Xml.Linq.XName> kann in einem Namespace, oder es kann in keinem Namespace sein.</span><span class="sxs-lookup"><span data-stu-id="c25bd-118">As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace.</span></span>  
  
 <span data-ttu-id="c25bd-119">Für c# und die empfohlene Vorgehensweise zum Erstellen einer <xref:System.Xml.Linq.XName> in einem Namespace befindet, deklarieren die <xref:System.Xml.Linq.XNamespace> Objekt, und Sie dann nutzen Sie die Überschreibung des Additionsoperators.</span><span class="sxs-lookup"><span data-stu-id="c25bd-119">For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator.</span></span>  
  
 <span data-ttu-id="c25bd-120">Die empfohlene Vorgehensweise werden für Visual Basic XML-Literale und der globale Namespace-Deklarationen verwenden, um XML zu erstellen, die in einem Namespace befindet.</span><span class="sxs-lookup"><span data-stu-id="c25bd-120">For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <ElementName>content</ElementName>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c25bd-121">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-121">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
## <a name="creating-an-xname-in-no-namespace"></a><span data-ttu-id="c25bd-122">Erstellen einen XName anzugeben, in der kein Namespace</span><span class="sxs-lookup"><span data-stu-id="c25bd-122">Creating an XName in no Namespace</span></span>  
 <span data-ttu-id="c25bd-123">Die <xref:System.Xml.Linq.XName.Namespace%2A> Eigenschaft eine <xref:System.Xml.Linq.XName> Objekt ist garantiert nicht null sein.</span><span class="sxs-lookup"><span data-stu-id="c25bd-123">The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null.</span></span> <span data-ttu-id="c25bd-124">Wenn die <xref:System.Xml.Linq.XName> befindet sich in keinem Namespace befindet, und klicken Sie dann die <xref:System.Xml.Linq.XName.Namespace%2A> Eigenschaft auf festgelegt <xref:System.Xml.Linq.XNamespace.None%2A>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-124">If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span> <span data-ttu-id="c25bd-125">Der folgende Code veranschaulicht dies:</span><span class="sxs-lookup"><span data-stu-id="c25bd-125">The following code demonstrates this:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("The element is in no namespace.");  
else  
    Console.WriteLine("The element is in a namespace.");  
```  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
If (root.Name.Namespace Is XNamespace.None) Then  
    Console.WriteLine("The element is in no namespace.")  
Else  
    Console.WriteLine("The element is in a namespace.")  
End If  
```  
  
 <span data-ttu-id="c25bd-126">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-126">This example produces the following output:</span></span>  
  
```  
The element is in no namespace.  
```  
  
## <a name="using-expanded-names"></a><span data-ttu-id="c25bd-127">Verwenden von erweiterten Namen</span><span class="sxs-lookup"><span data-stu-id="c25bd-127">Using Expanded Names</span></span>  
 <span data-ttu-id="c25bd-128">Sie können auch erstellen, eine <xref:System.Xml.Linq.XName> aus einem erweiterten XML-Namen im Format `{namespace}localname`:</span><span class="sxs-lookup"><span data-stu-id="c25bd-128">You can also create an <xref:System.Xml.Linq.XName> from a expanded XML name in the form `{namespace}localname`:</span></span>  
  
```csharp  
XElement root = new XElement("{http://www.adventure-works.com}ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = New XElement("{http://www.adventure-works.com}ElementName", "content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c25bd-129">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-129">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
 <span data-ttu-id="c25bd-130">Beachten Sie, dass die Erstellung einer <xref:System.Xml.Linq.XName> über einen erweiterten Namen ist weniger effizient als das Erstellen einer <xref:System.Xml.Linq.XNamespace> Objekt und die Überschreibung des Additionsoperators.</span><span class="sxs-lookup"><span data-stu-id="c25bd-130">Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator.</span></span> <span data-ttu-id="c25bd-131">Es ist auch weniger effizient als einen globalen Namespace importieren und Verwenden von XML-Literale in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c25bd-131">It is also less efficient than importing a global namespace and using XML literals in Visual Basic.</span></span>  
  
 <span data-ttu-id="c25bd-132">Bei der Erstellung einer <xref:System.Xml.Linq.XName> verwenden einen erweiterten Namen, der LINQ to XML muss Suchen der atomisierten Instanz für einen Namespace.</span><span class="sxs-lookup"><span data-stu-id="c25bd-132">If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace.</span></span> <span data-ttu-id="c25bd-133">Diese Arbeit muss für jede von einem erweiterten Namen wiederholt werden.</span><span class="sxs-lookup"><span data-stu-id="c25bd-133">This work must be repeated for every use of an expanded name.</span></span> <span data-ttu-id="c25bd-134">Diese zusätzliche Zeit ist wahrscheinlich vernachlässigbar sein, beim Schreiben von LINQ-Abfragen. Es kann jedoch erheblich sein beim Erstellen einer großen XML-Struktur.</span><span class="sxs-lookup"><span data-stu-id="c25bd-134">This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.</span></span>  
  
## <a name="xname-objects-are-atomized"></a><span data-ttu-id="c25bd-135">XName-Objekten werden atomisiert.</span><span class="sxs-lookup"><span data-stu-id="c25bd-135">XName Objects are Atomized</span></span>  
 <span data-ttu-id="c25bd-136"><xref:System.Xml.Linq.XName> Objekte sind mit Sicherheit atomisiert werden. d.h., wenn zwei <xref:System.Xml.Linq.XName> Objekte besitzen genau denselben Namespace und genau dem gleichen lokalen Namen, verwenden sie die gleiche Instanz.</span><span class="sxs-lookup"><span data-stu-id="c25bd-136"><xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance.</span></span> <span data-ttu-id="c25bd-137">Gleichheits-und Vergleichs werden für diesen Zweck auch explizit bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="c25bd-137">The equality and comparison operators are also provided explicitly for this purpose.</span></span>  
  
 <span data-ttu-id="c25bd-138">Neben anderen Vorteilen können dieses Feature zur schnelleren Ausführung von Abfragen.</span><span class="sxs-lookup"><span data-stu-id="c25bd-138">Among other benefits, this feature allows for faster execution of queries.</span></span> <span data-ttu-id="c25bd-139">Wenn Sie auf den Namen von Elementen oder Attributen filtern, verwenden Sie Vergleiche in Prädikaten als Identität hingegen nicht den Wertvergleich.</span><span class="sxs-lookup"><span data-stu-id="c25bd-139">When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.</span></span> <span data-ttu-id="c25bd-140">Es ist viel schneller, um zu bestimmen, dass zwei Verweise auf dasselbe Objekt als zum Vergleichen von zwei Zeichenfolgen tatsächlich verweisen.</span><span class="sxs-lookup"><span data-stu-id="c25bd-140">It is much faster to determine that two references actually refer to the same object than to compare two strings.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
      <span data-ttu-id="c25bd-141">LINQ to XML</span>
      <span class="sxs-lookup">
        <span data-stu-id="c25bd-141">LINQ to XML</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xName.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="c25bd-142">Die <see cref="T:System.Xml.Linq.XName" />, die mit der aktuellen <see cref="T:System.Xml.Linq.XName" /> verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-142">The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c25bd-143">Bestimmt, ob der angegebene <see cref="T:System.Xml.Linq.XName" /> und dieser <see cref="T:System.Xml.Linq.XName" /> gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-143">Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c25bd-144">
            <see langword="true" />, wenn der angegebene <see cref="T:System.Xml.Linq.XName" /> und der aktuelle <see cref="T:System.Xml.Linq.XName" /> gleich sind, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-144">
              <see langword="true" /> if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-145">Für zwei <xref:System.Xml.Linq.XName> Objekte sind gleich, sie müssen den gleichen erweiterten Namen.</span><span class="sxs-lookup"><span data-stu-id="c25bd-145">For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-146">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-146">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Get">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c25bd-147">Ruft ein <see cref="T:System.Xml.Linq.XName" />-Objekt ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-147">Gets an <see cref="T:System.Xml.Linq.XName" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-148">Diese Methode stellt Überladungen, die Ihnen ermöglichen, erstellen Sie eine <xref:System.Xml.Linq.XName> aus einem erweiterten XML-Namen.</span><span class="sxs-lookup"><span data-stu-id="c25bd-148">This method provides overloads that allow you to create an <xref:System.Xml.Linq.XName> from a expanded XML name.</span></span> <span data-ttu-id="c25bd-149">Sie erstellen eine <xref:System.Xml.Linq.XName> aus einer Zeichenfolge im Format `{namespace}localname`, oder aus einem Namespace und lokalen Namen, die separat angegeben.</span><span class="sxs-lookup"><span data-stu-id="c25bd-149">You can create an <xref:System.Xml.Linq.XName> from a string in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="c25bd-150">Eine viel mehr allgemeine und einfachere Möglichkeit zum Erstellen einer <xref:System.Xml.Linq.XName> ist die Verwendung der implizite Konvertierung von einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="c25bd-150">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span> <span data-ttu-id="c25bd-151">Um einen Namen zu erstellen, die in einem Namespace befindet, die gängige Methode ist die Verwendung Additionsoperator, die Sie kombinieren können eine <xref:System.Xml.Linq.XNamespace> Objekt und eine Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="c25bd-151">To create a name that is in a namespace, the common approach is to use the addition operator overload that allows you to combine an <xref:System.Xml.Linq.XNamespace> object and a string.</span></span>  
  
 <span data-ttu-id="c25bd-152">Weitere Informationen und Beispiele finden Sie unter [Vorgehensweise: Erstellen eines Dokuments mit Namespaces (c#) (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span><span class="sxs-lookup"><span data-stu-id="c25bd-152">For more information and examples, see [How to: Create a Document with Namespaces (C#) (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span></span>  
  
 <span data-ttu-id="c25bd-153">Weitere Informationen zum Verwenden von Namespaces in Visual Basic finden Sie unter [-Namespaces in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span><span class="sxs-lookup"><span data-stu-id="c25bd-153">For more information on using namespaces in Visual Basic, see [Namespaces in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span></span>  
  
 <span data-ttu-id="c25bd-154">Da <xref:System.Xml.Linq.XName> -Objekte atomisiert werden, ist es eine vorhandene <xref:System.Xml.Linq.XName> mit genau dem gleichen Namen, verweist die zugewiesene Variable mit dem vorhandenen <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-154">Because <xref:System.Xml.Linq.XName> objects are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c25bd-155">Wenn keine bestehende <xref:System.Xml.Linq.XName>, ein neues wird einer erstellt und initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="c25bd-155">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-156">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-156">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ expandedName);" />
      <MemberSignature Language="F#" Value="static member Get : string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.Get expandedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName">
          <span data-ttu-id="c25bd-157">Ein <see cref="T:System.String" />, der einen erweiterten XML-Namen im Format <c>{namespace}localname</c> enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-157">A <see cref="T:System.String" /> that contains an expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c25bd-158">Ruft ein <see cref="T:System.Xml.Linq.XName" />-Objekt aus einem erweiterten Namen ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-158">Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c25bd-159">Ein <see cref="T:System.Xml.Linq.XName" />-Objekt, das aus dem erweiterten Namen erstellt wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-159">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-160">Diese Methode enthält die Überladungen, die Ihnen ermöglichen, erstellen Sie eine <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-160">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c25bd-161">Sie können sie über einen erweiterten XML-Namen im Format erstellen `{namespace}localname`, oder aus einem Namespace und lokalen Namen, die separat angegeben.</span><span class="sxs-lookup"><span data-stu-id="c25bd-161">You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="c25bd-162">Eine viel mehr allgemeine und einfachere Möglichkeit zum Erstellen einer <xref:System.Xml.Linq.XName> ist die Verwendung der implizite Konvertierung von einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="c25bd-162">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="c25bd-163">Da <xref:System.Xml.Linq.XName> atomisiert werden, ist es eine vorhandene <xref:System.Xml.Linq.XName> mit genau dem gleichen Namen, verweist die zugewiesene Variable mit dem vorhandenen <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-163">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c25bd-164">Wenn keine bestehende <xref:System.Xml.Linq.XName>, ein neues wird einer erstellt und initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="c25bd-164">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c25bd-165">Das folgende Beispiel zeigt die Verwendung dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="c25bd-165">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("{http://www.adventure-works.com}Root");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred approach for specifying the XName in the  
// constructor of XElement.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c25bd-166">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-166">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-167">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-167">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string localName, string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string localName, string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (localName As String, namespaceName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ localName, System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member Get : string * string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.Get (localName, namespaceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="c25bd-168">Ein lokaler (nicht qualifizierter) Name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-168">A local (unqualified) name.</span>
          </span>
        </param>
        <param name="namespaceName">
          <span data-ttu-id="c25bd-169">Ein XML-Namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-169">An XML namespace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c25bd-170">Ruft ein <see cref="T:System.Xml.Linq.XName" />-Objekt aus einem lokalen Namen und einem Namespace ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-170">Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c25bd-171">Ein aus dem angegebenen lokalen Namen und Namespace erstelltes <see cref="T:System.Xml.Linq.XName" />-Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-171">An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-172">Diese Methode enthält die Überladungen, die Ihnen ermöglichen, erstellen Sie eine <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-172">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c25bd-173">Können Sie es über einen erweiterten XML-Namen im Format erstellen `{namespace}localname`, oder aus einem Namespace und lokalen Namen, die separat angegeben.</span><span class="sxs-lookup"><span data-stu-id="c25bd-173">You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="c25bd-174">Eine viel mehr allgemeine und einfachere Möglichkeit zum Erstellen einer <xref:System.Xml.Linq.XName> ist die Verwendung der implizite Konvertierung von einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="c25bd-174">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="c25bd-175">Da <xref:System.Xml.Linq.XName> atomisiert werden, ist es eine vorhandene <xref:System.Xml.Linq.XName> mit genau dem gleichen Namen, verweist die zugewiesene Variable mit dem vorhandenen <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-175">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c25bd-176">Wenn keine bestehende <xref:System.Xml.Linq.XName>, ein neues wird einer erstellt und initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="c25bd-176">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c25bd-177">Das folgende Beispiel zeigt die Verwendung dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="c25bd-177">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("Root", "http://www.adventure-works.com");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred form.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c25bd-178">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-178">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-179">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-179">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xName.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c25bd-180">Ruft einen Hashcode für diese <see cref="T:System.Xml.Linq.XName" /> ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-180">Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c25bd-181">Ein <see cref="T:System.Int32" />-Wert, der den Hashcode für den <see cref="T:System.Xml.Linq.XName" /> enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-181">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-182">Diese Methode dient als Hashfunktion für <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-182">This method serves as a hash function for <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c25bd-183">Sie können <xref:System.Xml.Linq.XName.GetHashCode%2A> in Hashalgorithmen oder in Datenstrukturen wie Hashtabellen.</span><span class="sxs-lookup"><span data-stu-id="c25bd-183">You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-184">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-184">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.Linq.XName.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c25bd-185">Ruft den lokalen (nicht qualifizierten) Teil des Namens ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-185">Gets the local (unqualified) part of the name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c25bd-186">Ein <see cref="T:System.String" />, der den lokalen (nicht qualifizierten) Teil des Namens enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-186">A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-187">Diese Eigenschaft ist nicht garantiert `null`.</span><span class="sxs-lookup"><span data-stu-id="c25bd-187">This property is guaranteed to not be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c25bd-188">Das folgende Beispiel zeigt die Verwendung dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c25bd-188">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c25bd-189">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-189">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XName.Namespace" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-190">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-190">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNamespace Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNamespace ^ Namespace { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XName.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c25bd-191">Ruft den Namespaceteil des vollqualifizierten Namens ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-191">Gets the namespace part of the fully qualified name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c25bd-192">Ein <see cref="T:System.Xml.Linq.XNamespace" />, der den Namespaceteil des Namens enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-192">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-193">Es ist gewährleistet, dass die <xref:System.Xml.Linq.XName.Namespace%2A>-Eigenschaft nicht `null` ist.</span><span class="sxs-lookup"><span data-stu-id="c25bd-193">The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`.</span></span> <span data-ttu-id="c25bd-194">Wenn ein <xref:System.Xml.Linq.XName> befindet sich in keinem Namespace befindet, gibt diese Eigenschaft <xref:System.Xml.Linq.XNamespace.None%2A>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-194">If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c25bd-195">Das folgende Beispiel zeigt die Verwendung dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="c25bd-195">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c25bd-196">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-196">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-197">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-197">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Xml.Linq.XName.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c25bd-198">Gibt den URI des <see cref="T:System.Xml.Linq.XNamespace" /> für diesen <see cref="T:System.Xml.Linq.XName" /> zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-198">Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c25bd-199">Der URI des <see cref="T:System.Xml.Linq.XNamespace" /> für diesen <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-199">The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-200">Dies ist eine benutzerfreundliche Eigenschaft zum Abrufen der Namespacename aus einem <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-200">This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c25bd-201">In diesem Beispiel erstellt ein Element in einem Namespace, und klicken Sie dann gibt der Namespace des Elements.</span><span class="sxs-lookup"><span data-stu-id="c25bd-201">This example creates an element in a namespace, and then prints the element's namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root.Name.NamespaceName);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c25bd-202">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-202">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-203">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-203">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xml.Linq.XName * System.Xml.Linq.XName -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="c25bd-204">Der erste zu vergleichende <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-204">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="c25bd-205">Der zweite zu vergleichende <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-205">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c25bd-206">Gibt einen Wert zurück, der angibt, ob zwei Instanzen von <see cref="T:System.Xml.Linq.XName" /> gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-206">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c25bd-207">
            <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> gleich sind, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-207">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-208">Die überladenen `==` und `!=` eingeschlossen, um Vergleiche zwischen <xref:System.Xml.Linq.XName> und ein `string`, wie z. B.`element.Name == "SomeElementName"`</span><span class="sxs-lookup"><span data-stu-id="c25bd-208">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="c25bd-209">Die vordefinierten Gleichheitsoperatoren in c# erfordern einen Operanden in den Typ der anderen über verweiskonvertierungen nur konvertierbar sein.</span><span class="sxs-lookup"><span data-stu-id="c25bd-209">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="c25bd-210">Diese Operatoren sollten nicht die implizite Konvertierung einer Zeichenfolge in ein <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-210">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="c25bd-211">Das folgende Beispiel zeigt einige Vergleiche zwischen <xref:System.Xml.Linq.XName> Zeichenfolgen und Objekte.</span><span class="sxs-lookup"><span data-stu-id="c25bd-211">The following example shows some comparisons between <xref:System.Xml.Linq.XName> objects and strings.</span></span>  
  
```csharp  
XName xn;  
xn = XName.Get("Root");  
Console.WriteLine(xn == "Root");  
  
xn = XName.Get("Root", "http://www.adventure-works.com");  
Console.WriteLine(xn == "{http://www.adventure-works.com}Root");  
  
XElement root = new XElement("Root", "content");  
Console.WriteLine(root.Name == "Root");  
```  
  
```vb  
Dim xn As XName  
xn = XName.Get("Root")  
Console.WriteLine(xn = "Root")  
  
xn = XName.Get("Root", "http://www.adventure-works.com")  
Console.WriteLine(xn = "{http://www.adventure-works.com}Root")  
  
Dim root As XElement = New XElement("Root", "content")  
Console.WriteLine(root.Name = "Root")  
```  
  
 <span data-ttu-id="c25bd-212">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-212">This example produces the following output:</span></span>  
  
```  
True  
True  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-213">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-213">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XName (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Implicit(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XName ^(System::String ^ expandedName);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.op_Implicit expandedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName">
          <span data-ttu-id="c25bd-214">Eine Zeichenfolge, die einen erweiterten XML-Namen im Format <c>{namespace}localname</c> enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-214">A string that contains an expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c25bd-215">Konvertiert eine als erweiterter XML-Name (d.h. <c>{namespace}localname</c>) formatierte Zeichenfolge in ein <see cref="T:System.Xml.Linq.XName" />-Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-215">Converts a string formatted as an expanded XML name (that is,<c>{namespace}localname</c>) to an <see cref="T:System.Xml.Linq.XName" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c25bd-216">Ein <see cref="T:System.Xml.Linq.XName" />-Objekt, das aus dem erweiterten Namen erstellt wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-216">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-217">Sie verwenden bei der Erstellung dieser implizite Operator ein <xref:System.Xml.Linq.XElement> oder <xref:System.Xml.Linq.XAttribute> durch Übergabe einer Zeichenfolge an den entsprechenden Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="c25bd-217">You are using this implicit operator when you create an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> by passing a string to the appropriate constructor.</span></span>  
  
## Examples  
 <span data-ttu-id="c25bd-218">Das folgende Beispiel erstellt eine <xref:System.Xml.Linq.XName> durch eine Zeichenfolge zugewiesen wird, ruft die dieser Operator für implizite Konvertierung.</span><span class="sxs-lookup"><span data-stu-id="c25bd-218">The following example creates an <xref:System.Xml.Linq.XName> by assigning a string to it, which invokes this implicit conversion operator.</span></span>  
  
```csharp  
XElement el = new XElement("{http://www.adventure-works.com}Root", "content");  
Console.WriteLine(el);  
  
// The preferred approach is to initialize an XNamespace object  
// and use the overload of the addition operator.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el As XElement = New XElement("{http://www.adventure-works.com}Root", "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach is to import a global namespace and   
        ' use an XML literal.  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c25bd-219">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-219">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-220">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-220">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xml.Linq.XName * System.Xml.Linq.XName -&gt; bool" Usage="System.Xml.Linq.XName.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="c25bd-221">Der erste zu vergleichende <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-221">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="c25bd-222">Der zweite zu vergleichende <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-222">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c25bd-223">Gibt einen Wert zurück, der angibt, ob zwei Instanzen von <see cref="T:System.Xml.Linq.XName" /> ungleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-223">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c25bd-224">
            <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-224">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-225">Die überladenen `==` und `!=` eingeschlossen, um Vergleiche zwischen <xref:System.Xml.Linq.XName> und eine Zeichenfolge, z. B.`element.Name == "SomeElementName"`</span><span class="sxs-lookup"><span data-stu-id="c25bd-225">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="c25bd-226">Die vordefinierten Gleichheitsoperatoren in c# erfordern einen Operanden in den Typ der anderen über verweiskonvertierungen nur konvertierbar sein.</span><span class="sxs-lookup"><span data-stu-id="c25bd-226">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="c25bd-227">Diese Operatoren sollten nicht die implizite Konvertierung einer Zeichenfolge in ein <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-227">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="c25bd-228">Im folgenden C#-Beispiel wird ein <xref:System.Xml.Linq.XName> Objekt, das eine Zeichenfolge, die dieser Operator aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="c25bd-228">The following C# example compares an <xref:System.Xml.Linq.XName> object to a string, which invokes this operator.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
  
Console.WriteLine(root.Name != "{http://www.adventure-works.com}Root");  
  
// the following is the preferred idiom  
Console.WriteLine(root.Name != aw + "Root");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name <> "{http://www.adventure-works.com}Root")  
  
        ' the following is the preferred idiom  
        Console.WriteLine(root.Name <> GetXmlNamespace() + "Root")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c25bd-229">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-229">This example produces the following output:</span></span>  
  
```  
False  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-230">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-230">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals">
      <MemberSignature Language="C#" Value="bool IEquatable&lt;XName&gt;.Equals (System.Xml.Linq.XName other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(class System.Xml.Linq.XName other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#IEquatable&lt;System#Xml#Linq#XName&gt;#Equals(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As XName) As Boolean Implements IEquatable(Of XName).Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(System::Xml::Linq::XName ^ other) = IEquatable&lt;System::Xml::Linq::XName ^&gt;::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="c25bd-231">Das <see cref="T:System.Xml.Linq.XName" />, das mit diesem <see cref="T:System.Xml.Linq.XName" /> verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-231">The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c25bd-232">Zeigt an, ob der aktuelle <see cref="T:System.Xml.Linq.XName" /> dem angegebenen <see cref="T:System.Xml.Linq.XName" /> entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-232">Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c25bd-233">
            <see langword="true" />, wenn dieser <see cref="T:System.Xml.Linq.XName" /> dem angegebenen <see cref="T:System.Xml.Linq.XName" /> entspricht, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-233">
              <see langword="true" /> if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="c25bd-234">Die mit Daten zu füllende <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-234">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="c25bd-235">Das Ziel (siehe <see cref="T:System.Runtime.Serialization.StreamingContext" />) dieser Serialisierung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-235">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c25bd-236">Füllt eine <see cref="T:System.Runtime.Serialization.SerializationInfo" /> mit den Daten auf, die zum Serialisieren des Zielobjekts erforderlich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-236">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c25bd-237">Diese Methode wird intern verwendet, zum Serialisieren von Objektdiagrammen, die LINQ to XML-Objekte enthalten.</span><span class="sxs-lookup"><span data-stu-id="c25bd-237">This method is used internally to serialize object graphs that contain LINQ to XML objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xName.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c25bd-238">Gibt den erweiterten XML-Namen im Format <c>{namespace}localname</c> zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-238">Returns the expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c25bd-239">Ein <see cref="T:System.String" />, der den erweiterten XML-Namen im Format <c>{namespace}localname</c> enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-239">A <see cref="T:System.String" /> that contains the expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c25bd-240">Im folgenden Beispiel wird <xref:System.Console.WriteLine%2A>, und übergeben Sie ein <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="c25bd-240">The following example calls <xref:System.Console.WriteLine%2A>, passing an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="c25bd-241">Dies bewirkt, dass die <xref:System.Xml.Linq.XName.ToString%2A> Methode, die aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="c25bd-241">This causes the <xref:System.Xml.Linq.XName.ToString%2A> method to be called.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c25bd-242">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="c25bd-242">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="c25bd-243">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="c25bd-243">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="XNamespace" FullName="System.Xml.Linq.XNamespace">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f8b4bb70a95c94af015ea5e7b2e27732726997b0" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83521453" /></Metadata><TypeSignature Language="C#" Value="public sealed class XNamespace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNamespace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNamespace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNamespace" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNamespace sealed" />
  <TypeSignature Language="F#" Value="type XNamespace = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Xml.Linq" FromVersion="4.0.0.0" To="System.Xml.XDocument" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.XDocument" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="58de1-101">Stellt einen XML-Namespace dar.</span><span class="sxs-lookup"><span data-stu-id="58de1-101">Represents an XML namespace.</span></span> <span data-ttu-id="58de1-102">Diese Klasse kann nicht vererbt werden.</span><span class="sxs-lookup"><span data-stu-id="58de1-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58de1-103">Diese Klasse stellt das XML-Konstrukt von Namespaces dar.</span><span class="sxs-lookup"><span data-stu-id="58de1-103">This class represents the XML construct of namespaces.</span></span>  
  
 <span data-ttu-id="58de1-104">Jede <xref:System.Xml.Linq.XName> enthält eine <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="58de1-104">Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="58de1-105">Auch wenn sich ein Element nicht in einem Namespace befindet, enthält der <xref:System.Xml.Linq.XName> des Elements einen Namespace, und zwar <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="58de1-105">Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="58de1-106">Es ist gewährleistet, dass die <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType>-Eigenschaft nicht `null` ist.</span><span class="sxs-lookup"><span data-stu-id="58de1-106">The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> property is guaranteed to not be `null`.</span></span>  
  
## <a name="creating-an-xnamespace-object"></a><span data-ttu-id="58de1-107">Erstellen eines XNamespace-Objekts</span><span class="sxs-lookup"><span data-stu-id="58de1-107">Creating an XNamespace Object</span></span>  
 <span data-ttu-id="58de1-108">Die gängigste Methode zum Erstellen eines <xref:System.Xml.Linq.XNamespace> Objekts besteht darin, ihm eine Zeichenfolge zuzuweisen.</span><span class="sxs-lookup"><span data-stu-id="58de1-108">The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it.</span></span> <span data-ttu-id="58de1-109">Anschließend können Sie den Namespace mit einem lokalen Namen kombinieren, indem Sie die außer Kraft setzung des Additions Operators verwenden.</span><span class="sxs-lookup"><span data-stu-id="58de1-109">You can then combine the namespace with a local name by using the override of the addition operator.</span></span> <span data-ttu-id="58de1-110">Das folgende Beispiel zeigt diese Ausdrucksweise:</span><span class="sxs-lookup"><span data-stu-id="58de1-110">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="58de1-111">In Visual Basic würden Sie in der Regel jedoch wie folgt einen globalen Standard Namespace deklarieren:</span><span class="sxs-lookup"><span data-stu-id="58de1-111">However, in Visual Basic, you would typically declare a global default namespace, as follows:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>Content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-112">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-112">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">Content</Root>  
```  
  
 <span data-ttu-id="58de1-113">Wenn Sie einer <xref:System.Xml.Linq.XNamespace> eine Zeichenfolge zuweisen, wird die implizite Konvertierung von <xref:System.String>verwendet.</span><span class="sxs-lookup"><span data-stu-id="58de1-113">Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="58de1-114">Weitere Informationen und Beispiele finden [Sie unter Gewusst wie: Erstellen einesC#Dokuments mit Namespaces () (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) .</span><span class="sxs-lookup"><span data-stu-id="58de1-114">See [How to: Create a Document with Namespaces (C#) (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) for more information and examples.</span></span>  
  
 <span data-ttu-id="58de1-115">Weitere Informationen zur Verwendung von Namespaces in Visual Basic finden Sie unter [Namespaces in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) .</span><span class="sxs-lookup"><span data-stu-id="58de1-115">See [Namespaces in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) for more information on using namespaces in Visual Basic.</span></span>  
  
## <a name="controlling-namespace-prefixes"></a><span data-ttu-id="58de1-116">Steuern von Namespace Präfixen</span><span class="sxs-lookup"><span data-stu-id="58de1-116">Controlling Namespace Prefixes</span></span>  
 <span data-ttu-id="58de1-117">Wenn Sie ein Attribut erstellen, das einen Namespace deklariert, wird das im-Attribut angegebene Präfix im serialisierten XML-Code beibehalten.</span><span class="sxs-lookup"><span data-stu-id="58de1-117">If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</span></span> <span data-ttu-id="58de1-118">Beim Erstellen eines Attributs, das einen Namespace mit einem Präfix deklariert, erstellen Sie ein Attribut, bei dem der Namespace des Namens des Attributs <xref:System.Xml.Linq.XNamespace.Xmlns%2A> lautet und der Name des Attributs das Namespacepräfix ist.</span><span class="sxs-lookup"><span data-stu-id="58de1-118">To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix.</span></span> <span data-ttu-id="58de1-119">Der Wert des Attributs ist der URI des Namespace.</span><span class="sxs-lookup"><span data-stu-id="58de1-119">The value of the attribute is the URI of the namespace.</span></span> <span data-ttu-id="58de1-120">Das folgende Beispiel zeigt diese Ausdrucksweise:</span><span class="sxs-lookup"><span data-stu-id="58de1-120">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"), _  
    "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="58de1-121">In Visual Basic verwenden Sie in der Regel eine globale Namespace Deklaration, anstatt einen Namespace Knoten zum Steuern von Namespace Präfixen zu erstellen:</span><span class="sxs-lookup"><span data-stu-id="58de1-121">In Visual Basic, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>Content</aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-122">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-122">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">Content</aw:Root>  
```  
  
 <span data-ttu-id="58de1-123">Weitere Informationen finden Sie unter Gewusst [wie: Steuern von Namespace PräfixenC#() (LINQ to XML)](https://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span><span class="sxs-lookup"><span data-stu-id="58de1-123">For more information, see [How to: Control Namespace Prefixes (C#) (LINQ to XML)](https://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span></span>  
  
## <a name="creating-a-default-namespace"></a><span data-ttu-id="58de1-124">Erstellen eines Standard Namespace</span><span class="sxs-lookup"><span data-stu-id="58de1-124">Creating a Default Namespace</span></span>  
 <span data-ttu-id="58de1-125">Wenn beim Erstellen eines Attributs, das ein Namespace sein wird, der Attribut Name den Sonderwert "xmlns" aufweist, wird der Namespace bei der Serialisierung der XML-Struktur als Standard Namespace deklariert.</span><span class="sxs-lookup"><span data-stu-id="58de1-125">When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</span></span> <span data-ttu-id="58de1-126">Das spezielle Attribut mit dem Namen "xmlns" ist in keinem Namespace enthalten.</span><span class="sxs-lookup"><span data-stu-id="58de1-126">The special attribute with the name of "xmlns" itself is not in any namespace.</span></span> <span data-ttu-id="58de1-127">Der Wert des-Attributs ist der Namespace-URI.</span><span class="sxs-lookup"><span data-stu-id="58de1-127">The value of the attribute is the namespace URI.</span></span>  
  
 <span data-ttu-id="58de1-128">Im folgenden Beispiel wird eine XML-Struktur erstellt, die ein Attribut enthält, das so deklariert ist, dass der Namespace zum Standard Namespace wird:</span><span class="sxs-lookup"><span data-stu-id="58de1-128">The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute("xmlns", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute("xmlns", "http://www.adventure-works.com"), _  
    New XElement(aw + "Child", "content") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="58de1-129">In Visual Basic verwenden Sie in der Regel eine globale Standard Namespace Deklaration, anstatt einen Namespace Knoten zum Erstellen eines Standard Namespace zu erstellen:</span><span class="sxs-lookup"><span data-stu-id="58de1-129">In Visual Basic, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <Child>content</Child>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-130">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-130">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child>content</Child>  
</Root>  
```  
  
## <a name="xnamespace-atomization"></a><span data-ttu-id="58de1-131">XNamespace-Atomisierung</span><span class="sxs-lookup"><span data-stu-id="58de1-131">XNamespace Atomization</span></span>  
 <span data-ttu-id="58de1-132"><xref:System.Xml.Linq.XNamespace> Objekte werden garantiert atomisiert. Das heißt, wenn zwei <xref:System.Xml.Linq.XNamespace>-Objekte genau denselben URI aufweisen, verwenden Sie dieselbe Instanz gemeinsam.</span><span class="sxs-lookup"><span data-stu-id="58de1-132"><xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance.</span></span> <span data-ttu-id="58de1-133">Die Gleichheits-und Vergleichs Operatoren werden zu diesem Zweck explizit bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="58de1-133">The equality and comparison operators are provided explicitly for this purpose.</span></span>  
  
## <a name="using-expanded-names"></a><span data-ttu-id="58de1-134">Verwenden erweiterter Namen</span><span class="sxs-lookup"><span data-stu-id="58de1-134">Using Expanded Names</span></span>  
 <span data-ttu-id="58de1-135">Eine andere Möglichkeit, einen Namespace und einen lokalen Namen anzugeben, besteht darin, einen erweiterten Namen in der Form `{namespace}name`zu verwenden:</span><span class="sxs-lookup"><span data-stu-id="58de1-135">Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:</span></span>  
  
```csharp  
XElement e = new XElement("{http://www.adventure-works.com}Root",  
     new XAttribute("{http://www.adventure-works.com}Att", "content")  
);  
Console.WriteLine(e);  
```  
  
```vb  
Dim e As XElement = New XElement("{http://www.adventure-works.com}Root", _  
     New XAttribute("{http://www.adventure-works.com}Att", "content") _  
)  
Console.WriteLine(e)  
```  
  
 <span data-ttu-id="58de1-136">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-136">This example produces the following output:</span></span>  
  
```  
<Root p1:Att="content" xmlns:p1="http://www.adventure-works.com" xmlns="http://www.adventure-works.com" />  
```  
  
 <span data-ttu-id="58de1-137">Dieser Ansatz wirkt sich aber negativ auf die Leistung aus.</span><span class="sxs-lookup"><span data-stu-id="58de1-137">This approach has performance implications.</span></span> <span data-ttu-id="58de1-138">Jedes Mal, wenn Sie eine Zeichenfolge, die einen erweiterten Namen enthält, an [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] übergeben, muss der Name analysiert und nach dem atomisierten Namespace und dem atomisierten Namen gesucht werden.</span><span class="sxs-lookup"><span data-stu-id="58de1-138">Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name.</span></span> <span data-ttu-id="58de1-139">Dieser Prozess nimmt CPU-Zeit in Anspruch.</span><span class="sxs-lookup"><span data-stu-id="58de1-139">This process takes CPU time.</span></span> <span data-ttu-id="58de1-140">Wenn die Leistung wichtig ist, können Sie einen anderen Ansatz verwenden.</span><span class="sxs-lookup"><span data-stu-id="58de1-140">If performance is important, you may want to use a different approach.</span></span>  
  
 <span data-ttu-id="58de1-141">Mit Visual Basic wird empfohlen, XML-Literale zu verwenden, die nicht die Verwendung erweiterter Namen einschließen.</span><span class="sxs-lookup"><span data-stu-id="58de1-141">With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-142">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-142">LINQ to XML</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xNamespace.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="58de1-143">Die <see cref="T:System.Xml.Linq.XNamespace" />, die mit der aktuellen <see cref="T:System.Xml.Linq.XNamespace" /> verglichen werden soll.</span><span class="sxs-lookup"><span data-stu-id="58de1-143">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></param>
        <summary><span data-ttu-id="58de1-144">Bestimmt, ob das angegebene <see cref="T:System.Xml.Linq.XNamespace" /> mit der angegebenen <see cref="T:System.Xml.Linq.XNamespace" /> identisch ist.</span><span class="sxs-lookup"><span data-stu-id="58de1-144">Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="58de1-145">Ein <see cref="T:System.Boolean" />, das angibt, ob der angegebene <see cref="T:System.Xml.Linq.XNamespace" /> und der aktuelle <see cref="T:System.Xml.Linq.XNamespace" /> gleich sind.</span><span class="sxs-lookup"><span data-stu-id="58de1-145">A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58de1-146">Damit zwei <xref:System.Xml.Linq.XNamespace> Objekte gleich sind, müssen Sie denselben URI aufweisen.</span><span class="sxs-lookup"><span data-stu-id="58de1-146">For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="58de1-147">Im folgenden Beispiel werden zwei Namespaces verglichen, die auf denselben URI verweisen.</span><span class="sxs-lookup"><span data-stu-id="58de1-147">The following example compares two namespaces that refer to the same URI.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Console.WriteLine(GetXmlNamespace(aw) = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-148">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-148">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-149">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-149">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Get (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNamespace Get(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNamespace ^ Get(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member Get : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Get namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName"><span data-ttu-id="58de1-150">Ein <see cref="T:System.String" />, der einen Namespace-URI enthält.</span><span class="sxs-lookup"><span data-stu-id="58de1-150">A <see cref="T:System.String" /> that contains a namespace URI.</span></span></param>
        <summary><span data-ttu-id="58de1-151">Ruft einen <see cref="T:System.Xml.Linq.XNamespace" /> für den angegebenen URI (Uniform Resource Identifier) ab.</span><span class="sxs-lookup"><span data-stu-id="58de1-151">Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</span></span></summary>
        <returns><span data-ttu-id="58de1-152">Ein aus dem angegebenen URI erstellter <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="58de1-152">An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58de1-153">Das zurückgegebene <xref:System.Xml.Linq.XNamespace> Objekt ist garantiert atomarisch (d. h., es ist das einzige im System für diesen bestimmten URI).</span><span class="sxs-lookup"><span data-stu-id="58de1-153">The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="58de1-154">Im folgenden Beispiel wird eine <xref:System.Xml.Linq.XNamespace> aus einem angegebenen URI abgerufen.</span><span class="sxs-lookup"><span data-stu-id="58de1-154">The following example gets a <xref:System.Xml.Linq.XNamespace> from a specified URI.</span></span>  
  
```csharp  
XNamespace aw = XNamespace.Get("http://www.adventure-works.com");  
  
// This is the preferred form.  
XNamespace aw2 = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
Console.WriteLine(aw2);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = XNamespace.Get("http://www.adventure-works.com")  
  
        ' This is the preferred form.  
        Dim aw2 As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine(aw)  
        Console.WriteLine(aw2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-155">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-155">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-156">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-156">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xNamespace.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="58de1-157">Ruft einen Hashcode für diese <see cref="T:System.Xml.Linq.XNamespace" /> ab.</span><span class="sxs-lookup"><span data-stu-id="58de1-157">Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="58de1-158">Ein <see cref="T:System.Int32" />-Wert, der den Hashcode für den <see cref="T:System.Xml.Linq.XNamespace" /> enthält.</span><span class="sxs-lookup"><span data-stu-id="58de1-158">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58de1-159">Diese Methode dient als Hash Funktion für <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="58de1-159">This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="58de1-160">Sie können <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in Hash Algorithmen und Datenstrukturen wie Hash Tabellen verwenden.</span><span class="sxs-lookup"><span data-stu-id="58de1-160">You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-161">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-161">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName GetName (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XName GetName(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XName ^ GetName(System::String ^ localName);" />
      <MemberSignature Language="F#" Value="member this.GetName : string -&gt; System.Xml.Linq.XName" Usage="xNamespace.GetName localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="58de1-162">Ein <see cref="T:System.String" />, der einen lokalen Namen enthält.</span><span class="sxs-lookup"><span data-stu-id="58de1-162">A <see cref="T:System.String" /> that contains a local name.</span></span></param>
        <summary><span data-ttu-id="58de1-163">Gibt ein <see cref="T:System.Xml.Linq.XName" />-Objekt zurück, das aus diesem <see cref="T:System.Xml.Linq.XNamespace" /> und dem angegebenen lokalen Namen erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="58de1-163">Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span></span></summary>
        <returns><span data-ttu-id="58de1-164">Ein <see cref="T:System.Xml.Linq.XName" />, der aus diesem <see cref="T:System.Xml.Linq.XNamespace" /> und dem angegebenen lokalen Namen erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="58de1-164">An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58de1-165">Das zurückgegebene <xref:System.Xml.Linq.XName> Objekt ist garantiert atomarisch (d. h., es ist das einzige im System für einen bestimmten erweiterten Namen).</span><span class="sxs-lookup"><span data-stu-id="58de1-165">The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="58de1-166">Im folgenden Beispiel wird diese Eigenschaft verwendet, um eine <xref:System.Xml.Linq.XName>abzurufen.</span><span class="sxs-lookup"><span data-stu-id="58de1-166">The following example uses this property to retrieve an <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XName name = aw.GetName("Root");  
Console.WriteLine("{0}", name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim name As XName = aw.GetName("Root")  
        Console.WriteLine("{0}", name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-167">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-167">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-168">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-168">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="58de1-169">Ruft den URI (Uniform Resource Identifier) dieses Namespaces ab.</span><span class="sxs-lookup"><span data-stu-id="58de1-169">Gets the Uniform Resource Identifier (URI) of this namespace.</span></span></summary>
        <value><span data-ttu-id="58de1-170">Ein <see cref="T:System.String" />, der den URI des Namespaces enthält.</span><span class="sxs-lookup"><span data-stu-id="58de1-170">A <see cref="T:System.String" /> that contains the URI of the namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="58de1-171">Das folgende Beispiel zeigt, wie diese Eigenschaft verwendet wird:</span><span class="sxs-lookup"><span data-stu-id="58de1-171">The following example shows how to use this property:</span></span>  
  
```csharp  
string markup =  
@"<aw:Root  
    xmlns:aw='http://www.adventure-works.com'/>";  
XElement root = XElement.Parse(markup);  
Console.WriteLine(root.Name.Namespace.NamespaceName);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim root As XElement = <aw:Root/>  
        Console.WriteLine(root.Name.Namespace.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-172">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-172">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-173">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-173">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace None" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ None { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="58de1-174">Ruft das <see cref="T:System.Xml.Linq.XNamespace" />-Objekt ab, das keinem Namespace entspricht.</span><span class="sxs-lookup"><span data-stu-id="58de1-174">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</span></span></summary>
        <value><span data-ttu-id="58de1-175">Der <see cref="T:System.Xml.Linq.XNamespace" />, der keinem Namespace entspricht.</span><span class="sxs-lookup"><span data-stu-id="58de1-175">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58de1-176">Wenn ein Element oder Attribut keinen Namespace hat, wird sein Namespace auf den von dieser Eigenschaft zurückgegebenen Namespace festgelegt.</span><span class="sxs-lookup"><span data-stu-id="58de1-176">If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="58de1-177">Im folgenden Beispiel wird diese Eigenschaft verwendet, um zu bestimmen, welche Elemente keinen Namespace haben.</span><span class="sxs-lookup"><span data-stu-id="58de1-177">The following example shows uses this property to determine which elements are in no namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
  
XElement root = new XElement("Root",  
    new XElement(aw + "ChildInNamespace", "content"),  
    new XElement("ChildInNoNamespace", "content")  
);  
  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("Root element is in no namespace");  
else  
    Console.WriteLine("Root element is in a namespace");  
  
if (root.Element(aw + "ChildInNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNamespace element is in a namespace");  
  
if (root.Element("ChildInNoNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNoNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNoNamespace element is in a namespace");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <aw:ChildInNamespace>content</aw:ChildInNamespace>  
                <ChildInNoNamespace>content</ChildInNoNamespace>  
            </Root>  
  
        If (root.Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("Root element is in no namespace")  
        Else  
            Console.WriteLine("Root element is in a namespace")  
        End If  
  
        If (root.Element(GetXmlNamespace(aw) + "ChildInNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNamespace element is in a namespace")  
        End If  
  
        If (root.Element("ChildInNoNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNoNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNoNamespace element is in a namespace")  
        End If  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-178">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-178">This example produces the following output:</span></span>  
  
```  
Root element is in no namespace  
ChildInNamespace element is in a namespace  
ChildInNoNamespace element is in no namespace  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-179">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-179">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName operator + (System.Xml.Linq.XNamespace ns, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Addition(class System.Xml.Linq.XNamespace ns, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ns As XNamespace, localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ operator +(System::Xml::Linq::XNamespace ^ ns, System::String ^ localName);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Xml.Linq.XNamespace * string -&gt; System.Xml.Linq.XName" Usage="ns + localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns"><span data-ttu-id="58de1-180">Ein <see cref="T:System.Xml.Linq.XNamespace" />, der den Namespace enthält.</span><span class="sxs-lookup"><span data-stu-id="58de1-180">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</span></span></param>
        <param name="localName"><span data-ttu-id="58de1-181">Ein <see cref="T:System.String" />, der den lokalen Namen enthält.</span><span class="sxs-lookup"><span data-stu-id="58de1-181">A <see cref="T:System.String" /> that contains the local name.</span></span></param>
        <summary><span data-ttu-id="58de1-182">Kombiniert ein <see cref="T:System.Xml.Linq.XNamespace" />-Objekt mit einem lokalen Namen, um einen <see cref="T:System.Xml.Linq.XName" /> zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="58de1-182">Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="58de1-183">Der neue <see cref="T:System.Xml.Linq.XName" />, der aus dem Namespace und dem lokalen Namen erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="58de1-183">The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58de1-184">Dieser Operator ermöglicht das Kombinieren eines Namespace und eines lokalen Namens bei der Erstellung eines Elements oder Attributs.</span><span class="sxs-lookup"><span data-stu-id="58de1-184">This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.</span></span> <span data-ttu-id="58de1-185">Dieses Idiom bietet einige Vorteile der Namespace Präfixe, da Sie auf einen Namespace mit einer kurzen Kurzform verweisen können.</span><span class="sxs-lookup"><span data-stu-id="58de1-185">This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</span></span> <span data-ttu-id="58de1-186">Dadurch werden syntaktische Rauschen in dem Code, der XML-Strukturen erstellt, vermieden.</span><span class="sxs-lookup"><span data-stu-id="58de1-186">This eliminates syntactic noise in the code that creates XML trees.</span></span>  
  
## Examples  
 <span data-ttu-id="58de1-187">Im folgenden Beispiel wird gezeigt, wie der `+`-Operator verwendet wird, um eine <xref:System.Xml.Linq.XName> aus einem <xref:System.Xml.Linq.XNamespace> und einem lokalen Namen zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="58de1-187">The following example shows the use of the `+` operator to create an <xref:System.Xml.Linq.XName> from an <xref:System.Xml.Linq.XNamespace> and a local name.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XElement(aw + "Child") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="58de1-188">In Visual Basic ist dies die bevorzugte Vorgehensweise:</span><span class="sxs-lookup"><span data-stu-id="58de1-188">In Visual Basic, this is the preferred idiom:</span></span>  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Dim root As XElement = _  
            <Root>  
                <Child/>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-189">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-189">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-190">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-190">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="58de1-191">Der erste zu vergleichende <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="58de1-191">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="58de1-192">Der zweite zu vergleichende <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="58de1-192">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <summary><span data-ttu-id="58de1-193">Gibt einen Wert zurück, der angibt, ob zwei Instanzen von <see cref="T:System.Xml.Linq.XNamespace" /> gleich sind.</span><span class="sxs-lookup"><span data-stu-id="58de1-193">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</span></span></summary>
        <returns><span data-ttu-id="58de1-194">Ein <see cref="T:System.Boolean" />, das angibt, ob <paramref name="left" /> und <paramref name="right" /> gleich sind.</span><span class="sxs-lookup"><span data-stu-id="58de1-194">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58de1-195">Die Operator Überladungen `==` und `!=` bereitgestellt werden, um Vergleiche zwischen <xref:System.Xml.Linq.XNamespace> und Zeichenfolge (z. b. `element.Name.Namespace == "http://www.adventure-works.com"`) zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="58de1-195">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="58de1-196">Die vordefinierten Reference-Gleichheits C# Operatoren in erfordern, dass ein Operand nur durch Verweis Konvertierungen in den Typ der anderen konvertiert werden kann, und die implizite Konvertierung von String in <xref:System.Xml.Linq.XNamespace>wird nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="58de1-196">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>  
   
## Examples  
 <span data-ttu-id="58de1-197">Das folgende Beispiel zeigt den Vergleich einer <xref:System.Xml.Linq.XNamespace> und einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="58de1-197">The following example shows the comparison of an <xref:System.Xml.Linq.XNamespace> and a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-198">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-198">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-199">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-199">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XNamespace (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XNamespace op_Implicit(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XNamespace ^(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.op_Implicit namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName"><span data-ttu-id="58de1-200">Ein <see cref="T:System.String" />, der den Namespace-URI enthält.</span><span class="sxs-lookup"><span data-stu-id="58de1-200">A <see cref="T:System.String" /> that contains the namespace URI.</span></span></param>
        <summary><span data-ttu-id="58de1-201">Konvertiert eine Zeichenfolge mit einem URI (Uniform Resource Identifier) in einen <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="58de1-201">Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="58de1-202">Ein aus der URI-Zeichenfolge erstellter <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="58de1-202">An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="58de1-203">Das folgende Beispiel zeigt die Initialisierung einer <xref:System.Xml.Linq.XNamespace>-Variablen, indem ihr eine Zeichenfolge zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="58de1-203">The following example shows the initialization of an <xref:System.Xml.Linq.XNamespace> variable by assigning a string to it.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-204">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-204">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-205">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-205">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="System.Xml.Linq.XNamespace.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="58de1-206">Der erste zu vergleichende <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="58de1-206">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="58de1-207">Der zweite zu vergleichende <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="58de1-207">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <summary><span data-ttu-id="58de1-208">Gibt einen Wert zurück, der angibt, ob zwei Instanzen von <see cref="T:System.Xml.Linq.XNamespace" /> ungleich sind.</span><span class="sxs-lookup"><span data-stu-id="58de1-208">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</span></span></summary>
        <returns><span data-ttu-id="58de1-209">Ein <see cref="T:System.Boolean" />, das angibt, ob <paramref name="left" /> und <paramref name="right" /> ungleich sind.</span><span class="sxs-lookup"><span data-stu-id="58de1-209">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58de1-210">Die Operator Überladungen `==` und `!=` bereitgestellt werden, um Vergleiche zwischen <xref:System.Xml.Linq.XNamespace> und Zeichenfolge (z. b. `element.Name.Namespace == "http://www.adventure-works.com"`) zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="58de1-210">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="58de1-211">Die vordefinierten Reference-Gleichheits C# Operatoren in erfordern, dass ein Operand nur durch Verweis Konvertierungen in den Typ der anderen konvertiert werden kann, und die implizite Konvertierung von String in <xref:System.Xml.Linq.XNamespace>wird nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="58de1-211">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>   
  
## Examples  
 <span data-ttu-id="58de1-212">Das folgende Beispiel zeigt einen Vergleich eines <xref:System.Xml.Linq.XNamespace> mit einer Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="58de1-212">The following example shows a comparison of a <xref:System.Xml.Linq.XNamespace> to a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw != "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw <> "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-213">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-213">This example produces the following output:</span></span>  
  
```  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-214">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-214">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xNamespace.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="58de1-215">Gibt den URI dieses <see cref="T:System.Xml.Linq.XNamespace" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="58de1-215">Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="58de1-216">Der URI dieses <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="58de1-216">The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="58de1-217">Im folgenden Beispiel wird diese Methode verwendet, um einen Namespace in der Konsole zu drucken.</span><span class="sxs-lookup"><span data-stu-id="58de1-217">The following example uses this method to print a namespace on the console.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine("{0}", aw.ToString());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine("{0}", aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-218">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-218">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-219">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-219">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xml" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xml" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xml As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xml { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xml : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="58de1-220">Ruft das <see cref="T:System.Xml.Linq.XNamespace" />-Objekt ab, das dem XML-URI (<c>http://www.w3.org/XML/1998/namespace</c>) entspricht.</span><span class="sxs-lookup"><span data-stu-id="58de1-220">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span></span></summary>
        <value><span data-ttu-id="58de1-221">Der <see cref="T:System.Xml.Linq.XNamespace" />, der dem XML-URI (<c>http://www.w3.org/XML/1998/namespace</c>) entspricht.</span><span class="sxs-lookup"><span data-stu-id="58de1-221">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58de1-222">Bestimmte standardisierte Attribute, z. b. `space`, sind im `http://www.w3.org/XML/1998/namespace`-Namespace.</span><span class="sxs-lookup"><span data-stu-id="58de1-222">Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace.</span></span> <span data-ttu-id="58de1-223">Der W3C-Standard gibt an, dass dieser Namespace nicht als Attribut in der XML-Struktur deklariert werden muss.</span><span class="sxs-lookup"><span data-stu-id="58de1-223">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="58de1-224">Es ist ein reservierter Namespace, der immer automatisch im XML-Parser verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="58de1-224">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="58de1-225">Im folgenden Beispiel wird gezeigt, wie ein `xml:space="preserve"`-Attribut in einem XML-Baum erstellt wird:</span><span class="sxs-lookup"><span data-stu-id="58de1-225">The following example shows how to create an `xml:space="preserve"` attribute in an XML tree:</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute(XNamespace.Xml + "space", "preserve"),  
    new XElement("Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _  
    <Root xml:space="preserve">  
        <Child>content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="58de1-226">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-226">This example produces the following output:</span></span>  
  
```  
<Root xml:space="preserve">  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-227">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-227">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xmlns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xmlns As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xmlns { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xmlns : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xmlns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="58de1-228">Ruft das <see cref="T:System.Xml.Linq.XNamespace" />-Objekt ab, das dem xmlns-URI (<c>http://www.w3.org/2000/xmlns/</c>) entspricht.</span><span class="sxs-lookup"><span data-stu-id="58de1-228">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>).</span></span></summary>
        <value><span data-ttu-id="58de1-229">Der <see cref="T:System.Xml.Linq.XNamespace" />, der dem **xmlns** -URI (<c>http://www.w3.org/2000/xmlns/</c>) entspricht.</span><span class="sxs-lookup"><span data-stu-id="58de1-229">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58de1-230">Wenn Sie Namespaces deklarieren, befinden sich die Namespace Attribute selbst im **xmlns** -Namespace.</span><span class="sxs-lookup"><span data-stu-id="58de1-230">When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace.</span></span> <span data-ttu-id="58de1-231">Der W3C-Standard gibt an, dass dieser Namespace nicht als Attribut in der XML-Struktur deklariert werden muss.</span><span class="sxs-lookup"><span data-stu-id="58de1-231">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="58de1-232">Es ist ein reservierter Namespace, der immer automatisch im XML-Parser verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="58de1-232">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="58de1-233">Im folgenden Beispiel wird gezeigt, wie einem XML-Baum ein Namespace hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="58de1-233">The following example shows how to add a namespace to an XML tree.</span></span> <span data-ttu-id="58de1-234">Der Namespace für das Attribut, das den Namespace deklariert, ist der Namespace, der von dieser Eigenschaft zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="58de1-234">The namespace for the attribute that declares the namespace is the namespace returned by this property.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root = <aw:Root xmlns:aw="http://www.adventure-works.com">  
               <aw:Child>content</aw:Child>  
           </aw:Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="58de1-235">In Visual Basic lautet die bevorzugte Ausdrucksweise wie folgt:</span><span class="sxs-lookup"><span data-stu-id="58de1-235">In Visual Basic, the preferred idiom is:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>  
                <aw:Child>content</aw:Child>  
            </aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="58de1-236">Hierdurch wird folgende Ausgabe generiert:</span><span class="sxs-lookup"><span data-stu-id="58de1-236">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child>content</aw:Child>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="58de1-237">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="58de1-237">LINQ to XML</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="XDocument" FullName="System.Xml.Linq.XDocument">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="811c63ba3a9857cd16f108ae4d74df3d7f3d5847" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46628616" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XDocument : System.Xml.Linq.XContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XDocument extends System.Xml.Linq.XContainer" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class XDocument&#xA;Inherits XContainer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XDocument : System::Xml::Linq::XContainer" />
  <TypeSignature Language="F#" Value="type XDocument = class&#xA;    inherit XContainer" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="36b45-101">Stellt ein XML-Dokument dar.</span>
      <span class="sxs-lookup">
        <span data-stu-id="36b45-101">Represents an XML document.</span>
      </span>
      <span data-ttu-id="36b45-102">Informationen zu den Komponenten und zur Verwendung eines <see cref="T:System.Xml.Linq.XDocument" />-Objekts finden Sie unter <see href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">Übersicht über die „XDocument“-Klasse</see>.</span>
      <span class="sxs-lookup">
        <span data-stu-id="36b45-102">For the components and usage of an <see cref="T:System.Xml.Linq.XDocument" /> object, see <see href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">XDocument Class Overview</see>.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-103">Weitere Informationen zu den gültigen Inhalt von einem <xref:System.Xml.Linq.XDocument>, finden Sie unter [gültiger Inhalt von XElement- und XDocument-Objekten](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="36b45-103">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-104">Das folgende Beispiel erstellt ein Dokument und fügt dann einen Kommentar und ein Element hinzu.</span><span class="sxs-lookup"><span data-stu-id="36b45-104">The following example creates a document, and then adds a comment and an element to it.</span></span> <span data-ttu-id="36b45-105">Er erstellt dann ein anderes Dokument mit den Ergebnissen einer Abfrage.</span><span class="sxs-lookup"><span data-stu-id="36b45-105">It then composes another document using the results of a query.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim srcTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="36b45-106">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-106">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Linq.XNamespace" />
    <altmember cref="T:System.Xml.Linq.XDeclaration" />
    <altmember cref="T:System.Xml.Linq.XElement" />
    <altmember cref="T:System.Xml.Linq.XNode" />
    <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
      <span data-ttu-id="36b45-107">LINQ to XML</span>
      <span class="sxs-lookup">
        <span data-stu-id="36b45-107">LINQ to XML</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
      <span data-ttu-id="36b45-108">Übersicht über die XDocument-Klasse</span>
      <span class="sxs-lookup">
        <span data-stu-id="36b45-108">XDocument Class Overview</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="36b45-109">Initialisiert eine neue Instanz der <see cref="T:System.Xml.Linq.XDocument" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-109">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-110">Überladene Konstruktoren ermöglichen es Ihnen, erstellen Sie ein neues leeres <xref:System.Xml.Linq.XDocument>; zum Erstellen einer <xref:System.Xml.Linq.XDocument> mit etwas anfangsinhalt angegebenen; und die Erstellung einer <xref:System.Xml.Linq.XDocument> als eine Kopie eines anderen <xref:System.Xml.Linq.XDocument> Objekt.</span><span class="sxs-lookup"><span data-stu-id="36b45-110">Overloaded constructors enable you to create a new empty <xref:System.Xml.Linq.XDocument>; to create an <xref:System.Xml.Linq.XDocument> with some specified initial content; and to create an <xref:System.Xml.Linq.XDocument> as a copy of another <xref:System.Xml.Linq.XDocument> object.</span></span>  
  
 <span data-ttu-id="36b45-111">Die Anzahl der Szenarios, in denen Sie ein <xref:System.Xml.Linq.XDocument> erstellen müssen, ist sehr begrenzt.</span><span class="sxs-lookup"><span data-stu-id="36b45-111">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="36b45-112">Stattdessen können Sie i. d. R. die XML-Strukturen mit einem <xref:System.Xml.Linq.XElement>-Stammknoten erstellen.</span><span class="sxs-lookup"><span data-stu-id="36b45-112">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="36b45-113">Sofern es keine bestimmte Anforderung für das Erstellen eines Dokuments gibt (z. B., weil Sie Verarbeitungsanweisungen und Kommentare auf der obersten Ebene erstellen oder Dokumenttypen unterstützen müssen), ist es oft bequemer, <xref:System.Xml.Linq.XElement> als Stammknoten zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="36b45-113">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="36b45-114">Weitere Informationen zu den gültigen Inhalt von einem <xref:System.Xml.Linq.XDocument>, finden Sie unter [gültiger Inhalt von XElement- und XDocument-Objekten](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="36b45-114">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-115">Das folgende Beispiel erstellt ein Dokument und fügt dann einen Kommentar und ein Element hinzu.</span><span class="sxs-lookup"><span data-stu-id="36b45-115">The following example creates a document, and then adds a comment and an element to it.</span></span> <span data-ttu-id="36b45-116">Er erstellt dann ein anderes Dokument mit den Ergebnissen einer Abfrage.</span><span class="sxs-lookup"><span data-stu-id="36b45-116">It then composes another document using the results of a query.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim srcTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="36b45-117">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-117">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-118">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-118">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="36b45-119">Übersicht über die XDocument-Klasse</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-119">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="36b45-120">Initialisiert eine neue Instanz der <see cref="T:System.Xml.Linq.XDocument" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-120">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-121">Die Anzahl der Szenarios, in denen Sie ein <xref:System.Xml.Linq.XDocument> erstellen müssen, ist sehr begrenzt.</span><span class="sxs-lookup"><span data-stu-id="36b45-121">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="36b45-122">Stattdessen können Sie i. d. R. die XML-Strukturen mit einem <xref:System.Xml.Linq.XElement>-Stammknoten erstellen.</span><span class="sxs-lookup"><span data-stu-id="36b45-122">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="36b45-123">Sofern es keine bestimmte Anforderung für das Erstellen eines Dokuments gibt (z. B., weil Sie Verarbeitungsanweisungen und Kommentare auf der obersten Ebene erstellen oder Dokumenttypen unterstützen müssen), ist es oft bequemer, <xref:System.Xml.Linq.XElement> als Stammknoten zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="36b45-123">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="36b45-124">Weitere Informationen zu den gültigen Inhalt von einem <xref:System.Xml.Linq.XDocument>, finden Sie unter [gültiger Inhalt von XElement- und XDocument-Objekten](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="36b45-124">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-125">Das folgende Beispiel erstellt ein neues Dokument und fügt dann einen Kommentar und ein Element hinzu.</span><span class="sxs-lookup"><span data-stu-id="36b45-125">The following example creates a new document, and then adds a comment and an element to it.</span></span>  
  
```csharp  
XDocument doc = new XDocument();  
doc.Add(new XComment("This is a comment"));  
doc.Add(new XElement("Root", "content"));  
Console.WriteLine(doc);  
```  
  
```vb  
Dim doc As XDocument = New XDocument()  
doc.Add(<!--This is a comment-->)  
doc.Add(<Root>content</Root>)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="36b45-126">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-126">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>content</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-127">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-127">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="36b45-128">Übersicht über die XDocument-Klasse</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-128">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XDocument : obj[] -&gt; System.Xml.Linq.XDocument" Usage="new System.Xml.Linq.XDocument content" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="36b45-129">Eine Parameterliste von Inhaltsobjekten, die diesem Dokument hinzugefügt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-129">A parameter list of content objects to add to this document.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-130">Initialisiert eine neue Instanz der <see cref="T:System.Xml.Linq.XDocument" />-Klasse mit dem angegebenen Inhalt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-130">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-131">Die Anzahl der Szenarios, in denen Sie ein <xref:System.Xml.Linq.XDocument> erstellen müssen, ist sehr begrenzt.</span><span class="sxs-lookup"><span data-stu-id="36b45-131">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="36b45-132">Stattdessen können Sie i. d. R. die XML-Strukturen mit einem <xref:System.Xml.Linq.XElement>-Stammknoten erstellen.</span><span class="sxs-lookup"><span data-stu-id="36b45-132">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="36b45-133">Sofern es keine bestimmte Anforderung für das Erstellen eines Dokuments gibt (z. B., weil Sie Verarbeitungsanweisungen und Kommentare auf der obersten Ebene erstellen oder Dokumenttypen unterstützen müssen), ist es oft bequemer, <xref:System.Xml.Linq.XElement> als Stammknoten zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="36b45-133">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="36b45-134">Weitere Informationen zu den gültigen Inhalt von einem <xref:System.Xml.Linq.XDocument>, finden Sie unter [gültiger Inhalt von XElement- und XDocument-Objekten](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="36b45-134">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-135">Das folgende Beispiel erstellt ein Dokument und fügt dann einen Kommentar und ein Element hinzu.</span><span class="sxs-lookup"><span data-stu-id="36b45-135">The following example creates a document, and then adds a comment and an element to it.</span></span> <span data-ttu-id="36b45-136">Er erstellt dann ein anderes Dokument mit den Ergebnissen einer Abfrage.</span><span class="sxs-lookup"><span data-stu-id="36b45-136">It then composes another document using the results of a query.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim srcTree As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="36b45-137">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-137">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-138">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-138">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="36b45-139">Übersicht über die XDocument-Klasse</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-139">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument (System.Xml.Linq.XDocument other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XDocument other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument(System::Xml::Linq::XDocument ^ other);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XDocument : System.Xml.Linq.XDocument -&gt; System.Xml.Linq.XDocument" Usage="new System.Xml.Linq.XDocument other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XDocument" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="36b45-140">Das <see cref="T:System.Xml.Linq.XDocument" />-Objekt, das kopiert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-140">The <see cref="T:System.Xml.Linq.XDocument" /> object that will be copied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-141">Initialisiert eine neue Instanz der <see cref="T:System.Xml.Linq.XDocument" />-Klasse mit einem vorhandenen <see cref="T:System.Xml.Linq.XDocument" />-Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-141">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class from an existing <see cref="T:System.Xml.Linq.XDocument" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-142">Verwenden Sie diesen Konstruktor, um eine tiefe Kopie des machen eine <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="36b45-142">You use this constructor to make a deep copy of an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
 <span data-ttu-id="36b45-143">Dieser Konstruktor durchläuft, alle Knoten und Attribute im Dokument angegeben, der `other` -Parameter und erstellt Kopien von allen Knoten aus, wie er das neu initialisierte umfasst <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="36b45-143">This constructor traverses all nodes and attributes in the document specified in the `other` parameter, and creates copies of all nodes as it assembles the newly initialized <xref:System.Xml.Linq.XDocument>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-144">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-144">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="36b45-145">Übersicht über die XDocument-Klasse</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-145">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocument (System.Xml.Linq.XDeclaration declaration, params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XDeclaration declaration, object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (declaration As XDeclaration, ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocument(System::Xml::Linq::XDeclaration ^ declaration, ... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XDocument : System.Xml.Linq.XDeclaration * obj[] -&gt; System.Xml.Linq.XDocument" Usage="new System.Xml.Linq.XDocument (declaration, content)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="declaration" Type="System.Xml.Linq.XDeclaration" />
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">
          <span data-ttu-id="36b45-146">Eine <see cref="T:System.Xml.Linq.XDeclaration" /> für das Dokument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-146">An <see cref="T:System.Xml.Linq.XDeclaration" /> for the document.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="36b45-147">Der Inhalt des Dokuments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-147">The content of the document.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-148">Initialisiert eine neue Instanz der <see cref="T:System.Xml.Linq.XDocument" />-Klasse mit der angegebenen <see cref="T:System.Xml.Linq.XDeclaration" /> und dem angegebenen Inhalt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-148">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified <see cref="T:System.Xml.Linq.XDeclaration" /> and content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-149">Die Anzahl der Szenarios, in denen Sie ein <xref:System.Xml.Linq.XDocument> erstellen müssen, ist sehr begrenzt.</span><span class="sxs-lookup"><span data-stu-id="36b45-149">There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>.</span></span> <span data-ttu-id="36b45-150">Stattdessen können Sie i. d. R. die XML-Strukturen mit einem <xref:System.Xml.Linq.XElement>-Stammknoten erstellen.</span><span class="sxs-lookup"><span data-stu-id="36b45-150">Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node.</span></span> <span data-ttu-id="36b45-151">Sofern es keine bestimmte Anforderung für das Erstellen eines Dokuments gibt (z. B., weil Sie Verarbeitungsanweisungen und Kommentare auf der obersten Ebene erstellen oder Dokumenttypen unterstützen müssen), ist es oft bequemer, <xref:System.Xml.Linq.XElement> als Stammknoten zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="36b45-151">Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.</span></span>  
  
 <span data-ttu-id="36b45-152">Weitere Informationen zu den gültigen Inhalt von einem <xref:System.Xml.Linq.XDocument>, finden Sie unter [gültiger Inhalt von XElement- und XDocument-Objekten](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="36b45-152">For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-153">Im folgenden Beispiel wird dieser Konstruktor zum Erstellen eines Dokuments an.</span><span class="sxs-lookup"><span data-stu-id="36b45-153">The following example uses this constructor to create a document.</span></span>  
  
```csharp  
XDocument srcTree = new XDocument(  
    new XComment("This is a comment"),  
    new XElement("Root",  
        new XElement("Child1", "data1"),  
        new XElement("Child2", "data2"),  
        new XElement("Child3", "data3"),  
        new XElement("Child2", "data4"),  
        new XElement("Info5", "info5"),  
        new XElement("Info6", "info6"),  
        new XElement("Info7", "info7"),  
        new XElement("Info8", "info8")  
    )  
);  
  
XDocument doc = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XComment("This is a new comment"),  
    new XElement("Root",  
        from el in srcTree.Element("Root").Elements()  
        where ((string)el).StartsWith("data")  
        select el  
    )  
);  
doc.Save("Test.xml");  
Console.WriteLine(File.ReadAllText("Test.xml"));  
```  
  
```vb  
Dim srcTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>  
            <Child1>data1</Child1>  
            <Child2>data2</Child2>  
            <Child3>data3</Child3>  
            <Child2>data4</Child2>  
            <Info5>info5</Info5>  
            <Info6>info6</Info6>  
            <Info7>info7</Info7>  
            <Info8>info8</Info8>  
        </Root>  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a new comment-->  
        <Root>  
            <%= From el In srcTree.<Root>.Elements _  
                Where CStr(el).StartsWith("data") _  
                Select el %>  
        </Root>  
doc.Save("Test.xml")  
Console.WriteLine(File.ReadAllText("Test.xml"))  
```  
  
 <span data-ttu-id="36b45-154">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-154">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8" standalone="yes"?>  
<!--This is a new comment-->  
<Root>  
  <Child1>data1</Child1>  
  <Child2>data2</Child2>  
  <Child3>data3</Child3>  
  <Child2>data4</Child2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-155">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-155">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467">
          <span data-ttu-id="36b45-156">Übersicht über die XDocument-Klasse</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-156">XDocument Class Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Declaration">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XDeclaration Declaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XDeclaration Declaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.Declaration" />
      <MemberSignature Language="VB.NET" Value="Public Property Declaration As XDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XDeclaration ^ Declaration { System::Xml::Linq::XDeclaration ^ get(); void set(System::Xml::Linq::XDeclaration ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Declaration : System.Xml.Linq.XDeclaration with get, set" Usage="System.Xml.Linq.XDocument.Declaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36b45-157">Ruft die XML-Deklaration für das Dokument ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-157">Gets or sets the XML declaration for this document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36b45-158">Eine <see cref="T:System.Xml.Linq.XDeclaration" />, die die XML-Deklaration für dieses Dokument enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-158">An <see cref="T:System.Xml.Linq.XDeclaration" /> that contains the XML declaration for this document.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-159">Manchmal müssen Sie eine XML-Deklaration für ein Dokument zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="36b45-159">Sometimes you have to create an XML declaration for a document.</span></span> <span data-ttu-id="36b45-160">Wenn Sie möchten, um anzugeben, dass ein Dokument eigenständig ist, müssen Sie diese Eigenschaft verwenden.</span><span class="sxs-lookup"><span data-stu-id="36b45-160">If you want to indicate that a document is standalone, you must use this property.</span></span> <span data-ttu-id="36b45-161">Wenn Sie das Dokument mit einer anderen Codierung als Utf-8 codieren möchten, können Sie angeben, eine Codierung über die <xref:System.Xml.Linq.XDeclaration>.</span><span class="sxs-lookup"><span data-stu-id="36b45-161">If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <xref:System.Xml.Linq.XDeclaration>.</span></span> <span data-ttu-id="36b45-162">Ein anderer Ansatz für die Codierung eines Dokuments ist die Codierung auf einem <xref:System.Xml.XmlWriter> , dass Sie für das Schreiben von LINQ to XML übergeben.</span><span class="sxs-lookup"><span data-stu-id="36b45-162">Another approach for encoding a document is to specify the encoding on an <xref:System.Xml.XmlWriter> that you pass to LINQ to XML for writing.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-163">Im folgenden Beispiel wird diese Eigenschaft, um die XML-Deklaration eines Dokuments abzurufen.</span><span class="sxs-lookup"><span data-stu-id="36b45-163">The following example uses this property to retrieve the XML declaration of a document.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XComment("This is a comment"),  
    new XElement("Root", "content")  
);  
  
Console.WriteLine(doc.Declaration);  
```  
  
```vb  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <!--This is a comment-->  
        <Root>content</Root>  
  
Console.WriteLine(doc.Declaration)  
```  
  
 <span data-ttu-id="36b45-164">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-164">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8" standalone="yes"?>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Linq.XDeclaration" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-165">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-165">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="36b45-166">Gewusst wie: Lesen und Schreiben eines verschlüsselten Dokuments</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-166">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DocumentType">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XDocumentType DocumentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XDocumentType DocumentType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.DocumentType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentType As XDocumentType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XDocumentType ^ DocumentType { System::Xml::Linq::XDocumentType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentType : System.Xml.Linq.XDocumentType" Usage="System.Xml.Linq.XDocument.DocumentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocumentType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36b45-167">Ruft die Dokumenttypdefinition (DTD) für dieses Dokument ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-167">Gets the Document Type Definition (DTD) for this document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36b45-168">Ein <see cref="T:System.Xml.Linq.XDocumentType" />, der die DTD für dieses Dokument enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-168">A <see cref="T:System.Xml.Linq.XDocumentType" /> that contains the DTD for this document.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] <span data-ttu-id="36b45-169">bietet eingeschränkte Unterstützung für DTDs.</span><span class="sxs-lookup"><span data-stu-id="36b45-169"> provides limited support for DTDs.</span></span>  
  
 <span data-ttu-id="36b45-170">Sie können eine XML-Struktur mit einem XML-Dokument auffüllen, die eine DTD enthält.</span><span class="sxs-lookup"><span data-stu-id="36b45-170">You can populate an XML tree with an XML document that contains a DTD.</span></span> <span data-ttu-id="36b45-171">Die XML-Struktur enthält eine <xref:System.Xml.Linq.XDocument.DocumentType%2A> Knoten.</span><span class="sxs-lookup"><span data-stu-id="36b45-171">The XML tree will then contain a <xref:System.Xml.Linq.XDocument.DocumentType%2A> node.</span></span> <span data-ttu-id="36b45-172">Beim Serialisieren oder die Struktur speichern, werden die DTD ebenfalls serialisiert.</span><span class="sxs-lookup"><span data-stu-id="36b45-172">When you serialize or save the tree, the DTD will also be serialized.</span></span> [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] <span data-ttu-id="36b45-173">Erweitert alle Entitäten in der DTD.</span><span class="sxs-lookup"><span data-stu-id="36b45-173"> will expand any entities in the DTD.</span></span> <span data-ttu-id="36b45-174">Beim Serialisieren oder die XML-Struktur speichern, werden die Entitätsverweise nicht gespeichert werden. Stattdessen werden die Knoten mit der Entitätsverweisen, die durch den Text der Entität ersetzt gespeichert.</span><span class="sxs-lookup"><span data-stu-id="36b45-174">When you serialize or save the XML tree, the entity references are not saved; instead, the nodes are saved with the entity references replaced by the text of the entity.</span></span>  
  
 <span data-ttu-id="36b45-175">Wenn die DTD Standardattribute enthält, werden die Attribute in der XML-Struktur als normale Attribute erstellt.</span><span class="sxs-lookup"><span data-stu-id="36b45-175">If the DTD contains default attributes, the attributes are created in the XML tree as ordinary attributes.</span></span>  
  
 <span data-ttu-id="36b45-176">In der Standardeinstellung [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] überprüft nicht, dass ein Dokument basierend auf der DTD.</span><span class="sxs-lookup"><span data-stu-id="36b45-176">By default, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not validate a document based on its DTD.</span></span> <span data-ttu-id="36b45-177">Erstellen Sie zum Überprüfen eines Dokuments basierend auf einer DTD eine <xref:System.Xml.XmlReader> , der eine Validierung anhand einer DTD, und erstellen Sie eine XML-Struktur aus der <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-177">To validate a document based on a DTD, create an <xref:System.Xml.XmlReader> that will validate based on a DTD, and then create an XML tree from the <xref:System.Xml.XmlReader>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-178">Das folgende Beispiel erstellt ein Dokument mit einer <xref:System.Xml.Linq.XDocumentType>.</span><span class="sxs-lookup"><span data-stu-id="36b45-178">The following example creates a document that contains an <xref:System.Xml.Linq.XDocumentType>.</span></span>  
  
 <span data-ttu-id="36b45-179">Visual Basic unterstützt nicht die Dokumenttypen im XML-Literale.</span><span class="sxs-lookup"><span data-stu-id="36b45-179">Visual Basic does not support document types within XML literals.</span></span> <span data-ttu-id="36b45-180">Es ist jedoch möglich, ein Dokument zu erstellen, enthält ein Dokument vom ersten Erstellen eines Dokuments mithilfe von XML-Literalen und schließlich das Erstellen und hinzufügen, einer <xref:System.Xml.Linq.XDocumentType> Knoten in der entsprechenden Stelle in der XML-Struktur.</span><span class="sxs-lookup"><span data-stu-id="36b45-180">However, it is possible to create a document that contains a document type by first creating the document using XML literals, and then creating and adding an <xref:System.Xml.Linq.XDocumentType> node in the appropriate place in the XML tree.</span></span>  
  
```csharp  
string internalSubset = @"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
  
string target = "xml-stylesheet";  
string data = "href='mystyle.css' title='Compact' type='text/css'";  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XProcessingInstruction(target, data),  
    new XDocumentType("Pubs", null, null, internalSubset),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
Console.WriteLine(doc);  
  
doc.Save("test.xml");  
```  
  
```vb  
Dim internalSubset = _  
        "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
        "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
        "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
        "<!ELEMENT Author (#PCDATA)>"  
  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc.Nodes().Skip(1).First().AddAfterSelf(New XDocumentType("Pubs", Nothing, Nothing, internalSubset))  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="36b45-181">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-181">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment.-->  
<?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
<!DOCTYPE Pubs [<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>]>  
<Pubs>  
  <Book>  
    <Title>Artifacts of Roman Civilization</Title>  
    <Author>Moreno, Jordao</Author>  
  </Book>  
  <Book>  
    <Title>Midieval Tools and Implements</Title>  
    <Author>Gazit, Inbar</Author>  
  </Book>  
</Pubs>  
<!--This is another comment.-->  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Linq.XDocumentType" />
        <altmember cref="P:System.Xml.Linq.XDocument.NodeType" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-182">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-182">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="36b45-183">Erstellt ein neues <see cref="T:System.Xml.Linq.XDocument" /> aus einer mit einem URI angegebenen Datei, aus einem <see cref="T:System.IO.TextReader" /> oder aus einem <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-183">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file specified by a URI, from an <see cref="T:System.IO.TextReader" />, or from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-184">Verwenden eine der Überladungen dieser Methode werden soll, können Sie laden eine <xref:System.Xml.Linq.XDocument> aus einer Datei, einem <xref:System.IO.TextReader>, oder ein <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-184">Using one of the overloads of this method, you can load an <xref:System.Xml.Linq.XDocument> from a file, a <xref:System.IO.TextReader>, or an <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="36b45-185">Zum Erstellen einer <xref:System.Xml.Linq.XDocument> aus einer Zeichenfolge, die XML enthält, verwenden Sie <xref:System.Xml.Linq.XDocument.Parse%2A>.</span><span class="sxs-lookup"><span data-stu-id="36b45-185">To create an <xref:System.Xml.Linq.XDocument> from a string that contains XML, use <xref:System.Xml.Linq.XDocument.Parse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-186">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-186">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="36b45-187">Abfragen von XDocument kontra Abfragen von XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-187">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="36b45-188">Der Stream, der die XML-Daten enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-188">The stream that contains the XML data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-189">Erstellt mit dem angegebenen Stream eine neue <see cref="T:System.Xml.Linq.XDocument" />-Instanz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-189">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance by using the specified stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36b45-190">Ein <see cref="T:System.Xml.Linq.XDocument" />-Objekt, mit dem die im Stream enthaltenen Daten gelesen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-190">An <see cref="T:System.Xml.Linq.XDocument" /> object that reads the data that is contained in the stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-191">Wenn Sie die Ladeoptionen steuern möchten, verwenden Sie die <xref:System.Xml.Linq.XDocument.Load%2A> -Überladung mit <xref:System.Xml.Linq.LoadOptions> als Parameter.</span><span class="sxs-lookup"><span data-stu-id="36b45-191">If you want to control load options, use the <xref:System.Xml.Linq.XDocument.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="36b45-192">Die Funktion zum Laden der LINQ to XML basiert auf <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-192">The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-193">Aus diesem Grund können Sie fangen Sie alle Ausnahmen, die ausgelöst werden, indem die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Überladen von Methoden und die <xref:System.Xml.XmlReader> Methoden, die das Dokument lesen und analysieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-193">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="36b45-194">Wenn Sie ändern müssen, <xref:System.Xml.XmlReaderSettings>, gehen Sie folgendermaßen vor:</span><span class="sxs-lookup"><span data-stu-id="36b45-194">If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:</span></span>  
  
1.  <span data-ttu-id="36b45-195">Erstellen einer <xref:System.Xml.XmlReader> durch Aufrufen einer der <xref:System.Xml.XmlReader.Create%2A> -Überladungen nehmen <xref:System.Xml.XmlReaderSettings> als Parameter.</span><span class="sxs-lookup"><span data-stu-id="36b45-195">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="36b45-196">Übergeben Sie die <xref:System.Xml.XmlReader> eines der <xref:System.Xml.Linq.XDocument.Load%2A> Überladungen der <xref:System.Xml.Linq.XDocument> akzeptiert <xref:System.Xml.XmlReader> als Parameter.</span><span class="sxs-lookup"><span data-stu-id="36b45-196">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <span data-ttu-id="36b45-197">Ein <see cref="T:System.IO.TextReader" />, der den Inhalt für das <see cref="T:System.Xml.Linq.XDocument" /> enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-197">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-198">Erstellt ein neues <see cref="T:System.Xml.Linq.XDocument" /> aus einem <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-198">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36b45-199">Ein <see cref="T:System.Xml.Linq.XDocument" /> mit dem Inhalt des angegebenen <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-199">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-200">LINQ, um die Funktion zum Laden des XML-basiert auf <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-200">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-201">Aus diesem Grund können Sie fangen Sie alle Ausnahmen, die ausgelöst werden, indem die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Überladen von Methoden und die <xref:System.Xml.XmlReader> Methoden, die das Dokument lesen und analysieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-201">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-202">Das folgende Beispiel erstellt ein Dokument aus einem <xref:System.IO.StringReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-202">The following example creates a document from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader tr = new StringReader("<Root>Content</Root>");  
XDocument doc = XDocument.Load(tr);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim tr As TextReader = New StringReader("<Root>Content</Root>")  
Dim doc As XDocument = XDocument.Load(tr)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="36b45-203">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-203">This example produces the following output:</span></span>  
  
```xml  
<Root>Content</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-204">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-204">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="36b45-205">Abfragen von XDocument kontra Abfragen von XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-205">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::String ^ uri);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">
          <span data-ttu-id="36b45-206">Eine URI-Zeichenfolge, die auf die Datei verweist, die in ein neues <see cref="T:System.Xml.Linq.XDocument" /> geladen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-206">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-207">Erstellt ein neues <see cref="T:System.Xml.Linq.XDocument" /> aus einer Datei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-207">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36b45-208">Ein <see cref="T:System.Xml.Linq.XDocument" /> mit dem Inhalt der angegebenen Datei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-208">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-209">Diese Methode verwendet eine zugrunde liegende <xref:System.Xml.XmlReader> zum Lesen des XML-Codes in eine XML-Struktur.</span><span class="sxs-lookup"><span data-stu-id="36b45-209">This method uses an underlying <xref:System.Xml.XmlReader> to read the XML into an XML tree.</span></span>  
  
 <span data-ttu-id="36b45-210">Verwendung <xref:System.Xml.Linq.XDocument.Parse%2A> zum Erstellen einer <xref:System.Xml.Linq.XDocument> aus einer Zeichenfolge, die XML enthält.</span><span class="sxs-lookup"><span data-stu-id="36b45-210">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="36b45-211">LINQ, um die Funktion zum Laden des XML-basiert auf <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-211">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-212">Aus diesem Grund können Sie fangen Sie alle Ausnahmen, die ausgelöst werden, indem die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Überladen von Methoden und die <xref:System.Xml.XmlReader> Methoden, die das Dokument lesen und analysieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-212">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-213">Das folgende Beispiel zeigt, wie Sie laden eine <xref:System.Xml.Linq.XDocument> aus einer Datei.</span><span class="sxs-lookup"><span data-stu-id="36b45-213">The following example shows how to load an <xref:System.Xml.Linq.XDocument> from a file.</span></span>  
  
 <span data-ttu-id="36b45-214">In diesem Beispiel wird die folgende XML-Dokument verwendet:</span><span class="sxs-lookup"><span data-stu-id="36b45-214">This example uses the following XML document:</span></span>  
  
 [<span data-ttu-id="36b45-215">XML-Beispieldatei: Typische Bestellung (LINQ to XML)</span><span class="sxs-lookup"><span data-stu-id="36b45-215">Sample XML File: Typical Purchase Order (LINQ to XML)</span></span>](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)  
  
```csharp  
XDocument doc = XDocument.Load("PurchaseOrder.xml");  
Console.WriteLine(doc);  
```  
  
```vb  
Dim doc As XDocument = XDocument.Load("PurchaseOrder.xml")  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="36b45-216">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-216">This example produces the following output:</span></span>  
  
```  
<PurchaseOrder PurchaseOrderNumber="99503" OrderDate="1999-10-20">  
  <Address Type="Shipping">  
    <Name>Ellen Adams</Name>  
    <Street>123 Maple Street</Street>  
    <City>Mill Valley</City>  
    <State>CA</State>  
    <Zip>10999</Zip>  
    <Country>USA</Country>  
  </Address>  
  <Address Type="Billing">  
    <Name>Tai Yee</Name>  
    <Street>8 Oak Avenue</Street>  
    <City>Old Town</City>  
    <State>PA</State>  
    <Zip>95819</Zip>  
    <Country>USA</Country>  
  </Address>  
  <DeliveryNotes>Please leave packages in shed by driveway.</DeliveryNotes>  
  <Items>  
    <Item PartNumber="872-AA">  
      <ProductName>Lawnmower</ProductName>  
      <Quantity>1</Quantity>  
      <USPrice>148.95</USPrice>  
      <Comment>Confirm this is electric</Comment>  
    </Item>  
    <Item PartNumber="926-AA">  
      <ProductName>Baby Monitor</ProductName>  
      <Quantity>2</Quantity>  
      <USPrice>39.98</USPrice>  
      <ShipDate>1999-05-21</ShipDate>  
    </Item>  
  </Items>  
</PurchaseOrder>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-217">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-217">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="36b45-218">Abfragen von XDocument kontra Abfragen von XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-218">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="36b45-219">Ein <see cref="T:System.Xml.XmlReader" />, der den Inhalt für das <see cref="T:System.Xml.Linq.XDocument" /> enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-219">A <see cref="T:System.Xml.XmlReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-220">Erstellt ein neues <see cref="T:System.Xml.Linq.XDocument" /> aus einem <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-220">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36b45-221">Ein <see cref="T:System.Xml.Linq.XDocument" /> mit dem Inhalt des angegebenen <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-221">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-222">Eine Verwendungsmöglichkeit für diese Methode ist eine Kopie des ein DOM-Dokument in einer LINQ to XML-Struktur zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="36b45-222">One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree.</span></span> <span data-ttu-id="36b45-223">Zu diesem Zweck erstellen Sie eine <xref:System.Xml.XmlNodeReader> aus einem DOM-Dokument und dann die <xref:System.Xml.XmlNodeReader> zum Erstellen einer <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="36b45-223">To do this, you create an <xref:System.Xml.XmlNodeReader> from a DOM document, and then use the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
 <span data-ttu-id="36b45-224">LINQ, um die Funktion zum Laden des XML-basiert auf <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-224">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-225">Aus diesem Grund können Sie fangen Sie alle Ausnahmen, die ausgelöst werden, indem die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Überladen von Methoden und die <xref:System.Xml.XmlReader> Methoden, die das Dokument lesen und analysieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-225">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-226">Das folgende Beispiel erstellt ein DOM-Dokument, eine <xref:System.Xml.XmlNodeReader> erstellt aus dem DOM-Dokument, eine <xref:System.Xml.Linq.XDocument> mithilfe der <xref:System.Xml.XmlNodeReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-226">The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, creates an <xref:System.Xml.Linq.XDocument> using the <xref:System.Xml.XmlNodeReader>.</span></span>  
  
```csharp  
// Create a DOM document with some content.  
XmlDocument doc = new XmlDocument();  
XmlElement child = doc.CreateElement("Child");  
child.InnerText = "child contents";  
XmlElement root = doc.CreateElement("Root");  
root.AppendChild(child);  
doc.AppendChild(root);  
  
// create a reader and move to the content  
using (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  
    // the reader must be in the Interactive state in order to  
    // create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XDocument xRoot = XDocument.Load(nodeReader);  
    Console.WriteLine(xRoot);  
}  
```  
  
```vb  
' Create a DOM document with some content.  
Dim doc As XmlDocument = New XmlDocument()  
Dim child As XmlElement = doc.CreateElement("Child")  
child.InnerText = "child contents"  
Dim root As XmlElement = doc.CreateElement("Root")  
root.AppendChild(child)  
doc.AppendChild(root)  
  
' create a reader and move to the content  
Using nodeReader = New XmlNodeReader(doc)  
    ' the reader must be in the Interactive state in order to  
    ' create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XDocument = XDocument.Load(nodeReader)  
    Console.WriteLine(xRoot)  
End Using  
```  
  
 <span data-ttu-id="36b45-227">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-227">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>child contents</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-228">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-228">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="36b45-229">Abfragen von XDocument kontra Abfragen von XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-229">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (stream, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="36b45-230">Der Stream, der die XML-Daten enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-230">The stream containing the XML data.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="36b45-231">Ein <see cref="T:System.Xml.Linq.LoadOptions" />, das angibt, ob Basis-URI- und Zeileninformationen geladen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-231">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-232">Erstellt mithilfe des angegebenen Streams eine neue <see cref="T:System.Xml.Linq.XDocument" />-Instanz, wobei optional Leerraum und Zeileninformationen beibehalten werden und der Basis-URI festgelegt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-232">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36b45-233">Ein <see cref="T:System.Xml.Linq.XDocument" />-Objekt, mit dem die im Stream enthaltenen Daten gelesen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-233">An <see cref="T:System.Xml.Linq.XDocument" /> object that reads the data that is contained in the stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-234">Die Funktion zum Laden der LINQ to XML basiert auf <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-234">The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-235">Aus diesem Grund können Sie fangen Sie alle Ausnahmen, die ausgelöst werden, indem die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Überladen von Methoden und die <xref:System.Xml.XmlReader> Methoden, die das Dokument lesen und analysieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-235">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="36b45-236">Wenn Sie ändern müssen, <xref:System.Xml.XmlReaderSettings>, gehen Sie folgendermaßen vor:</span><span class="sxs-lookup"><span data-stu-id="36b45-236">If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:</span></span>  
  
1.  <span data-ttu-id="36b45-237">Erstellen Sie eine <xref:System.Xml.XmlReader> durch Aufrufen einer der <xref:System.Xml.XmlReader.Create%2A> Überladungen, die <xref:System.Xml.XmlReaderSettings> als Parameter.</span><span class="sxs-lookup"><span data-stu-id="36b45-237">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that takes <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="36b45-238">Übergeben Sie die <xref:System.Xml.XmlReader> eines der <xref:System.Xml.Linq.XDocument.Load%2A> Überladungen der <xref:System.Xml.Linq.XDocument> akzeptiert <xref:System.Xml.XmlReader> als Parameter.</span><span class="sxs-lookup"><span data-stu-id="36b45-238">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (textReader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <span data-ttu-id="36b45-239">Ein <see cref="T:System.IO.TextReader" />, der den Inhalt für das <see cref="T:System.Xml.Linq.XDocument" /> enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-239">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="36b45-240">Ein <see cref="T:System.Xml.Linq.LoadOptions" />, das Leerraumverhalten angibt und festlegt, ob Basis-URI- und Zeileninformationen geladen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-240">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-241">Erstellt ein neues <see cref="T:System.Xml.Linq.XDocument" /> aus einem <see cref="T:System.IO.TextReader" />, wobei optional Leerraum und Zeileninformationen beibehalten werden und der Basis-URI festgelegt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-241">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36b45-242">Ein <see cref="T:System.Xml.Linq.XDocument" /> mit dem XML, das aus dem angegebenen <see cref="T:System.IO.TextReader" /> gelesen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-242">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-243">Wenn die XML-Quelle eingezogen wird, Festlegen der <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag im `options` bewirkt, dass den Reader zum Lesen der gesamte Leerraum in der XML-Quelle.</span><span class="sxs-lookup"><span data-stu-id="36b45-243">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="36b45-244">Knoten vom Typ <xref:System.Xml.Linq.XText> für erhebliche und nicht signifikanter Leerraum erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="36b45-244">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="36b45-245">Festlegen, wenn die XML-Quelle eingezogen wird, nicht die <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag im `options` bewirkt, dass den Reader, um alle von der nicht signifikante Leerraum in der XML-Quelle zu ignorieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-245">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="36b45-246">Die XML-Struktur wird ohne Textknoten für nicht signifikante Leerraum erstellt.</span><span class="sxs-lookup"><span data-stu-id="36b45-246">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="36b45-247">Wenn die XML-Quelle nicht eingezogen wird, Festlegen der <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag im `options` hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="36b45-247">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="36b45-248">Signifikanter Leerraum wird weiterhin beibehalten, und es gibt keine Spannen nicht signifikanter Leerraum, der die Erstellung von weitere Leerraum-Textknoten verursachen können.</span><span class="sxs-lookup"><span data-stu-id="36b45-248">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="36b45-249">Weitere Informationen finden Sie unter [beibehalten von Leerraum beim Laden oder Analysieren der XML-](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) und [beibehalten Leerzeichen beim Serialisieren](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="36b45-249">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="36b45-250">Verwendung <xref:System.Xml.Linq.XDocument.Parse%2A> zum Erstellen einer <xref:System.Xml.Linq.XElement> aus einer Zeichenfolge, die XML enthält.</span><span class="sxs-lookup"><span data-stu-id="36b45-250">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="36b45-251">Festlegen von <xref:System.Xml.Linq.LoadOptions.SetBaseUri> ist ungültig, wenn das Laden von Daten aus einer <xref:System.IO.TextReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-251">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when loading from a <xref:System.IO.TextReader>.</span></span>  
  
 <span data-ttu-id="36b45-252">Es ist eine Leistungseinbuße, wenn Sie festlegen der <xref:System.Xml.Linq.LoadOptions.SetLineInfo> Flag.</span><span class="sxs-lookup"><span data-stu-id="36b45-252">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="36b45-253">Die Zeileninformationen ist unmittelbar nach dem Laden von XML-Dokument genau.</span><span class="sxs-lookup"><span data-stu-id="36b45-253">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="36b45-254">Wenn Sie die XML-Struktur nach dem Laden des Dokuments ändern, kann die Zeileninformationen unbrauchbar.</span><span class="sxs-lookup"><span data-stu-id="36b45-254">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="36b45-255">LINQ, um die Funktion zum Laden des XML-basiert auf <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-255">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-256">Aus diesem Grund können Sie fangen Sie alle Ausnahmen, die ausgelöst werden, indem die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Überladen von Methoden und die <xref:System.Xml.XmlReader> Methoden, die das Dokument lesen und analysieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-256">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-257">Das folgende Beispiel erstellt ein Dokument aus einem <xref:System.IO.StringReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-257">The following example creates a document from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader sr;  
int whiteSpaceNodes;  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XDocument xmlTree1 = XDocument.Load(sr, LoadOptions.None);  
sr.Close();  
whiteSpaceNodes = xmlTree1  
    .Element("Root")  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XDocument xmlTree2 = XDocument.Load(sr, LoadOptions.PreserveWhitespace);  
sr.Close();  
whiteSpaceNodes = xmlTree2  
    .Element("Root")  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim sr As TextReader  
Dim whiteSpaceNodes As Integer  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree1 As XDocument = XDocument.Load(sr, LoadOptions.None)  
sr.Close()  
whiteSpaceNodes = xmlTree1 _  
              .Element("Root") _  
              .DescendantNodesAndSelf() _  
              .OfType(Of XText)() _  
              .Where(Function(ByVal tNode As XNode) tNode. _  
                  ToString().Trim().Length = 0).Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree2 As XDocument = XDocument.Load(sr, LoadOptions.PreserveWhitespace)  
sr.Close()  
whiteSpaceNodes = xmlTree2 _  
              .Element("Root") _  
              .DescendantNodesAndSelf() _  
              .OfType(Of XText)() _  
              .Where(Function(ByVal tNode As XNode) tNode. _  
                  ToString().Trim().Length = 0).Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="36b45-258">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-258">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-259">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-259">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="36b45-260">Abfragen von XDocument kontra Abfragen von XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-260">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (string uri, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(string uri, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String, options As LoadOptions) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::String ^ uri, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : string * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (uri, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="uri">
          <span data-ttu-id="36b45-261">Eine URI-Zeichenfolge, die auf die Datei verweist, die in ein neues <see cref="T:System.Xml.Linq.XDocument" /> geladen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-261">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="36b45-262">Ein <see cref="T:System.Xml.Linq.LoadOptions" />, das Leerraumverhalten angibt und festlegt, ob Basis-URI- und Zeileninformationen geladen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-262">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-263">Erstellt ein neues <see cref="T:System.Xml.Linq.XDocument" /> aus einer Datei, wobei optional Leerraum und Zeileninformationen beibehalten werden und der Basis-URI festgelegt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-263">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36b45-264">Ein <see cref="T:System.Xml.Linq.XDocument" /> mit dem Inhalt der angegebenen Datei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-264">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-265">Wenn die XML-Quelle eingezogen wird, Festlegen der <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag im `options` bewirkt, dass den Reader zum Lesen der gesamte Leerraum in der XML-Quelle.</span><span class="sxs-lookup"><span data-stu-id="36b45-265">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="36b45-266">Knoten vom Typ <xref:System.Xml.Linq.XText> für erhebliche und nicht signifikanter Leerraum erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="36b45-266">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="36b45-267">Festlegen, wenn die XML-Quelle eingezogen wird, nicht die <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag im `options` bewirkt, dass den Reader, um alle von der nicht signifikante Leerraum in der XML-Quelle zu ignorieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-267">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="36b45-268">Die XML-Struktur wird ohne Textknoten für nicht signifikante Leerraum erstellt.</span><span class="sxs-lookup"><span data-stu-id="36b45-268">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="36b45-269">Wenn die XML-Quelle nicht eingezogen wird, Festlegen der <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag im `options` hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="36b45-269">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="36b45-270">Signifikanter Leerraum wird weiterhin beibehalten, und es gibt keine Spannen nicht signifikanter Leerraum, der die Erstellung von weitere Leerraum-Textknoten verursachen können.</span><span class="sxs-lookup"><span data-stu-id="36b45-270">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="36b45-271">Weitere Informationen finden Sie unter [beibehalten von Leerraum beim Laden oder Analysieren der XML-](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) und [beibehalten Leerzeichen beim Serialisieren](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="36b45-271">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="36b45-272">Verwendung <xref:System.Xml.Linq.XDocument.Parse%2A> zum Erstellen einer <xref:System.Xml.Linq.XDocument> aus einer Zeichenfolge, die XML enthält.</span><span class="sxs-lookup"><span data-stu-id="36b45-272">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="36b45-273">Es ist eine Leistungseinbuße, wenn Sie festlegen der <xref:System.Xml.Linq.LoadOptions.SetBaseUri> und <xref:System.Xml.Linq.LoadOptions.SetLineInfo> Flags.</span><span class="sxs-lookup"><span data-stu-id="36b45-273">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.</span></span>  
  
 <span data-ttu-id="36b45-274">Die Basis-URI und die Zeileninformationen sind direkt nach dem Laden von XML-Dokument genau.</span><span class="sxs-lookup"><span data-stu-id="36b45-274">The base URI and the line information are accurate immediately after loading the XML document.</span></span> <span data-ttu-id="36b45-275">Wenn Sie die XML-Struktur ändern, nach dem Laden des Dokuments, ist die base-URI- und Zeileninformationen Informationen möglicherweise unbrauchbar.</span><span class="sxs-lookup"><span data-stu-id="36b45-275">If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</span></span>  
  
 <span data-ttu-id="36b45-276">LINQ, um die Funktion zum Laden des XML-basiert auf <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-276">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-277">Aus diesem Grund können Sie fangen Sie alle Ausnahmen, die ausgelöst werden, indem die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Überladen von Methoden und die <xref:System.Xml.XmlReader> Methoden, die das Dokument lesen und analysieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-277">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-278">Das folgende Beispiel zeigt, wie Sie laden eine <xref:System.Xml.Linq.XDocument> aus einer Datei.</span><span class="sxs-lookup"><span data-stu-id="36b45-278">The following example shows how to load an <xref:System.Xml.Linq.XDocument> from a file.</span></span>  
  
 <span data-ttu-id="36b45-279">In diesem Beispiel wird die folgende XML-Dokument verwendet:</span><span class="sxs-lookup"><span data-stu-id="36b45-279">This example uses the following XML document:</span></span>  
  
 [<span data-ttu-id="36b45-280">XML-Beispieldatei: Typische Bestellung (LINQ to XML)</span><span class="sxs-lookup"><span data-stu-id="36b45-280">Sample XML File: Typical Purchase Order (LINQ to XML)</span></span>](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)  
  
```csharp  
XDocument doc1 = XDocument.Load("PurchaseOrder.xml", LoadOptions.None);  
Console.WriteLine("nodes if not preserving whitespace: {0}", doc1.DescendantNodes().Count());  
  
XDocument doc2 = XDocument.Load("PurchaseOrder.xml", LoadOptions.PreserveWhitespace);  
Console.WriteLine("nodes if preserving whitespace: {0}", doc2.DescendantNodes().Count());  
```  
  
```vb  
Dim doc1 As XDocument = XDocument.Load("PurchaseOrder.xml", LoadOptions.None)  
Console.WriteLine("nodes if not preserving whitespace: {0}", doc1.DescendantNodes().Count())  
  
Dim doc2 As XDocument = XDocument.Load("PurchaseOrder.xml", LoadOptions.PreserveWhitespace)  
Console.WriteLine("nodes if preserving whitespace: {0}", doc2.DescendantNodes().Count())  
```  
  
 <span data-ttu-id="36b45-281">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-281">This example produces the following output:</span></span>  
  
```  
nodes if not preserving whitespace: 48  
nodes if preserving whitespace: 82  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-282">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-282">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a">
          <span data-ttu-id="36b45-283">Abfragen von XDocument kontra Abfragen von XElement</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-283">Querying an XDocument vs. Querying an XElement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Load(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader, options As LoadOptions) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Load(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Load (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="36b45-284">Ein <see cref="T:System.Xml.XmlReader" />, der zum Ermitteln des Inhalts von <see cref="T:System.Xml.Linq.XDocument" /> gelesen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-284">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XDocument" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="36b45-285">Ein <see cref="T:System.Xml.Linq.LoadOptions" />, das angibt, ob Basis-URI- und Zeileninformationen geladen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-285">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-286">Lädt ein <see cref="T:System.Xml.Linq.XDocument" /> aus einem <see cref="T:System.Xml.XmlReader" />, wobei optional der Basis-URI festgelegt wird und die Zeileninformationen beibehalten werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-286">Loads an <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />, optionally setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36b45-287">Ein <see cref="T:System.Xml.Linq.XDocument" /> mit dem XML, das aus dem angegebenen <see cref="T:System.Xml.XmlReader" /> gelesen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-287">An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-288">Durch das Erstellen einer <xref:System.Xml.XmlNodeReader> von einem DOM-Dokument, und klicken Sie dann mit der <xref:System.Xml.XmlNodeReader> zum Erstellen einer <xref:System.Xml.Linq.XElement>, diese Methode kann verwendet werden, um eine Kopie des ein DOM-Dokument in einer LINQ to XML-Struktur zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="36b45-288">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="36b45-289">Verwendung <xref:System.Xml.Linq.XDocument.Parse%2A> zum Erstellen einer <xref:System.Xml.Linq.XDocument> aus einer Zeichenfolge, die XML enthält.</span><span class="sxs-lookup"><span data-stu-id="36b45-289">Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="36b45-290">Festlegen von <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> ist ungültig, wenn das Laden von Daten aus einer <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-290">Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-291">Die <xref:System.Xml.XmlReader> erfolgt die Konfiguration auf den Leerraum entweder lesen oder nicht.</span><span class="sxs-lookup"><span data-stu-id="36b45-291">The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not.</span></span> <span data-ttu-id="36b45-292">Die LINQ to XML-Struktur wird mit der Knoten mit Leerraum aufgefüllt, die der Reader angibt.</span><span class="sxs-lookup"><span data-stu-id="36b45-292">The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</span></span> <span data-ttu-id="36b45-293">Dadurch wird das Verhalten unabhängig davon, ob <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> oder nicht festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="36b45-293">This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.</span></span>  
  
 <span data-ttu-id="36b45-294">Die <xref:System.Xml.XmlReader> möglicherweise einen gültigen Basis-URI oder nicht.</span><span class="sxs-lookup"><span data-stu-id="36b45-294">The <xref:System.Xml.XmlReader> may have a valid base URI or not.</span></span> <span data-ttu-id="36b45-295">Setzen Sie <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, der Base URI wird in der XML-Struktur festgelegt werden, aus der Basis-URI, der vom gemeldet wird die <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-295">If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="36b45-296">Die <xref:System.Xml.XmlReader> möglicherweise eine gültige Informationen aus, oder nicht.</span><span class="sxs-lookup"><span data-stu-id="36b45-296">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="36b45-297">Setzen Sie <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, die Zeileninformationen wird in der XML-Struktur festgelegt werden, aus den Line-Informationen, die von berichtet wird die <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-297">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="36b45-298">Es ist eine Leistungseinbuße, wenn Sie festlegen der <xref:System.Xml.Linq.LoadOptions.SetLineInfo> Flag.</span><span class="sxs-lookup"><span data-stu-id="36b45-298">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="36b45-299">Die Zeileninformationen ist unmittelbar nach dem Laden von XML-Dokument genau.</span><span class="sxs-lookup"><span data-stu-id="36b45-299">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="36b45-300">Wenn Sie die XML-Struktur nach dem Laden des Dokuments ändern, kann die Zeileninformationen unbrauchbar.</span><span class="sxs-lookup"><span data-stu-id="36b45-300">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="36b45-301">LINQ, um die Funktion zum Laden des XML-basiert auf <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-301">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-302">Aus diesem Grund können Sie fangen Sie alle Ausnahmen, die ausgelöst werden, indem die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Überladen von Methoden und die <xref:System.Xml.XmlReader> Methoden, die das Dokument lesen und analysieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-302">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-303">Das folgende Beispiel lädt die Zeileninformationen, die sie aus lädt die <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-303">The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-304">Klicken Sie dann die Zeileninformationen ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="36b45-304">It then prints the line information.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
// Create a reader and move to the content.  
using (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  
{  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XDocument xRoot = XDocument.Load(nodeReader, LoadOptions.SetLineInfo);  
    Console.WriteLine("{0}{1}{2}",  
        "Element Name".PadRight(20),  
        "Line".PadRight(5),  
        "Position");  
    Console.WriteLine("{0}{1}{2}",  
        "------------".PadRight(20),  
        "----".PadRight(5),  
        "--------");  
    foreach (XElement e in xRoot.Elements("Root").DescendantsAndSelf())  
        Console.WriteLine("{0}{1}{2}",  
            ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
            ((IXmlLineInfo)e).LinePosition);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child>" & Environment.NewLine & _  
    "        <GrandChild/>" & Environment.NewLine & _  
    "    </Child>" & Environment.NewLine & _  
    "</Root>"  
  
' Create a reader and move to the content.  
Using nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  
  
    ' The reader must be in the Interactive state in order to  
    ' create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XDocument = XDocument.Load(nodeReader, LoadOptions.SetLineInfo)  
    Console.WriteLine("{0}{1}{2}", _  
        "Element Name".PadRight(20), _  
        "Line".PadRight(5), _  
        "Position")  
    Console.WriteLine("{0}{1}{2}", _  
        "------------".PadRight(20), _  
        "----".PadRight(5), _  
        "--------")  
    For Each e As XElement In xRoot.Elements("Root").DescendantsAndSelf()  
        Console.WriteLine("{0}{1}{2}", _  
            ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  
            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
            (DirectCast(e, IXmlLineInfo)).LinePosition)  
    Next  
End Using  
```  
  
 <span data-ttu-id="36b45-305">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-305">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-306">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-306">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="36b45-307">Gewusst wie: Lesen und Schreiben eines verschlüsselten Dokuments</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-307">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt; LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XDocument&gt; LoadAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XDocument ^&gt; ^ LoadAsync(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.IO.Stream * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;" Usage="System.Xml.Linq.XDocument.LoadAsync (stream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt; LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XDocument&gt; LoadAsync(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XDocument ^&gt; ^ LoadAsync(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.IO.TextReader * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;" Usage="System.Xml.Linq.XDocument.LoadAsync (textReader, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textReader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt; LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XDocument&gt; LoadAsync(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XDocument ^&gt; ^ LoadAsync(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.Xml.XmlReader * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;" Usage="System.Xml.Linq.XDocument.LoadAsync (reader, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.Linq.XDocument.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36b45-308">Ruft den Knotentyp für diesen Knoten ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-308">Gets the node type for this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36b45-309">Der Knotentyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-309">The node type.</span>
          </span>
          <span data-ttu-id="36b45-310">Für <see cref="T:System.Xml.Linq.XDocument" />-Objekte ist dieser Wert <see cref="F:System.Xml.XmlNodeType.Document" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-310">For <see cref="T:System.Xml.Linq.XDocument" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Document" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-311">Da alle Klassen, die abgeleitet <xref:System.Xml.Linq.XObject> enthalten eine <xref:System.Xml.Linq.XObject.NodeType%2A> -Eigenschaft, können Sie Code, der ausgeführt wird schreiben, auf Sammlungen von Objekten, in der Typ der einzelnen eine Unterklasse von <xref:System.Xml.Linq.XObject>.</span><span class="sxs-lookup"><span data-stu-id="36b45-311">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of objects where the type of each is a subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="36b45-312">Der Code kann dann für den Knotentyp jedes Objekts in der Auflistung überprüfen.</span><span class="sxs-lookup"><span data-stu-id="36b45-312">Your code can then test for the node type of each object in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-313">Das folgende Beispiel zeigt die Verwendung dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="36b45-313">The following example shows the use of this property.</span></span>  
  
```csharp  
// Note that this property uses XmlNodeType, which is in the System.Xml namespace.  
XDocument xmlTree = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XElement("Root", "content")  
);  
Console.WriteLine(xmlTree.NodeType);  
```  
  
```vb  
' Note that this property uses XmlNodeType, which is in the System.Xml namespace.  
Dim xmlTree As XDocument = _  
    <?xml version='1.0' encoding='utf-8' standalone='yes'?>  
        <Root>content</Root>  
Console.WriteLine("{0}", xmlTree.NodeType)  
```  
  
 <span data-ttu-id="36b45-314">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-314">This example produces the following output:</span></span>  
  
```  
Document  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNodeType" />
        <altmember cref="P:System.Xml.Linq.XDocument.DocumentType" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-315">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-315">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="36b45-316">Erstellt ein neues <see cref="T:System.Xml.Linq.XDocument" /> aus einer Zeichenfolge, wobei optional Leerraum und Zeileninformationen beibehalten werden und der Basis-URI festgelegt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-316">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-317">Diese Methode analysiert eine Zeichenfolge und erstellt eine XML-Struktur.</span><span class="sxs-lookup"><span data-stu-id="36b45-317">This method parses a string and creates an XML tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-318">Das folgende Beispiel erstellt eine Zeichenfolge, die XML-Code enthält.</span><span class="sxs-lookup"><span data-stu-id="36b45-318">The following example creates a string that contains XML.</span></span> <span data-ttu-id="36b45-319">Klicken Sie dann Analysieren der Zeichenfolge in eine <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="36b45-319">It then parses the string into an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
```csharp  
string str =  
@"<?xml version=""1.0""?>  
<!-- comment at the root level -->  
<Root>  
    <Child>Content</Child>  
</Root>";  
XDocument doc = XDocument.Parse(str);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim str As String = _  
    "<?xml version= '1.0'?>" & _  
    "<!-- comment at the root level -->" & _  
    "<Root>" & _  
    "  <Child>Content</Child>" & _  
    "</Root>"  
  
Dim doc As XDocument = XDocument.Parse(str)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="36b45-320">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-320">This example produces the following output:</span></span>  
  
```xml  
<!-- comment at the root level -->  
<Root>  
  <Child>Content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-321">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-321">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/8bdfdca0-6738-47a4-af3b-6d36d85e4d28">
          <span data-ttu-id="36b45-322">Parsen von XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-322">Parsing XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Parse (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Parse(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Parse(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Parse text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="36b45-323">Eine Zeichenfolge, die XML enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-323">A string that contains XML.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-324">Erstellt ein neues <see cref="T:System.Xml.Linq.XDocument" /> aus einer Zeichenfolge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-324">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36b45-325">Ein <see cref="T:System.Xml.Linq.XDocument" />, das aus der Zeichenfolge aufgefüllt wird, die XML enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-325">An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-326">Diese Methode wird Leerraum nicht beibehalten.</span><span class="sxs-lookup"><span data-stu-id="36b45-326">This method does not preserve white space.</span></span> <span data-ttu-id="36b45-327">Wenn Sie den Leerraum in der XML-Struktur beibehalten möchten, verwenden Sie die Überladung von <xref:System.Xml.Linq.XDocument.Parse%2A> akzeptiert <xref:System.Xml.Linq.LoadOptions> als Parameter.</span><span class="sxs-lookup"><span data-stu-id="36b45-327">If you want to preserve white space in the XML tree, use the overload of <xref:System.Xml.Linq.XDocument.Parse%2A> that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="36b45-328">Weitere Informationen finden Sie unter [beibehalten von Leerraum beim Laden oder Analysieren der XML-](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) und [beibehalten Leerzeichen beim Serialisieren](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="36b45-328">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="36b45-329">LINQ, um die Funktion zum Laden des XML-basiert auf <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-329">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-330">Aus diesem Grund können Sie fangen Sie alle Ausnahmen, die ausgelöst werden, indem die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Überladen von Methoden und die <xref:System.Xml.XmlReader> Methoden, die das Dokument lesen und analysieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-330">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-331">Das folgende Beispiel erstellt eine Zeichenfolge, die XML-Code enthält.</span><span class="sxs-lookup"><span data-stu-id="36b45-331">The following example creates a string that contains XML.</span></span> <span data-ttu-id="36b45-332">Klicken Sie dann Analysieren der Zeichenfolge in eine <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="36b45-332">It then parses the string into an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
```csharp  
string str =  
@"<?xml version=""1.0""?>  
<!-- comment at the root level -->  
<Root>  
    <Child>Content</Child>  
</Root>";  
XDocument doc = XDocument.Parse(str);  
Console.WriteLine(doc);  
```  
  
```vb  
Dim str As String = _  
    "<?xml version= '1.0'?>" & _  
    "<!-- comment at the root level -->" & _  
    "<Root>" & _  
    "  <Child>Content</Child>" & _  
    "</Root>"  
  
Dim doc As XDocument = XDocument.Parse(str)  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="36b45-333">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-333">This example produces the following output:</span></span>  
  
```xml  
<!-- comment at the root level -->  
<Root>  
  <Child>Content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-334">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-334">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/8bdfdca0-6738-47a4-af3b-6d36d85e4d28">
          <span data-ttu-id="36b45-335">Parsen von XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-335">Parsing XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XDocument Parse (string text, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XDocument Parse(string text, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String, options As LoadOptions) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XDocument ^ Parse(System::String ^ text, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XDocument" Usage="System.Xml.Linq.XDocument.Parse (text, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="36b45-336">Eine Zeichenfolge, die XML enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-336">A string that contains XML.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="36b45-337">Ein <see cref="T:System.Xml.Linq.LoadOptions" />, das Leerraumverhalten angibt und festlegt, ob Basis-URI- und Zeileninformationen geladen werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-337">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-338">Erstellt ein neues <see cref="T:System.Xml.Linq.XDocument" /> aus einer Zeichenfolge, wobei optional Leerraum und Zeileninformationen beibehalten werden und der Basis-URI festgelegt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-338">Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="36b45-339">Ein <see cref="T:System.Xml.Linq.XDocument" />, das aus der Zeichenfolge aufgefüllt wird, die XML enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-339">An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-340">Wenn die XML-Quelle eingezogen wird, Festlegen der <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag im `options` bewirkt, dass den Reader zum Lesen der gesamte Leerraum in der XML-Quelle.</span><span class="sxs-lookup"><span data-stu-id="36b45-340">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="36b45-341">Knoten vom Typ <xref:System.Xml.Linq.XText> für erhebliche und nicht signifikanter Leerraum erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="36b45-341">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="36b45-342">Festlegen, wenn die XML-Quelle eingezogen wird, nicht die <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag im `options` bewirkt, dass den Reader, um alle von der nicht signifikante Leerraum in der XML-Quelle zu ignorieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-342">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="36b45-343">Die XML-Struktur wird ohne Textknoten für nicht signifikante Leerraum erstellt.</span><span class="sxs-lookup"><span data-stu-id="36b45-343">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="36b45-344">Wenn die XML-Quelle nicht eingezogen wird, Festlegen der <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag im `options` hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="36b45-344">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="36b45-345">Signifikanter Leerraum wird weiterhin beibehalten, und es gibt keine Spannen nicht signifikanter Leerraum, der die Erstellung von weitere Leerraum-Textknoten verursachen können.</span><span class="sxs-lookup"><span data-stu-id="36b45-345">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="36b45-346">Weitere Informationen finden Sie unter [beibehalten von Leerraum beim Laden oder Analysieren der XML-](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) und [beibehalten Leerzeichen beim Serialisieren](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="36b45-346">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="36b45-347">Festlegen von <xref:System.Xml.Linq.LoadOptions.SetBaseUri> ist ungültig, wenn die Analyse von einem <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="36b45-347">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when parsing from a <xref:System.String>.</span></span>  
  
 <span data-ttu-id="36b45-348">Es ist eine Leistungseinbuße, wenn Sie festlegen der <xref:System.Xml.Linq.LoadOptions.SetLineInfo> Flag.</span><span class="sxs-lookup"><span data-stu-id="36b45-348">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="36b45-349">Die Zeileninformationen ist unmittelbar nach dem Laden von XML-Dokument genau.</span><span class="sxs-lookup"><span data-stu-id="36b45-349">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="36b45-350">Wenn Sie die XML-Struktur nach dem Laden des Dokuments ändern, kann die Zeileninformationen unbrauchbar.</span><span class="sxs-lookup"><span data-stu-id="36b45-350">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="36b45-351">LINQ, um die Funktion zum Laden des XML-basiert auf <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="36b45-351">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="36b45-352">Aus diesem Grund können Sie fangen Sie alle Ausnahmen, die ausgelöst werden, indem die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Überladen von Methoden und die <xref:System.Xml.XmlReader> Methoden, die das Dokument lesen und analysieren.</span><span class="sxs-lookup"><span data-stu-id="36b45-352">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-353">Im folgende Beispiel analysiert eine Zeichenfolge in eine <xref:System.Xml.Linq.XDocument>.</span><span class="sxs-lookup"><span data-stu-id="36b45-353">The following example parses a string into an <xref:System.Xml.Linq.XDocument>.</span></span>  
  
```csharp  
string str =  
@"<?xml version=""1.0""?>  
<!-- comment at the root level -->  
<Root>  
    <Child>Content</Child>  
</Root>";  
XDocument doc1 = XDocument.Parse(str, LoadOptions.PreserveWhitespace);  
Console.WriteLine("nodes when preserving whitespace: {0}", doc1.DescendantNodes().Count());  
XDocument doc2 = XDocument.Parse(str, LoadOptions.None);  
Console.WriteLine("nodes when not preserving whitespace: {0}", doc2.DescendantNodes().Count());  
```  
  
```vb  
Dim str As String = _  
"<?xml version= '1.0'?>" & Environment.NewLine & _  
"<!-- comment at the root level -->" & Environment.NewLine & _  
"<Root>" & Environment.NewLine & _  
"    <Child>Content</Child>"  & Environment.NewLine & _  
"</Root>"  
  
Dim doc1 As XDocument = XDocument.Parse(str, LoadOptions.PreserveWhitespace)  
Console.WriteLine("nodes when preserving whitespace: {0}", doc1.DescendantNodes().Count())  
Dim doc2 As XDocument = XDocument.Parse(str, LoadOptions.None)  
Console.WriteLine("nodes when not preserving whitespace: {0}", doc2.DescendantNodes().Count())  
```  
  
 <span data-ttu-id="36b45-354">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-354">This example produces the following output:</span></span>  
  
```  
nodes when preserving whitespace: 8  
nodes when not preserving whitespace: 4  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-355">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-355">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/8bdfdca0-6738-47a4-af3b-6d36d85e4d28">
          <span data-ttu-id="36b45-356">Parsen von XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-356">Parsing XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XElement Root { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XElement Root" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocument.Root" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Root As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XElement ^ Root { System::Xml::Linq::XElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Root : System.Xml.Linq.XElement" Usage="System.Xml.Linq.XDocument.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="36b45-357">Ruft das Stammelement der XML-Struktur für dieses Dokument ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-357">Gets the root element of the XML Tree for this document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="36b45-358">Das Stamm-<see cref="T:System.Xml.Linq.XElement" /> der XML-Struktur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-358">The root <see cref="T:System.Xml.Linq.XElement" /> of the XML tree.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-359">Diese Eigenschaft ist nützlich, wenn Sie erstellen möchten [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] Abfragen in demselben Kontext wie beim Erstellen von ihnen für eine Struktur als Stammelement <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="36b45-359">This property is useful when you want to compose [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] queries in the same context as when composing them for a tree rooted in <xref:System.Xml.Linq.XElement>.</span></span> <span data-ttu-id="36b45-360">Finden Sie unter [eine XDocument-Vergleich zwischen dem Abfragen. Abfragen ein "XElement"](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a) Weitere Details.</span><span class="sxs-lookup"><span data-stu-id="36b45-360">See [Querying an XDocument vs. Querying an XElement](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a) for more details.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-361">Im folgenden Beispiel wird diese Eigenschaft, um das Stammelement eines Dokuments abzurufen.</span><span class="sxs-lookup"><span data-stu-id="36b45-361">The following example uses this property to get the root element of a document.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
Console.WriteLine(doc.Root.Name.ToString());  
```  
  
```vb  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
        <!--This is another comment.-->  
    </Pubs>  
  
Console.WriteLine(doc.Root.Name.ToString())  
```  
  
 <span data-ttu-id="36b45-362">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-362">This example produces the following output:</span></span>  
  
```  
Pubs  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-363">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-363">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/69468b03-4f18-4d69-98a4-3fa90d904f08">
          <span data-ttu-id="36b45-364">Gewusst wie: Suchen aller Knoten in einem Namespace</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-364">How to: Find All Nodes in a Namespace</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="36b45-365">Serialisiert dieses <see cref="T:System.Xml.Linq.XDocument" /> in eine Datei, einen <see cref="T:System.IO.TextWriter" /> oder einen <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-365">Serializes this <see cref="T:System.Xml.Linq.XDocument" /> to a file, a <see cref="T:System.IO.TextWriter" />, or an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-366">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-366">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="36b45-367">Gewusst wie: Lesen und Schreiben eines verschlüsselten Dokuments</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-367">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream -&gt; unit" Usage="xDocument.Save stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="36b45-368">Der Stream, in den dieses <see cref="T:System.Xml.Linq.XDocument" /> ausgegeben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-368">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-369">Gibt diesen <see cref="T:System.Xml.Linq.XDocument" /> an den angegebenen <see cref="T:System.IO.Stream" /> aus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-369">Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-370">Das serialisierte XML werden eingezogen.</span><span class="sxs-lookup"><span data-stu-id="36b45-370">The serialized XML will be indented.</span></span> <span data-ttu-id="36b45-371">Alle bedeutungslosen Leerzeichen entfernt werden, und zusätzliche Leerzeichen wird hinzugefügt, damit der XML-Code ordnungsgemäß eingezogen.</span><span class="sxs-lookup"><span data-stu-id="36b45-371">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="36b45-372">Das Verhalten dieser Methode ist, dass nicht signifikante Leerraum nicht beibehalten wird.</span><span class="sxs-lookup"><span data-stu-id="36b45-372">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="36b45-373">Wenn Sie Leerzeichen steuern möchten, verwenden Sie die Überladung von <xref:System.Xml.Linq.XDocument.Save%2A> akzeptiert <xref:System.Xml.Linq.SaveOptions> als Parameter.</span><span class="sxs-lookup"><span data-stu-id="36b45-373">If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="36b45-374">Verwenden der <xref:System.Xml.Linq.SaveOptions.DisableFormatting> Option zum Speichern von XML ohne Einzug.</span><span class="sxs-lookup"><span data-stu-id="36b45-374">Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML.</span></span> <span data-ttu-id="36b45-375">Dadurch wird den Writer zum Schreiben alle Leerzeichen genau wie in der XML-Struktur dargestellt.</span><span class="sxs-lookup"><span data-stu-id="36b45-375">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="36b45-376">Verwendung <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option, falls Sie doppelte Namespacedeklarationen entfernen möchten.</span><span class="sxs-lookup"><span data-stu-id="36b45-376">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter -&gt; unit" Usage="xDocument.Save textWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="36b45-377">Ein <see cref="T:System.IO.TextWriter" />, in den das <see cref="T:System.Xml.Linq.XDocument" /> geschrieben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-377">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-378">Serialisiert dieses <see cref="T:System.Xml.Linq.XDocument" /> in einen <see cref="T:System.IO.TextWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-378">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-379">Das serialisierte XML werden eingezogen.</span><span class="sxs-lookup"><span data-stu-id="36b45-379">The serialized XML will be indented.</span></span> <span data-ttu-id="36b45-380">Alle bedeutungslosen Leerzeichen entfernt werden, und zusätzliche Leerzeichen wird hinzugefügt, damit der XML-Code ordnungsgemäß eingezogen.</span><span class="sxs-lookup"><span data-stu-id="36b45-380">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="36b45-381">Das Verhalten dieser Methode ist, dass nicht signifikante Leerraum nicht beibehalten wird.</span><span class="sxs-lookup"><span data-stu-id="36b45-381">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="36b45-382">Wenn Sie Leerzeichen steuern möchten, verwenden Sie die Überladung von <xref:System.Xml.Linq.XDocument.Save%2A> akzeptiert <xref:System.Xml.Linq.SaveOptions> als Parameter.</span><span class="sxs-lookup"><span data-stu-id="36b45-382">If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="36b45-383">Weitere Informationen finden Sie unter [beibehalten von Leerraum beim Laden oder Analysieren der XML-](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) und [beibehalten Leerzeichen beim Serialisieren](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="36b45-383">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-384">Das folgende Beispiel erstellt eine <xref:System.Xml.Linq.XDocument>, speichert das Dokument auf eine <xref:System.IO.StringWriter>, und gibt dann die Zeichenfolge an die Konsole.</span><span class="sxs-lookup"><span data-stu-id="36b45-384">The following example creates an <xref:System.Xml.Linq.XDocument>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
TextWriter tr = new StringWriter(sb);  
doc.Save(tr);  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
Dim tr As TextWriter = New StringWriter(sb)  
doc.Save(tr)  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="36b45-385">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-385">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-386">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-386">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="36b45-387">Gewusst wie: Lesen und Schreiben eines verschlüsselten Dokuments</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-387">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="xDocument.Save fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="36b45-388">Eine Zeichenfolge, die den Namen der Datei enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-388">A string that contains the name of the file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-389">Serialisieren Sie dieses <see cref="T:System.Xml.Linq.XDocument" /> in eine Datei, und überschreiben Sie dabei eine vorhandene Datei, sofern vorhanden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-389">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a file, overwriting an existing file, if it exists.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-390">Das serialisierte XML werden eingezogen.</span><span class="sxs-lookup"><span data-stu-id="36b45-390">The serialized XML will be indented.</span></span> <span data-ttu-id="36b45-391">Alle bedeutungslosen Leerzeichen entfernt werden, und zusätzliche Leerzeichen wird hinzugefügt, damit der XML-Code ordnungsgemäß eingezogen.</span><span class="sxs-lookup"><span data-stu-id="36b45-391">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="36b45-392">Das Verhalten dieser Methode ist, dass nicht signifikante Leerraum nicht beibehalten wird.</span><span class="sxs-lookup"><span data-stu-id="36b45-392">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="36b45-393">Wenn Sie Leerzeichen steuern möchten, verwenden Sie die Überladung von <xref:System.Xml.Linq.XDocument.Save%2A> akzeptiert <xref:System.Xml.Linq.SaveOptions> als Parameter.</span><span class="sxs-lookup"><span data-stu-id="36b45-393">If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="36b45-394">Weitere Informationen finden Sie unter [beibehalten von Leerraum beim Laden oder Analysieren der XML-](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) und [beibehalten Leerzeichen beim Serialisieren](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="36b45-394">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-395">Das folgende Beispiel erstellt eine <xref:System.Xml.Linq.XDocument>, speichert das Dokument in einer Datei und gibt dann die Datei in die Konsole.</span><span class="sxs-lookup"><span data-stu-id="36b45-395">The following example creates an <xref:System.Xml.Linq.XDocument>, saves the document to a file, and then prints the file to the console.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
doc.Save("Root.xml");  
Console.WriteLine(File.ReadAllText("Root.xml"));  
```  
  
```vb  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
doc.Save("Root.xml")  
Console.WriteLine(File.ReadAllText("Root.xml"))  
```  
  
 <span data-ttu-id="36b45-396">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-396">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-397">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-397">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="36b45-398">Gewusst wie: Lesen und Schreiben eines verschlüsselten Dokuments</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-398">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Save : System.Xml.XmlWriter -&gt; unit" Usage="xDocument.Save writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="36b45-399">Ein <see cref="T:System.Xml.XmlWriter" />, in den das <see cref="T:System.Xml.Linq.XDocument" /> geschrieben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-399">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-400">Serialisiert dieses <see cref="T:System.Xml.Linq.XDocument" /> in einen <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-400">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="36b45-401">Das folgende Beispiel zeigt die Vorgehensweise beim Speichern eines <xref:System.Xml.Linq.XDocument> in einem <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="36b45-401">The following example shows how to save an <xref:System.Xml.Linq.XDocument> to an <xref:System.Xml.XmlWriter>.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    XDocument doc = new XDocument(  
        new XElement("Child",  
            new XElement("GrandChild", "some content")  
        )  
    );  
    doc.Save(xw);  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    Dim doc As XDocument = New XDocument(<Child><GrandChild>some content</GrandChild></Child>)  
    doc.Save(xw)  
  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="36b45-402">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-402">This example produces the following output:</span></span>  
  
```xml  
<Child>  
  <GrandChild>some content</GrandChild>  
</Child>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-403">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-403">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="36b45-404">Gewusst wie: Lesen und Schreiben eines verschlüsselten Dokuments</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-404">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xDocument.Save (stream, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="36b45-405">Der Stream, in den dieses <see cref="T:System.Xml.Linq.XDocument" /> ausgegeben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-405">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="36b45-406">Ein <see cref="T:System.Xml.Linq.SaveOptions" />, das Formatierungsverhalten angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-406">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-407">Gibt dieses <see cref="T:System.Xml.Linq.XDocument" /> zum angegebenen <see cref="T:System.IO.Stream" /> aus und gibt Formatierungsverhalten optional an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-407">Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-408">In der Standardeinstellung die `options` festgelegt <xref:System.Xml.Linq.SaveOptions.None>.</span><span class="sxs-lookup"><span data-stu-id="36b45-408">By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>.</span></span> <span data-ttu-id="36b45-409">Diese Option wird entfernen alle überflüssigen nicht signifikanter Leerraum, und fügen Sie entsprechende nicht signifikanter Leerraum hinzu, sodass der XML-Code ordnungsgemäß eingezogen wird.</span><span class="sxs-lookup"><span data-stu-id="36b45-409">This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span>  
  
 <span data-ttu-id="36b45-410">Wenn Sie XML ohne Einzug speichern möchten, geben Sie die <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag für `options`.</span><span class="sxs-lookup"><span data-stu-id="36b45-410">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="36b45-411">Dadurch wird den Writer zum Schreiben alle Leerzeichen genau wie in der XML-Struktur dargestellt.</span><span class="sxs-lookup"><span data-stu-id="36b45-411">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="36b45-412">Verwendung <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option, falls Sie doppelte Namespacedeklarationen entfernen möchten.</span><span class="sxs-lookup"><span data-stu-id="36b45-412">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xDocument.Save (textWriter, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="36b45-413">Der <see cref="T:System.IO.TextWriter" />, an den das XML ausgegeben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-413">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="36b45-414">Ein <see cref="T:System.Xml.Linq.SaveOptions" />, das Formatierungsverhalten angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-414">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-415">Serialisiert dieses <see cref="T:System.Xml.Linq.XDocument" /> in einen <see cref="T:System.IO.TextWriter" />, wobei optional die Formatierung deaktiviert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-415">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-416">Wenn Sie XML ohne Einzug speichern möchten, geben Sie die <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag für `options`.</span><span class="sxs-lookup"><span data-stu-id="36b45-416">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="36b45-417">Dadurch wird den Writer zum Schreiben alle Leerzeichen genau wie in der XML-Struktur dargestellt.</span><span class="sxs-lookup"><span data-stu-id="36b45-417">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="36b45-418">Wenn Sie das eingezogene XML speichern möchten, geben Sie nicht die <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag für `options`.</span><span class="sxs-lookup"><span data-stu-id="36b45-418">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="36b45-419">Dies entfernt alle überflüssigen nicht signifikanter Leerraum und fügen Sie entsprechende nicht signifikanter Leerraum hinzu, sodass der XML-Code ordnungsgemäß eingezogen wird.</span><span class="sxs-lookup"><span data-stu-id="36b45-419">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="36b45-420">Dies ist das Standardverhalten und das Verhalten der Überladungen der <xref:System.Xml.Linq.XDocument.Save%2A> Methoden, die keinen akzeptieren `options` als Parameter.</span><span class="sxs-lookup"><span data-stu-id="36b45-420">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="36b45-421">Weitere Informationen finden Sie unter [beibehalten von Leerraum beim Laden oder Analysieren der XML-](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) und [beibehalten Leerzeichen beim Serialisieren](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="36b45-421">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-422">Das folgende Beispiel zeigt zwei Verwendungen dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="36b45-422">The following example shows two uses of this method.</span></span> <span data-ttu-id="36b45-423">Die erste Verwendung serialisiert die <xref:System.Xml.Linq.XDocument> bei der Formatierung.</span><span class="sxs-lookup"><span data-stu-id="36b45-423">The first use serializes the <xref:System.Xml.Linq.XDocument> with formatting.</span></span> <span data-ttu-id="36b45-424">Die zweite behält Leerraum.</span><span class="sxs-lookup"><span data-stu-id="36b45-424">The second preserves white space.</span></span> <span data-ttu-id="36b45-425">Da das Dokument keine Leerzeichen enthält, wie erstellt, gibt das Beibehalten von Leerzeichen den XML-Code ohne Einzug.</span><span class="sxs-lookup"><span data-stu-id="36b45-425">Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
StringBuilder sb1 = new StringBuilder();  
using (StringWriter sr1 = new StringWriter(sb1)) {  
    doc.Save(sr1, SaveOptions.None);  
    Console.WriteLine(sb1.ToString());  
}  
  
StringBuilder sb2 = new StringBuilder();  
using (StringWriter sr2 = new StringWriter(sb2)) {  
    doc.Save(sr2, SaveOptions.DisableFormatting);  
    Console.WriteLine(sb2.ToString());  
}  
```  
  
```vb  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
Dim sb1 As StringBuilder = New StringBuilder()  
  
Using sr1 = New StringWriter(sb1)  
    doc.Save(sr1, SaveOptions.None)  
    Console.WriteLine(sb1.ToString())  
End Using  
  
Dim sb2 As StringBuilder = New StringBuilder()  
  
Using sr2 = New StringWriter(sb2)  
    doc.Save(sr2, SaveOptions.DisableFormatting)  
    Console.WriteLine(sb2.ToString())  
End Using  
```  
  
 <span data-ttu-id="36b45-426">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-426">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child>content</Child>  
</Root>  
<?xml version="1.0" encoding="utf-16"?><Root><Child>content</Child></Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-427">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-427">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="36b45-428">Gewusst wie: Lesen und Schreiben eines verschlüsselten Dokuments</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-428">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String, options As SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : string * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xDocument.Save (fileName, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="36b45-429">Eine Zeichenfolge, die den Namen der Datei enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-429">A string that contains the name of the file.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="36b45-430">Ein <see cref="T:System.Xml.Linq.SaveOptions" />, das Formatierungsverhalten angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-430">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-431">Serialisiert dieses <see cref="T:System.Xml.Linq.XDocument" /> in eine Datei, wobei optional die Formatierung deaktiviert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-431">Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a file, optionally disabling formatting.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36b45-432">Wenn Sie XML ohne Einzug speichern möchten, geben Sie die <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag für `options`.</span><span class="sxs-lookup"><span data-stu-id="36b45-432">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="36b45-433">Dadurch wird den Writer zum Schreiben alle Leerzeichen genau wie in der XML-Struktur dargestellt.</span><span class="sxs-lookup"><span data-stu-id="36b45-433">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="36b45-434">Wenn Sie das eingezogene XML speichern möchten, geben Sie nicht die <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag für `options`.</span><span class="sxs-lookup"><span data-stu-id="36b45-434">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="36b45-435">Dies entfernt alle überflüssigen nicht signifikanter Leerraum und fügen Sie entsprechende nicht signifikanter Leerraum hinzu, sodass der XML-Code ordnungsgemäß eingezogen wird.</span><span class="sxs-lookup"><span data-stu-id="36b45-435">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="36b45-436">Dies ist das Standardverhalten und das Verhalten der Überladungen der <xref:System.Xml.Linq.XDocument.Save%2A> Methoden, die keinen akzeptieren `options` als Parameter.</span><span class="sxs-lookup"><span data-stu-id="36b45-436">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="36b45-437">Weitere Informationen finden Sie unter [beibehalten von Leerraum beim Laden oder Analysieren der XML-](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) und [beibehalten Leerzeichen beim Serialisieren](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="36b45-437">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36b45-438">Das folgende Beispiel zeigt zwei Verwendungen dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="36b45-438">The following example shows two uses of this method.</span></span> <span data-ttu-id="36b45-439">Die erste Verwendung behält Leerraum.</span><span class="sxs-lookup"><span data-stu-id="36b45-439">The first use preserves white space.</span></span> <span data-ttu-id="36b45-440">Serialisiert das zweite Argument der <xref:System.Xml.Linq.XDocument> mit Einzug.</span><span class="sxs-lookup"><span data-stu-id="36b45-440">The second one serializes the <xref:System.Xml.Linq.XDocument> with indenting.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
doc.Save("Root1.xml", SaveOptions.DisableFormatting);  
Console.WriteLine(File.ReadAllText("Root1.xml"));  
doc.Save("Root2.xml", SaveOptions.None);  
Console.WriteLine(File.ReadAllText("Root2.xml"));  
```  
  
```vb  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
        <Root><Child>content</Child></Root>  
  
doc.Save("Root1.xml", SaveOptions.DisableFormatting)  
Console.WriteLine(File.ReadAllText("Root1.xml"))  
doc.Save("Root2.xml", SaveOptions.None)  
Console.WriteLine(File.ReadAllText("Root2.xml"))  
```  
  
 <span data-ttu-id="36b45-441">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-441">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8"?><Root><Child>content</Child></Root>  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-442">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-442">LINQ to XML</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/215bcf5b-284b-4d7e-a95a-8d8e241341a9">
          <span data-ttu-id="36b45-443">Gewusst wie: Lesen und Schreiben eines verschlüsselten Dokuments</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-443">How to: Read and Write an Encoded Document</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.SaveAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.IO.Stream * System.Xml.Linq.SaveOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.SaveAsync (stream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.IO.TextWriter * System.Xml.Linq.SaveOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.SaveAsync (textWriter, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textWriter">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.WriteTo : System.Xml.XmlWriter -&gt; unit" Usage="xDocument.WriteTo writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="36b45-444">Ein <see cref="T:System.Xml.XmlWriter" />, in den diese Methode schreibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-444">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="36b45-445">Schreibt dieses Dokument in einen <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-445">Write this document to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="36b45-446">Das folgende Beispiel zeigt, wie Sie schreiben eine <xref:System.Xml.Linq.XDocument> auf eine <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="36b45-446">The following example shows how to write an <xref:System.Xml.Linq.XDocument> to an <xref:System.Xml.XmlWriter>.</span></span> <span data-ttu-id="36b45-447">Beachten Sie, dass im Beispiel wird eine XML-Deklaration nicht geschrieben haben.</span><span class="sxs-lookup"><span data-stu-id="36b45-447">Note that the example did not write an XML declaration.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws))  
{  
    XDocument doc = new XDocument(  
        new XElement("Child",  
            new XElement("GrandChild", "some content")  
        )  
    );  
    doc.WriteTo(xw);  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    Dim doc As XDocument = New XDocument(<Child><GrandChild>some content</GrandChild></Child>)  
    doc.WriteTo(xw)  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="36b45-448">Dieses Beispiel erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="36b45-448">This example produces the following output:</span></span>  
  
```xml  
<Child>  
  <GrandChild>some content</GrandChild>  
</Child>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Save" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XDocument.Parse" />
        <related type="Article" href="http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="36b45-449">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="36b45-449">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocument.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteToAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xDocument.WriteToAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
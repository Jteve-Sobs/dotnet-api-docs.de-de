<Type Name="HttpRuntimeSection" FullName="System.Web.Configuration.HttpRuntimeSection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="30cc509d191a9e3ff38a5f1d1486d60051be7cb4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30540374" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpRuntimeSection : System.Configuration.ConfigurationSection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpRuntimeSection extends System.Configuration.ConfigurationSection" />
  <TypeSignature Language="DocId" Value="T:System.Web.Configuration.HttpRuntimeSection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpRuntimeSection&#xA;Inherits ConfigurationSection" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpRuntimeSection sealed : System::Configuration::ConfigurationSection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationSection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Konfiguriert die ASP.NET-HTTP-Laufzeit. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.HttpRuntimeSection> können Sie diese Parameter zu behandeln, die das Verhalten der ASP.NET-Laufzeit beeinflussen.  
  
 Bezieht sich auf den Knoten in der Konfigurationsdatei, die durch das Element ist und auf beliebigen Ebenen der Konfigurationshierarchie verwendet werden kann.  
  
 Die <xref:System.Web.Configuration.HttpRuntimeSection> Abschnitt enthält Anweisungen, die Folgendes verwalten:  
  
-   Fordern Sie die Ausführung Timeouts.  
  
-   Direktiven für die Threadplanung auf Anwendungsebene.  
  
-   Anweisungen, die Grenzwerte für die Warteschlange von Anwendung zu steuern.  
  
-   Anforderungslänge.  
  
 Wenn mehr als eine Anwendung in einem einzelnen Prozess ausgeführt wird, sollten Sie nach unten in diesem Abschnitt sperren, sodass Anwendungen die relative Priorität untereinander zur Erhöhung der Rechte können nicht.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpRuntimeSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.HttpRuntimeSection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpRuntimeSection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Configuration.HttpRuntimeSection" />-Klasse mit Standardeinstellungen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie zum Erstellen einer <xref:System.Web.Configuration.HttpRuntimeSection> Objekt.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#2)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.ConfigurationAllowDefinition" />
      </Docs>
    </Member>
    <Member MemberName="AllowDynamicModuleRegistration">
      <MemberSignature Language="C#" Value="public bool AllowDynamicModuleRegistration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDynamicModuleRegistration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.AllowDynamicModuleRegistration" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDynamicModuleRegistration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDynamicModuleRegistration { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("allowDynamicModuleRegistration", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob <see cref="M:System.Web.HttpApplication.RegisterModule(System.Type)" />-Methodenaufrufe zulässig sind, oder legt diesen fest. Der Standardwert ist <see langword="true" />.</summary>
        <value>
          <see langword="true" />, wenn <see cref="M:System.Web.HttpApplication.RegisterModule(System.Type)" />-Methodenaufrufe zulässig sind; andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApartmentThreading">
      <MemberSignature Language="C#" Value="public bool ApartmentThreading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApartmentThreading" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.ApartmentThreading" />
      <MemberSignature Language="VB.NET" Value="Public Property ApartmentThreading As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ApartmentThreading { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("apartmentThreading", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Apartmentthreading für Anwendungen aktiviert ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn Apartmentthreading für Anwendungen aktiviert ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert ist `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppRequestQueueLimit">
      <MemberSignature Language="C#" Value="public int AppRequestQueueLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AppRequestQueueLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.AppRequestQueueLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property AppRequestQueueLimit As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AppRequestQueueLimit { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("appRequestQueueLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die maximale Anzahl von Anforderungen angibt, die von ASP.NET für die Anwendung in der Warteschlange gespeichert werden können, oder legt diese fest.</summary>
        <value>Die maximale Anzahl von Anforderungen, die in der Warteschlange gespeichert werden kann.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET stellt die Warteschlange Anforderungen auf, wenn nicht genügend freie Threads für die Verarbeitung vorhanden sind.  
  
> [!NOTE]
>  Wenn die Anzahl der Anforderungen in der Warteschlange überschreitet die Begrenzung durch diese Einstellung, eingehende Anforderungen zurückgewiesen mit einem "503 - Server zu ausgelastet" Fehler.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.AppRequestQueueLimit%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#16](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#16)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#16](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncPreloadMode">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.AsyncPreloadModeFlags AsyncPreloadMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.AsyncPreloadModeFlags AsyncPreloadMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.AsyncPreloadMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPreloadMode As AsyncPreloadModeFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::AsyncPreloadModeFlags AsyncPreloadMode { System::Web::Configuration::AsyncPreloadModeFlags get(); void set(System::Web::Configuration::AsyncPreloadModeFlags value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("asyncPreloadMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.AsyncPreloadModeFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Modus der Anforderungsentität ab, die asynchron vorab geladen wird, oder legt diesen fest.</summary>
        <value>Der Modus der Anforderungsentität.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft muss festgelegt werden, bevor <xref:System.Web.RequestNotification.ExecuteRequestHandler> in der ASP.NET-Pipeline festgelegt ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRegexMatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan DefaultRegexMatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DefaultRegexMatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.DefaultRegexMatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultRegexMatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan DefaultRegexMatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("defaultRegexMatchTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, wie lange ein regulärer Ausdruck zulässig ist, um eine Übereinstimmung zu erzielen, oder legt dies fest.</summary>
        <value>Die Zeit, die für den Vergleich mit regulären Ausdrücken zulässig ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelayNotificationTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan DelayNotificationTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DelayNotificationTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.DelayNotificationTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayNotificationTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan DelayNotificationTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanSecondsConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("delayNotificationTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Verzögerung bei Änderungsbenachrichtigungen ab oder legt diese fest.</summary>
        <value>Die Zeit in Sekunden, die die Verzögerung bei Änderungsbenachrichtigungen angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können das Problem durch einige Antivirusprogramme verursacht werden, wenn Informationen zu den gescannten Dateien durch Festlegen von Zurückschreiben Adressieren der <xref:System.Web.Configuration.HttpRuntimeSection.DelayNotificationTimeout%2A> Eigenschaft.  
  
> [!NOTE]
>  Das Problem tritt auf, da von den Vorgängen, die vom Benutzer vorgenommene Änderungen der Datenbankdatei, die durch einen Antivirusscan zurückzuführen unterschieden werden können. Das Endergebnis wird der Neustart der Anwendung, deren Dateien gescannt werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.DelayNotificationTimeout%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#11)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enable">
      <MemberSignature Language="C#" Value="public bool Enable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enable" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.Enable" />
      <MemberSignature Language="VB.NET" Value="Public Property Enable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enable", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Anwendungsdomäne aktiviert ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Anwendungsdomäne aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Einstellung wirkt sich auf die Anwendungsdomäne oder die Domänen auf der aktuellen Ebene und niedriger.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.Enable%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#14](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#14)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHeaderChecking">
      <MemberSignature Language="C#" Value="public bool EnableHeaderChecking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHeaderChecking" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.EnableHeaderChecking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableHeaderChecking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableHeaderChecking { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableHeaderChecking", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Headerüberprüfung aktiviert ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Headerüberprüfung aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Zweck dieser Eigenschaft ist so aktivieren Sie die Codierung des Carriage return, Wagenrücklauf und Zeilenumbruchzeichen, `\r` und `\n`, finden Sie im Antwortheader.  
  
 In der ausgehenden Antwortheader, die Zeichen, die durch den Codes 0x1F dargestellt und im folgenden werden codiert und auch das Zeichen 0x7F (Delete-Zeichen). Die einzige Ausnahme ist, dass die Zeichen 0 x 09 (Tabstoppzeichen) unverändert ist.  
  
 Mit dieser Codierung können-Injection-Angriffe zu vermeiden, die eine Anwendung nutzen, die wiederholt, nicht vertrauenswürdige Daten, die den Header enthalten sind.  
  
> [!NOTE]
>  Diese Eigenschaft gilt nicht für die Statuszeile selbst (Statuscode und statusbeschreibung), sollten gelten jedoch für andere-Header. Zwar kann auf jeder Ebene festgelegt werden, diese Eigenschaft ist nur gültig, auf der Ebene von Computer- und anwendungsspezifische.  
  
 Wenn diese Eigenschaft den Wert `true`, dies ist die Standardeinstellung der `\r` oder `\n` codiert Zeichen in einen Antwortheader `%0d` und `%0a`. Dies vereitelt Header-Injection-Angriffen, indem Sie den eingefügten Material Teil der gleichen Headerzeile machen. Die Antwort möglicherweise unterbrochen, aber Angriffsvektoren für den Client nicht geöffnet werden soll. Die Ausgabe nicht vertrauenswürdiger Daten in allen Situationen empfiehlt sich jedoch nie ist.  
  
> [!IMPORTANT]
>  HTTP-Header Fortsetzungen abhängig ist, Header, die sich über mehrere Zeilen erstrecken. und neue Zeilen in diese erfordern. Wenn Sie Header Fortsetzungen verwenden müssen, müssen Sie festlegen der <xref:System.Web.Configuration.HttpRuntimeSection.EnableHeaderChecking%2A> Eigenschaft `false`. Da Anzeigen von Headern, Auswirkungen auf die Leistung vorhanden ist, wenn Sie sicher sind, dass Sie bereits die richtigen Prüfungen ausführen, kann durch Deaktivieren dieser Funktion die Leistung Ihrer Anwendung verbessern. Bevor Sie dieses Feature deaktivieren, achten Sie darauf, dass Sie bereits die richtigen Vorsichtsmaßnahmen in diesem Bereich ausgeführt werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.EnableHeaderChecking%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#20](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#20)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#20](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableKernelOutputCache">
      <MemberSignature Language="C#" Value="public bool EnableKernelOutputCache { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableKernelOutputCache" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.EnableKernelOutputCache" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableKernelOutputCache As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableKernelOutputCache { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableKernelOutputCache", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Ausgabezwischenspeicherung aktiviert ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Ausgabezwischenspeicherung aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um eine Antwort zwischengespeichert wird, müssen die folgenden Kriterien erfüllt sein:  
  
-   Caching muss explizit von einer Seitendirektive oder der caching-API aktiviert werden.  
  
-   Zwischenspeichern benötigen die Ablaufrichtlinie, damit der Kernel weiß, wann es verworfen.  
  
-   Zwischenspeichern kann keine Variablen Header oder Parameter haben.  
  
-   Die Anforderung muss keine Authentifizierung erfordern.  
  
> [!NOTE]
>  Diese Eigenschaft ist relevant, nur, wenn Sie Internet Information Services (IIS) Version 6.0 oder höher installiert ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.EnableKernelOutputCache%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#3)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableVersionHeader">
      <MemberSignature Language="C#" Value="public bool EnableVersionHeader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableVersionHeader" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.EnableVersionHeader" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableVersionHeader As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableVersionHeader { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableVersionHeader", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ASP.NET einen Versionsheader ausgeben soll, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Ausgabe des Versionsheaders aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Attribut wird von Visual Studio verwendet, um zu bestimmen, welche Version von ASP.NET verwendet wird. Es ist nicht erforderlich für Produktionsstandorte und kann deaktiviert werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.EnableVersionHeader%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#17](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#17)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#17](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncoderType">
      <MemberSignature Language="C#" Value="public string EncoderType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncoderType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.EncoderType" />
      <MemberSignature Language="VB.NET" Value="Public Property EncoderType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EncoderType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("encoderType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen eines benutzerdefinierten Typs ab, mit dem HTML- und URL-Codierung bearbeitet werden kann, oder legt ihn fest.</summary>
        <value>Der Name eines Typs, mit dem die HTML- und URL-Codierung behandelt werden können.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET verwendet die <xref:System.Web.Util.HttpEncoder> Typ wie der Standardhandler für HTML- und URL-Codierungsaufgaben.  
  
 So codieren Verhalten anpassen, erstellen Sie eine Klasse, die von erben die <xref:System.Web.Util.HttpEncoder> Typ. In der Konfigurationsdatei für eine Anwendung, legen Sie Sie dann die <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> Attribut von der `httpRuntime` Element, um den voll qualifizierten Zeichenfolgennamen des benutzerdefinierten Typs. Weitere Informationen finden Sie unter [HttpRuntime-Element ((ASP.NET Settings Schema)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ExecutionTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ExecutionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ExecutionTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ExecutionTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanSecondsConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("executionTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zulässige Ausführungszeit für die Anforderung ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.TimeSpan" />-Wert, der die zulässige Ausführungszeit für die Anforderung angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A> Eigenschaft gibt die maximale Anzahl von Sekunden, die eine Anforderung kann ausgeführt werden, bevor Sie automatisch von ASP.NET heruntergefahren wird. Der Standardwert ist 110 Sekunden. Dieses Timeout gilt nur, wenn das Debug-Attribut im Element, um festgelegt ist `false`.  
  
 Wenn das Timeout abläuft, wird eine Ausnahme ausgelöst. Sie können die entsprechenden Informationen im Anwendungsordner des Ereignisprotokolls aufzeichnen. Dazu aktivieren die Überwachung in das Konfigurationselement Anwendungsintegrität.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#10)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Die Anforderungsausführungszeit hat das vom Ausführungstimeout festgelegte Zeitlimit überschritten.</exception>
      </Docs>
    </Member>
    <Member MemberName="FcnMode">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.FcnMode FcnMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.FcnMode FcnMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.FcnMode" />
      <MemberSignature Language="VB.NET" Value="Public Property FcnMode As FcnMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::FcnMode FcnMode { System::Web::Configuration::FcnMode get(); void set(System::Web::Configuration::FcnMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("fcnMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.FcnMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Enumerationswert ab oder legt einen Enumerationswert fest, der den Benachrichtigungsmodus für eine Dateiänderung angibt.</summary>
        <value>Ein <see cref="T:System.Web.Configuration.FcnMode" />-Enumerationswert.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxQueryStringLength">
      <MemberSignature Language="C#" Value="public int MaxQueryStringLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxQueryStringLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MaxQueryStringLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxQueryStringLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxQueryStringLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxQueryStringLength", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximal mögliche Länge einer Abfragezeichenfolge in einer HTTP-Anforderung als Anzahl der Zeichen ab oder legt diese fest.</summary>
        <value>Die maximale Länge der Abfragezeichenfolge als Anzahl der Zeichen. Der Standard ist 2048.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des der <xref:System.Web.Configuration.HttpRuntimeSection.MaxQueryStringLength%2A> Eigenschaft kann es sich um eine beliebige Ganzzahl 0 (null) oder größer. Wenn die Länge einer Abfragezeichenfolge die größenbeschränkung überschreitet, gibt ASP.NET ein `HTTP 400` Statuscode "(Ungültige Anforderung)".  
  
> [!NOTE]
>  Sehr kleine Werte können eine Website möglicherweise nicht verwendbar.  
  
 Sie können diesen Wert in einer Konfigurationsdatei festlegen, durch Festlegen der `maxQueryStringLength` Attribut von der `httpRuntime` Element. Weitere Informationen finden Sie unter [HttpRuntime-Element ((ASP.NET Settings Schema)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369).  
  
> [!NOTE]
>  Es gibt auch eine IIS-Einstellung, die die Länge der Zeichenfolge Abfrage steuert. Finden Sie unter der `maxQueryString` -Attribut im [Anforderungslimits \<RequestLimits >](http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/requestLimits).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxRequestLength">
      <MemberSignature Language="C#" Value="public int MaxRequestLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxRequestLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxRequestLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxRequestLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxRequestLength", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximale Anforderungsgröße ab oder legt diese fest.</summary>
        <value>Die maximale Anforderungsgröße in Kilobyte. Die Standardgröße beträgt 4096 KB (4 MB).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> Eigenschaft gibt an, das Limit für den Schwellenwert der Eingabestreampufferung des Eingabedatenstroms. Dieser Grenzwert kann beispielsweise verwendet werden, um DOS-Angriffe zu verhindern, die von Benutzern verursacht werden, die große Dateien auf dem Server bereitstellen.  
  
 Der Wert dieser Eigenschaft zugewiesene muss größer oder gleich der zugewiesene Wert der <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgende Beispiel veranschaulicht das Abrufen des aktuellen <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> Eigenschaftswert.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#19](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#19)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#19](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Der ausgewählte Wert ist kleiner als <see cref="P:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxUrlLength">
      <MemberSignature Language="C#" Value="public int MaxUrlLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxUrlLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MaxUrlLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxUrlLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxUrlLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxUrlLength", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximal mögliche Länge einer URL in einer HTTP-Anforderung als Anzahl der Zeichen ab oder legt diese fest.</summary>
        <value>Die Länge der URL als Anzahl der Zeichen. Der Standard ist 260.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des der <xref:System.Web.Configuration.HttpRuntimeSection.MaxUrlLength%2A> Eigenschaft kann es sich um eine beliebige Ganzzahl 0 (null) oder größer.  
  
> [!NOTE]
>  Sehr kleine Werte können eine Website möglicherweise nicht verwendbar.  
  
 Wenn die Länge des Anforderungs-URL (Dies ist der Wert, der die <xref:System.Web.HttpRequest.Path%2A> Eigenschaft) überschreitet das konfigurierte Größenlimit, ASP.NET wird einen Statuscode "HTTP 400 (Ungültige Anforderung)"  
  
 Sie können diesen Wert in einer Konfigurationsdatei festlegen, durch Festlegen der <xref:System.Web.Configuration.HttpRuntimeSection.MaxUrlLength%2A> Attribut von der `httpRuntime` Element. Weitere Informationen finden Sie unter [HttpRuntime-Element ((ASP.NET Settings Schema)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWaitChangeNotification">
      <MemberSignature Language="C#" Value="public int MaxWaitChangeNotification { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxWaitChangeNotification" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MaxWaitChangeNotification" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWaitChangeNotification As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxWaitChangeNotification { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxWaitChangeNotification", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeitspanne zwischen der ersten Änderungsbenachrichtigung und dem Zeitpunkt des Neustarts der Anwendungsdomäne ab oder legt diese fest.</summary>
        <value>Die maximale Zeitspanne in Sekunden zwischen der ersten Änderungsbenachrichtigung und dem Zeitpunkt des Neustarts der Anwendungsdomäne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einen vorgeschlagenen Wert für die <xref:System.Web.Configuration.HttpRuntimeSection.MaxWaitChangeNotification%2A> Eigenschaft übersteigt die Länge der Zeit, um eine Kopie während des Bereitstellungsvorgangs abzuschließen.  
  
> [!NOTE]
>  Der Inhalt möglicherweise zwischengespeicherte angezeigt, bei der Anzeige unmittelbar nach einem Prozess kopieren und bereitstellen. Dies ist das normale Verhalten. Nach Ablauf der Wartezeit, die Sie angegeben haben, werden die Änderungen wirksam.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.MaxWaitChangeNotification%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#4)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinFreeThreads">
      <MemberSignature Language="C#" Value="public int MinFreeThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinFreeThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads" />
      <MemberSignature Language="VB.NET" Value="Public Property MinFreeThreads As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinFreeThreads { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("minFreeThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Mindestanzahl von Threads ab, die verfügbar sein müssen, bevor eine Ressourcenanforderung in diesem Konfigurationsbereich bedient werden kann, oder legt diese fest.</summary>
        <value>Die Mindestanzahl verfügbarer Threads im CLR (Common Language Runtime)-Threadpool, bevor eine Anforderung in diesem Konfigurationsbereich bedient wird. Der Standardwert ist <c>8</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> Eigenschaft definiert die Mindestanzahl freier Threads, die eine Anforderung auszuführen. Wenn Sie eine ausreichende Anzahl von Threads nicht verfügbar sind, wird die Anforderung in der Warteschlange bleiben und periodisch ausgeführten Überprüfung auf die Verfügbarkeit des Threads werden fortgesetzt, bis die erforderliche Menge an Threads vorhanden sind. Der Standardwert ist `8`.  
  
> [!NOTE]
>  ASP.NET hält diese Anzahl von Threads frei für Anforderungen, die zusätzliche Threads zum Abschließen der Verarbeitung erfordern.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#8)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinLocalRequestFreeThreads">
      <MemberSignature Language="C#" Value="public int MinLocalRequestFreeThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinLocalRequestFreeThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MinLocalRequestFreeThreads" />
      <MemberSignature Language="VB.NET" Value="Public Property MinLocalRequestFreeThreads As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinLocalRequestFreeThreads { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("minLocalRequestFreeThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Mindestanzahl freier Threads ab, die erforderlich sind, um eine lokale Anforderung zu bedienen.</summary>
        <value>Die Mindestanzahl freier, lokalen Anforderungen zugewiesener Threads. Der Standardwert ist 4.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.HttpRuntimeSection.MinLocalRequestFreeThreads%2A> Eigenschaft definiert die Anzahl freier Threads, die ASP.NET verfügbar sind, um die Ausführung neuer lokaler Anforderungen hält. Der Zweck besteht darin, einen möglichen Deadlock mit rekursivem Wiedereintritt in den Webserver zu vermeiden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.MinLocalRequestFreeThreads%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#5)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelaxedUrlToFileSystemMapping">
      <MemberSignature Language="C#" Value="public bool RelaxedUrlToFileSystemMapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RelaxedUrlToFileSystemMapping" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RelaxedUrlToFileSystemMapping" />
      <MemberSignature Language="VB.NET" Value="Public Property RelaxedUrlToFileSystemMapping As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RelaxedUrlToFileSystemMapping { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("relaxedUrlToFileSystemMapping", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die URL in einer HTTP-Anforderung erforderlich ist, damit ein gültiger Windows-Dateipfad vorliegt, oder legt ihn fest.</summary>
        <value>
          <see langword="true" />, wenn die URL nicht Windows-Pfadregeln entsprechen muss, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.HttpRuntimeSection.RelaxedUrlToFileSystemMapping%2A> Eigenschaft bestimmt, wie die URL in einer eingehenden HTTP-Anforderung überprüft wird. Wenn diese Eigenschaft ist `false`, überprüft die URL mithilfe der gleichen Regeln, die bestimmen, ob ein Windows-System-Dateipfad gültig ist.  
  
 Sie können diesen Wert in einer Konfigurationsdatei festlegen, durch Festlegen der <xref:System.Web.Configuration.HttpRuntimeSection.RelaxedUrlToFileSystemMapping%2A> Attribut von der `httpRuntime` Element. Weitere Informationen finden Sie unter [HttpRuntime-Element ((ASP.NET Settings Schema)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestLengthDiskThreshold">
      <MemberSignature Language="C#" Value="public int RequestLengthDiskThreshold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RequestLengthDiskThreshold" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestLengthDiskThreshold As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RequestLengthDiskThreshold { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestLengthDiskThreshold", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Schwellenwert für die Eingabestreampufferung ab oder legt diesen fest.</summary>
        <value>Die Anzahl von Bytes, die für den Schwellenwert der Eingabestreampufferung angegeben sind. Der Standardwert ist 80 Kilobytes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> Eigenschaft gibt den Grenzwert der Eingabe-Stream Pufferung in Anzahl von Bytes an. Der Wert sollte nicht überschreiten. die <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> Eigenschaftswert. Nachdem eine Anforderungsentität diesen Schwellenwert überschreitet, ist er transparent auf dem Datenträger gepuffert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#12](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#12)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Der ausgewählte Wert ist größer als <see cref="P:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RequestPathInvalidCharacters">
      <MemberSignature Language="C#" Value="public string RequestPathInvalidCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RequestPathInvalidCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RequestPathInvalidCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestPathInvalidCharacters As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RequestPathInvalidCharacters { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestPathInvalidCharacters", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Liste von Zeichen ab, die in einem Pfad, der Teil einer HTTP-Anforderung ist, als ungültig angegeben werden, oder legt diese fest.</summary>
        <value>Eine durch Trennzeichen getrennte Liste ungültiger Zeichen. Die folgende Liste enthält den Standardsatz ungültiger Zeichen:  
  
 <c>&lt;,&gt;,*,%,&amp;,:,\\</c></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um diesen Wert in einer Konfigurationsdatei festzulegen, können Sie eine durch Trennzeichen getrennte Zeichenfolge von Zeichen zuweisen der `requestPathInvalidCharacters` Attribut von der `httpRuntime` Element. Weitere Informationen finden Sie unter [HttpRuntime-Element ((ASP.NET Settings Schema)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestValidationMode">
      <MemberSignature Language="C#" Value="public Version RequestValidationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version RequestValidationMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RequestValidationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestValidationMode As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ RequestValidationMode { Version ^ get(); void set(Version ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.Configuration.VersionConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestValidationMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Versionsnummer ab, die angibt, welche ASP.NET-versionsspezifische Validierungsmethode verwendet wird, oder legt diese fest.</summary>
        <value>Ein Wert, der angibt, welche ASP.NET-versionsspezifische Validierungsmethode verwendet wird. Die Standardeinstellung ist <c>4.5</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationMode%2A> Eigenschaft gibt an, welcher Ansatz ASP.NET zur Validierung verwendet wird. Dies kann der Algorithmus, der verwendet wird, in früheren Versionen von ASP.NET als Version 4 oder die Version, die verwendet wird [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]. Die Eigenschaft kann auf die folgenden Werte festgelegt werden:  
  
-   `4.5 (the default).` In diesem Modus Werte verzögert geladen werden, d. h. sie werden nicht gelesen, bis sie angefordert werden.  
  
-   `4.0` Die <xref:System.Web.HttpRequest> Objekt intern setzt ein Flag, der angibt, dass die anforderungsüberprüfung ausgelöst werden soll, wenn alle HTTP-Anforderungsdaten zugegriffen werden. Damit wird sichergestellt, dass die anforderungsüberprüfung, bevor Sie Daten, z. B. Cookies ausgelöst wird und URLs während der Anforderung zugegriffen werden. Die Anforderung überprüfungseinstellungen des Elements (sofern vorhanden) in der Konfigurationsdatei oder der Richtlinie in eine einzelne Seite werden ignoriert.  
  
-   `2.0` Anforderungsüberprüfung ist nur für Seiten, die nicht für alle HTTP-Anforderungen aktiviert. Darüber hinaus werden die überprüfungseinstellungen Anforderung des Elements (sofern vorhanden) in der Konfigurationsdatei oder der Richtlinie in eine einzelne Seite verwendet, um zu bestimmen, welche Seite angefordert wird, um zu überprüfen.  
  
 Der Wert, den dieser Eigenschaft zugewiesen wird entsprechend eine bestimmte Version von ASP.NET nicht überprüft. Jeden beliebigen numerischen Wert kleiner als `4.0` (z. B. `3.7`, `2.9`, oder `2.0`) wird als interpretiert `2.0`. Jede Zahl, die größer als `4.5` als interpretiert `4.5`.  
  
 Um diesen Wert in einer Konfigurationsdatei festzulegen, können Sie einen Wert zuweisen der `requestValidationMode` Attribut von der `httpRuntime` Element. Weitere Informationen finden Sie unter [HttpRuntime-Element ((ASP.NET Settings Schema)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestValidationType">
      <MemberSignature Language="C#" Value="public string RequestValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RequestValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RequestValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestValidationType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RequestValidationType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestValidationType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen eines Typs ab, der zur Validierung von HTTP-Anforderungen dient, oder legt ihn fest.</summary>
        <value>Der Name eines Typs, mit dem Validierungsaufgaben bearbeitet werden. Die Standardeinstellung ist der vollqualifizierte Name des <see cref="T:System.Web.Util.RequestValidator" />-Typs, der von ASP.NET zur Validierung verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um ASP.NET Anforderung Paketvalidierungsverhalten anpassen, erstellen Sie eine Klasse, die von erben die <xref:System.Web.Util.RequestValidator> Typ. In der Konfigurationsdatei für eine Anwendung, legen Sie Sie dann die `requestValidationType` Attribut von der `httpRuntime` Element, um den voll qualifizierten Zeichenfolgennamen des benutzerdefinierten Typs. Weitere Informationen finden Sie unter [HttpRuntime-Element ((ASP.NET Settings Schema)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequireRootedSaveAsPath">
      <MemberSignature Language="C#" Value="public bool RequireRootedSaveAsPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequireRootedSaveAsPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath" />
      <MemberSignature Language="VB.NET" Value="Public Property RequireRootedSaveAsPath As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RequireRootedSaveAsPath { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requireRootedSaveAsPath", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Dateiname ein vollqualifizierter physikalischer Dateipfad sein muss, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn der Dateiname ein vollqualifizierter physikalischer Dateipfad sein muss, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath%2A> Eigenschaft gibt an, ob der name der Datei Argument `SaveAs` Methoden müssen ein Stammpfad sein. Der ASP.NET-Prozess muss über die Berechtigung zum Erstellen von Dateien am angegebenen Speicherort.  
  
 Weitere Informationen finden Sie unter den Speichervorgang Methoden, in definiert der <xref:System.Configuration.Configuration> Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#7)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendCacheControlHeader">
      <MemberSignature Language="C#" Value="public bool SendCacheControlHeader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SendCacheControlHeader" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.SendCacheControlHeader" />
      <MemberSignature Language="VB.NET" Value="Public Property SendCacheControlHeader As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SendCacheControlHeader { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("sendCacheControlHeader", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der <c>cache-control:private</c>-Header als Teil der HTTP-Antwort gesendet wird, oder legt ihn fest.</summary>
        <value>
          <see langword="true" /> Wenn die <c>Cache-Control: Private</c> Header ist, werden gesendete; andernfalls, <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.HttpResponse> Klasse überprüft sowohl die <xref:System.Web.Configuration.HttpRuntimeSection.SendCacheControlHeader%2A?displayProperty=nameWithType> Eigenschaft und die <xref:System.Web.Configuration.OutputCacheSection.SendCacheControlHeader%2A?displayProperty=nameWithType> Eigenschaft bestimmt, ob zum Senden der `cache-control:private` -Header in der HTTP-Antwort. Wenn entweder-Eigenschaftensatz auf `false`, wird der Header nicht gesendet werden. Wenn der Cache-Control-Header auf festgelegt ist `private`, und klicken Sie dann der Client die Antwort in einem geteilten Datencache nicht zwischengespeichert werden.  
  
 Unterstützung für die <xref:System.Web.Configuration.HttpRuntimeSection.SendCacheControlHeader%2A> Eigenschaft in der <xref:System.Web.Configuration.HttpRuntimeSection> Klasse wird bereitgestellt, um die Kompatibilität mit älteren Anwendungen ist diese Eigenschaft ist veraltet in .NET Framework, Version 2.0. Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Web.Configuration.OutputCacheSection>-Klasse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReadOnly">
      <MemberSignature Language="C#" Value="protected override void SetReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.HttpRuntimeSection.SetReadOnly" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetReadOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ShutdownTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ShutdownTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.ShutdownTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ShutdownTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ShutdownTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanSecondsConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("shutdownTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zulässige Leerlaufzeitspanne einer Anwendung vor deren Beendigung ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.TimeSpan" />-Wert, der die für den Leerlauf der Anwendung zulässige Zeitspanne angibt, bevor sie beendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.HttpRuntimeSection.ShutdownTimeout%2A> Eigenschaft gibt die Menge an Zeit, bevor eine Anwendung ordnungsgemäß heruntergefahren wird. Der Standardwert ist 90 Sekunden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.ShutdownTimeout%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#6)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetFramework">
      <MemberSignature Language="C#" Value="public string TargetFramework { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetFramework" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.TargetFramework" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetFramework As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TargetFramework { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("targetFramework", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Übernimmt oder bestimmt das Ziel-.NET Framework.</summary>
        <value>Das Ziel-.NET Framework</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseFullyQualifiedRedirectUrl">
      <MemberSignature Language="C#" Value="public bool UseFullyQualifiedRedirectUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseFullyQualifiedRedirectUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.UseFullyQualifiedRedirectUrl" />
      <MemberSignature Language="VB.NET" Value="Public Property UseFullyQualifiedRedirectUrl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseFullyQualifiedRedirectUrl { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("useFullyQualifiedRedirectUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die clientseitigen Umleitungen vollqualifiziert sind, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn clientseitige Umleitungen vollqualifiziert sind, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.HttpRuntimeSection.UseFullyQualifiedRedirectUrl%2A> Eigenschaft gibt an, ob die clientseitige umleitungen vollqualifiziert sind (im Format http://server/path) oder relative leitet stattdessen an den Client gesendet werden.  
  
> [!NOTE]
>  Von einigen Browsern möglicherweise Probleme beim Laden von Seiten in Sitzungen ohne Cookies, wenn dieser Wert ist `false`.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.UseFullyQualifiedRedirectUrl%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#15](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#15)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#15](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitChangeNotification">
      <MemberSignature Language="C#" Value="public int WaitChangeNotification { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitChangeNotification" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.WaitChangeNotification" />
      <MemberSignature Language="VB.NET" Value="Public Property WaitChangeNotification As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitChangeNotification { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("waitChangeNotification", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Wartezeit vor der nächsten Änderungsbenachrichtigung ab oder legt diese fest.</summary>
        <value>Die Wartezeit vor der nächsten Änderungsbenachrichtigung in Sekunden, die einen Neustart der Anwendungsdomäne auslöst. Der Standardwert ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einen vorgeschlagenen Wert für <xref:System.Web.Configuration.HttpRuntimeSection.WaitChangeNotification%2A> übersteigt die Länge der Zeit, um eine Kopie während des Bereitstellungsvorgangs abzuschließen.  
  
> [!NOTE]
>  Der Inhalt möglicherweise zwischengespeicherte angezeigt, wenn Sie es sofort nach der eine Kopie anzeigen und Bereitstellen von Prozess. Dies ist das normale Verhalten. Nach Ablauf der Wartezeit, die Sie angegeben haben, werden die Änderungen wirksam.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.HttpRuntimeSection.WaitChangeNotification%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection#18](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#18)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection#18](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
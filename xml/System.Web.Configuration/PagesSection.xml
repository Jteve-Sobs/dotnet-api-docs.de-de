<Type Name="PagesSection" FullName="System.Web.Configuration.PagesSection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ebc2ab937a3ffca398f5a7fbc8da42ae08c88b9a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36602603" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PagesSection : System.Configuration.ConfigurationSection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PagesSection extends System.Configuration.ConfigurationSection" />
  <TypeSignature Language="DocId" Value="T:System.Web.Configuration.PagesSection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PagesSection&#xA;Inherits ConfigurationSection" />
  <TypeSignature Language="C++ CLI" Value="public ref class PagesSection sealed : System::Configuration::ConfigurationSection" />
  <TypeSignature Language="F#" Value="type PagesSection = class&#xA;    inherit ConfigurationSection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationSection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides programmatic access to the  section of the configuration file. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.PagesSection> -Klasse bietet eine Möglichkeit zum programmgesteuerten Zugriff auf und ändern Sie den Inhalt des Konfigurationsabschnitts der Datei. Dieser Konfigurationsabschnitt unterstützt bestimmte ASP.NET Seiten- und Direktiven global für alle Seiten und Steuerelemente im Bereich der Konfigurationsdatei festlegen. Dies schließt die `@ Page` Richtlinie, die `@ Import` über die Richtlinie die <xref:System.Web.Configuration.PagesSection.Namespaces%2A> Auflistungseigenschaft, und die `@ Register` über die Richtlinie die <xref:System.Web.Configuration.PagesSection.Controls%2A> Auflistungseigenschaft. Bietet auch Unterstützung für die Zuordnung von Transpondertypen zu anderen Transpondertypen zur Laufzeit über die <xref:System.Web.Configuration.PagesSection.TagMapping%2A> Auflistungseigenschaft.  
  
 Direktiven geben die Einstellungen, die von der Seite und Benutzersteuerelement Compilern verwendet wird, beim Verarbeiten von ASP.NET Web Forms-Seite (ASPX) und Benutzersteuerelement (.ascx)-Dateien an.  
  
   
  
## Examples  
 In diesem Beispiel wird veranschaulicht, wie Werte für verschiedene Attribute der deklarativ angeben, die `pages` Abschnitt, die auch als Member zugegriffen werden kann die <xref:System.Web.Configuration.PagesSection> Klasse.  
  
 Im folgenden Konfigurationsbeispiel-Datei zeigt, wie Werte für den Abschnitt deklarativ angeben.  
  
```  
<system.web>  
  <pages buffer="true"   
    enableSessionState="true"   
    enableViewState="true"  
    enableViewStateMac="true"   
    autoEventWireup="true"   
    validateRequest="true"  
    asyncTimeout="45"  
    maintainScrollPositionOnPostBack = "False"  
    viewStateEncryptionMode = "Auto">  
    <namespaces>  
      <add namespace="System" />  
      <add namespace="System.Collections" />  
      <add namespace="System.Collections.Specialized" />  
      <add namespace="System.ComponentModel" />  
      <add namespace="System.Configuration" />  
      <add namespace="System.Web" />  
    </namespaces>  
    <controls>  
      <clear />  
      <remove tagPrefix="MyTags" />  
      <!—- Searches all linked assemblies for the namespace -->  
      <add tagPrefix="MyTags1" namespace=" MyNameSpace "/>  
      <!-- Uses a specified assembly -->  
      <add tagPrefix="MyTags2" namespace="MyNameSpace"   
        assembly="MyAssembly"/>  
      <!-- Uses the specified source for the user control -->  
      <add tagprefix="MyTags3" tagname="MyCtrl"       
        src="MyControl.ascx"/>  
    </controls>  
    <tagMapping>  
      <clear />  
      <add  
        tagTypeName=  
          "System.Web.UI.WebControls.WebParts.WebPartManager"  
        mappedTagTypeName=  
          "Microsoft.Sharepoint.WebPartPartManager,   
          MSPS.Web.dll, Version='2.0.0.0'"   
      />  
      <remove tagTypeName="SomeOtherNS.Class, Assemblyname" />  
    </tagMapping>  
  </pages>  
</system.web>  
```  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.Configuration.PagesSection> Klasse.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#1)]
 [!code-vb[System.Web.Configuration.PagesSection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ConfigurationSection" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PagesSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.PagesSection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PagesSection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.PagesSection" /> class using default settings.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.PagesSection.%23ctor%2A> Konstruktor ist nicht vorgesehen, direkt aus Ihrem Code verwendet werden. Sie wird vom Konfigurationssystem von ASP.NET aufgerufen. Sie rufen Sie eine Instanz von der <xref:System.Web.Configuration.PagesSection> Klasse, indem die <xref:System.Configuration.Configuration.GetSection%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan AsyncTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AsyncTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.AsyncTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AsyncTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncTimeout : TimeSpan with get, set" Usage="System.Web.Configuration.PagesSection.AsyncTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanSecondsConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("asyncTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating the number of seconds to wait for an asynchronous handler to complete during asynchronous page processing.</summary>
        <value>Ein <see cref="T:System.TimeSpan" /> Wert, der angibt, der der Zeitdauer in Sekunden, während der Verarbeitung von asynchronen Seite abgeschlossen ein asynchroner Handler gewartet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert beträgt 45 Sekunden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="AutoEventWireup">
      <MemberSignature Language="C#" Value="public bool AutoEventWireup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoEventWireup" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.AutoEventWireup" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoEventWireup As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoEventWireup { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoEventWireup : bool with get, set" Usage="System.Web.Configuration.PagesSection.AutoEventWireup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("autoEventWireup", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether events for ASP.NET pages are automatically connected to event-handling functions.</summary>
        <value>
          <see langword="true" /> Wenn Ereignisse für die ASP.NET-Seiten Ereignisbehandlung Funktionen automatisch verbunden werden; andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> ist `true`, ASP.NET ist nicht erforderlich, dass Sie Ereignishandler explizit auf ein Seitenereignis z. B. binden <xref:System.Web.UI.Control.Load>.  
  
 Wenn <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> ist `false`, müssen Sie das Ereignis explizit an eine Methode binden. Angenommen, Sie haben eine `Page_Load` Methode im Code für eine Seite, die Methode wird aufgerufen werden als Antwort auf die <xref:System.Web.UI.Control.Load> Ereignis nur, wenn Sie Code wie im folgenden Beispiel schreiben (Beachten Sie die `Handles` -Anweisung in Visual Basic und den Ereignishandler Code in c#):  
  
```vb  
Partial Class AutoEventWireupExample  
    Inherits System.Web.UI.Page  
    Protected Sub Page_Load(ByVal sender As Object, _  
            ByVal e As System.EventArgs) Handles Me.Load  
        Response.Write("Executing Page_Load")  
    End Sub  
End Class  
```  
  
```csharp  
public partial class AutoEventWireupExample : System.Web.UI.Page  
{   
    protected void Page_Load(object sender, System.EventArgs e)  
    {  
        Response.Write("Executing Page_Load");  
    }  
    override protected void OnInit(EventArgs e)  
    {  
        this.Load += new System.EventHandler(this.Page_Load);  
    }  
}  
```  
  
 Wenn <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> ist `true`, Handler zur Laufzeit basierend auf ihren Namen und derselben Signatur automatisch an Ereignisse gebunden sind. Für jedes Ereignis sucht ASP.NET für eine Methode mit dem Namen nach dem Muster `Page_` *Eventname*, wie z. B. `Page_Load` oder `Page_Init`. ASP.NET überprüft zuerst eine Überladung, die die typische Ereignishandler-Signatur verfügt (d. h. er gibt <xref:System.Object> und <xref:System.EventArgs> Parameter). Wenn ein Ereignishandler mit dieser Signatur nicht gefunden wird, überprüft ASP.NET eine Überladung, die keine Parameter hat.  
  
 Wenn <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> ist `false`, müssen Sie explizit binden Ereignishandler für Ereignisse, wie im vorherigen Beispiel gezeigt. In diesem Fall müssen die Methodennamen keines Musters durchzusetzen.  
  
 Der Standardwert ist `true` Wenn <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> ist nicht angegeben, der `@ Page` Richtlinie. Visual Studio enthält das Attribut automatisch, wenn sie Code-Behind-Dateien erstellt. Für die ASP.NET-Seiten geschrieben in c#, Visual Studio legt den Wert auf `true`. Für Visual Basic, Visual Studio legt den Wert auf `false` da Handler an Ereignisse gebunden werden, mithilfe des Schlüsselworts, das beim Generieren eines ereignishandlers automatisch von Visual Studio eingefügt wird. Wenn Sie festlegen, <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> zu `true`, Sie können weglassen (oder entfernen)-Schlüsselwort.  
  
 Stellen Sie keine <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> auf `true` Wenn die Leistung eine wichtige Überlegung ist. Wenn automatische Ereignis verbinden aktiviert ist, muss ASP.NET zwischen 15 und 30 versucht, das Ereignisse mit Methoden übereinstimmen stellen.  
  
 Beachten Sie die folgenden Informationen zum Binden Ereignishandler für Ereignisse aus:  
  
-   Wenn Sie festlegen, <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> zu `true`, stellen Sie sicher, dass Sie nicht auch manuell den Ereignishandler der Seite auf Ereignisse anfügen. Wenn Sie dies tun, können Handler mehr als einmal aufgerufen werden.  
  
-   Automatische Bindung erfolgt nur für Page-Ereignisse nicht für Ereignisse für Steuerelemente auf der Seite.  
  
-   Sie können als Alternative Bindung von Ereignissen an Handler überschreiben die `On` *Eventname* Methoden der Seite oder Steuerelemente.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie setzen oder Lesen der <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> -Eigenschaft im Code.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#9)]
 [!code-vb[System.Web.Configuration.PagesSection#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#9)]  
  
 Das folgende Beispiel zeigt zwei Formen der Methodensignaturen, die automatisch an die Seitenereignisse angefügt werden beim <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> ist `true`.  
  
 [!code-aspx-csharp[System.Web.Configuration.PagesSection#50](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/Default.aspx#50)]
 [!code-csharp[System.Web.Configuration.PagesSection#50](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/Default2.aspx.cs#50)]
 [!code-aspx-vb[System.Web.Configuration.PagesSection#50](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/Default.aspx#50)]
 [!code-vb[System.Web.Configuration.PagesSection#50](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/Default2.aspx.vb#50)]
  
 Das folgende Beispiel zeigt, wie Ereignisse explizit von Netzwerkdaten bei <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> ist `false`.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#51](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/Default.aspx.cs#51)]
 [!code-vb[System.Web.Configuration.PagesSection#51](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/Default.aspx.vb#51)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public bool Buffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public Property Buffer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Buffer { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : bool with get, set" Usage="System.Web.Configuration.PagesSection.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("buffer", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies whether .aspx pages and .ascx controls use response buffering.</summary>
        <value>
          <see langword="true" /> Wenn die ASPX-Seiten und ASCX-Steuerelemente Antwortpufferung verwenden; andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Antwortpufferung aktiviert ist, die Seite oder eines Steuerelements Ausgabe gepuffert, bis die gesamte Seite oder Steuerelement verarbeitet wurde. Stellen Sie keine <xref:System.Web.Configuration.PagesSection.Buffer%2A> auf `true` Wenn die Leistung eine wichtige Überlegung ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.Buffer%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#16](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#16)]
 [!code-vb[System.Web.Configuration.PagesSection#16](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientIDMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ClientIDMode ClientIDMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ClientIDMode ClientIDMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.ClientIDMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientIDMode As ClientIDMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ClientIDMode ClientIDMode { System::Web::UI::ClientIDMode get(); void set(System::Web::UI::ClientIDMode value); };" />
      <MemberSignature Language="F#" Value="member this.ClientIDMode : System.Web.UI.ClientIDMode with get, set" Usage="System.Web.Configuration.PagesSection.ClientIDMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("clientIDMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ClientIDMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default algorithm that is used to generate a control's identifier.</summary>
        <value>Ein Wert, der angibt wie der Wert in der <see cref="P:System.Web.UI.Control.ClientID" /> Eigenschaft generiert wird. Der Standardwert ist <see cref="F:System.Web.UI.ClientIDMode.Predictable" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.Configuration.PagesSection.ClientIDMode%2A> Eigenschaft, um den Standardwert für eine gesamte Website festzulegen. Sie können diesen Wert für eine einzelne Webseite oder für einzelne Steuerelemente überschreiben.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ClientIDMode" />
      </Docs>
    </Member>
    <Member MemberName="CompilationMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.CompilationMode CompilationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.CompilationMode CompilationMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.CompilationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationMode As CompilationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::CompilationMode CompilationMode { System::Web::UI::CompilationMode get(); void set(System::Web::UI::CompilationMode value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationMode : System.Web.UI.CompilationMode with get, set" Usage="System.Web.Configuration.PagesSection.CompilationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("compilationMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.CompilationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines how .aspx pages and .ascx controls are compiled.</summary>
        <value>Einer der Werte für die <see cref="P:System.Web.Configuration.PagesSection.CompilationMode" /> Eigenschaft, die angibt, wie ASPX-Seiten und ASCX-Steuerelemente kompiliert werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert ist <xref:System.Web.UI.CompilationMode.Always>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.CompilationMode%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#6)]
 [!code-vb[System.Web.Configuration.PagesSection#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.CompilationMode" />
      </Docs>
    </Member>
    <Member MemberName="ControlRenderingCompatibilityVersion">
      <MemberSignature Language="C#" Value="public Version ControlRenderingCompatibilityVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version ControlRenderingCompatibilityVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.ControlRenderingCompatibilityVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlRenderingCompatibilityVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ ControlRenderingCompatibilityVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlRenderingCompatibilityVersion : Version with get, set" Usage="System.Web.Configuration.PagesSection.ControlRenderingCompatibilityVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.Configuration.VersionConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("controlRenderingCompatibilityVersion", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationValidator(typeof(System.Web.Configuration.VersionValidator))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies the ASP.NET version that any rendered HTML will be compatible with.</summary>
        <value>Die Version von ASP.NET, dass alle HTML gerendert wird mit kompatibel sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Wert wird festgelegt, indem die `controlRenderingCompatibilityVersion` Attribut von der `pages` Element in der Datei "Web.config". Der Wert dieser Eigenschaft ist der Standardwert für die <xref:System.Web.UI.Control.RenderingCompatibility%2A?displayProperty=nameWithType> Eigenschaft. Informationen, wie diese verwendet werden, finden Sie unter der <xref:System.Web.UI.Control.RenderingCompatibility%2A?displayProperty=nameWithType> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">An attempt was made to set this property to <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Control.RenderingCompatibility" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.TagPrefixCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.TagPrefixCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.Controls" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Controls As TagPrefixCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::TagPrefixCollection ^ Controls { System::Web::Configuration::TagPrefixCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controls : System.Web.Configuration.TagPrefixCollection" Usage="System.Web.Configuration.PagesSection.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("controls")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.TagPrefixCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.Configuration.TagPrefixInfo" /> objects.</summary>
        <value>Eine <see cref="T:System.Web.Configuration.TagPrefixCollection" /> von <see cref="T:System.Web.Configuration.TagPrefixInfo" />-Objekten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.TagPrefixInfo> Objekte entsprechen den `@ Register` Richtlinie auf einer ASP.NET-Seite. Die `@ Register` Richtlinie können Sie das Tagpräfix für ein benutzerdefiniertes Steuerelement angeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.Controls%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#12](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#12)]
 [!code-vb[System.Web.Configuration.PagesSection#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.TagPrefixCollection" />
        <altmember cref="T:System.Web.Configuration.TagPrefixInfo" />
      </Docs>
    </Member>
    <Member MemberName="DeserializeSection">
      <MemberSignature Language="C#" Value="protected override void DeserializeSection (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void DeserializeSection(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.PagesSection.DeserializeSection(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub DeserializeSection (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void DeserializeSection(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="override this.DeserializeSection : System.Xml.XmlReader -&gt; unit" Usage="pagesSection.DeserializeSection reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableEventValidation">
      <MemberSignature Language="C#" Value="public bool EnableEventValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableEventValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.EnableEventValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableEventValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableEventValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableEventValidation : bool with get, set" Usage="System.Web.Configuration.PagesSection.EnableEventValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableEventValidation", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies whether event validation is enabled.</summary>
        <value>
          <see langword="true" /> Wenn die Ereignis-Überprüfung aktiviert ist; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.PagesSection.EnableEventValidation%2A> Attribut gibt an, ob die Validierung ausgeführt werden soll. Der Standardwert ist `true`. Eine Webanwendung kann Ereignis Überprüfung aus, um das Verhalten von .NET Framework, Version 1.0 wiederherstellen optional deaktiviert werden.  
  
 Im Basissteuerelement überprüft dieses Attribut, um festzustellen, ob die Ereignisse überprüft werden sollen. Ein abgeleitetes Steuerelement erbt nicht dieses Basissteuerelement-Attribut, und Ereignis-Überprüfung standardmäßig ausgeschlossen ist. Sie weisen weiterhin ASP.NET zur Ereignis Validierung abgeleiteten Steuerelements durch Hinzufügen der <xref:System.Web.Configuration.PagesSection.EnableEventValidation%2A> -Attribut für das abgeleitete Steuerelement selbst und bei der Einstellung `true`.  
  
> [!NOTE]
>  Validierung reduziert das Risiko von nicht autorisierten postback Anforderungen und Rückrufe. Er weist ASP.NET nur Ereignisse zu überprüfen, die während einer postback Anforderung oder einen Rückruf im Steuerelement ausgelöst werden können. Mit diesem Modell wird ein Steuerelement seine Ereignisse während des Renderings registriert und überprüft dann, ob die Ereignisse während der Verarbeitung Sendevorgangs oder der Rückruffunktion. Alle Steuerelemente, die in ASP.NET die ereignisgesteuerte dieses Feature wird standardmäßig verwendet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSessionState">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.PagesEnableSessionState EnableSessionState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.PagesEnableSessionState EnableSessionState" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.EnableSessionState" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableSessionState As PagesEnableSessionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::PagesEnableSessionState EnableSessionState { System::Web::Configuration::PagesEnableSessionState get(); void set(System::Web::Configuration::PagesEnableSessionState value); };" />
      <MemberSignature Language="F#" Value="member this.EnableSessionState : System.Web.Configuration.PagesEnableSessionState with get, set" Usage="System.Web.Configuration.PagesSection.EnableSessionState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableSessionState", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.PagesEnableSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies whether the session state is enabled, disabled, or read-only.</summary>
        <value>Einer der Werte für die <see cref="P:System.Web.Configuration.PagesSection.EnableSessionState" /> Eigenschaft, die angibt, ob der Sitzungszustand aktiviert, deaktiviert oder schreibgeschützt ist. Die Standardeinstellung ist <see cref="F:System.Web.Configuration.PagesEnableSessionState.True" />, gibt an, dass der Sitzungszustand aktiviert ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#14](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#14)]
 [!code-vb[System.Web.Configuration.PagesSection#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">The value is not a valid <see cref="T:System.Web.Configuration.PagesEnableSessionState" /> enumeration value.</exception>
      </Docs>
    </Member>
    <Member MemberName="EnableViewState">
      <MemberSignature Language="C#" Value="public bool EnableViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.EnableViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableViewState : bool with get, set" Usage="System.Web.Configuration.PagesSection.EnableViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableViewState", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether view state is enabled or disabled.</summary>
        <value>
          <see langword="true" /> Wenn der Ansichtszustand aktiviert ist; <see langword="false" /> Wenn Ansichtszustand deaktiviert ist. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.EnableViewState%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#5)]
 [!code-vb[System.Web.Configuration.PagesSection#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableViewStateMac">
      <MemberSignature Language="C#" Value="public bool EnableViewStateMac { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableViewStateMac" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.EnableViewStateMac" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableViewStateMac As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableViewStateMac { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableViewStateMac : bool with get, set" Usage="System.Web.Configuration.PagesSection.EnableViewStateMac" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableViewStateMac", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies whether ASP.NET should run a message authentication code (MAC) on the page's view state when the page is posted back from the client.</summary>
        <value>
          <see langword="true" /> Wenn ASP.NET einen Nachrichtenauthentifizierungscode (MAC) auf der Seite Ansichtszustand ausgeführt werden soll, wenn die Seite vom Client zurückgesendet wird; andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein MAC Ansichtszustand ist eine verschlüsselte Version der ausgeblendeten Variablen, die eine Seite Ansichtszustand zu beibehalten wird, wenn die Seite an den Browser gesendet wird. Wenn diese Eigenschaft festgelegt wird, um `true`, der verschlüsselten Ansichtszustand wird überprüft, um sicherzustellen, dass es nicht auf dem Client manipuliert wurde.  
  
> [!IMPORTANT]
>  Dieses Attribut sollte nicht festgelegt werden, um `false` in einer Produktions-Website, selbst wenn der Ansichtszustand nicht von der Anwendung oder die Seite verwendet wird. Der Ansichtszustand MAC sichergestellt, dass die Sicherheit anderer ASP.NET-Funktionen, die zusätzlich zu den Ansichtszustand.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.EnableViewStateMac%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#8)]
 [!code-vb[System.Web.Configuration.PagesSection#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreDeviceFilters">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.IgnoreDeviceFilterElementCollection IgnoreDeviceFilters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.IgnoreDeviceFilterElementCollection IgnoreDeviceFilters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.IgnoreDeviceFilters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IgnoreDeviceFilters As IgnoreDeviceFilterElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::IgnoreDeviceFilterElementCollection ^ IgnoreDeviceFilters { System::Web::Configuration::IgnoreDeviceFilterElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreDeviceFilters : System.Web.Configuration.IgnoreDeviceFilterElementCollection" Usage="System.Web.Configuration.PagesSection.IgnoreDeviceFilters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("ignoreDeviceFilters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.IgnoreDeviceFilterElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of device tags that ASP.NET should ignore when it renders a page.</summary>
        <value>Die Auflistung von Gerätetags, die ASP.NET ignoriert werden sollen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gerätetags ignoriert werden als HTML-Namespacepräfixe angegeben, die übergeben werden sollen, wie sie sich an den Browser und von ASP.NET verarbeitet sind. Ein Beispiel ist die `sys` Präfix, für Microsoft Ajax-Elemente verwendet wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.IgnoreDeviceFilterElement" />
      </Docs>
    </Member>
    <Member MemberName="MaintainScrollPositionOnPostBack">
      <MemberSignature Language="C#" Value="public bool MaintainScrollPositionOnPostBack { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaintainScrollPositionOnPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.MaintainScrollPositionOnPostBack" />
      <MemberSignature Language="VB.NET" Value="Public Property MaintainScrollPositionOnPostBack As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaintainScrollPositionOnPostBack { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MaintainScrollPositionOnPostBack : bool with get, set" Usage="System.Web.Configuration.PagesSection.MaintainScrollPositionOnPostBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maintainScrollPositionOnPostBack", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the page scroll position should be maintained upon returning from a postback from the server.</summary>
        <value>
          <see langword="true" /> Wenn die Seite Bildlaufposition nach dem Postback beibehalten werden soll; andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Page.IsPostBack" />
      </Docs>
    </Member>
    <Member MemberName="MasterPageFile">
      <MemberSignature Language="C#" Value="public string MasterPageFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MasterPageFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.MasterPageFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MasterPageFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MasterPageFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MasterPageFile : string with get, set" Usage="System.Web.Configuration.PagesSection.MasterPageFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("masterPageFile", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a reference to the master page for the application.</summary>
        <value>Ein Verweis auf die Gestaltungsvorlage für die Anwendung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Eigenschaft kann ein relativer oder absoluter Pfad sein.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.MasterPageFile%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#15](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#15)]
 [!code-vb[System.Web.Configuration.PagesSection#15](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPageStateFieldLength">
      <MemberSignature Language="C#" Value="public int MaxPageStateFieldLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxPageStateFieldLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.MaxPageStateFieldLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxPageStateFieldLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxPageStateFieldLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxPageStateFieldLength : int with get, set" Usage="System.Web.Configuration.PagesSection.MaxPageStateFieldLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxPageStateFieldLength", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum number of characters that a single view-state field can contain.</summary>
        <value>Die maximale Anzahl von Zeichen, die ein einzelnes Feld für den Ansichtszustand enthalten kann.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seiten- und Ansichtszustand wird in ausgeblendeten Feldern der Ansichtszustand gespeichert, wenn die Seite oder ein Steuerelement gerendert wird. Überschreitet die Länge der gespeicherten Daten die <xref:System.Web.Configuration.PagesSection.MaxPageStateFieldLength%2A> Wert, und klicken Sie dann die Daten zwischen mehreren Ansichtszustand Feldern aufgeteilt wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.MaxPageStateFieldLength%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#10)]
 [!code-vb[System.Web.Configuration.PagesSection#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.NamespaceCollection Namespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.NamespaceCollection Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespaces As NamespaceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::NamespaceCollection ^ Namespaces { System::Web::Configuration::NamespaceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : System.Web.Configuration.NamespaceCollection" Usage="System.Web.Configuration.PagesSection.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("namespaces")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.NamespaceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.Configuration.NamespaceInfo" /> objects.</summary>
        <value>Eine <see cref="T:System.Web.Configuration.NamespaceCollection" /> von <see cref="T:System.Web.Configuration.NamespaceInfo" />-Objekten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.TagPrefixInfo> Objekte entsprechen den `@ Import` Richtlinie auf einer ASP.NET-Seite. Die `Import` Richtlinie ermöglicht Ihnen das Festlegen von Namespaces, die automatisch in allen Seiten einer Anwendung importiert werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.Namespaces%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#2)]
 [!code-vb[System.Web.Configuration.PagesSection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.NamespaceCollection" />
        <altmember cref="T:System.Web.Configuration.NamespaceInfo" />
      </Docs>
    </Member>
    <Member MemberName="PageBaseType">
      <MemberSignature Language="C#" Value="public string PageBaseType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PageBaseType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.PageBaseType" />
      <MemberSignature Language="VB.NET" Value="Public Property PageBaseType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PageBaseType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PageBaseType : string with get, set" Usage="System.Web.Configuration.PagesSection.PageBaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("pageBaseType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies a code-behind class that .aspx pages inherit by default.</summary>
        <value>Eine Zeichenfolge, die eine Code-Behind-Klasse gibt an, der standardmäßig von ASPX-Seiten geerbt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.PageBaseType%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#18](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#18)]
 [!code-vb[System.Web.Configuration.PagesSection#18](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageParserFilterType">
      <MemberSignature Language="C#" Value="public string PageParserFilterType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PageParserFilterType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.PageParserFilterType" />
      <MemberSignature Language="VB.NET" Value="Public Property PageParserFilterType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PageParserFilterType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PageParserFilterType : string with get, set" Usage="System.Web.Configuration.PagesSection.PageParserFilterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("pageParserFilterType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies the parser filter type.</summary>
        <value>Eine Zeichenfolge, die den Parserfiltertyp angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Parserfilter, die eine Instanz von der <xref:System.Web.UI.PageParserFilter> Klasse, die aufgerufen wird, durch den Seitenkompilierungsprozess vor dem Schritt analysieren, um Änderungen an den Quellcode zur Laufzeit zu ermöglichen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.PageParserFilterType%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#3)]
 [!code-vb[System.Web.Configuration.PagesSection#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.PageParserFilter" />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Web.Configuration.PagesSection.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderAllHiddenFieldsAtTopOfForm">
      <MemberSignature Language="C#" Value="public bool RenderAllHiddenFieldsAtTopOfForm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderAllHiddenFieldsAtTopOfForm" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.RenderAllHiddenFieldsAtTopOfForm" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderAllHiddenFieldsAtTopOfForm As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RenderAllHiddenFieldsAtTopOfForm { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RenderAllHiddenFieldsAtTopOfForm : bool with get, set" Usage="System.Web.Configuration.PagesSection.RenderAllHiddenFieldsAtTopOfForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("renderAllHiddenFieldsAtTopOfForm", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether all system-generated hidden fields are rendered at the top of the form.</summary>
        <value>
          <see langword="true" /> Wenn vom System generierte ausgeblendete Felder am oberen Rand des Formulars gerendert werden; andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true." />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Web.Configuration.PagesSection.RenderAllHiddenFieldsAtTopOfForm%2A> Eigenschaft, um anzugeben, dass einige vom System generierte ausgeblendete Felder am Ende des Formulars gerendert werden.  
  
 In Versionen vor .NET Framework 3.5 SP1 von ASP.NET, rendert ASP.NET einige ausgeblendete Felder (z. B. `__VIEWSTATE`) am oberen Rand des Formulars. Andere ausgeblendete Felder (z. B. `__EVENTVALIDATION`) werden am unteren Rand der Form unmittelbar vor dem schließenden gerendert `</div>` Tag. Alle vom System generierte ausgeblendete Felder werden standardmäßig in ASP.NET 3.5 SP1 am oberen Rand der Seite gerendert. Dadurch wird sichergestellt, dass die Informationen in diesen Feldern an den Server gesendet wird, selbst wenn ein Postback ausgeführt wird, bevor die Seite vollständig geladen wurde. Wenn <xref:System.Web.Configuration.PagesSection.RenderAllHiddenFieldsAtTopOfForm%2A> festgelegt ist, um `false`, ein Postback ausführt, bevor die Seite vollständig geladen wurde, kann dazu führen, dass einen Fehler "Ungültiges Postback oder der Rückruffunktion Argument".  
  
> [!NOTE]
>  Zwar den Namen der Eigenschaft "alle ausgeblendeten Felder" zeigt an, werden ausgeblendete Felder benutzerdefinierte Einstellungen für diese Eigenschaft nicht betroffen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReadOnly">
      <MemberSignature Language="C#" Value="protected override void SetReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.PagesSection.SetReadOnly" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetReadOnly();" />
      <MemberSignature Language="F#" Value="override this.SetReadOnly : unit -&gt; unit" Usage="pagesSection.SetReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartNavigation">
      <MemberSignature Language="C#" Value="public bool SmartNavigation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SmartNavigation" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.SmartNavigation" />
      <MemberSignature Language="VB.NET" Value="Public Property SmartNavigation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SmartNavigation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SmartNavigation : bool with get, set" Usage="System.Web.Configuration.PagesSection.SmartNavigation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("smartNavigation", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether smart navigation is enabled.</summary>
        <value>
          <see langword="true" />, wenn die intelligente Navigation aktiviert ist; andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Intelligente Navigation ist Microsoft Internet Explorer 5.5 oder höher erforderlich.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.SmartNavigation%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#19](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#19)]
 [!code-vb[System.Web.Configuration.PagesSection#19](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleSheetTheme">
      <MemberSignature Language="C#" Value="public string StyleSheetTheme { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StyleSheetTheme" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.StyleSheetTheme" />
      <MemberSignature Language="VB.NET" Value="Public Property StyleSheetTheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StyleSheetTheme { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StyleSheetTheme : string with get, set" Usage="System.Web.Configuration.PagesSection.StyleSheetTheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("styleSheetTheme", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of an ASP.NET style sheet theme.</summary>
        <value>Der Name der Stylesheet-Design eine ASP.NET.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.StyleSheetTheme%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#13](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#13)]
 [!code-vb[System.Web.Configuration.PagesSection#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.StyleSheetTheme" />
      </Docs>
    </Member>
    <Member MemberName="TagMapping">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.TagMapCollection TagMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.TagMapCollection TagMapping" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.TagMapping" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TagMapping As TagMapCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::TagMapCollection ^ TagMapping { System::Web::Configuration::TagMapCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TagMapping : System.Web.Configuration.TagMapCollection" Usage="System.Web.Configuration.PagesSection.TagMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("tagMapping")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.TagMapCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.Configuration.TagMapInfo" /> objects.</summary>
        <value>Eine <see cref="T:System.Web.Configuration.TagMapCollection" /> von <see cref="T:System.Web.Configuration.TagMapInfo" />-Objekten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.TagPrefixInfo> Objekt hat keine entsprechende Direktive auf einer ASP.NET-Seite. Die <xref:System.Web.Configuration.TagPrefixInfo> Objekte ermöglichen es Ihnen, Tag, für andere Typnamen zum Zeitpunkt der Kompilierung neu zuordnen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.TagMapping%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#17](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#17)]
 [!code-vb[System.Web.Configuration.PagesSection#17](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Theme">
      <MemberSignature Language="C#" Value="public string Theme { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Theme" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.Theme" />
      <MemberSignature Language="VB.NET" Value="Public Property Theme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Theme { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Theme : string with get, set" Usage="System.Web.Configuration.PagesSection.Theme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("theme", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of an ASP.NET page theme.</summary>
        <value>Der Name des ein ASP.NET-Seitendesigns.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.Theme%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#4)]
 [!code-vb[System.Web.Configuration.PagesSection#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.Theme" />
      </Docs>
    </Member>
    <Member MemberName="UserControlBaseType">
      <MemberSignature Language="C#" Value="public string UserControlBaseType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserControlBaseType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.UserControlBaseType" />
      <MemberSignature Language="VB.NET" Value="Public Property UserControlBaseType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserControlBaseType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UserControlBaseType : string with get, set" Usage="System.Web.Configuration.PagesSection.UserControlBaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("userControlBaseType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies a code-behind class that user controls inherit by default.</summary>
        <value>Eine Zeichenfolge, die eine Code-Behind-Datei angibt, die standardmäßig von Benutzersteuerelementen geerbt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.UserControlBaseType%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#11)]
 [!code-vb[System.Web.Configuration.PagesSection#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateRequest">
      <MemberSignature Language="C#" Value="public bool ValidateRequest { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateRequest" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.ValidateRequest" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateRequest As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateRequest { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateRequest : bool with get, set" Usage="System.Web.Configuration.PagesSection.ValidateRequest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("validateRequest", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines whether ASP.NET examines input from the browser for dangerous values. For more information, see [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).</summary>
        <value>
          <see langword="true" /> Wenn ASP.NET auf Eingaben vom Browser auf gefährliche Werte überprüft; andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anforderung wird durchgeführt, indem alle Eingabedaten auf eine Liste von potenziell gefährlichen Werte vergleichen. Wenn eine Übereinstimmung auftritt, löst ASP.NET ein <xref:System.Web.HttpRequestValidationException>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.Configuration.PagesSection.ValidateRequest%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[System.Web.Configuration.PagesSection#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#7)]
 [!code-vb[System.Web.Configuration.PagesSection#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewStateEncryptionMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ViewStateEncryptionMode ViewStateEncryptionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ViewStateEncryptionMode ViewStateEncryptionMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.ViewStateEncryptionMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ViewStateEncryptionMode As ViewStateEncryptionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ViewStateEncryptionMode ViewStateEncryptionMode { System::Web::UI::ViewStateEncryptionMode get(); void set(System::Web::UI::ViewStateEncryptionMode value); };" />
      <MemberSignature Language="F#" Value="member this.ViewStateEncryptionMode : System.Web.UI.ViewStateEncryptionMode with get, set" Usage="System.Web.Configuration.PagesSection.ViewStateEncryptionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("viewStateEncryptionMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ViewStateEncryptionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the encryption mode that ASP.NET uses when maintaining <see langword="ViewState" /> values.</summary>
        <value>Ein <see cref="T:System.Web.UI.ViewStateEncryptionMode" /> -Enumerationswert, der angibt, wann die <see langword="ViewState" /> Werte sind verschlüsselt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die möglichen <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> Enumerationswerte sind `Always`, `Auto`, und `Never`. Der Standardwert ist `Auto`. Wenn <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> -Eigenschaftensatz auf `Auto`, `ViewState` werden verschlüsselt werden, wenn ein Steuerelement anfordert.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ViewStateEncryptionMode" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IObjectReference" FullName="System.Runtime.Serialization.IObjectReference">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4460a6995ec5a29586ee738beb1f2d43301117f1" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37633547" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IObjectReference" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObjectReference" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IObjectReference" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObjectReference" />
  <TypeSignature Language="C++ CLI" Value="public interface class IObjectReference" />
  <TypeSignature Language="F#" Value="type IObjectReference = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gibt an, dass die aktuelle Schnittstellenimplementierung ein Verweis auf ein anderes Objekt ist.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[IObjectReference Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IObjectReference Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[IObjectReference Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IObjectReference Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[IObjectReference Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IObjectReference Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Implementieren Sie diese Schnittstelle für Objekte, die Verweise auf ein anderes Objekt, das nicht aufgelöst werden kann, bis das aktuelle Objekt vollständig wiederhergestellt ist. Während des Fixups, alle Objekte implementieren <see cref="T:System.Runtime.Serialization.IObjectReference" /> wird abgefragt, für die Echtzeit-Objekt und das Objekt in das Diagramm eingefügt wird. Fixup bezieht sich auf die Finalisierung von verweisen, die noch nicht abgeschlossen, während der Deserialisierung des Objekts.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="GetRealObject">
      <MemberSignature Language="C#" Value="public object GetRealObject (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRealObject(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRealObject (context As StreamingContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetRealObject(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetRealObject : System.Runtime.Serialization.StreamingContext -&gt; obj" Usage="iObjectReference.GetRealObject context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">Der <see cref="T:System.Runtime.Serialization.StreamingContext" />, aus dem das aktuelle Objekt deserialisiert wird.</param>
        <summary>Gibt das zu deserialisierende eigentliche Objekt statt des Objekts zurück, das vom serialisierten Stream angegeben wird.</summary>
        <returns>Gibt das eigentliche Objekt zurück, das in das Diagramm aufgenommen wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist hilfreich in Situationen, in dem Sie ein Proxy-Ersteller-Objekt, nicht auf ein tatsächliches Objekt serialisieren, Remoting. Wenn der Proxy-Ersteller-Objekt deserialisiert wird, ruft die Deserialisierung der <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A> Methode. An diesem Punkt erstellt das Proxy-Ersteller-Objekt eine neue Instanz der der Proxyobjekt, das zurück auf das ursprüngliche tatsächliche-Objekt, z. B. auf einem Remotecomputer verweist. Abschließend wird das Proxy-Ersteller-Objekt verworfen und später durch die Garbagecollection freigegeben.  
  
 Betrachten Sie z. B. wie <xref:System.Type> -Objekte werden serialisiert. Anstatt die Übertragung von Daten aus der <xref:System.Type> Objekt, das System überträgt ein Besitzerobjekt mit dem Namen des Typ-Objekt und Informationen für die Assembly, in dem sie in ein Objekt, das gefunden wird <xref:System.Runtime.Serialization.IObjectReference>. Wenn Sie den Typnamen und den Assemblynamen verfügbar sind, ruft die Deserialisierungsinfrastruktur <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A> auf die Inhaber-Objekt, das übertragen wurde. Gibt diese Inhaber der <xref:System.Type> -Objekt, das in das Diagramm eingefügt wird.  
  
 Diese Methode ist geschützt, indem eine <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> für die <xref:System.Security.Permissions.SecurityPermission> mit der <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType> angegebenen.  
  
   
  
## Examples  
 [!code-cpp[IObjectReference Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IObjectReference Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[IObjectReference Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IObjectReference Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[IObjectReference Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IObjectReference Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung. Der Aufruf funktioniert nicht bei einem Server mit mittlerer Vertrauenswürdigkeit.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
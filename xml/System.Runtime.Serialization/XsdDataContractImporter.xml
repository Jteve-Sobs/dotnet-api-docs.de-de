<Type Name="XsdDataContractImporter" FullName="System.Runtime.Serialization.XsdDataContractImporter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a549c6fe6287e9fd56e22b85a70e1d1d446a379c" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86328200" /></Metadata><TypeSignature Language="C#" Value="public class XsdDataContractImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdDataContractImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XsdDataContractImporter" />
  <TypeSignature Language="VB.NET" Value="Public Class XsdDataContractImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsdDataContractImporter" />
  <TypeSignature Language="F#" Value="type XsdDataContractImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0b2e0-101">Ermöglicht die Transformation einer Reihe von XML-Schemadateien (.xsd) in Common Language Runtime (CLR)-Typen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-101">Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b2e0-102">Verwenden Sie den <xref:System.Runtime.Serialization.XsdDataContractImporter>, wenn Sie einen Webdienst erstellen, der mit einem bestehenden Webdienst zusammenarbeiten muss, oder um Datenvertragstypen aus XML-Schemas zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-102">Use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas.</span></span> <span data-ttu-id="0b2e0-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> transformiert eine Gruppe von XML-Schemas und erstellt die [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]-Typen, die den Datenvertrag in einer ausgewählten Programmiersprache darstellen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> will transform a set of XML schemas and create the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] types that represent the data contract in a selected programming language.</span></span> <span data-ttu-id="0b2e0-104">Um den Code zu erstellen, verwenden Sie die Klassen im <xref:System.CodeDom>-Namespace.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-104">To create the code, use the classes in the <xref:System.CodeDom> namespace.</span></span>  
  
 <span data-ttu-id="0b2e0-105">Umgekehrt können Sie die <xref:System.Runtime.Serialization.XsdDataContractExporter>-Klasse verwenden, wenn Sie einen Webdienst erstellt haben, der Daten enthält, die als CLR-Typen dargestellt werden, und wenn Sie für die von anderen Webdiensten zu verwendenden Datentypen XML-Schemas exportieren wollen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-105">Conversely, use the <xref:System.Runtime.Serialization.XsdDataContractExporter> class when you have created a Web service that incorporates data represented by CLR types and when you need to export XML schemas for each data type to be consumed by other Web services.</span></span> <span data-ttu-id="0b2e0-106">Dies bedeutet, dass <xref:System.Runtime.Serialization.XsdDataContractExporter> einen Satz von CLR-Typen in einen Satz von XML-Schemas transformiert.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-106">That is, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforms a set of CLR types into a set of XML schemas.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0b2e0-107">Um CLR-Typen aus XML-Schemas zur Entwurfszeit zu generieren, verwenden Sie das [Service Model Metadata Utility-Tool (Svcutil.exe)](/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe).</span><span class="sxs-lookup"><span data-stu-id="0b2e0-107">To generate CLR types from XML schemas at design time, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe).</span></span> <span data-ttu-id="0b2e0-108">Um Code aus XSD-Dateien zu generieren, verwenden Sie den- `/dataContractOnly` Schalter des Tools.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-108">To generated code from XSD files, use the `/dataContractOnly` switch of the tool.</span></span> <span data-ttu-id="0b2e0-109">Sie können auch den <xref:System.Runtime.Serialization.XsdDataContractImporter> verwenden, wenn Sie mehr Kontrolle über den Vorgang benötigen oder wenn dieser programmgesteuert sein muss.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-109">You can also use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you need more control over the process or need to do it programmatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b2e0-110">Im folgenden Beispiel wird ein  <xref:System.Xml.Schema.XmlSchemaSet> erstellt und die <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A>-Methode aufgerufen, um einen <xref:System.CodeDom.CodeCompileUnit> zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-110">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="0b2e0-111">Der <xref:System.CodeDom.CodeCompileUnit> wird dann verwendet, um sowohl Visual C#- als auch Visual Basic-Codedateien zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-111">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#0](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#0)]
 [!code-vb[XsdDataContractImporter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <related type="Article" href="/dotnet/framework/wcf/feature-details/using-data-contracts"><span data-ttu-id="0b2e0-112">Verwenden von Datenverträgen</span><span class="sxs-lookup"><span data-stu-id="0b2e0-112">Using Data Contracts</span></span></related>
    <related type="Article" href="/dotnet/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer"><span data-ttu-id="0b2e0-113">Vom Datenvertragsserialisierer unterstützte Typen</span><span class="sxs-lookup"><span data-stu-id="0b2e0-113">Types Supported by the Data Contract Serializer</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b2e0-114">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-114">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b2e0-115">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-115">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (codeCompileUnit As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Serialization.XsdDataContractImporter : System.CodeDom.CodeCompileUnit -&gt; System.Runtime.Serialization.XsdDataContractImporter" Usage="new System.Runtime.Serialization.XsdDataContractImporter codeCompileUnit" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit"><span data-ttu-id="0b2e0-116">Der <see cref="T:System.CodeDom.CodeCompileUnit" />, der zum Speichern des Codes verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-116">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to store the code.</span></span></param>
        <summary><span data-ttu-id="0b2e0-117">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />-Klasse mit dem <see cref="T:System.CodeDom.CodeCompileUnit" />, der zur Generierung von CLR-Code verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-117">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class with the <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to generate CLR code.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b2e0-118">Verwenden Sie diesen Konstruktor, um einem <xref:System.CodeDom.CodeCompileUnit>, der bereits generiert wurde, mehr Code hinzuzufügen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-118">Use this constructor to add more code into a <xref:System.CodeDom.CodeCompileUnit> that has already been generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b2e0-119">Im folgenden Beispiel wird ein  <xref:System.Xml.Schema.XmlSchemaSet> erstellt und die <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A>-Methode aufgerufen, um einen <xref:System.CodeDom.CodeCompileUnit> zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-119">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="0b2e0-120">Der <xref:System.CodeDom.CodeCompileUnit> wird dann verwendet, um sowohl Visual C#- als auch Visual Basic-Codedateien zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-120">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanImport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b2e0-121">Ruft einen Wert ab, der angibt, ob die Schemas in einen <see cref="T:System.CodeDom.CodeCompileUnit" /> transformiert werden können.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-121">Gets a value that indicates whether the schemas can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b2e0-122">Weitere Informationen zu Typen, die importiert werden können, finden Sie [unter vom Datenvertragsserialisierer unterstützte Typen](/dotnet/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer).</span><span class="sxs-lookup"><span data-stu-id="0b2e0-122">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](/dotnet/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet -&gt; bool" Usage="xsdDataContractImporter.CanImport schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="0b2e0-123">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, der die zu transformierenden Schemas enthält.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-123">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <summary><span data-ttu-id="0b2e0-124">Ruft einen Wert ab, der angibt, ob die in einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> enthaltenen Schemas in einen <see cref="T:System.CodeDom.CodeCompileUnit" /> transformiert werden können.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-124">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="0b2e0-125"><see langword="true" />, wenn die Schemas in Datenvertragstypen transformiert werden können, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-125"><see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0b2e0-126">Im folgenden Beispiel wird die <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A>-Methode aufgerufen, um festzustellen, ob der <xref:System.CodeDom.CodeCompileUnit> generiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-126">The following example calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to determine whether the <xref:System.CodeDom.CodeCompileUnit> can be generated.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b2e0-127">Der <paramref name="schemas" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-127">The <paramref name="schemas" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="0b2e0-128">Ein in den Import einbezogener Datenvertrag ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-128">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="0b2e0-129">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, der die zu transformierenden Schemas enthält.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-129">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <param name="typeNames"><span data-ttu-id="0b2e0-130">Ein <see cref="T:System.Collections.Generic.ICollection`1" /> von <see cref="T:System.Xml.XmlQualifiedName" />, der den zu importierenden Satz von Schematypen darstellt.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-130">An <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that represents the set of schema types to import.</span></span></param>
        <summary><span data-ttu-id="0b2e0-131">Ruft einen Wert ab, der anzeigt, ob der in einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> enthaltene angegebene Typensatz in CLR-Typen transformiert werden kann, die in einen <see cref="T:System.CodeDom.CodeCompileUnit" /> generiert werden.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-131">Gets a value that indicates whether the specified set of types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="0b2e0-132"><see langword="true" />, wenn die Schemas transformiert werden können, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-132"><see langword="true" /> if the schemas can be transformed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b2e0-133">Der <paramref name="schemas" />-Parameter oder der <paramref name="typeNames" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-133">The <paramref name="schemas" /> or <paramref name="typeNames" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="0b2e0-134">Ein in den Import einbezogener Datenvertrag ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-134">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, element As XmlSchemaElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="0b2e0-135">Ein zu importierender <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-135">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to import.</span></span></param>
        <param name="element"><span data-ttu-id="0b2e0-136">Ein bestimmter <see cref="T:System.Xml.Schema.XmlSchemaElement" />, um den Schemasatz zu prüfen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-136">A specific <see cref="T:System.Xml.Schema.XmlSchemaElement" /> to check in the set of schemas.</span></span></param>
        <summary><span data-ttu-id="0b2e0-137">Ruft einen Wert ab, der angibt, ob ein bestimmtes in einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> enthaltenes Schemaelement importiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-137">Gets a value that indicates whether a specific schema element contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be imported.</span></span></summary>
        <returns><span data-ttu-id="0b2e0-138"><see langword="true" />, wenn das Element importiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-138"><see langword="true" /> if the element can be imported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b2e0-139">Diese Methode prüft den Typ und alle Schematypen, auf die sie verweist.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-139">This method checks the type and all schema types referenced from it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b2e0-140">Der <paramref name="schemas" />-Parameter oder der <paramref name="element" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-140">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="0b2e0-141">Ein in den Import einbezogener Datenvertrag ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-141">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeName As XmlQualifiedName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="0b2e0-142">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, der die Schemadarstellungen enthält.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-142">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeName"><span data-ttu-id="0b2e0-143">Ein <see cref="T:System.Collections.IList" /> von <see cref="T:System.Xml.XmlQualifiedName" />, der die Namen der Schematypen angibt, die vom <see cref="T:System.Xml.Schema.XmlSchemaSet" /> importiert werden müssen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-143">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the schema types that need to be imported from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></param>
        <summary><span data-ttu-id="0b2e0-144">Ruft einen Wert ab, der angibt, ob die in einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> enthaltenen Schemas in einen <see cref="T:System.CodeDom.CodeCompileUnit" /> transformiert werden können.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-144">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="0b2e0-145"><see langword="true" />, wenn die Schemas in Datenvertragstypen transformiert werden können, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-145"><see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b2e0-146">Weitere Informationen zu Typen, die importiert werden können, finden Sie [unter vom Datenvertragsserialisierer unterstützte Typen](/dotnet/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer).</span><span class="sxs-lookup"><span data-stu-id="0b2e0-146">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](/dotnet/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b2e0-147">Der <paramref name="schemas" />-Parameter oder der <paramref name="typeName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-147">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="0b2e0-148">Ein in den Import einbezogener Datenvertrag ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-148">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CodeCompileUnit">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeCompileUnit CodeCompileUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeCompileUnit CodeCompileUnit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeCompileUnit As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeCompileUnit ^ CodeCompileUnit { System::CodeDom::CodeCompileUnit ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompileUnit : System.CodeDom.CodeCompileUnit" Usage="System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b2e0-149">Ruft einen <see cref="T:System.CodeDom.CodeCompileUnit" /> auf, der zum Speichern der generierten CLR-Typen verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-149">Gets a <see cref="T:System.CodeDom.CodeCompileUnit" /> used for storing the CLR types generated.</span></span></summary>
        <value><span data-ttu-id="0b2e0-150">Ein <see cref="T:System.CodeDom.CodeCompileUnit" />, der verwendet wird, um die generierten CLR-Typen zu speichern.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-150">A <see cref="T:System.CodeDom.CodeCompileUnit" /> used to store the CLR types generated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b2e0-151">Rufen Sie diese Eigenschaft nach dem Import von Schemas auf, indem Sie den <xref:System.Runtime.Serialization.XsdDataContractImporter> verwenden, um auf den <xref:System.CodeDom.CodeCompileUnit> zuzugreifen, in dem der gesamte generierte Code gespeichert ist.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-151">Call this property after importing schemas using the <xref:System.Runtime.Serialization.XsdDataContractImporter> to access the <xref:System.CodeDom.CodeCompileUnit> in which all the generated code is stored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b2e0-152">Im folgenden Beispiel wird ein <xref:System.CodeDom.CodeCompileUnit> erstellt.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-152">The following example uses creates a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="0b2e0-153">Der <xref:System.CodeDom.CodeCompileUnit> wird dann verwendet, um sowohl eine Visual C#- als auch eine Visual Basic-Codedatei zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-153">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both a Visual C# and Visual Basic code file.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCodeTypeReference">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b2e0-154">Gibt einen <see cref="T:System.CodeDom.CodeTypeReference" /> für ein angegebenes Element zurück.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-154">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="0b2e0-155">Der <see cref="T:System.Xml.XmlQualifiedName" />, der den zu suchenden Schematyp angibt.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-155">The <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the schema type to look up.</span></span></param>
        <summary><span data-ttu-id="0b2e0-156">Gibt einen <see cref="T:System.CodeDom.CodeTypeReference" /> an den CLR-Typ zurück, der für den Schematyp mit dem angegebenen <see cref="T:System.Xml.XmlQualifiedName" /> generiert wurde.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-156">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> to the CLR type generated for the schema type with the specified <see cref="T:System.Xml.XmlQualifiedName" />.</span></span></summary>
        <returns><span data-ttu-id="0b2e0-157">Ein <see cref="T:System.CodeDom.CodeTypeReference" />-Verweis auf den CLR-Typ, der für den Schematyp mit dem angegebenen <paramref name="typeName" /> generiert wurde.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-157">A <see cref="T:System.CodeDom.CodeTypeReference" /> reference to the CLR type generated for the schema type with the <paramref name="typeName" /> specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b2e0-158">Verwenden Sie diese Methode, um nach dem Verweis auf einen generierten CLR-Typ zu suchen, nachdem Sie die <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A>-Methode aufgerufen haben.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-158">Use this method to look up the reference to a generated CLR type after calling the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span> <span data-ttu-id="0b2e0-159">Der <xref:System.CodeDom.CodeTypeReference> enthält den Namen des generierten Typs und kann verwendet werden, um den entsprechenden <xref:System.CodeDom.CodeTypeDeclaration> im <xref:System.CodeDom.CodeCompileUnit> zu suchen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-159">The <xref:System.CodeDom.CodeTypeReference> contains the name of the generated type and can be used to look up the corresponding <xref:System.CodeDom.CodeTypeDeclaration> in the <xref:System.CodeDom.CodeCompileUnit>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName, element As XmlSchemaElement) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName * System.Xml.Schema.XmlSchemaElement -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference (typeName, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="0b2e0-160">Ein <see cref="T:System.Xml.XmlQualifiedName" />, der den qualifizierten XML-Namen des Schematyps zurückgibt, nach dem gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-160">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the XML qualified name of the schema type to look up.</span></span></param>
        <param name="element"><span data-ttu-id="0b2e0-161">Ein <see cref="T:System.Xml.Schema.XmlSchemaElement" />, der ein Element in einem XML-Schema angibt.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-161">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that specifies an element in an XML schema.</span></span></param>
        <summary><span data-ttu-id="0b2e0-162">Gibt einen <see cref="T:System.CodeDom.CodeTypeReference" /> für das angegebene qualifizierte XML-Element und Schemaelement zurück.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-162">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified XML qualified element and schema element.</span></span></summary>
        <returns><span data-ttu-id="0b2e0-163">Ein <see cref="T:System.CodeDom.CodeTypeReference" />, der den Typ darstellt, der für den angegebenen Schematyp generiert wurde.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-163">A <see cref="T:System.CodeDom.CodeTypeReference" /> that represents the type that was generated for the specified schema type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b2e0-164">Das Schemaelement wird für Daten über den Typ benötigt, der beim Gültigbeitsbereich des Elements angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-164">The schema element is needed for data about the type that is specified at the element scope.</span></span> <span data-ttu-id="0b2e0-165">Das wichtigste Beispiel hierfür ist das XSD-Attribut`nillable`.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-165">The main example of this is the XSD attribute `nillable`.</span></span> <span data-ttu-id="0b2e0-166">Im Schema wird die Einstellung von `nillable` auf `true` im entsprechenden Schemaelement angegeben, wogegen das Konzept NULL im CLR-Typ <xref:System.Nullable%601> ausgedrückt wird.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-166">In schema, setting `nillable` to `true` is specified on the containing schema element whereas the concept of null is expressed in the CLR type <xref:System.Nullable%601>.</span></span> <span data-ttu-id="0b2e0-167">Das Element wird übergeben, sodass dieser Importer die Elementebeneninformation suchen und den korrekten Typverweis zurückgeben kann. </span><span class="sxs-lookup"><span data-stu-id="0b2e0-167">The element is passed in so that this importer can look up the element-level information and return the correct type reference accordingly.</span></span>  
  
 <span data-ttu-id="0b2e0-168">Beim WDSL-Import wird jeder Parameter separat importiert, deshalb müssen die Parameterelemente separat übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-168">When importing WSDL, each parameter is imported separately and therefore the parameter elements need to be passed in separately.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownTypeReferences">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKnownTypeReferences (typeName As XmlQualifiedName) As ICollection(Of CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::CodeDom::CodeTypeReference ^&gt; ^ GetKnownTypeReferences(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetKnownTypeReferences : System.Xml.XmlQualifiedName -&gt; System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;" Usage="xsdDataContractImporter.GetKnownTypeReferences typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="0b2e0-169">Ein <see cref="T:System.Xml.XmlQualifiedName" />, der den Schematyp darstellt, für den bekannte Typen gesucht werden sollen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-169">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the schema type to look up known types for.</span></span></param>
        <summary><span data-ttu-id="0b2e0-170">Gibt eine Liste von <see cref="T:System.CodeDom.CodeTypeReference" />-Objekten zurück, die die bekannten Typen darstellt, die bei der Generierung von Code für den angegebenen Schematyp erstellt wurden.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-170">Returns a list of <see cref="T:System.CodeDom.CodeTypeReference" /> objects that represents the known types generated when generating code for the specified schema type.</span></span></summary>
        <returns><span data-ttu-id="0b2e0-171"><see cref="T:System.Collections.Generic.IList`1" /> vom Typ <see cref="T:System.CodeDom.CodeTypeReference" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-171">A <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.CodeDom.CodeTypeReference" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b2e0-172">Bei der Generierung von CLR-Typen für Schematypen werden auch bekannte Typen für alle abgeleiteten Typen erstellt, die im Schema vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-172">When generating CLR types for schema types, known types are also generated for all derived types that are present in the schema.</span></span> <span data-ttu-id="0b2e0-173">In vielen Fällen werden diese bekannten Typen dem generierten Code mit Attributen hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-173">In many cases, these known types are added using attributes to the generated code.</span></span> <span data-ttu-id="0b2e0-174">(Informationen hierzu finden Sie beispielsweise in der- <xref:System.Runtime.Serialization.KnownTypeAttribute> Klasse.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-174">(For example, see the <xref:System.Runtime.Serialization.KnownTypeAttribute> class.</span></span> <span data-ttu-id="0b2e0-175">Für den Typ der obersten Ebene muss jedoch eine Möglichkeit vorhanden sein, die Anzahl der generierten bekannten Typen zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-175">) However, for the top-level type, there needs to be a way to return the set of known types generated.</span></span> <span data-ttu-id="0b2e0-176">Diese Methode gibt den <xref:System.CodeDom.CodeTypeReference> für bekannte Typen zurück, die für einen bestimmten Schematyp generiert wurden.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-176">This method returns the <xref:System.CodeDom.CodeTypeReference> for known types that were generated for a specific schema type.</span></span>  
  
 <span data-ttu-id="0b2e0-177">Weitere Informationen finden Sie unter [Data Contract Known Types](/dotnet/framework/wcf/feature-details/data-contract-known-types).</span><span class="sxs-lookup"><span data-stu-id="0b2e0-177">For more information, see [Data Contract Known Types](/dotnet/framework/wcf/feature-details/data-contract-known-types).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
        <related type="Article" href="/dotnet/framework/wcf/feature-details/data-contract-known-types"><span data-ttu-id="0b2e0-178">Bekannte Typen in Datenverträgen</span><span class="sxs-lookup"><span data-stu-id="0b2e0-178">Data Contract Known Types</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Import">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b2e0-179">Transformiert einen Satz von XML-Schemas in einen <see cref="T:System.CodeDom.CodeCompileUnit" />, der zur Generierung von CLR-Code verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-179">Transforms a set of XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> used to generate CLR code.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xsdDataContractImporter.Import schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="0b2e0-180">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, der die Schemadarstellungen enthält, für die CLR-Typen generiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-180">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations to generate CLR types for.</span></span></param>
        <summary><span data-ttu-id="0b2e0-181">Transformiert den angegebenen Satz von XML-Schemas, die in einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> enthalten sind, in einen <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-181">Transforms the specified set of XML schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0b2e0-182">Im folgenden Beispiel wird mit der <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A>-Methode getestet, ob ein Schemasatz importiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-182">The following example uses the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to test whether a set of schemas can be imported.</span></span> <span data-ttu-id="0b2e0-183">Wenn die <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A>-Methode `true` zurückgibt, ruft der Code die <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A>-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-183">If the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method returns `true`, the code invokes the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b2e0-184">Der <paramref name="schemas" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-184">The <paramref name="schemas" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="0b2e0-185">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, der die Schemadarstellungen enthält.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-185">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeNames"><span data-ttu-id="0b2e0-186">Eine <see cref="T:System.Collections.Generic.ICollection`1" /> (von <see cref="T:System.Xml.XmlQualifiedName" />), die den zu importierenden Satz von Schematypen darstellt.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-186">A <see cref="T:System.Collections.Generic.ICollection`1" /> (of <see cref="T:System.Xml.XmlQualifiedName" />) that represents the set of schema types to import.</span></span></param>
        <summary><span data-ttu-id="0b2e0-187">Transformiert den angegebenen Satz von Schematypen, der in einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> enthalten ist, in CLR-Typen, die in einen <see cref="T:System.CodeDom.CodeCompileUnit" /> generiert werden.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-187">Transforms the specified set of schema types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Import (schemas As XmlSchemaSet, element As XmlSchemaElement) As XmlQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractImporter.Import (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="0b2e0-188">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, der die zu transformierenden Schemas enthält.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-188">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <param name="element"><span data-ttu-id="0b2e0-189">Ein <see cref="T:System.Xml.Schema.XmlSchemaElement" />, der das zu transformierende Schemaelement darstellt.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-189">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that represents the specific schema element to transform.</span></span></param>
        <summary><span data-ttu-id="0b2e0-190">Transformiert das angegebene Schemaelement in dem Satz angegebener XML-Schemas in einen <see cref="T:System.CodeDom.CodeCompileUnit" /> und gibt einen <see cref="T:System.Xml.XmlQualifiedName" /> zurück, der den Datenvertragsnamen für das angegebene Element darstellt.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-190">Transforms the specified schema element in the set of specified XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> and returns an <see cref="T:System.Xml.XmlQualifiedName" /> that represents the data contract name for the specified element.</span></span></summary>
        <returns><span data-ttu-id="0b2e0-191">Ein <see cref="T:System.Xml.XmlQualifiedName" /> , der das angegebene Element darstellt.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-191">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the specified element.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b2e0-192">Der <paramref name="schemas" />-Parameter oder der <paramref name="element" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-192">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeName As XmlQualifiedName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="0b2e0-193">Ein <see cref="T:System.Xml.Schema.XmlSchemaSet" />, der die Schemadarstellungen enthält.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-193">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeName"><span data-ttu-id="0b2e0-194">Ein <see cref="T:System.Xml.XmlQualifiedName" />, der einen bestimmten zu importierenden Schematyp darstellt.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-194">A <see cref="T:System.Xml.XmlQualifiedName" /> that represents a specific schema type to import.</span></span></param>
        <summary><span data-ttu-id="0b2e0-195">Transformiert den angegebenen, in einem <see cref="T:System.Xml.Schema.XmlSchemaSet" /> enthaltenen XML-Schematyp in einen <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-195">Transforms the specified XML schema type contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0b2e0-196">Der <paramref name="schemas" />-Parameter oder der <paramref name="typeName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-196">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.ImportOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Serialization.ImportOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As ImportOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::ImportOptions ^ Options { System::Runtime::Serialization::ImportOptions ^ get(); void set(System::Runtime::Serialization::ImportOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Runtime.Serialization.ImportOptions with get, set" Usage="System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.ImportOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b2e0-197">Ruft einen <see cref="T:System.Runtime.Serialization.ImportOptions" /> auf, der festlegbare Optionen für den Importvorgang enthält, oder legt diesen fest.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-197">Gets or sets an <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options for the import operation.</span></span></summary>
        <value><span data-ttu-id="0b2e0-198">Ein <see cref="T:System.Runtime.Serialization.ImportOptions" />, der festlegbare Optionen enthält.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-198">A <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b2e0-199">Verwenden Sie die <xref:System.Runtime.Serialization.ImportOptions>-Klasse, um die Generierung der CLR-Typen während des Schemaimports anzupassen.</span><span class="sxs-lookup"><span data-stu-id="0b2e0-199">Use the <xref:System.Runtime.Serialization.ImportOptions> class to customize how the CLR types are generated during schema import.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
        <altmember cref="T:System.Runtime.Serialization.ImportOptions" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="70d94daed131fd169a9e7dd76c788d9dfcaaed62" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39755891" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ermöglicht einem Objekt, die eigene Serialisierung und Deserialisierung zu überwachen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Klasse, die möglicherweise serialisiert werden muss markiert werden, mit der <xref:System.SerializableAttribute>. Wenn eine Klasse ihren Serialisierungsprozess steuern muss, können sie implementieren die <xref:System.Runtime.Serialization.ISerializable> Schnittstelle. Die <xref:System.Runtime.Serialization.Formatter> Aufrufe der <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> während der Serialisierung und füllt die angegebene <xref:System.Runtime.Serialization.SerializationInfo> mit allen Daten, die zur Darstellung des Objekts erforderlich sind. Die <xref:System.Runtime.Serialization.Formatter> erstellt eine <xref:System.Runtime.Serialization.SerializationInfo> mit dem Typ des Objekts in das Diagramm. Objekte, die zum Senden von Proxys für sich selbst verwenden können, müssen die <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> und <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> Methoden <xref:System.Runtime.Serialization.SerializationInfo> so ändern Sie die übertragene Informationen.  
  
 Im Fall von klassenvererbung, es ist möglich, eine Klasse serialisieren, die von einer Basisklasse abgeleitet wird, implementiert <xref:System.Runtime.Serialization.ISerializable>. In diesem Fall sollte die abgeleitete Klasse die basisklassenimplementierung von Aufrufen <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> in seiner Implementierung <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>. Andernfalls werden die Daten von der Basisklasse nicht serialisiert werden.  
  
 Die <xref:System.Runtime.Serialization.ISerializable> Schnittstelle impliziert einen Konstruktor mit der Signaturkonstruktor (<xref:System.Runtime.Serialization.SerializationInfo> Informationen <xref:System.Runtime.Serialization.StreamingContext> Kontext). Während der Deserialisierung der aktuelle Konstruktor erst aufgerufen, nachdem die Daten in die <xref:System.Runtime.Serialization.SerializationInfo> vom Formatierungsprogramm deserialisiert wurde. Dieser Konstruktor sollte im Allgemeinen geschützt werden, wenn die Klasse nicht versiegelt ist.  
  
 Die Reihenfolge, in der Deserialisieren von Objekten, kann nicht garantiert werden. Z. B. wenn ein Typ einen Typ, der noch nicht deserialisiert wurde verweist, wird eine Ausnahme ausgelöst. Wenn Sie Typen, die solche Abhängigkeiten aufweisen erstellen, können Sie umgehen das Problem durch die Implementierung der `IDeserializationCallback` Schnittstelle und die `OnDeserialization` Methode.  
  
 Die Serialisierungsarchitektur behandelt Objekttypen, die erweitern <xref:System.MarshalByRefObject> wie Typen, die erweitern <xref:System.Object>. Diese Typen können markiert werden, mit der <xref:System.SerializableAttribute> und Implementieren der <xref:System.Runtime.Serialization.ISerializable> Schnittstelle wie jeden anderen Objekttyp. Ihre Objektzustand wird aufgezeichnet und in den Stream gespeichert werden.  
  
 Wenn werden diese Typen verwendet wird, über <xref:System.Runtime.Remoting>, die Remoteinfrastruktur stellt einen Ersatz, der hat Vorrang vor normalen Serialisierung und stattdessen serialisiert einen Proxy für die <xref:System.MarshalByRefObject>. Ein Ersatz ist eine Hilfsklasse, die weiß, wie zum Serialisieren und Deserialisieren von Objekten eines bestimmten Typs. Der Proxy, für den Benutzer in den meisten Fällen nicht mehr sichtbar werden vom Typ <xref:System.Runtime.Remoting.ObjRef>.  
  
 Als eine allgemeine Entwurfsmuster, es wäre ungewöhnlich, dass eine Klasse mit dem serializable-Attribut markiert, und erweitern <xref:System.MarshalByRefObject>. Entwickler sollten die möglichen Szenarien für Serialisierung und -Remoting sorgfältig überlegen, bei der Kombination dieser beiden Merkmale. Ein Beispiel, in denen dies ist möglicherweise anwendbar, ist, mit einem <xref:System.IO.MemoryStream>. Während die Basisklasse der <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) erstreckt sich von <xref:System.MarshalByRefObject>, es ist möglich, den Status des Aufzeichnen einer <xref:System.IO.MemoryStream> und wiederhergestellt werden. Er kann deshalb sinnvoll sein, den Zustand dieses Streams in einer Datenbank zu serialisieren und zu einem späteren Zeitpunkt Zeitpunkt wiederherstellen. Allerdings würde über Remoting verwendet wird, ein Objekt dieses Typs über einen Proxy sein.  
  
 Weitere Informationen über die Serialisierung von Klassen, die erweitern <xref:System.MarshalByRefObject>, finden Sie unter <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>. Weitere Informationen zum Implementieren von <xref:System.Runtime.Serialization.ISerializable>, finden Sie unter [benutzerdefinierte Serialisierung](~/docs/standard/serialization/custom-serialization.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Runtime.Serialization.ISerializable> Schnittstelle, um die benutzerdefinierte Serialisierungsverhalten für eine Klasse zu definieren.  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Implementieren Sie diese Schnittstelle, um ein Objekt an die eigene Serialisierung und Deserialisierung beteiligen können.</para>
    </block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Die mit Daten zu füllende <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
        <param name="context">Das Ziel (siehe <see cref="T:System.Runtime.Serialization.StreamingContext" />) dieser Serialisierung.</param>
        <summary>Füllt eine <see cref="T:System.Runtime.Serialization.SerializationInfo" /> mit den Daten auf, die zum Serialisieren des Zielobjekts erforderlich sind.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Objekte, die in enthaltenen der <xref:System.Runtime.Serialization.SerializationInfo> werden automatisch nachverfolgt und vom Formatierungsprogramm serialisiert.  
  
 Code, der Aufrufe <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> erfordert die <xref:System.Security.Permissions.SecurityPermission> für das Bereitstellen von Serialisierungsdiensten. Zugeordnete Enumeration: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>  
  
> [!NOTE]
>  Es ist nicht garantiert, dass diese Methode wird während der Serialisierung nur einmal pro Objektinstanz aufgerufen werden. Aus diesem Grund sollte die Methode so implementiert werden, dass das Verhalten egal, wie oft werden, die sie aufgerufen wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> Methode, um alternative Werte für ein serialisiertes Objekt festzulegen. Der Code verwendet die <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> Methode der <xref:System.Runtime.Serialization.SerializationInfo> Klasse, um die anderen Werte zu speichern, wenn das Objekt serialisiert wird. Im Gegensatz dazu, wenn der Konstruktor der der `Person` Klasse während der Deserialisierung aufgerufen wird, wird die alternativen Werte abgerufen werden, mithilfe der <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> Methode und den Feldern des Objekts zugewiesen.  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
      </Docs>
    </Member>
  </Members>
</Type>
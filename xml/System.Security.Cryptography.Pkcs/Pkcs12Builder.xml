<Type Name="Pkcs12Builder" FullName="System.Security.Cryptography.Pkcs.Pkcs12Builder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="288621fbece59dec6b9b539309f0e22c5a2f6763" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70641472" /></Metadata><TypeSignature Language="C#" Value="public sealed class Pkcs12Builder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Pkcs12Builder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Pkcs.Pkcs12Builder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Pkcs12Builder" />
  <TypeSignature Language="C++ CLI" Value="public ref class Pkcs12Builder sealed" />
  <TypeSignature Language="F#" Value="type Pkcs12Builder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht die Erstellung von PKCS#12-PFX-Datenwerten. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pkcs12Builder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pkcs12Builder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert einen neuen Wert der <see cref="T:System.Security.Cryptography.Pkcs.Pkcs12Builder" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSafeContentsEncrypted">
      <MemberSignature Language="C#" Value="public void AddSafeContentsEncrypted (System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, byte[] passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSafeContentsEncrypted(class System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, unsigned int8[] passwordBytes, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.AddSafeContentsEncrypted(System.Security.Cryptography.Pkcs.Pkcs12SafeContents,System.Byte[],System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSafeContentsEncrypted(System::Security::Cryptography::Pkcs::Pkcs12SafeContents ^ safeContents, cli::array &lt;System::Byte&gt; ^ passwordBytes, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberSignature Language="F#" Value="member this.AddSafeContentsEncrypted : System.Security.Cryptography.Pkcs.Pkcs12SafeContents * byte[] * System.Security.Cryptography.PbeParameters -&gt; unit" Usage="pkcs12Builder.AddSafeContentsEncrypted (safeContents, passwordBytes, pbeParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="safeContents" Type="System.Security.Cryptography.Pkcs.Pkcs12SafeContents" />
        <Parameter Name="passwordBytes" Type="System.Byte[]" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="safeContents">Der Inhalt, der der PFX-Datei hinzugefügt werden soll.</param>
        <param name="passwordBytes">Das Bytearray, das beim Verschlüsseln des Inhalts als Kennwort verwendet werden soll.</param>
        <param name="pbeParameters">Die Parameter der kennwortbasierten Verschlüsselung, die bei der Verschlüsselung des Inhalts verwendet werden sollen.</param>
        <summary>Fügen Sie der PFX-Datei Inhalt in einem Paket hinzu, das mit einem bytebasierten Kennwort aus einem Bytearray verschlüsselt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Kenn Wort Bytes werden direkt an die kdf (Key derivations Function) übergeben, die von dem durch `pbeParameters`angegeben Algorithmus verwendet werden.
Dadurch wird die Kompatibilität mit anderen Systemen ermöglicht, bei denen bei der Verarbeitung von Kenn Wörtern mit PBKDF2 eine andere Text Codierung als UTF-8 verwendet wird (Kenn Wort basierte Schlüssel abderivations Funktion 2).

 Der Inhalt von `safeContents` wird während des Aufrufes der Methode gelesen, verschlüsselt und intern als verschlüsselter Inhalt gespeichert.
Alle Änderungen am <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> oder an IT-verweisen, die nach diesem Methoden Aufrufvorgang vorgenommen werden, werden nicht in der endgültigen Ausgabe widergespiegelt.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="safeContents" />-Parameter oder der <paramref name="pbeParameters" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Parameterwert <paramref name="safeContents" /> ist bereits verschlüsselt.</exception>
        <exception cref="T:System.InvalidOperationException">Die PFX-Datei ist bereits versiegelt (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> ist <see langword="true" />).</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="pbeParameters" /> gibt an, dass <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> verwendet werden soll, wofür <see cref="T:System.Char" />-basierte Kennwörter erforderlich sind.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSafeContentsEncrypted">
      <MemberSignature Language="C#" Value="public void AddSafeContentsEncrypted (System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSafeContentsEncrypted(class System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.AddSafeContentsEncrypted(System.Security.Cryptography.Pkcs.Pkcs12SafeContents,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSafeContentsEncrypted(System::Security::Cryptography::Pkcs::Pkcs12SafeContents ^ safeContents, ReadOnlySpan&lt;System::Byte&gt; passwordBytes, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberSignature Language="F#" Value="member this.AddSafeContentsEncrypted : System.Security.Cryptography.Pkcs.Pkcs12SafeContents * ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.PbeParameters -&gt; unit" Usage="pkcs12Builder.AddSafeContentsEncrypted (safeContents, passwordBytes, pbeParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="safeContents" Type="System.Security.Cryptography.Pkcs.Pkcs12SafeContents" />
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="safeContents">Der Inhalt, der der PFX-Datei hinzugefügt werden soll.</param>
        <param name="passwordBytes">Der Bytebereich, der beim Verschlüsseln des Inhalts als Kennwort verwendet werden soll.</param>
        <param name="pbeParameters">Die Parameter der kennwortbasierten Verschlüsselung, die bei der Verschlüsselung des Inhalts verwendet werden sollen.</param>
        <summary>Fügen Sie der PFX-Datei Inhalt in einem Paket hinzu, das mit einem bytebasierten Kennwort aus einem Bereich verschlüsselt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Kenn Wort Bytes werden direkt an die kdf (Key derivations Function) übergeben, die von dem durch `pbeParameters`angegeben Algorithmus verwendet werden.
Dadurch wird die Kompatibilität mit anderen Systemen ermöglicht, bei denen bei der Verarbeitung von Kenn Wörtern mit PBKDF2 eine andere Text Codierung als UTF-8 verwendet wird (Kenn Wort basierte Schlüssel abderivations Funktion 2).

 Der Inhalt von `safeContents` wird während des Aufrufes der Methode gelesen, verschlüsselt und intern als verschlüsselter Inhalt gespeichert.
Alle Änderungen am <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> oder an IT-verweisen, die nach diesem Methoden Aufrufvorgang vorgenommen werden, werden nicht in der endgültigen Ausgabe widergespiegelt.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="safeContents" />-Parameter oder der <paramref name="pbeParameters" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Parameterwert <paramref name="safeContents" /> ist bereits verschlüsselt.</exception>
        <exception cref="T:System.InvalidOperationException">Die PFX-Datei ist bereits versiegelt (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> ist <see langword="true" />).</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="pbeParameters" /> gibt an, dass <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> verwendet werden soll, wofür <see cref="T:System.Char" />-basierte Kennwörter erforderlich sind.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSafeContentsEncrypted">
      <MemberSignature Language="C#" Value="public void AddSafeContentsEncrypted (System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSafeContentsEncrypted(class System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, valuetype System.ReadOnlySpan`1&lt;char&gt; password, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.AddSafeContentsEncrypted(System.Security.Cryptography.Pkcs.Pkcs12SafeContents,System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSafeContentsEncrypted(System::Security::Cryptography::Pkcs::Pkcs12SafeContents ^ safeContents, ReadOnlySpan&lt;char&gt; password, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberSignature Language="F#" Value="member this.AddSafeContentsEncrypted : System.Security.Cryptography.Pkcs.Pkcs12SafeContents * ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.PbeParameters -&gt; unit" Usage="pkcs12Builder.AddSafeContentsEncrypted (safeContents, password, pbeParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="safeContents" Type="System.Security.Cryptography.Pkcs.Pkcs12SafeContents" />
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="safeContents">Der Inhalt, der der PFX-Datei hinzugefügt werden soll.</param>
        <param name="password">Der Bereich, der beim Verschlüsseln des Inhalts als Kennwort verwendet werden soll.</param>
        <param name="pbeParameters">Die Parameter der kennwortbasierten Verschlüsselung, die bei der Verschlüsselung des Inhalts verwendet werden sollen.</param>
        <summary>Fügen Sie der PFX-Datei Inhalt in einem Paket hinzu, das mit einem zeichenbasierten Kennwort aus einem Bereich verschlüsselt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `pbeParameters` einen Algorithmus angibt, der PBKDF2 (Kenn Wort basierte Schlüssel abderivations Funktion 2) verwendet, wird das Kennwort über die UTF-8-Codierung in Bytes konvertiert.

 Der Inhalt von `safeContents` wird während des Aufrufes der Methode gelesen, verschlüsselt und intern als verschlüsselter Inhalt gespeichert.
Alle Änderungen am <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> oder an IT-verweisen, die nach diesem Methoden Aufrufvorgang vorgenommen werden, werden nicht in der endgültigen Ausgabe widergespiegelt.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="safeContents" />-Parameter oder der <paramref name="pbeParameters" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Parameterwert <paramref name="safeContents" /> ist bereits verschlüsselt.</exception>
        <exception cref="T:System.InvalidOperationException">Die PFX-Datei ist bereits versiegelt (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> ist <see langword="true" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSafeContentsEncrypted">
      <MemberSignature Language="C#" Value="public void AddSafeContentsEncrypted (System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, string password, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSafeContentsEncrypted(class System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents, string password, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.AddSafeContentsEncrypted(System.Security.Cryptography.Pkcs.Pkcs12SafeContents,System.String,System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSafeContentsEncrypted(System::Security::Cryptography::Pkcs::Pkcs12SafeContents ^ safeContents, System::String ^ password, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberSignature Language="F#" Value="member this.AddSafeContentsEncrypted : System.Security.Cryptography.Pkcs.Pkcs12SafeContents * string * System.Security.Cryptography.PbeParameters -&gt; unit" Usage="pkcs12Builder.AddSafeContentsEncrypted (safeContents, password, pbeParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="safeContents" Type="System.Security.Cryptography.Pkcs.Pkcs12SafeContents" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="safeContents">Der Inhalt, der der PFX-Datei hinzugefügt werden soll.</param>
        <param name="password">Die Zeichenfolge, die beim Verschlüsseln des Inhalts als Kennwort verwendet werden soll.</param>
        <param name="pbeParameters">Die Parameter der kennwortbasierten Verschlüsselung, die bei der Verschlüsselung des Inhalts verwendet werden sollen.</param>
        <summary>Fügen Sie der PFX-Datei Inhalt in einem Paket hinzu, das mit einem zeichenbasierten Kennwort aus einer Zeichenfolge verschlüsselt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `pbeParameters` einen Algorithmus angibt, der PBKDF2 (Kenn Wort basierte Schlüssel abderivations Funktion 2) verwendet, wird das Kennwort über die UTF-8-Codierung in Bytes konvertiert.

 Der Inhalt von `safeContents` wird während des Aufrufes der Methode gelesen, verschlüsselt und intern als verschlüsselter Inhalt gespeichert.
Alle Änderungen am <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> oder an IT-verweisen, die nach diesem Methoden Aufrufvorgang vorgenommen werden, werden nicht in der endgültigen Ausgabe widergespiegelt.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="safeContents" />-Parameter oder der <paramref name="pbeParameters" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Parameterwert <paramref name="safeContents" /> ist bereits verschlüsselt.</exception>
        <exception cref="T:System.InvalidOperationException">Die PFX-Datei ist bereits versiegelt (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> ist <see langword="true" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSafeContentsUnencrypted">
      <MemberSignature Language="C#" Value="public void AddSafeContentsUnencrypted (System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSafeContentsUnencrypted(class System.Security.Cryptography.Pkcs.Pkcs12SafeContents safeContents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.AddSafeContentsUnencrypted(System.Security.Cryptography.Pkcs.Pkcs12SafeContents)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddSafeContentsUnencrypted (safeContents As Pkcs12SafeContents)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSafeContentsUnencrypted(System::Security::Cryptography::Pkcs::Pkcs12SafeContents ^ safeContents);" />
      <MemberSignature Language="F#" Value="member this.AddSafeContentsUnencrypted : System.Security.Cryptography.Pkcs.Pkcs12SafeContents -&gt; unit" Usage="pkcs12Builder.AddSafeContentsUnencrypted safeContents" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="safeContents" Type="System.Security.Cryptography.Pkcs.Pkcs12SafeContents" />
      </Parameters>
      <Docs>
        <param name="safeContents">Der Inhalt, der der PFX-Datei hinzugefügt werden soll.</param>
        <summary>Fügen Sie der PFX-Datei Inhalt hinzu, ohne ihn zu verschlüsseln.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der `safeContents` Wert bereits verschlüsselt ist, wird er von dieser Methode unverändert der PFX-Datei hinzugefügt.

 Der Inhalt von `safeContents` wird während des Aufrufes dieser Methode gelesen und intern als codiertes Formular Ihres Inhalts gespeichert.
Alle Änderungen am <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeContents> <xref:System.Security.Cryptography.Pkcs.Pkcs12SafeBag> oder an IT-verweisen, die nach diesem Methoden Aufrufvorgang vorgenommen werden, werden nicht in der endgültigen Ausgabe widergespiegelt.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="safeContents" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die PFX-Datei ist bereits versiegelt (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> ist <see langword="true" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public byte[] Encode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Encode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.Encode" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Encode();" />
      <MemberSignature Language="F#" Value="member this.Encode : unit -&gt; byte[]" Usage="pkcs12Builder.Encode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Codiert den Inhalt einer versiegelten PFX-Datei und gibt ihn als Bytearray zurück.</summary>
        <returns>Ein Bytearray, das die codierte Form der PFX-Datei darstellt.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithMac" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithoutIntegrity" />
        <exception cref="T:System.InvalidOperationException">Die PFX-Datei ist nicht versiegelt (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> ist <see langword="false" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die PFX-Daten versiegelt wurden.</summary>
        <value>Ein Wert, der angibt, ob die PFX-Daten versiegelt wurden.</value>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithMac" />
        <altmember cref="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithoutIntegrity" />
      </Docs>
    </Member>
    <Member MemberName="SealWithMac">
      <MemberSignature Language="C#" Value="public void SealWithMac (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, int iterationCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SealWithMac(valuetype System.ReadOnlySpan`1&lt;char&gt; password, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, int32 iterationCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithMac(System.ReadOnlySpan{System.Char},System.Security.Cryptography.HashAlgorithmName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SealWithMac (password As ReadOnlySpan(Of Char), hashAlgorithm As HashAlgorithmName, iterationCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SealWithMac(ReadOnlySpan&lt;char&gt; password, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, int iterationCount);" />
      <MemberSignature Language="F#" Value="member this.SealWithMac : ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.HashAlgorithmName * int -&gt; unit" Usage="pkcs12Builder.SealWithMac (password, hashAlgorithm, iterationCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="iterationCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">Das Kennwort, das als Schlüssel zum Berechnen des Nachrichtenauthentifizierungscodes (Message Authentication Code, MAC) verwendet werden soll.</param>
        <param name="hashAlgorithm">Der Hashalgorithmus, der beim Berechnen des Nachrichtenauthentifizierungscodes (MAC) verwendet werden soll.</param>
        <param name="iterationCount">Die Anzahl von Iterationen für die Schlüsselableitungsfunktion (Key Derivation Function, KDF), die beim Berechnen des Nachrichtenauthentifizierungscodes (MAC) verwendet wird.</param>
        <summary>Versiegelt die PFX-Datei, um weitere Änderungen zu verhindern. Hierzu wird mit einem Kennwort aus einem Bereich auf den Inhalt ein kennwortbasierter Nachrichtenauthentifizierungscode (MAC) angewendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

 Jeder Hash Algorithmus, den diese Methode annimmt, kann von der <xref:System.Security.Cryptography.Pkcs.Pkcs12Info> -Klasse verarbeitet werden.
Einige Auswahlmöglichkeiten des Hash Algorithmus können in oder <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.%23ctor%2A> <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import%2A?displayProperty=nameWithType> in einigen Betriebssystemen zu Fehlern führen, da diese Methoden von Systembibliotheken zur Unterstützung abhängig sind.

 Der Hash Algorithmus, der für eine Neuinstallation von Windows 7 verwendet wird <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Export%2A?displayProperty=nameWithtype> , wenn der Export per als PKCS # <xref:System.Security.Cryptography.HashAlgorithmName.SHA1> 12-PFX erfolgt, ist die Iterations Anzahl 2000.
Aufgrund von Konnektivitätsproblemen mit SHA1 empfiehlt Microsoft ein Sicherheitsmodell, das auf SHA256 oder besser basiert. Einige PFX-Reader unterstützen jedoch möglicherweise SHA1.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="iterationCount" />-Parameter ist kleiner oder gleich 0.</exception>
        <exception cref="T:System.InvalidOperationException">Die PFX-Datei ist bereits versiegelt (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> ist <see langword="true" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="SealWithMac">
      <MemberSignature Language="C#" Value="public void SealWithMac (string password, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, int iterationCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SealWithMac(string password, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, int32 iterationCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithMac(System.String,System.Security.Cryptography.HashAlgorithmName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SealWithMac (password As String, hashAlgorithm As HashAlgorithmName, iterationCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SealWithMac(System::String ^ password, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, int iterationCount);" />
      <MemberSignature Language="F#" Value="member this.SealWithMac : string * System.Security.Cryptography.HashAlgorithmName * int -&gt; unit" Usage="pkcs12Builder.SealWithMac (password, hashAlgorithm, iterationCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="iterationCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">Das Kennwort, das als Schlüssel zum Berechnen des Nachrichtenauthentifizierungscodes (Message Authentication Code, MAC) verwendet werden soll.</param>
        <param name="hashAlgorithm">Der Hashalgorithmus, der beim Berechnen des Nachrichtenauthentifizierungscodes (MAC) verwendet werden soll.</param>
        <param name="iterationCount">Die Anzahl von Iterationen für die Schlüsselableitungsfunktion (Key Derivation Function, KDF), die beim Berechnen des Nachrichtenauthentifizierungscodes (MAC) verwendet wird.</param>
        <summary>Versiegelt die PFX-Datei, um weitere Änderungen zu verhindern. Hierzu wird mit einem Kennwort aus einer Zeichenfolge auf den Inhalt ein kennwortbasierter Nachrichtenauthentifizierungscode (MAC) angewendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

 Jeder Hash Algorithmus, den diese Methode annimmt, kann von der <xref:System.Security.Cryptography.Pkcs.Pkcs12Info> -Klasse verarbeitet werden.
Einige Auswahlmöglichkeiten des Hash Algorithmus können in oder <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.%23ctor%2A> <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import%2A?displayProperty=nameWithType> in einigen Betriebssystemen zu Fehlern führen, da diese Methoden von Systembibliotheken zur Unterstützung abhängig sind.

 Der Hash Algorithmus, der für eine Neuinstallation von Windows 7 verwendet wird <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Export%2A?displayProperty=nameWithType> , wenn der Export per als PKCS # <xref:System.Security.Cryptography.HashAlgorithmName.SHA1> 12-PFX erfolgt, ist die Iterations Anzahl 2000.
Aufgrund von Konnektivitätsproblemen mit SHA1 empfiehlt Microsoft ein Sicherheitsmodell, das auf SHA256 oder besser basiert. Einige PFX-Reader unterstützen jedoch möglicherweise SHA1.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="iterationCount" />-Parameter ist kleiner oder gleich 0.</exception>
        <exception cref="T:System.InvalidOperationException">Die PFX-Datei ist bereits versiegelt (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> ist <see langword="true" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="SealWithoutIntegrity">
      <MemberSignature Language="C#" Value="public void SealWithoutIntegrity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SealWithoutIntegrity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithoutIntegrity" />
      <MemberSignature Language="VB.NET" Value="Public Sub SealWithoutIntegrity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SealWithoutIntegrity();" />
      <MemberSignature Language="F#" Value="member this.SealWithoutIntegrity : unit -&gt; unit" Usage="pkcs12Builder.SealWithoutIntegrity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Versiegelt die PFX-Datei, um weitere Änderungen zu verhindern, ohne einen Manipulationsschutz anzuwenden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

 Diese Methode ist für die Kompatibilität mit der Spezifikation "PKCS # 12" vorhanden, aber ihre Verwendung wird für andere Zwecke als das Testen nicht empfohlen.
Wenn Sie ein PFX-Element entwickeln, das von den über Ladungen <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.%23ctor%2A> von <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import%2A?displayProperty=nameWithType> oder verwendet werden kann, die keinen password-Parameter <xref:System.Security.Cryptography.Pkcs.Pkcs12Builder.SealWithMac(System.String, System.Security.Cryptography.HashAlgorithmName, System.Int32)> akzeptieren, <xref:System.String.Empty?displayProperty=nameWithType> verwenden Sie die-Methode mit als Kennwort.

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die PFX-Datei ist bereits versiegelt (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> ist <see langword="true" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="TryEncode">
      <MemberSignature Language="C#" Value="public bool TryEncode (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEncode(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.Pkcs12Builder.TryEncode(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEncode (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEncode(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryEncode : Span&lt;byte&gt; *  -&gt; bool" Usage="pkcs12Builder.TryEncode (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Pkcs</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">Der Bytebereich für den Empfang der PKCS#12-PFX-Daten.</param>
        <param name="bytesWritten">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die in <paramref name="destination" /> geschrieben wurden. Dieser Parameter wird nicht initialisiert behandelt.</param>
        <summary>Versucht, den Inhalt einer versiegelten PFX-Datei in einen bereitgestellten Puffer zu codieren.</summary>
        <returns><see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um die Ausgabe zu empfangen; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Die PFX-Datei ist nicht versiegelt (<see cref="P:System.Security.Cryptography.Pkcs.Pkcs12Builder.IsSealed" /> ist <see langword="false" />).</exception>
      </Docs>
    </Member>
  </Members>
</Type>

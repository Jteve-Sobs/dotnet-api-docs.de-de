<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0ca4e3b6d190aa259f9cfd1ab311a793528c2b59" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86656350" /></Metadata><TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PageAsyncTask extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageAsyncTask" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PageAsyncTask" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageAsyncTask sealed" />
  <TypeSignature Language="F#" Value="type PageAsyncTask = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Enthält Informationen zu einer asynchronen Aufgabe, die für eine Seite registriert ist. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit ASP.NET Version 2,0 können Sie mehrere Tasks auf einer Seite registrieren und vor dem Rendern der Seite asynchron ausführen. Sie können angeben, dass ein Task asynchron ausgeführt werden soll, wenn es sich um einen langsamen Prozess handelt und Sie nicht möchten, dass andere Prozesse während der Ausführung gebunden werden. Die asynchronen Aufgaben können parallel oder sequenziell ausgeführt werden.  
  
 Ein- <xref:System.Web.UI.PageAsyncTask> Objekt muss über die-Methode auf der Seite registriert werden <xref:System.Web.UI.Page.RegisterAsyncTask%2A> . Die Seite selbst muss nicht asynchron verarbeitet werden, um asynchrone Aufgaben auszuführen. Sie können das- `Async` Attribut entweder auf `true` (wie im folgenden Codebeispiel gezeigt) oder `false` auf der Page-Direktive festlegen, und die asynchronen Aufgaben werden weiterhin asynchron verarbeitet:  
  
 `<%@ Page Async="true" %>`  
  
 Wenn das- `Async` Attribut auf festgelegt ist `false` , wird der Thread, der die Seite ausführt, blockiert, bis alle asynchronen Aufgaben vollständig sind.  
  
 Alle asynchronen Tasks, die vor dem Ereignis registriert werden, werden <xref:System.Web.UI.Page.PreRenderComplete> automatisch von der Seite ausgeführt, wenn Sie noch nicht ausgeführt wurden. Die asynchronen Aufgaben, die nach dem <xref:System.Web.UI.Page.PreRenderComplete> Ereignis registriert werden, müssen explizit über die-Methode ausgeführt werden <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> . Die- <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> Methode kann auch zum Starten von Aufgaben vor dem-Ereignis verwendet werden <xref:System.Web.UI.Page.PreRenderComplete> . Die- <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> Methode führt alle registrierten asynchronen Tasks auf der Seite aus, die noch nicht ausgeführt wurden.  
  
 Standardmäßig wird für eine asynchrone Aufgabe ein Timeout durchgeführt, wenn Sie nicht innerhalb von 45 Sekunden abgeschlossen wurde. Sie können einen anderen Timeout Wert in der Web.config-Datei oder der Page-Direktive angeben. Der- `<pages>` Abschnitt der Web.config Datei enthält ein- `asyncTimeout` Attribut, wie unten gezeigt.  
  
 `<system.web>`  
  
 `<pages asyncTimeout="30">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 Die Page-Direktive enthält ein- `AsyncTimeout` Attribut.  
  
 `<%@ Page AsyncTimeout="30" %>`  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden drei asynchrone Aufgaben für eine Seite registriert und parallel ausgeführt. Jede Aufgabe ruft eine Methode auf, die lediglich bewirkt, dass der Thread 5 Sekunden in den Standbymodus wechselt.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageAsyncTask" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of CancellationToken, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler">Ein Ereignishandler.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageAsyncTask" />-Klasse unter Verwendung eines Ereignishandlers, der ermöglicht, dass die Aufgabe abgebrochen werden kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor umschließt einen Delegaten <xref:System.Web.TaskEventHandler> , sodass das- <xref:System.Web.UI.PageAsyncTask> Objekt asynchronen Code (basierend auf- <xref:System.Threading.Tasks.Task> Objekten) mit dem vorhandenen ASP.net Web Forms asynchronen Pages-Funktion integrieren kann. ASP.NET signalisiert dem- <xref:System.Threading.CancellationToken> Objekt, das an einen Delegaten übermittelt wird, <xref:System.Web.TaskEventHandler> für den Abbruch basierend auf dem Attribut, das <xref:System.Web.UI.Page.AsyncTimeout%2A> in der- `@ Page` Direktive der Webseite festgelegt wird. Wenn der <xref:System.Web.UI.Page.AsyncTimeout%2A> Wert erreicht ist, wird das <xref:System.Threading.CancellationToken> Objekt signalisiert. Der- `CancellationToken` Parameter muss an alle asynchronen APIs übergeben werden, die von der Implementierung der- <xref:System.Web.TaskEventHandler> Klasse aufgerufen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler">Ein Ereignishandler.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageAsyncTask" />-Klasse unter Verwendung eines Ereignishandlers, der ermöglicht, dass die Aufgabe verarbeitet werden kann.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Der Handler, der zu Beginn einer asynchronen Aufgabe aufgerufen werden soll.</param>
        <param name="endHandler">Der Handler, der aufgerufen werden soll, wenn die Aufgabe im Timeoutzeitraum erfolgreich abgeschlossen wird.</param>
        <param name="timeoutHandler">Der Handler, der aufgerufen werden soll, wenn die Aufgabe im Timeoutzeitraum nicht erfolgreich abgeschlossen wird.</param>
        <param name="state">Das Objekt, das den Zustand der Aufgabe darstellt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageAsyncTask" />-Klasse, die den Standardwert zum parallelen Ausführen verwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung des Konstruktors legt die- <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> Eigenschaft auf fest, `false` sodass die asynchrone Aufgabe nicht parallel mit anderen Tasks auf der Seite verarbeitet wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="beginHandler" />-Parameter oder der <paramref name="endHandler" />-Parameter ist nicht angegeben.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object, executeInParallel As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state, bool executeInParallel);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj * bool -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state, executeInParallel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="executeInParallel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Der Handler, der zu Beginn einer asynchronen Aufgabe aufgerufen werden soll.</param>
        <param name="endHandler">Der Handler, der aufgerufen werden soll, wenn die Aufgabe im Timeoutzeitraum erfolgreich abgeschlossen wird.</param>
        <param name="timeoutHandler">Der Handler, der aufgerufen werden soll, wenn die Aufgabe im Timeoutzeitraum nicht erfolgreich abgeschlossen wird.</param>
        <param name="state">Das Objekt, das den Zustand der Aufgabe darstellt.</param>
        <param name="executeInParallel">Der Wert, der angibt, ob die Aufgabe parallel mit anderen Aufgaben verarbeitet werden kann.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageAsyncTask" />-Klasse, die den angegebenen Wert zum parallelen Ausführen verwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung des Konstruktors ermöglicht Ihnen, festzulegen, ob die asynchrone Aufgabe parallel mit anderen Aufgaben auf der Seite verarbeitet wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden drei asynchrone Aufgaben erstellt, die parallel zueinander verarbeitet werden. Dieses Beispiel ist Teil eines größeren Beispiels in der <xref:System.Web.UI.PageAsyncTask> Übersicht über die-Klasse.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="beginHandler" />-Parameter oder der <paramref name="endHandler" />-Parameter ist nicht angegeben.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginHandler">
      <MemberSignature Language="C#" Value="public System.Web.BeginEventHandler BeginHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.BeginEventHandler BeginHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginHandler As BeginEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::BeginEventHandler ^ BeginHandler { System::Web::BeginEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BeginHandler : System.Web.BeginEventHandler" Usage="System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.BeginEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Methode ab, die zu Beginn einer asynchronen Aufgabe aufgerufen werden soll.</summary>
        <value>Ein <see cref="T:System.Web.BeginEventHandler" />-Delegat, der die Methode darstellt, die zu Beginn der asynchronen Aufgabe aufgerufen werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Delegat <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> wird im Konstruktor festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden drei asynchrone Aufgaben für eine Seite registriert und parallel ausgeführt. Jede Aufgabe ruft eine Methode auf, die lediglich bewirkt, dass der Thread 5 Sekunden in den Standbymodus wechselt. <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A>Für jede Aufgabe wird ein Delegat angegeben.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler EndHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler EndHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ EndHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Methode ab, die aufgerufen werden soll, wenn die Aufgabe innerhalb des Timeoutzeitraums erfolgreich abgeschlossen wird.</summary>
        <value>Ein <see cref="T:System.Web.EndEventHandler" />-Delegat, der die Methode darstellt, die aufgerufen werden soll, wenn die Aufgabe innerhalb des Timeoutzeitraums erfolgreich abgeschlossen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Delegat <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> wird im Konstruktor festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden drei asynchrone Aufgaben für eine Seite registriert und parallel ausgeführt. Jede Aufgabe ruft eine Methode auf, die lediglich bewirkt, dass der Thread 5 Sekunden in den Standbymodus wechselt. Ein-Delegat <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> wird für jede Aufgabe angegeben.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInParallel">
      <MemberSignature Language="C#" Value="public bool ExecuteInParallel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteInParallel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecuteInParallel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExecuteInParallel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteInParallel : bool" Usage="System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Aufgabe parallel mit anderen Aufgaben verarbeitet werden kann.</summary>
        <value><see langword="true" />, wenn die Aufgabe parallel mit anderen Aufgaben verarbeitet werden soll, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> Eigenschaft wird im-Konstruktor festgelegt. Wenn mehrere Tasks auf einer Seite registriert sind und die- <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> Eigenschaft auf festgelegt ist `true` , werden diese Aufgaben gleichzeitig verarbeitet. Wenn die- <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> Eigenschaft jedoch auf festgelegt ist `false` , werden diese Aufgaben sequenziell verarbeitet. Wenn eine Seite z. b. zwei asynchrone Aufgaben enthält, die jeweils 5 Sekunden gedauert haben und <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> auf festgelegt ist `true` , werden beide Aufgaben in 5 Sekunden abgeschlossen. Wenn <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> `false` für diese beiden Aufgaben auf festgelegt ist, wird die erste Aufgabe in 5 Sekunden abgeschlossen, und die zweite Aufgabe wird 5 Sekunden nach dem Abschluss der ersten Aufgabe abgeschlossen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden drei asynchrone Aufgaben definiert, die jeweils parallel verarbeitet werden. Dieses Beispiel ist Teil eines größeren Beispiels in der <xref:System.Web.UI.PageAsyncTask> Übersicht über die-Klasse.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : obj" Usage="System.Web.UI.PageAsyncTask.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das den Zustand der Aufgabe darstellt.</summary>
        <value>Ein <see cref="T:System.Object" />, das den Zustand der Aufgabe darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.PageAsyncTask.State%2A> -Eigenschaft wird im Konstruktor festgelegt und kann während der Ausführung der asynchronen Aufgabe nicht geändert werden. Sie können asynchrone Aufgaben in einer Seite unterscheiden, indem Sie den entsprechenden Eigenschaften eindeutige Zeichen folgen Werte zuweisen <xref:System.Web.UI.PageAsyncTask.State%2A> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden drei asynchrone Aufgaben erstellt und eindeutige Werte für Ihre <xref:System.Web.UI.PageAsyncTask.State%2A> Eigenschaften erteilt. Dieses Beispiel ist Teil eines größeren Beispiels in der <xref:System.Web.UI.PageAsyncTask> Übersicht über die-Klasse.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler TimeoutHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler TimeoutHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ TimeoutHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Methode ab, die aufgerufen werden soll, wenn die Aufgabe innerhalb des Timeoutzeitraums nicht erfolgreich abgeschlossen wird.</summary>
        <value>Ein <see cref="T:System.Web.EndEventHandler" />-Delegat, der die Methode darstellt, die aufgerufen werden soll, wenn die Aufgabe innerhalb des Timeoutzeitraums nicht erfolgreich abgeschlossen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Delegat <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> wird im Konstruktor festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden drei asynchrone Aufgaben für eine Seite registriert und parallel ausgeführt. Jede Aufgabe ruft eine Methode auf, die lediglich bewirkt, dass der Thread 5 Sekunden in den Standbymodus wechselt. <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A>Für jede Aufgabe wird ein Delegat angegeben.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

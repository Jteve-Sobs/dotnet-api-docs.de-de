<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d1079f4cbaf4f9bde92409a2b96155ff21afa4a7" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39813315" /></Metadata><TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PageAsyncTask extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageAsyncTask" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PageAsyncTask" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageAsyncTask sealed" />
  <TypeSignature Language="F#" Value="type PageAsyncTask = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Enthält Informationen zu einer asynchronen Aufgabe, die für eine Seite registriert ist. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Version von ASP.NET 2.0 können Sie mehrere Aufgaben zu einer Seite registrieren, und sie vor dem Rendern der Seite asynchron ausführen. Sie können angeben, dass eine Aufgabe asynchron ausgeführt werden, wenn es einen langsamen Prozess ist und nicht möchten, dass andere Prozesse um gebunden werden, solange sie ausgeführt wird. Die asynchronen Aufgaben können parallel oder sequenziell ausgeführt werden.  
  
 Ein <xref:System.Web.UI.PageAsyncTask> Objekt muss registriert sein, auf der Seite über die <xref:System.Web.UI.Page.RegisterAsyncTask%2A> Methode. Die Seite selbst muss nicht asynchron verarbeitet werden, um asynchrone Aufgaben auszuführen. Sie können festlegen, die `Async` Attribut entweder `true` (wie im folgenden Codebeispiel gezeigt) oder `false` auf der Seite Richtlinie und die asynchronen Aufgaben werden immer noch asynchron verarbeitet werden:  
  
 `<%@ Page Async="true" %>`  
  
 Wenn die `Async` -Attributsatz auf `false`, der Thread, der die Seite ausgeführt wird wird blockiert, bis alle asynchronen Vorgänge abgeschlossen sind.  
  
 Asynchrone Aufgaben registriert werden, bevor die <xref:System.Web.UI.Page.PreRenderComplete> Ereignis wird automatisch von der Seite ausgeführt werden, wenn sie nicht bereits ausgeführt wurde. Registrierten asynchronen Aufgaben nach der <xref:System.Web.UI.Page.PreRenderComplete> Ereignis muss über explizit ausgeführt werden, die <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> Methode. Die <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> Methode kann auch verwendet werden, um die Aufgaben vor dem Starten der <xref:System.Web.UI.Page.PreRenderComplete> Ereignis. Die <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> Methode führt alle registrierten asynchronen Aufgaben auf der Seite, die nicht ausgeführt wurden.  
  
 Standardmäßig eine asynchrone Aufgabe tritt ein Timeout, wenn sie nicht innerhalb von 45 Sekunden abgeschlossen wurde. Sie können einen anderen Timeoutwert in der Datei "Web.config" oder der Page-Direktive angeben. Die `<pages>` -Abschnitt der Datei "Web.config" enthält ein `asyncTimeout` Attribut, wie unten dargestellt.  
  
 `<system.web>`  
  
 `<pages asyncTimeout="30">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 Die Page-Direktive enthält ein `AsyncTimeout` Attribut.  
  
 `<%@ Page AsyncTimeout="30" %>`  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird drei asynchrone Aufgaben zu einer Seite registriert und parallel ausgeführt. Eine Methode, die lediglich den Thread für 5 Sekunden in den Ruhezustand versetzt, ruft jede Aufgabe.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageAsyncTask" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of CancellationToken, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Ein Ereignishandler.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageAsyncTask" />-Klasse unter Verwendung eines Ereignishandlers, der ermöglicht, dass die Aufgabe abgebrochen werden kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor dient als Wrapper für eine <xref:System.Web.TaskEventHandler> delegieren, damit die <xref:System.Web.UI.PageAsyncTask> Objekt kann asynchronen Code integrieren (basierend auf <xref:System.Threading.Tasks.Task> Objekte) mit bestehenden Funktion für ASP.NET Web Forms asynchrone Seiten. ASP.NET signalisiert der <xref:System.Threading.CancellationToken> -Objekt, das an eine <xref:System.Web.TaskEventHandler> delegieren für den Abbruch, die auf der Grundlage der <xref:System.Web.UI.Page.AsyncTimeout%2A> Attribut festgelegt werden, der `@ Page` -Direktive der Webseite. Wenn die <xref:System.Web.UI.Page.AsyncTimeout%2A> Erreichen des Werts, der <xref:System.Threading.CancellationToken> Objekts signalisiert wird. Die `CancellationToken` Parameter muss übergeben werden, um alle asynchronen APIs, die von der Implementierung von aufgerufen werden die <xref:System.Web.TaskEventHandler> Klasse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Ein Ereignishandler.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageAsyncTask" />-Klasse unter Verwendung eines Ereignishandlers, der ermöglicht, dass die Aufgabe verarbeitet werden kann.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Der Handler, der zu Beginn einer asynchronen Aufgabe aufgerufen werden soll.</param>
        <param name="endHandler">Der Handler, der aufgerufen werden soll, wenn die Aufgabe im Timeoutzeitraum erfolgreich abgeschlossen wird.</param>
        <param name="timeoutHandler">Der Handler, der aufgerufen werden soll, wenn die Aufgabe im Timeoutzeitraum nicht erfolgreich abgeschlossen wird.</param>
        <param name="state">Das Objekt, das den Zustand der Aufgabe darstellt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageAsyncTask" />-Klasse, die den Standardwert zum parallelen Ausführen verwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung des Konstruktors wird die <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> Eigenschaft `false` , sodass die asynchrone Aufgabe parallel mit anderen Aufgaben auf der Seite nicht verarbeitet wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="beginHandler" />-Parameter oder der <paramref name="endHandler" />-Parameter ist nicht angegeben.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object, executeInParallel As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state, bool executeInParallel);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj * bool -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state, executeInParallel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="executeInParallel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Der Handler, der zu Beginn einer asynchronen Aufgabe aufgerufen werden soll.</param>
        <param name="endHandler">Der Handler, der aufgerufen werden soll, wenn die Aufgabe im Timeoutzeitraum erfolgreich abgeschlossen wird.</param>
        <param name="timeoutHandler">Der Handler, der aufgerufen werden soll, wenn die Aufgabe im Timeoutzeitraum nicht erfolgreich abgeschlossen wird.</param>
        <param name="state">Das Objekt, das den Zustand der Aufgabe darstellt.</param>
        <param name="executeInParallel">Der Wert, der angibt, ob die Aufgabe parallel mit anderen Aufgaben verarbeitet werden kann.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageAsyncTask" />-Klasse, die den angegebenen Wert zum parallelen Ausführen verwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung des Konstruktors können Sie festlegen, ob die asynchrone Aufgabe parallel mit anderen Aufgaben auf der Seite verarbeitet werden.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt drei asynchrone Aufgaben, die verarbeitet werden parallel zueinander. In diesem Beispiel ist Teil eines umfangreicheren Beispiels finden Sie in der <xref:System.Web.UI.PageAsyncTask> Übersicht über die Klasse.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="beginHandler" />-Parameter oder der <paramref name="endHandler" />-Parameter ist nicht angegeben.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginHandler">
      <MemberSignature Language="C#" Value="public System.Web.BeginEventHandler BeginHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.BeginEventHandler BeginHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginHandler As BeginEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::BeginEventHandler ^ BeginHandler { System::Web::BeginEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BeginHandler : System.Web.BeginEventHandler" Usage="System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.BeginEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Methode ab, die zu Beginn einer asynchronen Aufgabe aufgerufen werden soll.</summary>
        <value>Ein <see cref="T:System.Web.BeginEventHandler" />-Delegat, der die Methode darstellt, die zu Beginn der asynchronen Aufgabe aufgerufen werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> Delegaten im Konstruktor festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird drei asynchrone Aufgaben zu einer Seite registriert und parallel ausgeführt. Eine Methode, die lediglich den Thread für 5 Sekunden in den Ruhezustand versetzt, ruft jede Aufgabe. Ein <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> Delegaten für die einzelnen Aufgaben angegeben ist.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler EndHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler EndHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ EndHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Methode ab, die aufgerufen werden soll, wenn die Aufgabe innerhalb des Timeoutzeitraums erfolgreich abgeschlossen wird.</summary>
        <value>Ein <see cref="T:System.Web.EndEventHandler" />-Delegat, der die Methode darstellt, die aufgerufen werden soll, wenn die Aufgabe innerhalb des Timeoutzeitraums erfolgreich abgeschlossen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> Delegaten im Konstruktor festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird drei asynchrone Aufgaben zu einer Seite registriert und parallel ausgeführt. Eine Methode, die lediglich den Thread für 5 Sekunden in den Ruhezustand versetzt, ruft jede Aufgabe. Ein <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> Delegaten für die einzelnen Aufgaben angegeben ist.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInParallel">
      <MemberSignature Language="C#" Value="public bool ExecuteInParallel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteInParallel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecuteInParallel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExecuteInParallel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteInParallel : bool" Usage="System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Aufgabe parallel mit anderen Aufgaben verarbeitet werden kann.</summary>
        <value><see langword="true" />, wenn die Aufgabe parallel mit anderen Aufgaben verarbeitet werden soll, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> Eigenschaft im Konstruktor festgelegt ist. Wenn mehrere Aufgaben auf einer Seite registriert sind und die <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> -Eigenschaftensatz auf `true`, und klicken Sie dann diese Aufgaben gleichzeitig verarbeitet werden. Aber wenn die <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> -Eigenschaftensatz auf `false`, und klicken Sie dann diese Aufgaben nacheinander verarbeitet werden. Z. B. wenn eine Seite zwei asynchrone Aufgaben, die jeweils 5 Sekunden zum Abschließen und <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> nastaven NA hodnotu `true`, beide Aufgaben werden in 5 Sekunden abgeschlossen. Wenn <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> nastaven NA hodnotu `false` für diese gleichen zwei Aufgaben, und klicken Sie dann die erste Aufgabe wird in 5 Sekunden abgeschlossen und die zweite Aufgabe 5 Sekunden nach dem Abschluss der ersten Aufgabe abgeschlossen.  
  
   
  
## Examples  
 Das folgende Codebeispiel definiert drei asynchrone Tasks, die jeder Gruppe parallel verarbeitet werden. In diesem Beispiel ist Teil eines umfangreicheren Beispiels finden Sie in der <xref:System.Web.UI.PageAsyncTask> Übersicht über die Klasse.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : obj" Usage="System.Web.UI.PageAsyncTask.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das den Zustand der Aufgabe darstellt.</summary>
        <value>Ein <see cref="T:System.Object" />, das den Zustand der Aufgabe darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.PageAsyncTask.State%2A> Eigenschaft im Konstruktor festgelegt ist, und kann nicht geändert werden, während der Ausführung der asynchronen Aufgabe. Sie können die asynchrone Aufgaben auf einer Seite unterscheiden, eindeutige Zeichenfolgenwerte zuweisen der jeweiligen <xref:System.Web.UI.PageAsyncTask.State%2A> Eigenschaften.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt drei asynchrone Aufgaben und erhalten sie eine eindeutige Werte für ihre <xref:System.Web.UI.PageAsyncTask.State%2A> Eigenschaften. In diesem Beispiel ist Teil eines umfangreicheren Beispiels finden Sie in der <xref:System.Web.UI.PageAsyncTask> Übersicht über die Klasse.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler TimeoutHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler TimeoutHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ TimeoutHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Methode ab, die aufgerufen werden soll, wenn die Aufgabe innerhalb des Timeoutzeitraums nicht erfolgreich abgeschlossen wird.</summary>
        <value>Ein <see cref="T:System.Web.EndEventHandler" />-Delegat, der die Methode darstellt, die aufgerufen werden soll, wenn die Aufgabe innerhalb des Timeoutzeitraums nicht erfolgreich abgeschlossen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> Delegaten im Konstruktor festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird drei asynchrone Aufgaben zu einer Seite registriert und parallel ausgeführt. Eine Methode, die lediglich den Thread für 5 Sekunden in den Ruhezustand versetzt, ruft jede Aufgabe. Ein <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> Delegaten für die einzelnen Aufgaben angegeben ist.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
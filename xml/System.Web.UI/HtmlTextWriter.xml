<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7da547f5d372a4396dad80320a068d3c370e4d5a" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73398384" /></Metadata><TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlTextWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlTextWriter : System::IO::TextWriter" />
  <TypeSignature Language="F#" Value="type HtmlTextWriter = class&#xA;    inherit TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Schreibt Markupzeichen und Text in den Ausgabestream eines ASP.NET-Serversteuerelements. Diese Klasse stellt Formatierungsfunktionen bereit, die von ASP.NET-Serversteuerelementen beim Rendern von Markup auf Clients verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter>-Klasse wird verwendet, um HTML 4,0 in Desktop Browsern zu Rendering. Der <xref:System.Web.UI.HtmlTextWriter> ist auch die Basisklasse für alle Markup Schreiber im <xref:System.Web.UI>-Namespace, einschließlich der Klassen <xref:System.Web.UI.ChtmlTextWriter>, <xref:System.Web.UI.Html32TextWriter>und <xref:System.Web.UI.XhtmlTextWriter>. Diese Klassen werden verwendet, um die Elemente, Attribute und Stil-und Layoutinformationen für verschiedene Markup Typen zu schreiben. Außerdem werden diese Klassen von den Seiten-und Steuerelement Adapter Klassen verwendet, die mit den einzelnen Markup Sprachen verknüpft sind.  
  
 In den meisten Fällen verwendet ASP.NET automatisch den entsprechenden Writer für das anfordernde Gerät. Wenn Sie jedoch einen benutzerdefinierten TextWriter erstellen oder einen bestimmten Writer zum Rendering einer Seite für ein bestimmtes Gerät angeben möchten, müssen Sie den Writer der Seite im `controlAdapters` Abschnitt der Datei "Application. Browser" zuordnen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.Control.Render%2A>-Methode eines benutzerdefinierten Steuer Elements überschrieben wird, das von der <xref:System.Web.UI.Control>-Klasse abgeleitet wird. Das Codebeispiel veranschaulicht, wie verschiedene <xref:System.Web.UI.HtmlTextWriter> Methoden, Eigenschaften und Felder verwendet werden.  
  
 [!code-csharp[MarkupTextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.HtmlTextWriter" />-Klasse.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Die <see cref="T:System.IO.TextWriter" />-Instanz, die den Inhalt des Markups rendert.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.HtmlTextWriter" />-Klasse, die eine Standard-Tabstoppzeichenfolge verwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Überladung des <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> Konstruktors verwendet die <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> Konstante, wenn ein Einzug einer Zeile erforderlich ist. Sie ruft die <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29>-Überladung auf, um die neue Instanz zu initialisieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie der <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29>-Konstruktor verwendet wird, um ein benutzerdefiniertes <xref:System.Web.UI.HtmlTextWriter> Objekt namens `StyledLabelHtmlWriter.` zu erstellen, wenn die `MyPage` benutzerdefinierte Klasse, die von der <xref:System.Web.UI.Page>-Klasse abgeleitet ist, von einem Client Browser angefordert wird. verwendet die `StyledLabelHtmlWriter`-Klasse, um den Inhalt in den Ausgabestream zu rendern.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, der den Inhalt des Markups rendert.</param>
        <param name="tabString">Die Zeichenfolge, die für das Rendern eines Zeileneinzugs verwendet wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.HtmlTextWriter" />-Klasse unter Verwendung des angegebenen Tabstoppzeichens.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Überladung des <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> Konstruktors verwendet `tabString`, wenn ein Einzug einer Zeile erforderlich ist. Er ruft den <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=nameWithType> Basiskonstruktor auf, um die neue Instanz zu initialisieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie der <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29>-Konstruktor verwendet wird, um ein benutzerdefiniertes <xref:System.Web.UI.HtmlTextWriter> Objekt namens `StyledLabelHtmlWriter.` zu erstellen, wenn die `MyPage` benutzerdefinierte Klasse, die von der <xref:System.Web.UI.Page>-Klasse abgeleitet ist, von einem Client Browser angefordert wird. verwendet die `StyledLabelHtmlWriter`-Klasse, um den Inhalt in den Ausgabestream zu rendern.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, das festgelegte Markupattribut und den festgelegten Markupwert hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string -&gt; unit&#xA;override this.AddAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Attributs, das hinzugefügt wird.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen werden soll.</param>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, das festgelegte Markupattribut und den festgelegten Markupwert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29>-Methode, wenn das Attribut nicht einer der <xref:System.Web.UI.HtmlTextWriterAttribute> Werte ist oder wenn das Attribut erst zur Laufzeit bekannt ist.  
  
 Für eine Instanz eines beliebigen Markup Elements behält die <xref:System.Web.UI.HtmlTextWriter>-Klasse eine Liste der Attribute für dieses Element bei. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode aufgerufen wird, werden alle von der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode hinzugefügten Attribute am öffnenden Tag des Elements gerendert. Die Liste der Attribute wird dann aus dem <xref:System.Web.UI.HtmlTextWriter> Objekt gelöscht.  
  
 Das Codierungs Muster zum Rendern von Markup Elementen lautet wie folgt:  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode, um dem-Element Attribute hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie bei Bedarf andere Methoden, um den Inhalt zwischen dem öffnenden und dem schließenden Tag des Elements zu erzeugen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode aufgerufen wird, bevor die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode aufgerufen wird. Der Code ruft zwei unterschiedliche über Ladungen von <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> und zwei unterschiedliche über Ladungen von <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> auf, bevor die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode aufgerufen wird, um ein `<span>` Element in den Ausgabestream zu rendern. Die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29>-Methode wird verwendet, um das benutzerdefinierte Attribut mit dem Namen `CustomAttribute` und den benutzerdefinierten Wert `CustomAttributeValue` für das `<span>` Element zu definieren, das dieser Code rendert.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, das das Markupattribut darstellt, das dem Ausgabestream hinzugefügt werden soll.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen werden soll.</param>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, das Markupattribut und den Attributwert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29>-Methode, um ein Standardmäßiges Markup Attribut zu erzeugen.  
  
 Für eine Instanz eines beliebigen Markup Elements behält die <xref:System.Web.UI.HtmlTextWriter>-Klasse eine Liste der Attribute für dieses Element bei. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode aufgerufen wird, werden alle von der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode hinzugefügten Attribute am öffnenden Tag des Elements gerendert. Die Liste der Attribute wird dann aus der <xref:System.Web.UI.HtmlTextWriter>gelöscht.  
  
 Das Codierungs Muster zum Rendern von Markup Elementen lautet wie folgt:  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode, um dem-Element Attribute hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie bei Bedarf andere Methoden, um den Inhalt zwischen dem öffnenden und dem schließenden Tag des Elements zu erzeugen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Überladung der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29>-Methode verwendet wird, um einem Markup Element ein `Onclick`-Attribut hinzuzufügen und dessen Wert auf den folgenden ECMAScript-Code festzulegen:  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String, fEndode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, bool fEndode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * bool -&gt; unit&#xA;override this.AddAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, fEndode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Attributs, das hinzugefügt wird.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen werden soll.</param>
        <param name="fEndode"><see langword="true" />, wenn das Attribut und sein Wert codiert werden sollen, andernfalls <see langword="false" />.</param>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, das festgelegte Markupattribut und den festgelegten Markupwert mit einer optionalen Codierung hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>-Methode, wenn das Attribut nicht einem der <xref:System.Web.UI.HtmlTextWriterAttribute> Werte entspricht oder wenn das Attribut erst bekannt ist, wenn die Laufzeit und die Codierung benötigt werden.  
  
 Für eine Instanz eines beliebigen Markup Elements behält die <xref:System.Web.UI.HtmlTextWriter>-Klasse eine Liste der Attribute für dieses Element bei. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode aufgerufen wird, werden alle von der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode hinzugefügten Attribute am öffnenden Tag des Elements gerendert. Die Liste der Attribute wird dann aus dem <xref:System.Web.UI.HtmlTextWriter> Objekt gelöscht.  
  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>-Methode, bei der `fEncode` auf `true`festgelegt ist, wenn das Attribut möglicherweise ein Anführungszeichen ("), ein kleiner-als-Zeichen (<) oder ein kaufmännisches und-Zeichen (&) enthalten kann. Der Methoden Befehl codiert das Attribut, um die Anforderungen des anfordernden Geräts zu erfüllen. Sie können `fEncode` auf `false`festlegen, wenn Sie wissen, dass keines dieser Zeichen generiert wird, oder wenn Sie wissen, dass das Attribut bereits codiert ist.  
 
Wenn der Attributtyp `Style`ist, wird der Wert auch dann nicht codiert, wenn `fEndode` `true`ist. Stellen Sie sicher, dass der Stilwert CSS-kompatibel ist und keinen bösartigen Code enthält.
  
 Das Codierungs Muster zum Rendern von Markup Elementen lautet wie folgt:  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode, um dem-Element Attribute hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie bei Bedarf andere Methoden, um den Inhalt zwischen dem öffnenden und dem schließenden Tag des Elements zu erzeugen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>-Methode verwendet wird, um sicherzustellen, dass ein benutzerdefiniertes Attribut mit dem Namen `myattribute`und sein Wert für ein `<img>` Element nicht codiert werden.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddAttribute (name As String, value As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit&#xA;override this.AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Attributs, das hinzugefügt wird.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen werden soll.</param>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, das das Attribut darstellt.</param>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />-Objekt erstellt und anschließend die <see cref="T:System.Web.UI.HtmlTextWriter" />-Methode aufruft, das festgelegte Markupattribut und den festgelegten Markupwert sowie einen <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Enumerationswert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29>-Methode nur, wenn Sie von der <xref:System.Web.UI.HtmlTextWriter>-Klasse erbt. Sie ermöglicht es Ihnen, neue `name` und `key` Paare für Attribute zu erstellen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, das das Markupattribut darstellt, das dem Ausgabestream hinzugefügt werden soll.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen werden soll.</param>
        <param name="fEncode"><see langword="true" />, wenn das Attribut und sein Wert codiert werden sollen, andernfalls <see langword="false" />.</param>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, das Markupattribut und den Attributwert mit einer optionalen Codierung hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29>-Methode, um ein Standardmäßiges Markup Attribut mit optionaler Codierung zu erzeugen.  
  
 Für eine Instanz eines beliebigen Markup Elements behält die <xref:System.Web.UI.HtmlTextWriter>-Klasse eine Liste der Attribute für dieses Element bei. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode aufgerufen wird, werden alle von der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> hinzugefügten Attribute am öffnenden Tag des Elements gerendert. Die Liste der Attribute wird dann aus dem <xref:System.Web.UI.HtmlTextWriter> Objekt gelöscht.  
  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29>-Methode, bei der `fEncode` auf `true`festgelegt ist, wenn das Attribut möglicherweise ein Anführungszeichen ("), ein kleiner-als-Zeichen (<) oder ein kaufmännisches und-Zeichen (&) enthalten kann. Der Methoden Befehl codiert das Attribut, um die Anforderungen des anfordernden Geräts zu erfüllen. Sie können `fEncode` auf `false`festlegen, wenn Sie wissen, dass keines dieser Zeichen generiert wird, oder wenn Sie wissen, dass das Attribut bereits codiert ist.  
 
 Wenn der Attributtyp `Style`ist, wird der Wert auch dann nicht codiert, wenn `fEncode` `true`ist. Stellen Sie sicher, dass der Stilwert CSS-kompatibel ist und keinen bösartigen Code enthält.

  
 Das Codierungs Muster zum Rendern von Markup Elementen lautet wie folgt:  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode, um dem-Element Attribute hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie bei Bedarf andere Methoden, um den Inhalt zwischen dem öffnenden und dem schließenden Tag des Elements zu erzeugen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mit der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29>-Methode sichergestellt wird, dass der Zeichen folgen Wert, der einem `Alt`-Attribut für ein `<img>`-Element zugewiesen ist, für das anfordernde Gerät codiert wird.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, ein Markupformatattribut hinzu.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string -&gt; unit&#xA;override this.AddStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge, die das hinzuzufügende Formatattribut enthält.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen wird.</param>
        <summary>Fügt dem Markupstarttag, das durch einen nachfolgenden Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode erstellt wird, das angegebene Markupformatattribut und den Attributwert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29>-Methode, wenn der Stil kein Member der <xref:System.Web.UI.HtmlTextWriterStyle>-Enumeration ist oder bis zur Laufzeit bekannt ist.  
  
 Die <xref:System.Web.UI.HtmlTextWriter>-Klasse verwaltet eine Liste von Stilen für die Markup Elemente, die Sie rendert. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode aufgerufen wird, werden alle von der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>-Methode hinzugefügten Stile in das öffnende Tag des Elements gerendert. Die Liste der Stile wird dann gelöscht.  
  
 Das Codierungs Muster zum Rendern von Markup Elementen lautet wie folgt:  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>-Methode, um dem-Element beliebige Stil Attribute hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie bei Bedarf andere Methoden, um den Inhalt zwischen dem öffnenden und dem schließenden Tag des Elements zu erzeugen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29>-Methode verwendet wird, um `font-size` und `color` Format Attribute für ein `<p>` Element zu Rendering. In diesem Codebeispiel wird die <xref:System.Web.UI.HtmlTextWriter>-Klasse verwendet, um den Inhalt des-Steuer Elements zu erzeugen.  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (key As HtmlTextWriterStyle, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::Web::UI::HtmlTextWriterStyle key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit&#xA;override this.AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, der das Formatattribut darstellt, das im Ausgabestream hinzugefügt wird.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen wird.</param>
        <summary>Fügt dem Start-Markuptag, das durch einen nachfolgenden Aufruf der <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Methode erstellt wird, das im <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Wert angegebene Markupformatattribut und den Attributwert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29>-Methode, wenn der Stil ein Member der <xref:System.Web.UI.HtmlTextWriterStyle>-Enumeration ist und vor der Laufzeit bekannt ist.  
  
 Die <xref:System.Web.UI.HtmlTextWriter>-Klasse verwaltet eine Liste von Stilen für die Markup Elemente, die Sie rendert. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode aufgerufen wird, werden alle von der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>-Methode hinzugefügten Stile in das öffnende Tag des Elements gerendert. Die Liste der Stile wird dann gelöscht.  
  
 Das Codierungs Muster zum Rendern von Markup Elementen lautet wie folgt:  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>-Methode, um dem-Element beliebige Stil Attribute hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie bei Bedarf andere Methoden, um den Inhalt zwischen dem öffnenden und dem schließenden Tag des Elements zu erzeugen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Teil einer Überschreibung der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode in einer Klasse verwendet wird, die von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitet wird. Der Code überprüft, ob ein `<Label>` Element gerendert wird. Wenn dies der Fall ist, wird die <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A>-Methode aufgerufen, um zu überprüfen, ob ein `Color` Style-Attribut für das `<Label>`-Element definiert wurde. Wenn ein `Color` Attribut nicht definiert wurde, ruft der Code diese Überladung der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>-Methode auf, um dem Formatvorlagen Attribut das Attribut `Color` hinzuzufügen, und legt dessen Wert auf `red`fest.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddStyleAttribute (name As String, value As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit&#xA;override this.AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge, die das hinzuzufügende Formatattribut enthält.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen wird.</param>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, der das hinzuzufügende Formatattribut darstellt.</param>
        <summary>Fügt dem Start-Markuptag, das durch einen nachfolgenden Aufruf der <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Methode erstellt wird, das angegebene Markupformatattribut und den Attributwert sowie einen <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Enumerationswert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29>-Methode nur, wenn Sie von der <xref:System.Web.UI.HtmlTextWriter>-Klasse erbt. Sie ermöglicht es Ihnen, neue `name` und `value` Paare für <xref:System.Web.UI.HtmlTextWriterStyle> Attribute zu erstellen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginRender();" />
      <MemberSignature Language="F#" Value="abstract member BeginRender : unit -&gt; unit&#xA;override this.BeginRender : unit -&gt; unit" Usage="htmlTextWriter.BeginRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Benachrichtigt ein <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt oder ein Objekt einer abgeleiteten Klasse darüber, dass ein Steuerelement gerendert werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter>-Klassen Implementierung der <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A>-Methode hat keine Funktionalität. Sie müssen die <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A>-Methode in einer von <xref:System.Web.UI.HtmlTextWriter> abgeleiteten Klasse überschreiben, um Ihre eigene Renderingfunktion bereitzustellen. Beispielsweise könnten Sie in einer Markup Sprache, die möglicherweise erfordert, dass `<p>` Elemente unmittelbar vor einem Steuerelement gerendert werden, aber wenn Sie das `<p>`-Element zuvor festgelegt haben, können Sie die <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> Überschreibung verwenden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="htmlTextWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt und gibt alle zugeordneten Systemressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung der <xref:System.Web.UI.HtmlTextWriter.Close%2A>-Methode ruft die <xref:System.IO.TextWriter.Close%2A?displayProperty=nameWithType> Basis Methode auf.  
  
 Nach einem Rückruf der <xref:System.Web.UI.HtmlTextWriter.Close%2A>-Methode können alle Vorgänge für das <xref:System.Web.UI.HtmlTextWriter> Objekt Ausnahmen auslösen, da alle zugehörigen Ressourcen freigegeben wurden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultTabString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultTabString;" />
      <MemberSignature Language="F#" Value="val mutable DefaultTabString : string" Usage="System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt ein einzelnes Tabstoppzeichen dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die einzelne Registerkarte wird durch das ASCII 9-Zeichen dargestellt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Konstruktor erstellt wird, der ein <xref:System.IO.TextWriter> Objekt als Parameter annimmt und das <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> Feld als Parameter Argument an eine zweite Version des Konstruktors übergibt. Wenn dieser Konstruktor vom Code aufgerufen wird, definiert das <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> Feld die Einzugs Richtlinie für die Instanz des Markup-Writers, die von einer Seite oder einem Adapter verwendet wird.  
  
 [!code-csharp[MarkupTextWriter_Methods3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const DoubleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char DoubleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable DoubleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt das Anführungszeichenzeichen (") dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> Feld wird von der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode verwendet, um ein Attribut zu schließen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie ein `border`-Attribut für ein `<table>`-Element dargestellt wird. Der Code Ruft die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode auf, um das Attribut und seinen Wert zu erzeugen, und verwendet die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode zum Rendering der Felder <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> und <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar>.  
  
 In diesem Codebeispiel wird das folgende Markup gerendert:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codiert den Wert des angegebenen Markupattributs basierend auf den Anforderungen des <see cref="T:System.Web.HttpRequest" />-Objekts des aktuellen Kontexts.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeAttributeValue (value As String, fEncode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeAttributeValue(System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="member this.EncodeAttributeValue : string * bool -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Eine Zeichenfolge, die den zu codierenden Attributwert enthält.</param>
        <param name="fEncode"><see langword="true" />, um den Attributwert zu codieren, andernfalls <see langword="false" />.</param>
        <summary>Codiert den Wert des angegebenen Markupattributs basierend auf den Anforderungen des <see cref="T:System.Web.HttpRequest" />-Objekts des aktuellen Kontexts.</summary>
        <returns>Eine Zeichenfolge, die den codierten Attributwert enthält. <see langword="null" />, wenn <paramref name="value" /> leer ist, oder der nicht codierte Attributwert, wenn <paramref name="fEncode" /> gleich <see langword="false" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29>-Methode, wenn es sich bei dem Attribut nicht um einen <xref:System.Web.UI.HtmlTextWriterAttribute>-Enumerationswert handelt oder bis zur Laufzeit bekannt ist.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A>-Methode entfernt doppelte Anführungszeichen ("), kaufmännische und-Zeichen (&) und kleiner-als-Zeichen (<), sodass ungültige Tags unabhängig von der Eingabe nicht generiert werden. Die tatsächliche Codierung wird durch die <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A>-Methode durchgeführt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A>-Methode als Parameter in einem <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methoden aufrufaufgerufen wird, und anschließend wird ein `color:blue` Style-Attribut Wert codiert.  
  
 [!code-cpp[HtmlTextWriter_Methods#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter_Methods#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter_Methods#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeAttributeValue (attrKey As HtmlTextWriterAttribute, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ EncodeAttributeValue(System::Web::UI::HtmlTextWriterAttribute attrKey, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string&#xA;override this.EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (attrKey, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey">Ein <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, das das Markupattribut darstellt.</param>
        <param name="value">Eine Zeichenfolge, die den zu codierenden Attributwert enthält.</param>
        <summary>Codiert den Wert des angegebenen Markupattributs basierend auf den Anforderungen des <see cref="T:System.Web.HttpRequest" />-Objekts des aktuellen Kontexts.</summary>
        <returns>Eine Zeichenfolge, die den codierten Attributwert enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A>-Methode entfernt doppelte Anführungszeichen ("), kaufmännische und-Zeichen (&) und kleiner-als-Zeichen (<), sodass ungültige Tags unabhängig von der Eingabe nicht generiert werden. Die tatsächliche Codierung wird durch die <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A>-Methode durchgeführt.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeUrl (url As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.EncodeUrl : string -&gt; string" Usage="htmlTextWriter.EncodeUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Eine Zeichenfolge, die die zu codierende URL enthält.</param>
        <summary>Führt eine minimale URL-Codierung durch, indem Leerzeichen in der angegebenen URL in die Zeichenfolge "%20" konvertiert werden.</summary>
        <returns>Eine Zeichenfolge, die die codierte URL enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die URL-Codierung eines Zeichens besteht aus einem Prozentzeichen (%), gefolgt von der zweistelligen hexadezimalen Darstellung (ohne Beachtung der Groß-/Kleinschreibung) des ISO-Latin-Codepunkts für das Zeichen. Die hexadezimale Darstellung eines leer Zeichens ist 20.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A>-Methode aufgerufen wird, um Leerzeichen in der URL zu konvertieren, die als Parameter in einem <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methoden aufzurufen ist.  
  
 [!code-cpp[HtmlTextWriter_Methods#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter_Methods#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Codierung ab, die das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt beim Schreiben von Inhalt in die Seite verwendet.</summary>
        <value>Die <see cref="T:System.Text.Encoding" />, mit der das Markup in die Seite geschrieben wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Encoding%2A>-Eigenschaft erhält ihren Wert aus dem Basis <xref:System.IO.TextWriter>-Objekt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie mit der <xref:System.Web.UI.HtmlTextWriter.Encoding%2A>-Eigenschaft der Codierungstyp geschrieben wird, der von einem benutzerdefinierten Steuerelement zum Rendering von Text auf der Seite verwendet wird, in der es enthalten ist.  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter_Properties#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndRender();" />
      <MemberSignature Language="F#" Value="abstract member EndRender : unit -&gt; unit&#xA;override this.EndRender : unit -&gt; unit" Usage="htmlTextWriter.EndRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Benachrichtigt ein <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt oder ein Objekt einer abgeleiteten Klasse darüber, dass das Rendern eines Steuerelements beendet wurde. Sie können mit dieser Methode beliebige in der <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />-Methode geöffnete Markupelemente schließen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter>-Klassen Implementierung der <xref:System.Web.UI.HtmlTextWriter.EndRender%2A>-Methode hat keine Funktionalität. Sie müssen <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> in einer von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleiteten Klasse überschreiben, um Ihre eigene Renderingfunktion bereitzustellen.  
  
 Sie können die <xref:System.Web.UI.HtmlTextWriter.EndRender%2A>-Methode verwenden, um alle in der <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A>-Methode geöffneten Markup Elemente zu schließen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberSignature Language="VB.NET" Value="Public Const EndTagLeftChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EndTagLeftChars;" />
      <MemberSignature Language="F#" Value="val mutable EndTagLeftChars : string" Usage="System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt linke spitze Klammer und Schrägstrich (&lt;/) des Endtags eines Markupelements dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> Feld wird von der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode zum Erstellen von Markup Element-Endtags verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie das Endtag eines `<table>` Markup Elements gerentet wird, indem die <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> und die <xref:System.Web.UI.HtmlTextWriter.TagRightChar> Felder als Parameterwerte in Aufrufen der <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode verwendet werden.  
  
 In diesem Codebeispiel wird das folgende Markup gerendert:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt das Starttag eines Markupelements mit Attributen, die die Layout- und Zeichenformatierung des angegebenen Formats implementieren.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.EnterStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">Ein <see cref="T:System.Web.UI.WebControls.Style" />, der den Beginn für das Layout und die Formatierung des Markupblocks angibt.</param>
        <summary>Schreibt das Starttag eines <see langword="&lt;span&gt;" />-Elements mit Attributen, die die Layout- und Zeichenformatierung des angegebenen Formats implementieren.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>-Methode, um Stile wie Hintergrundfarbe oder Rahmenbreite auf einen Markup Block anzuwenden.  
  
 Die Methoden <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> und <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> ermöglichen einem Geräte Adapter oder-Steuerelement das Erstellen von Markup, das die Zeichen Formatierung des angegebenen Stils verwendet. Verwenden Sie den gleichen Wert für `style` in der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>-Methode, die Sie in der entsprechenden <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>-Methode verwenden.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29>-Methode rendert das öffnende Tag eines `<span>` Elements. Diese Methode fügt dann die erforderlichen Attribute und Stil Attribute zum öffnenden Tag des `<span>`-Elements hinzu, um die vom <xref:System.Web.UI.WebControls.Style>-Objekt angegebenen Einstellungen anzuzeigen. Wenn Sie ein anderes Markup Element zum enthalten der Attribute und Stil Attribute erstellen möchten, verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29>-Überladung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine benutzerdefinierte Klasse, die mit dem Namen verwenden `TextSample`, abgeleitet von der <xref:System.Web.UI.WebControls.WebControl> Klasse bereit, die verwendet die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode zum Anwenden einer <xref:System.Web.UI.WebControls.Style.ForeColor%2A> Formatvorlage, die eine Textzeichenfolge ein.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode rendert das HTML `<span style="color:Navy;">`. Der <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>-Methodenaufrufe schließt das `<span>`-Element, nachdem der Text gerendert wurde.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.EnterStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">Ein <see cref="T:System.Web.UI.WebControls.Style" />, der den Beginn für das Layout und die Formatierung des Markupblocks angibt.</param>
        <param name="tag">Ein <see cref="T:System.Web.UI.HtmlTextWriterTag" />, das das Starttag des Markupelements mit dem in <paramref name="style" /> angegebenen Formatobjekt angibt.</param>
        <summary>Schreibt das Starttag eines Markupelements mit Attributen, die die Layout- und Zeichenformatierung des angegebenen Formats implementieren.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>-Methode, um Stile wie Hintergrundfarbe oder Rahmenbreite auf einen Markup Block anzuwenden.  
  
 Die Methoden <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> und <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> ermöglichen einem Geräte Adapter oder-Steuerelement das Erstellen von Markup, das die Zeichen Formatierung des angegebenen Stils verwendet. Verwenden Sie den gleichen Wert für `style` in der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>-Methode, die Sie in der entsprechenden <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>-Methode verwenden.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29>-Methode rendert das öffnende Tag des Elements, das durch den `tag`-Parameter angegeben wird. Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29>-Methode fügt dann dem öffnenden Tag des-Elements die erforderlichen Attribute und Stil Attribute hinzu, um die vom <xref:System.Web.UI.WebControls.Style>-Objekt angegebenen Einstellungen anzuzeigen. Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> Überladung, um das öffnende Tag eines `<span>` Elements zu Rendering.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine benutzerdefinierte Klasse, die mit dem Namen verwenden `TextSample`, abgeleitet von der <xref:System.Web.UI.WebControls.WebControl> Klasse bereit, die verwendet die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode zum Anwenden einer <xref:System.Web.UI.WebControls.Style.ForeColor%2A> Formatvorlage, die eine Textzeichenfolge ein.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>-Methode rendert die HTML-`<span style="color:Navy;">`. Der <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>-Methodenaufrufe schließt das `<span>`-Element, nachdem der Text gerendert wurde.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char EqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable EqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt das Gleichheitszeichen (<see langword="=" />) dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Erstellen des öffnenden Trenn Zeichens eines Attribut Werts können Sie das <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> Feld anstelle des <xref:System.Web.UI.HtmlTextWriter.EqualsChar> Felds verwenden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie das `src`-Attribut und ein Teil seines Werts für ein `<img>`-Element dargestellt werden. Der Code verwendet das <xref:System.Web.UI.HtmlTextWriter.EqualsChar>-Feld in einem <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methoden Aufruf, um das Gleichheitszeichen (=) zwischen dem `src`-Attribut und seinem Wert zu erzeugen.  
  
 In diesem Codebeispiel wird das folgende Markup gerendert:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsDoubleQuoteString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EqualsDoubleQuoteString;" />
      <MemberSignature Language="F#" Value="val mutable EqualsDoubleQuoteString : string" Usage="System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt ein Gleichheitszeichen (=) und doppelte Anführungszeichen (") gemeinsam in einer Zeichenfolge (=") dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> Feld wird von den Methoden <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> und <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> verwendet, um das öffnende Trennzeichen von Attributwerten zu erstellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie ein `border`-Attribut für ein `<table>`-Element dargestellt wird. Der Code Ruft die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode auf, um das Attribut und seinen Wert zu erzeugen, und verwendet die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode zum Rendering der Felder <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> und <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar>.  
  
 In diesem Codebeispiel wird das folgende Markup gerendert:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt das Endtag eines Markupelements zum Beenden des angegebenen Layouts und der Zeichenformatierung.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.ExitStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">Ein <see cref="T:System.Web.UI.WebControls.Style" />, der das zu beendende Layout und die Formatierung angibt.</param>
        <summary>Schreibt das Endtag eines <see langword="&lt;span&gt;" />-Elements zum Beenden des angegebenen Layouts und der Zeichenformatierung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29>-Methode rendert das schließende Tag eines `<span>` Elements nach dem Endtag des Steuer Elements, wobei das vom entsprechenden <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>-Befehl geöffnete Element geschlossen wird.  
  
 Die Methoden <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> und <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> ermöglichen einem Geräte Adapter oder-Steuerelement das Erstellen von Markup, das einen Block startet und beendet, indem die Zeichen Formatierung des angegebenen Stils verwendet wird. Verwenden Sie den gleichen Wert für `style` in der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>-Methode, die Sie in der entsprechenden <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>-Methode verwenden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine benutzerdefinierte Klasse, die mit dem Namen verwenden `TextSample`, abgeleitet von der <xref:System.Web.UI.WebControls.WebControl> Klasse bereit, die verwendet die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode zum Anwenden einer <xref:System.Web.UI.WebControls.Style.ForeColor%2A> Formatvorlage, die eine Textzeichenfolge ein.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode rendert das HTML `<span style="color:Navy;">`. Der <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>-Methodenaufrufe schließt das `<span>`-Element, nachdem der Text gerendert wurde.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.ExitStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">Ein <see cref="T:System.Web.UI.WebControls.Style" />, der das Beenden der Anwendung von Layout und Formatierung auf den Ausgabetext angibt.</param>
        <param name="tag">Ein <see cref="T:System.Web.UI.HtmlTextWriterTag" />, dass das Endtag des Markupelements angibt, das die Attribute enthielt, die das angegebene Format angewendet haben. Dies muss dem im <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />-Aufruf übergebenen Schlüssel entsprechen.</param>
        <summary>Schreibt das Endtag des angegebenen Markupelements, um das angegebene Layout und Formatieren von Zeichen zu beenden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29>-Methode rendert das schließende Tag des Elements, das durch `tag` nach dem Endtag des Steuer Elements angegeben wird, wobei das Element geschlossen wird, das durch den entsprechenden <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> Methoden aufzurufen geöffnet wurde.  
  
 Die Methoden <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> und <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> ermöglichen einem Geräte Adapter oder-Steuerelement das Erstellen von Markup, das einen Block startet und beendet, indem die Zeichen Formatierung des angegebenen Stils verwendet wird. Verwenden Sie den gleichen Wert für `style` in der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>-Methode, die Sie in der entsprechenden <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>-Methode verwenden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine benutzerdefinierte Klasse, die mit dem Namen verwenden `TextSample`, abgeleitet von der <xref:System.Web.UI.WebControls.WebControl> Klasse bereit, die verwendet die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode zum Anwenden einer <xref:System.Web.UI.WebControls.Style.ForeColor%2A> Formatvorlage, die eine Textzeichenfolge ein.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode rendert das HTML `<span style="color:Navy;">`. Der <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>-Methodenaufrufe schließt das `<span>`-Element, nachdem der Text gerendert wurde.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FilterAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FilterAttributes();" />
      <MemberSignature Language="F#" Value="abstract member FilterAttributes : unit -&gt; unit&#xA;override this.FilterAttributes : unit -&gt; unit" Usage="htmlTextWriter.FilterAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Markup- und Formatattribute aus allen Eigenschaften der Seite oder des Webserversteuerelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bevor Attribute in einem Markup Element gerendert werden, wird die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>-Methode aufgerufen. Die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>-Methode ruft die Methoden <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> und <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> für jedes Attribut und jede Art zum Rendering auf.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitete benutzerdefinierte Klasse verwendet wird, die die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>-Methode überschreibt. Beim Aufrufen überprüft das <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Überschreibungs Element, ob der TextWriter alle `<label>` oder `<a>` Elemente rendert:  
  
-   Wenn ein `<label>` Element gerendert wird, überprüft die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>-Methode, ob ein `style`-Attribut für das Element gerendert wird, und erstellt, wenn nicht, ein `style` Attribut und legt es auf `color: blue`fest.  
  
-   Wenn ein `<a>` Element gerendert wird, bestimmt die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>-Methode, ob ein `href`-Attribut eingeschlossen ist, und fügt, wenn nicht, eine `href` zur URL-http://www.cohowinery.comhinzu.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="htmlTextWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht sämtliche Puffer für das aktuelle <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt und veranlasst, dass alle gepufferten Daten in den Ausgabestream geschrieben werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter>-Klassen Implementierung der <xref:System.Web.UI.HtmlTextWriter.Flush%2A>-Methode ruft nur die <xref:System.IO.TextWriter.Flush%2A> Basis Methode auf.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeKey (attrName As String) As HtmlTextWriterAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterAttribute GetAttributeKey(System::String ^ attrName);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeKey : string -&gt; System.Web.UI.HtmlTextWriterAttribute" Usage="htmlTextWriter.GetAttributeKey attrName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">Eine Zeichenfolge, die das Attribut enthält, für das das <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> abgerufen werden soll.</param>
        <summary>Ruft den entsprechenden <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />-Enumerationswert für das angegebene Attribut ab.</summary>
        <returns>Der <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />-Enumerationswert für das angegebene Attribut, andernfalls ein ungültiger <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />-Wert, wenn das Attribut kein Member der Enumeration ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `attrName` `null` oder eine leere Zeichenfolge ("") ist oder nicht in der Tabelle mit Attributnamen gefunden werden kann, wird der Wert-1 zurückgegeben, der in ein <xref:System.Web.UI.HtmlTextWriterAttribute> Objekt eingegeben wurde.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie eine von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitete Klasse verwenden, die die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode überschreibt. Die außer Kraft Setzung überprüft, ob `tagKey` gleich dem <xref:System.Web.UI.HtmlTextWriterTag.Font> Feld ist, das angibt, dass ein `<font>` Markup Element gerendert wird. Wenn dies der Fall ist, ruft die Überschreibung die <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A>-Methode auf, um herauszufinden, ob das `<font>` Element ein <xref:System.Web.UI.HtmlTextWriterAttribute.Size>-Attribut enthält. Wenn die <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> `false`zurückgibt, ruft die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode die <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A>-Methode auf, die den <xref:System.Web.UI.HtmlTextWriterAttribute.Size> definiert und seinen Wert auf `30pt`festlegt.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeName (attrKey As HtmlTextWriterAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetAttributeName(System::Web::UI::HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeName : System.Web.UI.HtmlTextWriterAttribute -&gt; string" Usage="htmlTextWriter.GetAttributeName attrKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">Das <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, für das der Markupattributname abgerufen werden soll.</param>
        <summary>Ruft den Namen des Markupattributs ab, das dem angegebenen <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />-Wert zugeordnet ist.</summary>
        <returns>Eine Zeichenfolge, die den Namen des Markupattributs enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A>-Methode gibt eine leere Zeichenfolge ("") zurück, wenn `attrKey` kein gültiger <xref:System.Web.UI.HtmlTextWriterAttribute> Wert ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A>-Methode verwendet wird, um einen <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Enumerationswert in seinen Zeichen folgen Namen zu konvertieren.  
  
 [!code-cpp[HtmlTextWriter_Methods3#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleKey (styleName As String) As HtmlTextWriterStyle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterStyle GetStyleKey(System::String ^ styleName);" />
      <MemberSignature Language="F#" Value="member this.GetStyleKey : string -&gt; System.Web.UI.HtmlTextWriterStyle" Usage="htmlTextWriter.GetStyleKey styleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">Das Formatattribut, für das der <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> abgerufen wird.</param>
        <summary>Ruft den <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Enumerationswert für das angegebene Format ab.</summary>
        <returns>Der <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Enumerationswert, der <paramref name="styleName" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A>-Methode gibt den als <xref:System.Web.UI.HtmlTextWriterStyle> Wert typisierten Wert-1 zurück, wenn `styleName` keinem <xref:System.Web.UI.HtmlTextWriterStyle> Enumerationswert entspricht.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode in einer Klasse überschrieben wird, die von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitet wird. Die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Überschreibung bestimmt, ob ein `<label>` Markup gerendert wird, und überprüft, wenn dies der Fall ist, das-Element auf ein <xref:System.Web.UI.HtmlTextWriterStyle.Color> Attribut. Wenn ein <xref:System.Web.UI.HtmlTextWriterStyle.Color> Attribut nicht definiert wurde, wird die <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A>-Methode als erster Parameter in einem Aufrufen der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>-Methode verwendet, um einem `<label>` Markup Element ein <xref:System.Web.UI.HtmlTextWriterStyle.Color> Attribut hinzuzufügen und das <xref:System.Web.UI.HtmlTextWriterStyle.Color>-Attribut auf `red`festzulegen.  
  
 [!code-cpp[HtmlTextWriter_Methods#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleName (styleKey As HtmlTextWriterStyle) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetStyleName(System::Web::UI::HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="F#" Value="member this.GetStyleName : System.Web.UI.HtmlTextWriterStyle -&gt; string" Usage="htmlTextWriter.GetStyleName styleKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">Das <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, für das der Formatattributname abgerufen werden soll.</param>
        <summary>Ruft den Namen des dem angegebenen <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Enumerationswert zugeordneten Markupformatattributs ab.</summary>
        <returns>Der Formatattributname, der dem in <paramref name="styleKey" /> angegebenen <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Enumerationswert zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `styleKey` kein gültiges <xref:System.Web.UI.HtmlTextWriterStyle> Objekt ist, gibt die <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A>-Methode eine leere Zeichenfolge ("") zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie Sie überprüfen, ob ein `<label>` Element gerendert wird. Wenn dies der Fall ist, wird überprüft, ob ein <xref:System.Web.UI.HtmlTextWriterStyle.Color> Style-Attribut für das Element definiert wurde. Wenn das-Attribut nicht definiert wurde, wird die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>-Methode aufgerufen, und die <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A>-Methode konvertiert den <xref:System.Web.UI.HtmlTextWriterStyle.Color>-Enumerationsmember in seine Zeichen folgen Darstellung, um Sie an die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>-Methode zu übergeben.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagKey (tagName As String) As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::HtmlTextWriterTag GetTagKey(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag&#xA;override this.GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag" Usage="htmlTextWriter.GetTagKey tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Das Markupelement, für das das <see cref="T:System.Web.UI.HtmlTextWriterTag" /> abgerufen werden soll.</param>
        <summary>Ruft den <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Enumerationswert ab, der dem angegebenen Markupelement zugeordnet ist.</summary>
        <returns>Der <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Enumerationswert, andernfalls <see cref="T:System.Web.UI.HtmlTextWriterTag" />, wenn <paramref name="tagName" /> keinem bestimmten <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />-Wert zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `tagName` `null`ist, wird eine leere Zeichenfolge ("") oder nicht in der Tabelle mit Markup-Tagnamen gefunden. die <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> Methode gibt das <xref:System.Web.UI.HtmlTextWriterTag.Unknown> Feld zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die Überladung der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode überschrieben wird, die eine Zeichenfolge als Parameter annimmt. Die Zeichenfolge wird an die <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A>-Methode übergeben, die Sie in den entsprechenden <xref:System.Web.UI.HtmlTextWriterTag> Enumerationsmember konvertiert, und übergibt diese an die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Überladung, die einen <xref:System.Web.UI.HtmlTextWriterTag> Enumerationswert als Parameter annimmt.  
  
 [!code-cpp[HtmlTextWriter_Methods3#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter_Methods3#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter_Methods3#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string&#xA;override this.GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string" Usage="htmlTextWriter.GetTagName tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Das <see cref="T:System.Web.UI.HtmlTextWriterTag" />, für das das Markupelement abgerufen werden soll.</param>
        <summary>Ruft das Markupelement ab, das dem angegebenen <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Enumerationswert zugeordnet ist.</summary>
        <returns>Eine Zeichenfolge, die das Markupelement darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `tagKey` kein gültiger <xref:System.Web.UI.HtmlTextWriterTag> Wert ist, gibt die <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A>-Methode eine leere Zeichenfolge ("") zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein `<font>`-Element mit der <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>-Methode geschlossen wird. Die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>-Methode ruft die <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A>-Methode auf, um den <xref:System.Web.UI.HtmlTextWriterTag.Font> Wert in eine Zeichenfolge zu konvertieren.  
  
 [!code-cpp[HtmlTextWriter_Methods3#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods3#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter_Methods3#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : int with get, set" Usage="System.Web.UI.HtmlTextWriter.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Tabstopps ab, um die der Anfang jeder Markupzeile eingerückt wird.</summary>
        <value>Die Anzahl von Tabstopps, um die jede Zeile eingerückt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Einzug wird durch das Schreiben der Zeichenfolge durchgeführt, die durch den `tabString`-Parameter des <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> Konstruktors angegeben wird, wie oft von der <xref:System.Web.UI.HtmlTextWriter.Indent%2A>-Eigenschaft angegeben.  
  
 Wenn die <xref:System.Web.UI.HtmlTextWriter.Indent%2A>-Eigenschaft auf einen negativen Wert festgelegt ist, wird Sie vor dem Speichern in 0 geändert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie der Wert erhöht wird, der der <xref:System.Web.UI.HtmlTextWriter.Indent%2A>-Eigenschaft zugewiesen wird, wenn Attribute zum öffnenden Tag eines `<span>` Elements hinzugefügt wurden und die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode aufgerufen wurde. Dadurch wird der Einzug für alle Markup vergrößert, das innerhalb des `<span>` Elements gerendert wird.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerWriter As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ InnerWriter { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerWriter : System.IO.TextWriter with get, set" Usage="System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Textwriter ab, der den inneren Inhalt des Markupelements schreibt, oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.IO.TextWriter" />, der den inneren Markupinhalt schreibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Innerer Markup Inhalt ist der Text zwischen den öffnenden und schließenden Tags eines Markup sprach Elements.  
  
 Wenn die <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A>-Eigenschaft auf ein <xref:System.IO.TextWriter> Objekt festgelegt ist, das eine Instanz der <xref:System.Web.HttpWriter>-Klasse ist, wird dieser Fakt notiert, und es wird ein separater Verweis gespeichert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie ein benutzerdefiniertes Webserver Steuerelement verwendet wird, das von der <xref:System.Web.UI.WebControls.WebControl>-Klasse abgeleitet wurde, die die <xref:System.Web.UI.Control.Render%2A>-Methode überschreibt. Er verwendet die <xref:System.Web.UI.HtmlTextWriter>-Klasse, um ein `<font>`-Element zu schreiben. Nachdem das öffnende Tag des Elements geschrieben wurde, verwendet es die <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A>-Eigenschaft, um die Zeichenfolge `"<br> The time on the server:"` zu schreiben, und verkettet diese Zeichenfolge mit dem Wert der <xref:System.DateTime.Now%2A?displayProperty=nameWithType>-Eigenschaft.  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter_Properties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter_Properties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob das angegebene Markupattribut und sein Wert beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden sollen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key">Das dem Markupattribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <summary>Bestimmt, ob das angegebene Markupattribut und sein Wert beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden sollen.</summary>
        <returns><see langword="true" />, wenn das Attribut beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um den Wert zu erhalten, der dem <xref:System.Web.UI.HtmlTextWriterAttribute> Objekt zugewiesen werden soll, verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> Überladung anstelle dieser.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie Sie eine Überschreibung der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode in einer Klasse verwenden, die von der <xref:System.Web.UI.HtmlTextWriter>-Klasse erbt. Die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Überschreibung überprüft, ob ein `<font>` Markup Element gerendert wird. Wenn dies der Fall ist, ruft die Überschreibung die <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> Methode auf, um zu überprüfen, ob das `<font>` Element ein <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut enthält Wenn dies nicht der Wert ist, ruft die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode die <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A>-Methode auf, die das Attribut <xref:System.Web.UI.HtmlTextWriterAttribute.Size> definiert und den Wert auf `30pt`festlegt.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute * string -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">Das dem Markupattribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <param name="value">Der Wert, der dem Attribut zugewiesen ist.</param>
        <summary>Bestimmt, ob das angegebene Markupattribut und sein Wert beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden sollen.</summary>
        <returns><see langword="true" />, wenn das Attribut beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A>-Methode `true`zurückgibt, wird der Wert, der dem <xref:System.Web.UI.HtmlTextWriterAttribute>-Objekt zugewiesen werden soll, im `value`-Parameter zurückgegeben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob ein Markupformatattribut beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden soll.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key">Das dem Attribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Bestimmt, ob das angegebene Markupformatattribut beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden soll.</summary>
        <returns><see langword="true" />, wenn das Attribut beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um den Wert zu erhalten, der mit dem angegebenen Formatvorlagen Attribut gerendert wird, verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> Überladung der <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie Sie überprüfen, ob ein `<label>` Element gerendert wird. Wenn dies der Fall ist, überprüft die <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> Methode, ob ein <xref:System.Web.UI.HtmlTextWriterStyle.Color> Style-Attribut für das Element definiert wurde. Wenn das <xref:System.Web.UI.HtmlTextWriterStyle.Color>-Attribut nicht definiert wurde, definiert die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>-Methode das <xref:System.Web.UI.HtmlTextWriterStyle.Color>-Attribut und legt dessen Wert auf `red`fest.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle * string -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">Das dem Attribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <param name="value">Der dem Formatattribut zugewiesene Wert.</param>
        <summary>Bestimmt, ob das angegebene Markupformatattribut und sein Wert beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden sollen.</summary>
        <returns><see langword="true" />, wenn das Attribut und sein Wert beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A>-Methode `true`zurückgibt, wird der Wert, der dem <xref:System.Web.UI.HtmlTextWriterStyle>-Attribut zugewiesen werden soll, im `value`-Parameter zurückgegeben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidFormAttribute (attribute As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidFormAttribute(System::String ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member IsValidFormAttribute : string -&gt; bool&#xA;override this.IsValidFormAttribute : string -&gt; bool" Usage="htmlTextWriter.IsValidFormAttribute attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="attribute">Eine Zeichenfolge, die den Namen des zu überprüfenden Attributs enthält.</param>
        <summary>Prüft ein Attribut darauf, ob es im Starttag eines <see langword="&lt;form&gt;" />-Markupelements gerendert werden kann.</summary>
        <returns>Immer <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter>-Klassen Implementierung der <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A>-Methode gibt `true` für alle Attribute zurück. Überschreiben Sie die <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A>, um die Attribute einzuschränken, die im öffnenden Tag eines `<form>` Elements gerendert werden können.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Überschreiben Sie die <see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />-Methode, um <see langword="true" /> nur für die Attribute zurückzugeben, die in das <see langword="&lt;form&gt;" />-Element des Markups eingeschlossen werden können, für das die von der <see cref="T:System.Web.UI.HtmlTextWriter" />-Klasse abgeleitete Klasse vorgesehen ist.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLine : string with get, set" Usage="System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge für den Zeilenabschluss ab, die vom <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt verwendet wird, oder legt diese fest.</summary>
        <value>Die vom aktuellen <see cref="T:System.Web.UI.HtmlTextWriter" /> verwendete Zeichenfolge für den Zeilenabschluss.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf, gefolgt von einem Zeilenvorschub ("\r\n").  
  
 Die Zeichenfolge für den Zeilen Abschluss wird immer dann in den Ausgabestream geschrieben, wenn eine der <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methoden aufgerufen wird. Wenn die <xref:System.Web.UI.HtmlTextWriter.NewLine%2A>-Eigenschaft auf `null`festgelegt ist, wird das Standard Zeichen für neue Zeilen verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitete benutzerdefinierte Klasse verwendet wird, die die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>-Methode überschreibt. Beim Aufrufen überprüft das <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Überschreibungs Element, ob der TextWriter alle `<label>` oder `<a>` Elemente rendert. Wenn dies der Fall ist, bestimmt die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Methode, ob ein Format Attribut für die Bezeichnung definiert ist. Wenn kein Stil definiert ist, legt die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>-Methode den Standardwert für das `style:color`-Attribut auf blau fest. Die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>-Methode verwendet dann die <xref:System.Web.UI.HtmlTextWriter.NewLine%2A>-Eigenschaft, um einen Zeilenumbruch in das Markup-Tag einzufügen und alle anderen definierten Attribute zu schreiben.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool&#xA;override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Attributs, das gerendert werden soll.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen wird.</param>
        <param name="key">Das dem Markupattribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <summary>Bestimmt, ob das angegebene Markupattribut und sein Wert im aktuellen Markupelement gerendert werden können.</summary>
        <returns>Immer <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter>-Klassen Implementierung der <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A>-Methode gibt immer `true`zurück. Die <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> Überschreibungen können bestimmen, ob ein Attribut auf der Seite gerendert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A>-Methode überschrieben wird. Wenn ein <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut gerendert wird, der <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Wert jedoch nicht `30pt`ist, ruft die <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> Überschreibung die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode auf, um ein <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut hinzuzufügen und den Wert auf `30pt`festzulegen.  
  
 [!code-csharp[MarkupTextWriter_Methods3#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie von der <see cref="T:System.Web.UI.HtmlTextWriter" />-Klasse erben, können Sie die <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />-Methode außer Kraft setzen, um <see langword="false" /> zurückzugeben, um zu verhindern, dass ein Attribut überhaupt gerendert wird, oder für ein bestimmtes Markup gerendert wird. Wenn Sie z. b. nicht möchten, dass das Objekt, das von <see cref="T:System.Web.UI.HtmlTextWriter" /> abgeleitet wurde, das <see langword="bgcolor" />-Attribut <see langword="&lt;table&gt;" /> Elemente zu Rendering, können Sie die <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> überschreiben und <see langword="false" /> zurückgeben, wenn <paramref name="name" /> <see langword="bgcolor" /> und der <see cref="P:System.Web.UI.HtmlTextWriter.TagName" />-Eigenschafts Wert @no__ t_8_ .<see langword="table" /></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool&#xA;override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Formatvorlagenattributs, der gerendert werden soll.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Formatattribut zugewiesen wird.</param>
        <param name="key">Das dem Formatattribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Bestimmt, ob das angegebene Markupformatattribut und sein Wert im aktuellen Markupelement gerendert werden können.</summary>
        <returns>Immer <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter>-Klassen Implementierung der <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A>-Methode gibt immer `true`zurück. Die <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> Überschreibungen können bestimmen, ob ein Format Attribut auf der Seite gerendert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A>-Methode überschrieben wird. Wenn ein <xref:System.Web.UI.HtmlTextWriterStyle.Color> Style-Attribut gerendert wird, der <xref:System.Web.UI.HtmlTextWriterStyle.Color> Wert jedoch nicht `purple`ist, verwendet die <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> Überschreibung die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>-Methode, um das <xref:System.Web.UI.HtmlTextWriterStyle.Color>-Attribut auf `purple`festzulegen.  
  
 [!code-csharp[MarkupTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie von der <see cref="T:System.Web.UI.HtmlTextWriter" />-Klasse erben, können Sie die <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />-Methode überschreiben, um <see langword="false" /> zurückzugeben, um zu verhindern, dass ein Format Attribut überhaupt gerendert wird, dass es für ein bestimmtes Element gerendert oder für eine bestimmte Markup Sprache gerendert wird. Wenn Sie z. b. nicht möchten, dass das Objekt, das von <see cref="T:System.Web.UI.HtmlTextWriter" /> abgeleitet ist, das <see langword="color" /> Style-Attribut in einem <see langword="&lt;p&gt;" />-Element wieder gibt, können Sie die <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> überschreiben und <see langword="false" /> zurückgeben, wenn <paramref name="name" /> <see langword="color" /> und die <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> der Eigenschafts Wert ist <see langword="p" />.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="abstract member OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool&#xA;override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="htmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Elements, das gerendert werden soll.</param>
        <param name="key">Das dem Element zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Element.</param>
        <summary>Bestimmt, ob das angegebene Markupelement auf der anfordernden Seite gerendert wird.</summary>
        <returns>Immer <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter>-Klassen Implementierung der <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A>-Methode gibt immer `true`zurück. Die <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> über schreibungen können bestimmen, ob ein Element auf der Seite gerendert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A>-Methode überschrieben wird. Wenn ein <xref:System.Web.UI.HtmlTextWriterTag.Font> Element gerendert wird, verwendet die <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> Überschreibung die <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A>-Methode, um zu bestimmen, ob ein <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut gerendert wird. Wenn dies nicht der Fall ist, wird die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode verwendet, um ein <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut zu erstellen und dessen Wert auf `20pt`festzulegen.  
  
 [!code-csharp[MarkupTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie von der <see cref="T:System.Web.UI.HtmlTextWriter" />-Klasse erben, können Sie die <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />-Methode überschreiben, um <see langword="false" /> zurückzugeben, um zu verhindern, dass ein Markup Element überhaupt oder für eine bestimmte Markup Sprache gerendert wird. Wenn Sie z. b. nicht möchten, dass das Objekt, das von <see cref="T:System.Web.UI.HtmlTextWriter" /> abgeleitet ist, das <see langword="&lt;font&gt;" /> Element wieder gibt, können Sie die <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />-Methode überschreiben, um <see langword="false" /> zurückzugeben, wenn eine Seite angefordert wird, die ein <see langword="&lt;font&gt;" /> Element enthält.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTabs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTabs();" />
      <MemberSignature Language="F#" Value="abstract member OutputTabs : unit -&gt; unit&#xA;override this.OutputTabs : unit -&gt; unit" Usage="htmlTextWriter.OutputTabs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt eine Reihe von Tabstoppzeichenfolgen, die die Einzugsebene für eine Zeile mit Markupzeichen darstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A>-Methode verwendet die <xref:System.Web.UI.HtmlTextWriter.Indent%2A>-Eigenschaft, um zu bestimmen, wie viele Tab-Zeichen folgen zum Abrufen des gewünschten Einzugs geschrieben werden sollen.  
  
 Die Tabstopp Zeichenfolge wird mit dem <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A>-Konstruktor angegeben. Wenn keine Tabstopp Zeichenfolge angegeben ist, wird die <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> Konstante (`\t`) verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie Sie die <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A>-Methode in einer Klasse überschreiben, die von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitet wird. Die <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> Überschreibung verwendet immer die <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> Konstante, um den Einzug auszuführen.  
  
 [!code-cpp[HtmlTextWriter_Methods#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter_Methods#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberSignature Language="VB.NET" Value="Protected Function PopEndTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ PopEndTag();" />
      <MemberSignature Language="F#" Value="member this.PopEndTag : unit -&gt; string" Usage="htmlTextWriter.PopEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt das zuletzt gespeicherte Markupelement aus der Liste der gerenderten Elementen.</summary>
        <returns>Ein <see cref="T:System.String" />, der das zuletzt gerenderte Markupelement enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elemente werden durch die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode der Liste der gerenderten Markup Elemente hinzugefügt. Die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode entfernt Markup Elemente aus der Liste, indem die <xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A>-Methode aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Liste der gerenderten Elemente ist leer.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushEndTag (endTag As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushEndTag(System::String ^ endTag);" />
      <MemberSignature Language="F#" Value="member this.PushEndTag : string -&gt; unit" Usage="htmlTextWriter.PushEndTag endTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">Das Endtag des Markupelements.</param>
        <summary>Speichert das angegebene Markupelement für die spätere Verwendung, wenn das Endtag eines Markupelements generiert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elemente werden der Liste der gerenderten Markup Elemente hinzugefügt, wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode die <xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A>-Methode aufruft. Die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode entfernt Markup Elemente aus der Liste, nachdem das Endtag für das Element gerendert wurde.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterAttribute (name As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterAttribute(System::String ^ name, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="static member RegisterAttribute : string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterAttribute (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge, die den Namen des zu registrierenden Markupattributs enthält.</param>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, das dem Attributnamen entspricht.</param>
        <summary>Registriert Markupattribute (die Literale oder dynamisch generiert sein können) aus der Quelldatei, sodass sie auf dem anfordernden Client richtig gerendert werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die vordefinierten Attribute der HTML-Markup Sprache werden durch Aufrufe der <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A>-Methode registriert, wenn das erste <xref:System.Web.UI.HtmlTextWriter> Objekt erstellt wird. Dynamische Attribute können zu anderen Zeitpunkten mithilfe der <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A>-Methode registriert werden.  
  
 Die von der <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A>-Methode verwendete Registrierungs Tabelle ist `static`. Daher gilt die Registrierung von Attributen für alle <xref:System.Web.UI.HtmlTextWriter> Objekte auf dem Host Computer.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterStyle (name As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterStyle(System::String ^ name, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="static member RegisterStyle : string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterStyle (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Die aus der Quelldatei übergebene Zeichenfolge, die den Formatnamen angibt.</param>
        <param name="key">Der <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, der dem angegebenen Format entspricht.</param>
        <summary>Registriert Markupformateigenschaften (die Literale oder dynamisch generiert sein können) aus der Quelldatei, sodass sie auf dem anfordernden Client richtig gerendert werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die vordefinierten Cascading Stylesheet (CSS)-Attribute der HTML-Markup Sprache werden durch Aufrufe der <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A>-Methode registriert, wenn das erste <xref:System.Web.UI.HtmlTextWriter>-Objekt erstellt wird. Dynamische Stil Attribute können zu anderen Zeitpunkten mithilfe der <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A>-Methode registriert werden.  
  
 Die von der <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A>-Methode verwendete Registrierungs Tabelle ist `static`. Daher gilt die Registrierung von Attributen für alle <xref:System.Web.UI.HtmlTextWriter> Objekte auf dem Host Computer.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterTag (name As String, key As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterTag(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="static member RegisterTag : string * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterTag (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge, die das HTML-Tag enthält.</param>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterTag" />, das das zu rendernde Element angibt.</param>
        <summary>Registriert Markuptags (die Literale oder dynamisch generiert sein können) aus der Quelldatei, sodass sie auf dem anfordernden Client richtig gerendert werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die vordefinierten Markup Tags der HTML-Sprache werden durch Aufrufe der <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A>-Methode registriert, wenn das erste <xref:System.Web.UI.HtmlTextWriter> Objekt erstellt wird. Dynamische Markup Tags können zu anderen Zeitpunkten mithilfe der <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A>-Methode registriert werden.  
  
 Die von der <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A>-Methode verwendete Registrierungs Tabelle ist `static`. Daher gilt die Registrierung von Tags für alle <xref:System.Web.UI.HtmlTextWriter> Objekte auf dem Host Computer.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterContent : unit -&gt; string&#xA;override this.RenderAfterContent : unit -&gt; string" Usage="htmlTextWriter.RenderAfterContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt Text oder Abstände, die sich hinter dem Inhalt und vor dem Endtag des zu rendernden Markupelements befinden, in den Markupausgabestream.</summary>
        <returns>Eine Zeichenfolge, die die Abstände oder den Text enthält, der hinter dem Inhalt des Elements geschrieben werden soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A>-Methode kann nützlich sein, wenn Sie untergeordnete Elemente in das aktuelle Markup Element einfügen möchten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie Sie die <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A>-Methode in einer Klasse überschreiben, die von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitet wird, um zu bestimmen, ob ein `<label>` Element gerendert Wenn dies der Fall ist, fügt die <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> Überschreibung das Endtag eines `<font>` Elements direkt vor dem schließenden Tag des `<label>` Elements ein. Wenn ein anderes Element als `<label>` gerendert wird, wird die <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> Basis Methode verwendet.  
  
 [!code-cpp[HtmlTextWriter_Methods1#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Die <see cref="T:System.Web.UI.HtmlTextWriter" />-Klassen Implementierung der <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />-Methode gibt <see langword="null" />zurück. Überschreiben Sie <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />, wenn Sie Text oder einen Abstand nach dem Element Inhalt, jedoch vor dem schließenden Tag schreiben möchten.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterTag : unit -&gt; string&#xA;override this.RenderAfterTag : unit -&gt; string" Usage="htmlTextWriter.RenderAfterTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt Abstände oder Text, der hinter dem Endtag eines Markupelements steht.</summary>
        <returns>Der hinter dem Endtag des Elements zu schreibende Abstand oder Text.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A>-Methode kann nützlich sein, wenn Sie zusätzliche schließende Tags nach dem Elementtag Rendering möchten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A>-Methode überschrieben wird, um zu bestimmen, ob eine von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitete Klasse ein `<label>` Element rendert. Wenn dies der Fall ist, fügt die <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> Überschreibung das schließende Tag eines `<font>` Elements direkt nach dem `<label>` Element ein. Wenn es sich nicht um ein `<label>` Element handelt, wird die <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> Basis Methode verwendet.  
  
 [!code-cpp[HtmlTextWriter_Methods4#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Die <see cref="T:System.Web.UI.HtmlTextWriter" />-Klassen Implementierung der <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />-Methode gibt <see langword="null" />zurück. Überschreiben Sie <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />, wenn Sie Text oder einen Abstand nach dem Endtag des Elements schreiben möchten.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeContent : unit -&gt; string&#xA;override this.RenderBeforeContent : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt Text oder Abstände vor dem Inhalt und hinter dem Starttag eines Markupelements.</summary>
        <returns>Der vor dem Inhalt des Elements zu schreibende Text oder Abstand. Wenn <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> nicht überschrieben wurde, wird <see langword="null" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A>-Methode kann nützlich sein, wenn Sie untergeordnete Elemente in das aktuelle Markup Element vor dem inneren Markup einfügen möchten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A>-Methode überschrieben wird, um zu bestimmen, ob eine von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitete Klasse im Begriff ist, ein `<label>` Element zu Rendering Wenn dies der Fall ist, fügt die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> Überschreibung das öffnende Tag eines `<font>` Elements direkt nach dem öffnenden Tag des `<label>` Elements ein. Wenn es sich nicht um ein `<label>` Element handelt, wird die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> Basis Methode verwendet.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Die <see cref="T:System.Web.UI.HtmlTextWriter" />-Klassen Implementierung der <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />-Methode gibt <see langword="null" />zurück. Überschreiben Sie <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />, wenn Sie Text oder einen Abstand nach dem öffnenden Tag, aber vor dem Element Inhalt schreiben möchten.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeTag : unit -&gt; string&#xA;override this.RenderBeforeTag : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt Text oder Abstände vor dem Starttag eines Markupelements.</summary>
        <returns>Der Text oder Abstand, der vor dem Starttag des Markupelements geschrieben werden soll. <see langword="null" />, wenn die Methode nicht überschrieben wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A>-Methode kann nützlich sein, wenn Sie zusätzliche öffnende Tags vor dem öffnenden Tag des vorgesehenen Elements Rendering möchten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A>-Methode überschrieben wird, um zu bestimmen, ob eine von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitete Klasse im Begriff ist, ein `<label>`-Element zu Rendering. Wenn dies der Fall ist, fügt die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> Überschreibung das öffnende Tag eines `<font>` Elements direkt vor dem `<label>` Element ein. Wenn kein `<label>` Element gerendert wird, wird die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> Basis Methode verwendet.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Die <see cref="T:System.Web.UI.HtmlTextWriter" />-Klassen Implementierung der <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />-Methode gibt <see langword="null" />zurück. Überschreiben Sie <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />, wenn Sie Text oder Abstände vor dem Starttag des Elements schreiben möchten.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt das Starttag eines Markupelements in den Ausgabestream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : string -&gt; unit&#xA;override this.RenderBeginTag : string -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Eine Zeichenfolge mit dem Namen der Markupelements, für das das Starttag gerendert wird.</param>
        <summary>Schreibt das Starttag des angegebenen Markupelements in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Überschreibung der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29>-Methode, wenn das Markup Element nicht einer der <xref:System.Web.UI.HtmlTextWriterTag>-Enumerationswerte ist.  
  
 Um ein Markup Element mithilfe der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode zu generieren, rufen Sie zunächst die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> und die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Methoden auf, um beliebige Element Attribute oder Format Attribute anzugeben, die im öffnenden Tag des Elements angezeigt werden sollen. Nachdem Sie das innere Markup generiert haben, rufen Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode auf, um das Endtag zu generieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode in einem benutzerdefinierten Steuerelement aufgerufen wird, um das öffnende Tag eines nicht standardmäßigen `MyTag` Elements zu Rendering. Im Codebeispiel wird dann die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode aufgerufen, um das innere Markup zu erzeugen, und anschließend wird die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode aufgerufen, um das Element zu schließen.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Einer der <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Werte, der das Starttag des zu rendernden Markupelements definiert.</param>
        <summary>Schreibt das Starttag des Markupelements, das dem angegebenen <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Enumerationswert zugeordnet ist, in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Überladung der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29>-Methode, wenn das Markup Element einen bekannten Typ hat, bei dem es sich um einen der <xref:System.Web.UI.HtmlTextWriterTag>-Enumerationswerte handelt.  
  
 Um ein Markup Element mithilfe der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode zu generieren, rufen Sie zunächst die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> und die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Methoden auf, um beliebige Element Attribute oder Format Attribute anzugeben, die im öffnenden Tag des Elements angezeigt werden sollen. Nachdem Sie das innere Markup generiert haben, rufen Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode auf, um das Endtag zu generieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode verwendet wird, um das öffnende Tag eines `<img>` Elements auszugeben. Die Attribute, die dem-Element durch die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>-Methode hinzugefügt werden, befinden sich im öffnenden `<img>`-Tag. Die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode wird verwendet, um das Endtag zu generieren.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderEndTag : unit -&gt; unit&#xA;override this.RenderEndTag : unit -&gt; unit" Usage="htmlTextWriter.RenderEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt das Endtag eines Markupelements in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ruft die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode auf, nachdem die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Überladung aufgerufen wurde, und nachdem der gesamte Inhalt zwischen dem öffnenden und dem schließenden Tag (inneren Markup) des Elements gerendert wurde.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode aufgerufen wird, nachdem sowohl die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode, die das öffnende Tag generiert, als auch die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode, die das innere Markup zwischen den öffnenden und schließenden Tags des benutzerdefinierten `MyTag` Elements rendert wurde aufgerufen.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingChars;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingChars : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt ein Leerzeichen und den Schrägstrich (/) eines selbstschließenden Markuptags dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars> Feld wird in Markup Elementen verwendet, die selbst geschlossen sind. Beispiel:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingTagEnd As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingTagEnd;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingTagEnd : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt schließenden Schrägstrich und schließende spitze Klammer (/&gt;) eines selbstschließenden Markupelements dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> Feld wird von der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode beim Erstellen von selbstschließenden Markup Elementen verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie der Wert einer benutzerdefinierten `FileName`-Eigenschaft, gefolgt von einem Anführungszeichen und den durch das <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> Feld dargestellten Zeichen, dargestellt wird. Das Codebeispiel ruft die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode auf und übergibt das <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> Feld als Parameter Argument, um das-Element zu schließen.  
  
 In diesem Codebeispiel wird der `FileName`-Eigenschafts Wert und dann das folgende Markup gerendert:  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter_Constants#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter_Constants#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SemicolonChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SemicolonChar;" />
      <MemberSignature Language="F#" Value="val mutable SemicolonChar : char" Usage="System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt das Semikolon (;) dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Übergeben Sie das <xref:System.Web.UI.HtmlTextWriter.SemicolonChar>-Feld als Parameter Argument in einem <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methoden aufzurufen, wenn Sie ein Semikolon aus einem benutzerdefinierten Steuerelement oder Adapter renderingrendering.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Reihe von Stilen in einem Markup Element manuell dargestellt werden. Im Codebeispiel wird die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode verwendet, um `font-size`-und `border-style` Stil Attribute zu Rendering. Das <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> Feld wird als Parameter der <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode verwendet, um den Wert des `font-size` Attributs vom Anfang des `border-style` Attributs zu trennen.  
  
 In diesem Codebeispiel wird das folgende Markup gerendert:  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter_Constants#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter_Constants#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SingleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SingleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable SingleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt einen Apostroph (') dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie das Feld <xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar>, wenn es erforderlich ist, einen Apostroph zu erzeugen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SlashChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SlashChar;" />
      <MemberSignature Language="F#" Value="val mutable SlashChar : char" Usage="System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den Schrägstrich (/) dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie das <xref:System.Web.UI.HtmlTextWriter.SlashChar> Feld, um die Schrägstriche beim Schreiben einer URL zu erzeugen. Die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>-Methode verwendet das <xref:System.Web.UI.HtmlTextWriter.SlashChar> Feld, wenn das Endtag eines Markup Elements geschrieben wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie das `src`-Attribut eines `<img>` Elements manuell Rendering. Im Codebeispiel wird die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode mit dem Feld <xref:System.Web.UI.HtmlTextWriter.SlashChar> als Parameter verwendet, um Schrägstriche in dem Pfad zu erzeugen, der auf das `src` Attribut angewendet wird.  
  
 In diesem Codebeispiel wird das folgende Markup gerendert:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SpaceChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SpaceChar;" />
      <MemberSignature Language="F#" Value="val mutable SpaceChar : char" Usage="System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt ein Leerzeichen ( ) dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld wird von den Methoden <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> und <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> verwendet, wenn Trennzeichen zwischen Elementen und Attributen geschrieben werden.  
  
   
  
## Examples  
 In diesem Abschnitt finden Sie zwei Codebeispiele. Der erste veranschaulicht, wie ein Zeichen Array erstellt wird. Der zweite veranschaulicht, wie das Array verwendet wird.  
  
 In diesen Codebeispielen wird das folgende Markup generiert:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Im folgenden Codebeispiel wird gezeigt, wie ein <xref:System.Char> Array erstellt wird, das das <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld enthält.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Im folgenden Codebeispiel wird gezeigt, wie das Array, das im vorangehenden Codebeispiel erstellt wurde, als Parameter verwendet wird, wenn die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode aufgerufen wird.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const StyleEqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char StyleEqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable StyleEqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt das Formatzuweisungszeichen (<see langword=":" />) dar, das zum Festlegen von Formatattributen auf Werte verwendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> Feld wird von der <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A>-Methode verwendet, um Stil Namen und-Werte zu begrenzen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein `FontWeight` Attribut und der Wert von `bold` für das öffnende Tag eines Elements dargestellt werden. Im Codebeispiel wird die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode mit dem Feld <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> als Parameter verwendet, um das Zeichen zu Rendering, das den Wert der einzelnen Formatvorlagen Attribute festlegt.  
  
 In diesem Codebeispiel wird das folgende Markup gerendert:  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter_Constants#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter_Constants#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); void set(System::Web::UI::HtmlTextWriterTag value); };" />
      <MemberSignature Language="F#" Value="member this.TagKey : System.Web.UI.HtmlTextWriterTag with get, set" Usage="System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Wert für das angegebene Markupelement ab oder legt diesen fest.</summary>
        <value>Das Markupelement, dessen Starttag gerendert wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.TagKey%2A>-Eigenschaft wird nur für Klassen verwendet, die von der <xref:System.Web.UI.HtmlTextWriter>-Klasse erben. Die <xref:System.Web.UI.HtmlTextWriter.TagKey%2A>-Eigenschaft sollte nur in einem aufzurufenden <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode gelesen oder festgelegt werden. Dies ist das einzige Mal, dass es auf einen konsistenten Wert festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine überschriebene Version der <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A>-Methode in einer Klasse veranschaulicht, die von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitet wird. Er verwendet den Wert der <xref:System.Web.UI.HtmlTextWriter.TagKey%2A>-Eigenschaft, um zu bestimmen, ob ein Server Steuerelement, das das benutzerdefinierte <xref:System.Web.UI.HtmlTextWriter>-Objekt verwendet, ein `<label>` Markup Element rendert. Wenn dies der Fall ist, wird ein `<font>` Element mit einem `color`-Attribut, das auf `red` festgelegt ist, zurückgegeben, um die Formatierung des `<label>` Elements zu ändern.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Eigenschaftswert kann nicht festgelegt werden.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagLeftChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagLeftChar;" />
      <MemberSignature Language="F#" Value="val mutable TagLeftChar : char" Usage="System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt die öffnende spitze Klammer (&lt;) eines Markuptags dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> Feld wird von den Methoden <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>und <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> beim Schreiben von Markup Tags verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das erste Zeichen des öffnenden Tags eines `<table>`-Elements mit dem Elementnamen gerendert. Im Codebeispiel wird die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode mit dem Feld <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> als Parameter verwendet.  
  
 In diesem Codebeispiel wird das folgende Markup gerendert:  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter_Constants#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter_Constants#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ TagName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TagName : string with get, set" Usage="System.Web.UI.HtmlTextWriter.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tagnamen des gerenderten Markupelements ab oder legt diesen fest.</summary>
        <value>Der Tagname des gerenderten Markupelements.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.TagName%2A>-Eigenschaft wird nur für Klassen verwendet, die von der <xref:System.Web.UI.HtmlTextWriter>-Klasse erben. Die <xref:System.Web.UI.HtmlTextWriter.TagName%2A>-Eigenschaft sollte nur in <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methoden aufrufen gelesen oder festgelegt werden. Dies ist das einzige Mal, dass es auf einen konsistenten Wert festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine überschriebene Version der <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A>-Methode in einer Klasse veranschaulicht, die von der <xref:System.Web.UI.HtmlTextWriter>-Klasse abgeleitet wird. Im Codebeispiel wird überprüft, ob das zu Rendering Ende Element ein `<label>` Element ist, indem die <xref:System.String.Compare%2A?displayProperty=nameWithType>-Methode aufgerufen und dann der <xref:System.Web.UI.HtmlTextWriter.TagName%2A>-Eigenschafts Wert und eine Zeichenfolge, `"label"`, als Parameter Argumente übergeben werden. Wenn ein `<label>` Element gerade gerendert wird, wird das öffnende Tag eines `<font>` Elements, bei dem ein `color`-Attribut auf `red`festgelegt ist, vor dem öffnenden Tag des `<label>` Elements gerendert. Wenn es sich bei dem zu Rendering enden Element nicht um ein `<label>` Element handelt, wird die Version der <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> Methode der Basisklasse aufgerufen.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagRightChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagRightChar;" />
      <MemberSignature Language="F#" Value="val mutable TagRightChar : char" Usage="System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt die schließende spitze Klammer (&gt;) eines Markuptags dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.HtmlTextWriter.TagRightChar> Feld wird von den Methoden <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>und <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> beim Schreiben von Markup Tags verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie das schließende Tag eines `<table>` Elements durch Aufrufe von über Ladungen der <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode dargestellt wird. Zum Rendering des letzten Zeichens des Tags verwendet das Codebeispiel die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode mit dem <xref:System.Web.UI.HtmlTextWriter.TagRightChar> Feld als Parameter.  
  
 In diesem Codebeispiel wird das folgende Markup gerendert:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt den angegebenen Datentyp zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(bool value);" />
      <MemberSignature Language="F#" Value="override this.Write : bool -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Der <see cref="T:System.Boolean" />, der in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung eines booleschen Werts zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberSignature Language="F#" Value="override this.Write : char -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Das in den Ausgabestream zu schreibende Unicode-Zeichen.</param>
        <summary>Schreibt die Textdarstellung eines Unicode-Zeichens zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode zum Beenden des öffnenden Tags eines `<img>` Elements mithilfe der <xref:System.Web.UI.HtmlTextWriter.TagRightChar>-Konstante veranschaulicht.  
  
 In diesem Codebeispiel wird das folgende Markup gerendert:  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] -&gt; unit" Usage="htmlTextWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Das in den Ausgabestream zu schreibende Array von Unicode-Zeichen.</param>
        <summary>Schreibt die Textdarstellung eines Arrays von Unicode-Zeichen zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
   
  
## Examples  
 In diesem Abschnitt finden Sie zwei Codebeispiele. Der erste veranschaulicht, wie ein Zeichen Array erstellt wird. Der zweite veranschaulicht, wie das Array verwendet wird.  
  
 In diesen Codebeispielen wird das folgende Markup generiert:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Array von Zeichen erstellt wird, die `hello world`buchstabiert. Im-Array ist das <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld enthalten, das ein Leerzeichen zwischen den beiden Wörtern erstellt.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode verwendet wird, um das im vorangehenden Codebeispiel erstellte `hello world` Zeichen Array in eine Seite zu Rendering, wenn das Steuerelement, das diesen Beispielcode enthält, in einer Seite enthalten ist.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(double value);" />
      <MemberSignature Language="F#" Value="override this.Write : double -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Die Gleitkommazahl mit doppelter Genauigkeit, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung einer Gleitkommazahl mit doppelter Genauigkeit zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode verwendet wird, um den Wert des <xref:System.Double.MaxValue?displayProperty=nameWithType> Felds zu erzeugen.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(int value);" />
      <MemberSignature Language="F#" Value="override this.Write : int -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Die 32-Byte-Ganzzahl mit Vorzeichen, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung einer ganze 32-Byte-Zahl mit Vorzeichen zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(long value);" />
      <MemberSignature Language="F#" Value="override this.Write : int64 -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Die 64-Byte-Ganzzahl mit Vorzeichen, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung einer 64-Byte-Ganzzahl mit Vorzeichen zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Write : obj -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Das Objekt, das in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung eines Objekts zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode verwendet wird, um den Wert der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft zu erzeugen.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 Der Wert der <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft:  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(float value);" />
      <MemberSignature Language="F#" Value="override this.Write : single -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Die Gleitkommazahl mit einfacher Genauigkeit, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung einer Gleitkommazahl mit einfacher Genauigkeit zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode verwendet wird, um den Wert des <xref:System.Single.Epsilon?displayProperty=nameWithType> Felds zu erzeugen. Dies ist der kleinste mögliche Wert der <xref:System.Single>-Struktur.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="htmlTextWriter.Write s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Die Zeichenfolge, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die angegebene Zeichenfolge zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode verwendet wird, um eine Zeichenfolge zwischen den öffnenden und schließenden Tags eines benutzerdefinierten Markup Elements zu erzeugen.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg0">Ein zu formatierendes Objekt.</param>
        <summary>Schreibt eine Tabstoppzeichenfolge und eine formatierte Zeichenfolge zusammen mit allen ausstehenden Tabstopps und unter Verwendung derselben Semantik wie die <see cref="M:System.String.Format(System.String,System.Object)" />-Methode in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode verwendet wird, um eine formatierte Zeichenfolge mit dem Wert der <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft zu erzeugen.  
  
 [!code-csharp[MarkupTextWriter_Methods1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj[] -&gt; unit" Usage="htmlTextWriter.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg">Ein zu formatierendes Objektarray.</param>
        <summary>Schreibt eine formatierte Zeichenfolge, die die Textdarstellung eines Objektarrays enthält, zusammen mit allen ausstehenden Tabstopps in den Ausgabestream. Diese Methode verwendet die gleiche Semantik wie die <see cref="M:System.String.Format(System.String,System.Object[])" />-Methode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Der erste veranschaulicht, wie eine formatierte Zeichenfolge und der Inhalt eines Arrays dargestellt werden. Der zweite veranschaulicht, wie das Array deklariert wird.  
  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode verwendet wird, um eine formatierte Zeichenfolge und den Inhalt eines Objekt Arrays mit dem Namen `curPriceTime`zu erzeugen. Der Methodenaufrufe rendert den zweiten Member des Arrays, bevor der erste Member gerendert wird.  
  
 [!code-csharp[MarkupTextWriter_Methods2#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 Im folgenden Codebeispiel wird das Deklarieren des `curPriceTime` Objekt Arrays veranschaulicht.  
  
 [!code-csharp[MarkupTextWriter_Methods2#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] * int * int -&gt; unit" Usage="htmlTextWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Das Zeichenarray, aus dem Text in den Ausgabestream geschrieben werden soll.</param>
        <param name="index">Die Indexposition im Array, bei der mit dem Schreiben begonnen wird.</param>
        <param name="count">Die Anzahl der Zeichen, die in den Ausgabestream geschrieben werden sollen.</param>
        <summary>Schreibt die Textdarstellung eines Teilarrays von Unicode-Zeichen zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
   
  
## Examples  
 In diesem Abschnitt finden Sie zwei Codebeispiele. Der erste veranschaulicht, wie ein Zeichen Array erstellt wird. Der zweite veranschaulicht, wie das Array verwendet wird.  
  
 In diesen Codebeispielen wird das folgende Markup generiert:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 Im folgenden Codebeispiel wird gezeigt, wie ein Array von Zeichen erstellt wird, die `hello world`buchstabiert. Im-Array ist das <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld enthalten, das ein Leerzeichen zwischen den beiden Wörtern erstellt.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Im folgenden Teil des Code Beispiels werden die ersten fünf Zeichen des Arrays, das im vorhergehenden Beispiel erstellt wurde, mithilfe der Parameter `index` und `count` der <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode dargestellt.  
  
 [!code-csharp[MarkupTextWriter_Methods2#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg0">Ein zu formatierendes Objekt.</param>
        <param name="arg1">Ein zu formatierendes Objekt.</param>
        <summary>Schreibt eine formatierte Zeichenfolge, die die Textdarstellung zweier Objekte enthält, zusammen mit allen ausstehenden Tabstopps in den Ausgabestream. Diese Methode verwendet die gleiche Semantik wie die <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />-Methode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode generiert alle ausstehenden Registerkarten und ruft dann die <xref:System.IO.TextWriter.Write%2A> Basis Methode auf.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A>-Methode verwendet wird, um eine formatierte Zeichenfolge und die Werte der Eigenschaften <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.DateTime.Today%2A> zu erzeugen.  
  
 [!code-csharp[MarkupTextWriter_Methods1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt ein Markupattribut und dessen Wert in den Ausgabestream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string -&gt; unit&#xA;override this.WriteAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Das Attribut, das in den Ausgabestream geschrieben werden soll.</param>
        <param name="value">Der Wert, der dem Attribut zugewiesen ist.</param>
        <summary>Schreibt das angegebene Markupattribut und dessen Wert in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode, um Markup Attribute und deren Werte ohne Codierung zu schreiben. Die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode schreibt den Attribut Wert in doppelte Anführungszeichen ("). Wenn `value` `null`ist, schreibt die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode nur den Attributnamen.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Rendern eines `<img>`-Elements, in dem beide über Ladungen der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode aufgerufen werden. Das Codebeispiel verwendet den folgenden Prozess:  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>-Methode auf, die die öffnenden Zeichen des-Elements rendert.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29>-Überladung auf, die ein `alt` Attribut und seinen Wert in das `<img>`-Element schreibt.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>-Überladung auf, um ein benutzerdefiniertes `myattribute` Attribut mit dem Wert `No "encoding" required`zu erzeugen, und legt dann `fEncode` auf `false`fest.  
  
-   Schließt das öffnende Tag des Elements und ruft dann die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>-Methode auf, um das `<img>` Element zu schließen.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>In abgeleiteten Klassen können Sie die <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />-Methode überschreiben, um benutzerdefinierte Regeln zum Schreiben von Attributen und deren Werten zu definieren. Beispielsweise können Sie Code schreiben, mit dem die <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />-Methode ein Attribut mit einem leeren Wert schreiben konnte.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string * bool -&gt; unit&#xA;override this.WriteAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Das Markupattribut, das in den Ausgabestream geschrieben werden soll.</param>
        <param name="value">Der Wert, der dem Attribut zugewiesen ist.</param>
        <param name="fEncode"><see langword="true" />, um das Attribut und seinen zugewiesenen Wert zu codieren, andernfalls <see langword="false" />.</param>
        <summary>Schreibt das angegebene Markupattribut und den Wert in den Ausgabestream und schreibt den codierten Wert (falls angegeben).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode, um Markup Attribute und deren Werte mit oder ohne Codierung zu schreiben. Die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode verwendet die <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A>-Methode, um die Codierung durchzuführen.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode schreibt den Attribut Wert in doppelte Anführungszeichen ("). Wenn `value` `null`ist, schreibt die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode nur den Attributnamen.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Rendern eines `<img>`-Elements, in dem beide über Ladungen der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode aufgerufen werden. Das Codebeispiel verwendet den folgenden Prozess:  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>-Methode auf, die die öffnenden Zeichen des-Elements rendert.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29>-Überladung auf, die ein `alt` Attribut und seinen Wert in das `<img>`-Element schreibt.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>-Überladung auf, um ein benutzerdefiniertes `myattribute` Attribut mit dem Wert `No "encoding" required`zu erzeugen, und legt dann `fEncode` auf `false`fest.  
  
-   Schließt das öffnende Tag des Elements und ruft dann die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>-Methode auf, um das `<img>` Element zu schließen.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>In abgeleiteten Klassen können Sie die <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />-Methode überschreiben, um benutzerdefinierte Regeln zum Schreiben von Attributen und deren Werten zu definieren. Beispielsweise können Sie Code schreiben, mit dem die <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />-Methode ein Attribut mit einem leeren Wert schreiben konnte.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteBeginTag : string -&gt; unit&#xA;override this.WriteBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Das Markupelement, dessen Starttag geschrieben werden soll.</param>
        <summary>Schreibt alle Tabstopps und das Starttag des angegebenen Markupelements in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>-Methode schreibt nicht die schließende spitze Klammer (>) des öffnenden Tags des Markup Elements. Dies ermöglicht das Schreiben von Markup Attributen in das öffnende Tag des Elements. Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.TagRightChar> Konstante, um das öffnende Tag zu schließen, wenn Sie die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>-Methode aufrufen. Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>-Methode mit der <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd>-Konstante, wenn Sie Markup Elemente schreiben, die sich selbst schließen.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>-Methode wird von benutzerdefinierten Server Steuerelementen verwendet, die keine Tags-oder Attribut Zuordnung und Rendering-Markup Elemente auf die gleiche Weise für jede Anforderung zulassen.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Rendern eines `<img>`-Elements, in dem beide über Ladungen der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode aufgerufen werden. Das Codebeispiel verwendet den folgenden Prozess:  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>-Methode auf, die die öffnenden Zeichen des-Elements rendert.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29>-Überladung auf, die ein `alt` Attribut und seinen Wert in das `<img>`-Element schreibt.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>-Überladung auf, um ein benutzerdefiniertes `myattribute` Attribut mit dem Wert `No "encoding" required`zu erzeugen, und legt dann `fEncode` auf `false`fest.  
  
-   Schließt das öffnende Tag des Elements und ruft dann die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>-Methode auf, um das `<img>` Element zu schließen.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBreak();" />
      <MemberSignature Language="F#" Value="abstract member WriteBreak : unit -&gt; unit&#xA;override this.WriteBreak : unit -&gt; unit" Usage="htmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt ein <see langword="&lt;br /&gt;" />-Markupelement in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>-Methode, um Zeilenumbrüche in benutzerdefiniertem Steuerelement oder Adapter Markup zu Rendering Die <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>-Methode schreibt ein Leerzeichen zwischen dem `br` und `/`, um die HTML-Kompatibilität zu verbessern.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>-Methode aufgerufen wird, um ein `<br />` Element in den anfordernden Browser zu schreiben, nachdem die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>-Methode das codierte `&lt;custID&gt; &amp; &lt;invoice#&gt;` Markup geschrieben hat.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedText : string -&gt; unit&#xA;override this.WriteEncodedText : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="text">Die Textzeichenfolge, die codiert und in den Ausgabestream geschrieben werden soll.</param>
        <summary>Codiert den angegebenen Text für das anfordernde Gerät und schreibt ihn dann in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>-Methode, wenn eine Zeichenfolge eckige Klammern (\< oder >) oder ein kaufmännisches und-Zeichen (&) enthält.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>-Methode verwendet die <xref:System.Web.HttpUtility.HtmlEncode%2A>-Methode, um die Codierung auszuführen, und konvertiert auch Unicode-Zeichen `00A0` in `&nbsp;`.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie Sie die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>-Methode verwenden, um das codierte Markup `&lt;custID&gt; &amp; &lt;invoice#&gt;` in den Ausgabestream zu schreiben. Die <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>-Methode schreibt `<br />`.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="text" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrl (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrl : string -&gt; unit&#xA;override this.WriteEncodedUrl : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="url">Die URL-Zeichenfolge, die codiert und in den Ausgabestream geschrieben werden soll.</param>
        <summary>Codiert die angegebene URL und schreibt sie dann in den Ausgabestream. Die URL kann Parameter enthalten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A>-Methode codiert die Zeichenfolge im Parameter `url` in Übereinstimmung mit der Spezifikation für die URL-Codierung. Die Parameter, die dem Fragezeichen (?) folgen, werden nicht codiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A>-Methode verwendet wird, die die folgende Ausgabe generiert:  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrlParameter (urlText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrlParameter(System::String ^ urlText);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrlParameter : string -&gt; unit&#xA;override this.WriteEncodedUrlParameter : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrlParameter urlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="urlText">Die URL-Parameterzeichenfolge, die codiert und in den Ausgabestream geschrieben werden soll.</param>
        <summary>Codiert den angegebenen URL-Parameter für das anfordernde Gerät und schreibt diesen anschließend in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leerzeichen im Parameter Teil einer URL werden als Pluszeichen (+) codiert, und Gleichheitszeichen (=) werden als `%3d`codiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A>-Methode verwendet wird, die die folgende Ausgabe generiert:  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEndTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEndTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteEndTag : string -&gt; unit&#xA;override this.WriteEndTag : string -&gt; unit" Usage="htmlTextWriter.WriteEndTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Das Element, für das das Endtag geschrieben werden soll.</param>
        <summary>Schreibt alle Tabstopps und das Endtag des angegebenen Markupelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anders als bei der <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode hat die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>-Methode keine Logik, damit das Endtag des Elements mit dem entsprechenden öffnenden Tag übereinstimmt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Rendern eines `<img>`-Elements veranschaulicht. Das Codebeispiel verwendet den folgenden Prozess:  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>-Methode auf, um die öffnenden Zeichen des-Elements zu erzeugen.  
  
-   Ruft die zwei über Ladungen der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>-Methode auf, um Attribute in das `<img>`-Element zu schreiben.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>-Methode auf, um das `<img>` Element zu schließen.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteFullBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteFullBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteFullBeginTag : string -&gt; unit&#xA;override this.WriteFullBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteFullBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Das Element, das in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle Tabstopps und das Starttag des angegebenen Markupelements in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>-Methode schreibt automatisch die schließende spitze Klammer (>) des öffnenden Tags des-Elements, im Gegensatz zur <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>-Methode, die nicht die schließende spitze Klammer schreibt. Verwenden Sie <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> für Markup Elemente, die keine Attribute aufweisen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt Daten, die durch die überladenen Parameter angegeben werden, gefolgt von einem Zeichen für den Zeilenabschluss, in einen <see cref="T:System.Web.UI.HtmlTextWriter" />-Ausgabestream. Alle Versionen dieser Methode schreiben alle ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine();" />
      <MemberSignature Language="F#" Value="override this.WriteLine : unit -&gt; unit" Usage="htmlTextWriter.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt eine Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Weitere Informationen finden Sie unter <xref:System.IO.TextWriter.WriteLine%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode verwendet wird, um eine Zeile einzufügen, nachdem ein `<img>` Element gerendert wurde.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : bool -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Der boolesche Wert, der in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung eines booleschen Werts gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Das Zeichen, das in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und ein Unicode-Zeichen gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char[] -&gt; unit" Usage="htmlTextWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Das Zeichenarray, das in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und ein Array von Unicode-Zeichen gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
   
  
## Examples  
 In diesem Abschnitt finden Sie zwei Codebeispiele. Der erste veranschaulicht, wie ein Array erstellt wird. Im zweiten Beispiel wird die Verwendung dieses Arrays veranschaulicht.  
  
 In diesen Codebeispielen wird das folgende Markup generiert:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Im folgenden Codebeispiel wird gezeigt, wie ein Array von Zeichen erstellt wird, die `hello world`buchstabiert. Im-Array ist das <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld enthalten, das ein Leerzeichen zwischen den beiden Wörtern erstellt.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Im folgenden Codebeispiel wird das `hello world` Zeichen Array, das im vorhergehenden Beispiel erstellt wurde, mithilfe der <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode gerendert.  
  
 [!code-csharp[MarkupTextWriter_Methods2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : double -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Die Gleitkommazahl mit doppelter Genauigkeit, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung einer Gleitkommazahl mit doppelter Genauigkeit gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode verwendet wird, um den Wert des <xref:System.Double.MaxValue?displayProperty=nameWithType> Felds zu erzeugen.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : int -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Die 32-Byte-Ganzzahl mit Vorzeichen, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung einer ganzen 32-Byte-Zahl mit Vorzeichen, gefolgt von einer Zeichenfolge für den Zeilenabschluss, in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : int64 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Die 64-Byte-Ganzzahl mit Vorzeichen, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung einer 64-Byte-Ganzzahl mit Vorzeichen, gefolgt von einer Zeichenfolge für den Zeilenabschluss, in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : obj -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Das Objekt, das in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung eines Objekts gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode verwendet wird, um den Wert der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft in einem-Steuerelement zu erzeugen.  
  
 [!code-csharp[MarkupTextWriter_Methods1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : single -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Die Gleitkommazahl mit einfacher Genauigkeit, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung einer Gleitkommazahl mit einfacher Genauigkeit gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode verwendet wird, um den Wert des <xref:System.Single.Epsilon?displayProperty=nameWithType> Felds zu erzeugen. Dies ist der kleinste mögliche Wert der <xref:System.Single>-Struktur.  
  
 In diesem Codebeispiel wird das folgende Markup generiert:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="htmlTextWriter.WriteLine s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Die Zeichenfolge, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und eine Textzeichenfolge gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : uint32 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">Die 4-Byte-Ganzzahl ohne Vorzeichen, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung einer 4-Byte-Ganzzahl ohne Vorzeichen gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg0">Ein zu formatierendes Objekt.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und eine formatierte Zeichenfolge, die die Textdarstellung eines Objekts enthält, gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode verwendet die gleiche Semantik wie die <xref:System.String.Format%28System.String%2CSystem.Object%29>-Methode. Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode verwendet wird, um eine formatierte Zeichenfolge mit dem Wert der <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft zu erzeugen.  
  
 [!code-csharp[MarkupTextWriter_Methods1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj[] -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg">Ein zu formatierendes Objektarray.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und eine formatierte Zeichenfolge, die die Textdarstellung eines Objektarrays enthält, gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode verwendet die gleiche Semantik wie die <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29>-Methode. Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird verwendet, um die `value`-Methode zu schreiben.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Der erste veranschaulicht, wie eine Zeichenfolge und ein Array in den Ausgabestream geschrieben werden. Im zweiten Beispiel wird gezeigt, wie das Array deklariert wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode verwendet wird, um eine formatierte Zeichenfolge und den Inhalt eines Objekt Arrays in den Ausgabestream zu rendern.  
  
 [!code-csharp[MarkupTextWriter_Methods2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie das Objekt Array deklariert wird, das im vorangehenden Codebeispiel gerendert wurde.  
  
 [!code-csharp[MarkupTextWriter_Methods2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char[] * int * int -&gt; unit" Usage="htmlTextWriter.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Das Zeichenarray, aus dem Text in den Ausgabestream geschrieben werden soll.</param>
        <param name="index">Die Position im Zeichenarray, an der mit dem Schreiben begonnen wird.</param>
        <param name="count">Die Anzahl der Zeichen im Array, die in den Ausgabestream geschrieben werden sollen.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und ein Teilarray von Unicode-Zeichen gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Der erste veranschaulicht, wie ein Zeichen Array erstellt wird. Der zweite veranschaulicht, wie das Array verwendet wird.  
  
 In diesen Codebeispielen wird das folgende Markup generiert:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Array von Zeichen erstellt wird, die `hello world`buchstabiert. Im-Array ist das <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld enthalten, das ein Leerzeichen zwischen den beiden Wörtern erstellt.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Im folgenden Codebeispiel werden die ersten fünf Zeichen des Arrays, das im vorangehenden Codebeispiel erstellt wurde, mithilfe der Parameter `index` und `count` der <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode dargestellt.  
  
 [!code-csharp[MarkupTextWriter_Methods2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg0">Ein zu formatierendes Objekt.</param>
        <param name="arg1">Ein zu formatierendes Objekt.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und eine formatierte Zeichenfolge, die die Textdarstellung von zwei Objekten enthält, gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode verwendet die gleiche Semantik wie die <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29>-Methode. Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode verwendet wird, um eine formatierte Zeichenfolge und die Werte der <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft und der <xref:System.DateTime.Today%2A>-Eigenschaft zu erzeugen.  
  
 [!code-csharp[MarkupTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLineNoTabs (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLineNoTabs(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.WriteLineNoTabs : string -&gt; unit" Usage="htmlTextWriter.WriteLineNoTabs s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Die Zeichenfolge, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt eine Zeichenfolge gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream. Diese Methode ignoriert alle angegebenen Tabstopps.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A>-Methode anstelle der <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>-Methode, wenn Sie keinen Tabstopp Abstand vor der gerenderten Zeichenfolge `s`rendern möchten.  
  
 Die Standard Zeichenfolge für den Zeilen Abschluss ist ein Wagen Rücklauf Zeichen, gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> Basis Methode wird zum Schreiben des `value`-Parameters verwendet.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt ein Formatattribut und dessen Wert in den Ausgabestream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string -&gt; unit&#xA;override this.WriteStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Das Formatattribut, das in den Ausgabestream geschrieben werden soll.</param>
        <param name="value">Der dem Formatattribut zugewiesene Wert.</param>
        <summary>Schreibt das angegebene Formatattribut in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A>-Methode schreibt das Style-Attribut in der folgenden Form:  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string * bool -&gt; unit&#xA;override this.WriteStyleAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Das Formatattribut, das in den Ausgabestream geschrieben werden soll.</param>
        <param name="value">Der dem Formatattribut zugewiesene Wert.</param>
        <param name="fEncode"><see langword="true" />, wenn das Formatattribut und sein zugeordneter Wert codiert werden sollen, andernfalls <see langword="false" />.</param>
        <summary>Schreibt das angegebene Formatattribut und dessen Wert in den Ausgabestream, wobei der Wert ggf. codiert geschrieben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A>-Methode schreibt das Style-Attribut in der folgenden Form:  
  
 `name` `=` `value` `;`  
  
 Die <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A>-Methode wird zum Codieren des `value`-Parameters verwendet.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WriteUrlEncodedString (text As String, argument As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WriteUrlEncodedString(System::String ^ text, bool argument);" />
      <MemberSignature Language="F#" Value="member this.WriteUrlEncodedString : string * bool -&gt; unit" Usage="htmlTextWriter.WriteUrlEncodedString (text, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="argument" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="text">Die Zeichenfolge, die codiert und in den Ausgabestream geschrieben werden soll.</param>
        <param name="argument"><see langword="true" />, um die Zeichenfolge als Teil des Parameterabschnitts der URL zu codieren, <see langword="false" />, um die Zeichenfolge als Teil des Pfadabschnitts der URL zu codieren.</param>
        <summary>Schreibt die angegebene Zeichenfolge und codiert sie entsprechend den URL-Anforderungen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A>-Methode codiert Zeichen, die als URL-Trennzeichen (abhängig von der-Einstellung `argument`) verwendet werden können, in Zeichen folgen der Form `%xx`, wenn der ASCII-Code kleiner als 128 ist. Andernfalls `%uxxxx`, wobei `x` eine hexadezimale Ziffer ist.  
  
 Die Methoden <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> und <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> verwenden die <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A>-Methode als hilfsprogrammmethode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>

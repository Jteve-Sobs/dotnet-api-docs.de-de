<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d3a8fb2f7e2f68d7ac988952a27d646a631b2924" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34255042" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlTextWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlTextWriter : System::IO::TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Schreibt Markupzeichen und Text in den Ausgabestream eines ASP.NET-Serversteuerelements. Diese Klasse stellt Formatierungsfunktionen bereit, die von ASP.NET-Serversteuerelementen beim Rendern von Markup auf Clients verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter> Klasse wird zum Rendern von HTML 4.0 in Desktopbrowsern verwendet. Die <xref:System.Web.UI.HtmlTextWriter> ist auch die Basisklasse für alle MarkupWriter in den <xref:System.Web.UI> Namespace, einschließlich der <xref:System.Web.UI.ChtmlTextWriter>, <xref:System.Web.UI.Html32TextWriter>, und <xref:System.Web.UI.XhtmlTextWriter> Klassen. Diese Klassen werden verwendet, die Elemente, Attribute und Stil Layoutinformationen für verschiedene Arten von Markup zu schreiben. Darüber hinaus sind diese Klassen durch die Seiten- und Adapter-Klassen verwendet, die jede Markupsprache zugeordnet sind.  
  
 In den meisten Fällen verwendet ASP.NET automatisch den entsprechenden Writer für das anfordernde Gerät. Allerdings bei der Erstellung eines benutzerdefinierten Textverarbeitungsprogramms, oder wenn Sie einen bestimmten Writer zum Rendern einer Seite für ein bestimmtes Gerät angeben möchten, müssen Sie zuordnen den Writer die Seite in der `controlAdapters` Abschnitt der Datei der Anwendung-Browser.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.Control.Render%2A> Methode eines benutzerdefinierten Steuerelements, das von abgeleitet ist die <xref:System.Web.UI.Control> Klasse. Das Codebeispiel veranschaulicht die Verwendung verschiedener <xref:System.Web.UI.HtmlTextWriter> Methoden, Eigenschaften und Felder.  
  
 [!code-csharp[MarkupTextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.HtmlTextWriter" />-Klasse.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Die <see cref="T:System.IO.TextWriter" />-Instanz, die den Inhalt des Markups rendert.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.HtmlTextWriter" />-Klasse, die eine Standard-Tabstoppzeichenfolge verwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> Konstruktor verwendet den <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> Konstante beim Einzug einer Zeile erforderlich ist. Ruft die <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> Überladung zum Initialisieren der neuen Instanz.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> Konstruktor zum Erstellen eines benutzerdefinierten <xref:System.Web.UI.HtmlTextWriter> Objekt mit dem Namen `StyledLabelHtmlWriter.` bei der `MyPage` benutzerdefinierte Klasse, die abgeleitet ist die <xref:System.Web.UI.Page> Klasse, die von einem Client angefordert wird Webbrowser, und er verwendet die `StyledLabelHtmlWriter` Klasse, um seinen Inhalt in den Ausgabestream zu rendern.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, der den Inhalt des Markups rendert.</param>
        <param name="tabString">Die Zeichenfolge, die für das Rendern eines Zeileneinzugs verwendet wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.HtmlTextWriter" />-Klasse unter Verwendung des angegebenen Tabstoppzeichens.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> Konstruktor verwendet `tabString` beim Einzug einer Zeile ist erforderlich. Ruft die <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=nameWithType> Basiskonstruktor zum Initialisieren der neuen Instanz.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> Konstruktor zum Erstellen eines benutzerdefinierten <xref:System.Web.UI.HtmlTextWriter> Objekt mit dem Namen `StyledLabelHtmlWriter.` bei der `MyPage` benutzerdefinierte Klasse, die abgeleitet ist die <xref:System.Web.UI.Page> Klasse, die von einem Client angefordert wird Webbrowser, und er verwendet die `StyledLabelHtmlWriter` Klasse, um seinen Inhalt in den Ausgabestream zu rendern.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, das festgelegte Markupattribut und den festgelegten Markupwert hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Attributs, das hinzugefügt wird. </param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen werden soll.</param>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, das festgelegte Markupattribut und den festgelegten Markupwert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> Methode, wenn das Attribut nicht der ist die <xref:System.Web.UI.HtmlTextWriterAttribute> Werte, oder wenn das Attribut nicht erst zur Laufzeit bekannt ist.  
  
 Für eine Instanz eines beliebigen Markupelements angegebenen der <xref:System.Web.UI.HtmlTextWriter> Klasse verwaltet eine Liste der Attribute für dieses Element. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> -Methode aufgerufen wird, werden alle Attribute hinzugefügt, indem die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methode das Starttag des Elements gerendert werden. Anschließend wird die Liste der Attribute aus gelöscht der <xref:System.Web.UI.HtmlTextWriter> Objekt.  
  
 Die Codierungsmuster für das Rendern von Markupelemente lautet folgendermaßen:  
  
-   Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methode, um das Element Attribute hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie andere Methoden nach Bedarf beim Rendern des Inhalts zwischen Start- und Endtags des Elements gefunden.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aufrufen der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methode vor dem Aufruf der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode. Der Code ruft zwei verschiedene Überladungen der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> und zwei verschiedene Überladungen der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> vor dem Aufrufen der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode zum Rendern einer `<span>` Element in den Ausgabestream. Die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> Methode dient zum Definieren des benutzerdefinierten Attributs mit dem Namen `CustomAttribute` und der benutzerdefinierte Wert mit dem Namen `CustomAttributeValue` für die `<span>` -Element, das dieser Code rendert.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, das das Markupattribut darstellt, das dem Ausgabestream hinzugefügt werden soll.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen werden soll.</param>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, das Markupattribut und den Attributwert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> Methode, um ein Standardmarkup-Attribut zu rendern.  
  
 Für eine Instanz eines beliebigen Markupelements angegebenen der <xref:System.Web.UI.HtmlTextWriter> Klasse verwaltet eine Liste der Attribute für dieses Element. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> -Methode aufgerufen wird, werden alle Attribute, die von hinzugefügt werden die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methode das Starttag des Elements gerendert werden. Anschließend wird die Liste der Attribute aus gelöscht der <xref:System.Web.UI.HtmlTextWriter>.  
  
 Die Codierungsmuster für das Rendern von Markupelemente lautet folgendermaßen:  
  
-   Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methode, um das Element Attribute hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie andere Methoden nach Bedarf beim Rendern des Inhalts zwischen Start- und Endtags des Elements gefunden.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> -Methode zum Hinzufügen einer `Onclick` -Attribut auf ein Markupelement, und legen Sie als Wert in den folgenden ECMAScript-Code:  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String, fEndode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, bool fEndode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Attributs, das hinzugefügt wird. </param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen werden soll.</param>
        <param name="fEndode">
          <see langword="true" />, wenn das Attribut und sein Wert codiert werden sollen, andernfalls <see langword="false" />.</param>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, das festgelegte Markupattribut und den festgelegten Markupwert mit einer optionalen Codierung hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> Methode, wenn das Attribut nicht der ist die <xref:System.Web.UI.HtmlTextWriterAttribute> Werte oder ist erforderlich, wenn das Attribut erst zur Laufzeit und die Codierung nicht bekannt ist.  
  
 Für eine Instanz eines beliebigen Markupelements angegebenen der <xref:System.Web.UI.HtmlTextWriter> Klasse verwaltet eine Liste der Attribute für dieses Element. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> -Methode aufgerufen wird, werden alle Attribute hinzugefügt, indem die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methode das Starttag des Elements gerendert werden. Anschließend wird die Liste der Attribute aus gelöscht der <xref:System.Web.UI.HtmlTextWriter> Objekt.  
  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> Methode mit `fEncode` festgelegt `true`, wenn das Attribut ein Anführungszeichen ("), ein kleiner als-Zeichen (<), möglicherweise enthalten kann oder ein kaufmännisches und-Zeichen (&). Der Methodenaufruf wird das Attribut, um den Anforderungen des anfordernden Geräts codieren. Sie können festlegen, `fEncode` zu `false`, wenn Sie wissen, dass keines dieser Zeichen generiert wird oder wenn Sie wissen, dass das Attribut bereits codiert ist.  
 
Wenn der Attributtyp ist `Style`, der Wert wird nicht codiert werden auch dann, wenn `fEndode` ist `true`. Sicherstellen Sie, dass der Formatwert CSS-kompatibler und nicht bösartigen Code enthalten.
  
 Die Codierungsmuster für das Rendern von Markupelemente lautet folgendermaßen:  
  
-   Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methode, um das Element Attribute hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie andere Methoden nach Bedarf beim Rendern des Inhalts zwischen Start- und Endtags des Elements gefunden.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> Methode, um sicherzustellen, dass ein benutzerdefiniertes Attribut, mit dem Namen `myattribute`, und der Wert für nicht codiert werden ein `<img>` Element.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddAttribute (name As String, value As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Attributs, das hinzugefügt wird. </param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen werden soll.</param>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, das das Attribut darstellt.</param>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />-Objekt erstellt und anschließend die <see cref="T:System.Web.UI.HtmlTextWriter" />-Methode aufruft, das festgelegte Markupattribut und den festgelegten Markupwert sowie einen <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Enumerationswert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29> Methode nur beim erben von der <xref:System.Web.UI.HtmlTextWriter> Klasse. Sie können zum Erstellen neuer `name` und `key` -Paare für Attribute.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, das das Markupattribut darstellt, das dem Ausgabestream hinzugefügt werden soll.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen werden soll.</param>
        <param name="fEncode">
          <see langword="true" />, wenn das Attribut und sein Wert codiert werden sollen, andernfalls <see langword="false" />.</param>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, das Markupattribut und den Attributwert mit einer optionalen Codierung hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> Methode, um ein Standardmarkup-Attribut, mit optionalen Codierung zu rendern.  
  
 Für eine Instanz eines beliebigen Markupelements angegebenen der <xref:System.Web.UI.HtmlTextWriter> Klasse verwaltet eine Liste der Attribute für dieses Element. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> -Methode aufgerufen wird, werden alle Attribute hinzugefügt, indem die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> das Starttag des Elements gerendert werden. Anschließend wird die Liste der Attribute aus gelöscht der <xref:System.Web.UI.HtmlTextWriter> Objekt.  
  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> Methode mit `fEncode` festgelegt `true`, wenn das Attribut ein Anführungszeichen ("), ein kleiner als-Zeichen (<), möglicherweise enthalten kann oder ein kaufmännisches und-Zeichen (&). Der Methodenaufruf wird das Attribut, um den Anforderungen des anfordernden Geräts codieren. Sie können festlegen, `fEncode` zu `false`, wenn Sie wissen, dass keines dieser Zeichen generiert wird oder wenn Sie wissen, dass das Attribut bereits codiert ist.  
 
 Wenn der Attributtyp ist `Style`, der Wert wird nicht codiert werden auch dann, wenn `fEncode` ist `true`. Sicherstellen Sie, dass der Formatwert CSS-kompatibler und nicht bösartigen Code enthalten.

  
 Die Codierungsmuster für das Rendern von Markupelemente lautet folgendermaßen:  
  
-   Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methode, um das Element Attribute hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie andere Methoden nach Bedarf beim Rendern des Inhalts zwischen Start- und Endtags des Elements gefunden.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> Methode, um sicherzustellen, dass den Zeichenfolgenwert, der zugewiesen ist ein `Alt` -Attribut für ein `<img>` Element für das anfordernde Gerät codiert ist.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt dem Starttag des Elements, das das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt erstellt und anschließend die <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode aufruft, ein Markupformatattribut hinzu.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge, die das hinzuzufügende Formatattribut enthält.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen wird.</param>
        <summary>Fügt dem Markupstarttag, das durch einen nachfolgenden Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode erstellt wird, das angegebene Markupformatattribut und den Attributwert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> Methode, wenn das Format kein Mitglied wird die <xref:System.Web.UI.HtmlTextWriterStyle> Enumeration oder erst zur Laufzeit bekannt ist.  
  
 Die <xref:System.Web.UI.HtmlTextWriter> Klasse verwaltet eine Liste der Formate für die Markupelemente, sondert rendert. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> -Methode aufgerufen wird, werden alle Formatvorlagen, die von hinzugefügt werden die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Methode das Starttag des Elements gerendert werden. Anschließend wird die Liste der Stile gelöscht.  
  
 Die Codierungsmuster für das Rendern von Markupelemente lautet folgendermaßen:  
  
-   Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Methode, um jede Formatvorlage hinzuzufügen, der dem Element Attribute.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie andere Methoden nach Bedarf beim Rendern des Inhalts zwischen dem Element öffnenden und schließenden Tags gefunden.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> Methode zum Rendern `font-size` und `color` Stilattribute auf eine `<p>` Element. Dieses Codebeispiel verwendet die <xref:System.Web.UI.HtmlTextWriter> Klasse, um den Inhalt des Steuerelements zu rendern.  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (key As HtmlTextWriterStyle, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::Web::UI::HtmlTextWriterStyle key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, der das Formatattribut darstellt, das im Ausgabestream hinzugefügt wird.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen wird.</param>
        <summary>Fügt dem Start-Markuptag, das durch einen nachfolgenden Aufruf der <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Methode erstellt wird, das im <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Wert angegebene Markupformatattribut und den Attributwert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29> Methode, wenn das Format Mitglied ist die <xref:System.Web.UI.HtmlTextWriterStyle> Enumeration und vor der Laufzeit bekannt ist.  
  
 Die <xref:System.Web.UI.HtmlTextWriter> Klasse verwaltet eine Liste der Formate für die Markupelemente, sondert rendert. Wenn die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> -Methode aufgerufen wird, werden alle Formatvorlagen hinzugefügt, indem die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Methode das Starttag des Elements gerendert werden. Anschließend wird die Liste der Stile gelöscht.  
  
 Die Codierungsmuster für das Rendern von Markupelemente lautet folgendermaßen:  
  
-   Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Methode, um jede Formatvorlage hinzuzufügen, der dem Element Attribute.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>-Methode.  
  
-   Verwenden Sie andere Methoden nach Bedarf beim Rendern des Inhalts zwischen dem Element öffnenden und schließenden Tags gefunden.  
  
-   Verwenden Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>-Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Teil eine Überschreibung der Verwendung der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode in einer Klasse abgeleitet wurde. die <xref:System.Web.UI.HtmlTextWriter> Klasse. Im Code wird überprüft, ob ein `<Label>` Element gerendert wird. Wenn dies der Fall ist, die <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> Methode wird aufgerufen, um zu überprüfen, ob eine `Color` Formatattributs definiert wurde, für die `<Label>` Element. Wenn eine `Color` Attribut nicht definiert wurde, ruft der Code dieser Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> -Methode zum Hinzufügen der `Color` -Attribut auf das Style-Attribut, und legen Sie dessen Wert auf `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddStyleAttribute (name As String, value As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge, die das hinzuzufügende Formatattribut enthält.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen wird.</param>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, der das hinzuzufügende Formatattribut darstellt.</param>
        <summary>Fügt dem Start-Markuptag, das durch einen nachfolgenden Aufruf der <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Methode erstellt wird, das angegebene Markupformatattribut und den Attributwert sowie einen <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Enumerationswert hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29> Methode nur beim erben von der <xref:System.Web.UI.HtmlTextWriter> Klasse. Sie können zum Erstellen neuer `name` und `value` -Paare für <xref:System.Web.UI.HtmlTextWriterStyle> Attribute.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginRender();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Benachrichtigt ein <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt oder ein Objekt einer abgeleiteten Klasse darüber, dass ein Steuerelement gerendert werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter> Implementierung der Klasse die <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> Methode hat keine Funktion. Müssen Sie überschreiben die <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> Methode in einer Klasse abgeleitet <xref:System.Web.UI.HtmlTextWriter> um Rendering-Funktionen bereitzustellen. Z. B. in einer Markupsprache, die möglicherweise `<p>` Elemente unmittelbar vor einem Steuerelement, aber wo gerendert werden die Notwendigkeit der `<p>` Element zuvor bestimmt ist, können Sie die <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> außer Kraft setzen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt und gibt alle zugeordneten Systemressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung der <xref:System.Web.UI.HtmlTextWriter.Close%2A> Methodenaufrufe der <xref:System.IO.TextWriter.Close%2A?displayProperty=nameWithType> -Basismethode.  
  
 Nach einem Aufruf der <xref:System.Web.UI.HtmlTextWriter.Close%2A> -Methode, alle Vorgänge für die <xref:System.Web.UI.HtmlTextWriter> Objekt Ausnahmen auslösen, da alle zugehörigen Ressourcen freigegeben wurden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultTabString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultTabString;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt ein einzelnes Tabstoppzeichen dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die einzige Registerkarte wird durch das 9 ASCII-Zeichen dargestellt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie einen Konstruktor erstellt wird, erfordert eine <xref:System.IO.TextWriter> Objekt als Parameter an und übergibt die <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> Feld als Parameterargument an eine zweite Version des Konstruktors. Wenn dieser Konstruktor, aus dem Code aufgerufen wird die <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> Feld definiert die Richtlinie Einzug für die Instanz des Markupwriters, das von einer Seite oder einem Adapter verwendet wird.  
  
 [!code-csharp[MarkupTextWriter_Methods3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const DoubleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char DoubleQuoteChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt das Anführungszeichenzeichen (") dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> Feld wird verwendet, durch die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methode, um ein Attribut zu schließen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Rendern einer `border` -Attribut für ein `<table>` Element. Der Code Ruft die <xref:System.Web.UI.HtmlTextWriter.Write%2A> -Methode rendert das Attribut und seinen Wert und verwendet die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode zum Rendern der <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> und <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> Felder.  
  
 Dieses Codebeispiel wird das folgende Markup gerendert:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codiert den Wert des angegebenen Markupattributs basierend auf den Anforderungen des <see cref="T:System.Web.HttpRequest" />-Objekts des aktuellen Kontexts.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeAttributeValue (value As String, fEncode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeAttributeValue(System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Eine Zeichenfolge, die den zu codierenden Attributwert enthält.</param>
        <param name="fEncode">
          <see langword="true" />, um den Attributwert zu codieren, andernfalls <see langword="false" />.</param>
        <summary>Codiert den Wert des angegebenen Markupattributs basierend auf den Anforderungen des <see cref="T:System.Web.HttpRequest" />-Objekts des aktuellen Kontexts.</summary>
        <returns>Eine Zeichenfolge, die den codierten Attributwert enthält. <see langword="null" />, wenn <paramref name="value" /> leer ist, oder der nicht codierte Attributwert, wenn <paramref name="fEncode" /> gleich <see langword="false" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> Methode, wenn das Attribut nicht ist ein <xref:System.Web.UI.HtmlTextWriterAttribute> Enumerationswert oder erst zur Laufzeit bekannt ist.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> -Methode entfernt doppelte Anführungszeichen ("), kaufmännische und-Zeichen (&) und kleiner als ein Zeichen (<), damit diese ungültige tags nicht generiert werden, unabhängig von der Eingabe. Die eigentliche Codierung wird ausgeführt, indem die <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aufrufen der <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Methode als Parameter in eine <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> -Methodenaufruf, und klicken Sie dann codiert eine `color:blue` Attributwert formatieren.  
  
 [!code-cpp[HtmlTextWriter_Methods#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter_Methods#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter_Methods#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeAttributeValue (attrKey As HtmlTextWriterAttribute, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ EncodeAttributeValue(System::Web::UI::HtmlTextWriterAttribute attrKey, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey">Ein <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, das das Markupattribut darstellt.</param>
        <param name="value">Eine Zeichenfolge, die den zu codierenden Attributwert enthält.</param>
        <summary>Codiert den Wert des angegebenen Markupattributs basierend auf den Anforderungen des <see cref="T:System.Web.HttpRequest" />-Objekts des aktuellen Kontexts.</summary>
        <returns>Eine Zeichenfolge, die den codierten Attributwert enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> -Methode entfernt doppelte Anführungszeichen ("), kaufmännische und-Zeichen (&) und kleiner als ein Zeichen (<), damit diese ungültige tags nicht generiert werden, unabhängig von der Eingabe. Die eigentliche Codierung wird ausgeführt, indem die <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeUrl (url As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeUrl(System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Eine Zeichenfolge, die die zu codierende URL enthält.</param>
        <summary>Führt eine minimale URL-Codierung durch, indem Leerzeichen in der angegebenen URL in die Zeichenfolge "%20" konvertiert werden.</summary>
        <returns>Eine Zeichenfolge, die die codierte URL enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL-Codierung eines Zeichens, besteht ein Prozentzeichen (%), gefolgt von der zweistellige hexadezimalen Darstellung (Groß-/Kleinschreibung) dem ISO-Latin-Codepunkt für das Zeichen ab. Die hexadezimale Darstellung eines Leerzeichens ist 20.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aufrufen der <xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A> Methode, um alle Leerzeichen in der URL zu konvertieren, der als Parameter übergeben wird ein <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> -Methodenaufruf.  
  
 [!code-cpp[HtmlTextWriter_Methods#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter_Methods#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Codierung ab, die das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt beim Schreiben von Inhalt in die Seite verwendet.</summary>
        <value>Die <see cref="T:System.Text.Encoding" />, mit der das Markup in die Seite geschrieben wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> Eigenschaft ruft den Wert ab, von der Basisklasse <xref:System.IO.TextWriter> Objekt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> Eigenschaft schreiben Sie den Typ der Codierungstyp fest, der ein benutzerdefiniertes Steuerelement verwendet, um Text in die Seite zu rendern, die es enthält.  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter_Properties#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndRender();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Benachrichtigt ein <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt oder ein Objekt einer abgeleiteten Klasse darüber, dass das Rendern eines Steuerelements beendet wurde. Sie können mit dieser Methode beliebige in der <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />-Methode geöffnete Markupelemente schließen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter> Implementierung der Klasse die <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> Methode hat keine Funktion. Sie überschreiben müssen <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> in einer abgeleiteten Klasse die <xref:System.Web.UI.HtmlTextWriter> Klasse um Rendering-Funktionen bereitzustellen.  
  
 Können Sie die <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> Methode, um beliebige Markupelemente schließen geöffnet wird, der <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberSignature Language="VB.NET" Value="Public Const EndTagLeftChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EndTagLeftChars;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt linke spitze Klammer und Schrägstrich (&lt;/) des Endtags eines Markupelements dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> Feld wird verwendet, durch die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode zum Erstellen von Markup Endtags.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie das Endtag des Rendern einer `<table>` Markupelement mithilfe der <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> und die <xref:System.Web.UI.HtmlTextWriter.TagRightChar> Felder als Parameterwerte in Aufrufen der <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode.  
  
 Dieses Codebeispiel wird das folgende Markup gerendert:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt das Starttag eines Markupelements mit Attributen, die die Layout- und Zeichenformatierung des angegebenen Formats implementieren.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">Ein <see cref="T:System.Web.UI.WebControls.Style" />, der den Beginn für das Layout und die Formatierung des Markupblocks angibt.</param>
        <summary>Schreibt das Starttag eines <see langword="&lt;span&gt;" />-Elements mit Attributen, die die Layout- und Zeichenformatierung des angegebenen Formats implementieren.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode, um zu einem Datenblock Markup Formate, wie Farbe oder Rahmen Breite Hintergrund anzuwenden.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> und <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methoden ermöglichen es einem Geräteadapter oder das Steuerelement Markup zu erstellen, verwendet das Zeichenformat des angegebenen Formats. Verwenden Sie den gleichen Wert für `style` in der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode, mit denen Sie in der entsprechenden <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methode.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> Methode rendert das Anfangstag des ein `<span>` Element. Diese Methode fügt dann die erforderlichen Attribute und Stilattribute, des öffnenden Tags von der `<span>` Element zum Anzeigen der Einstellungen angegeben die <xref:System.Web.UI.WebControls.Style> Objekt. Wenn Sie ein anderes Markupelement enthalten die Attribute und Stilattribute, verwenden Sie rendern möchten die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> überladen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie eine benutzerdefinierte Klasse, die mit dem Namen `TextSample`, abgeleitet von der <xref:System.Web.UI.WebControls.WebControl> Klasse bereit, die verwendet der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode anwenden einer <xref:System.Web.UI.WebControls.Style.ForeColor%2A> Formatvorlage, die eine Textzeichenfolge.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode rendert das HTML `<span style="color:Navy;">`. Die <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methodenaufruf schließt die `<span>` Element, nachdem der Text gerendert wurde.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">Ein <see cref="T:System.Web.UI.WebControls.Style" />, der den Beginn für das Layout und die Formatierung des Markupblocks angibt.</param>
        <param name="tag">Ein <see cref="T:System.Web.UI.HtmlTextWriterTag" />, das das Starttag des Markupelements mit dem in <c>style</c> angegebenen Formatobjekt angibt.</param>
        <summary>Schreibt das Starttag eines Markupelements mit Attributen, die die Layout- und Zeichenformatierung des angegebenen Formats implementieren.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode, um zu einem Datenblock Markup Formate, wie Farbe oder Rahmen Breite Hintergrund anzuwenden.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> und <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methoden ermöglichen es einem Geräteadapter oder das Steuerelement Markup zu erstellen, verwendet das Zeichenformat des angegebenen Formats. Verwenden Sie den gleichen Wert für `style` in der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode, mit denen Sie in der entsprechenden <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methode.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> Methode rendert das Starttag des Elements gemäß der `tag` Parameter. Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> Methode fügt dann die erforderlichen Attribute und Stilattribute dem Starttag des Elements, das die Einstellungen anzuzeigen, die vom angegebenen der <xref:System.Web.UI.WebControls.Style> Objekt. Verwenden der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> Überladung zum Rendern des öffnenden Tags von einem `<span>` Element.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie eine benutzerdefinierte Klasse, die mit dem Namen `TextSample`, abgeleitet von der <xref:System.Web.UI.WebControls.WebControl> Klasse bereit, die verwendet der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode anwenden einer <xref:System.Web.UI.WebControls.Style.ForeColor%2A> Formatvorlage, die eine Textzeichenfolge.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode rendert das HTML`<span style="color:Navy;">`. Die <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methodenaufruf schließt die `<span>` Element, nachdem der Text gerendert wurde.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char EqualsChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt das Gleichheitszeichen (<see langword="=" />) dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Möglicherweise möchten Sie verwenden die <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> Feld statt der <xref:System.Web.UI.HtmlTextWriter.EqualsChar> Feld beim Erstellen des öffnenden Trennzeichens eines Attributwerts.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Rendern der `src` Attribut und ist Teil des Werts für ein `<img>` Element. Der Code verwendet die <xref:System.Web.UI.HtmlTextWriter.EqualsChar> Feld eine <xref:System.Web.UI.HtmlTextWriter.Write%2A> -Methodenaufruf, die das Gleichheitszeichen (=) zwischen dargestellt die `src` Attribut und seinen Wert.  
  
 Dieses Codebeispiel wird das folgende Markup gerendert:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsDoubleQuoteString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EqualsDoubleQuoteString;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt ein Gleichheitszeichen (=) und doppelte Anführungszeichen (") gemeinsam in einer Zeichenfolge (=") dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> Feld wird verwendet, durch die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> und <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methoden zum Erstellen des öffnenden Trennzeichens der Attributwerte enthalten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Rendern einer `border` -Attribut für ein `<table>` Element. Der Code Ruft die <xref:System.Web.UI.HtmlTextWriter.Write%2A> -Methode rendert das Attribut und seinen Wert und verwendet die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode zum Rendern der <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> und <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> Felder.  
  
 Dieses Codebeispiel wird das folgende Markup gerendert:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt das Endtag eines Markupelements zum Beenden des angegebenen Layouts und der Zeichenformatierung.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">Ein <see cref="T:System.Web.UI.WebControls.Style" />, der das zu beendende Layout und die Formatierung angibt.</param>
        <summary>Schreibt das Endtag eines <see langword="&lt;span&gt;" />-Elements zum Beenden des angegebenen Layouts und der Zeichenformatierung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29> Methode rendert das schließende Tag eine `<span>` Element nach dem Endtag des Steuerelements, schließen das Element geöffnet, mit den entsprechenden <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> aufrufen.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> und <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methoden ermöglichen es einem Geräteadapter oder Steuerelement, um Markup zu erstellen, startet und beendet einen Block durch Verwenden der Zeichen Formatierung des angegebenen Formats. Verwenden Sie den gleichen Wert für `style` in der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode, mit denen Sie in der entsprechenden <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie eine benutzerdefinierte Klasse, die mit dem Namen `TextSample`, abgeleitet von der <xref:System.Web.UI.WebControls.WebControl> Klasse bereit, die verwendet der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode anwenden einer <xref:System.Web.UI.WebControls.Style.ForeColor%2A> Formatvorlage, die eine Textzeichenfolge.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode rendert das HTML `<span style="color:Navy;">`. Die <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methodenaufruf schließt die `<span>` Element, nachdem der Text gerendert wurde.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">Ein <see cref="T:System.Web.UI.WebControls.Style" />, der das Beenden der Anwendung von Layout und Formatierung auf den Ausgabetext angibt.</param>
        <param name="tag">Ein <see cref="T:System.Web.UI.HtmlTextWriterTag" />, dass das Endtag des Markupelements angibt, das die Attribute enthielt, die das angegebene Format angewendet haben. Dies muss dem im <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />-Aufruf übergebenen Schlüssel entsprechen.</param>
        <summary>Schreibt das Endtag des angegebenen Markupelements, um das angegebene Layout und Formatieren von Zeichen zu beenden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> Methode rendert das Endtag des Elements, das angegeben wird `tag` schließen Sie nach dem Endtag des Steuerelements, das Element, das mit den entsprechenden geöffnet wurde <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> -Methodenaufruf.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> und <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methoden ermöglichen es einem Geräteadapter oder Steuerelement, um Markup zu erstellen, startet und beendet einen Block durch Verwenden der Zeichen Formatierung des angegebenen Formats. Verwenden Sie den gleichen Wert für `style` in der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode, mit denen Sie in der entsprechenden <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie eine benutzerdefinierte Klasse, die mit dem Namen `TextSample`, abgeleitet von der <xref:System.Web.UI.WebControls.WebControl> Klasse bereit, die verwendet der <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode anwenden einer <xref:System.Web.UI.WebControls.Style.ForeColor%2A> Formatvorlage, die eine Textzeichenfolge.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode rendert das HTML `<span style="color:Navy;">`. Die <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methodenaufruf schließt die `<span>` Element, nachdem der Text gerendert wurde.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FilterAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FilterAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Markup- und Formatattribute aus allen Eigenschaften der Seite oder des Webserversteuerelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vor dem Rendern Attribute auf ein Markupelement die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> -Methode aufgerufen wird. Wiederum die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Methodenaufrufe der <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> und <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> Methoden für jedes Attribut und den Stil zu rendern.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mithilfe eine benutzerdefinierte Klasse abgeleitet wurde. die <xref:System.Web.UI.HtmlTextWriter> Klasse bereit, die überschreibt die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Methode. Beim Aufrufen der <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Überschreibung prüft, ob der TextWriter rendert `<label>` oder `<a>` Elemente:  
  
-   Wenn eine `<label>` Element gerendert wird, die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> -Methode überprüft, ob eine `style` Attribut für das Element gerendert wird, und falls nicht, erstellt eine `style` Attribut, und wird auf `color: blue`.  
  
-   Wenn ein `<a>` Element gerendert wird, die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Methode bestimmt, ob ein `href` Attribut enthalten ist, und falls nicht, fügt ein `href` an die URL http://www.cohowinery.com.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht sämtliche Puffer für das aktuelle <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt und veranlasst, dass alle gepufferten Daten in den Ausgabestream geschrieben werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter> Implementierung der Klasse die <xref:System.Web.UI.HtmlTextWriter.Flush%2A> Methode ruft nur die <xref:System.IO.TextWriter.Flush%2A> -Basismethode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeKey (attrName As String) As HtmlTextWriterAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterAttribute GetAttributeKey(System::String ^ attrName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">Eine Zeichenfolge, die das Attribut enthält, für das das <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> abgerufen werden soll.</param>
        <summary>Ruft den entsprechenden <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />-Enumerationswert für das angegebene Attribut ab.</summary>
        <returns>Der <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />-Enumerationswert für das angegebene Attribut, andernfalls ein ungültiger <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />-Wert, wenn das Attribut kein Member der Enumeration ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `attrName` ist `null` oder eine leere Zeichenfolge (""), oder kann nicht gefunden werden, in der Tabelle von Attributnamen, den Wert 1, um ein <xref:System.Web.UI.HtmlTextWriterAttribute> Objekt, das zurückgegeben wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mit einer von abgeleiteten Klasse die <xref:System.Web.UI.HtmlTextWriter> Klasse bereit, die überschreibt die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode. Die Überschreibung prüft, ob `tagKey` ist gleich der <xref:System.Web.UI.HtmlTextWriterTag.Font> Feld, der angibt, dass eine `<font>` Markupelement gerendert wird. Wenn daher die Überschreibung ruft der <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> Methode, um herauszufinden, ob die `<font>` Element enthält eine <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut. Wenn die <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> gibt `false`, die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methodenaufrufe der <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> -Methode, die definiert die <xref:System.Web.UI.HtmlTextWriterAttribute.Size> und legt seinen Wert auf `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeName (attrKey As HtmlTextWriterAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetAttributeName(System::Web::UI::HtmlTextWriterAttribute attrKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">Das <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, für das der Markupattributname abgerufen werden soll.</param>
        <summary>Ruft den Namen des Markupattributs ab, das dem angegebenen <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />-Wert zugeordnet ist.</summary>
        <returns>Eine Zeichenfolge, die den Namen des Markupattributs enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> Methode gibt eine leere Zeichenfolge (""), wenn `attrKey` ist kein gültiger <xref:System.Web.UI.HtmlTextWriterAttribute> Wert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> -Methode zum Konvertieren einer <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Enumerationswert, auf seinem Zeichenfolgennamen.  
  
 [!code-cpp[HtmlTextWriter_Methods3#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleKey (styleName As String) As HtmlTextWriterStyle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterStyle GetStyleKey(System::String ^ styleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">Das Formatattribut, für das der <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> abgerufen wird.</param>
        <summary>Ruft den <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Enumerationswert für das angegebene Format ab.</summary>
        <returns>Der <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Enumerationswert, der <paramref name="styleName" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> -Methode gibt den Wert-1 als ein <xref:System.Web.UI.HtmlTextWriterStyle> Wert, wenn `styleName` entspricht einem beliebigen <xref:System.Web.UI.HtmlTextWriterStyle> -Enumerationswert.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode in einer Klasse abgeleitet wurde. die <xref:System.Web.UI.HtmlTextWriter> Klasse. Die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Außerkraftsetzung bestimmt, ob eine `<label>` Markup gerendert werden, und wenn dies der Fall ist, überprüft das Element auf ein <xref:System.Web.UI.HtmlTextWriterStyle.Color> Attribut. Wenn eine <xref:System.Web.UI.HtmlTextWriterStyle.Color> Attribut wurde nicht definiert, die <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> Methode dient als erster Parameter in einem Aufruf der <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> -Methode zum Hinzufügen einer <xref:System.Web.UI.HtmlTextWriterStyle.Color> -Attribut auf eine `<label>` Markupelement, und legen die <xref:System.Web.UI.HtmlTextWriterStyle.Color> -Attribut`red`.  
  
 [!code-cpp[HtmlTextWriter_Methods#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleName (styleKey As HtmlTextWriterStyle) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetStyleName(System::Web::UI::HtmlTextWriterStyle styleKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">Das <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, für das der Formatattributname abgerufen werden soll.</param>
        <summary>Ruft den Namen des dem angegebenen <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Enumerationswert zugeordneten Markupformatattributs ab.</summary>
        <returns>Der Formatattributname, der dem in <paramref name="styleKey" /> angegebenen <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Enumerationswert zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `styleKey` ist kein gültiger <xref:System.Web.UI.HtmlTextWriterStyle> -Objekt, das <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> Methode gibt eine leere Zeichenfolge ("").  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, um zu überprüfen, ob ein `<label>` Element gerendert wird. Wenn deshalb überprüft, ob eine <xref:System.Web.UI.HtmlTextWriterStyle.Color> Formatattributs für das Element definiert wurde. Wenn das Attribut nicht definiert wurde, die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Methode wird aufgerufen, und die <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> -Methode konvertiert die <xref:System.Web.UI.HtmlTextWriterStyle.Color> Enumerationsmember in seine Zeichenfolgendarstellung Übergabe an die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Methode.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagKey (tagName As String) As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::HtmlTextWriterTag GetTagKey(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Das Markupelement, für das das <see cref="T:System.Web.UI.HtmlTextWriterTag" /> abgerufen werden soll.</param>
        <summary>Ruft den <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Enumerationswert ab, der dem angegebenen Markupelement zugeordnet ist.</summary>
        <returns>Der <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Enumerationswert, andernfalls <see cref="T:System.Web.UI.HtmlTextWriterTag" />, wenn <paramref name="tagName" /> keinem bestimmten <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />-Wert zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `tagName` ist `null`, eine leere Zeichenfolge (""), oder kann nicht gefunden werden, in der Tabelle der Markup-Tagnamen, die <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> Methode gibt die <xref:System.Web.UI.HtmlTextWriterTag.Unknown> Feld.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die Überladung der überschreiben die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> -Methode, eine Zeichenfolge als Parameter annimmt. An übergebene Zeichenfolge die <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> -Methode, die es dem entsprechenden konvertiert <xref:System.Web.UI.HtmlTextWriterTag> Enumerationsmember, und klicken Sie dann übergibt dieses an die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Überladung mit eine <xref:System.Web.UI.HtmlTextWriterTag> -Enumerationswert als Parameter.  
  
 [!code-cpp[HtmlTextWriter_Methods3#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter_Methods3#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter_Methods3#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Das <see cref="T:System.Web.UI.HtmlTextWriterTag" />, für das das Markupelement abgerufen werden soll.</param>
        <summary>Ruft das Markupelement ab, das dem angegebenen <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Enumerationswert zugeordnet ist.</summary>
        <returns>Eine Zeichenfolge, die das Markupelement darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `tagKey` ist kein gültiger <xref:System.Web.UI.HtmlTextWriterTag> Wert, der <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> Methode gibt eine leere Zeichenfolge ("").  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Schließen einer `<font>` -Element mithilfe der <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Methode. Die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Methodenaufrufe der <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> -Methode zum Konvertieren der <xref:System.Web.UI.HtmlTextWriterTag.Font> Wert in eine Zeichenfolge.  
  
 [!code-cpp[HtmlTextWriter_Methods3#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods3#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter_Methods3#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Tabstopps ab, um die der Anfang jeder Markupzeile eingerückt wird.</summary>
        <value>Die Anzahl von Tabstopps, um die jede Zeile eingerückt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einzug erfolgt durch Schreiben die Zeichenfolge, die von angegeben wird die `tabString` Parameter von der <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> Konstruktor die Anzahl der Häufigkeit, mit der vom angegebenen die <xref:System.Web.UI.HtmlTextWriter.Indent%2A> Eigenschaft.  
  
 Wenn die <xref:System.Web.UI.HtmlTextWriter.Indent%2A> Eigenschaft auf einen negativen Wert festgelegt ist, es vor dem Speichern in 0 geändert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie den Wert zu erhöhen, die zugewiesen ist die <xref:System.Web.UI.HtmlTextWriter.Indent%2A> Eigenschaft, wenn das Anfangstag des Attribute hinzugefügt wurden eine `<span>` Element und die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> -Methode aufgerufen wurde. Dies erhöht den Einzug für alle Markup, die in gerendert wird die `<span>` Element.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerWriter As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ InnerWriter { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Textwriter ab, der den inneren Inhalt des Markupelements schreibt, oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.IO.TextWriter" />, der den inneren Markupinhalt schreibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Innere Markup-Inhalt ist der Text zwischen den Start- und Endtag eines Elements Markup Language.  
  
 Wenn die <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> -Eigenschaftensatz auf eine <xref:System.IO.TextWriter> -Objekt, das eine Instanz ist die <xref:System.Web.HttpWriter> Klasse, dieser Tatsache wird aufgeführt, sowie ein separater Verweis wird gespeichert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mithilfe ein benutzerdefiniertes Webserver-Steuerelement, abgeleitet wurde. die <xref:System.Web.UI.WebControls.WebControl> Klasse bereit, die überschreibt die <xref:System.Web.UI.Control.Render%2A> Methode. Er verwendet die <xref:System.Web.UI.HtmlTextWriter> Klasse zum Schreiben einer `<font>` Element. Nachdem sie das Starttag des Elements geschrieben hat, verwendet die <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> Eigenschaft, um die Zeichenfolge zu schreiben `"<br> The time on the server:"` und verkettet diese Zeichenfolge mit dem Wert von der <xref:System.DateTime.Now%2A?displayProperty=nameWithType> Eigenschaft.  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter_Properties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter_Properties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob das angegebene Markupattribut und sein Wert beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden sollen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key">Das dem Markupattribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <summary>Bestimmt, ob das angegebene Markupattribut und sein Wert beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden sollen.</summary>
        <returns>
          <see langword="true" />, wenn das Attribut beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Abrufen des Werts zuzuweisenden der <xref:System.Web.UI.HtmlTextWriterAttribute> -Objekts die <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> Überladung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Überschreibung der Verwendung der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode in einer Klasse, die von erben die <xref:System.Web.UI.HtmlTextWriter> Klasse. Die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Überschreiben wird geprüft, ob eine `<font>` Markupelement gerendert wird. Wenn daher die Überschreibung ruft der <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> Methode, um zu überprüfen, ob die `<font>` Element enthält eine <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut. Wenn nicht, wird die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methodenaufrufe der <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> -Methode, die definiert die <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut, und legt seinen Wert auf `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">Das dem Markupattribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <param name="value">Der Wert, der dem Attribut zugewiesen ist.</param>
        <summary>Bestimmt, ob das angegebene Markupattribut und sein Wert beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden sollen.</summary>
        <returns>
          <see langword="true" />, wenn das Attribut beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> -Methode zurückkehrt `true`, der Wert, der zugewiesen werden, die <xref:System.Web.UI.HtmlTextWriterAttribute> Objekt wird zurückgegeben, der `value` Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob ein Markupformatattribut beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden soll.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key">Das dem Attribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Bestimmt, ob das angegebene Markupformatattribut beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden soll.</summary>
        <returns>
          <see langword="true" />, wenn das Attribut beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um den Wert abzurufen, die mit dem angegebenen Formatattribut gerendert werden, verwenden die <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> Überladung von der <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, um zu überprüfen, ob ein `<label>` Element gerendert wird. Wenn dies der Fall ist, die <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> -Methode überprüft, ob eine <xref:System.Web.UI.HtmlTextWriterStyle.Color> Formatattributs für das Element definiert wurde. Wenn die <xref:System.Web.UI.HtmlTextWriterStyle.Color> Attribut wurde nicht definiert, die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Methode definiert die <xref:System.Web.UI.HtmlTextWriterStyle.Color> Attribut, und legt seinen Wert auf `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">Das dem Attribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <param name="value">Der dem Formatattribut zugewiesene Wert.</param>
        <summary>Bestimmt, ob das angegebene Markupformatattribut und sein Wert beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden sollen.</summary>
        <returns>
          <see langword="true" />, wenn das Attribut und sein Wert beim nächsten Aufruf der <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />-Methode gerendert werden, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> -Methode zurückkehrt `true`, der Wert, der zugewiesen werden, die <xref:System.Web.UI.HtmlTextWriterStyle> Attribut ist, zurückgegeben, der `value` Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidFormAttribute (attribute As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidFormAttribute(System::String ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attribute">Eine Zeichenfolge, die den Namen des zu überprüfenden Attributs enthält.</param>
        <summary>Prüft ein Attribut darauf, ob es im Starttag eines <see langword="&lt;form&gt;" />-Markupelements gerendert werden kann.</summary>
        <returns>Immer <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter> Implementierung der Klasse die <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> -Methode zurückkehrt `true` für alle Attribute. Überschreiben der <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> , die Attribute einzuschränken, die in das Anfangstag des gerendert werden kann ein `<form>` Element.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Überschreiben der <see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" /> -Methode zurückgegeben <see langword="true" /> nur für die Attribute, die in aufgenommen werden können die <see langword="&lt;form&gt;" /> Element des Markups für die abgeleitete Klasse von der <see cref="T:System.Web.UI.HtmlTextWriter" /> Klasse dient.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge für den Zeilenabschluss ab, die vom <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt verwendet wird, oder legt diese fest.</summary>
        <value>Die vom aktuellen <see cref="T:System.Web.UI.HtmlTextWriter" /> verwendete Zeichenfolge für den Zeilenabschluss.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßige Zeichenfolge für den Zeilenabschluss ist ein Wagenrücklauf, gefolgt von einem Zeilenvorschub ("\r\n").  
  
 Die Zeichenfolge für den Zeilenabschluss in den Ausgabestream, wenn eine geschrieben wird von der <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methoden aufgerufen wird. Wenn die <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> -Eigenschaftensatz auf `null`, das Standard-neue-Zeile-Zeichen verwendet wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mithilfe eine benutzerdefinierte Klasse abgeleitet wurde. die <xref:System.Web.UI.HtmlTextWriter> Klasse bereit, die überschreibt die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Methode. Beim Aufrufen der <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Überschreibung prüft, ob der TextWriter rendert `<label>` oder `<a>` Elemente. Wenn dies der Fall ist, die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Methode bestimmt, ob ein Formatattribut für die Bezeichnung definiert ist. Wenn kein Format definiert ist, die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Methode legt fest, den Standardwert für die `style:color` Attribut Blau. Die <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Methode verwendet dann die <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> Eigenschaft, um eine Linie einzufügen unterbrechen im Markuptag und schreibt Sie beliebige andere Attribute.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Attributs, das gerendert werden soll.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Attribut zugewiesen wird.</param>
        <param name="key">Das dem Markupattribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <summary>Bestimmt, ob das angegebene Markupattribut und sein Wert im aktuellen Markupelement gerendert werden können.</summary>
        <returns>Immer <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter> Implementierung der Klasse die <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> immer Methodenrückgabe `true`. Die <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> Außerkraftsetzungen können bestimmen, ob ein Attribut auf der Seite gerendert wird.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> Methode. Wenn eine <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut gerendert wird, aber die <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Wert ist nicht `30pt`, die <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> überschreiben Aufrufe der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> -Methode zum Hinzufügen einer <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut, und legen Sie dessen Wert auf `30pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Erben von der <see cref="T:System.Web.UI.HtmlTextWriter" /> -Klasse, die Sie überschreiben die <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> Methode zurückzugebenden <see langword="false" /> zu verhindern, dass ein Attribut gerendert wird, auf ein bestimmtes Element gerendert wird, oder für ein bestimmtes Markup gerendert wird. Z. B., wenn Sie nicht möchten, dass das Objekt abgeleitet wurde. <see cref="T:System.Web.UI.HtmlTextWriter" /> zum Rendern der <see langword="bgcolor" /> -Attribut auf <see langword="&lt;table&gt;" /> Elemente, die Sie überschreiben die <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> und zurückgeben <see langword="false" /> Wenn <paramref name="name" /> übergibt <see langword="bgcolor" /> und die <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> Eigenschaftswert ist <see langword="table" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Formatvorlagenattributs, der gerendert werden soll.</param>
        <param name="value">Eine Zeichenfolge mit dem Wert, der dem Formatattribut zugewiesen wird.</param>
        <param name="key">Das dem Formatattribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Bestimmt, ob das angegebene Markupformatattribut und sein Wert im aktuellen Markupelement gerendert werden können.</summary>
        <returns>Immer <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter> Implementierung der Klasse die <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> immer Methodenrückgabe `true`. Die <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> Außerkraftsetzungen können bestimmen, ob ein Formatattribut auf der Seite gerendert wird.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> Methode. Wenn eine <xref:System.Web.UI.HtmlTextWriterStyle.Color> Formatattributs gerendert wird, aber die <xref:System.Web.UI.HtmlTextWriterStyle.Color> Wert ist kein `purple`, die <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> überschreiben verwendet die <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> -Methode zum Festlegen der <xref:System.Web.UI.HtmlTextWriterStyle.Color> -Attribut auf `purple`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Erben von der <see cref="T:System.Web.UI.HtmlTextWriter" /> -Klasse, die Sie überschreiben die <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> Methode zurückzugebenden <see langword="false" /> zu verhindern, dass ein Formatattribut gerendert wird, auf ein bestimmtes Element gerendert wird, oder für eine bestimmte Markupsprache gerendert wird. Z. B., wenn Sie das Objekt nicht möchten, die abgeleitet ist <see cref="T:System.Web.UI.HtmlTextWriter" /> zum Rendern der <see langword="color" /> Formatattribut eine <see langword="&lt;p&gt;" /> Element, überschreiben Sie die <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> und zurückgeben <see langword="false" /> beim <paramref name="name" /> übergibt <see langword="color" />und <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> Eigenschaftswert ist <see langword="p" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Elements, das gerendert werden soll.</param>
        <param name="key">Das dem Element zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Element.</param>
        <summary>Bestimmt, ob das angegebene Markupelement auf der anfordernden Seite gerendert wird.</summary>
        <returns>Immer <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter> Implementierung der Klasse die <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> immer Methodenrückgabe `true`. Die <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> Außerkraftsetzungen können bestimmen, ob ein Element auf der Seite gerendert wird.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> Methode. Wenn eine <xref:System.Web.UI.HtmlTextWriterTag.Font> Element gerendert wird, die <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> überschreiben verwendet die <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> Methode, um zu bestimmen, ob ein <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut gerendert wird. Falls nicht, verwendet der <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methode zum Erstellen einer <xref:System.Web.UI.HtmlTextWriterAttribute.Size> Attribut, und legen Sie dessen Wert auf `20pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Erben von der <see cref="T:System.Web.UI.HtmlTextWriter" /> -Klasse, die Sie überschreiben die <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> -Methode zur Rückgabe <see langword="false" /> um zu verhindern, dass ein Markupelement überhaupt oder für eine bestimmte Markupsprache gerendert wird. Z. B., wenn Sie das Objekt nicht möchten, die abgeleitet ist <see cref="T:System.Web.UI.HtmlTextWriter" /> zum Rendern der <see langword="&lt;font&gt;" /> Element, überschreiben Sie die <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> -Methode zur Rückgabe <see langword="false" /> Wenn eine Seite angefordert wird, die enthält eine <see langword="&lt;font&gt;" /> Element.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTabs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTabs();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt eine Reihe von Tabstoppzeichenfolgen, die die Einzugsebene für eine Zeile mit Markupzeichen darstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> -Methode verwendet die <xref:System.Web.UI.HtmlTextWriter.Indent%2A> Eigenschaft, um zu bestimmen, wie viele Registerkarte Zeichenfolgen beim Schreiben in den gewünschten Einzug zu erhalten.  
  
 Die Registerkarte "-Zeichenfolge wird angegeben, mit der <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Konstruktor. Wenn keine Registerkarte Zeichenfolge angegeben wird, die <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> Konstanten (`\t`) verwendet wird.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> Methode in einer Klasse, die abgeleitet ist die <xref:System.Web.UI.HtmlTextWriter> Klasse. Die <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> -Überschreibung verwendet immer die <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> Konstante, um den Einzug auszuführen.  
  
 [!code-cpp[HtmlTextWriter_Methods#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter_Methods#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberSignature Language="VB.NET" Value="Protected Function PopEndTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ PopEndTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt das zuletzt gespeicherte Markupelement aus der Liste der gerenderten Elementen.</summary>
        <returns>Ein <see cref="T:System.String" />, der das zuletzt gerenderte Markupelement enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elemente werden hinzugefügt, um die Liste der gerenderten Markupelemente durch die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode. Die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> -Methode entfernt Markupelemente aus der Liste durch Aufrufen der <xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Liste der gerenderten Elemente ist leer.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushEndTag (endTag As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushEndTag(System::String ^ endTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">Das Endtag des Markupelements.</param>
        <summary>Speichert das angegebene Markupelement für die spätere Verwendung, wenn das Endtag eines Markupelements generiert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elemente werden hinzugefügt, um die Liste der Elemente des gerenderten Markups bei der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methodenaufrufe der <xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A> Methode. Die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Methode Markupelemente aus der Liste entfernt, nachdem das Endtag für das Element gerendert wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterAttribute (name As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterAttribute(System::String ^ name, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge, die den Namen des zu registrierenden Markupattributs enthält.</param>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, das dem Attributnamen entspricht.</param>
        <summary>Registriert Markupattribute (die Literale oder dynamisch generiert sein können) aus der Quelldatei, sodass sie auf dem anfordernden Client richtig gerendert werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch Aufrufe von vordefinierten Attribute der HTML-Markup Language registriert sind die <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> Methode bei der ersten <xref:System.Web.UI.HtmlTextWriter> Objekt erstellt wird. Dynamische Attribute können registriert werden, mithilfe der <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> Methode zu anderen Zeiten.  
  
 Die verwendete Registrierungstabelle der <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> Methode ist `static`, damit die Registrierung der Attribute für alle gilt <xref:System.Web.UI.HtmlTextWriter> Objekte auf dem Hostcomputer.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterStyle (name As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterStyle(System::String ^ name, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Die aus der Quelldatei übergebene Zeichenfolge, die den Formatnamen angibt.</param>
        <param name="key">Der <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, der dem angegebenen Format entspricht.</param>
        <summary>Registriert Markupformateigenschaften (die Literale oder dynamisch generiert sein können) aus der Quelldatei, sodass sie auf dem anfordernden Client richtig gerendert werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch Aufrufe der vordefinierten Attribute cascading Stylesheet (CSS) der HTML-Markup Language registriert sind die <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> Methode bei der ersten <xref:System.Web.UI.HtmlTextWriter> Objekt erstellt wird. Dynamische Formatattribute können registriert werden, mithilfe der <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> Methode zu anderen Zeiten.  
  
 Die verwendete Registrierungstabelle der <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> Methode ist `static`, damit die Registrierung der Attribute für alle gilt <xref:System.Web.UI.HtmlTextWriter> Objekte auf dem Hostcomputer.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterTag (name As String, key As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterTag(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge, die das HTML-Tag enthält.</param>
        <param name="key">Ein <see cref="T:System.Web.UI.HtmlTextWriterTag" />, das das zu rendernde Element angibt.</param>
        <summary>Registriert Markuptags (die Literale oder dynamisch generiert sein können) aus der Quelldatei, sodass sie auf dem anfordernden Client richtig gerendert werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die vordefinierten Markuptags der HTML-Sprache werden durch Aufrufe von registriert die <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> Methode bei der ersten <xref:System.Web.UI.HtmlTextWriter> Objekt erstellt wird. Dynamische Markuptags können registriert werden, mithilfe der <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> Methode zu anderen Zeiten.  
  
 Die verwendete Registrierungstabelle der <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> Methode ist `static`, sodass die Registrierung von Tags für alle gilt <xref:System.Web.UI.HtmlTextWriter> Objekte auf dem Hostcomputer.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterContent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt Text oder Abstände, die sich hinter dem Inhalt und vor dem Endtag des zu rendernden Markupelements befinden, in den Markupausgabestream.</summary>
        <returns>Eine Zeichenfolge, die die Abstände oder den Text enthält, der hinter dem Inhalt des Elements geschrieben werden soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> Methode ist hilfreich, wenn Sie untergeordnete Elemente in der aktuellen Markupelement einfügen möchten.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> Methode in einer Klasse abgeleitet wurde. die <xref:System.Web.UI.HtmlTextWriter> Klasse, um zu bestimmen, ob ein `<label>` Element gerendert wird. Wenn dies der Fall ist, die <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> Außerkraftsetzung fügt das Endtag ein `<font>` unmittelbar vor dem Endtag eines Elements der `<label>` Element. Wenn ein anderes Element als `<label>` gerendert wird, die <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> base-Methode verwendet wird.  
  
 [!code-cpp[HtmlTextWriter_Methods1#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Die <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementierung der Klasse die <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> -Methode zurückkehrt <see langword="null" />. Überschreiben Sie <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> , wenn Sie nach den Elementinhalt und vor dem Endtag Abstände oder Text schreiben möchten.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt Abstände oder Text, der hinter dem Endtag eines Markupelements steht.</summary>
        <returns>Der hinter dem Endtag des Elements zu schreibende Abstand oder Text.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> Methode ist hilfreich, wenn Sie zusätzliche schließende Tags nach der Element-Tag rendern möchten.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> Methode, um zu bestimmen, ob eine Klasse abgeleitet der <xref:System.Web.UI.HtmlTextWriter> Klasse rendern ist ein `<label>` Element. Wenn dies der Fall ist, die <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> Außerkraftsetzung fügt das Endtag ein `<font>` Element unmittelbar nach der `<label>` Element. Ist er kein `<label>` Element, das <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> base-Methode wird verwendet.  
  
 [!code-cpp[HtmlTextWriter_Methods4#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Die <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementierung der Klasse die <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> -Methode zurückkehrt <see langword="null" />. Überschreiben Sie <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> Wenn Text oder den Abstand nach dem Element ein schließendes Tag geschrieben werden soll.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeContent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt Text oder Abstände vor dem Inhalt und hinter dem Starttag eines Markupelements.</summary>
        <returns>Der vor dem Inhalt des Elements zu schreibende Text oder Abstand. Wenn <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> nicht überschrieben wurde, wird <see langword="null" /> zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> Methode ist hilfreich, wenn Sie untergeordnete Elemente in der aktuellen Markupelement vor dem inneren Markup einfügen möchten.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> Methode, um zu bestimmen, ob eine Klasse abgeleitet der <xref:System.Web.UI.HtmlTextWriter> Klasse wird zum Rendern einer `<label>` Element. Wenn dies der Fall ist, die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> Überschreibung fügt das Starttag des eine `<font>` unmittelbar nach dem Starttag des Elements der `<label>` Element. Ist er kein `<label>` Element, das <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> base-Methode wird verwendet.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Die <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementierung der Klasse die <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> -Methode zurückkehrt <see langword="null" />. Überschreiben Sie <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> Wenn Text oder den Abstand nach dem Starttag, jedoch vor der Inhalt des Elements geschrieben werden soll.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt Text oder Abstände vor dem Starttag eines Markupelements.</summary>
        <returns>Der Text oder Abstand, der vor dem Starttag des Markupelements geschrieben werden soll. <see langword="null" />, wenn die Methode nicht überschrieben wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> Methode ist hilfreich, wenn Sie vor dem Starttag des gewünschten Elements Weitere Starttags rendern möchten.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> Methode bestimmen Sie, ob eine Klasse, die abgeleitet ist die <xref:System.Web.UI.HtmlTextWriter> Klasse wird zum Rendern einer `<label>` Element. Wenn dies der Fall ist, die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> Überschreibung fügt das Starttag des eine `<font>` Element unmittelbar vor dem `<label>` Element. Wenn es nicht wiedergegeben wird eine `<label>` Element, die <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> base-Methode wird verwendet.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Die <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementierung der Klasse die <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> -Methode zurückkehrt <see langword="null" />. Überschreiben Sie <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> Wenn Text oder den Abstand vor dem Starttag des Elements geschrieben werden soll.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt das Starttag eines Markupelements in den Ausgabestream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Eine Zeichenfolge mit dem Namen der Markupelements, für das das Starttag gerendert wird.</param>
        <summary>Schreibt das Starttag des angegebenen Markupelements in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> außer Kraft setzen, der die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29> -Methode, wenn eine der nicht das Markupelement ist das <xref:System.Web.UI.HtmlTextWriterTag> Enumerationswerte.  
  
 Generieren Sie ein Markupelement mithilfe von der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> -Methode, rufen Sie zuerst die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> und <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Methoden bei Bedarf an alle Element- oder Stilattribute, die in das Starttag des Elements angezeigt werden. Rufen Sie nach dem Generieren des inneren Markups, die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Methode, um das Endtag zu generieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aufrufen der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> -Methode in ein benutzerdefiniertes Steuerelement zum Rendern des öffnenden Tags von einer nicht standardmäßigen `MyTag` Element. Das Codebeispiel ruft dann die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode zum Rendern von inneren Markup, und ruft dann die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Methode, um das Element zu schließen.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Einer der <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Werte, der das Starttag des zu rendernden Markupelements definiert.</param>
        <summary>Schreibt das Starttag des Markupelements, das dem angegebenen <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Enumerationswert zugeordnet ist, in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Überladung von der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29> Methode, wenn das Markupelement ein bekannter Typ aufweist, der die <xref:System.Web.UI.HtmlTextWriterTag> Enumerationswerte.  
  
 Generieren Sie ein Markupelement mithilfe von der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> -Methode, rufen Sie zuerst die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> und <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Methoden bei Bedarf an alle Element- oder Stilattribute, die in das Starttag des Elements angezeigt werden. Rufen Sie nach dem Generieren des inneren Markups, die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Methode, um das Endtag zu generieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode, um die Ausgabe des öffnenden Tags von einer `<img>` Element. Die Attribute, die auf das Element durch hinzugefügt werden die <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Methode werden in das öffnende `<img>` Tag. Die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Methode wird verwendet, um das Endtag zu generieren.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt das Endtag eines Markupelements in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie die <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Methode nach der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Überladung wird aufgerufen, und nach dem gesamten Inhalt zwischen dem Start- und Endtags (innere Markup) des Elements gerendert wurde.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aufrufen der <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Methode nach sowohl die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode, die das öffnende Tag generiert und die <xref:System.Web.UI.HtmlTextWriter.Write%2A> -Methode, die das innere Markup zwischen dem Start- und Endtags des benutzerdefinierten rendert`MyTag` Element aufgerufen wurden.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingChars;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt ein Leerzeichen und den Schrägstrich (/) eines selbstschließenden Markuptags dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars> Feld wird verwendet, im Markupelemente, die Self-geschlossene sind. Zum Beispiel:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingTagEnd As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingTagEnd;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt schließenden Schrägstrich und schließende spitze Klammer (/&gt;) eines selbstschließenden Markupelements dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> Feld wird verwendet, durch die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode beim selbstschließende Markupelemente erstellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie den Wert einer benutzerdefinierten gerendert `FileName` gefolgt von einem Anführungszeichen-Eigenschaft und die Zeichen, dargestellt durch die <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> Feld. Im Code-Beispiel wird die <xref:System.Web.UI.HtmlTextWriter.Write%2A> -Methode auf und übergibt die <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> Feld als Parameterargument für das Element zu schließen.  
  
 Dieses Codebeispiel rendert die `FileName` Eigenschaftswert, und klicken Sie dann das folgende Markup:  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter_Constants#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter_Constants#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SemicolonChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SemicolonChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt das Semikolon (;) dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Übergeben Sie die <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> Feld als Parameterargument im eine <xref:System.Web.UI.HtmlTextWriter.Write%2A> -Methodenaufruf, wenn Sie ein Semikolon von ein benutzerdefiniertes Steuerelement oder einen Adapter rendern möchten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Reihe von Formaten auf ein Markupelement manuell zu rendern. Das Codebeispiel verwendet die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode zum Rendern `font-size` und `border-style` Stilattribute. Die <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> Feld wird als Parameter verwendet den <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode zum Trennen des Werts des der `font-size` Attribut vom Anfang der `border-style` Attribut.  
  
 Dieses Codebeispiel wird das folgende Markup gerendert:  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter_Constants#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter_Constants#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SingleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SingleQuoteChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt einen Apostroph (') dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar> Feld bei Bedarf einen Apostroph gerendert.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SlashChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SlashChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den Schrägstrich (/) dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.SlashChar> Feld zum Rendern des Schrägstrichs markiert beim Schreiben einer URL. Die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> -Methode verwendet die <xref:System.Web.UI.HtmlTextWriter.SlashChar> Feld, wenn das Endtag eines Markupelements zu schreiben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie manuelle Rendern der `src` Attribut von einem `<img>` Element. Das Codebeispiel verwendet die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode mit dem <xref:System.Web.UI.HtmlTextWriter.SlashChar> Feld als Parameter zum Rendern des Schrägstrichs markiert wird, in dem Pfad, der angewendet wird die `src` Attribut.  
  
 Dieses Codebeispiel wird das folgende Markup gerendert:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SpaceChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SpaceChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt ein Leerzeichen ( ) dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld wird verwendet, durch die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> und <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methoden beim Schreiben von Trennzeichen zwischen Elementen und Attributen.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Die erste Vorlage veranschaulicht, wie ein Array von Zeichen. Im zweiten Beispiel veranschaulicht, wie das Array.  
  
 Diese Codebeispiele generieren Sie das folgende Markup:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Das folgende Codebeispiel veranschaulicht das Erstellen einer <xref:System.Char> Array, enthält die <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie das Array verwenden, die als Parameter im vorangehenden Codebeispiel, beim Aufrufen erstellt wurde der <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const StyleEqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char StyleEqualsChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt das Formatzuweisungszeichen (<see langword=":" />) dar, das zum Festlegen von Formatattributen auf Werte verwendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> Feld wird verwendet, durch die <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> Methode, um Namen und Werte zu begrenzen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Rendern einer `FontWeight` Attribut und Wert des `bold` im Starttag eines Elements. Das Codebeispiel verwendet die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode mit dem <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> Feld als Parameter an das Zeichen zu rendern, die den Wert der einzelnen Formatattribute festlegt.  
  
 Dieses Codebeispiel wird das folgende Markup gerendert:  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter_Constants#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter_Constants#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); void set(System::Web::UI::HtmlTextWriterTag value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Web.UI.HtmlTextWriterTag" />-Wert für das angegebene Markupelement ab oder legt diesen fest.</summary>
        <value>Das Markupelement, dessen Starttag gerendert wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> Eigenschaft wird nur von Klassen, die von erben die <xref:System.Web.UI.HtmlTextWriter> Klasse. Gelesen oder festgelegt werden soll die <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> Eigenschaft nur in einem Aufruf der <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methode; dies ist das einzige Mal, die sie auf einen konsistenten Wert festgelegt ist.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht eine überschriebene Version von den <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> Methode in einer Klasse, die von abgeleitet ist die <xref:System.Web.UI.HtmlTextWriter> Klasse. Er verwendet den Wert der <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> Eigenschaft, um zu bestimmen, ob ein Serversteuerelement mithilfe des benutzerdefinierten <xref:System.Web.UI.HtmlTextWriter> Rendern-Objekts eine `<label>` Markupelement. Wenn dies der Fall, ein `<font>` Element mit einer `color` -Attributsatz zur `red` ist so ändern Sie die Formatierung der zurückgegebenen der `<label>` Text des Elements.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Eigenschaftswert kann nicht festgelegt werden.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagLeftChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagLeftChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt die öffnende spitze Klammer (&lt;) eines Markuptags dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> Feld wird verwendet, durch die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, und <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Methoden beim Schreiben von Markuptags.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das erste Zeichen des öffnenden Tags von gerendert ein `<table>` Element mit dem Elementnamen. Das Codebeispiel verwendet die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode mit dem <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> Feld als Parameter.  
  
 Dieses Codebeispiel wird das folgende Markup gerendert:  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter_Constants#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter_Constants#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ TagName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tagnamen des gerenderten Markupelements ab oder legt diesen fest.</summary>
        <value>Der Tagname des gerenderten Markupelements.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.TagName%2A> Eigenschaft wird nur von Klassen, die von erben die <xref:System.Web.UI.HtmlTextWriter> Klasse. Sollten Sie lesen oder Festlegen der <xref:System.Web.UI.HtmlTextWriter.TagName%2A> Eigenschaft nur in <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Methodenaufrufe; Dies ist das einzige Mal, die sie auf einen konsistenten Wert festgelegt ist.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht eine überschriebene Version von den <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> Methode in einer Klasse, die von abgeleitet ist die <xref:System.Web.UI.HtmlTextWriter> Klasse. Im Codebeispiel wird überprüft, ob das Element zum Rendern einer `<label>` Element durch Aufrufen der <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode und übergeben der <xref:System.Web.UI.HtmlTextWriter.TagName%2A> Eigenschaftswert und eine Zeichenfolge `"label"`, als die Parameterargumente. Wenn eine `<label>` Element gerendert werden, wird das Anfangstag des läuft ein `<font>` Element, mit einer `color` -Attributsatz zur `red`, gerendert wird, bevor die `<label>` Element des öffnenden. Wenn das Element zum Rendern keine `<label>` -Element stellt die Basisklasse-Version von der <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> -Methode aufgerufen wird.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagRightChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagRightChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt die schließende spitze Klammer (&gt;) eines Markuptags dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.TagRightChar> Feld wird verwendet, durch die <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, und <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Methoden beim Schreiben von Markuptags.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie das Endtag des rendern eine `<table>` Element über Aufrufe der Überladungen der <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode. Um das letzte Zeichen des Tags zu rendern, das Codebeispiel verwendet die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode mit dem <xref:System.Web.UI.HtmlTextWriter.TagRightChar> Feld als Parameter.  
  
 Dieses Codebeispiel wird das folgende Markup gerendert:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt den angegebenen Datentyp zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Der <see cref="T:System.Boolean" />, der in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung eines booleschen Werts zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Das in den Ausgabestream zu schreibende Unicode-Zeichen.</param>
        <summary>Schreibt die Textdarstellung eines Unicode-Zeichens zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode zum Beenden des öffnenden Tags von einer `<img>` -Element mithilfe der <xref:System.Web.UI.HtmlTextWriter.TagRightChar> konstant.  
  
 Dieses Codebeispiel wird das folgende Markup gerendert:  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Das in den Ausgabestream zu schreibende Array von Unicode-Zeichen.</param>
        <summary>Schreibt die Textdarstellung eines Arrays von Unicode-Zeichen zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Die erste Vorlage veranschaulicht, wie ein Array von Zeichen. Im zweiten Beispiel veranschaulicht, wie das Array.  
  
 Diese Codebeispiele generieren Sie das folgende Markup:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Array von Zeichen zu erstellen, das ausgeschrieben `hello world`. Im Array enthalten ist das <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld, das kein Leerzeichen zwischen den beiden Wörtern erstellt.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode zum Rendern der `hello world` Array von Zeichen im vorangehenden Codebeispiel wird zu einer Seite erstellt wird, wenn das Steuerelement, das diesen Beispielcode enthält, die auf einer Seite enthalten ist.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Die Gleitkommazahl mit doppelter Genauigkeit, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung einer Gleitkommazahl mit doppelter Genauigkeit zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode, um das Rendern des Werts der <xref:System.Double.MaxValue?displayProperty=nameWithType> Feld.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Die 32-Byte-Ganzzahl mit Vorzeichen, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung einer ganze 32-Byte-Zahl mit Vorzeichen zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Die 64-Byte-Ganzzahl mit Vorzeichen, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung einer 64-Byte-Ganzzahl mit Vorzeichen zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Das Objekt, das in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung eines Objekts zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode, um das Rendern des Werts der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 Der Wert, der die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft:  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Die Gleitkommazahl mit einfacher Genauigkeit, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die Textdarstellung einer Gleitkommazahl mit einfacher Genauigkeit zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode, um das Rendern des Werts der <xref:System.Single.Epsilon?displayProperty=nameWithType> Feld, das den kleinstmöglichen Wert ist von der <xref:System.Single> Struktur.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Die Zeichenfolge, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt die angegebene Zeichenfolge zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode, um eine Zeichenfolge zwischen dem Start- und Endtag eines Markupelements benutzerdefinierte gerendert.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg0">Ein zu formatierendes Objekt.</param>
        <summary>Schreibt eine Tabstoppzeichenfolge und eine formatierte Zeichenfolge zusammen mit allen ausstehenden Tabstopps und unter Verwendung derselben Semantik wie die <see cref="M:System.String.Format(System.String,System.Object)" />-Methode in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode, um eine formatierte Zeichenfolge mit dem Wert des Rendern der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft.  
  
 [!code-csharp[MarkupTextWriter_Methods1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg">Ein zu formatierendes Objektarray.</param>
        <summary>Schreibt eine formatierte Zeichenfolge, die die Textdarstellung eines Objektarrays enthält, zusammen mit allen ausstehenden Tabstopps in den Ausgabestream. Diese Methode verwendet die gleiche Semantik wie die <see cref="M:System.String.Format(System.String,System.Object[])" />-Methode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Die erste Vorlage veranschaulicht, wie eine formatierte Zeichenfolge und den Inhalt eines Arrays zu rendern. Im zweiten Beispiel wird das Deklarieren des Arrays veranschaulicht.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode, um eine formatierte Zeichenfolge und den Inhalt eines Arrays von Objekten, mit dem Namen Rendern `curPriceTime`. Aufruf der Methode rendert das zweite Element des Arrays an, bevor das erste Element gerendert wird.  
  
 [!code-csharp[MarkupTextWriter_Methods2#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 Im folgenden Codebeispiel wird das Deklarieren der `curPriceTime` Objektarray.  
  
 [!code-csharp[MarkupTextWriter_Methods2#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Das Zeichenarray, aus dem Text in den Ausgabestream geschrieben werden soll.</param>
        <param name="index">Die Indexposition im Array, bei der mit dem Schreiben begonnen wird.</param>
        <param name="count">Die Anzahl der Zeichen, die in den Ausgabestream geschrieben werden sollen.</param>
        <summary>Schreibt die Textdarstellung eines Teilarrays von Unicode-Zeichen zusammen mit allen ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Die erste Vorlage veranschaulicht, wie ein Array von Zeichen. Im zweiten Beispiel veranschaulicht, wie das Array.  
  
 Diese Codebeispiele generieren Sie das folgende Markup:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Array von Zeichen zu erstellen, das ausgeschrieben `hello world`. Im Array enthalten ist das <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld, das kein Leerzeichen zwischen den beiden Wörtern erstellt.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Der folgende Teil des Codebeispiels verwendet die `index` und `count` Parameter von der <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode zum Rendern der ersten fünf Zeichen im Array, das im vorherigen Beispiel erstellt.  
  
 [!code-csharp[MarkupTextWriter_Methods2#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg0">Ein zu formatierendes Objekt.</param>
        <param name="arg1">Ein zu formatierendes Objekt.</param>
        <summary>Schreibt eine formatierte Zeichenfolge, die die Textdarstellung zweier Objekte enthält, zusammen mit allen ausstehenden Tabstopps in den Ausgabestream. Diese Methode verwendet die gleiche Semantik wie die <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />-Methode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode generiert alle ausstehenden Tabstopps und ruft dann die <xref:System.IO.TextWriter.Write%2A> -Basismethode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.Write%2A> Methode, um eine formatierte Zeichenfolge und die Werte der Rendern der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.DateTime.Today%2A> Eigenschaften.  
  
 [!code-csharp[MarkupTextWriter_Methods1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt ein Markupattribut und dessen Wert in den Ausgabestream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Das Attribut, das in den Ausgabestream geschrieben werden soll.</param>
        <param name="value">Der Wert, der dem Attribut zugewiesen ist.</param>
        <summary>Schreibt das angegebene Markupattribut und dessen Wert in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methode, um Markupattribute und ihre Werte ohne Codierung zu schreiben. Die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methode schreibt den Wert des Attributs, eingeschlossen in doppelte Anführungszeichen ("). Wenn `value` ist `null`die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methode schreibt nur den Attributnamen an.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, Rendern einer `<img>` Element in der beide Überladungen der der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methode aufgerufen werden. Im Codebeispiel wird den folgenden Prozess verwendet:  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> -Methode, die die öffnenden Zeichen des Elements rendert.  
  
-   Aufrufe der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> Überladung, welche Schreibvorgänge ein `alt` Attribut und seinen Wert auf die `<img>` Element.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> Überladung zum Rendern einer benutzerdefiniertes `myattribute` -Attribut, mit dem Wert `No "encoding" required`, und legt dann `fEncode` auf `false`.  
  
-   Schließt das Starttag des Elements und ruft dann die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Methode zum Schließen der `<img>` Element.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>In abgeleiteten Klassen überschreiben Sie die <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> Methode, um benutzerdefinierte Regeln für das Schreiben von Attributen und deren Werte zu definieren. Angenommen, Code, der zulässige geschrieben die <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> Methode, um ein Attribut mit einem leeren Wert schreiben.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Das Markupattribut, das in den Ausgabestream geschrieben werden soll.</param>
        <param name="value">Der Wert, der dem Attribut zugewiesen ist.</param>
        <param name="fEncode">
          <see langword="true" />, um das Attribut und seinen zugewiesenen Wert zu codieren, andernfalls <see langword="false" />.</param>
        <summary>Schreibt das angegebene Markupattribut und den Wert in den Ausgabestream und schreibt den codierten Wert (falls angegeben).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methode, um Markupattribute und deren Werte mit oder ohne Codierung zu schreiben. Die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> -Methode verwendet die <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> Methode, um die Codierung auszuführen.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methode schreibt den Wert des Attributs, eingeschlossen in doppelte Anführungszeichen ("). Wenn `value` ist `null`die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methode schreibt nur den Attributnamen an.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, Rendern einer `<img>` Element in der beide Überladungen der der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methode aufgerufen werden. Im Codebeispiel wird den folgenden Prozess verwendet:  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> -Methode, die die öffnenden Zeichen des Elements rendert.  
  
-   Aufrufe der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> Überladung, welche Schreibvorgänge ein `alt` Attribut und seinen Wert auf die `<img>` Element.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> Überladung zum Rendern einer benutzerdefiniertes `myattribute` -Attribut, mit dem Wert `No "encoding" required`, und legt dann `fEncode` auf `false`.  
  
-   Schließt das Starttag des Elements und ruft dann die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Methode zum Schließen der `<img>` Element.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>In abgeleiteten Klassen überschreiben Sie die <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> Methode, um benutzerdefinierte Regeln für das Schreiben von Attributen und deren Werte zu definieren. Angenommen, Code, der zulässige geschrieben die <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> Methode, um ein Attribut mit einem leeren Wert schreiben.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Das Markupelement, dessen Starttag geschrieben werden soll.</param>
        <summary>Schreibt alle Tabstopps und das Starttag des angegebenen Markupelements in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> -Methode schreibt nicht die schließende spitze Klammer (>) von der Markupelement Starttag. Dies ermöglicht das Schreiben von Markupattribute im Starttag des Elements. Verwenden der <xref:System.Web.UI.HtmlTextWriter.TagRightChar> -Konstante, um das Starttag schließen, beim Aufrufen der <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Methode. Verwenden der <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Methode mit dem <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> Konstante beim Schreiben von Markupelemente, die selbstschließende sind.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Methode wird von benutzerdefinierten Steuerelementen, die nicht zulassen Tag oder Attribut Zuordnung und Rendern von Markupelemente auf die gleiche Weise wie für jede Anforderung verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, Rendern einer `<img>` Element in der beide Überladungen der der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methode aufgerufen werden. Im Codebeispiel wird den folgenden Prozess verwendet:  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> -Methode, die die öffnenden Zeichen des Elements rendert.  
  
-   Aufrufe der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> Überladung, welche Schreibvorgänge ein `alt` Attribut und seinen Wert auf die `<img>` Element.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> Überladung zum Rendern einer benutzerdefiniertes `myattribute` -Attribut, mit dem Wert `No "encoding" required`, und legt dann `fEncode` auf `false`.  
  
-   Schließt das Starttag des Elements und ruft dann die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Methode zum Schließen der `<img>` Element.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBreak();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt ein <see langword="&lt;br /&gt;" />-Markupelement in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> Methode zum Rendern der Zeile im benutzerdefinierten Steuerelement oder Adapter Markup unterbrochen. Die <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> -Methode schreibt ein Leerzeichen zwischen den `br` und `/` für verbesserte Kompatibilität mit HTML.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aufrufen der <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> Methode zum Schreiben einer `<br />` Element an den anfordernden Browser nach der <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> Methode schreibt den codierten `&lt;custID&gt; &amp; &lt;invoice#&gt;` Markup.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Die Textzeichenfolge, die codiert und in den Ausgabestream geschrieben werden soll.</param>
        <summary>Codiert den angegebenen Text für das anfordernde Gerät und schreibt ihn dann in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> Methode, wenn eine Zeichenfolge spitze Klammern enthält (\< oder >) oder ein kaufmännisches und-Zeichen (&).  
  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> -Methode verwendet die <xref:System.Web.HttpUtility.HtmlEncode%2A> Methode zum Codieren und konvertiert außerdem das Unicode-Zeichen `00A0` auf `&nbsp;`.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> Methode zum Schreiben des codierten Markups `&lt;custID&gt; &amp; &lt;invoice#&gt;` in den Ausgabestream. Die <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> -Methode schreibt `<br />`.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> ist <see langword="null" />.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrl (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrl(System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Die URL-Zeichenfolge, die codiert und in den Ausgabestream geschrieben werden soll.</param>
        <summary>Codiert die angegebene URL und schreibt sie dann in den Ausgabestream. Die URL kann Parameter enthalten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> Methode codiert die Zeichenfolge in der `url` Parameter gemäß der Spezifikation für URL-Codierung. Die Parameter, die auf das Fragezeichen (?) als Trennzeichen sind nicht codiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> -Methode, die die folgende Ausgabe generiert:  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrlParameter (urlText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrlParameter(System::String ^ urlText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlText">Die URL-Parameterzeichenfolge, die codiert und in den Ausgabestream geschrieben werden soll.</param>
        <summary>Codiert den angegebenen URL-Parameter für das anfordernde Gerät und schreibt diesen anschließend in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leerzeichen im Parameterteil einer URL werden als Pluszeichen (+) codiert und Gleichheitszeichen (=) werden als codiert `%3d`.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> -Methode, die die folgende Ausgabe generiert:  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEndTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEndTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Das Element, für das das Endtag geschrieben werden soll.</param>
        <summary>Schreibt alle Tabstopps und das Endtag des angegebenen Markupelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Gegensatz zu den <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> -Methode, die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Methode verfügt über keine Logik, stellen den Endtag des Elements dem entsprechenden Starttag überein.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, Rendern einer `<img>` Element. Im Codebeispiel wird den folgenden Prozess verwendet:  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Methode zum Rendern der öffnenden Zeichen des Elements.  
  
-   Ruft die zwei Überladungen der <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Methode, um Attribute zum Schreiben der `<img>` Element.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Methode zum Schließen der `<img>` Element.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteFullBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteFullBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Das Element, das in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle Tabstopps und das Starttag des angegebenen Markupelements in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> Methode schreibt automatisch die schließende spitze Klammer (>) des Starttags des Elements, im Gegensatz zu den <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> -Methode, die nicht die schließende spitze Klammer geschrieben wird. Verwendung <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> für Markupelemente, die keine Attribute aufweisen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt Daten, die durch die überladenen Parameter angegeben werden, gefolgt von einem Zeichen für den Zeilenabschluss, in einen <see cref="T:System.Web.UI.HtmlTextWriter" />-Ausgabestream. Alle Versionen dieser Methode schreiben alle ausstehenden Tabstopps in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt eine Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Weitere Informationen finden Sie unter <xref:System.IO.TextWriter.WriteLine%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode zum Einfügen einer Zeile nach einem `<img>` Element gerendert wird.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Der boolesche Wert, der in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung eines booleschen Werts gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Das Zeichen, das in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und ein Unicode-Zeichen gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Das Zeichenarray, das in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und ein Array von Unicode-Zeichen gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Die erste Vorlage veranschaulicht, wie ein Array zu erstellen. Im zweiten Beispiel veranschaulicht, wie dieses Array.  
  
 Diese Codebeispiele generieren Sie das folgende Markup:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Array von Zeichen zu erstellen, das ausgeschrieben `hello world`. Im Array enthalten ist das <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld, das kein Leerzeichen zwischen den beiden Wörtern erstellt.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Im folgenden Codebeispiel wird rendert die `hello world` Zeichenarray, das im vorherigen Beispiel, mithilfe erstellt wurde der <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode.  
  
 [!code-csharp[MarkupTextWriter_Methods2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Die Gleitkommazahl mit doppelter Genauigkeit, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung einer Gleitkommazahl mit doppelter Genauigkeit gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode, um das Rendern des Werts der <xref:System.Double.MaxValue?displayProperty=nameWithType> Feld.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Die 32-Byte-Ganzzahl mit Vorzeichen, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung einer ganzen 32-Byte-Zahl mit Vorzeichen, gefolgt von einer Zeichenfolge für den Zeilenabschluss, in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Die 64-Byte-Ganzzahl mit Vorzeichen, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung einer 64-Byte-Ganzzahl mit Vorzeichen, gefolgt von einer Zeichenfolge für den Zeilenabschluss, in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Das Objekt, das in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung eines Objekts gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode, um das Rendern des Werts der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft an ein Steuerelement.  
  
 [!code-csharp[MarkupTextWriter_Methods1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Die Gleitkommazahl mit einfacher Genauigkeit, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung einer Gleitkommazahl mit einfacher Genauigkeit gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode zum Rendern des Werts von der <xref:System.Single.Epsilon?displayProperty=nameWithType> Feld, das den kleinstmöglichen Wert wird von der <xref:System.Single> Struktur.  
  
 Dieses Codebeispiel wird das folgende Markup generiert:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Die Zeichenfolge, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und eine Textzeichenfolge gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">Die 4-Byte-Ganzzahl ohne Vorzeichen, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und die Textdarstellung einer 4-Byte-Ganzzahl ohne Vorzeichen gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg0">Ein zu formatierendes Objekt.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und eine formatierte Zeichenfolge, die die Textdarstellung eines Objekts enthält, gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode verwendet die gleiche Semantik wie die <xref:System.String.Format%28System.String%2CSystem.Object%29> Methode. Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode, um eine formatierte Zeichenfolge mit dem Wert des Rendern der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft.  
  
 [!code-csharp[MarkupTextWriter_Methods1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg">Ein zu formatierendes Objektarray.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und eine formatierte Zeichenfolge, die die Textdarstellung eines Objektarrays enthält, gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode verwendet die gleiche Semantik wie die <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> Methode. Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Methode.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Die erste Vorlage veranschaulicht, wie eine Zeichenfolge und ein Array in den Ausgabestream gerendert. Das zweite Beispiel zeigt, wie das Array deklariert.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode, um eine formatierte Zeichenfolge und den Inhalt eines Arrays von Objekten in den Ausgabestream gerendert.  
  
 [!code-csharp[MarkupTextWriter_Methods2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie der Objekt-Array zu deklarieren, das im vorangehenden Codebeispiel gerendert wurde.  
  
 [!code-csharp[MarkupTextWriter_Methods2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Das Zeichenarray, aus dem Text in den Ausgabestream geschrieben werden soll.</param>
        <param name="index">Die Position im Zeichenarray, an der mit dem Schreiben begonnen wird.</param>
        <param name="count">Die Anzahl der Zeichen im Array, die in den Ausgabestream geschrieben werden sollen.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und ein Teilarray von Unicode-Zeichen gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Die erste Vorlage veranschaulicht, wie ein Array von Zeichen. Im zweiten Beispiel veranschaulicht, wie das Array.  
  
 Diese Codebeispiele generieren Sie das folgende Markup:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Array von Zeichen zu erstellen, das ausgeschrieben `hello world`. Im Array enthalten ist das <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Feld, das kein Leerzeichen zwischen den beiden Wörtern erstellt.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Im folgenden Codebeispiel wird mit der `index` und `count` Parameter von der <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode, um die ersten fünf Zeichen im Array im vorangehenden Codebeispiel erstellt zu rendern.  
  
 [!code-csharp[MarkupTextWriter_Methods2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine Zeichenfolge mit 0 oder mehr Formatelementen.</param>
        <param name="arg0">Ein zu formatierendes Objekt.</param>
        <param name="arg1">Ein zu formatierendes Objekt.</param>
        <summary>Schreibt alle ausstehenden Tabstopps und eine formatierte Zeichenfolge, die die Textdarstellung von zwei Objekten enthält, gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode verwendet die gleiche Semantik wie die <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> Methode. Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode, um eine formatierte Zeichenfolge und die Werte der Rendern der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft und die <xref:System.DateTime.Today%2A> Eigenschaft.  
  
 [!code-csharp[MarkupTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLineNoTabs (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLineNoTabs(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Die Zeichenfolge, die in den Ausgabestream geschrieben werden soll.</param>
        <summary>Schreibt eine Zeichenfolge gefolgt von einer Zeichenfolge für den Zeilenabschluss in den Ausgabestream. Diese Methode ignoriert alle angegebenen Tabstopps.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A> Methode statt über das <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Methode, wenn Sie keine Tabstopps vor der gerenderten Zeichenfolge rendern möchten `s`.  
  
 Der Standardwert für den Zeilenabschluss ist ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n"). Die <xref:System.IO.TextWriter.WriteLine%2A> base-Methode wird verwendet, um das Schreiben der `value` Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt ein Formatattribut und dessen Wert in den Ausgabestream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Das Formatattribut, das in den Ausgabestream geschrieben werden soll.</param>
        <param name="value">Der dem Formatattribut zugewiesene Wert.</param>
        <summary>Schreibt das angegebene Formatattribut in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> -Methode schreibt das Formatattribut in der folgenden Form:  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Das Formatattribut, das in den Ausgabestream geschrieben werden soll.</param>
        <param name="value">Der dem Formatattribut zugewiesene Wert.</param>
        <param name="fEncode">
          <see langword="true" />, wenn das Formatattribut und sein zugeordneter Wert codiert werden sollen, andernfalls <see langword="false" />.</param>
        <summary>Schreibt das angegebene Formatattribut und dessen Wert in den Ausgabestream, wobei der Wert ggf. codiert geschrieben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> -Methode schreibt das Formatattribut in der folgenden Form:  
  
 `name` `=` `value` `;`  
  
 Die <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> Methode dient zum Codieren der `value` Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WriteUrlEncodedString (text As String, argument As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WriteUrlEncodedString(System::String ^ text, bool argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="argument" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Die Zeichenfolge, die codiert und in den Ausgabestream geschrieben werden soll.</param>
        <param name="argument">
          <see langword="true" />, um die Zeichenfolge als Teil des Parameterabschnitts der URL zu codieren, <see langword="false" />, um die Zeichenfolge als Teil des Pfadabschnitts der URL zu codieren.</param>
        <summary>Schreibt die angegebene Zeichenfolge und codiert sie entsprechend den URL-Anforderungen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> Methode codiert die Zeichen, die URL-Trennzeichen betrachtet werden können (abhängig von der Einstellung der `argument`) in Zeichenfolgen des Formulars `%xx`, wenn der ASCII-Code weniger als 128 ist, andernfalls ist `%uxxxx`, wobei `x` ist ein hexadezimale Ziffer.  
  
 Die <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> und <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> Methoden verwenden, die <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> Methode als eine Utility-Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
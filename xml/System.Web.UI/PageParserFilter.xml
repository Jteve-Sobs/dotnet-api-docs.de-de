<Type Name="PageParserFilter" FullName="System.Web.UI.PageParserFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bd44cda820ea74ccd3522b0ed87eda9aafd69176" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37531129" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PageParserFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PageParserFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageParserFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PageParserFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageParserFilter abstract" />
  <TypeSignature Language="F#" Value="type PageParserFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine abstrakte Basisklasse für einen Seitenparserfilter bereit, mit dem der ASP.NET-Parser bestimmt, ob ein Element sich zur Analysezeit auf der Seite befinden darf.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie Sie eine Klasse erstellen können, die von abgeleitet der <xref:System.Web.UI.PageParserFilter> Klasse, um das Verhalten der ASP.NET-Seitenparser steuern. Die `CustomPageParserFilter` ist, ein Parser filtern, die explizit weist der Code auf der Seite zurück. Dies geschieht durch Überschreiben der <xref:System.Web.UI.PageParserFilter.AllowCode%2A> Eigenschaft.  
  
 [!code-csharp[System.Web.UI.PageParserFilter#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageParserFilter/CS/CustomPageParserFilter.cs#2)]
 [!code-vb[System.Web.UI.PageParserFilter#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageParserFilter/VB/CustomPageParserFilter.vb#2)]  
  
 Verwenden der `CustomPageParserFilter` zugreifen können, platzieren Sie die Klasse in Ihrem Verzeichnis "App_Code". Sie müssen konfigurieren, dass die ASP.NET-Parser, um mithilfe des Filters in der `pages` Abschnitt der Konfigurationsdatei für "Web.config" Ihrer Website. Die folgende Beispielkonfigurationsdatei zeigt die Konfiguration für `CustomPageParserFilter`. Bei der Verwendung von einem Parserfilter konfiguriert, dem der ASP.NET-Parser löst eine Ausnahme aus während des Buildvorgangs gefundenen Code auf einer Seite.  
  
 `<?xml version="1.0" ?>`  
  
 `<configuration xmlns="http://schemas.microsoft.com/.NetConfiguration/v2.0">`  
  
 `<system.web>`  
  
 `<pages`  
  
 `pageParserFilterType="Samples.AspNet.CS.CustomPageParserFilter">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 `</configuration>`  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.Configuration.PagesSection.PageParserFilterType" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PageParserFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PageParserFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageParserFilter" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddControl">
      <MemberSignature Language="C#" Value="protected void AddControl (Type type, System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AddControl(class System.Type type, class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.AddControl(System.Type,System.Collections.IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AddControl(Type ^ type, System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddControl : Type * System.Collections.IDictionary -&gt; unit" Usage="pageParserFilter.AddControl (type, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="type">Der Steuerelementtyp, der vom <see cref="T:System.Web.UI.ControlBuilder" /> dargestellt wird.</param>
        <param name="attributes">Das <see cref="T:System.Collections.IDictionary" />-Objekt, das alle angegebenen Tagattribute enthält.</param>
        <summary>Fügt in der Steuerelementstruktur der Seite an der aktuellen Position des Seitenparsers ein <see cref="T:System.Web.UI.ControlBuilder" />-Objekt hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageParserFilter.AddControl%2A> wird in .NET Framework, Version 3.5 eingeführt.  Weitere Informationen finden Sie unter [Versionen und Abhängigkeiten](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowBaseType">
      <MemberSignature Language="C#" Value="public virtual bool AllowBaseType (Type baseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AllowBaseType(class System.Type baseType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.AllowBaseType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AllowBaseType (baseType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool AllowBaseType(Type ^ baseType);" />
      <MemberSignature Language="F#" Value="abstract member AllowBaseType : Type -&gt; bool&#xA;override this.AllowBaseType : Type -&gt; bool" Usage="pageParserFilter.AllowBaseType baseType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="baseType">Ein <see cref="T:System.Type" />, der die potenzielle Basisklasse der aktuellen Seite darstellt.</param>
        <summary>Bestimmt, ob die Seite vom angegebenen <see cref="T:System.Type" /> abgeleitet werden kann.</summary>
        <returns>
          <see langword="true" />, wenn die Seite vom angegebenen Typ erben kann, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.TemplateParser> -Klasse bestimmt, ob ein Basistyp zulässig ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowCode">
      <MemberSignature Language="C#" Value="public virtual bool AllowCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageParserFilter.AllowCode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AllowCode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowCode { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowCode : bool" Usage="System.Web.UI.PageParserFilter.AllowCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein ASP.NET-Parserfilter Code auf der Seite zulässt.</summary>
        <value>
          <see langword="true" />, wenn der Parserfilter Code zulässt, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.TemplateParser> Klasse überprüft alle zugeordneten <xref:System.Web.UI.PageParserFilter> Instanz, um festzustellen, ob eine Seite Code enthalten kann, die kompiliert werden kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowControl">
      <MemberSignature Language="C#" Value="public virtual bool AllowControl (Type controlType, System.Web.UI.ControlBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AllowControl(class System.Type controlType, class System.Web.UI.ControlBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.AllowControl(System.Type,System.Web.UI.ControlBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AllowControl (controlType As Type, builder As ControlBuilder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool AllowControl(Type ^ controlType, System::Web::UI::ControlBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="abstract member AllowControl : Type * System.Web.UI.ControlBuilder -&gt; bool&#xA;override this.AllowControl : Type * System.Web.UI.ControlBuilder -&gt; bool" Usage="pageParserFilter.AllowControl (controlType, builder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="builder" Type="System.Web.UI.ControlBuilder" />
      </Parameters>
      <Docs>
        <param name="controlType">Ein <see cref="T:System.Type" />, der den Typ des hinzuzufügenden Steuerelements darstellt.</param>
        <param name="builder">Ein <see cref="T:System.Web.UI.ControlBuilder" />, mit dem der angegebene Steuerelementtyp erstellt wird.</param>
        <summary>Ruft einen Wert ab, der angibt, ob der angegebene Steuerelementtyp für diese Seite zulässig ist.</summary>
        <returns>
          <see langword="true" />, wenn das Steuerelement mit der aktuellen Seite verwendet werden kann, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.TemplateParser> -Klasse überprüft, ob Steuerelemente in einer Seite zur Analysezeit zulässig sind. Überschreiben der <xref:System.Web.UI.PageParserFilter.AllowControl%2A> Methode zum Ablehnen oder Zulassen von spezifischen Kontrollen in Ihren Seiten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowServerSideInclude">
      <MemberSignature Language="C#" Value="public virtual bool AllowServerSideInclude (string includeVirtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AllowServerSideInclude(string includeVirtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.AllowServerSideInclude(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AllowServerSideInclude (includeVirtualPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool AllowServerSideInclude(System::String ^ includeVirtualPath);" />
      <MemberSignature Language="F#" Value="abstract member AllowServerSideInclude : string -&gt; bool&#xA;override this.AllowServerSideInclude : string -&gt; bool" Usage="pageParserFilter.AllowServerSideInclude includeVirtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeVirtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="includeVirtualPath">Der virtuelle Pfad zur eingeschlossenen Datei.</param>
        <summary>Bestimmt, ob ein Parser ein bestimmtes serverseitiges Include auf einer Seite zulässt.</summary>
        <returns>
          <see langword="true" />, wenn der Parser das serverseitige Include zulässt, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überschreiben der <xref:System.Web.UI.PageParserFilter.AllowServerSideInclude%2A> Methode, um alle ablehnen oder bestimmte serverseitige Include-Dateien. Weitere Informationen zu den serverseitigen Syntax einschließen, finden Sie unter [serverseitige Include-Direktivensyntax](http://msdn.microsoft.com/library/42a6925a-f68c-4690-a9c4-d710358886a9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowVirtualReference">
      <MemberSignature Language="C#" Value="public virtual bool AllowVirtualReference (string referenceVirtualPath, System.Web.UI.VirtualReferenceType referenceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AllowVirtualReference(string referenceVirtualPath, valuetype System.Web.UI.VirtualReferenceType referenceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.AllowVirtualReference(System.String,System.Web.UI.VirtualReferenceType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AllowVirtualReference (referenceVirtualPath As String, referenceType As VirtualReferenceType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool AllowVirtualReference(System::String ^ referenceVirtualPath, System::Web::UI::VirtualReferenceType referenceType);" />
      <MemberSignature Language="F#" Value="abstract member AllowVirtualReference : string * System.Web.UI.VirtualReferenceType -&gt; bool&#xA;override this.AllowVirtualReference : string * System.Web.UI.VirtualReferenceType -&gt; bool" Usage="pageParserFilter.AllowVirtualReference (referenceVirtualPath, referenceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceVirtualPath" Type="System.String" />
        <Parameter Name="referenceType" Type="System.Web.UI.VirtualReferenceType" />
      </Parameters>
      <Docs>
        <param name="referenceVirtualPath">Der virtuelle Pfad zu einer Ressource, beispielsweise einer Masterseitendatei, einer ASP.NET-Seite oder einem Benutzersteuerelement.</param>
        <param name="referenceType">Ein <see cref="T:System.Web.UI.VirtualReferenceType" />-Wert, der den Ressourcentyp bezeichnet.</param>
        <summary>Bestimmt, ob ein Parser einen virtuellen Verweis zu einem bestimmten Ressourcentyp auf einer Seite zulässt.</summary>
        <returns>
          <see langword="true" />, wenn der Parser einen virtuellen Verweis auf einen bestimmten Ressourcentyp zulässt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.TemplateParser> -Klasse bestimmt, ob eine bestimmte Art von Ressource, die von einer Seite verwiesen werden kann.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.VirtualReferenceType" />
      </Docs>
    </Member>
    <Member MemberName="CalledFromParseControl">
      <MemberSignature Language="C#" Value="protected bool CalledFromParseControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CalledFromParseControl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageParserFilter.CalledFromParseControl" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CalledFromParseControl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool CalledFromParseControl { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CalledFromParseControl : bool" Usage="System.Web.UI.PageParserFilter.CalledFromParseControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Parserfilter auf der Seite aufgerufen wurde.</summary>
        <value>
          <see langword="true" />, wenn ein Parserfilter auf der Seite aufgerufen wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird festgelegt, um `true` Wenn eine Implementierung der der <xref:System.Web.UI.PageParserFilter> Klasse wird aufgerufen, durch den Aufruf der `ParseControl` -Methode der der <xref:System.Web.UI.Page> -Klasse oder durch einen Aufruf der `ParseControl` -Methode der der `TemplateControl` Verweis von der <xref:System.Web.UI.Page>Klasse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompilationMode">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.CompilationMode GetCompilationMode (System.Web.UI.CompilationMode current);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Web.UI.CompilationMode GetCompilationMode(valuetype System.Web.UI.CompilationMode current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.GetCompilationMode(System.Web.UI.CompilationMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCompilationMode (current As CompilationMode) As CompilationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::CompilationMode GetCompilationMode(System::Web::UI::CompilationMode current);" />
      <MemberSignature Language="F#" Value="abstract member GetCompilationMode : System.Web.UI.CompilationMode -&gt; System.Web.UI.CompilationMode&#xA;override this.GetCompilationMode : System.Web.UI.CompilationMode -&gt; System.Web.UI.CompilationMode" Usage="pageParserFilter.GetCompilationMode current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.CompilationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Web.UI.CompilationMode" />
      </Parameters>
      <Docs>
        <param name="current">Der aktuelle Kompilierungsmodus für die Seite.</param>
        <summary>Ruft den aktuellen Kompilierungsmodus für die Seite ab.</summary>
        <returns>Einer der <see cref="T:System.Web.UI.CompilationMode" />-Werte.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.TemplateControlParser> Klasse überprüft alle zugeordneten <xref:System.Web.UI.PageParserFilter> Instanz einen Kompilierungsmodus für die derzeit verarbeitete Seite gelten. Die Standardimplementierung von der <xref:System.Web.UI.PageParserFilter.GetCompilationMode%2A> Methodenrückgabe einfach die <xref:System.Web.UI.CompilationMode> Wert, der den aktuellen Parameter übergeben wird. Überschreiben der <xref:System.Web.UI.PageParserFilter.GetCompilationMode%2A> Methode für einen bestimmten oder anderen <xref:System.Web.UI.CompilationMode> Wert.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.CompilationMode" />
      </Docs>
    </Member>
    <Member MemberName="GetNoCompileUserControlType">
      <MemberSignature Language="C#" Value="public virtual Type GetNoCompileUserControlType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNoCompileUserControlType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.GetNoCompileUserControlType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNoCompileUserControlType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetNoCompileUserControlType();" />
      <MemberSignature Language="F#" Value="abstract member GetNoCompileUserControlType : unit -&gt; Type&#xA;override this.GetNoCompileUserControlType : unit -&gt; Type" Usage="pageParserFilter.GetNoCompileUserControlType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen <see cref="T:System.Type" /> zurück, der für Seiten oder Steuerelemente verwendet werden muss, die nicht dynamisch kompiliert sind.</summary>
        <returns>Der <see cref="T:System.Type" /> für die Rückgabe, der für Seiten oder Steuerelemente verwendet werden muss, die nicht dynamisch kompiliert sind. Der Standardwert ist <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können außer Kraft setzen der <xref:System.Web.UI.PageParserFilter.GetNoCompileUserControlType%2A> -Methode zur Angabe des Rückgabetyp der Seiten oder Steuerelemente, die behandelt werden, als ob sie nicht dynamisch kompiliert sind. Der Standardwert ist `null`.  
  
 <xref:System.Web.UI.PageParserFilter.GetNoCompileUserControlType%2A> wird in .NET Framework, Version 3.5 eingeführt.  Weitere Informationen finden Sie unter [Versionen und Abhängigkeiten](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.CompilationMode" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.Initialize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Initialize();" />
      <MemberSignature Language="F#" Value="abstract member Initialize : unit -&gt; unit&#xA;override this.Initialize : unit -&gt; unit" Usage="pageParserFilter.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert einen für eine Seite verwendeten Filter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da die <xref:System.Web.UI.PageParserFilter> -Klasse macht keinen klar definierte öffentliche Konstruktoren verfügbar, es wird initialisiert, indem Sie die Seite-Parser, mit denen die <xref:System.Web.UI.PageParserFilter.Initialize%2A> Methode. Überschreiben der <xref:System.Web.UI.PageParserFilter.Initialize%2A> Schritte Methode, um eigene benutzerdefinierte Initialisierung hinzuzufügen, wenn eine Instanz des <xref:System.Web.UI.PageParserFilter> erstellt und von ASP.NET verwendet wird. Die `virtualPath` Parameter zu übergeben, um die <xref:System.Web.UI.PageParserFilter.Initialize%2A> Methode legt die <xref:System.Web.UI.PageParserFilter.VirtualPath%2A> -Eigenschaft, und kann nicht `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Line">
      <MemberSignature Language="C#" Value="protected int Line { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Line" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageParserFilter.Line" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Line As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int Line { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Line : int" Usage="System.Web.UI.PageParserFilter.Line" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeilennummer ab, die derzeit in der Datei analysiert wird.</summary>
        <value>Der ganzzahlige Wert, der die Zeile in der Datei darstellt, die vom Parserfilter derzeit verarbeitet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einem benutzerdefinierten <xref:System.Web.UI.PageParserFilter> Implementierung verwenden die <xref:System.Web.UI.PageParserFilter.Line%2A> Eigenschaft, um den Bericht, in denen Fehler, während der Analyse auftreten.  
  
 <xref:System.Web.UI.PageParserFilter.Line%2A> wird in .NET Framework, Version 3.5 eingeführt.  Weitere Informationen finden Sie unter [Versionen und Abhängigkeiten](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfControlsAllowed">
      <MemberSignature Language="C#" Value="public virtual int NumberOfControlsAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfControlsAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageParserFilter.NumberOfControlsAllowed" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NumberOfControlsAllowed As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int NumberOfControlsAllowed { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberOfControlsAllowed : int" Usage="System.Web.UI.PageParserFilter.NumberOfControlsAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximale Anzahl von Steuerelementen ab, die von einem Parserfilter für eine einzelne Seite analysiert werden kann.</summary>
        <value>Die maximale Anzahl von Steuerelementen, die von einem Parserfilter für eine Seite analysiert werden kann. Der Standardwert ist 0. Dies gibt an, dass keine Steuerelemente analysiert werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der ASP.NET-Seitenparser verfolgt des Steuerelemente analysiert, und wenn die Anzahl das Limit überschreitet einer <xref:System.Web.UI.PageParserFilter> Instanz löst eine <xref:System.Web.HttpException> Ausnahme.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfDirectDependenciesAllowed">
      <MemberSignature Language="C#" Value="public virtual int NumberOfDirectDependenciesAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfDirectDependenciesAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageParserFilter.NumberOfDirectDependenciesAllowed" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NumberOfDirectDependenciesAllowed As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int NumberOfDirectDependenciesAllowed { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberOfDirectDependenciesAllowed : int" Usage="System.Web.UI.PageParserFilter.NumberOfDirectDependenciesAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximale Anzahl direkter und indirekter Dateiabhängigkeiten ab, die ein Seitenparser für eine einzelne Seite zulässt.</summary>
        <value>Die maximale Anzahl direkter Dateiabhängigkeiten, die der Seitenparser für eine Seite analysieren kann. Der Standard ist 0. Dies gibt an, dass keine Abhängigkeiten zulässig sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.TemplateParser> Klasse verfolgt die Anzahl direkter und indirekter dateiabhängigkeiten, die er analysiert, und wenn die Anzahl den Grenzwert überschreitet festlegen, indem eine <xref:System.Web.UI.PageParserFilter> Instanz löst eine Ausnahme aus.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.PageParserFilter.TotalNumberOfDependenciesAllowed" />
      </Docs>
    </Member>
    <Member MemberName="ParseComplete">
      <MemberSignature Language="C#" Value="public virtual void ParseComplete (System.Web.UI.ControlBuilder rootBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ParseComplete(class System.Web.UI.ControlBuilder rootBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.ParseComplete(System.Web.UI.ControlBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ParseComplete (rootBuilder As ControlBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ParseComplete(System::Web::UI::ControlBuilder ^ rootBuilder);" />
      <MemberSignature Language="F#" Value="abstract member ParseComplete : System.Web.UI.ControlBuilder -&gt; unit&#xA;override this.ParseComplete : System.Web.UI.ControlBuilder -&gt; unit" Usage="pageParserFilter.ParseComplete rootBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootBuilder" Type="System.Web.UI.ControlBuilder" />
      </Parameters>
      <Docs>
        <param name="rootBuilder">Der der Seitenanalyse zugeordnete <see cref="T:System.Web.UI.ControlBuilder" />.</param>
        <summary>Wird von einem ASP.NET-Seitenparser aufgerufen, um den Filter nach Abschluss der Seitenanalyse zu benachrichtigen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreprocessDirective">
      <MemberSignature Language="C#" Value="public virtual void PreprocessDirective (string directiveName, System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreprocessDirective(string directiveName, class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.PreprocessDirective(System.String,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PreprocessDirective (directiveName As String, attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PreprocessDirective(System::String ^ directiveName, System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PreprocessDirective : string * System.Collections.IDictionary -&gt; unit&#xA;override this.PreprocessDirective : string * System.Collections.IDictionary -&gt; unit" Usage="pageParserFilter.PreprocessDirective (directiveName, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directiveName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="directiveName">Die Seitendirektive.</param>
        <param name="attributes">Eine aus der Seite ausgelesene Auflistung von Attributen und Werten.</param>
        <summary>Erlaubt dem Seitenparserfilter die Vorverarbeitung von Seitendirektiven.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Seitenparser ruft die <xref:System.Web.UI.PageParserFilter.PreprocessDirective%2A> -Methode für jede Anweisung, die bei der Analyse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCodeConstruct">
      <MemberSignature Language="C#" Value="public virtual bool ProcessCodeConstruct (System.Web.UI.CodeConstructType codeType, string code);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ProcessCodeConstruct(valuetype System.Web.UI.CodeConstructType codeType, string code) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.ProcessCodeConstruct(System.Web.UI.CodeConstructType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ProcessCodeConstruct (codeType As CodeConstructType, code As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ProcessCodeConstruct(System::Web::UI::CodeConstructType codeType, System::String ^ code);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCodeConstruct : System.Web.UI.CodeConstructType * string -&gt; bool&#xA;override this.ProcessCodeConstruct : System.Web.UI.CodeConstructType * string -&gt; bool" Usage="pageParserFilter.ProcessCodeConstruct (codeType, code)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeType" Type="System.Web.UI.CodeConstructType" />
        <Parameter Name="code" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="codeType">Einer der <see cref="T:System.Web.UI.CodeConstructType" />-Enumerationswerte, die den Typ des Codekonstrukts angeben.</param>
        <param name="code">Das Zeichenfolgenliteral, das den Code im Codekonstrukt enthält.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob ein Codeblock von nachfolgenden Parserfiltern verarbeitet werden soll.</summary>
        <returns>
          <see langword="true" />, wenn ein Codekonstrukt vom Parser weiter verarbeitet werden soll, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können außer Kraft setzen der <xref:System.Web.UI.PageParserFilter.ProcessCodeConstruct%2A> -Methode zum Analysieren von Code im Code erstellt beim Implementieren eines benutzerdefiniertes <xref:System.Web.UI.PageParserFilter>. Nach der Verarbeitung des Codes, der diese Methode gibt `true` weiter; andernfalls den Code werden wird der Parser verarbeitet soll, gibt `false`.  
  
 Der Typ von Codekonstrukten zulässig sind die <xref:System.Web.UI.CodeConstructType> -Enumerationswerte fest.  
  
 <xref:System.Web.UI.PageParserFilter.ProcessCodeConstruct%2A> wird in .NET Framework, Version 3.5 eingeführt.  Weitere Informationen finden Sie unter [Versionen und Abhängigkeiten](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.CodeConstructType" />
      </Docs>
    </Member>
    <Member MemberName="ProcessDataBindingAttribute">
      <MemberSignature Language="C#" Value="public virtual bool ProcessDataBindingAttribute (string controlId, string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ProcessDataBindingAttribute(string controlId, string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.ProcessDataBindingAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ProcessDataBindingAttribute (controlId As String, name As String, value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ProcessDataBindingAttribute(System::String ^ controlId, System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member ProcessDataBindingAttribute : string * string * string -&gt; bool&#xA;override this.ProcessDataBindingAttribute : string * string * string -&gt; bool" Usage="pageParserFilter.ProcessDataBindingAttribute (controlId, name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="controlId">Die ID des Steuerelements, das das Datenbindungsattribut enthält.</param>
        <param name="name">Der Name des Attributs mit dem Datenbindungsausdruck.</param>
        <param name="value">Der Datenbindungsausdruck.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob ein Datenbindungsausdruck in einem Attribut vom Parser verarbeitet wird.</summary>
        <returns>
          <see langword="true" />, wenn der Parserfilter Datenbindungsattribute verarbeitet, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können außer Kraft setzen der <xref:System.Web.UI.PageParserFilter.ProcessDataBindingAttribute%2A> Methode, um die Parserfilter Datenbindungsausdrücke zu verarbeiten, wenn eine benutzerdefinierte Implementierung <xref:System.Web.UI.PageParserFilter> Klasse. Ist ein Beispiel für einen Datenbindungsausdruck, der mit einem Attribut verwendeten `<%# expression %>`.  
  
 <xref:System.Web.UI.PageParserFilter.ProcessDataBindingAttribute%2A> wird in .NET Framework, Version 3.5 eingeführt.  Weitere Informationen finden Sie unter [Versionen und Abhängigkeiten](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessEventHookup">
      <MemberSignature Language="C#" Value="public virtual bool ProcessEventHookup (string controlId, string eventName, string handlerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ProcessEventHookup(string controlId, string eventName, string handlerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.ProcessEventHookup(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ProcessEventHookup (controlId As String, eventName As String, handlerName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ProcessEventHookup(System::String ^ controlId, System::String ^ eventName, System::String ^ handlerName);" />
      <MemberSignature Language="F#" Value="abstract member ProcessEventHookup : string * string * string -&gt; bool&#xA;override this.ProcessEventHookup : string * string * string -&gt; bool" Usage="pageParserFilter.ProcessEventHookup (controlId, eventName, handlerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="handlerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="controlId">Die ID des Steuerelements, dessen Ereignis vom Ereignishandler verarbeitet werden soll.</param>
        <param name="eventName">Der Ereignisname der <c>controlID</c>, nach dem gefiltert werden soll.</param>
        <param name="handlerName">Der Handler des <c>eventName</c>-Namens, nach dem gefiltert werden soll.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob Ereignishandler vom Parserfilter weiter verarbeitet werden sollen.</summary>
        <returns>
          <see langword="true" />, wenn der Parser Ereignishandler verarbeitet, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können außer Kraft setzen der <xref:System.Web.UI.PageParserFilter.ProcessEventHookup%2A> Methode, um die ereigniseinbindung zu verarbeiten, wenn eine benutzerdefinierte Implementierung der Parser zuzulassen <xref:System.Web.UI.PageParserFilter> Klasse. Ein Beispiel eines ereignishandlers ist die Bereitstellung eines Handlers für die <xref:System.Web.UI.WebControls.Button.Click> Ereignis die <xref:System.Web.UI.WebControls.Button> Steuerelement.  
  
 <xref:System.Web.UI.PageParserFilter.ProcessEventHookup%2A> wird in .NET Framework, Version 3.5 eingeführt.  Weitere Informationen finden Sie unter [Versionen und Abhängigkeiten](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPageProperty">
      <MemberSignature Language="C#" Value="protected void SetPageProperty (string filter, string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetPageProperty(string filter, string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageParserFilter.SetPageProperty(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetPageProperty (filter As String, name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetPageProperty(System::String ^ filter, System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetPageProperty : string * string * string -&gt; unit" Usage="pageParserFilter.SetPageProperty (filter, name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filter">Eine Zeichenfolge, die den Wert des Filters für einen Ausdruck enthält. Ein Beispiel finden Sie unter <see cref="T:System.Web.UI.PropertyEntry" />.</param>
        <param name="name">Der Name der Eigenschaft, für die ein Wert festgelegt werden soll.</param>
        <param name="value">Der Wert der festzulegenden Eigenschaft.</param>
        <summary>Legt eine Eigenschaft für ein Steuerelement fest, das von der <see cref="T:System.Web.UI.TemplateControl" />-Klasse abgeleitet ist, die die Steuerelemente <see cref="T:System.Web.UI.Page" />, <see cref="T:System.Web.UI.UserControl" /> und <see cref="T:System.Web.UI.MasterPage" /> enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageParserFilter.SetPageProperty%2A> wird in .NET Framework, Version 3.5 eingeführt.  Weitere Informationen finden Sie unter [Versionen und Abhängigkeiten](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.PropertyEntry" />
      </Docs>
    </Member>
    <Member MemberName="TotalNumberOfDependenciesAllowed">
      <MemberSignature Language="C#" Value="public virtual int TotalNumberOfDependenciesAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalNumberOfDependenciesAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageParserFilter.TotalNumberOfDependenciesAllowed" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TotalNumberOfDependenciesAllowed As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TotalNumberOfDependenciesAllowed { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalNumberOfDependenciesAllowed : int" Usage="System.Web.UI.PageParserFilter.TotalNumberOfDependenciesAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximale Anzahl direkter und indirekter Dateiabhängigkeiten ab, die der Seitenparser für eine einzelne Seite zulässt.</summary>
        <value>Die maximale Anzahl direkter und indirekter Dateiabhängigkeiten, die der Seitenparser für eine Seite analysieren kann. Der Standard ist 0. Dies gibt an, dass keine Abhängigkeiten zulässig sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.TemplateParser> Klasse verfolgt die Anzahl direkter und indirekter dateiabhängigkeiten, die er analysiert, und wenn die Anzahl den Grenzwert überschreitet festlegen, indem eine <xref:System.Web.UI.PageParserFilter> Instanz löst eine Ausnahme aus.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.PageParserFilter.NumberOfDirectDependenciesAllowed" />
      </Docs>
    </Member>
    <Member MemberName="VirtualPath">
      <MemberSignature Language="C#" Value="protected string VirtualPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageParserFilter.VirtualPath" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property VirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ VirtualPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualPath : string" Usage="System.Web.UI.PageParserFilter.VirtualPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den virtuellen Pfad zur gegenwärtig analysierten Seite ab.</summary>
        <value>Ein virtueller Pfad zu einer ASP.NET-Seite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.PageParserFilter.VirtualPath%2A> Eigenschaft ist nie `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
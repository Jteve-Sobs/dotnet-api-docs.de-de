<Type Name="LiteralControl" FullName="System.Web.UI.LiteralControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5123e5f83197dd645edb171651a885147f59154b" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55345367" /></Metadata><TypeSignature Language="C#" Value="public class LiteralControl : System.Web.UI.Control, System.Web.UI.ITextControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LiteralControl extends System.Web.UI.Control implements class System.Web.UI.ITextControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.LiteralControl" />
  <TypeSignature Language="VB.NET" Value="Public Class LiteralControl&#xA;Inherits Control&#xA;Implements ITextControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class LiteralControl : System::Web::UI::Control, System::Web::UI::ITextControl" />
  <TypeSignature Language="F#" Value="type LiteralControl = class&#xA;    inherit Control&#xA;    interface ITextControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.ITextControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt HTML-Elemente, Text und jede andere Art von Zeichenfolge auf einer ASP.NET-Seite dar, für die keine Verarbeitung auf dem Server erforderlich ist.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET kompiliert alle HTML-Elemente und lesbaren Text, der keine serverseitige Verarbeitung in Instanzen dieser Klasse erforderlich ist. Z. B. ein HTML-Element, das keine enthält eine `runat="server"` Attribut/Wert-Paar im Starttag wird kompiliert, in einem <xref:System.Web.UI.LiteralControl> Objekt. <xref:System.Web.UI.LiteralControl> Objekten nicht beibehalten Ansichtszustand, also den Inhalt einer <xref:System.Web.UI.LiteralControl> Objekt muss bei jeder Anforderung neu erstellt werden.  
  
 Von Literale Steuerelementen enthalten Text, was bedeutet, dass Sie können Text aus dem literal-Steuerelement extrahieren und entfernen Sie das literale Steuerelement aus der übergeordneten Serversteuerelements <xref:System.Web.UI.ControlCollection> -Auflistung mithilfe des übergeordneten Elements <xref:System.Web.UI.Control.Controls%2A> Eigenschaft. Aus diesem Grund bei der Entwicklung eines benutzerdefinierten Steuerelements abgeleitet aus den <xref:System.Web.UI.LiteralControl> Klasse, stellen Sie sicher, dass das Steuerelement führt alle erforderlichen Schritte aus, anstatt über einen Aufruf an vorverarbeitung der <xref:System.Web.UI.LiteralControl.Render%2A?displayProperty=nameWithType> Methode, um diese umgesetzt werden können. In der Regel möchten Sie diese Option, um die Antwortzeit Ihrer Webanwendung zu verbessern.  
  
 Sie können Steuerelemente hinzufügen oder entfernen Literale aus einem Seiten- oder Server-Steuerelement programmgesteuert mithilfe der <xref:System.Web.UI.ControlCollection.Add%2A?displayProperty=nameWithType> oder <xref:System.Web.UI.ControlCollection.Remove%2A?displayProperty=nameWithType> -Methode, bzw.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit den überladenen <xref:System.Web.UI.LiteralControl.%23ctor%2A> Konstruktor überschreiben die <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType> Methode. Der Code fügt zwei neue <xref:System.Web.UI.LiteralControl> Objekte und eine <xref:System.Web.UI.WebControls.TextBox> Webserver-Steuerelement des aktuellen Serversteuerelements <xref:System.Web.UI.Control.Controls%2A?displayProperty=nameWithType> Eigenschaft.  
  
 [!code-csharp[SystemWebUILiteralControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/SystemWebUILiteralControl/CS/controlcreatechildcontrols.cs#1)]
 [!code-vb[SystemWebUILiteralControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/SystemWebUILiteralControl/VB/controlcreatechildcontrols.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Control" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.LiteralControl" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LiteralControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.LiteralControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LiteralControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.LiteralControl" />-Klasse, die ein Zeichenfolgenliteral enthält, das auf der angeforderten ASP.NET-Seite gerendert werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel erstellt eine Klasse, `CustLiteralControlClass`, reicht die <xref:System.Web.UI.LiteralControl> Klasse. Erstellt eine Instanz der Klasse, die mit dem Namen `myLiteralControlClass1` mithilfe des Konstruktors, der nicht den Text der <xref:System.Web.UI.LiteralControl> Objekt. Nachdem das Objekt erstellt wurde, die <xref:System.Web.UI.LiteralControl.Text%2A> Eigenschaft wird verwendet, um den Text festzulegen, die sie enthält.  
  
 [!code-csharp[LiteralControlSample#4](~/samples/snippets/csharp/VS_Snippets_WebNet/LiteralControlSample/CS/customliteralcontrol.cs.aspx#4)]
 [!code-vb[LiteralControlSample#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LiteralControlSample/VB/customliteralcontrol.vb.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LiteralControl (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.LiteralControl.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LiteralControl(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.LiteralControl : string -&gt; System.Web.UI.LiteralControl" Usage="new System.Web.UI.LiteralControl text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der auf der angeforderten Webseite zu rendernde Text.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.LiteralControl" />-Klasse mit dem angegebenen Text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel erstellt zwei Instanzen von der <xref:System.Web.UI.LiteralControl> -Klasse unter Verwendung der <xref:System.Web.UI.LiteralControl.%23ctor%2A> Konstruktor. Die beiden Instanzen öffnende und schließende Tags für ein H3-HTML-Element zu rendern und enthalten den Text, der innerhalb der Tags H3 angezeigt.  
  
 [!code-csharp[SystemWebUILiteralControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/SystemWebUILiteralControl/CS/controlcreatechildcontrols.cs#1)]
 [!code-vb[SystemWebUILiteralControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/SystemWebUILiteralControl/VB/controlcreatechildcontrols.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.LiteralControl.Text" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.LiteralControl.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberSignature Language="F#" Value="override this.CreateControlCollection : unit -&gt; System.Web.UI.ControlCollection" Usage="literalControl.CreateControlCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein <see cref="T:System.Web.UI.EmptyControlCollection" />-Objekt für die aktuelle Instanz der <see cref="T:System.Web.UI.LiteralControl" />-Klasse.</summary>
        <returns><see cref="T:System.Web.UI.EmptyControlCollection" /> für das aktuelle Steuerelement.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Standardeinstellung <xref:System.Web.UI.LiteralControl> Objekte nur Text und keine untergeordneten Steuerelemente enthalten. Wenn Sie dieses Verhalten ändern möchten, müssen Sie diese Methode überschreiben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel Beispiel setzt die <xref:System.Web.UI.LiteralControl.CreateControlCollection%2A> Methode zum Erstellen einer Instanz von der <xref:System.Web.UI.ControlCollection> anstatt eine Instanz der Klasse die <xref:System.Web.UI.EmptyControlCollection> Klasse.  
  
 [!code-csharp[LiteralControlSample#2](~/samples/snippets/csharp/VS_Snippets_WebNet/LiteralControlSample/CS/customliteralcontrol.cs#2)]
 [!code-vb[LiteralControlSample#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LiteralControlSample/VB/customliteralcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Control.CreateControlCollection" />
        <altmember cref="T:System.Web.UI.EmptyControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.LiteralControl.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (output As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="literalControl.Render output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="output">Ein <see cref="T:System.Web.UI.HtmlTextWriter" />, der den Inhalt von <see cref="T:System.Web.UI.LiteralControl" /> auf dem anfordernden Client rendert.</param>
        <summary>Schreibt den Inhalt des <see cref="T:System.Web.UI.LiteralControl" />-Objekts in die ASP.NET-Seite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie einen benutzerdefinierten Server Kontrolle wünschen und zum Rendern von bestimmten HTML oder Text an einen Client erstellen, können Sie die Leistung des Steuerelements verbessern, indem Sie übergibt den Wert, der die <xref:System.Web.UI.LiteralControl.Text%2A> Eigenschaft, um die <xref:System.Web.UI.Control.Render%2A?displayProperty=nameWithType> aufrufen, sondern die Methode der <xref:System.Web.UI.LiteralControl.Render%2A> Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.LiteralControl.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.LiteralControl.Text" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.ITextControl.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Textinhalt des <see cref="T:System.Web.UI.LiteralControl" />-Objekts ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.String" />, der den Textinhalt des literalen Steuerelements darstellt. Die Standardeinstellung ist <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel erstellt eine Klasse, `CustLiteralControlClass`, reicht die <xref:System.Web.UI.LiteralControl> Klasse. Erstellt eine Instanz der Klasse, die mit dem Namen `myLiteralControlClass1` mithilfe des Konstruktors, der nicht den Text der <xref:System.Web.UI.LiteralControl> Objekt. Nachdem das Objekt erstellt wurde, die <xref:System.Web.UI.LiteralControl.Text%2A> Eigenschaft wird verwendet, um den Text festzulegen, die sie enthält.  
  
 [!code-csharp[LiteralControlSample#4](~/samples/snippets/csharp/VS_Snippets_WebNet/LiteralControlSample/CS/customliteralcontrol.cs.aspx#4)]
 [!code-vb[LiteralControlSample#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LiteralControlSample/VB/customliteralcontrol.vb.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
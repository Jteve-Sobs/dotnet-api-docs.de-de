<Type Name="PageStatePersister" FullName="System.Web.UI.PageStatePersister">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9061c45bf25a9a075ccac221ac3edb165b5800af" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37587678" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PageStatePersister" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PageStatePersister extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageStatePersister" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PageStatePersister" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageStatePersister abstract" />
  <TypeSignature Language="F#" Value="type PageStatePersister = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt die Basisfunktionen für die Dauerhaftigkeitsmechanismen für den Ansichtszustand in ASP.NET bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die HTTP-Anforderungen und Antworten, weisen grundsätzlich keinen Zustand. Um Zustandsinformationen zwischen HTTP-Anforderungen zu gewährleisten, können die ASP.NET-Seiten für Server speichern <xref:System.Web.UI.Page> Zustand. Dieser Zustand wird aufgerufen, Ansichtszustand besteht aus Seite und Einstellungen und Daten, die Seite und der Steuerelemente, die angezeigt werden, als ob sie identisch sind, die der Benutzer gesehen haben und mit Ihnen zu interagieren auf ihren letzten Roundtrip zum Server. Mehrere Mechanismen vorhanden, um den Ansichtszustand zwischen aufeinander folgende Anforderungen zur selben Seite zu speichern. Die abstrakte <xref:System.Web.UI.PageStatePersister> Klasse stellt die Basisklasse für Mechanismen Speicher Informationen Zustand dar.  
  
 Die standardmäßige Ansicht Dauerhaftigkeitsmechanismus in ASP.NET als Base64-codierte Zeichenfolge in einem ausgeblendeten HTML-Element. Informationen über den Zustand beibehalten wird (ein Element mit dem `type` -Attributsatz auf `"hidden"`) auf der Seite. Eine ASP.NET-Seite verwendet ein <xref:System.Web.UI.HiddenFieldPageStatePersister> Objekt hierzu arbeiten, verwenden eine <xref:System.Web.UI.IStateFormatter> Instanz zum Serialisieren und Deserialisieren von Objektzustandsinformationen. Alternativ können Sie das Feld Ansichtszustand speichern, Ihre Seiten in der <xref:System.Web.HttpContext.Session%2A> Objekt auf dem Server mithilfe der <xref:System.Web.UI.SessionPageStatePersister> Klasse für mobile Clients mit begrenzter Bandbreite und Ressourcen. In einigen Fällen können Sie Statuspersistenz Ansicht vollständig deaktivieren. Wenn Sie dies tun, ist das Ergebnis an, dass manchmal Seiten und Steuerelemente, die auf Dauerhaftigkeit des basieren nicht ordnungsgemäß Verhalten. Weitere Informationen zu den seitenspezifischen Status Verwaltungs- und Ansicht-Status, finden Sie unter [ASP.NET State Management Overview](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce).  
  
 Wenn Sie Steuerelemente schreiben, können Sie mit der speichern Zustandsinformationen für die Steuerelemente in der <xref:System.Web.UI.Control.ViewState%2A> Wörterbuch, das ist eine <xref:System.Web.UI.StateBag> Objekt. Ein Entwickler würde den Zustand des Steuerelements durch Abrufen der <xref:System.Web.UI.PageStatePersister.ControlState%2A> Eigenschaft. Sie zuweisen, Schlüssel und Werte, die <xref:System.Web.UI.Control.ViewState%2A> -Eigenschaft, und die <xref:System.Web.UI.Page> Objekt serialisiert die Zustandsinformationen zwischen Browseranforderungen. Zum Ausführen von benutzerdefinierten Zustandsbehandlung in Ihrem Steuerelement außer Kraft setzen der <xref:System.Web.UI.Control.LoadViewState%2A> und <xref:System.Web.UI.Control.SaveViewState%2A> Methoden. Alle Zustandsinformationen, die in diesem Wörterbuch gespeichert sind geht verloren, wenn von einem Seitenentwickler Ansichtszustand deaktiviert ist. Um die Arbeit erleichtern, in ASP.NET, Version 2.0, die Sie wichtige Zustandsinformationen in ein separates Objekt, Namen Steuerelementzustand speichern können. Das Zustandsobjekt, das Steuerelement hat keine Auswirkungen, wenn der Ansichtszustand deaktiviert ist, durch den Seitenentwickler. Speichern von Zustandsinformationen in das Steuerelement Zustandsobjekt, das erfordert, dass das Steuerelement überschreibt die <xref:System.Web.UI.Control.LoadControlState%2A> und <xref:System.Web.UI.Control.SaveControlState%2A> Methoden und das Steuerelement registriert werden, zum Speichern von Statusinformationen im Steuerelementzustand jedes Mal, wenn das Steuerelement initialisiert wurde. Sie können ein Steuerelement zum Steuerelementzustand durch Überschreiben verwenden Registrieren der <xref:System.Web.UI.Control.OnInit%2A> -Methode ab, und rufen die <xref:System.Web.UI.Page.RegisterRequiresControlState%2A> Methode. Weitere Informationen zur Verwendung der <xref:System.Web.UI.Control.ViewState%2A> -Eigenschaft und des Steuerelementzustands beim Entwickeln von Steuerelementen, finden Sie unter [Entwickeln von benutzerdefinierten ASP.NET-Serversteuerelementen](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
 Verwalten der Ansichtszustand auf Clients, die vorhandenen nicht unterstützen, anzeigen Zustandsdauerhaftigkeitsmechanismen, können Sie erweitern die <xref:System.Web.UI.PageStatePersister> Klasse, um die Einführung von Ihren eigenen Zustand Persistenz-Methoden anzuzeigen, und Sie können Seitenadaptern zum Konfigurieren Ihrer ASP.NET-Anwendung Verwenden Sie andere Ansicht Status-beständigkeitsmechanismen basierend auf dem Typ des Clients, der eine Seite erstellt wird. Abgeleitete Klassen die <xref:System.Web.UI.PageStatePersister> überschreiben die abstrakte Klasse <xref:System.Web.UI.PageStatePersister.Save%2A> Methode, um die Ansichts- und Steuerelementzustand im Dauerhaftigkeitsmedium gespeichert, und überschreiben die <xref:System.Web.UI.PageStatePersister.Load%2A> Methode, um es zu extrahieren. Wenn Sie die Ansichts- und Steuerelementzustand, der eine Zeichenfolge serialisieren möchten, können Sie die <xref:System.Web.UI.IStateFormatter> -Objekt, das erfolgt über die <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> Eigenschaft. Effizient serialisiert und deserialisiert Objektzustandsinformationen in eine Base64-codierte Zeichenfolge. Sie können auch überschreiben die <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> Eigenschaft, um Ihre eigenen Serialisierungsmechanismus des Objekt-Status bereitzustellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Web.UI.PageStatePersister> -Objekt, das Ansichts- und Steuerelementzustand auf dem Webserver gespeichert. Die `StreamPageStatePersister` veranschaulicht das Überschreiben der <xref:System.Web.UI.PageStatePersister.Load%2A> und <xref:System.Web.UI.PageStatePersister.Save%2A> Zustandsinformationen der Methoden zum Extrahieren und zu speichern. Da die Status-beständigkeitsmechanismen mit adaptivem Rendering und Client-Funktionen in Zusammenhang stehen die `MyPageAdapter` Klasse dient zum Aktivieren der `StreamPageStatePersister` für eine ASP.NET-Anwendung. Abschließend wird eine Browser-Funktionen (.browser)-Datei bereitgestellt, um ermöglichen die `MyPageAdapter` -Adapter für eine bestimmte Klasse von Clients (in diesem Fall die Standard-Webbrowser).  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#1)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Web.UI.Adapters.PageAdapter> -Klasse, die eine Instanz der zurückgibt `StreamPageStatePersister`, dient zum Anzeigen und Steuern von Status für eine ASP.NET-Webseite persistent zu speichern.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#5)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#5)]  
  
 Kompilieren Sie diese beiden Klassen in einer Assembly, die Sie verwenden können, führen Sie ein Beispiel, mit der folgenden Befehlszeile für den Compiler an. Stellen Sie sicher, dass die kompilierte Assembly in das Verzeichnis "\Bin" unterhalb des Stamms der ASP.NET-Anwendung ist.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#6)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#6)]  
  
 Schließlich aktivieren die `MyPageAdapter` Adapter müssen Sie erstellen Sie ein Verzeichnis mit dem Namen Browser unterhalb des Stamms der ASP.NET-Anwendung und eine Browser-Datei mit den Konfigurationsinformationen enthalten. Die `<refid>` Element in der Konfigurationsdatei gibt an, dass die Konfiguration für den Standardbrowser in der Konfigurationsdatei Default.browser angegebenen Werte überschreibt. In diesem Beispiel `MyPageAdapter` dient für ASP.NET Web Pages (wobei normalerweise kein Adapter verwendet).  
  
```  
<browsers>  
    <browser refid="Default" >  
        <controlAdapters>  
            <adapter   
                controlType="System.Web.UI.Page"                              
                adapterType="Samples.AspNet.CS.MyPageAdapter" />  
        </controlAdapters>  
    </browser>  
</browsers>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ObjectStateFormatter" />
    <altmember cref="T:System.Web.UI.LosFormatter" />
    <altmember cref="T:System.Web.UI.Pair" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PageStatePersister (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.#ctor(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PageStatePersister(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageStatePersister : System.Web.UI.Page -&gt; System.Web.UI.PageStatePersister" Usage="new System.Web.UI.PageStatePersister page" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">Die <see cref="T:System.Web.UI.Page" />, für die der Dauerhaftigkeitsmechanismus für den Ansichtszustand erstellt wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.PageStatePersister" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="page" />-Parameter ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ControlState">
      <MemberSignature Language="C#" Value="public object ControlState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ControlState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ControlState" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ControlState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ControlState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das die Daten darstellt, die Steuerelemente, die sich im aktuellen <see cref="T:System.Web.UI.Page" />-Objekt befinden, über HTTP-Anforderungen an den Webserver hinweg beibehalten, oder legt dieses fest.</summary>
        <value>Ein Objekt mit Ansichtszustandsdaten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Steuerelementzustand handelt es sich um ein Objekt, bestehend aus kritischen Ansichtszustandsdaten, die Web-Server-Steuerelemente für Ihre Funktion benötigen, und befindet sich in einem separaten Objekt als normale Ansichtszustandsinformationen. Daten des Steuerelementzustands ist nicht betroffen, wenn der Ansichtszustand deaktiviert ist, auf die <xref:System.Web.UI.Page> Ebene, erfordert aber zusätzliche Implementierungsschritte verwenden. Weitere Informationen zur Verwendung der <xref:System.Web.UI.Control.ViewState%2A> -Eigenschaft und des Steuerelementzustands beim Entwickeln von Steuerelementen, finden Sie unter [Entwickeln von benutzerdefinierten ASP.NET-Serversteuerelementen](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine abgeleitete Klasse die <xref:System.Web.UI.PageStatePersister> -Klasse initialisiert den <xref:System.Web.UI.PageStatePersister.ControlState%2A> Eigenschaft. In diesem Beispiel die <xref:System.Web.UI.PageStatePersister.ControlState%2A> Eigenschaft zugewiesen wurde die <xref:System.Web.UI.Pair.Second> Feld eine <xref:System.Web.UI.Pair> Objekt aus, und mit serialisiert die <xref:System.Web.UI.ObjectStateFormatter> Klasse. Wenn die <xref:System.Web.UI.PageStatePersister.Load%2A> -Methode aufgerufen wird, die <xref:System.Web.UI.ObjectStateFormatter> Klasse wird verwendet, um das Deserialisieren und Informationen zum Ansichtszustand, und die <xref:System.Web.UI.PageStatePersister.ControlState%2A> -Eigenschaft wird aus den resultierenden initialisiert <xref:System.Web.UI.Pair> des Objekts <xref:System.Web.UI.Pair.Second> Feld. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Web.UI.PageStatePersister> Klasse.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public abstract void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Load" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Load();" />
      <MemberSignature Language="F#" Value="abstract member Load : unit -&gt; unit" Usage="pageStatePersister.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Von abgeleiteten Klassen zum Deserialisieren und Laden beibehaltener Zustandsinformationen überschrieben, wenn ein <see cref="T:System.Web.UI.Page" />-Objekt seine Steuerelementhierarchie initialisiert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Abgeleitete Klassen die <xref:System.Web.UI.PageStatePersister> implementieren die <xref:System.Web.UI.PageStatePersister.Load%2A> Methode zum Initialisieren der <xref:System.Web.UI.PageStatePersister.ViewState%2A> und <xref:System.Web.UI.PageStatePersister.ControlState%2A> Eigenschaften aus einem persistenten Format.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine abgeleitete Klasse die <xref:System.Web.UI.PageStatePersister> -Klasse implementiert die <xref:System.Web.UI.PageStatePersister.Load%2A> Methode, um aus einem persistenten Medium Ansichtszustand zu laden. Die `StreamPageStatePersister` versucht, Daten aus einem Stream zu lesen. Er verwendet eine <xref:System.Web.UI.IStateFormatter> Objekt Deserialisieren Ansichtszustandsdaten und Initialisieren der <xref:System.Web.UI.PageStatePersister.ViewState%2A> Eigenschaft und die <xref:System.Web.UI.PageStatePersister.ControlState%2A> -Eigenschaft, die eine Seite verwendet wird, um Steuerelemente zu initialisieren. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Web.UI.PageStatePersister> Klasse.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Page">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Page Page { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Page Page" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.Page" />
      <MemberSignature Language="VB.NET" Value="Protected Property Page As Page" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::Page ^ Page { System::Web::UI::Page ^ get(); void set(System::Web::UI::Page ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Page : System.Web.UI.Page with get, set" Usage="System.Web.UI.PageStatePersister.Page" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Page</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Web.UI.Page" />-Objekt fest, für das der Dauerhaftigkeitsmechanismus für den Ansichtszustand erstellt wird, oder legt dieses fest.</summary>
        <value>Das <see cref="T:System.Web.UI.Page" />, das <see cref="T:System.Web.UI.PageStatePersister" /> zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können Sie die <xref:System.Web.UI.PageStatePersister.Page%2A> Eigenschaft auf die aktuelle <xref:System.Web.HttpContext> Objekt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public abstract void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Save" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Save();" />
      <MemberSignature Language="F#" Value="abstract member Save : unit -&gt; unit" Usage="pageStatePersister.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Von abgeleiteten Klassen zum Serialisieren beibehaltener Zustandsinformationen überschrieben, wenn ein <see cref="T:System.Web.UI.Page" />-Objekt aus dem Speicher entladen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Abgeleitete Klassen die <xref:System.Web.UI.PageStatePersister> implementieren die <xref:System.Web.UI.PageStatePersister.Save%2A> Methode, um den Inhalt des beibehalten der <xref:System.Web.UI.PageStatePersister.ViewState%2A> und <xref:System.Web.UI.PageStatePersister.ControlState%2A> Eigenschaften auf einem persistenten Medium.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine abgeleitete Klasse die <xref:System.Web.UI.PageStatePersister> -Klasse implementiert die <xref:System.Web.UI.PageStatePersister.Save%2A> Methode zum Beibehalten des Ansichtszustands auf einem persistenten Medium. Die `StreamPageStatePersister` verwendet eine <xref:System.Web.UI.IStateFormatter> zu den Inhalt der zu serialisierende Objekt die <xref:System.Web.UI.PageStatePersister.ViewState%2A> Eigenschaft und <xref:System.Web.UI.PageStatePersister.ControlState%2A> Eigenschaft. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Web.UI.PageStatePersister> Klasse.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateFormatter">
      <MemberSignature Language="C#" Value="protected System.Web.UI.IStateFormatter StateFormatter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IStateFormatter StateFormatter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StateFormatter As IStateFormatter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::IStateFormatter ^ StateFormatter { System::Web::UI::IStateFormatter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StateFormatter : System.Web.UI.IStateFormatter" Usage="System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IStateFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.IStateFormatter" />-Objekt ab, das bei Aufrufen der <see cref="P:System.Web.UI.PageStatePersister.ViewState" />-Methode und der <see cref="P:System.Web.UI.PageStatePersister.ControlState" />-Methode zum Serialisieren und Deserialisieren der in der <see cref="M:System.Web.UI.PageStatePersister.Save" />-Eigenschaft und der <see cref="M:System.Web.UI.PageStatePersister.Load" />-Eigenschaft befindlichen Zustandsinformationen verwendet wird.</summary>
        <value>Eine <see cref="T:System.Web.UI.IStateFormatter" />-Instanz, die zum Serialisieren und Deserialisieren des Objektzustands verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können außer Kraft setzen der <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> Eigenschaft, um Ihre eigenen Formatierungsprogramme für den Ansichtszustand bereitzustellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine abgeleitete Klasse die <xref:System.Web.UI.PageStatePersister> Klasse greift auf die <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> abzurufende Eigenschaft eine <xref:System.Web.UI.ObjectStateFormatter> -Objekt, das die Standardimplementierung ist von der <xref:System.Web.UI.IStateFormatter> Schnittstelle, um die Ansicht zu serialisieren und Zustand in einen Stream. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Web.UI.PageStatePersister> Klasse.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewState">
      <MemberSignature Language="C#" Value="public object ViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property ViewState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ViewState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ViewState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das die Daten darstellt, die Steuerelemente, die sich im aktuellen <see cref="T:System.Web.UI.Page" />-Objekt befinden, über HTTP-Anforderungen an den Webserver hinweg beibehalten, oder legt dieses fest.</summary>
        <value>Ein Objekt mit Ansichtszustandsdaten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ansichtszustand ist ein Wörterbuch von Daten, die Webserver-Steuerelemente funktionieren und sich selbst rendern müssen. Entwickler von Steuerelementen in der Regel Zugriff auf den Ansichtszustand Objekt mithilfe der <xref:System.Web.UI.Control.ViewState%2A> Eigenschaft. Ansichtszustand ist betroffen, wenn der Ansichtszustand deaktiviert ist, auf die <xref:System.Web.UI.Page> Ebene, und daher Steuerelemente verhalten sich ggf. nicht ordnungsgemäß in diesen Szenarien. Weitere Informationen zur Verwendung von <xref:System.Web.UI.Control.ViewState%2A> und Steuerelementzustand beim Entwickeln von Steuerelementen, finden Sie unter [Entwickeln von benutzerdefinierten ASP.NET-Serversteuerelementen](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine abgeleitete Klasse die <xref:System.Web.UI.PageStatePersister> -Klasse initialisiert den <xref:System.Web.UI.PageStatePersister.ViewState%2A> Eigenschaft. In diesem Beispiel die <xref:System.Web.UI.PageStatePersister.ViewState%2A> Eigenschaft zugewiesen wurde die <xref:System.Web.UI.Pair.First> Feld eine <xref:System.Web.UI.Pair> Objekt aus, und mit serialisiert die <xref:System.Web.UI.ObjectStateFormatter> -Objekt, das eine Instanz von der <xref:System.Web.UI.IStateFormatter> Schnittstelle. Wenn die <xref:System.Web.UI.PageStatePersister.Load%2A> -Methode aufgerufen wird, die <xref:System.Web.UI.ObjectStateFormatter> Schnittstelle wird verwendet, um Informationen zum Ansichtszustand, deserialisieren und die <xref:System.Web.UI.PageStatePersister.ViewState%2A> -Eigenschaft wird aus den resultierenden initialisiert <xref:System.Web.UI.Pair> des Objekts <xref:System.Web.UI.Pair.First> Feld. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Web.UI.PageStatePersister> Klasse.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="PageStatePersister" FullName="System.Web.UI.PageStatePersister">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b515aafcec8e943bcec00676f25a86b1c278bc74" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77244316" /></Metadata><TypeSignature Language="C#" Value="public abstract class PageStatePersister" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PageStatePersister extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageStatePersister" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PageStatePersister" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageStatePersister abstract" />
  <TypeSignature Language="F#" Value="type PageStatePersister = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt die Basisfunktionen für die Dauerhaftigkeitsmechanismen für den Ansichtszustand in ASP.NET bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die HTTP-Anforderungen und-Antworten sind grundsätzlich zustandslos. Um Zustandsinformationen zwischen HTTP-Anforderungen zu erhalten, können ASP.NET-Server Seiten <xref:System.Web.UI.Page> Status speichern. Dieser Zustand, der als Ansichts Zustand bezeichnet wird, besteht aus Seiten-und Steuerelement Einstellungen und Daten, mit denen die Seite und die Steuerelemente so angezeigt werden, als wären Sie die gleichen, die der Benutzer beim letzten Roundtrip zum Server sah und interagiert hat. Es gibt mehrere Mechanismen, um den Ansichts Zustand zwischen aufeinander folgenden Anforderungen auf derselben Seite zu speichern. Die abstrakte <xref:System.Web.UI.PageStatePersister>-Klasse stellt die Basisklasse für diese Zustands Informationsspeicher-Mechanismen dar.  
  
 Der standardmäßige Ansichts Zustands-Persistenzmechanismus in ASP.net besteht darin, die Zustandsinformationen als Base64-codierte Zeichenfolge in einem ausgeblendeten HTML-Element (ein Element, bei dem das `type`-Attribut auf die `"hidden"`) auf der Seite Eine ASP.NET-Seite verwendet ein <xref:System.Web.UI.HiddenFieldPageStatePersister>-Objekt, um diese Arbeit auszuführen, wobei eine <xref:System.Web.UI.IStateFormatter> Instanz verwendet wird, um Objekt Zustandsinformationen zu serialisieren und zu deserialisieren. Alternativ können Sie den Ansichts Zustand für Ihre Seiten im <xref:System.Web.HttpContext.Session%2A> Objekt auf dem Server speichern, indem Sie die <xref:System.Web.UI.SessionPageStatePersister>-Klasse für mobile Clients mit eingeschränkter Bandbreite und Ressourcen verwenden. In einigen Fällen können Sie die Ansichts Zustands Persistenz vollständig deaktivieren. Wenn Sie dies tun, ist das Ergebnis, dass Seiten und Steuerelemente, die auf Zustands Persistenz basieren, nicht ordnungsgemäß Verhalten. Weitere Informationen zur Seiten Status Verwaltung und zum Ansichts Zustand finden Sie unter [ASP.net State Management Overview](https://docs.microsoft.com/previous-versions/aspnet/75x4ha6s(v=vs.100)).  
  
 Wenn Sie Steuerelemente schreiben, können Sie Zustandsinformationen für die Steuerelemente im <xref:System.Web.UI.Control.ViewState%2A> Wörterbuch speichern, bei dem es sich um ein <xref:System.Web.UI.StateBag> Objekt handelt. Ein Entwickler würde den Steuerelement Zustand über die <xref:System.Web.UI.PageStatePersister.ControlState%2A>-Eigenschaft abrufen. Sie weisen der <xref:System.Web.UI.Control.ViewState%2A>-Eigenschaft Schlüssel und Werte zu, und das <xref:System.Web.UI.Page>-Objekt serialisiert die Zustandsinformationen zwischen Anforderungen. Um eine benutzerdefinierte Zustands Behandlung in Ihrem Steuerelement auszuführen, überschreiben Sie die Methoden <xref:System.Web.UI.Control.LoadViewState%2A> und <xref:System.Web.UI.Control.SaveViewState%2A>. Alle Zustandsinformationen, die in diesem Wörterbuch gespeichert werden, gehen verloren, wenn der Ansichts Zustand von einem Seiten Entwickler deaktiviert wird. Um dies zu vermeiden, können Sie in ASP.NET Version 2,0 wichtige Zustandsinformationen in einem separaten Objekt, dem sogenannten Steuerungs Zustand, speichern. Das Steuerelement Zustands Objekt ist nicht betroffen, wenn der Ansichts Zustand von einem Seiten Entwickler deaktiviert wird. Das Speichern von Zustandsinformationen im Steuerungs Zustands Objekt erfordert, dass das Steuerelement die Methoden <xref:System.Web.UI.Control.LoadControlState%2A> und <xref:System.Web.UI.Control.SaveControlState%2A> überschreibt und dass das Steuerelement registriert wird, um Zustandsinformationen bei jedem Initialisieren des Steuer Elements im Steuerelement Zustand zu speichern. Sie können ein Steuerelement registrieren, um den Steuerungs Zustand zu verwenden, indem Sie die <xref:System.Web.UI.Control.OnInit%2A>-Methode überschreiben und die <xref:System.Web.UI.Page.RegisterRequiresControlState%2A>-Methode aufrufen Weitere Informationen zum Verwenden der <xref:System.Web.UI.Control.ViewState%2A>-Eigenschaft und des Steuerungs Zustands beim Entwickeln von Steuerelementen finden Sie unter [entwickeln von benutzerdefinierten ASP.NET-Server Steuerelementen](https://docs.microsoft.com/previous-versions/aspnet/zt27tfhy(v=vs.100)).  
  
 Um den Ansichts Zustand auf Clients beizubehalten, die die vorhandenen Ansichts Zustands-Persistenzmechanismen nicht unterstützen, können Sie die <xref:System.Web.UI.PageStatePersister>-Klasse erweitern, um Ihre eigenen persistenzpersistenzmethoden einzuführen, und Sie können die ASP.NET-Anwendung mithilfe von Seiten Adaptern so konfigurieren, dass unterschiedliche Ansichts Zustands-Persistenzmechanismen basierend auf dem Clienttyp verwendet werden Klassen, die von der <xref:System.Web.UI.PageStatePersister> Klasse abgeleitet werden, müssen die abstrakte <xref:System.Web.UI.PageStatePersister.Save%2A> Methode überschreiben, um den Ansichts Zustand und den Steuerelement Zustand im persistenzmedium zu speichern und die <xref:System.Web.UI.PageStatePersister.Load%2A> Methode zum Extrahieren zu überschreiben. Wenn Sie den Ansichts Zustand und den Steuerelement Zustand in eine Zeichenfolge serialisieren müssen, können Sie das <xref:System.Web.UI.IStateFormatter> Objekt verwenden, auf das mit der <xref:System.Web.UI.PageStatePersister.StateFormatter%2A>-Eigenschaft zugegriffen wird. Sie serialisiert und deserialisiert Objekt Zustandsinformationen effizient in eine Base64-codierte Zeichenfolge. Sie können auch die <xref:System.Web.UI.PageStatePersister.StateFormatter%2A>-Eigenschaft überschreiben, um einen eigenen objektstatusserialisierungsmechanismus bereitzustellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.PageStatePersister>-Objekt erstellt wird, das den Ansichts-und Steuerelement Zustand auf dem Webserver speichert. Der `StreamPageStatePersister` veranschaulicht, wie die <xref:System.Web.UI.PageStatePersister.Load%2A> und <xref:System.Web.UI.PageStatePersister.Save%2A> Methoden überschrieben werden, um Ansichts Zustandsinformationen zu extrahieren und zu speichern. Da die Zustands Persistenzmechanismen mit adaptiver Rendering und Client Funktionen in Zusammenhang stehen, wird die `MyPageAdapter`-Klasse bereitgestellt, um die `StreamPageStatePersister` für eine ASP.NET-Anwendung zu aktivieren. Zum Schluss wird eine Browser Funktions Datei (. Browser) bereitgestellt, um den `MyPageAdapter` Adapter für eine bestimmte Client Klasse (in diesem Fall den Standard Webbrowser) zu aktivieren.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#1)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.Adapters.PageAdapter> Klasse erstellt wird, die eine Instanz von `StreamPageStatePersister`zurückgibt, die verwendet wird, um den Ansichts-und Steuerelement Zustand für eine ASP.NET-Webseite beizubehalten.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#5)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#5)]  
  
 Kompilieren Sie diese beiden Klassen in eine Assembly, die Sie verwenden können, um ein Beispiel mit der folgenden Compilerbefehlszeile auszuführen. Stellen Sie sicher, dass sich die kompilierte Assembly im Verzeichnis "\bin" unterhalb des Anwendungs Stamms ASP.Net befindet.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#6)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#6)]  
  
 Zum Schluss müssen Sie zum Aktivieren des `MyPageAdapter` Adapters ein Verzeichnis namens "Browsers" unterhalb des ASP.NET-Anwendungs Stamms erstellen und eine. Browser-Datei mit Konfigurationsinformationen einschließen. Das `<refid>`-Element in der Konfigurationsdatei gibt an, dass die Konfiguration die Werte überschreibt, die für den Standardbrowser in der standardmäßigen Browser Konfigurationsdatei angegeben sind. In diesem Beispiel wird `MyPageAdapter` für ASP.NET-Webseiten verwendet (in der Regel kein Adapter verwendet).  
  
```  
<browsers>  
    <browser refid="Default" >  
        <controlAdapters>  
            <adapter   
                controlType="System.Web.UI.Page"                              
                adapterType="Samples.AspNet.CS.MyPageAdapter" />  
        </controlAdapters>  
    </browser>  
</browsers>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ObjectStateFormatter" />
    <altmember cref="T:System.Web.UI.LosFormatter" />
    <altmember cref="T:System.Web.UI.Pair" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PageStatePersister (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.#ctor(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PageStatePersister(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageStatePersister : System.Web.UI.Page -&gt; System.Web.UI.PageStatePersister" Usage="new System.Web.UI.PageStatePersister page" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">Die <see cref="T:System.Web.UI.Page" />, für die der Dauerhaftigkeitsmechanismus für den Ansichtszustand erstellt wird.</param>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Web.UI.PageStatePersister" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der Parameter <paramref name="page" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ControlState">
      <MemberSignature Language="C#" Value="public object ControlState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ControlState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ControlState" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ControlState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ControlState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das die Daten darstellt, die Steuerelemente, die sich im aktuellen <see cref="T:System.Web.UI.Page" />-Objekt befinden, über HTTP-Anforderungen an den Webserver hinweg beibehalten, oder legt dieses fest.</summary>
        <value>Ein Objekt mit Ansichtszustandsdaten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Steuerelement Zustand ist ein Objekt, das aus kritischen Ansichts Zustandsdaten besteht, die von den Webserver-Steuerelementen verwendet werden müssen, und ist in einem separaten Objekt aus den normalen Ansichts Zustandsinformationen enthalten. Steuerungs Zustandsdaten sind nicht betroffen, wenn der Ansichts Zustand auf <xref:System.Web.UI.Page> Ebene deaktiviert ist, erfordert jedoch zusätzliche Implementierungs Schritte für die Verwendung von. Weitere Informationen zum Verwenden der <xref:System.Web.UI.Control.ViewState%2A>-Eigenschaft und des Steuerungs Zustands beim Entwickeln von Steuerelementen finden Sie unter [entwickeln von benutzerdefinierten ASP.NET-Server Steuerelementen](https://docs.microsoft.com/previous-versions/aspnet/zt27tfhy(v=vs.100)).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Klasse, die von der <xref:System.Web.UI.PageStatePersister>-Klasse abgeleitet wird, die <xref:System.Web.UI.PageStatePersister.ControlState%2A>-Eigenschaft initialisiert. In diesem Beispiel wurde die <xref:System.Web.UI.PageStatePersister.ControlState%2A>-Eigenschaft dem <xref:System.Web.UI.Pair.Second>-Feld eines <xref:System.Web.UI.Pair>-Objekts zugewiesen und mithilfe der <xref:System.Web.UI.ObjectStateFormatter>-Klasse serialisiert. Wenn die <xref:System.Web.UI.PageStatePersister.Load%2A>-Methode aufgerufen wird, wird die <xref:System.Web.UI.ObjectStateFormatter>-Klasse verwendet, um Ansichts Zustands-und Steuerelement Zustandsinformationen zu deserialisieren, und die <xref:System.Web.UI.PageStatePersister.ControlState%2A>-Eigenschaft wird aus dem <xref:System.Web.UI.Pair.Second> Feld des resultierenden <xref:System.Web.UI.Pair> Objekts initialisiert. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Web.UI.PageStatePersister>-Klasse bereitgestellt wird.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public abstract void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Load" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Load();" />
      <MemberSignature Language="F#" Value="abstract member Load : unit -&gt; unit" Usage="pageStatePersister.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Von abgeleiteten Klassen zum Deserialisieren und Laden beibehaltener Zustandsinformationen überschrieben, wenn ein <see cref="T:System.Web.UI.Page" />-Objekt seine Steuerelementhierarchie initialisiert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von der <xref:System.Web.UI.PageStatePersister>-Klasse abgeleitet werden, implementieren die <xref:System.Web.UI.PageStatePersister.Load%2A>-Methode, um die <xref:System.Web.UI.PageStatePersister.ViewState%2A> und <xref:System.Web.UI.PageStatePersister.ControlState%2A> Eigenschaften aus einem persistenten Format zu initialisieren.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht, wie eine Klasse, die von der <xref:System.Web.UI.PageStatePersister>-Klasse abgeleitet wird, die <xref:System.Web.UI.PageStatePersister.Load%2A>-Methode implementiert, um den Ansichts Zustand von einem persistenzmedium Der `StreamPageStatePersister` versucht, Daten aus einem Stream zu lesen. Es verwendet ein <xref:System.Web.UI.IStateFormatter> Objekt, um Ansichts Zustandsdaten zu deserialisieren und die <xref:System.Web.UI.PageStatePersister.ViewState%2A>-Eigenschaft und die <xref:System.Web.UI.PageStatePersister.ControlState%2A>-Eigenschaft zu initialisieren, die eine Seite zum Initialisieren von Steuerelementen verwendet. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Web.UI.PageStatePersister>-Klasse bereitgestellt wird.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Page">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Page Page { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Page Page" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.Page" />
      <MemberSignature Language="VB.NET" Value="Protected Property Page As Page" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::Page ^ Page { System::Web::UI::Page ^ get(); void set(System::Web::UI::Page ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Page : System.Web.UI.Page with get, set" Usage="System.Web.UI.PageStatePersister.Page" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Page</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Web.UI.Page" />-Objekt fest, für das der Dauerhaftigkeitsmechanismus für den Ansichtszustand erstellt wird, oder legt dieses fest.</summary>
        <value>Das <see cref="T:System.Web.UI.Page" />, das <see cref="T:System.Web.UI.PageStatePersister" /> zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Web.UI.PageStatePersister.Page%2A>-Eigenschaft verwenden, um auf das aktuelle <xref:System.Web.HttpContext> Objekt zuzugreifen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public abstract void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Save" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Save();" />
      <MemberSignature Language="F#" Value="abstract member Save : unit -&gt; unit" Usage="pageStatePersister.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Von abgeleiteten Klassen zum Serialisieren beibehaltener Zustandsinformationen überschrieben, wenn ein <see cref="T:System.Web.UI.Page" />-Objekt aus dem Speicher entladen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von der <xref:System.Web.UI.PageStatePersister>-Klasse abgeleitet werden, implementieren die <xref:System.Web.UI.PageStatePersister.Save%2A>-Methode, um den Inhalt der <xref:System.Web.UI.PageStatePersister.ViewState%2A> und <xref:System.Web.UI.PageStatePersister.ControlState%2A> Eigenschaften auf einem persistenzmedium beizubehalten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Klasse, die von der <xref:System.Web.UI.PageStatePersister>-Klasse abgeleitet wird, die <xref:System.Web.UI.PageStatePersister.Save%2A>-Methode implementiert, um den Ansichts Zustand in einem Dauerhaftigkeits Der `StreamPageStatePersister` verwendet ein <xref:System.Web.UI.IStateFormatter> Objekt, um den Inhalt der <xref:System.Web.UI.PageStatePersister.ViewState%2A>-Eigenschaft und <xref:System.Web.UI.PageStatePersister.ControlState%2A>-Eigenschaft zu serialisieren. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Web.UI.PageStatePersister>-Klasse bereitgestellt wird.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateFormatter">
      <MemberSignature Language="C#" Value="protected System.Web.UI.IStateFormatter StateFormatter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IStateFormatter StateFormatter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StateFormatter As IStateFormatter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::IStateFormatter ^ StateFormatter { System::Web::UI::IStateFormatter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StateFormatter : System.Web.UI.IStateFormatter" Usage="System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IStateFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.IStateFormatter" />-Objekt ab, das bei Aufrufen der <see cref="P:System.Web.UI.PageStatePersister.ViewState" />-Methode und der <see cref="P:System.Web.UI.PageStatePersister.ControlState" />-Methode zum Serialisieren und Deserialisieren der in der <see cref="M:System.Web.UI.PageStatePersister.Save" />-Eigenschaft und der <see cref="M:System.Web.UI.PageStatePersister.Load" />-Eigenschaft befindlichen Zustandsinformationen verwendet wird.</summary>
        <value>Eine <see cref="T:System.Web.UI.IStateFormatter" />-Instanz, die zum Serialisieren und Deserialisieren des Objektzustands verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Web.UI.PageStatePersister.StateFormatter%2A>-Eigenschaft überschreiben, um einen eigenen Formatter für das Ansichts Zustand bereitzustellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Klasse, die von der <xref:System.Web.UI.PageStatePersister>-Klasse abgeleitet wird, auf die <xref:System.Web.UI.PageStatePersister.StateFormatter%2A>-Eigenschaft zugreift, um ein <xref:System.Web.UI.ObjectStateFormatter> Objekt abzurufen, das die Standard Implementierung der <xref:System.Web.UI.IStateFormatter> Schnittstelle ist, um den Ansichts Zustand und den Steuerungs Zustand in einen Stream zu serialisieren. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Web.UI.PageStatePersister>-Klasse bereitgestellt wird.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewState">
      <MemberSignature Language="C#" Value="public object ViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property ViewState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ViewState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ViewState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das die Daten darstellt, die Steuerelemente, die sich im aktuellen <see cref="T:System.Web.UI.Page" />-Objekt befinden, über HTTP-Anforderungen an den Webserver hinweg beibehalten, oder legt dieses fest.</summary>
        <value>Ein Objekt mit Ansichtszustandsdaten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Ansichts Zustand ist ein Wörterbuch mit Zustandsdaten, die Webserver-Steuerelemente zum Funktions-und Rendering benötigen. Steuerelement Entwickler greifen in der Regel mit der <xref:System.Web.UI.Control.ViewState%2A>-Eigenschaft auf das Ansichts Zustands Objekt zu Der Ansichts Zustand ist betroffen, wenn der Ansichts Zustand auf <xref:System.Web.UI.Page> Ebene deaktiviert ist, und in diesen Szenarien Verhalten sich Steuerelemente möglicherweise nicht ordnungsgemäß. Weitere Informationen zur Verwendung <xref:System.Web.UI.Control.ViewState%2A> und des Steuerungs Zustands beim Entwickeln von Steuerelementen finden Sie unter [entwickeln von benutzerdefinierten ASP.NET-Server Steuerelementen](https://docs.microsoft.com/previous-versions/aspnet/zt27tfhy(v=vs.100)).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Klasse, die von der <xref:System.Web.UI.PageStatePersister>-Klasse abgeleitet wird, die <xref:System.Web.UI.PageStatePersister.ViewState%2A>-Eigenschaft initialisiert. In diesem Beispiel wurde die <xref:System.Web.UI.PageStatePersister.ViewState%2A>-Eigenschaft dem <xref:System.Web.UI.Pair.First>-Feld eines <xref:System.Web.UI.Pair>-Objekts zugewiesen und mithilfe des <xref:System.Web.UI.ObjectStateFormatter>-Objekts serialisiert, das eine Instanz der <xref:System.Web.UI.IStateFormatter> Schnittstelle ist. Wenn die <xref:System.Web.UI.PageStatePersister.Load%2A>-Methode aufgerufen wird, wird die <xref:System.Web.UI.ObjectStateFormatter> Schnittstelle verwendet, um Ansichts Zustandsinformationen zu deserialisieren, und die <xref:System.Web.UI.PageStatePersister.ViewState%2A>-Eigenschaft wird aus dem <xref:System.Web.UI.Pair.First> Feld des resultierenden <xref:System.Web.UI.Pair> Objekts initialisiert. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Web.UI.PageStatePersister>-Klasse bereitgestellt wird.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

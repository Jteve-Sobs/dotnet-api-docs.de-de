<Type Name="ScriptManager" FullName="System.Web.UI.ScriptManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d5b19d1d87956a08523d6245afd2181f062d2d63" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69387322" /></Metadata><TypeSignature Language="C#" Value="public class ScriptManager : System.Web.UI.Control, System.Web.UI.IPostBackDataHandler, System.Web.UI.IPostBackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ScriptManager extends System.Web.UI.Control implements class System.Web.UI.IPostBackDataHandler, class System.Web.UI.IPostBackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ScriptManager&#xA;Inherits Control&#xA;Implements IPostBackDataHandler, IPostBackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptManager : System::Web::UI::Control, System::Web::UI::IPostBackDataHandler, System::Web::UI::IPostBackEventHandler" />
  <TypeSignature Language="F#" Value="type ScriptManager = class&#xA;    inherit Control&#xA;    interface IPostBackDataHandler&#xA;    interface IPostBackEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Scripts")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(EmbeddedResourceFinder), "System.Web.Resources.ScriptManager.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Verwaltet ASP.NET-AJAX-Skriptbibliotheken und Skriptdateien, das Teilrendering von Seiten sowie die Generierung von Clientproxyklassen für Web- und Anwendungsdienste.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Thema:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [Teil Rendering von Seiten](#partial_page_rendering)  
  
-   [Verwenden des ScriptManager-Steuer Elements mit Master Seiten, Benutzer Steuerelementen und anderen untergeordneten Komponenten](#using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components)  
  
-   [Skript Verwaltung und-Registrierung](#script_management_and_registration)  
  
-   [Webdienst Verweise](#web_service_references)  
  
-   [Lokalisierung](#localization)  
  
-   [Fehlerbehandlung](#error_handling)  
  
-   [Deklarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Das <xref:System.Web.UI.ScriptManager> -Steuerelement ist für AJAX-Funktionen in ASP.net von zentraler Bedeutung. Das-Steuerelement verwaltet alle ASP.NET AJAX-Ressourcen auf einer Seite. Dies schließt das Herunterladen von Microsoft AJAX-Bibliotheks Skripts in den Browser und das Koordinieren von Teil Seiten <xref:System.Web.UI.UpdatePanel> Aktualisierungen ein, die mithilfe von Steuerelementen aktiviert werden. Außerdem können Sie mit <xref:System.Web.UI.ScriptManager> dem-Steuerelement folgende Aktionen ausführen:  
  
-   Skript registrieren, das mit Teil Aktualisierungen der Seite kompatibel ist. Um Abhängigkeiten zwischen Ihrem Skript und der Kernbibliothek zu verwalten, werden alle Skripts, die Sie registrieren, nach dem Microsoft AJAX-Bibliotheks Skript geladen.  
  
-   Geben Sie an, ob Release-oder Debugskripts an den Browser gesendet werden.  
  
-   Ermöglichen Sie den Zugriff auf Webdienst Methoden aus Skripts, indem Sie <xref:System.Web.UI.ScriptManager> Webdienste mit dem-Steuerelement registrieren.  
  
-   Ermöglichen Sie den <xref:System.Web.UI.ScriptManager> Zugriff auf ASP.net-Authentifizierungs-, Rollen-und Profil Anwendungsdienste aus Client Skripts, indem Sie diese Dienste beim-Steuerelement registrieren.  
  
-   Aktivieren der kulturspezifischen Anzeige von ECMAScript (JavaScript)-,-und- [Zeichen](https://msdn.microsoft.com/library/517a1992-3295-484e-9b9c-07ebfd8fe4db) folgen Funktionen im Browser.  
  
-   Greifen Sie mit der <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> -Eigenschaft <xref:System.Web.UI.ScriptReference> des-Steuer Elements auf Lokalisierungs Ressourcen für eingebettete Skriptdateien oder auf eigenständige Skriptdateien zu.  
  
-   Registrieren Sie Server Steuerelemente, <xref:System.Web.UI.IExtenderControl> die <xref:System.Web.UI.IScriptControl> die-Schnitt <xref:System.Web.UI.ScriptManager> Stelle oder die-Schnittstelle mit dem-Steuerelement implementieren, damit das von Client Komponenten und Verhalten benötigte Skript  
  
<a name="partial_page_rendering"></a>   
## <a name="partial-page-rendering"></a>Teil Rendering von Seiten  
 Die Möglichkeit einer ASP.NET-Seite zur Unterstützung des partiellen Renderings von Seiten wird durch die folgenden Faktoren gesteuert:  
  
-   Die <xref:System.Web.UI.ScriptManager> -Eigenschaft <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> des-Steuer `true` Elements muss (der Standardwert) sein.  
  
-   Es muss mindestens ein <xref:System.Web.UI.UpdatePanel> Steuerelement auf der Seite vorhanden sein.  
  
-   Die <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> -Eigenschaft muss `true` (der Standardwert) sein. Wenn die <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> Eigenschaft nicht explizit festgelegt wird, basiert der Wert auf den Browserfunktionen.  
  
 Sie können den Wert der <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> -Eigenschaft zur Laufzeit während oder vor dem- <xref:System.Web.UI.Control.Init> Ereignis der Seite überschreiben. Wenn Sie versuchen, diese Eigenschaft zu ändern, nachdem das <xref:System.Web.UI.Control.Init> Ereignis der Seite aufgetreten ist <xref:System.InvalidOperationException> , wird eine Ausnahme ausgelöst.  
  
 Wenn das Teil Rendering von Seiten unterstützt wird <xref:System.Web.UI.ScriptManager> , rendert das-Steuerelement Skripts, um asynchrone Postbacks und partielle Seiten Aktualisierungen zu ermöglichen. Die Bereiche der zu aktualisierenden Seite werden mithilfe <xref:System.Web.UI.UpdatePanel> von-Steuerelementen festgelegt. Das <xref:System.Web.UI.ScriptManager> -Steuerelement verarbeitet die asynchronen Postbacks und aktualisiert nur die Bereiche der Seite, die aktualisiert werden müssen. Weitere Informationen zum partiellen Seiten Rendering finden Sie unter [Übersicht über das Seiten Rendering](https://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49). Weitere Informationen zu den Bedingungen, die ein Update verursachen, finden Sie unter Übersicht über das Update [Panel-Steuer](https://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a)Element.  
  
<a name="using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components"></a>   
## <a name="using-the-scriptmanager-control-with-master-pages-user-controls-and-other-child-components"></a>Verwenden des ScriptManager-Steuer Elements mit Master Seiten, Benutzer Steuerelementen und anderen untergeordneten Komponenten  
 Eine Seite kann nur ein <xref:System.Web.UI.ScriptManager> Steuerelement in der Hierarchie enthalten. Verwenden Sie das <xref:System.Web.UI.ScriptManagerProxy> -Steuerelement, um Dienste und Skripts für die untergeordneten Seiten, Benutzer Steuerelemente oder <xref:System.Web.UI.ScriptManager> Komponenten zu registrieren, wenn die übergeordnete Seite bereits über ein Steuerelement verfügt. Weitere Informationen finden Sie unter [Verwenden des Update Panel-Steuer Elements mit Master Seiten](https://msdn.microsoft.com/library/b1c974d5-a6b2-4bb3-a3cc-61dd9dc0e1d6) .  
  
<a name="script_management_and_registration"></a>   
## <a name="script-management-and-registration"></a>Skript Verwaltung und-Registrierung  
 Das <xref:System.Web.UI.ScriptManager> -Steuerelement ermöglicht Ihnen das Registrieren eines Skripts, das dann als Teil der Seite gerendert wird. Die <xref:System.Web.UI.ScriptManager> Registrierungsmethoden für Steuerelemente können in die folgenden drei Kategorien unterteilt werden:  
  
-   Registrierungsmethoden, die sicherstellen, dass Skript Abhängigkeiten in der Microsoft AJAX-Bibliothek verwaltet werden.  
  
-   Registrierungsmethoden, die nicht von der Microsoft AJAX-Bibliothek abhängig sind, jedoch mit <xref:System.Web.UI.UpdatePanel> Steuerelementen kompatibel sind.  
  
-   Registrierungsmethoden, die das Arbeiten <xref:System.Web.UI.UpdatePanel> mit Steuerelementen unterstützen.  
  
 Weitere Informationen zum Erstellen und Verwenden von AJAX-Skripts in ASP.net finden [Sie unter Erstellen eines benutzerdefinierten Client Skripts mithilfe der Microsoft AJAX-Bibliothek](https://msdn.microsoft.com/library/285e3a65-b42e-42c5-952d-baf184057899).  
  
### <a name="registering-script-that-is-dependent-on-the-microsoft-ajax-library"></a>Registrieren eines Skripts, das von der Microsoft AJAX-Bibliothek abhängt  
 Sie können die folgenden Methoden verwenden, um Skriptdateien auf eine Weise zu registrieren, die sicherstellt, dass alle Abhängigkeiten der Microsoft AJAX-Bibliothek verwaltet werden.  
  
|Methode|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A>|Registriert ein Server Steuerelement, das <xref:System.Web.UI.IScriptControl> die-Schnittstelle implementiert, die zum Definieren eines [sys. Component](https://msdn.microsoft.com/library/6fba3595-e425-4e48-b4e9-fc16a0272381) -Client Objekts verwendet wird. Das <xref:System.Web.UI.ScriptManager> -Steuerelement rendert Skripts, das das Client Objekt unterstützt|  
|<xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A>|Registriert ein Server Steuerelement, das <xref:System.Web.UI.IExtenderControl> die-Schnittstelle implementiert, die zum Definieren eines [sys. Component](https://msdn.microsoft.com/library/6fba3595-e425-4e48-b4e9-fc16a0272381) -Client Objekts verwendet wird. Das <xref:System.Web.UI.ScriptManager> -Steuerelement rendert Skripts, das das Client Objekt unterstützt|  
  
### <a name="registering-partial-page-update-compatible-scripts"></a>Registrieren von Teil Seiten Update kompatiblen Skripts  
 Sie können die folgenden Methoden zum Registrieren von Skriptdateien verwenden, die nicht von der Microsoft AJAX-Bibliothek abhängig sind, jedoch <xref:System.Web.UI.UpdatePanel> mit-Steuerelementen kompatibel sind. Diese Methoden entsprechen ähnlichen Methoden des <xref:System.Web.UI.ClientScriptManager> Steuer Elements. Wenn Sie Skripts für die <xref:System.Web.UI.UpdatePanel> <xref:System.Web.UI.ScriptManager> Verwendung in einem-Steuerelement rendern, stellen Sie sicher, dass Sie die Methoden des Steuer Elements aufzurufen.  
  
|Methode|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A>|Fügt einem JavaScript-Array einen Wert hinzu. Wenn das Array nicht vorhanden ist, wird es erstellt.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A>|Rendert `script` ein-Element nach dem öffnenden `<form>` Tag der Seite. Das Skript wird als Zeichen folgen Parameter angegeben.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A>|Rendert `script` ein-Element nach dem öffnenden `<form>` Tag der Seite. Der Inhalt des Skripts wird durch Festlegen `src` des-Attributs auf eine URL angegeben, die auf eine Skriptdatei zeigt.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A>|Rendert `script` ein-Element nach dem öffnenden `<form>` Tag der Seite. Der Inhalt des Skripts wird mit einem Ressourcennamen in einer Assembly angegeben. Das `src` -Attribut wird automatisch durch einen-HTTP-Handler mit einer URL aufgefüllt, der das benannte Skript aus der Assembly abruft.|  
|<xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>|Rendert ein benutzerdefiniertes Name-Wert-Attribut Paar (ein Expando) im Markup für ein angegebenes Steuerelement.|  
|<xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A>|Rendert ein verborgenes Feld.|  
|<xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>|Registriert ein Skript, das als Reaktion auf das- `form` Ereignis des `submit` -Elements ausgeführt wird. Das `onSubmit` Attribut verweist auf das angegebene Skript.|  
|<xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>|Rendert einen Startskript Block direkt vor dem `</form>` Endtag der Seite. Das zu Rendering Ende Skript wird als Zeichen folgen Parameter angegeben.|  
  
 Wenn Sie Methoden registrieren, geben Sie ein Typ-/Schlüsselpaar für dieses Skript an. Wenn bereits ein Skript mit dem gleichen Typ-/Schlüsselpaar registriert ist, wird kein neues Skript registriert. Wenn Sie ein Skript mit einem bereits vorhandenen Typ-/Ressourcennamens-paar registrieren, wird `script` das Element, das auf die Ressource verweist, nicht erneut hinzugefügt. Wenn Sie ein Expando-Attribut eines zuvor registrierten Attributs registrieren, wird eine Ausnahme ausgelöst. Doppelte Registrierungen von Array Werten sind zulässig.  
  
 Vermeiden Sie das Registrieren <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> eines Skripts, das Inline Funktionen ausführt, wenn Sie die-Methode oder die <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> -Methode aufruft Registrieren Sie stattdessen das Skript, das Funktionsdefinitionen wie Ereignishandler oder benutzerdefinierte Klassendefinitionen für die Anwendung enthält.  
  
### <a name="registration-methods-for-updatepanel-controls"></a>Registrierungsmethoden für Update Panel-Steuerelemente  
 Sie können die folgenden Methoden verwenden, um Teil Seiten Aktualisierungen anzupassen, wenn Sie <xref:System.Web.UI.UpdatePanel> -Steuerelemente verwenden.  
  
|Methode|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>|Registriert ein Steuerelement als Trigger für asynchrone Postbacks.|  
|<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A>|Sendet während des Teilrenderings von Seiten benutzerdefinierte Daten an Steuerelemente.|  
|<xref:System.Web.UI.ScriptManager.RegisterDispose%2A>|Registriert ein Lösch Skript für ein Steuerelement, das sich <xref:System.Web.UI.UpdatePanel> in einem-Steuerelement befindet. Das Skript wird ausgeführt, wenn das <xref:System.Web.UI.UpdatePanel>-Steuerelement aktualisiert oder gelöscht wird. Die verwerfen-Methode wird für Client Komponenten verwendet, die Teil der Microsoft AJAX-Bibliothek sind und Ressourcen freigeben müssen, wenn eine Komponente nicht mehr verwendet wird.|  
|<xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A>|Registriert ein-Steuerelement als ein-Element für ein vollständiges Postback. Diese Methode wird für Steuerelemente in einem <xref:System.Web.UI.UpdatePanel> -Steuerelement verwendet, die andernfalls asynchrone Postbacks ausführen würden.|  
  
<a name="web_service_references"></a>   
## <a name="web-service-references"></a>Webdienst Verweise  
 Sie können einen Webdienst registrieren, der vom Client Skript aufgerufen werden soll, <xref:System.Web.UI.ServiceReference> indem Sie ein-Objekt erstellen <xref:System.Web.UI.ScriptManager.Services%2A> und es der <xref:System.Web.UI.ScriptManager> -Auflistung des-Steuer Elements hinzufügen. ASP.NET generiert ein Client Proxy Objekt für jedes <xref:System.Web.UI.ServiceReference> Objekt in der <xref:System.Web.UI.ScriptManager.Services%2A> Auflistung. Sie können der <xref:System.Web.UI.ScriptManager.Services%2A> Auflistung Programm <xref:System.Web.UI.ServiceReference> gesteuert-Objekte hinzufügen, um Webdienste zur Laufzeit zu registrieren.  
  
 Weitere Informationen zum Zugreifen auf Webdienste in Skripts finden Sie unter verfügbar machen von [Webdiensten für Client Skripts in ASP.NET AJAX](https://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8) und [Aufrufen von Webdiensten aus Client Skripts in ASP.NET AJAX](https://msdn.microsoft.com/library/fc06c224-f01a-45be-94af-bd71afbc07b0).  
  
<a name="localization"></a>   
## <a name="localization"></a>Lokalisierung  
 Das <xref:System.Web.UI.ScriptManager> -Steuerelement generiert Verweise auf der gerenderten Seite, die auf die entsprechenden lokalisierten Skriptdateien verweisen, die entweder in Assemblys oder eigenständigen Skriptdateien eingebettete Skriptdateien sind.  
  
 Wenn die <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> -Eigenschaft auf `true`festgelegt ist <xref:System.Web.UI.ScriptManager> , ruft das Steuerelement lokalisierte Ressourcen (z. b. lokalisierte Zeichen folgen) für die aktuelle Kultur ab, sofern vorhanden. Das <xref:System.Web.UI.ScriptManager> -Steuerelement bietet die folgenden Funktionen für die Verwendung von lokalisierten Ressourcen:  
  
-   **Skriptdateien, die in eine Assembly eingebettet sind**. Das <xref:System.Web.UI.ScriptManager> -Steuerelement bestimmt, welche kulturspezifische oder Fall backkultur-Skriptdatei an den Browser gesendet wird. Hierfür werden das kulturspezifische <xref:System.Resources.NeutralResourcesLanguageAttribute> Assemblyattribut, die mit der Assembly verpackten Ressourcen und die Benutzeroberflächen Kultur des Browsers (sofern vorhanden) verwendet.  
  
-   **Eigenständige Skriptdateien**. Das <xref:System.Web.UI.ScriptManager> -Steuerelement definiert die Liste der Benutzeroberflächen Kulturen, die unter <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> stützt werden, <xref:System.Web.UI.ScriptReference> indem die-Eigenschaft des-Objekts verwendet wird.  
  
-   **Im Debugmodus**. Das <xref:System.Web.UI.ScriptManager> -Steuerelement versucht, eine kulturspezifische Skriptdatei zu erzeugen, die Debuginformationen enthält. Wenn sich die Seite z. b. im Debugmodus befindet und die aktuelle Kultur auf en-MX festgelegt ist, rendert das Steuerelement eine Skriptdatei `scriptname`mit einem Namen, wie z. b. en-MX. Debug. js, wenn die Datei vorhanden ist. Wenn die Datei nicht vorhanden ist, wird die Debugdatei für die entsprechende Fall backkultur gerendert.  
  
 Weitere Informationen zum Lokalisieren von Ressourcen finden Sie unter Lokalisieren von [Ressourcen für Komponenten Bibliotheken (Übersicht](https://msdn.microsoft.com/library/e6b15435-57c1-4dd1-9bd3-5d4c509685bb)).  
  
<a name="error_handling"></a>   
## <a name="error-handling"></a>Fehlerbehandlung  
 Wenn bei asynchronen Postbacks ein Seiten Fehler auftritt, wird <xref:System.Web.UI.ScriptManager.AsyncPostBackError> das-Ereignis ausgelöst. Die Art und Weise, wie Fehler auf dem Server an den Client gesendet werden, <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> hängt von der <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> -Eigenschaft, der-Eigenschaft und dem benutzerdefinierten Fehler Abschnitt der Datei "Web. config" ab. Weitere Informationen finden Sie unter [Anpassen der Fehlerbehandlung für Update](https://msdn.microsoft.com/library/e15e7ffb-e4b2-4a89-b99e-16624a5861d0)Panel-Steuerelemente.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Deklarative Syntax  
  
```  
<asp:ScriptManager  
    AllowCustomErrorsRedirect="True|False"  
    AsyncPostBackErrorMessage="string"  
    AsyncPostBackTimeout="integer"  
    AuthenticationService-Path="uri"  
    EnablePageMethods="True|False"  
    EnablePartialRendering="True|False"  
    EnableScriptGlobalization="True|False"  
    EnableScriptLocalization="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    LoadScriptsBeforeUI="True|False"  
    OnAsyncPostBackError="AsyncPostBackError event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnResolveScriptReference="ResolveScriptReference event handler"  
    OnUnload="Unload event handler"  
    ProfileService-LoadProperties="string"  
    ProfileService-Path="uri"  
    RoleService-LoadRoles="True|False"  
    RoleService-Path="uri"  
    runat="server"  
    ScriptMode="Auto|Inherit|Debug|Release"  
    ScriptPath="string"  
    SkinID="string"  
    SupportsPartialRendering="True|False"  
    Visible="True|False"  
>  
        <AuthenticationService  
            Path="uri"  
        />  
        <ProfileService  
            LoadProperties="string"  
            Path="uri"  
        />  
        <RoleService  
            LoadRoles="True|False"  
            Path="uri"  
        />  
        <Scripts>  
            <asp:ScriptReference  
                Assembly="string"  
                IgnoreScriptPath="True|False"  
                Name="string"  
                NotifyScriptLoaded="True|False"  
                Path="string"  
                ResourceUICultures="string"  
                ScriptMode="Auto|Debug|Inherit|Release"  
            />  
        </Scripts>  
        <Services>  
            <asp:ServiceReference  
                InlineScript="True|False"  
                Path="string"  
            />  
        </Services>  
</asp:ScriptManager>  
```  
  
   
  
## Examples  
 In den folgenden Beispielen werden verschiedene Szenarien für die <xref:System.Web.UI.ScriptManager> Verwendung des-Steuer Elements veranschaulicht.  
  
 **Aktivieren von Teil Seiten Aktualisierungen**  
  
 Im folgenden Beispiel wird gezeigt, wie das <xref:System.Web.UI.ScriptManager> -Steuerelement verwendet wird, um Teil Seiten Aktualisierungen zu aktivieren. In diesem Beispiel befinden sich <xref:System.Web.UI.WebControls.Calendar> ein und <xref:System.Web.UI.WebControls.DropDownList> ein-Steuerelement <xref:System.Web.UI.UpdatePanel> in einem-Steuerelement. Standard <xref:System.Web.UI.UpdatePanel.UpdateMode%2A> mäßig ist <xref:System.Web.UI.UpdatePanelUpdateMode.Always>der Wert der <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> -Eigenschaft, und der Wert der-Eigenschaft ist `true`. Daher verursachen die untergeordneten Steuerelemente des Bereichs ein asynchrones Postback.  
  
 [!code-aspx-csharp[System.Web.UI.UpdatePanel#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/CS/UpdatePanelExample1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.UpdatePanel#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/VB/UpdatePanelExample1VB.aspx#1)]  
  
 **Behandeln von Fehlern beim Aktualisieren von Teil Seiten und Registrieren des Skripts**  
  
 Im folgenden Beispiel wird gezeigt, wie Sie eine benutzerdefinierte Fehlerbehandlung während der Aktualisierung von Teil Seiten bereitstellen. Wenn während der Aktualisierung von Teil Seiten ein Fehler auftritt, wird standardmäßig ein JavaScript-Meldungs Feld angezeigt. Dieses Beispiel zeigt, wie Sie die benutzerdefinierte Fehlerbehandlung verwenden können, indem <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Sie einen Handler für das- <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> Ereignis bereitstellen und die-Eigenschaft im-Ereignishandler festlegen. Sie können auch die <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> -Eigenschaft festlegen, um anzugeben, wie der benutzerdefinierte Fehler Abschnitt der Datei "Web. config" verwendet wird, wenn ein Fehler bei partiellen Seiten Aktualisierungen auftritt. In diesem Beispiel wird der Standardwert <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> der-Eigenschaft verwendet. Dies bedeutet, dass, wenn die Datei "Web. config" ein [customErrors](https://msdn.microsoft.com/library/6c3b53ec-00df-4967-b0fb-351c02867650) -Element enthält, dieses Element bestimmt, wie Fehler angezeigt werden. Weitere Informationen finden Sie unter [customErrors-Element (ASP.NET Settings Schema)](https://msdn.microsoft.com/library/288c32e2-df1f-4548-abda-de6b4cb989a6).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/VB/default.aspx#1)]  
  
 **Globalisieren des Datums und der Uhrzeit, die im Browser angezeigt werden**  
  
 Im folgenden Beispiel wird gezeigt, wie die <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> -Eigenschaft so festgelegt wird, dass Client Skripts ein kulturspezifisches Datum und eine kulturspezifische Uhrzeit im Browser anzeigen können. Im Beispiel wird das `Culture` -Attribut der [@ Page](https://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) -Direktive auf `auto`festgelegt. Daher bestimmt die erste Sprache, die in den aktuellen Browsereinstellungen angegeben ist, die Kultur und die Benutzeroberflächen Kultur für die Seite. Weitere Informationen finden Sie unter [Vorgehensweise: Legen Sie Kultur und Benutzeroberflächen Kultur für die Globalisierung](https://msdn.microsoft.com/library/76091f86-f967-4687-a40f-de87bd8cc9a0)von ASP.NET-Webseiten fest.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/VB/default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ScriptManagerProxy" />
    <altmember cref="T:System.Web.UI.UpdatePanel" />
    <altmember cref="T:System.Web.UI.ClientScriptManager" />
    <altmember cref="T:System.Web.UI.ScriptMode" />
    <altmember cref="T:System.Web.UI.ScriptReference" />
    <altmember cref="T:System.Web.UI.ServiceReference" />
    <related type="Article" href="https://msdn.microsoft.com/library/fceeb3c5-c59f-46a9-af4f-b0d7155a1efc">Sys. WebForms. PageRequestManager-Klasse</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.ScriptManager" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die internen Felder, die vom <xref:System.Web.UI.ScriptManager> -Steuerelement verwendet werden, um Seiten-, Steuerungs-und Bereitstellungs Informationen zu verfolgen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHistoryPoint">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt einen Verlaufspunkt und fügt diesen dem Verlaufsstapel des Browsers hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methoden Überladungen ermöglichen es Ihnen, den Serverstatus und optional den Titel des Verlaufs Eintrags im Browser zu definieren. Wenn Sie einen Verlaufs Punkt erstellen, werden serialisierte und verschlüsselte Daten an die URL der Webseite angehängt, und im Verlaufs Stapel des Browsers ist ein Eintrag enthalten. Sie können die Statusdaten verwenden, um die Seite neu zu erstellen, wenn ein nachfolgendes Server Navigations Ereignis ausgelöst wird. Weitere Informationen finden Sie unter [Verwalten des Browser](https://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9)Verlaufs mithilfe von Server Steuerelementen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (System.Collections.Specialized.NameValueCollection state, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(class System.Collections.Specialized.NameValueCollection state, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.Collections.Specialized.NameValueCollection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (state As NameValueCollection, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::Collections::Specialized::NameValueCollection ^ state, System::String ^ title);" />
      <MemberSignature Language="F#" Value="member this.AddHistoryPoint : System.Collections.Specialized.NameValueCollection * string -&gt; unit" Usage="scriptManager.AddHistoryPoint (state, title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="state">Eine Auflistung von Schlüssel-Wert-Paaren, die Daten für den Zustand enthalten.</param>
        <param name="title">Der Text, der dem Verlaufsstapel des Browsers als Titel für diesen Zustand hinzugefügt wird.</param>
        <summary>Erstellt einen Verlaufspunkt und fügt diesen unter Verwendung der angegebenen Zustandsdatenauflistung und des Zustandstitels dem Verlaufsstapel des Browsers hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode zum Erstellen eines Verlaufs Punkts, wenn Sie mehr als ein Schlüssel-Wert-Paar für die Zustandsdaten speichern möchten. Wenn Sie einen Verlaufs Punkt erstellen, werden serialisierte und verschlüsselte Daten an die URL der Webseite angehängt, und im Verlaufs Stapel des Browsers ist ein Eintrag enthalten. Wenn der `title` -Parameter `null`ist, wird der Titel der Webseite als Titel des Zustands Eintrags im Verlaufs Stapel verwendet.  
  
 Sie können die Statusdaten verwenden, um die Seite neu zu erstellen, wenn ein nachfolgendes Server Navigations Ereignis ausgelöst wird. Weitere Informationen finden Sie unter [Verwalten des Browser](https://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9)Verlaufs mithilfe von Server Steuerelementen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddHistoryPoint : string * string -&gt; unit" Usage="scriptManager.AddHistoryPoint (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Schlüsselteil des Schlüssel-Wert-Paars, das den Zustand der Webseite bezeichnet.</param>
        <param name="value">Der Wertteil des Schlüssel-Wert-Paars, das den Zustand der Webseite bezeichnet.</param>
        <summary>Erstellt einen Verlaufspunkt und fügt diesen unter Verwendung des angegebenen Zustandsschlüssels und Zustandswerts dem Verlaufsstapel des Browsers hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode zum Erstellen eines Verlaufs Punkts, wenn Sie nur einen Wert speichern möchten, um den Status zu identifizieren. Wenn Sie einen Verlaufs Punkt erstellen, werden serialisierte und verschlüsselte Daten an die URL der Webseite angehängt, und im Verlaufs Stapel des Browsers ist ein Eintrag enthalten. Der Titel der Webseite wird als Titel des Zustands Eintrags im Verlaufs Stapel verwendet.  
  
 Sie können die Statusdaten verwenden, um die Seite neu zu erstellen, wenn ein nachfolgendes Server Navigations Ereignis ausgelöst wird. Weitere Informationen finden Sie unter [Verwalten des Browser](https://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9)Verlaufs mithilfe von Server Steuerelementen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value, System::String ^ title);" />
      <MemberSignature Language="F#" Value="member this.AddHistoryPoint : string * string * string -&gt; unit" Usage="scriptManager.AddHistoryPoint (key, value, title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Schlüsselteil des Schlüssel-Wert-Paars, das den Zustand der Webseite bezeichnet.</param>
        <param name="value">Der Wertteil des Schlüssel-Wert-Paars, das den Zustand der Webseite bezeichnet.</param>
        <param name="title">Der Text, der dem Verlaufsstapel des Browsers als Titel für diesen Zustand hinzugefügt wird.</param>
        <summary>Erstellt einen Verlaufspunkt und fügt diesen unter Verwendung des angegebenen Zustandsschlüssels, Zustandswerts und Zustandstitels dem Verlaufsstapel des Browsers hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode zum Erstellen eines Verlaufs Punkts, wenn Sie einen Wert speichern möchten, um den Status und einen Titel für den Zustand zu identifizieren. Wenn Sie einen Verlaufs Punkt erstellen, werden serialisierte und verschlüsselte Daten an die URL der Webseite angehängt, und im Verlaufs Stapel des Browsers ist ein Eintrag enthalten. Wenn der `title` -Parameter `null`ist, wird der Titel der Webseite als Titel des Zustands Eintrags im Verlaufs Stapel verwendet.  
  
 Sie können die Statusdaten verwenden, um die Seite neu zu erstellen, wenn ein nachfolgendes Server Navigations Ereignis ausgelöst wird. Weitere Informationen finden Sie unter [Verwalten des Browser](https://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9)Verlaufs mithilfe von Server Steuerelementen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly AjaxFrameworkAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly AjaxFrameworkAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AjaxFrameworkAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ AjaxFrameworkAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AjaxFrameworkAssembly : System.Reflection.Assembly" Usage="System.Web.UI.ScriptManager.AjaxFrameworkAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die AJAX-Frameworkassembly ab, die von Komponenten auf der Seite verwendet wird.</summary>
        <value>Die AJAX-Frameworkassembly.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AjaxFrameworkMode As AjaxFrameworkMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AjaxFrameworkMode AjaxFrameworkMode { System::Web::UI::AjaxFrameworkMode get(); void set(System::Web::UI::AjaxFrameworkMode value); };" />
      <MemberSignature Language="F#" Value="member this.AjaxFrameworkMode : System.Web.UI.AjaxFrameworkMode with get, set" Usage="System.Web.UI.ScriptManager.AjaxFrameworkMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AjaxFrameworkMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, wie Clientskripts der Microsoft Ajax-Clientbibliothek auf dem Client eingeschlossen werden, oder legt den Wert fest.</summary>
        <value>Ein <see cref="T:System.Web.UI.AjaxFrameworkMode" />-Enumerationswert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> die-Eigenschaft, um alle Microsoft AJAX-Skriptdateien zu aktivieren, alle Microsoft AJAX-Skriptdateien zu deaktivieren oder einzelne Skriptdateien explizit einzubeziehen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> -Eigenschaft `Explicit` auf festgelegt wird, um anzugeben, dass Skripts explizit angegeben werden können.  
  
```  
<asp:ScriptManager ID="sm1" AjaxFrameworkMode="Explicit" runat="server">   
<Scripts>   
    <asp:ScriptReference Name="MicrosoftAjaxCore.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxComponentModel.js" />    
    <asp:ScriptReference Name="MicrosoftAjaxSerialization.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxNetwork.js" />       
</Scripts>   
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.AjaxFrameworkMode" />
      </Docs>
    </Member>
    <Member MemberName="AllowCustomErrorsRedirect">
      <MemberSignature Language="C#" Value="public bool AllowCustomErrorsRedirect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCustomErrorsRedirect" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowCustomErrorsRedirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowCustomErrorsRedirect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowCustomErrorsRedirect : bool with get, set" Usage="System.Web.UI.ScriptManager.AllowCustomErrorsRedirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, ob bei einem Fehler während des asynchronen Postbacks der benutzerdefinierte Fehlerabschnitt der Datei "Web.config" verwendet wird, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn zum Bestimmen des Fehlerverhaltens bei asynchronen Postbacks die benutzerdefinierte Fehlereinstellung in der Datei "Web.config" verwendet wird, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.ScriptManager.AsyncPostBackError> -Ereignis wird ausgelöst, wenn bei asynchronen Postbacks ein Seiten Fehler auftritt. Wie Fehler auf dem-Server an den Client gesendet werden, hängt <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> von der- <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> Eigenschaft, der-Eigenschaft und dem benutzerdefinierten Fehler Abschnitt der Datei "Web. config" ab.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AsyncPostBackError As EventHandler(Of AsyncPostBackErrorEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::AsyncPostBackErrorEventArgs ^&gt; ^ AsyncPostBackError;" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackError : EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; " Usage="member this.AsyncPostBackError : System.EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt bei einem Seitenfehler während eines asynchronen Postbacks auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.ScriptManager.AsyncPostBackError> -Ereignis wird ausgelöst, wenn bei asynchronen Postbacks ein Seiten Fehler auftritt. Wie Fehler auf dem-Server an den Client gesendet werden, hängt <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> von der- <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> Eigenschaft, der-Eigenschaft und dem benutzerdefinierten Fehler Abschnitt der Datei "Web. config" ab.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie das <xref:System.Web.UI.ScriptManager.AsyncPostBackError> -Ereignis behandelt wird <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> , um die-Eigenschaft (die an den Client gesendet wird) an die Server Ausnahme-Fehlermeldung festzulegen.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackErrorMessage">
      <MemberSignature Language="C#" Value="public string AsyncPostBackErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackErrorMessage : string with get, set" Usage="System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Fehlermeldung ab, die bei einem Serverausnahmefehler während eines asynchronen Postbacks an den Client gesendet wird, oder legt diese fest.</summary>
        <value>Die Fehlermeldung. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.ScriptManager.AsyncPostBackError> -Ereignis wird ausgelöst, wenn bei asynchronen Postbacks ein Seiten Fehler auftritt. Wie Fehler auf dem-Server an den Client gesendet werden, hängt <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> von der- <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> Eigenschaft, der-Eigenschaft und dem benutzerdefinierten Fehler Abschnitt der Datei "Web. config" ab.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie das <xref:System.Web.UI.ScriptManager.AsyncPostBackError> -Ereignis behandelt wird <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> , um die-Eigenschaft (die an den Client gesendet wird) an die Server Ausnahme-Fehlermeldung festzulegen.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackSourceElementID">
      <MemberSignature Language="C#" Value="public string AsyncPostBackSourceElementID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackSourceElementID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncPostBackSourceElementID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackSourceElementID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackSourceElementID : string" Usage="System.Web.UI.ScriptManager.AsyncPostBackSourceElementID" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManagerInternal.AsyncPostBackSourceElementID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die eindeutige ID des Steuerelements ab, das das asynchrone Postback verursacht hat.</summary>
        <value>Die eindeutige ID eines Steuerelements, wenn das Steuerelement über eine ID verfügt, andernfalls eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID%2A> -Eigenschaft enthält den Wert der Steuerelement-ID, die das asynchrone Postback verursacht hat. folgende Werte sind möglich:  
  
-   Ein Postback von einem Steuerelement, das sich <xref:System.Web.UI.UpdatePanel> innerhalb eines <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> -Steuer Elements befindet `true` , dessen-Eigenschaft auf festgelegt ist (Standardeinstellung).  
  
-   Ein Postback von einem-Steuerelement, das ein- <xref:System.Web.UI.UpdatePanel> Objekt für ein-Steuerelement ist.  
  
-   Ein Postback von einem-Steuerelement, das durch Aufrufen <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> der-Methode <xref:System.Web.UI.ScriptManager> des-Steuer Elements registriert wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackTimeout">
      <MemberSignature Language="C#" Value="public int AsyncPostBackTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AsyncPostBackTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AsyncPostBackTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackTimeout : int with get, set" Usage="System.Web.UI.ScriptManager.AsyncPostBackTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(90)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die Uhrzeit in Sekunden vor dem Timeout asynchroner Postbacks abruft, wenn keine Antwort empfangen wird, oder legt diesen fest.</summary>
        <value>Eine ganze Zahl, die das Timeout in Sekunden darstellt. Der Standardwert ist 90 Sekunden.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationService">
      <MemberSignature Language="C#" Value="public System.Web.UI.AuthenticationServiceManager AuthenticationService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.AuthenticationServiceManager AuthenticationService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AuthenticationService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthenticationService As AuthenticationServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AuthenticationServiceManager ^ AuthenticationService { System::Web::UI::AuthenticationServiceManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationService : System.Web.UI.AuthenticationServiceManager" Usage="System.Web.UI.ScriptManager.AuthenticationService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AuthenticationServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Web.UI.AuthenticationServiceManager" />-Objekt ab, das der aktuellen <see cref="T:System.Web.UI.ScriptManager" />-Instanz zugeordnet ist.</summary>
        <value>Das <see cref="T:System.Web.UI.AuthenticationServiceManager" />-Objekt für die aktuelle <see cref="T:System.Web.UI.ScriptManager" />-Instanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.AuthenticationServiceManager> -Objekt, das von dieser Eigenschaft zurückgegeben wird, stellt den Authentifizierungsdienst dar, der bei der Seite registriert ist. Der Authentifizierungsdienst kann im <xref:System.Web.UI.ScriptManager> -Steuerelement oder in einem zugeordneten <xref:System.Web.UI.ScriptManagerProxy> -Steuerelement definiert werden.  
  
 Sie können den ASP.NET-Authentifizierungsdienst verwenden oder einen benutzerdefinierten Authentifizierungsdienst verwenden. Sie können den benutzerdefinierten-Dienst im Markup hinzufügen `AuthenticationService` , indem Sie `asp:ScriptManager` ein-Element in das-Element auf der Seite einschließen, wie im folgenden Beispiel gezeigt.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <AuthenticationService Path="MyAuthenticationService.asmx" />  
</asp:ScriptManager>  
```  
  
 Sie können das <xref:System.Web.UI.AuthenticationServiceManager> Objekt auch Programm gesteuert konfigurieren. Dienste werden während der <xref:System.Web.UI.ScriptManager> <xref:System.Web.UI.Control.PreRender> Lebenszyklusphase der Seite mit dem-Steuerelement registriert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientNavigateHandler">
      <MemberSignature Language="C#" Value="public string ClientNavigateHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientNavigateHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ClientNavigateHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientNavigateHandler As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientNavigateHandler { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientNavigateHandler : string with get, set" Usage="System.Web.UI.ScriptManager.ClientNavigateHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Methode ab, die das <see href="https://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93">Sys.Application.navigate</see>-Ereignis für den Client behandelt, oder legt diesen fest.</summary>
        <value>Der Name der Methode, die das [Sys.Application.navigate](https://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) -Ereignis auf dem Client behandelt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositeScript">
      <MemberSignature Language="C#" Value="public System.Web.UI.CompositeScriptReference CompositeScript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.CompositeScriptReference CompositeScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.CompositeScript" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompositeScript As CompositeScriptReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::CompositeScriptReference ^ CompositeScript { System::Web::UI::CompositeScriptReference ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompositeScript : System.Web.UI.CompositeScriptReference" Usage="System.Web.UI.ScriptManager.CompositeScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.CompositeScriptReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf das zusammengesetzte Skript ab, das die Webseite unterstützt.</summary>
        <value>Ein Verweis auf das zusammengesetzte Skript.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter [Kombinieren von Client Skripts in einem zusammengesetzten Skript](https://msdn.microsoft.com/library/d0f608d0-b4c8-4795-990b-ede68c1239b3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyPageUrl">
      <MemberSignature Language="C#" Value="public virtual string EmptyPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyPageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EmptyPageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EmptyPageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EmptyPageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EmptyPageUrl : string with get, set" Usage="System.Web.UI.ScriptManager.EmptyPageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Web.UI.Design.UrlEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine URL zu einer Webseite ab oder legt sie fest.</summary>
        <value>Die URL, die verwendet werden soll, wenn die Zielwebseite leer ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.EmptyPageUrl%2A> -Eigenschaft unterstützt den AJAX-Browserverlauf.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdn">
      <MemberSignature Language="C#" Value="public bool EnableCdn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdn" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdn" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdn { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCdn : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableCdn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob auf der aktuellen Seite Clientskriptverweise aus den Pfaden des Inhaltszustellungsnetzwerks (CDN) geladen werden.</summary>
        <value><see langword="true" />, wenn Clientskriptverweise aus CDN-Pfaden geladen werden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie diese Eigenschaft nicht auf `true` fest, wenn <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> Sie `true` bereits auf festgelegt haben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdnFallback">
      <MemberSignature Language="C#" Value="public bool EnableCdnFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdnFallback" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdnFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdnFallback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdnFallback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCdnFallback : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableCdnFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aktiviert die lokale Kopie eines Skripts, die geladen werden sollen, im Fall, dass das Vertriebsnetz Inhalt (CDN) nicht verfügbar ist.</summary>
        <value><see langword="true" />, wenn der Wert des Fallback-CDN aktiviert ist; andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHistory">
      <MemberSignature Language="C#" Value="public bool EnableHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHistory" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableHistory" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableHistory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableHistory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableHistory : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableHistory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Webseite die Verwaltung von Verlaufspunkten unterstützt, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Webseite das Hinzufügen von Verlaufspunkten zum Verlaufsstapel des Browsers unterstützt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.UI.ScriptManager.EnableHistory%2A> die-Eigenschaft, um die Verlaufs Verwaltung auf einer Webseite zu aktivieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePageMethods">
      <MemberSignature Language="C#" Value="public bool EnablePageMethods { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePageMethods" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePageMethods" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePageMethods As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePageMethods { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePageMethods : bool with get, set" Usage="System.Web.UI.ScriptManager.EnablePageMethods" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob öffentliche, statische Seitenmethoden auf einer ASP.NET-Seite von Clientskripts aufgerufen werden können, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn statische Seitenmethoden auf einer ASP.NET-Seite von Clientskripts als Webmethoden aufgerufen werden können, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können einer ASP.NET-Seite statische Seiten Methoden hinzufügen und diese als Webmethoden markieren. Anschließend können Sie diese Methoden aus dem Skript aufzurufen, als wären Sie Teil eines Webdiensts, aber ohne eine separate ASMX-Datei zu erstellen. Zum Erstellen von Webmethoden auf einer Seite importieren Sie <xref:System.Web.Services> den-Namespace, <xref:System.Web.Services.WebMethodAttribute> und fügen Sie jeder statischen Methode, die Sie verfügbar machen möchten, ein-Attribut hinzu. Die Methoden müssen als öffentlich markiert werden.  
  
 Weitere Informationen finden Sie unter verfügbar machen von [Webdiensten für Client Skripts in ASP.NET AJAX](https://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePartialRendering">
      <MemberSignature Language="C#" Value="public bool EnablePartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePartialRendering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePartialRendering : bool with get, set" Usage="System.Web.UI.ScriptManager.EnablePartialRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die Teilaktualisierung einer Seite ermöglicht, wodurch Sie Bereiche der Seite mithilfe von <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelementen einzeln aktualisieren können, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn partielles Rendern aktiviert ist und vollständige Aktualisierungen von Seiten unterdrückt werden, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auch wenn die <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> -Eigenschaft `true`ist, tritt möglicherweise kein Teil Rendering der Seite auf. Der Browser unterstützt das partielle Seiten Rendering möglicherweise nicht <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> , oder die- `false`Eigenschaft ist auf festgelegt.  
  
 Sie können den Wert der <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> -Eigenschaft zur Laufzeit während oder vor dem- <xref:System.Web.UI.Control.Init> Ereignis der Seite überschreiben. Wenn Sie versuchen, diese Eigenschaft zu ändern, nachdem das <xref:System.Web.UI.Control.Init> Ereignis der Seite aufgetreten ist <xref:System.InvalidOperationException> , wird eine Ausnahme ausgelöst.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />-Eigenschaft wird nach dem <see cref="E:System.Web.UI.Control.Init" />-Ereignis der Seite festgelegt.</exception>
        <altmember cref="T:System.Web.UI.UpdatePanel" />
        <altmember cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="EnableScriptGlobalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptGlobalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptGlobalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptGlobalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptGlobalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptGlobalization { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableScriptGlobalization : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableScriptGlobalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement Skripts rendert, die das Analysieren und Formatieren kulturspezifischer Informationen unterstützen, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn kulturspezifische Informationen angezeigt werden können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> -Eigenschaft auf fest `true`gelegt ist, zeigen globalisierte ECMAScript (JavaScript) `Date.localeFormat` -Funktionen wie die-Methode kulturspezifische Informationen an. Die Kultur kann im Browser, im Servercode oder in der Konfigurationsdatei der Website festgelegt werden.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/69b34e6d-d590-4d03-a763-b7ae54b47d74">Lokalisieren eines Datums mithilfe eines Client Skripts</related>
      </Docs>
    </Member>
    <Member MemberName="EnableScriptLocalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptLocalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptLocalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptLocalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptLocalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptLocalization { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableScriptLocalization : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableScriptLocalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft Wert ab, der angibt, ob das <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement lokalisierte Versionen von Skriptdateien rendert, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn lokalisierte Skriptdateien gerendert werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> -Eigenschaft auf `true`festgelegt ist <xref:System.Web.UI.ScriptManager> , ruft das-Objekt Skriptdateien für die aktuelle Kultur ab, sofern diese vorhanden sind. Beispielsweise kann eine Seite eine Skriptdatei mit dem Namen "CustomScript. js" angeben. Wenn die Kultur auf "fr-ca" festgelegt <xref:System.Web.UI.ScriptManager> ist, versucht das Objekt, eine Skriptdatei mit dem Namen "CustomScript.fr-ca. js" abzurufen.  
  
> [!NOTE]
>  Um zu verhindern, dass eine Skriptdatei zweimal gerendert <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> wird, darf die Eigenschaft während eines asynchronen Postbacks nicht geändert werden.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/e6b15435-57c1-4dd1-9bd3-5d4c509685bb">Übersicht über das Lokalisieren von Ressourcen für Komponenten Bibliotheken</related>
      </Docs>
    </Member>
    <Member MemberName="EnableSecureHistoryState">
      <MemberSignature Language="C#" Value="public bool EnableSecureHistoryState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSecureHistoryState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableSecureHistoryState" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableSecureHistoryState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableSecureHistoryState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableSecureHistoryState : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableSecureHistoryState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Zeichenfolge für den Verlaufszustand verschlüsselt werden soll, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Zeichenfolge für den Verlaufszustand verschlüsselt werden soll, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  Diese Eigenschaft sollte ***nie*** auf einer Produktions `false` Website auf festgelegt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptManager GetCurrent (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.ScriptManager GetCurrent(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetCurrent(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::ScriptManager ^ GetCurrent(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="static member GetCurrent : System.Web.UI.Page -&gt; System.Web.UI.ScriptManager" Usage="System.Web.UI.ScriptManager.GetCurrent page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">Die Seiteninstanz, von der der <see cref="T:System.Web.UI.ScriptManager" /> abgerufen werden soll.</param>
        <summary>Ruft die Instanz von <see cref="T:System.Web.UI.ScriptManager" /> für ein angegebenes <see cref="T:System.Web.UI.Page" />-Objekt ab.</summary>
        <returns>Die aktuelle Instanz von <see cref="T:System.Web.UI.ScriptManager" /> für das ausgewählte <see cref="T:System.Web.UI.Page" />-Objekt oder <see langword="null" />, wenn keine Instanz definiert ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese statische Methode, um zu <xref:System.Web.UI.ScriptManager> bestimmen, ob sich ein Steuerelement auf einer Seite befindet, oder um auf <xref:System.Web.UI.ScriptManager> die Eigenschaften und Methoden eines Steuer Elements zuzugreifen, wenn Sie die zugehörige ID nicht kennen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="page" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredArrayDeclarations">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredArrayDeclarations" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredArrayDeclarations () As ReadOnlyCollection(Of RegisteredArrayDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredArrayDeclaration ^&gt; ^ GetRegisteredArrayDeclarations();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredArrayDeclarations : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt;" Usage="scriptManager.GetRegisteredArrayDeclarations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von ECMAScript (JavaScript)-Arraydeklarationen ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die die Arraydeklarationen enthält.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterArrayDeclaration" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredClientScriptBlocks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredClientScriptBlocks" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredClientScriptBlocks () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredClientScriptBlocks();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredClientScriptBlocks : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;" Usage="scriptManager.GetRegisteredClientScriptBlocks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von Clientskriptblöcken ab, die vorher beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement registriert wurden.</summary>
        <returns>Eine generische Auflistung, die Clientskriptblöcke enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Client Skriptblöcke werden mit dem- <xref:System.Web.UI.ScriptManager> Steuerelement für die Verwendung mit einem Steuerelement registriert <xref:System.Web.UI.UpdatePanel> , das sich in einem-Steuerelement befindet.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredDisposeScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredDisposeScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredDisposeScripts () As ReadOnlyCollection(Of RegisteredDisposeScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredDisposeScript ^&gt; ^ GetRegisteredDisposeScripts();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredDisposeScripts : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt;" Usage="scriptManager.GetRegisteredDisposeScripts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von <see langword="dispose" />-Skripts ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die <see langword="dispose" />-Skripts enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein `dispose` Skript wird ausgeführt, <xref:System.Web.UI.UpdatePanel> wenn das Steuerelement aktualisiert oder gelöscht wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredExpandoAttributes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredExpandoAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredExpandoAttributes () As ReadOnlyCollection(Of RegisteredExpandoAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredExpandoAttribute ^&gt; ^ GetRegisteredExpandoAttributes();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredExpandoAttributes : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt;" Usage="scriptManager.GetRegisteredExpandoAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von benutzerdefinierten Attributen (expando) ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die benutzerdefinierte Attribute enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein benutzerdefiniertes Attribut ist ein Name-Wert-Paar, das vom Client Skript gelesen und festgelegt werden kann.  
  
   
  
## Examples  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.RegisteredExpandoAttribute>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredHiddenFields">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredHiddenFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredHiddenFields () As ReadOnlyCollection(Of RegisteredHiddenField)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredHiddenField ^&gt; ^ GetRegisteredHiddenFields();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredHiddenFields : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt;" Usage="scriptManager.GetRegisteredHiddenFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von ausgeblendeten Feldern ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die ausgeblendete Felder enthält.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.RegisteredHiddenField" />
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterHiddenField" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredOnSubmitStatements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredOnSubmitStatements" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredOnSubmitStatements () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredOnSubmitStatements();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredOnSubmitStatements : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;" Usage="scriptManager.GetRegisteredOnSubmitStatements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von <see langword="onsubmit" />-Anweisungen ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die <see langword="onsubmit" />-Anweisungen enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine `onsubmit` -Anweisung ist ECMAScript (JavaScript), die ausgeführt wird, wenn das Formular übermittelt wird.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredStartupScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredStartupScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredStartupScripts () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredStartupScripts();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredStartupScripts : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;" Usage="scriptManager.GetRegisteredStartupScripts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von Startskripts ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die Startskripts enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Startskript ist ein Client Skript, das einem Steuerelement zugeordnet ist, das ausgeführt wird, wenn das Steuerelement gestartet wird.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ScriptManager.GetRegisteredStartupScripts%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStateString">
      <MemberSignature Language="C#" Value="public string GetStateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetStateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetStateString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetStateString();" />
      <MemberSignature Language="F#" Value="member this.GetStateString : unit -&gt; string" Usage="scriptManager.GetStateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine Zeichenfolge mit Schlüssel-Wert-Paaren ab, die den Zustand der Webseite darstellen.</summary>
        <returns>Eine Zeichenfolge, die die Schlüssel-Wert-Paare enthält, die den Zustand der Webseite darstellen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDebuggingEnabled">
      <MemberSignature Language="C#" Value="public bool IsDebuggingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDebuggingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsDebuggingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDebuggingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDebuggingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDebuggingEnabled : bool" Usage="System.Web.UI.ScriptManager.IsDebuggingEnabled" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManager.IsDebuggingEnabled</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Debugversionen von Clientskriptbibliotheken gerendert werden.</summary>
        <value><see langword="true" />, wenn die aktuelle Anforderung im Debugmodus ausgeführt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> -Eigenschaft `false` gibt zurück, wenn eine der folgenden Bedingungen zutrifft:  
  
-   Im [Deployment](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms228298(v%3dvs.100)) -Element der Konfigurationsdatei wird das `retail` -Attribut auf `true`festgelegt. Dies überschreibt alle anderen Einstellungen.  
  
-   Die <xref:System.Web.UI.ScriptManager.ScriptMode%2A> -Eigenschaft wird auf `Auto` oder auf `Inherit`festgelegt `compilation` , und das Debuggen ist im-Abschnitt der Web. config-Datei der Anwendung Root nicht aktiviert.  
  
-   Die <xref:System.Web.UI.ScriptManager.ScriptMode%2A>-Eigenschaft ist auf `Release` festgelegt.  
  
    > [!NOTE]
    >  Das `debug` -Attribut der [@ Page](https://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) -Direktive wirkt sich nicht auf AJAX-aktivierte ASP.NET-Anwendungen aus. Das <xref:System.Web.UI.ScriptManager> <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> -Steuerelement verwendet nur die Einstellungen in der Datei "Web. config" <xref:System.Web.UI.ScriptManager.ScriptMode%2A> und in den Eigenschaften und, um zu bestimmen, ob Debugskripts gerengt  
  
 Weitere Informationen finden Sie unter [Übersicht über das Debuggen und verfolgen von AJAX-Anwendungen](https://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpContext.IsDebuggingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsInAsyncPostBack">
      <MemberSignature Language="C#" Value="public bool IsInAsyncPostBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInAsyncPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsInAsyncPostBack" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInAsyncPostBack As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInAsyncPostBack { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInAsyncPostBack : bool" Usage="System.Web.UI.ScriptManager.IsInAsyncPostBack" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManager.IsInAsyncPostBack</InterfaceMember>
        <InterfaceMember>P:System.Web.UI.IScriptManagerInternal.IsInAsyncPostBack</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das aktuelle Postback im Teilrenderingmodus ausgeführt wird.</summary>
        <value><see langword="true" />, wenn das aktuelle Postback im Teilrenderingmodus ausgeführt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> die-Eigenschaft in Kombi <xref:System.Web.UI.Page.IsPostBack%2A> Nation mit der-Eigenschaft, um zwischen dem anfänglichen Seiten Ladevorgang, einem Teil Seiten Update und einem vollständigen <xref:System.Web.UI.Control.Load>Update <xref:System.Web.UI.Page.InitComplete>in- <xref:System.Web.UI.Control.PreRender> ,-oder-Ereignissen zu unterscheiden.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="IsNavigating">
      <MemberSignature Language="C#" Value="public bool IsNavigating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNavigating" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsNavigating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNavigating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNavigating { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNavigating : bool" Usage="System.Web.UI.ScriptManager.IsNavigating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob gegenwärtig ein <see cref="E:System.Web.UI.ScriptManager.Navigate" />-Ereignis behandelt wird.</summary>
        <value><see langword="true" />, wenn die derzeit das <see cref="E:System.Web.UI.ScriptManager.Navigate" /> behandelt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.UI.ScriptManager.IsNavigating%2A> die-Eigenschaft, um <xref:System.Web.UI.ScriptManager.Navigate> zu bestimmen, ob das-Ereignis ausgelöst wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection);" />
      <MemberSignature Language="F#" Value="abstract member LoadPostData : string * System.Collections.Specialized.NameValueCollection -&gt; bool&#xA;override this.LoadPostData : string * System.Collections.Specialized.NameValueCollection -&gt; bool" Usage="scriptManager.LoadPostData (postDataKey, postCollection)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Die Schlüsselkennung für das Steuerelement.</param>
        <param name="postCollection">Die Auflistung aller eingehenden POST-Daten.</param>
        <summary>Liest vom Browser an den Server gesendete Formulardaten und ermittelt die Quelle des asynchronen Postbacks.</summary>
        <returns><see langword="true" />, wenn sich der Zustand des <see cref="T:System.Web.UI.ScriptManager" />-Steuerelements aufgrund eines Postbacks geändert hat, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.LoadPostData%2A> -Methode wird hauptsächlich von Steuerelement Entwicklern verwendet, um die <xref:System.Web.UI.ScriptManager> Funktionalität des Steuer Elements zu erweitern.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadScriptsBeforeUI">
      <MemberSignature Language="C#" Value="public bool LoadScriptsBeforeUI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LoadScriptsBeforeUI" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.LoadScriptsBeforeUI" />
      <MemberSignature Language="VB.NET" Value="Public Property LoadScriptsBeforeUI As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LoadScriptsBeforeUI { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.LoadScriptsBeforeUI : bool with get, set" Usage="System.Web.UI.ScriptManager.LoadScriptsBeforeUI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Skripts vor oder nach dem Laden von Markup für die Seiten-UI geladen werden, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Skripts vor dem Laden von Markup für die UI geladen werden, <see langword="false" />, wenn Skripts nach dem Laden von Markup für die UI geladen werden. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> -Eigenschaft bestimmt, wie Skripts in der <xref:System.Web.UI.ScriptManager.Scripts%2A> Auflistung in Relation zum Markup für die Seiten Benutzeroberfläche geladen werden.  
  
 Wenn die <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> -Eigenschaft `true`ist, `script` wird ein-Element gerendert, bevor das Benutzeroberflächen Markup der Seite geladen wird. Wenn in diesem Szenario Benutzeroberflächen Elemente in Skripts definiert sind, ist die Benutzeroberfläche beim Laden voll funktionsfähig. Wenn das Skript jedoch auf Benutzeroberflächen Elemente im Markup zugreift, für die noch keine Instanzen erstellt wurden, kann ein Fehler auftreten. Um sicherzustellen, dass Benutzeroberflächen Elemente geladen werden, bevor Sie darauf zugreifen `load` , behandeln Sie `Sys.Application` das-Ereignis der-Klasse.  
  
 Wenn die <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> -Eigenschaft `false`ist, `script` wird ein-Element nach dem Rendern des Benutzeroberflächen Markups der Seite gerendert. In diesem Szenario wird die Benutzeroberfläche schneller geladen, Sie ist jedoch möglicherweise nicht voll funktionsfähig, wenn Skripts, die zusätzliche Benutzeroberflächen Elemente definieren, nicht geladen wurden.  
  
 Legen Sie diese Eigenschaft nicht auf `true` fest, wenn <xref:System.Web.UI.ScriptManager.EnableCdn%2A> Sie `true` bereits auf festgelegt haben.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.Scripts" />
        <altmember cref="T:System.Web.UI.ScriptReference" />
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; Navigate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.HistoryEventArgs&gt; Navigate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.Navigate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Navigate As EventHandler(Of HistoryEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::HistoryEventArgs ^&gt; ^ Navigate;" />
      <MemberSignature Language="F#" Value="member this.Navigate : EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; " Usage="member this.Navigate : System.EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.HistoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Benutzer auf die Schaltfläche **Zurück** oder **Weiter** des Browsers klickt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Benutzer auf die Schaltfläche " **zurück** " des Browsers klickt, navigiert der Browser durch zuvor angezeigte URLs, die URLs enthalten können, die Verlaufs Daten zu Verlaufs Punkten enthalten. Wenn der Client Code auf der Webseite erkennt, dass die URL Verlaufs Daten enthält, wird eine Anforderung an die Serverseite an die Serverseite angesendet. Dies fungiert als Post Back Ereignis, und das <xref:System.Web.UI.ScriptManagerProxy> Server Steuerelement löst das `Navigate` -Ereignis aus. Sie können dieses Ereignis behandeln und die Seite nach Bedarf in der Webanwendung neu erstellen, indem Sie die mit dem Ereignis über gebenden Zustandsdaten verwenden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAsyncPostBackError">
      <MemberSignature Language="C#" Value="protected internal virtual void OnAsyncPostBackError (System.Web.UI.AsyncPostBackErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnAsyncPostBackError(class System.Web.UI.AsyncPostBackErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnAsyncPostBackError (e As AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnAsyncPostBackError(System::Web::UI::AsyncPostBackErrorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAsyncPostBackError : System.Web.UI.AsyncPostBackErrorEventArgs -&gt; unit&#xA;override this.OnAsyncPostBackError : System.Web.UI.AsyncPostBackErrorEventArgs -&gt; unit" Usage="scriptManager.OnAsyncPostBackError e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.AsyncPostBackErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Fehlerereignisdaten.</param>
        <summary>Löst das <see cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.ScriptManager.AsyncPostBackError> -Ereignis wird ausgelöst, wenn bei asynchronen Postbacks ein Seiten Fehler auftritt. Wie Fehler auf dem-Server an den Client gesendet werden, hängt <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> von der- <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> Eigenschaft, der-Eigenschaft und dem benutzerdefinierten Fehler Abschnitt der Datei "Web. config" ab.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie das <xref:System.Web.UI.ScriptManager.AsyncPostBackError> -Ereignis behandelt wird <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> , um die-Eigenschaft (die an den Client gesendet wird) an die Server Ausnahme-Fehlermeldung festzulegen.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="scriptManager.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.Init" />-Ereignis aus und stellt sicher, dass auf der Seite nur ein einzelnes <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement vorhanden ist.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Auf der Seite sind mehrere Instanzen von <see cref="T:System.Web.UI.ScriptManager" /> vorhanden.</exception>
        <block subset="none" type="overrides"><para>Wenn diese Methode überschrieben wird, wird <see cref="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" /> die Basis Methode aufgerufen, sodass Skriptdateien für das partielle Seiten Rendering ordnungsgemäß behandelt werden.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET Seiten Lebenszyklus (Übersicht)</related>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="scriptManager.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.PreRender" />-Ereignis aus und registriert Skriptdateien und Dienste für Teilaktualisierungen von Seiten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zum DOM finden Sie in der [Dokumentobjektmodell (DOM)-Spezifikation der Ebene 1](https://go.microsoft.com/fwlink/?LinkId=73305) auf der World Wide Web Consortium-Website (W3C).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Browser, der die Teilanforderung der Seite gesendet hat, unterstützt nicht mindestens DOM Level 1.0.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, wird <see cref="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" /> die Basis Methode aufgerufen, sodass Skriptblöcke und Dienste ordnungsgemäß für das Teil Rendering von Seiten behandelt werden.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET Seiten Lebenszyklus (Übersicht)</related>
      </Docs>
    </Member>
    <Member MemberName="OnResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveCompositeScriptReference (System.Web.UI.CompositeScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveCompositeScriptReference(class System.Web.UI.CompositeScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveCompositeScriptReference(System.Web.UI.CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveCompositeScriptReference (e As CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveCompositeScriptReference(System::Web::UI::CompositeScriptReferenceEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResolveCompositeScriptReference : System.Web.UI.CompositeScriptReferenceEventArgs -&gt; unit&#xA;override this.OnResolveCompositeScriptReference : System.Web.UI.CompositeScriptReferenceEventArgs -&gt; unit" Usage="scriptManager.OnResolveCompositeScriptReference e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.CompositeScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein Objekt, das den Verweis auf das zusammengesetzte Skript darstellt.</param>
        <summary>Löst das <see cref="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResolveScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveScriptReference (System.Web.UI.ScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveScriptReference(class System.Web.UI.ScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveScriptReference(System.Web.UI.ScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveScriptReference (e As ScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveScriptReference(System::Web::UI::ScriptReferenceEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResolveScriptReference : System.Web.UI.ScriptReferenceEventArgs -&gt; unit&#xA;override this.OnResolveScriptReference : System.Web.UI.ScriptReferenceEventArgs -&gt; unit" Usage="scriptManager.OnResolveScriptReference e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.ScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein Objekt, das das aktuelle Skript darstellt.</param>
        <summary>Löst das <see cref="E:System.Web.UI.ScriptManager.ResolveScriptReference" />-Ereignis für jeden Skriptverweis aus, der vom <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement verwaltet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird vom <xref:System.Web.UI.ScriptManager.OnPreRender%2A> Ereignishandler jeweils einmal für jede <xref:System.Web.UI.ScriptReference> in der <xref:System.Web.UI.ScriptManager.Scripts%2A> Auflistung aufgerufen.  
  
 Das <xref:System.Web.UI.ScriptManager.ResolveScriptReference> -Ereignis wird ausgelöst, nachdem doppelte Skript Einträge aufgelöst wurden.  
  
 Überschreiben Sie diese Methode, um das Verhalten einzelner Skriptblöcke beim Postback oder bei partiellen Seiten Aktualisierungen zu beeinflussen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProfileService">
      <MemberSignature Language="C#" Value="public System.Web.UI.ProfileServiceManager ProfileService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ProfileServiceManager ProfileService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ProfileService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProfileService As ProfileServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ProfileServiceManager ^ ProfileService { System::Web::UI::ProfileServiceManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProfileService : System.Web.UI.ProfileServiceManager" Usage="System.Web.UI.ScriptManager.ProfileService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ProfileServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Web.UI.ProfileServiceManager" />-Objekt ab, das der aktuellen <see cref="T:System.Web.UI.ScriptManager" />-Instanz zugeordnet ist.</summary>
        <value>Das <see cref="T:System.Web.UI.ProfileServiceManager" />-Objekt für die aktuelle <see cref="T:System.Web.UI.ScriptManager" />-Instanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.ProfileServiceManager> -Objekt, das von dieser Eigenschaft zurückgegeben wird, stellt den Profil Dienst dar, der bei der Seite registriert ist. Der Profil Dienst kann im <xref:System.Web.UI.ScriptManager> -Steuerelement oder in einem zugeordneten <xref:System.Web.UI.ScriptManagerProxy> -Steuerelement definiert werden.  
  
 Sie können den ASP.NET-Profil Dienst verwenden oder einen benutzerdefinierten Profil Dienst verwenden. Sie können den benutzerdefinierten-Dienst im Markup hinzufügen `ProfileService` , indem Sie `asp:ScriptManager` ein-Element innerhalb des-Elements auf der Seite einschließen, wie im folgenden Beispiel gezeigt.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <ProfileService LoadProperties="propertyA,propertyB"  
    Path="MyProfileService.asmx" />  
</asp:ScriptManager>  
```  
  
 Sie können das <xref:System.Web.UI.ProfileServiceManager> Objekt auch Programm gesteuert konfigurieren. Dienste werden während der <xref:System.Web.UI.ScriptManager> <xref:System.Web.UI.Control.PreRender> Lebenszyklusphase der Seite mit dem-Steuerelement registriert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaisePostBackEvent : string -&gt; unit&#xA;override this.RaisePostBackEvent : string -&gt; unit" Usage="scriptManager.RaisePostBackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Eine Zeichenfolge von Schlüssel-Wert-Paaren, die den Verlaufszustand der Webseite darstellen.</param>
        <summary>Verarbeitet ein Postbackereignis, das vom <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement ausgelöst wurde, und lädt den Verlaufszustand der Webseite.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostDataChangedEvent ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostDataChangedEvent();" />
      <MemberSignature Language="F#" Value="abstract member RaisePostDataChangedEvent : unit -&gt; unit&#xA;override this.RaisePostDataChangedEvent : unit -&gt; unit" Usage="scriptManager.RaisePostDataChangedEvent " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löst Ereignisse für das <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement aus, wenn es ein Postback an den Server ausführt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.RaisePostDataChangedEvent%2A> -Methode wird hauptsächlich von Steuerelement Entwicklern verwendet, um die <xref:System.Web.UI.ScriptManager> Funktionalität des Steuer Elements zu erweitern. Bei der Standard Implementierung des <xref:System.Web.UI.ScriptManager> -Steuer Elements werden keine Ereignisse ausgelöst.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterArrayDeclaration">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert eine ECMAScript-Arraydeklaration (JavaScript) beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt das Array der Seite hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="static member RegisterArrayDeclaration : System.Web.UI.Control * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterArrayDeclaration (control, arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das das Array registriert.</param>
        <param name="arrayName">Der Name des zu registrierenden Arrays.</param>
        <param name="arrayValue">Der zu registrierende Arraywert bzw. die zu registrierenden Arraywerte.</param>
        <summary>Registriert eine ECMAScript-Arraydeklaration (JavaScript) beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt das Array der Seite hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> -Methode, um ein Client Skript Array zu registrieren, das mit dem partiellen Seiten Rendering kompatibel ist und über keine Abhängigkeiten der Microsoft AJAX-Bibliothek verfügt. Diese Methode registriert das Array, `control` wenn ein Steuerelement darstellt, das <xref:System.Web.UI.UpdatePanel> sich in einem-Steuerelement befindet, das aktualisiert wird. Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> -Überladung dieser Methode, um jedes Mal, wenn ein asynchrones Postback auftritt, ein Array zu registrieren.  
  
 Verwenden Sie die <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> -Methode <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie ein Array registrieren möchten, das sich nicht auf Teil Aktualisierungen der Seite bezieht, und wenn Sie das Array nur ein Mal während des ersten Seiten Rendering registrieren möchten. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> -Methode bestimmt, ob ein Array mit dem `arrayName` im-Parameter angegebenen Namen bereits registriert ist. Wenn dies der Fall ist, fügt die-Methode `arrayValue`die in angegebenen Werte hinzu. Da das zu registrierende Array auf der <xref:System.Collections.ArrayList> -Klasse basiert, sind Duplikate zulässig. Wenn ein registriertes Array mit dem Namen `arrayName` in nicht vorhanden ist, wird das Array erstellt, und die `arrayValue` Werte in werden hinzugefügt.  
  
 Wenn Sie Zeichen folgen Literale in das Array einschließen möchten, verwenden Sie einfache Anführungszeichen (') oder doppelte\\Anführungszeichen ( `arrayValue`") in.  
  
 Beachten Sie, dass JavaScript ein Komma (,) als Trennzeichen in einem Array behandelt. Sie können mehrere Array Werte angeben, indem Sie eine durch Trennzeichen getrennte Zeichen `arrayValue`Folge in übergeben. Das Trennen von zwei Elementen durch ein `arrayValue` Komma in entspricht dem Aufrufen <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> der-Methode zweimal, einmal für jedes Element.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="arrayName" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Page page, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Page page, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Page ^ page, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="static member RegisterArrayDeclaration : System.Web.UI.Page * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterArrayDeclaration (page, arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das das Array registriert.</param>
        <param name="arrayName">Der Name des zu registrierenden Arrays.</param>
        <param name="arrayValue">Der zu registrierende Arraywert bzw. die zu registrierenden Arraywerte.</param>
        <summary>Registriert eine ECMAScript-Arraydeklaration (JavaScript) beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt das Array der Seite hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> -Methode, um ein Client Skript Array zu registrieren, das mit dem partiellen Seiten Rendering kompatibel ist und über keine Abhängigkeiten der Microsoft AJAX-Bibliothek verfügt. Diese Methode registriert das Array jedes Mal, wenn ein asynchrones Postback auftritt. Zum Registrieren eines Arrays für ein Steuerelement, das sich <xref:System.Web.UI.UpdatePanel> innerhalb eines-Steuer Elements befindet, sodass das Array nur beim Aktualisieren des Panels registriert <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> wird, verwenden Sie die-Überladung dieser Methode.  
  
 Verwenden Sie die <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> -Methode <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie ein Array registrieren möchten, das sich nicht auf Teil Aktualisierungen der Seite bezieht, und wenn Sie das Array nur ein Mal während des ersten Seiten Rendering registrieren möchten. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="arrayName" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAsyncPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterAsyncPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterAsyncPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterAsyncPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member RegisterAsyncPostBackControl : System.Web.UI.Control -&gt; unit&#xA;override this.RegisterAsyncPostBackControl : System.Web.UI.Control -&gt; unit" Usage="scriptManager.RegisterAsyncPostBackControl control" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterAsyncPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das für asynchrone Postbacks registriert werden soll.</param>
        <summary>Registriert ein Steuerelement als Trigger für asynchrone Postbacks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> -Methode ermöglicht es Ihnen, Webserver-Steuerelemente als Trigger zu registrieren, damit Sie anstelle eines synchronen Postbacks ein asynchrones Postback ausführen. Wenn die <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> -Eigenschaft <xref:System.Web.UI.UpdatePanel> eines-Steuer Elements auf `true` festgelegt ist (Dies ist die <xref:System.Web.UI.UpdatePanel> Standardeinstellung), werden die Post Back Steuerelemente im-Steuerelement automatisch als asynchrone Post Back Steuerelemente registriert.  
  
 Verwenden Sie <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> die-Methode, um Steuer <xref:System.Web.UI.UpdatePanel> Elemente außerhalb eines-Steuer Elements als Trigger für asynchrone Postbacks zu registrieren und den Inhalt eines Update Panels potenziell zu aktualisieren. Zum programmgesteuerten <xref:System.Web.UI.UpdatePanel> Aktualisieren eines-Steuer Elements wird <xref:System.Web.UI.UpdatePanel.Update%2A> die-Methode aufgerufen.  
  
 Sie können den-Typ deklarativ hinzufügen, `Triggers` indem Sie das <xref:System.Web.UI.UpdatePanel> -Element des-Steuer Elements verwenden. Verwenden Sie in Visual Studio das Dialogfeld **Update Panel Update Panel** -Auflistungs-Editor des Designers.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> -Methode aufgerufen wird <xref:System.Web.UI.WebControls.Button> , um ein-Steuerelement zu registrieren, <xref:System.Web.UI.UpdatePanel> sodass es die Aktualisierung des Inhalts eines Steuer Elements verursacht. Das <xref:System.Web.UI.WebControls.Button> -Steuerelement befindet sich <xref:System.Web.UI.UpdatePanel> nicht im-Steuerelement. Es werden zwei Schaltflächen `Button1` angezeigt `Button2`: und. `Button1`Aktualisiert den Inhalt des Panels und `Button2` aktualisiert die gesamte Seite.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager1VB.aspx#1)]  
  
 Im folgenden Beispiel wird gezeigt, wie die <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> -Methode aufgerufen wird, um ein Benutzer Steuerelement zu registrieren, sodass <xref:System.Web.UI.UpdatePanel> es die Aktualisierung des Inhalts eines Steuer Elements verursacht. Das erste Beispiel zeigt eine Seite mithilfe des Benutzer Steuer Elements. Im zweiten Beispiel wird das Benutzer Steuerelement gezeigt.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager2CS.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager2VB.aspx#2)]  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Die Seite wird als Steuerelement für asynchrone Postbacks registriert.
- oder -

Das registrierte Steuerelement implementiert nicht die Schnittstellen <see cref="T:System.Web.UI.INamingContainer" />, <see cref="T:System.Web.UI.IPostBackDataHandler" /> oder <see cref="T:System.Web.UI.IPostBackEventHandler" />.</exception>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
        <altmember cref="M:System.Web.UI.UpdatePanel.Update" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert einen Clientskriptblock beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt dann den Skriptblock der Seite hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptBlock : System.Web.UI.Control * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptBlock (control, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das den Clientskriptblock registriert.</param>
        <param name="type">Der Typ des Clientskriptblocks. Dieser Parameter wird meist mithilfe des Operators <see langword="typeof" /> (C#) bzw. des Operators <see langword="GetType" /> (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für den Skriptblock.</param>
        <param name="script">Das Skript.</param>
        <param name="addScriptTags"><see langword="true" />, um den Skriptblock in die Tags <see langword="&lt;script&gt;" /> und <see langword="&lt;/script&gt;" /> einzuschließen, andernfalls <see langword="false" />.</param>
        <summary>Registriert einen Clientskriptblock beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt dann den Skriptblock der Seite hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> -Methode, um einen Client Skriptblock zu registrieren, der mit teilweiser Seiten Rendering kompatibel ist und keine Abhängigkeiten der Microsoft AJAX-Bibliothek aufweist. Client Skriptblöcke, die mit dieser Methode registriert werden, werden nur an die Seite gesendet `control` , wenn ein Steuerelement darstellt, <xref:System.Web.UI.UpdatePanel> das sich in einem-Steuerelement befindet, das aktualisiert wird. Wenn ein Skriptblock bei jedem asynchronen Postback registriert werden soll, verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> -Überladung dieser Methode.  
  
 Verwenden Sie die-Methode <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie einen Skriptblock registrieren möchten, der sich nicht auf Teil Aktualisierungen der Seite bezieht. Wenn Sie den Skriptblock nur einmal während des ersten Seiten Rendering registrieren möchten, verwenden Sie die-Methode der-Klasse. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 `addScriptTags` <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> Wenn den Wert `<script>` hat, fügt die Methode dem Skriptblock Tags hinzu. `true` Übergeben `false` Sie, wenn Sie selbst `<script>` Tags erstellen möchten, z. b. Wenn Sie die Attribute bestimmter `<script>` Tags festlegen möchten. Wenn `addScriptTags` ist `false` und der`script` -Parameter mehrere Skriptblöcke enthält, wird eine-Ausnahme ausgelöst.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> -Methode fügt der Seite nach dem öffnenden `<form>` Tag einen Skriptblock hinzu. Es ist nicht garantiert, dass die Skriptblöcke in derselben Reihenfolge ausgegeben werden, in der Sie registriert sind. Wenn die Reihenfolge der Skriptblöcke wichtig ist, verketten Sie die Skriptblöcke zu einer einzelnen Zeichenfolge (z. b. mithilfe <xref:System.Text.StringBuilder> des-Objekts), und registrieren Sie Sie als einen einzelnen Client Skriptblock.  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/CS/ScriptManager_RegisterClientScriptBlockCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/vb/ScriptManager_RegisterClientScriptBlockVB.aspx#1)]  
  
 [!code-xml[System.Web.UI.ScriptManager.RegisterClientScriptBlock#2](~/samples/snippets/common/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/Common/App_Data/Contacts.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Clientskriptblock <paramref name="type" /> ist <see langword="null" />.  
  
- oder - 
Das Steuerelement, das den Skriptblock registriert, ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Das Steuerelement, das den Skriptblock registriert, befindet sich nicht in der Steuerelementstruktur der Seite.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptBlock : System.Web.UI.Page * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptBlock (page, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das den Clientskriptblock registriert.</param>
        <param name="type">Der Typ des Clientskriptblocks. Dieser Parameter wird meist mithilfe des Operators <see langword="typeof" /> (C#) bzw. des Operators <see langword="GetType" /> (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für den Skriptblock.</param>
        <param name="script">Das zu registrierende Skript.</param>
        <param name="addScriptTags"><see langword="true" />, um den Skriptblock in die Tags <see langword="&lt;script&gt;" /> und <see langword="&lt;/script&gt;" /> einzuschließen, andernfalls <see langword="false" />.</param>
        <summary>Registriert einen Clientskriptblock beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt dann den Skriptblock der Seite hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie einen Skriptblock mithilfe dieser Methode registrieren, wird das Skript jedes Mal gerendert, wenn ein asynchrones Postback auftritt. Um einen Skriptblock für ein Steuerelement zu registrieren, das <xref:System.Web.UI.UpdatePanel> sich innerhalb eines-Steuer Elements befindet, damit <xref:System.Web.UI.UpdatePanel> das Skript nur registriert wird, <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> wenn das Steuerelement aktualisiert wird, verwenden Sie die-Überladung dieser Methode.  
  
 Verwenden Sie die-Methode <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie einen Skriptblock registrieren möchten, der sich nicht auf Teil Aktualisierungen der Seite bezieht. Wenn Sie den Skriptblock nur einmal während des ersten Seiten Rendering registrieren möchten, verwenden Sie die-Methode der-Klasse. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Skriptblock <paramref name="type" /> ist <see langword="null" />.  
  
- oder - 
Die Seite, die den Skriptblock registriert, ist <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert eine Clientscriptdatei beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt der Seite dann einen Skriptdateiverweis hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptInclude : System.Web.UI.Control * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptInclude (control, type, key, url)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das die Clientskriptdatei registriert.</param>
        <param name="type">Der Typ der zu registrierenden Clientskriptdatei. Dieser Parameter wird meist mithilfe des Operators typeof (C#) bzw. des Operators GetType (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für die Skriptdatei.</param>
        <param name="url">Die URL der Skriptdatei.</param>
        <summary>Registriert eine Clientscriptdatei beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt der Seite dann einen Skriptdateiverweis hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie verwenden die <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> -Methode, um eine Client Skriptdatei für eine Seite oder einen Teil einer Seite zu registrieren, die Teil Aktualisierungen der Seite ist. Client Skriptdateien, die mit dieser Methode registriert werden, werden nur an die Seite gesendet, `control` wenn das ein Steuerelement darstellt, <xref:System.Web.UI.UpdatePanel> das sich in einem-Steuerelement befindet, das aktualisiert wird. Wenn Sie bei jedem asynchronen Postback eine Skriptdatei registrieren möchten, verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> -Überladung dieser Methode.  
  
 Verwenden Sie die-Methode <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie einen Skriptblock registrieren möchten, der sich nicht auf Teil Aktualisierungen der Seite bezieht. Wenn Sie den Skriptblock nur einmal während des ersten Seiten Rendering registrieren möchten, verwenden Sie die-Methode der-Klasse. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> -Methode registriert eine Client Skriptdatei auf der Seite, indem `script` ein-Element gerendert `src` wird, dessen Starttag ein-Attribut enthält. Der `url` -Parameter wird verwendet, um `src` das-Attribut festzulegen. Verwenden Sie zum Auflösen von URLs <xref:System.Web.UI.Control.ResolveClientUrl%2A> die-Methode. Diese Methode verwendet den Kontext der URL, für die Sie aufgerufen wird, um den Pfad aufzulösen.  
  
 Sowohl die <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> - <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> Methode als auch die-Methode werden Skriptdateien zum Browser. Wenn ein Skript mit dem gleichen Typ und Schlüssel (für eine Skriptdatei) oder dem gleichen Typ und Ressourcennamen (für eine eingebettete Ressource) bereits gerendert wird, wird das Skript nicht erneut gerendert.  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptInclude#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/ScriptManager_RegisterClientScriptIncludeCS.aspx#1)]  
  
 [!code-javascript[System.Web.UI.ScriptManager.RegisterClientScriptInclude#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/scripts/script_alertdiv.js#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Clientskriptdatei <paramref name="type" /> ist <see langword="null" />.  
  
- oder - 
Das Steuerelement, das die Skriptdatei registriert, ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Das Steuerelement, das die Skriptdatei registriert, befindet sich nicht in der Steuerelementstruktur der Seite.  
  
- oder - 
 <paramref name="url" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="url" /> ist leer.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Page page, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Page page, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptInclude : System.Web.UI.Page * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptInclude (page, type, key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das die Clientskriptdatei registriert.</param>
        <param name="type">Der Typ der zu registrierenden Clientskriptdatei. Dieser Parameter wird meist mithilfe des Operators typeof (C#) bzw. des Operators GetType (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für die Skriptdatei.</param>
        <param name="url">Die URL der Skriptdatei.</param>
        <summary>Registriert Clientskripts bei jedem asynchronen Postback beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement und fügt der Seite dann einen Skriptdateiverweis hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie eine Skriptdatei mit dieser Methode registrieren, wird das Skript jedes Mal gerendert, wenn ein asynchrones Postback auftritt. Verwenden Sie die <xref:System.Web.UI.UpdatePanel> <xref:System.Web.UI.UpdatePanel> -ÜberladungdieserMethode,umeineSkriptdateifüreinSteuerelementzuregistrieren,dassichineinem-Steuerelementbefindet,damitdasSkriptnurregistriertwird,wenndasSteuer<xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> Element aktualisiert wird.  
  
 Verwenden Sie die-Methode <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie einen Skriptblock registrieren möchten, der sich nicht auf Teil Aktualisierungen der Seite bezieht. Wenn Sie den Skriptblock nur einmal während des ersten Seiten Rendering registrieren möchten, verwenden Sie die-Methode der-Klasse. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Clientskriptdatei <paramref name="type" /> ist <see langword="null" />.  
  
- oder - 
Die Seite, die die Skriptdatei registriert, ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="url" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="url" /> ist leer.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert in einer Assembly eingebettete Clientskripts beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, um diese mit einem Steuerelement zu verwenden, das am Teilrendering von Seiten beteiligt ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptResource : System.Web.UI.Control * Type * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptResource (control, type, resourceName)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das das Skript registriert.</param>
        <param name="type">Der Typ des Clientskripts. Dieser Parameter wird meist mithilfe des Operators typeof (C#) bzw. des Operators GetType (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="resourceName">Ein Bezeichner für die Ressource.</param>
        <summary>Registriert das in einer Assembly eingebettete Clientskript beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, um dieses mit einem Steuerelement zu verwenden, das am Teilrendering von Seiten beteiligt ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie verwenden die <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> -Methode, um ein Skript zu registrieren, das mit teilweiser Seiten Rendering kompatibel ist und über keine Abhängigkeiten der Microsoft AJAX-Bibliothek verfügt. Skript Ressourcen, die mit dieser Methode registriert werden, werden nur registriert `control` , wenn ein Steuerelement darstellt, <xref:System.Web.UI.UpdatePanel> das sich innerhalb eines aktualisierten-Steuer Elements befindet. Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> -Überladung dieser Methode, um jedes Mal ein Skript zu registrieren, wenn ein asynchrones Postback auftritt.  
  
 Verwenden Sie die-Methode <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie einen Skriptblock registrieren möchten, der sich nicht auf Teil Aktualisierungen der Seite bezieht. Wenn Sie den Skriptblock nur einmal während des ersten Seiten Rendering registrieren möchten, verwenden Sie die-Methode der-Klasse. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> -Methode wird verwendet, wenn auf Ressourcen aus Assemblys über einen HTTP-Handler zugegriffen wird. Diese Methode enthält den Inhalt der Ressourcen-URL in einem `script` -Element.  
  
 Sowohl die <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> -Methode <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> als auch die-Methode laden Skriptdateien in den Browser. Wenn ein Skript mit dem gleichen Typ und Schlüssel (für eine Skriptdatei) oder dem gleichen Typ und Ressourcennamen (für eine eingebettete Ressource) bereits geladen ist, wird das Skript nicht erneut geladen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Clientressource <paramref name="type" /> ist <see langword="null" />.  
  
- oder - 
Das Steuerelement, das das Skript registriert, ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Das Steuerelement, das das Skript registriert, befindet sich nicht in der Steuerelementstruktur der Seite.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Page page, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Page page, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Page ^ page, Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptResource : System.Web.UI.Page * Type * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptResource (page, type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das das Skript registriert.</param>
        <param name="type">Der Typ des Clientskripts. Dieser Parameter wird meist mithilfe des Operators typeof (C#) bzw. des Operators GetType (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="resourceName">Ein Bezeichner für die Ressource.</param>
        <summary>Registriert eine in einer Assembly eingebettete Clientskriptdatei bei jedem asynchronen Postback beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie eine Skriptdatei mit dieser Methode registrieren, wird das Skript jedes Mal gerendert, wenn ein asynchrones Postback auftritt. Wenn Sie ein Skript für ein Steuerelement registrieren möchten, <xref:System.Web.UI.UpdatePanel> das sich in einem-Steuerelement befindet, damit <xref:System.Web.UI.UpdatePanel> das Skript nur beim Aktualisieren des <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%29> -Steuer Elements registriert wird, verwenden Sie die-Überladung dieser Methode.  
  
 Verwenden Sie die-Methode <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie einen Skriptblock registrieren möchten, der sich nicht auf Teil Aktualisierungen der Seite bezieht. Wenn Sie den Skriptblock nur einmal während des ersten Seiten Rendering registrieren möchten, verwenden Sie die-Methode der-Klasse. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Clientressource <paramref name="type" /> ist <see langword="null" />.  
  
- oder - 
Die Seite, die das Skript registriert, ist <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterDataItem">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sendet während des Teilrenderings von Seiten benutzerdefinierte Daten an Steuerelemente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem);" />
      <MemberSignature Language="F#" Value="member this.RegisterDataItem : System.Web.UI.Control * string -&gt; unit" Usage="scriptManager.RegisterDataItem (control, dataItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das die Daten empfängt.</param>
        <param name="dataItem">Die Daten, die an das Steuerelement gesendet werden.</param>
        <summary>Sendet während des Teilrenderings von Seiten benutzerdefinierte Daten an ein Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> die-Methode, um Daten während asynchroner Postbacks vom Server an den Client zu senden, unabhängig davon, ob sich das Steuerelement <xref:System.Web.UI.UpdatePanel> , das die Daten empfängt, innerhalb eines-Steuer Elements befindet.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> -Methode kann nur während eines asynchronen Postbacks aufgerufen werden. Verwenden Sie die <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> -Eigenschaft, um zu bestimmen, ob ein Postback asynchron ist. Diese Methode ruft die-Überladung auf, die `isJsonSerialized` einen Parameter namens annimmt `false`, der auf festgelegt ist. Wenn der `isJsonSerialized` -Parameter auf `false`festgelegt ist, wird die Zeichenfolge nicht als JavaScript Object Notation (JSON) serialisiert. Weitere Informationen zum JSON-Format finden Sie auf der [Introducing JSON](https://go.microsoft.com/fwlink/?LinkId=77297) -Website.  
  
 Auf die Datenelemente, die mit der <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> -Methode registriert sind, kann im Client Skript `pageLoading`während `pageLoaded`der- `endRequest` ,-und `PageRequestManager` -Ereignisse des-Objekts zugegriffen werden. Wenn Sie diese Ereignisse behandeln, werden die benutzerdefinierten Daten in einem Ereignis Argument Objekt übermittelt. Wenn Sie z. b. einen Handler für das `pageLoading` -Ereignis bereitstellen, werden die benutzerdefinierten `PageLoadingEventArgs` Daten in der-Klasse, die eine-Eigenschaft verfügbar macht, übermittelt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Daten während eines <xref:System.Web.UI.WebControls.Label> asynchronen Postbacks an zwei Steuerelemente auf einer Seite gesendet werden. Die <xref:System.Web.UI.WebControls.Label> Steuerelemente befinden sich nicht <xref:System.Web.UI.UpdatePanel> in einem-Steuerelement.  
  
> [!NOTE]
>  Die Daten, die in diesem Beispiel gesendet werden, dienen nur zur Veranschaulichung. In einer realen Anwendung verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> -Methode, um benutzerdefinierte Daten vom Server zu senden.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />-Methode wird während eines Postbacks aufgerufen.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="dataItem" /> ist bereits für <paramref name="control" /> registriert.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem, bool isJsonSerialized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem, bool isJsonSerialized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem, bool isJsonSerialized);" />
      <MemberSignature Language="F#" Value="member this.RegisterDataItem : System.Web.UI.Control * string * bool -&gt; unit" Usage="scriptManager.RegisterDataItem (control, dataItem, isJsonSerialized)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
        <Parameter Name="isJsonSerialized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Das Seitensteuerelement, das die Daten empfängt.</param>
        <param name="dataItem">Die Daten, die an das Steuerelement gesendet werden.</param>
        <param name="isJsonSerialized"><see langword="true" />, um anzugeben, dass <paramref name="dataItem" /> als JSON serialisiert wird, andernfalls <see langword="false" />.</param>
        <summary>Sendet benutzerdefinierte Daten während des Teilrenderings von Seiten an ein Steuerelement und gibt an, ob die Daten das JSON-Format (JavaScript Object Notation) aufweisen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie verwenden die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> -Methode, um Daten während asynchroner Postbacks vom Server an den Client zu senden, unabhängig davon, ob sich das Steuerelement, <xref:System.Web.UI.UpdatePanel> das die Daten empfängt, innerhalb eines-Steuer Elements befindet.  
  
 Wenn der `dataItem` Parameter, den Sie für `control` registrieren, nicht als JSON serialisiert wird, `isJsonSerialized` legen Sie `false`den-Parameter auf fest. Dadurch entfällt die Notwendigkeit, die `eval` -Funktion für jede Zeichenfolge zu verwenden, die an den Client gesendet wird. Weitere Informationen zum JSON-Format finden Sie auf der [Introducing JSON](https://go.microsoft.com/fwlink/?LinkId=77297) -Website.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> -Methode kann nur während eines asynchronen Postbacks aufgerufen werden. Verwenden Sie die <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> -Eigenschaft, um zu bestimmen, ob ein Postback asynchron ist.  
  
 Auf die Datenelemente, <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> die mithilfe der-Methode registriert werden, kann im Client Skript während der `pageLoaded` `pageLoading`-,-und- `PageRequestManager` Ereignisse des- `endRequest` Objekts zugegriffen werden. Wenn Sie diese Ereignisse behandeln, werden die benutzerdefinierten Daten in einem Ereignis Argument Objekt übermittelt. Wenn Sie z. b. einen Handler für das `pageLoading` -Ereignis bereitstellen, werden die benutzerdefinierten `PageLoadingEventArgs` Daten in der-Klasse, die eine-Eigenschaft verfügbar macht, übermittelt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Daten während eines <xref:System.Web.UI.WebControls.Label> asynchronen Postbacks an zwei Steuerelemente auf einer Seite gesendet werden. Die <xref:System.Web.UI.WebControls.Label> Steuerelemente befinden sich nicht <xref:System.Web.UI.UpdatePanel> in einem-Steuerelement. Dieses Beispiel zeigt die-Überladung, die den `isJsonSerialized` -Parameter nicht annimmt. Andernfalls ist das Verfahren zum Abrufen der `dataItems` -Eigenschaft `PageLoadingEventArgs` des-Objekts identisch mit dem, wenn Sie diese Überladung nicht verwendet haben.  
  
> [!NOTE]
>  Die Daten, die in diesem Beispiel gesendet werden, dienen nur zur Veranschaulichung. In einer realen Anwendung verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> -Methode, um benutzerdefinierte Daten vom Server zu senden. Beispielsweise können Sie das Datenelement verwenden, um Informationen darüber zu senden, ob Client Elemente ausgeblendet oder angezeigt werden sollen, die <xref:System.Web.UI.UpdatePanel> sich nicht in einem-Steuerelement befinden.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />-Methode wird während eines Postbacks aufgerufen.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="dataItem" /> ist bereits für <paramref name="control" /> registriert.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDispose">
      <MemberSignature Language="C#" Value="public void RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript);" />
      <MemberSignature Language="F#" Value="member this.RegisterDispose : System.Web.UI.Control * string -&gt; unit" Usage="scriptManager.RegisterDispose (control, disposeScript)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterDispose(System.Web.UI.Control,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, für das das <see langword="dispose" />-Skript vorgesehen ist.</param>
        <param name="disposeScript">Das <see langword="dispose" />-Skript.</param>
        <summary>Registriert ein <see langword="dispose" />-Skript für ein Steuerelement in einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement. Das Skript wird ausgeführt, wenn das <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement aktualisiert oder gelöscht wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> die-Methode `dispose` , um Skripts für Steuerelemente <xref:System.Web.UI.UpdatePanel> in einem-Steuerelement zu registrieren. Während asynchronen Postbacks <xref:System.Web.UI.UpdatePanel> können Steuerelemente aktualisiert, gelöscht oder erstellt werden. Wenn ein Panel aktualisiert oder gelöscht wird, `dispose` <xref:System.Web.UI.UpdatePanel> werden alle Skripts aufgerufen, die für Steuerelemente im registriert sind. In typischen Szenarien für die Seiten Entwicklung müssen Sie die <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> -Methode nicht aufzurufen.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> -Methode ist für die Verwendung durch Entwickler von Steuerelementen vorgesehen, um Skripts zu registrieren <xref:System.Web.UI.IScriptControl> oder um Steuerelemente zu erstellen, die von der Beispielsweise können Sie ein `dispose` Skript verwenden, wenn Sie ein Client Steuerelement mithilfe der Komposition entwickeln. In Ihrem-Steuerelement implementieren <xref:System.Web.UI.IScriptControl> und Rendering Sie einzelne Steuerelemente. Sie registrieren die `dispose` -Methode eines beliebigen Elements, das keiner definierten Client Komponente ( `Sys.TextBox`z. b.) entspricht. Wenn das benutzerdefinierte Steuerelement Elemente mit Client Komponenten in der Microsoft AJAX-Bibliothek kombiniert, müssen Sie kein `dispose` Skript registrieren, da `dispose` automatisch aufgerufen wird. Verwenden Sie daher die <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> -Methode für Client Komponenten, die Teil der Microsoft AJAX-Bibliothek sind und Ressourcen freigeben müssen, wenn eine Komponente nicht mehr verwendet wird.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> -Methode kann mehrmals für ein Steuerelement aufgerufen werden. Mehrere Skripts werden aggregiert. Die Reihenfolge der disposing Skripts entspricht der Reihenfolge, in der die Skripts registriert wurden.  
  
 Wenn Sie ein `dispose` Skript für ein Steuerelement registrieren, das sich nicht <xref:System.Web.UI.UpdatePanel> in einem-Steuerelement befindet, wird eine Ausnahme ausgelöst. Das `dispose` Skript wird zwischen dem `pageLoading` -Ereignis `pageLoaded` und dem- `PageRequestManager` Ereignis der-Klasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="disposeScript" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="control" /> wurde auf der Seite nicht gefunden.  
  
- oder - 
 <paramref name="control" /> befindet sich nicht in einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement.</exception>
        <altmember cref="T:System.Web.UI.IScriptControl" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public static void RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberSignature Language="F#" Value="static member RegisterExpandoAttribute : System.Web.UI.Control * string * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterExpandoAttribute (control, controlId, attributeName, attributeValue, encode)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das das Expando-Attribut registriert.</param>
        <param name="controlId">Das Steuerelement, das das benutzerdefinierte Attribut auf der Seite enthält.</param>
        <param name="attributeName">Der Name des zu registrierenden benutzerdefinierten Attributs.</param>
        <param name="attributeValue">Der Wert des benutzerdefinierten Attributs.</param>
        <param name="encode"><see langword="true" />, um das zu registrierende benutzerdefinierte Attribut zu codieren, andernfalls <see langword="false" />.</param>
        <summary>Registriert ein Name-Wert-Paar beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement als benutzerdefiniertes Attribut (Expando-Attribut) eines angegebenen Steuerelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie verwenden die <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> -Methode, um eine benutzerdefinierte (Expando)-Eigenschaft für ein Steuerelement zu registrieren, das mit dem partiellen Seiten Rendering kompatibel ist und über keine Abhängigkeiten der Microsoft AJAX-Bibliothek verfügt.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> -Methode registriert ein Name-Wert-Paar als benutzerdefiniertes Attribut für das angegebene Steuerelement. Die-Eigenschaft wird dynamisch von ECMAScript (JavaScript) festgelegt, um die XHTML-Kompatibilität für das Markup des gerenderten Steuer Elements beizubehalten. Legen `encode` Sie `true` auf fest, wenn Sie Zeichen im Wert der dynamischen Eigenschaft mit Escapezeichen versehen müssen.  
  
 Wenn das Steuerelement, zu dem die dynamische Eigenschaft hinzugefügt wird, nicht gefunden wird, tritt ein Skript Fehler auf.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="control" /> befindet sich nicht in der Steuerelementstruktur der Seite.  
  
- oder - 
 <paramref name="controlId" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="controlId" /> ist leer.  
  
- oder - 
 <paramref name="attributeName" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="attributeName" /> ist leer.  
  
- oder - 
 "<paramref name="attributeName" />" ist bereits registriert.</exception>
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExtenderControl&lt;TExtenderControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterExtenderControl&lt;TExtenderControl&gt; (TExtenderControl extenderControl, System.Web.UI.Control targetControl) where TExtenderControl : System.Web.UI.Control, System.Web.UI.IExtenderControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterExtenderControl&lt;(class System.Web.UI.Control, class System.Web.UI.IExtenderControl) TExtenderControl&gt;(!!TExtenderControl extenderControl, class System.Web.UI.Control targetControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExtenderControl(Of TExtenderControl As {Control, IExtenderControl}) (extenderControl As TExtenderControl, targetControl As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExtenderControl&gt;&#xA; where TExtenderControl : System::Web::UI::Control, System::Web::UI::IExtenderControl virtual void RegisterExtenderControl(TExtenderControl extenderControl, System::Web::UI::Control ^ targetControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterExtenderControl : 'ExtenderControl * System.Web.UI.Control -&gt; unit (requires 'ExtenderControl :&gt; System.Web.UI.Control and 'ExtenderControl :&gt; System.Web.UI.IExtenderControl)&#xA;override this.RegisterExtenderControl : 'ExtenderControl * System.Web.UI.Control -&gt; unit (requires 'ExtenderControl :&gt; System.Web.UI.Control and 'ExtenderControl :&gt; System.Web.UI.IExtenderControl)" Usage="scriptManager.RegisterExtenderControl (extenderControl, targetControl)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterExtenderControl``1(``0,System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtenderControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IExtenderControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="extenderControl" Type="TExtenderControl" />
        <Parameter Name="targetControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <typeparam name="TExtenderControl">Ein Steuerelement, das die <see cref="T:System.Web.UI.IExtenderControl" />-Schnittstelle implementiert.</typeparam>
        <param name="extenderControl">Das zu registrierende Extendersteuerelement.</param>
        <param name="targetControl">Das Skriptsteuerelement, das das Extendersteuerelement erweitert.</param>
        <summary>Registriert ein Extendersteuerelement bei der aktuellen Instanz von <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird hauptsächlich von Steuerelement Entwicklern verwendet. Ruft die <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> Methode von einem benutzerdefinierten ASP.NET AJAX-Extendersteuerelement während seines `onInit` Ereignis Handlers auf, um das Steuerelement bei der Seite zu registrieren Ein ASP.NET AJAX-Extendersteuerelement muss registriert werden, um am partiellen Seiten Rendering teilnehmen zu können.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> -Methode fügt das angegebene Extender-Steuerelement einer internen Liste von Extender-Steuerelementen und den von Ihnen erweitertem Zielskript Steuerelementen hinzu. Diese Liste wird während des <xref:System.Web.UI.Control.PreRender> -Ereignisses verarbeitet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="extenderControl" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="targetControl" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterHiddenField">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert ein ausgeblendetes Feld.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="static member RegisterHiddenField : System.Web.UI.Control * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterHiddenField (control, hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das das ausgeblendete Feld registriert.</param>
        <param name="hiddenFieldName">Der Name des zu registrierenden ausgeblendeten Felds.</param>
        <param name="hiddenFieldInitialValue">Der Anfangswert des ausgeblendeten Felds.</param>
        <summary>Registriert ein ausgeblendetes Feld beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für ein Steuerelement, das sich in einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> -Methode, um ein ausgeblendetes Feld zu registrieren, das mit dem partiellen Seiten Rendering kompatibel ist und keine Abhängigkeiten der Microsoft AJAX-Bibliothek aufweist. Diese Methode registriert das ausgeblendete Feld, wenn sich das Steuerelement, das <xref:System.Web.UI.UpdatePanel> das Feld registriert, in einem Steuerelement befindet, das aktualisiert wird. Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> -Überladung dieser Methode, um jedes Mal ein ausgeblendetes Feld zu registrieren, wenn ein asynchrones Postback auftritt.  
  
 Verwenden Sie die <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> -Methode <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie ein ausgeblendetes Feld registrieren möchten, das sich nicht auf Teil Aktualisierungen der Seite bezieht, und wenn Sie das ausgeblendete Feld nur einmal während des ersten Seiten Rendering registrieren möchten. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> -Methode erstellt ein `input` verborgenes Element auf der gerenderten HTML-Seite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="hiddenFieldName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="control" /> befindet sich nicht in der Steuerelementstruktur der Seite.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Page ^ page, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="static member RegisterHiddenField : System.Web.UI.Page * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterHiddenField (page, hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das das ausgeblendete Feld registriert.</param>
        <param name="hiddenFieldName">Der Name des zu registrierenden ausgeblendeten Felds.</param>
        <param name="hiddenFieldInitialValue">Der Anfangswert des ausgeblendeten Felds.</param>
        <summary>Registriert ein ausgeblendetes Feld bei jedem asynchronen Postback beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> -Methode, um ein ausgeblendetes Feld zu registrieren, das mit dem partiellen Seiten Rendering kompatibel ist und keine Abhängigkeiten der Microsoft AJAX-Bibliothek aufweist. Diese Methode registriert das verborgene Feld jedes Mal, wenn ein asynchrones Postback auftritt. Zum Registrieren eines ausgeblendeten Felds für ein Steuerelement <xref:System.Web.UI.UpdatePanel> , das sich innerhalb eines-Steuer Elements befindet, sodass das Feld nur beim Aktualisieren <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> des Panels registriert wird, verwenden Sie die-Überladung dieser Methode.  
  
 Verwenden Sie die <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> -Methode <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie ein ausgeblendetes Feld registrieren möchten, das sich nicht auf Teil Aktualisierungen der Seite bezieht, und wenn Sie das ausgeblendete Feld nur einmal während des ersten Seiten Rendering registrieren möchten. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="page" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="hiddenFieldName" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterNamedClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert in einer Assembly eingebettete Clientskripts anhand des Ressourcennamens beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, um diese mit einem Steuerelement zu verwenden, das am Teilrendering von Seiten beteiligt ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Control control, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Control control, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Control ^ control, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterNamedClientScriptResource : System.Web.UI.Control * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterNamedClientScriptResource (control, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="resourceName" Type="System.String" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das das Skript registriert.</param>
        <param name="resourceName">Ein Bezeichner für die Ressource.</param>
        <summary>Registriert in einer Assembly eingebettete Clientskripts anhand des Ressourcennamens beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, um diese mit einem Steuerelement zu verwenden, das am Teilrendering von Seiten beteiligt ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Page page, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Page page, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Page,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Page ^ page, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterNamedClientScriptResource : System.Web.UI.Page * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterNamedClientScriptResource (page, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="resourceName" Type="System.String" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das das Skript registriert.</param>
        <param name="resourceName">Ein Bezeichner für die Ressource.</param>
        <summary>Registriert in einer Assembly eingebettete Clientskripts anhand des Ressourcennamens beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, um diese mit einem Steuerelement zu verwenden, das am Teilrendering von Seiten beteiligt ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterOnSubmitStatement">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert ECMAScript-Code (JavaScript), der beim Senden des Formulars ausgeführt wird.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="static member RegisterOnSubmitStatement : System.Web.UI.Control * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterOnSubmitStatement (control, type, key, script)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das die <see langword="onsubmit" />-Anweisung registriert.</param>
        <param name="type">Der Typ der Clientskriptanweisung. Dieser Parameter wird meist mithilfe des Operators typeof (C#) bzw. des Operators GetType (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für die Skriptanweisung.</param>
        <param name="script">Das zu registrierende Skript.</param>
        <summary>Registriert ECMAScript-Code (JavaScript), der beim Senden des Formulars ausgeführt wird, beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für ein Steuerelement, das mit einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements verwendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> fügt das Skript hinzu, das vor dem Senden des Formulars ausgeführt wird, sodass Sie die Übermittlung ändern oder abbrechen können.  
  
 Sie verwenden die <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> -Methode, um `onsubmit` eine-Anweisung zu rendern, die mit teilweiser Seiten Rendering kompatibel ist und keine Abhängigkeiten der Microsoft AJAX-Bibliothek aufweist. JavaScript-Code, der mit dieser Methode registriert wird, wird nur an die Seite gesendet, wenn sich das Steuerelement, das die <xref:System.Web.UI.UpdatePanel> -Anweisung registriert, in einem Steuerelement befindet, das aktualisiert wird. Um Code bei jedem asynchronen Postback zu registrieren, verwenden <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> Sie die-Überladung dieser Methode.  
  
 Verwenden Sie die-Methode <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie JavaScript-Code registrieren möchten, der sich nicht auf Teil Aktualisierungen der Seite bezieht. Wenn Sie den Code nur einmal während des ersten Seiten Rendering registrieren möchten, verwenden Sie die-Methode der-Klasse. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 Der *Skript* Parameter der <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> -Methode kann mehrere Skript Befehle enthalten, die durch Semikolons (;) getrennt sind.  
  
 Weitere Informationen zu HTML-Formularen und zum `onsubmit` -Ereignis finden Sie auf der [World Wide Web Consortium-Website (W3C)](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="type" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="control" /> befindet sich nicht in der Steuerelementstruktur der Seite.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Page page, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Page page, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="static member RegisterOnSubmitStatement : System.Web.UI.Page * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterOnSubmitStatement (page, type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das die <see langword="onsubmit" />-Anweisung registriert.</param>
        <param name="type">Der Typ der Clientskriptanweisung. Dieser Parameter wird meist mithilfe des Operators typeof (C#) bzw. des Operators GetType (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für die Skriptanweisung.</param>
        <param name="script">Das zu registrierende Skript.</param>
        <summary>Registriert ECMAScript-Code (JavaScript), der beim Senden des Formulars ausgeführt wird, beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für ein Steuerelement, das mit einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements verwendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Registrieren von JavaScript-Code mit dieser Methode wird das Skript jedes Mal eingeschlossen, wenn ein asynchrones Postback stattfindet.  
  
> [!NOTE]
>  Code aus früheren asynchronen Postbacks wird nicht entfernt. Neue asynchrone Postbacks fügen Code an einen beliebigen vorhandenen Code für die `onsubmit` Anweisung an.  
  
 Verwenden Sie die <xref:System.Web.UI.UpdatePanel> <xref:System.Web.UI.UpdatePanel> -ÜberladungdieserMethode,umCodefüreinSteuerelementzuregistrieren,dassichinnerhalbeines-SteuerElementsbefindet,sodassderCodenurregistriertwird,wenndasSteuer<xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> Element aktualisiert wird.  
  
 Verwenden Sie die-Methode <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> <xref:System.Web.UI.ClientScriptManager> der-Klasse, wenn Sie JavaScript-Code registrieren möchten, der sich nicht auf Teil Aktualisierungen der Seite bezieht. Wenn Sie den Code nur einmal während des ersten Seiten Rendering registrieren möchten, verwenden Sie die-Methode der-Klasse. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="page" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="type" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member RegisterPostBackControl : System.Web.UI.Control -&gt; unit&#xA;override this.RegisterPostBackControl : System.Web.UI.Control -&gt; unit" Usage="scriptManager.RegisterPostBackControl control" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterPostBackControl(System.Web.UI.Control)</InterfaceMember>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das für Postbacks registriert werden soll.</param>
        <summary>Registriert ein Steuerelement als Trigger für ein Postback. Diese Methode wird zum Konfigurieren von Postbacksteuerelementen in einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement verwendet, die andernfalls asynchrone Postbacks ausführen würden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A> die-Methode zum Registrieren von Post Back <xref:System.Web.UI.UpdatePanel> Steuerelementen in einem-Steuerelement als Trigger. Steuerelemente, die mit dieser Methode registriert werden, aktualisieren eine gesamte Seite, anstatt nur <xref:System.Web.UI.UpdatePanel> den Inhalt des Steuer Elements zu aktualisieren. Das Registrieren eines Postback-Steuer Elements mit dieser <xref:System.Web.UI.UpdatePanel> Methode außerhalb eines Steuer Elements hat keinen Einfluss darauf, dass diese Steuerelemente standardmäßig keine asynchronen Postbacks ausführen.  
  
 Sie können den-Typ deklarativ hinzufügen, `Triggers` indem Sie das <xref:System.Web.UI.UpdatePanel> -Element des-Steuer Elements verwenden. Verwenden Sie in Visual Studio das Dialogfeld **Update Panel Update Panel** -Auflistungs-Editor des Designers.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptControl&lt;TScriptControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterScriptControl&lt;TScriptControl&gt; (TScriptControl scriptControl) where TScriptControl : System.Web.UI.Control, System.Web.UI.IScriptControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptControl&lt;(class System.Web.UI.Control, class System.Web.UI.IScriptControl) TScriptControl&gt;(!!TScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptControl(Of TScriptControl As {Control, IScriptControl}) (scriptControl As TScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TScriptControl&gt;&#xA; where TScriptControl : System::Web::UI::Control, System::Web::UI::IScriptControl virtual void RegisterScriptControl(TScriptControl scriptControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterScriptControl : 'ScriptControl -&gt; unit (requires 'ScriptControl :&gt; System.Web.UI.Control and 'ScriptControl :&gt; System.Web.UI.IScriptControl)&#xA;override this.RegisterScriptControl : 'ScriptControl -&gt; unit (requires 'ScriptControl :&gt; System.Web.UI.Control and 'ScriptControl :&gt; System.Web.UI.IScriptControl)" Usage="scriptManager.RegisterScriptControl scriptControl" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptControl``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TScriptControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IScriptControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="scriptControl" Type="TScriptControl" />
      </Parameters>
      <Docs>
        <typeparam name="TScriptControl">Ein Steuerelement, das die <see cref="T:System.Web.UI.IScriptControl" />-Schnittstelle implementiert.</typeparam>
        <param name="scriptControl">Das zu registrierende Skriptsteuerelement.</param>
        <summary>Registriert ein Skriptsteuerelement bei der aktuellen Instanz von <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird hauptsächlich von Steuerelement Entwicklern verwendet. Ruft die <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> Methode von einem benutzerdefinierten ASP.NET AJAX-Skript Steuer `onInit` Element während des-Ereignis Handlers auf, um das Steuerelement bei der Seite zu registrieren Ein ASP.NET AJAX-Skript Steuerelement muss registriert werden, um am partiellen Seiten Rendering teilnehmen zu können.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> -Methode fügt das angegebene Extender-Steuerelement einer internen Liste von Skript Steuerelementen hinzu, <xref:System.Web.UI.Control.PreRender> die während des-Ereignisses verarbeitet werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="scriptControl" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterScriptDescriptors">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Weist das <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement an, die Klassen <see cref="T:System.Web.UI.ScriptControl" /> oder <see cref="T:System.Web.UI.ExtenderControl" /> erneut aufzurufen, um Skripts zurückzugeben, die das Clientobjekt unterstützen, das ein Clientsteuerelement, eine Clientkomponente oder ein Clientverhalten darstellt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IExtenderControl extenderControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IExtenderControl extenderControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (extenderControl As IExtenderControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IExtenderControl ^ extenderControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterScriptDescriptors : System.Web.UI.IExtenderControl -&gt; unit&#xA;override this.RegisterScriptDescriptors : System.Web.UI.IExtenderControl -&gt; unit" Usage="scriptManager.RegisterScriptDescriptors extenderControl" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extenderControl" Type="System.Web.UI.IExtenderControl" />
      </Parameters>
      <Docs>
        <param name="extenderControl">Das Extendersteuerelement, für das Skriptdeskriptoren registriert werden.</param>
        <summary>Ruft eine <see cref="T:System.Web.UI.ExtenderControl" />-Klasse erneut auf, um Instanzenskripts zurückzugeben, die für die Unterstützung des Clientobjekts gerendert werden müssen, das ein Clientsteuerelement, eine Clientkomponente oder ein Clientverhalten darstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ExtenderControl> -Klasse ruft <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> die-Methode <xref:System.Web.UI.Control.Render%2A> in der-Methode auf.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie von der <see cref="T:System.Web.UI.ExtenderControl" /> -Klasse ableiten und die <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> -Methode überschreiben, aber nicht die-Methode der-Basisklasse aufgerufen haben, müssen Sie die <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" /> -Methode aufzurufen. Dadurch kann das <see cref="T:System.Web.UI.ScriptManager" /> Steuerelement die instanzskripts, die das Client Objekt unterstützen, das das Steuerelement darstellt, Rendering.</para></block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IScriptControl scriptControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (scriptControl As IScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IScriptControl ^ scriptControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterScriptDescriptors : System.Web.UI.IScriptControl -&gt; unit&#xA;override this.RegisterScriptDescriptors : System.Web.UI.IScriptControl -&gt; unit" Usage="scriptManager.RegisterScriptDescriptors scriptControl" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptDescriptors(System.Web.UI.IScriptControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptControl" Type="System.Web.UI.IScriptControl" />
      </Parameters>
      <Docs>
        <param name="scriptControl">Das Skriptsteuerelement, für das Skriptdeskriptoren registriert werden.</param>
        <summary>Ruft eine <see cref="T:System.Web.UI.ScriptControl" />-Klasse auf, um Instanzenskripts zurückzugeben, die für die Unterstützung des Clientobjekts gerendert werden müssen, das ein Clientsteuerelement, eine Clientkomponente oder ein Clientverhalten darstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptControl> -Klasse ruft <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> die-Methode <xref:System.Web.UI.Control.Render%2A> während des-Ereignisses auf.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie von der <see cref="T:System.Web.UI.ScriptControl" /> -Klasse ableiten und die <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> -Methode überschreiben, aber nicht die-Methode der-Basisklasse aufgerufen haben, müssen Sie die <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" /> -Methode aufzurufen. Dadurch kann das <see cref="T:System.Web.UI.ScriptManager" /> Steuerelement die instanzskripts, die das Client Objekt unterstützen, das das Steuerelement darstellt, Rendering.</para></block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert einen Startskriptblock beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement und fügt den Skriptblock der Seite hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterStartupScript : System.Web.UI.Control * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterStartupScript (control, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das den Clientskriptblock registriert.</param>
        <param name="type">Der Typ des Clientskriptblocks. Dieser Parameter wird meist mithilfe des Operators typeof (C#) bzw. des Operators GetType (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für den Skriptblock.</param>
        <param name="script">Das zu registrierende Skript.</param>
        <param name="addScriptTags"><see langword="true" />, um den Skriptblock in die Tags <see langword="&lt;script&gt;" /> und <see langword="&lt;/script&gt;" /> einzuschließen, andernfalls <see langword="false" />.</param>
        <summary>Registriert einen Startskriptblock für ein Steuerelement, das sich in einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement befindet, mithilfe des <see cref="T:System.Web.UI.ScriptManager" />-Steuerelements, und fügt den Skriptblock der Seite hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie verwenden die <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> -Methode, um einen Startskript Block für eine Seite zu registrieren, die mit teilweiser Seiten Rendering kompatibel ist und keine Abhängigkeiten von Microsoft AJAX-Bibliotheken aufweist. Startskript Blöcke, die mit dieser Methode registriert werden, werden nur an die Seite gesendet, wenn sich das Steuerelement, das den Block <xref:System.Web.UI.UpdatePanel> registriert, innerhalb eines zu aktualisierenden Steuer Elements befindet. Wenn Sie bei jedem asynchronen Postback einen Startskript Block registrieren möchten, verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> -Überladung dieser Methode.  
  
 Wenn Sie ein Startskript registrieren möchten, das sich nicht auf Teil Aktualisierungen der Seite bezieht, und Sie das Skript nur einmal während des ersten Seiten Rendering registrieren möchten, verwenden Sie die <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> -Methode <xref:System.Web.UI.ClientScriptManager> der-Klasse. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 Der Skriptblock, der von der <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> -Methode gerendert wird, wird ausgeführt, wenn die Seite geladen wird, aber bevor das Client `onload` Ereignis der Seite ausgelöst wird. Startskript Blöcke befinden sich am unteren Rand der gerenderten ASP.NET-Seite direkt `</form>` vor dem-Tag.  
  
 Startskript Blöcke, die mithilfe <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> von registriert werden, werden nicht garantiert in derselben Reihenfolge ausgegeben, in der Sie registriert sind. Wenn die Reihenfolge der Startskript Blöcke wichtig ist, verwenden Sie <xref:System.Text.StringBuilder> ein-Objekt, um die Skriptblöcke in einer einzelnen Zeichenfolge zu erfassen, und registrieren Sie alle als ein einzelnes Startskript.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="type" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="control" /> befindet sich nicht in der Steuerelementstruktur der Seite.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterStartupScript : System.Web.UI.Page * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterStartupScript (page, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das den Clientskriptblock registriert.</param>
        <param name="type">Der Typ des Clientskriptblocks. Dieser Parameter wird meist mithilfe des Operators typeof (C#) bzw. des Operators GetType (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für den Skriptblock.</param>
        <param name="script">Das zu registrierende Skript.</param>
        <param name="addScriptTags"><see langword="true" />, um den Skriptblock in die Tags <see langword="&lt;script&gt;" /> und <see langword="&lt;/script&gt;" /> einzuschließen, andernfalls <see langword="false" />.</param>
        <summary>Registriert einen Startskriptblock für jedes asynchrone Postback beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement und fügt den Skriptblock der Seite hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie einen Startskript Block registrieren, der bei jedem asynchronen Postback eingeschlossen wird. Um einen Skriptblock für ein Steuerelement zu registrieren, das <xref:System.Web.UI.UpdatePanel> sich innerhalb eines-Steuer Elements befindet, sodass der Skript <xref:System.Web.UI.UpdatePanel> Block nur registriert wird, wenn <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> das Steuerelement aktualisiert wird, verwenden Sie die-Überladung dieser Methode.  
  
 Wenn Sie ein Startskript registrieren möchten, das sich nicht auf Teil Aktualisierungen der Seite bezieht, und Sie das Skript nur einmal während des ersten Seiten Rendering registrieren möchten, verwenden Sie die <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> -Methode <xref:System.Web.UI.ClientScriptManager> der-Klasse. Sie können einen Verweis auf das <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite erhalten.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="scriptManager.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Ein Objekt, das den auf der Seite zu schreibenden Inhalt des Steuerelements empfängt.</param>
        <summary>Rendert den Inhalt des <see cref="T:System.Web.UI.ScriptManager" />-Steuerelements mithilfe des angegebenen <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekts im Browser.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von Steuerelement Entwicklern verwendet, um <xref:System.Web.UI.ScriptManager> das Steuerelement zu erweitern.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, wird <see cref="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" /> die Basis Methode aufgerufen, sodass das Client Skript `Sys.WebForms.PageRequestManager` , das die Klasse definiert, auf der Seite gerendert wird.</para></block>
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveCompositeScriptReference As EventHandler(Of CompositeScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::CompositeScriptReferenceEventArgs ^&gt; ^ ResolveCompositeScriptReference;" />
      <MemberSignature Language="F#" Value="member this.ResolveCompositeScriptReference : EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; " Usage="member this.ResolveCompositeScriptReference : System.EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein zusammengesetztes Skript beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement registriert wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveScriptReference As EventHandler(Of ScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::ScriptReferenceEventArgs ^&gt; ^ ResolveScriptReference;" />
      <MemberSignature Language="F#" Value="member this.ResolveScriptReference : EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; " Usage="member this.ResolveScriptReference : System.EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein Member der <see cref="P:System.Web.UI.ScriptManager.Scripts" />-Auflistung beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement registriert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird für jedes Element der <xref:System.Web.UI.ScriptManager.Scripts%2A> Sammlung während des <xref:System.Web.UI.Control.PreRender> Ereignisses der Seite einmal ausgelöst. Verwenden Sie dieses Ereignis, um Updates auszuführen, bevor das Skript auf der Seite gerendert wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoleService">
      <MemberSignature Language="C#" Value="public System.Web.UI.RoleServiceManager RoleService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.RoleServiceManager RoleService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.RoleService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoleService As RoleServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::RoleServiceManager ^ RoleService { System::Web::UI::RoleServiceManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RoleService : System.Web.UI.RoleServiceManager" Usage="System.Web.UI.ScriptManager.RoleService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.RoleServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Web.UI.RoleServiceManager" />-Objekt ab, das der aktuellen <see cref="T:System.Web.UI.ScriptManager" />-Instanz zugeordnet ist.</summary>
        <value>Das <see cref="T:System.Web.UI.RoleServiceManager" />-Objekt für die aktuelle <see cref="T:System.Web.UI.ScriptManager" />-Instanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.RoleServiceManager> -Objekt, das von dieser Eigenschaft zurückgegeben wird, stellt den Rollen Dienst dar, der bei der Seite registriert ist. Der Rollen Dienst kann im <xref:System.Web.UI.ScriptManager> -Steuerelement oder in einem zugeordneten <xref:System.Web.UI.ScriptManagerProxy> -Steuerelement definiert werden. Sie können den ASP.NET-Rollen Dienst verwenden oder einen benutzerdefinierten Rollen Dienst verwenden. Sie können den benutzerdefinierten-Dienst im Markup hinzufügen `RoleService` , indem Sie `asp:ScriptManager` ein-Element innerhalb des-Elements auf der Seite einschließen, wie im folgenden Beispiel gezeigt:  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <RoleService Path="MyRoleService.asmx" LoadRoles="True" />  
</asp:ScriptManager>  
```  
  
 Sie können das <xref:System.Web.UI.RoleServiceManager> Objekt auch Programm gesteuert konfigurieren. Dienste werden während der <xref:System.Web.UI.ScriptManager> <xref:System.Web.UI.Control.PreRender> Lebenszyklusphase der Seite mit dem-Steuerelement registriert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptMode ScriptMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ScriptMode ScriptMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptMode As ScriptMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptMode ScriptMode { System::Web::UI::ScriptMode get(); void set(System::Web::UI::ScriptMode value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptMode : System.Web.UI.ScriptMode with get, set" Usage="System.Web.UI.ScriptManager.ScriptMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Debug- oder Releaseversionen von Clientskriptbibliotheken gerendert werden.</summary>
        <value>Der Enumerationswert, der den aktuellen Modus angibt. Die Standardeinstellung ist <see cref="F:System.Web.UI.ScriptMode.Auto" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.ScriptMode%2A> -Eigenschaft gibt an <xref:System.Web.UI.ScriptManager> , ob das Steuerelement Debug-oder Releaseversionen von Client Skript Bibliotheken Rendering soll. Dieser Wert kann durch Werte ersetzt werden, die in der Konfigurationsdatei und in der Page-Direktive festgelegt sind.  
  
 In der folgenden Tabelle sind die gültigen Werte für diese Eigenschaft aufgeführt.  
  
|Wert|Definition|  
|-----------|----------------|  
|<xref:System.Web.UI.ScriptMode.Auto>|Debugversionen von Client Skript Bibliotheken werden auf der Webseite verwendet, wenn `retail` das-Attribut des [Bereitstellungs](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms228298(v%3dvs.100)) Konfigurations Elements auf `false`festgelegt ist. Andernfalls werden die Releaseversionen von Client Skript Bibliotheken verwendet.|  
|<xref:System.Web.UI.ScriptMode.Inherit>|Wenn diese Eigenschaft auf <xref:System.Web.UI.ScriptManager.ScriptMode%2A> die-Eigenschaft <xref:System.Web.UI.ScriptManager> des-Objekts angewendet wird, ist dieser <xref:System.Web.UI.ScriptMode.Auto>Wert mit identisch.|  
|<xref:System.Web.UI.ScriptMode.Debug>|Debugversionen von Client Skript Bibliotheken werden auf der Webseite verwendet, es `retail` sei denn, das-Attribut des [Bereitstellungs](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms228298(v%3dvs.100)) Konfigurations Elements ist auf `true`festgelegt.|  
|<xref:System.Web.UI.ScriptMode.Release>|Releaseversionen von Client Skript Bibliotheken werden auf der Webseite verwendet, es `retail` sei denn, das-Attribut des [Bereitstellungs](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms228298(v%3dvs.100)) Konfigurations Elements ist auf `false`festgelegt.|  
  
> [!NOTE]
>  Das `debug` -Attribut der [@ Page](https://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) -Direktive wirkt sich nicht auf AJAX-aktivierte ASP.NET-Anwendungen aus. Das <xref:System.Web.UI.ScriptManager> <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> -Steuerelement verwendet nur die Einstellungen in der Datei "Web. config" <xref:System.Web.UI.ScriptManager.ScriptMode%2A> und in den Eigenschaften und, um zu bestimmen, ob Debugskripts gerengt  
  
 Weitere Informationen finden Sie unter [Übersicht über das Debuggen und verfolgen von AJAX-Anwendungen](https://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <see cref="P:System.Web.UI.ScriptManager.ScriptMode" />-Eigenschaft ist keiner der <see cref="T:System.Web.UI.ScriptMode" />-Werte.</exception>
        <altmember cref="T:System.Web.UI.ScriptMode" />
      </Docs>
    </Member>
    <Member MemberName="ScriptPath">
      <MemberSignature Language="C#" Value="public string ScriptPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptPath : string with get, set" Usage="System.Web.UI.ScriptManager.ScriptPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This property is obsolete. Set the Path property on each individual ScriptReference instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Stammpfad des zum Erstellen der Pfade zu ASP.NET AJAX und benutzerdefinierten Skriptdateien verwendeten Verzeichnisses ab oder legt diesen fest.</summary>
        <value>Das Verzeichnis, in dem Skriptdateien gespeichert werden. Der Standardwert ist eine leere Zeichenfolge (""), die als relativer Pfad interpretiert wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.ScriptPath%2A> -Eigenschaft ermöglicht es Ihnen, für alle Skriptblöcke auf der Seite eine absolute, relative oder Anwendungs relative URL anzugeben. Dies schließt benutzerdefinierte Skriptblöcke und Skriptblöcke von Drittanbietern ein, die <xref:System.Web.UI.ScriptManager> bei der aktuellen Instanz registriert sind. Die <xref:System.Web.UI.ScriptManager.ScriptPath%2A> -Eigenschaft wird in der Regel deklarativ als Attribut `ScriptManager` eines-Elements auf der Seite festgelegt, kann aber auch im Code festgelegt werden.  
  
 Wenn das `path` -Attribut oder <xref:System.Web.UI.ScriptReferenceBase.Path%2A> die-Eigenschaft für ein <xref:System.Web.UI.ScriptReference> -Objekt in <xref:System.Web.UI.ScriptManager.Scripts%2A> der Auflistung festgelegt wird, überschreibt <xref:System.Web.UI.ScriptManager.ScriptPath%2A> der Pfad Wert <xref:System.Web.UI.ScriptReference> den Wert für diese Instanz.  
  
 Wenn kein <xref:System.Web.UI.ScriptReferenceBase.Path%2A> Wert angegeben wird, durch <xref:System.Web.UI.ScriptManager> sucht das-Steuerelement das von der <xref:System.Web.UI.ScriptManager.ScriptPath%2A> -Eigenschaft definierte Verzeichnis und löst Skript Verweise <xref:System.Web.UI.ScriptReference.Name%2A> durch <xref:System.Web.UI.ScriptReference.Assembly%2A> ihre-oder-Eigenschaften auf.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceMapping">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptResourceMapping ScriptResourceMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.UI.ScriptResourceMapping ScriptResourceMapping" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptResourceMapping" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ScriptResourceMapping As ScriptResourceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::UI::ScriptResourceMapping ^ ScriptResourceMapping { System::Web::UI::ScriptResourceMapping ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ScriptResourceMapping : System.Web.UI.ScriptResourceMapping" Usage="System.Web.UI.ScriptManager.ScriptResourceMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptResourceMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.ScriptResourceMapping" />-Objekt ab.</summary>
        <value>Ein <see cref="T:System.Web.UI.ScriptResourceMapping" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die statische <xref:System.Web.UI.ScriptManager.ScriptResourceMapping%2A> -Eigenschaft gibt <xref:System.Web.UI.ScriptResourceMapping> ein-Objekt zurück, das eine Auflistung von Zuordnungen enthalten kann, die den Speicherort der Skript Ressource darstellen (Skript Umleitung). Diese Auflistung von Zuordnungen kann basierend auf Namen oder Name-/assemblypaaren zugeordnet werden, und Sie kann <xref:System.Web.UI.ScriptResourceDefinition> auf ein-Objekt verweisen.  
  
   
  
## Examples  
 In den folgenden Beispielen wird gezeigt, wie <xref:System.Web.UI.ScriptResourceDefinition> ein-Objekt hinzugefügt wird, <xref:System.Web.UI.ScriptManager> auf das ein-Objekt verweisen kann. Fügen Sie der Datei Global. asax im `Application_Start` -Ereignis den folgenden Code hinzu.  
  
```csharp  
ScriptResourceDefinition myScriptResDef = new ScriptResourceDefinition();  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js";  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js";  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js";  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js";  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", null, myScriptResDef);  
```  
  
```vb  
Dim myScriptResDef As New ScriptResourceDefinition()  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js"  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js"  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js"  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js"  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", Nothing, myScriptResDef)  
```  
  
 Fügen Sie im Markup für eine ASP.net-Web Forms Seite (ASPX-Datei) das folgende Markup innerhalb des `form` -Elements und vor allen Elementen oder Code hinzu, die das jQuery-Skript verwenden.  
  
```  
<asp:ScriptManager ID="sm1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="jquery"/>  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scripts">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptReferenceCollection Scripts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ScriptReferenceCollection Scripts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Scripts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scripts As ScriptReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptReferenceCollection ^ Scripts { System::Web::UI::ScriptReferenceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scripts : System.Web.UI.ScriptReferenceCollection" Usage="System.Web.UI.ScriptManager.Scripts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.ScriptReferenceCollection" />-Objekt ab, das die <see cref="T:System.Web.UI.ScriptReference" />-Objekte enthält, die jeweils eine für den Client gerenderte Skriptdatei darstellen.</summary>
        <value>Das <see cref="T:System.Web.UI.ScriptReferenceCollection" />-Objekt der Instanz von <see cref="T:System.Web.UI.ScriptManager" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.ScriptReferenceCollection> Objekt, das von dieser Eigenschaft zurückgegeben wird, ist <xref:System.Web.UI.ScriptReference> eine Auflistung von-Objekten, von denen jedes eine Skriptdatei darstellt. Die Auflistung enthält Verweise auf alle Skriptdateien, die ASP.net für AJAX-Funktionen benötigt, und auf benutzerdefinierte Skriptdateien. Benutzerdefinierte Skriptdateien zum Rendering können im <xref:System.Web.UI.ScriptManager> -Steuerelement oder in einem zugeordneten <xref:System.Web.UI.ScriptManagerProxy> -Steuerelement definiert werden.  
  
 Sie können der Auflistung in Markup Skriptdateien hinzufügen, indem `asp:ScriptReference` Sie einem `Scripts` Knoten innerhalb des `asp:ScriptManager` -Elements auf der Seite Elemente hinzufügen, wie im folgenden Beispiel gezeigt.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="Script.js" />  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 Sie können der <xref:System.Web.UI.ScriptManager.Scripts%2A> Auflistung auch <xref:System.Web.UI.ScriptReference> Programm gesteuert ein-Objekt hinzufügen, indem <xref:System.Collections.ObjectModel.Collection%601.Add%2A> Sie die- <xref:System.Web.UI.ScriptReferenceCollection> Methode der-Klasse verwenden.  
  
 Das <xref:System.Web.UI.ScriptManager> -Steuerelement registriert Skriptdateien während des <xref:System.Web.UI.Control.PreRender> -Ereignisses des-Steuer Elements.  
  
 Die <xref:System.Web.UI.ScriptManager.Scripts%2A> Sammlung enthält nicht die wichtigsten Microsoft AJAX-Bibliotheks Skripts. Die Skripts in der Kernbibliothek werden automatisch gerendert. Sie müssen nicht mit dem <xref:System.Web.UI.ScriptManager> -Steuerelement registriert werden. Wenn Sie jedoch ein Kern Skript oder ein Steuerelement Skript überschreiben und eine andere Version des Skripts ersetzen möchten, können Sie die-Version der <xref:System.Web.UI.ScriptManager.Scripts%2A> -Auflistung hinzufügen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Services">
      <MemberSignature Language="C#" Value="public System.Web.UI.ServiceReferenceCollection Services { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ServiceReferenceCollection Services" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Services" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Services As ServiceReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ServiceReferenceCollection ^ Services { System::Web::UI::ServiceReferenceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Services : System.Web.UI.ServiceReferenceCollection" Usage="System.Web.UI.ScriptManager.Services" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ServiceReferenceCollectionEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ServiceReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.ServiceReferenceCollection" />-Objekt mit einem <see cref="T:System.Web.UI.ServiceReference" />-Objekt für jeden Webdienst ab, den ASP.NET auf dem Client für AJAX-Funktionen verfügbar macht.</summary>
        <value>Das <see cref="T:System.Web.UI.ServiceReferenceCollection" />-Objekt für die aktuelle <see cref="T:System.Web.UI.ScriptManager" />-Instanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.ServiceReferenceCollection> Objekt, das von dieser Eigenschaft zurückgegeben wird, ist <xref:System.Web.UI.ServiceReference> eine Auflistung von-Objekten, von denen jedes einen Webdienst darstellt, <xref:System.Web.UI.ScriptManager> der beim-Steuerelement registriert ist. Sie können Dienste im <xref:System.Web.UI.ScriptManager> -Steuerelement oder in einem zugeordneten <xref:System.Web.UI.ScriptManagerProxy> -Steuerelement definieren.  
  
 Sie können der Auflistung in Markup Dienste hinzufügen, indem Sie `asp:ServiceReference` einem- `Services` Element innerhalb der `asp:ScriptManager` -Instanz auf der Seite ein-Element hinzufügen, wie im folgenden Beispiel gezeigt.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Services>  
    <asp:ServiceReference Path="Service.asmx" />  
  </Services>  
</asp:ScriptManager>  
```  
  
 Sie können der <xref:System.Web.UI.ScriptManager.Services%2A> Auflistung auch Programm gesteuert <xref:System.Web.UI.ServiceReference> <xref:System.Web.UI.ServiceReferenceCollection> mithilfe der <xref:System.Collections.ObjectModel.Collection%601.Add%2A> -Methode der-Klasse ein-Objekt hinzufügen.  
  
 Dienste werden <xref:System.Web.UI.ScriptManager> während der <xref:System.Web.UI.Control.PreRender> Lebenszyklusphase der Seite beim registriert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetFocus">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Legt den Browserfokus auf das angegebene Steuerelement fest.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFocus (clientID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::String ^ clientID);" />
      <MemberSignature Language="F#" Value="member this.SetFocus : string -&gt; unit" Usage="scriptManager.SetFocus clientID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">Die ID des Steuerelements, das den Fokus empfangen soll.</param>
        <summary>Legt den Browserfokus auf das über die ID angegebene Steuerelement fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode funktioniert wie <xref:System.Web.UI.Page.SetFocus%2A> die-Methode <xref:System.Web.UI.Page> für die-Klasse. Beide Methoden machen das Steuerelement mit der angegebenen ID und dem aktiven Steuerelement auf der Webseite. Die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode <xref:System.Web.UI.ScriptManager> der-Klasse wird verwendet, um den Fokus während eines asynchronen Postbacks festzulegen. Während Postbacks und beim ersten Rendern der Seite ruft die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode die <xref:System.Web.UI.Page.SetFocus%2A> -Methode der <xref:System.Web.UI.Page> -Klasse auf.  
  
 Wenn mehrere Aufrufe an die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode vorhanden sind, erhält das-Steuerelement im letzten Aufruf den Fokus.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.String)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.SetFocus : System.Web.UI.Control -&gt; unit" Usage="scriptManager.SetFocus control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das den Fokus erhalten soll.</param>
        <summary>Legt den Browserfokus auf das angegebene Steuerelement fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode funktioniert wie <xref:System.Web.UI.Page.SetFocus%2A> die-Methode <xref:System.Web.UI.Page> für die-Klasse. Beide Methoden machen das angegebene Steuerelement für das aktive Steuerelement auf der Webseite. Die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode <xref:System.Web.UI.ScriptManager> der-Klasse wird verwendet, um den Fokus während eines asynchronen Postbacks festzulegen. Während Postbacks und beim ersten Rendern der Seite ruft die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode die <xref:System.Web.UI.Page.SetFocus%2A> -Methode der <xref:System.Web.UI.Page> -Klasse auf.  
  
 Wenn mehrere Aufrufe an die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode vorhanden sind, erhält das im letzten Aufruf angegebene Steuerelement den Fokus.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SupportsPartialRendering">
      <MemberSignature Language="C#" Value="public bool SupportsPartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsPartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportsPartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsPartialRendering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportsPartialRendering : bool with get, set" Usage="System.Web.UI.ScriptManager.SupportsPartialRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Client das Teilrendering von Seiten unterstützt.</summary>
        <value><see langword="true" />, wenn der Client das Teilrendering von Seiten unterstützt, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> -Eigenschaft auf `false`festgelegt ist <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> , gibt `false`die-Eigenschaft zurück.  
  
 Die Standardüberprüfung, um zu bestimmen, ob das Teil Rendering von `true` Seiten unterstützt wird, wird zurückgegeben, wenn die folgenden Bedingungen zutreffen:  
  
-   Der <xref:System.Web.Configuration.HttpCapabilitiesBase.W3CDomVersion%2A> Eigenschafts Wert muss größer oder gleich 1,0 sein.  
  
-   Der <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> Eigenschafts Wert muss größer oder gleich 1,0 sein.  
  
-   Der <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> -Eigenschafts Wert muss auf `true`festgelegt werden.  
  
 Wenn die <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> Eigenschaft explizit festgelegt wird, werden diese Überprüfungen nicht verwendet.  
  
 Steuerelement Entwickler sollten die <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> -Eigenschaft verwenden, um zu bestimmen, ob Sie das Teil Rendering von Seiten unterstützen sollen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />-Eigenschaft wurde auf <see langword="false" /> und die <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />-Eigenschaft auf <see langword="true" /> festgelegt.  
  
- oder - 
Die <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />-Eigenschaft wurde nach dem <see cref="E:System.Web.UI.Control.Init" />-Ereignis festgelegt.</exception>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean Implements IPostBackDataHandler.LoadPostData" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Web.UI.IPostBackDataHandler.LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection) = System::Web::UI::IPostBackDataHandler::LoadPostData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Der Schlüsselbezeichner für das Steuerelement.</param>
        <param name="postCollection">Eine Auflistung aller eingehenden POST-Daten.</param>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />.</summary>
        <returns><see langword="true" />, wenn sich der Zustand des <see cref="T:System.Web.UI.ScriptManager" />-Steuerelements aufgrund eines Postbacks geändert hat, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.ScriptManager>-Instanz in eine <xref:System.Web.UI.IPostBackDataHandler>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostDataChangedEvent () Implements IPostBackDataHandler.RaisePostDataChangedEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() = System::Web::UI::IPostBackDataHandler::RaisePostDataChangedEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.ScriptManager>-Instanz in eine <xref:System.Web.UI.IPostBackDataHandler>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Eine Zeichenfolge von Schlüssel-Wert-Paaren, die den Verlaufszustand der Webseite darstellen.</param>
        <summary>Ermöglicht es dem <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, ein Postbackereignis zu verarbeiten und den Verlaufszustand der Webseite zu laden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.IsSecureConnection">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IScriptManager.IsSecureConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IScriptManager.IsSecureConnection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#IsSecureConnection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSecureConnection As Boolean Implements IScriptManager.IsSecureConnection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Web::UI::IScriptManager::IsSecureConnection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.IScriptManager.IsSecureConnection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManager.IsSecureConnection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue) = System::Web::UI::IScriptManager::RegisterArrayDeclaration;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="arrayName">To be added.</param>
        <param name="arrayValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterClientScriptBlock;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url) = System::Web::UI::IScriptManager::RegisterClientScriptInclude;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="url">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName) = System::Web::UI::IScriptManager::RegisterClientScriptResource;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="resourceName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterDispose">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript) = System::Web::UI::IScriptManager::RegisterDispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterDispose(System.Web.UI.Control,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="disposeScript">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode) = System::Web::UI::IScriptManager::RegisterExpandoAttribute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="controlId">To be added.</param>
        <param name="attributeName">To be added.</param>
        <param name="attributeValue">To be added.</param>
        <param name="encode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterHiddenField">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldValue) = System::Web::UI::IScriptManager::RegisterHiddenField;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="hiddenFieldName">To be added.</param>
        <param name="hiddenFieldValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script) = System::Web::UI::IScriptManager::RegisterOnSubmitStatement;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterPostBackControl">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterPostBackControl(System::Web::UI::Control ^ control) = System::Web::UI::IScriptManager::RegisterPostBackControl;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterStartupScript">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterStartupScript;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.SetFocusInternal">
      <MemberSignature Language="C#" Value="void IScriptManager.SetFocusInternal (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.SetFocusInternal(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#SetFocusInternal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub SetFocusInternal (clientID As String) Implements IScriptManager.SetFocusInternal" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.SetFocusInternal(System::String ^ clientID) = System::Web::UI::IScriptManager::SetFocusInternal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManager.SetFocusInternal(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Web.UI.ScriptManager.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Überschreibt die <see cref="P:System.Web.UI.Control.Visible" />-Eigenschaft, die von der <see cref="T:System.Web.UI.Control" />-Basisklasse geerbt wurde, um das Festlegen dieses Werts zu verhindern.</summary>
        <value><see langword="true" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.Control.Visible%2A> -Eigenschaft wird in der <xref:System.Web.UI.ScriptManager> -Klasse überschrieben, um das Festlegen dieses Werts zu verhindern. Wenn <xref:System.NotImplementedException> dieser Eigenschaft ein Wert zugewiesen wird, tritt ein Fehler auf.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Ein Wert wird der <see cref="P:System.Web.UI.ScriptManager.Visible" />-Eigenschaft zugewiesen.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

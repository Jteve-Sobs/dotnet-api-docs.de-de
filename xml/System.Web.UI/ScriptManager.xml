<Type Name="ScriptManager" FullName="System.Web.UI.ScriptManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a9923660b999d64c484a67da8c88091d677e8639" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34317743" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ScriptManager : System.Web.UI.Control, System.Web.UI.IPostBackDataHandler, System.Web.UI.IPostBackEventHandler, System.Web.UI.IScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ScriptManager extends System.Web.UI.Control implements class System.Web.UI.IPostBackDataHandler, class System.Web.UI.IPostBackEventHandler, class System.Web.UI.IScriptManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ScriptManager&#xA;Inherits Control&#xA;Implements IPostBackDataHandler, IPostBackEventHandler, IScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptManager : System::Web::UI::Control, System::Web::UI::IPostBackDataHandler, System::Web::UI::IPostBackEventHandler, System::Web::UI::IScriptManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IScriptManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Scripts")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(EmbeddedResourceFinder), "System.Web.Resources.ScriptManager.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Verwaltet ASP.NET-AJAX-Skriptbibliotheken und -Skriptdateien, das Teilrendering von Seiten sowie die Generierung von Clientproxyklassen für Web- und Anwendungsdienste.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Thema:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [Teilrendering von Seiten](#partial_page_rendering)  
  
-   [Verwenden das ScriptManager-Steuerelement mit Masterseiten, Benutzersteuerelemente und anderen untergeordneten Komponenten](#using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components)  
  
-   [Skriptverwaltung und Registrierung](#script_management_and_registration)  
  
-   [Webdienstverweisen](#web_service_references)  
  
-   [Lokalisierung](#localization)  
  
-   [Fehlerbehandlung](#error_handling)  
  
-   [Deklarationssyntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Die <xref:System.Web.UI.ScriptManager> Steuerelement ist wesentlich für Ajax-Funktionen in ASP.NET. Das Steuerelement verwaltet alle ASP.NET Ajax-Ressourcen auf einer Seite. Hierin ist das Herunterladen von Microsoft Ajax-Bibliothek-Skripts an den Browser und Koordinieren von Updates Teilrendering von Seiten, die mit aktiviert sind <xref:System.Web.UI.UpdatePanel> Steuerelemente. Darüber hinaus die <xref:System.Web.UI.ScriptManager> Steuerelement können Sie die folgenden Schritte ausführen:  
  
-   Registrieren von Skripts, die mit Aktualisierungen von Teilseiten kompatibel ist. Um Abhängigkeiten zwischen Ihres Skripts und die Core-Bibliothek zu verwalten, wird jedem Skript, das Sie registrieren, nach dem Skript Microsoft Ajax-Bibliothek geladen.  
  
-   Geben Sie, ob freigegeben oder Debug-Skripts werden an den Browser gesendet.  
  
-   Bereitstellen von Zugriff auf die Methoden des Webdiensts aus einem Skript durch die Registrierung von Webdiensten mit der <xref:System.Web.UI.ScriptManager> Steuerelement.  
  
-   Ermöglichen Sie den Zugriff auf ASP.NET, Rolle und Profil Anwendungsdienste von Clientskripts, durch die Registrierung dieser Dienste mit der <xref:System.Web.UI.ScriptManager> Steuerelement.  
  
-   Aktivieren Sie die kulturspezifische Anzeige von ECMAScript (JavaScript), und die Funktionen im Browser.  
  
-   Zugriff auf Lokalisierungsressourcen für Dateien mit eingebetteten Skripts oder eigenständige Skriptdateien mithilfe der <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> Eigenschaft von der <xref:System.Web.UI.ScriptReference> Steuerelement.  
  
-   Registrieren von Serversteuerelemente, implementieren die <xref:System.Web.UI.IExtenderControl> oder <xref:System.Web.UI.IScriptControl> kommuniziert mit der <xref:System.Web.UI.ScriptManager> steuern, sodass von Clientkomponenten und Verhaltensweisen Skript gerendert wird.  
  
<a name="partial_page_rendering"></a>   
## <a name="partial-page-rendering"></a>Teilrendering von Seiten  
 Die Möglichkeit einer ASP.NET-Seite Teilrendering von Seiten unterstützt, wird von den folgenden Faktoren gesteuert:  
  
-   Die <xref:System.Web.UI.ScriptManager> des Steuerelements <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> Eigenschaft muss `true` (Standardwert).  
  
-   Es muss mindestens eine <xref:System.Web.UI.UpdatePanel> Steuerelement auf der Seite.  
  
-   Die <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> Eigenschaft muss `true` (Standardwert). Wenn die <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> Eigenschaft nicht explizit festgelegt wurde, dessen Wert basiert auf Browserfunktionen.  
  
 Sie können den Wert der überschreiben die <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> Eigenschaft zur Laufzeit während oder vor der Seite <xref:System.Web.UI.Control.Init> Ereignis. Wenn Sie versuchen, diese Eigenschaft nach der Seite ändern <xref:System.Web.UI.Control.Init> Ereignis aufgetreten ist, ein <xref:System.InvalidOperationException> Ausnahme wird ausgelöst.  
  
 Wenn das Teilrendering von Seiten unterstützt wird, die <xref:System.Web.UI.ScriptManager> Steuerelement rendert Skript aus, um asynchrone Postbacks und Aktualisierungen von Teilseiten zu aktivieren. Die Bereiche der Seite zu aktualisierende bezeichneten mit <xref:System.Web.UI.UpdatePanel> Steuerelemente. Die <xref:System.Web.UI.ScriptManager> Steuerelement behandelt die asynchronen Postbacks und aktualisiert nur die Bereiche der Seite, die aktualisiert werden. Weitere Informationen über Teilrendering von Seiten finden Sie unter [Übersicht über Teilrendering von Seiten](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49). Weitere Informationen zu den Bedingungen, die dazu führen, ein Update dass finden Sie unter [UpdatePanel Control Overview](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a).  
  
<a name="using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components"></a>   
## <a name="using-the-scriptmanager-control-with-master-pages-user-controls-and-other-child-components"></a>Verwenden das ScriptManager-Steuerelement mit Masterseiten, Benutzersteuerelemente und anderen untergeordneten Komponenten  
 Eine Seite darf nur ein <xref:System.Web.UI.ScriptManager> Steuerelement in der Hierarchie. Dienste und Skripts für geschachtelte Seiten, Steuerelemente oder Komponenten registrieren, wenn die übergeordnete Seite verfügt bereits über eine <xref:System.Web.UI.ScriptManager> steuern, verwenden Sie die <xref:System.Web.UI.ScriptManagerProxy> Steuerelement. Weitere Informationen finden Sie unter [Verwenden des UpdatePanel-Steuerelements mit Masterseiten](http://msdn.microsoft.com/library/b1c974d5-a6b2-4bb3-a3cc-61dd9dc0e1d6)  
  
<a name="script_management_and_registration"></a>   
## <a name="script-management-and-registration"></a>Skriptverwaltung und Registrierung  
 Die <xref:System.Web.UI.ScriptManager> -Steuerelement ermöglicht es Ihnen, Skripts zu registrieren, der dann gerendert wird als Teil der Seite. Die <xref:System.Web.UI.ScriptManager> Steuerelement Registrierungsmethoden können in den folgenden drei Kategorien unterteilt werden:  
  
-   Registrierungsmethoden, die garantieren, dass Skripts Abhängigkeiten von der Microsoft Ajax-Bibliothek verwaltet werden.  
  
-   Registrierungsmethoden, die keine Microsoft Ajax-Bibliothek abhängig sind, jedoch sind kompatibel mit <xref:System.Web.UI.UpdatePanel> Steuerelemente.  
  
-   Arbeiten mit Registrierungsmethoden unterstützen, die <xref:System.Web.UI.UpdatePanel> Steuerelemente.  
  
 Weitere Informationen zum Erstellen und Verwenden von Ajax-Skript in ASP.NET finden Sie unter [Erstellen von benutzerdefinierten Client-Skripts mithilfe der Microsoft Ajax-Bibliothek](http://msdn.microsoft.com/library/285e3a65-b42e-42c5-952d-baf184057899).  
  
### <a name="registering-script-that-is-dependent-on-the-microsoft-ajax-library"></a>Registrieren von Skripts, die der Microsoft Ajax-Bibliothek abhängig ist.  
 Die folgenden Methoden können Sie um Skriptdateien auf eine Weise zu registrieren, die sicherstellt, dass alle Abhängigkeiten von der Microsoft Ajax-Bibliothek verwaltet werden.  
  
|Methode|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A>|Registriert ein Serversteuerelement, implementiert die <xref:System.Web.UI.IScriptControl> -Schnittstelle, die zum Definieren eines Objekts verwendet wird. Die <xref:System.Web.UI.ScriptManager> -Steuerelement Skripts rendert, die das Clientobjekt unterstützen.|  
|<xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A>|Registriert ein Serversteuerelement, implementiert die <xref:System.Web.UI.IExtenderControl> -Schnittstelle, die zum Definieren eines Objekts verwendet wird. Die <xref:System.Web.UI.ScriptManager> -Steuerelement Skripts rendert, die das Clientobjekt unterstützen.|  
  
### <a name="registering-partial-page-update-compatible-scripts"></a>Registrieren von kompatibel Aktualisierungsskripts Teilrendering von Seiten  
 Sie können anhand der folgenden Methoden zum Registrieren Skriptdateien, die keine Microsoft Ajax-Bibliothek abhängig sind, jedoch sind kompatibel mit <xref:System.Web.UI.UpdatePanel> Steuerelemente. Diese Methoden entsprechen ähnlichen Methoden von der <xref:System.Web.UI.ClientScriptManager> Steuerelement. Domänenmodus Rendering-Skript für die Verwendung in einer <xref:System.Web.UI.UpdatePanel> steuern, stellen Sie sicher, dass Sie die Methoden der Aufruf der <xref:System.Web.UI.ScriptManager> Steuerelement.  
  
|Methode|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A>|Fügt einen Wert in ein Array von JavaScript. Wenn das Array nicht vorhanden ist, wird er erstellt.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A>|Rendert eine `script` Element nach dem Öffnen der Seite `<form>` Tag. Das Skript wird als Zeichenfolgenparameter angegeben.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A>|Rendert eine `script` Element nach dem Öffnen der Seite `<form>` Tag. Der Inhalt eines Skripts wird angegeben, indem die `src` -Attribut auf eine URL, die in einer Skriptdatei verweist.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A>|Rendert eine `script` Element nach dem Öffnen der Seite `<form>` Tag. Der Skriptinhalt wird mit einem Ressourcennamen in einer Assembly angegeben. Die `src` -Attribut wird durch einen Aufruf an einen HTTP-Handler, die das benannte Skript ruft die von der Assembly mit einer URL automatisch aufgefüllt.|  
|<xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>|Rendert eine benutzerdefinierte Name/Wert-Paars Attributs (Expando) in das Markup für ein angegebenes Steuerelement.|  
|<xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A>|Rendert ein ausgeblendetes Feld.|  
|<xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>|Registriert ein Skript, das ausgeführt wird, als Antwort auf die `form` des Elements `submit` Ereignis. Die `onSubmit` Attribut verweist auf das angegebene Skript.|  
|<xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>|Rendert einen Startskriptblock unmittelbar vor der Seite schließenden `</form>` Tag. Das Skript zum Rendern, wird als Zeichenfolgenparameter angegeben.|  
  
 Wenn Sie Methoden zu registrieren, geben Sie einen Typ/öffentlichen/privaten Schlüsselpaars für das Skript aus. Wenn ein Skript mit den gleichen Typ/Schlüsselpaar bereits registriert ist, wird ein neues Skript nicht registriert. Auf ähnliche Weise, wenn Sie ein Skript, die bereits mit einem Typ/Ressourcennamen-Paar registrieren vorhanden, die `script` Element, das die Ressource verweist, nicht erneut hinzugefügt. Wenn Sie ein Expando-Attribut eines zuvor registrierten Attributs registrieren, wird eine Ausnahme ausgelöst. Doppelte Arraywerte-Registrierung ist zulässig.  
  
 Beim Aufrufen der <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> oder <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> -Methode, zu vermeiden, Registrieren von Skripts, die Inline-Funktionen ausgeführt wird. Registrieren Sie stattdessen Skripts, die Funktionsdefinitionen wie Ereignishandler oder benutzerdefinierte Klassendefinitionen für die Anwendung enthält.  
  
### <a name="registration-methods-for-updatepanel-controls"></a>Registrierungsmethoden für UpdatePanel-Steuerelemente  
 Sie können anhand der folgenden Methoden zum Anpassen von Aktualisierungen von Teilseiten bei Verwendung von <xref:System.Web.UI.UpdatePanel> Steuerelemente.  
  
|Methode|Definition|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>|Registriert ein Steuerelement als Trigger für asynchrone Postbacks.|  
|<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A>|Sendet während des Teilrenderings von Seiten benutzerdefinierte Daten an Steuerelemente.|  
|<xref:System.Web.UI.ScriptManager.RegisterDispose%2A>|Registriert ein Dispose-Skript für ein Steuerelement, das innerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement. Das Skript wird ausgeführt, wenn das <xref:System.Web.UI.UpdatePanel>-Steuerelement aktualisiert oder gelöscht wird. Die Dispose-Methode wird zum Clientkomponenten, die Teil der Microsoft Ajax-Bibliothek sind und deren Ressourcen freizugeben, wenn eine Komponente nicht mehr verwendet wird.|  
|<xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A>|Registriert ein Steuerelement als Trigger für ein vollständiges Postback. Diese Methode wird für Steuerelemente in verwendet ein <xref:System.Web.UI.UpdatePanel> Steuerelement, die andernfalls asynchrone Postbacks ausführen würden.|  
  
<a name="web_service_references"></a>   
## <a name="web-service-references"></a>Webdienstverweisen  
 Können Sie einen Webdienst durch das Erstellen von Clientskripts aufgerufen werden Registrieren einer <xref:System.Web.UI.ServiceReference> Objekt und das Hinzufügen, die <xref:System.Web.UI.ScriptManager.Services%2A> Auflistung von der <xref:System.Web.UI.ScriptManager> Steuerelement. Generiert eine Client-Proxy-Objekt für jeden ASP.NET <xref:System.Web.UI.ServiceReference> Objekt in der <xref:System.Web.UI.ScriptManager.Services%2A> Auflistung. Können Sie programmgesteuert hinzufügen <xref:System.Web.UI.ServiceReference> -Objekte und die <xref:System.Web.UI.ScriptManager.Services%2A> Auflistung Webdienste zur Laufzeit zu registrieren.  
  
 Weitere Informationen zum Zugreifen auf Web-Dienste im Skript finden Sie unter [Webdienste verfügbar gemacht, Clientskripts in ASP.NET AJAX](http://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8) und [Aufrufen von Webdiensten von Clientskripts in ASP.NET AJAX](http://msdn.microsoft.com/library/fc06c224-f01a-45be-94af-bd71afbc07b0).  
  
<a name="localization"></a>   
## <a name="localization"></a>Lokalisierung  
 Die <xref:System.Web.UI.ScriptManager> -Steuerelement generiert Verweise auf der gerenderten Seite, die auf die entsprechende lokalisierte Skriptdateien verweisen, die beiden Skriptdateien, die in Assemblys oder eigenständige Skriptdateien eingebettet sind.  
  
 Wenn die <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> -Eigenschaftensatz auf `true`, die <xref:System.Web.UI.ScriptManager> Steuerelement ruft die lokalisierten Ressourcen (z. B. lokalisierte Zeichenfolgen) für die aktuelle Kultur ab, sofern vorhanden. Die <xref:System.Web.UI.ScriptManager> Steuerelement bietet die folgenden Funktionen für die Verwendung von lokalisierter Ressourcen:  
  
-   **Skriptdateien, die in einer Assembly eingebettet sind**. Die <xref:System.Web.UI.ScriptManager> Steuerelement bestimmt die kulturspezifischen oder Fallbackkultur Skriptdatei, die an den Browser gesendet wird. Dies geschieht mithilfe der kulturspezifische <xref:System.Resources.NeutralResourcesLanguageAttribute> Assemblyattribut, die Ressourcen verpackt, wobei die Assembly und die Benutzeroberflächenkultur des Browsers (sofern vorhanden).  
  
-   **Eigenständige Skriptdateien**. Die <xref:System.Web.UI.ScriptManager> Steuerelement definiert die Liste der UI-Kulturen, die mithilfe von unterstützt werden die <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> Eigenschaft von der <xref:System.Web.UI.ScriptReference> Objekt.  
  
-   **Im Debugmodus**. Die <xref:System.Web.UI.ScriptManager> -Steuerelement versucht, eine kulturspezifische Skriptdatei zu rendern, die Debuginformationen enthält. Wenn die Seite im Debugmodus befindet, und die aktuelle Kultur auf En-MX festgelegt ist, rendert das Steuerelement beispielsweise eine Skriptdatei mit dem Namen wie z. B. `scriptname`.en-benannte, wenn die Datei vorhanden ist. Wenn die Datei nicht vorhanden ist, wird der Debugdatei für die entsprechende Fallbackkultur gerendert.  
  
 Weitere Informationen zum Lokalisieren von Ressourcen finden Sie unter [Lokalisieren von Ressourcen für Bibliotheken Übersicht über die Komponente](http://msdn.microsoft.com/library/e6b15435-57c1-4dd1-9bd3-5d4c509685bb).  
  
<a name="error_handling"></a>   
## <a name="error-handling"></a>Fehlerbehandlung  
 Ein Seitenfehler tritt bei asynchronen Postbacks die <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Ereignis wird ausgelöst. Wie in der Fehler auf dem Server an den Client gesendet werden, hängt die <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> -Eigenschaft, die <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> -Eigenschaft und der benutzerdefinierte Fehlerabschnitt der Datei "Web.config". Weitere Informationen finden Sie unter [Anpassen der Fehlerbehandlung für UpdatePanel Steuerelemente](http://msdn.microsoft.com/library/e15e7ffb-e4b2-4a89-b99e-16624a5861d0).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Deklarationssyntax  
  
```  
<asp:ScriptManager  
    AllowCustomErrorsRedirect="True|False"  
    AsyncPostBackErrorMessage="string"  
    AsyncPostBackTimeout="integer"  
    AuthenticationService-Path="uri"  
    EnablePageMethods="True|False"  
    EnablePartialRendering="True|False"  
    EnableScriptGlobalization="True|False"  
    EnableScriptLocalization="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    LoadScriptsBeforeUI="True|False"  
    OnAsyncPostBackError="AsyncPostBackError event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnResolveScriptReference="ResolveScriptReference event handler"  
    OnUnload="Unload event handler"  
    ProfileService-LoadProperties="string"  
    ProfileService-Path="uri"  
    RoleService-LoadRoles="True|False"  
    RoleService-Path="uri"  
    runat="server"  
    ScriptMode="Auto|Inherit|Debug|Release"  
    ScriptPath="string"  
    SkinID="string"  
    SupportsPartialRendering="True|False"  
    Visible="True|False"  
>  
        <AuthenticationService  
            Path="uri"  
        />  
        <ProfileService  
            LoadProperties="string"  
            Path="uri"  
        />  
        <RoleService  
            LoadRoles="True|False"  
            Path="uri"  
        />  
        <Scripts>  
            <asp:ScriptReference  
                Assembly="string"  
                IgnoreScriptPath="True|False"  
                Name="string"  
                NotifyScriptLoaded="True|False"  
                Path="string"  
                ResourceUICultures="string"  
                ScriptMode="Auto|Debug|Inherit|Release"  
            />  
        </Scripts>  
        <Services>  
            <asp:ServiceReference  
                InlineScript="True|False"  
                Path="string"  
            />  
        </Services>  
</asp:ScriptManager>  
```  
  
   
  
## Examples  
 Die folgenden Beispiele zeigen verschiedene Szenarien für die Verwendung der <xref:System.Web.UI.ScriptManager> Steuerelement.  
  
 **Aktualisierungen von Teilseiten aktivieren**  
  
 Das folgende Beispiel zeigt, wie Sie die <xref:System.Web.UI.ScriptManager> Steuerelement um teilaktualisierungen von Seiten zu aktivieren. In diesem Beispiel wird eine <xref:System.Web.UI.WebControls.Calendar> und ein <xref:System.Web.UI.WebControls.DropDownList> im Steuerelement enthalten sind ein <xref:System.Web.UI.UpdatePanel> Steuerelement. Wird standardmäßig der Wert von der <xref:System.Web.UI.UpdatePanel.UpdateMode%2A> Eigenschaft ist <xref:System.Web.UI.UpdatePanelUpdateMode.Always>, und der Wert des der <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> Eigenschaft ist `true`. Aus diesem Grund verursachen die untergeordneten Steuerelemente des Bereichs ein asynchrones Postbacks.  
  
 [!code-aspx-csharp[System.Web.UI.UpdatePanel#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/CS/UpdatePanelExample1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.UpdatePanel#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/VB/UpdatePanelExample1VB.aspx#1)]  
  
 **Behandlung von Fehlern beim Update Teilrendering von Seiten und Registrieren von Skripts**  
  
 Im folgende Beispiel wird gezeigt, wie benutzerdefinierte Fehlerbehandlung während des Teilrenderings von Seiten Updates bereitgestellt. Tritt ein Fehler während des Teilrenderings von Seiten-Updates, wird standardmäßig ein JavaScript-Meldungsfeld angezeigt. In diesem Beispiel wird veranschaulicht, wie benutzerdefinierte Fehlerbehandlung mit einem Handler für das <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Ereignis, und durch Festlegen der <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> Eigenschaft im Ereignishandler. Sie können auch Festlegen der <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> Eigenschaft, um anzugeben, wie der benutzerdefinierte Fehlerabschnitt der Datei "Web.config" verwendet wird, tritt ein Fehler während der Aktualisierungen von Teilseiten. In diesem Beispiel wird der Standardwert der <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> Eigenschaft wird verwendet. Dies bedeutet, dass wenn die Datei "Web.config" ein Element enthält, wird dieses Element bestimmt, wie Fehler angezeigt werden. Weitere Informationen finden Sie unter [CustomErrors Element ((ASP.NET Settings Schema)](http://msdn.microsoft.com/library/288c32e2-df1f-4548-abda-de6b4cb989a6).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/VB/default.aspx#1)]  
  
 **Globalisieren von Datum und Uhrzeit, die im Browser angezeigt werden**  
  
 Im folgende Beispiel wird gezeigt, wie zum Festlegen der <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> Eigenschaft, sodass diese Clientskripts eine kulturspezifische Datums- und Uhrzeitangabe im Browser angezeigt werden kann. Im Beispiel die `Culture` der Direktive ist-Attributsatz zur `auto`. Folglich bestimmt die erste Sprache, die in die aktuellen Browsereinstellungen angegeben ist, der Kultur und Benutzeroberflächenkultur für die Seite. Weitere Informationen finden Sie unter [Vorgehensweise: Festlegen der Kultur und Benutzeroberflächenkultur für die Globalisierung von ASP.NET-Webseiten](http://msdn.microsoft.com/library/76091f86-f967-4687-a40f-de87bd8cc9a0).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/VB/default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ScriptManagerProxy" />
    <altmember cref="T:System.Web.UI.UpdatePanel" />
    <altmember cref="T:System.Web.UI.ClientScriptManager" />
    <altmember cref="T:System.Web.UI.ScriptMode" />
    <altmember cref="T:System.Web.UI.ScriptReference" />
    <altmember cref="T:System.Web.UI.ServiceReference" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.ScriptManager" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die internen Felder, mit denen, die <xref:System.Web.UI.ScriptManager> Steuerelement, um die Seite ", Steuerelement und Bereitstellungsinformationen zu verfolgen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHistoryPoint">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt einen Verlaufspunkt und fügt diesen dem Verlaufsstapel des Browsers hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese methodenüberladungen können Sie zum Definieren von Serverstatus und optional den Titel des Verlaufseintrags im Browser. Wenn Sie einen Verlaufspunkt erstellen, Serialisierungs- und verschlüsselte Daten werden an die URL der Webseite angefügt, und ein Eintrag im Verlaufsstapel des Browsers enthalten ist. Sie können die Zustandsdaten verwenden, die Seite neu zu erstellen, wenn alle nachfolgenden Server Navigationsereignis ausgelöst wird. Weitere Informationen finden Sie unter [verwalten Verlauf mithilfe von Server Browsersteuerelemente](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (System.Collections.Specialized.NameValueCollection state, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(class System.Collections.Specialized.NameValueCollection state, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.Collections.Specialized.NameValueCollection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (state As NameValueCollection, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::Collections::Specialized::NameValueCollection ^ state, System::String ^ title);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="state">Eine Auflistung von Schlüssel-Wert-Paaren, die Daten für den Zustand enthalten.</param>
        <param name="title">Der Text, der dem Verlaufsstapel des Browsers als Titel für diesen Zustand hinzugefügt wird.</param>
        <summary>Erstellt einen Verlaufspunkt und fügt diesen unter Verwendung der angegebenen Zustandsdatenauflistung und des Zustandstitels dem Verlaufsstapel des Browsers hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um einen Verlaufspunkt zu erstellen, wenn mehr als ein Schlüssel/Wert-Paar für die Zustandsdaten gespeichert werden soll. Wenn Sie einen Verlaufspunkt erstellen, Serialisierungs- und verschlüsselte Daten werden an die URL der Webseite angefügt, und ein Eintrag im Verlaufsstapel des Browsers enthalten ist. Wenn die `title` Parameter ist `null`, der Titel der Webseite wird als Titel des Zustandseintrags im Verlaufsstapel verwendet.  
  
 Sie können die Zustandsdaten verwenden, die Seite neu zu erstellen, wenn alle nachfolgenden Server Navigationsereignis ausgelöst wird. Weitere Informationen finden Sie unter [verwalten Verlauf mithilfe von Server Browsersteuerelemente](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Schlüsselteil des Schlüssel-Wert-Paars, das den Zustand der Webseite bezeichnet.</param>
        <param name="value">Der Wertteil des Schlüssel-Wert-Paars, das den Zustand der Webseite bezeichnet.</param>
        <summary>Erstellt einen Verlaufspunkt und fügt diesen unter Verwendung des angegebenen Zustandsschlüssels und Zustandswerts dem Verlaufsstapel des Browsers hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um einen Verlaufspunkt zu erstellen, wenn Sie nur einen Wert zum Identifizieren des Zustands speichern möchten. Wenn Sie einen Verlaufspunkt erstellen, Serialisierungs- und verschlüsselte Daten werden an die URL der Webseite angefügt, und ein Eintrag im Verlaufsstapel des Browsers enthalten ist. Der Titel der Webseite wird als Titel des Zustandseintrags im Verlaufsstapel verwendet.  
  
 Sie können die Zustandsdaten verwenden, die Seite neu zu erstellen, wenn alle nachfolgenden Server Navigationsereignis ausgelöst wird. Weitere Informationen finden Sie unter [verwalten Verlauf mithilfe von Server Browsersteuerelemente](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value, System::String ^ title);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Schlüsselteil des Schlüssel-Wert-Paars, das den Zustand der Webseite bezeichnet.</param>
        <param name="value">Der Wertteil des Schlüssel-Wert-Paars, das den Zustand der Webseite bezeichnet.</param>
        <param name="title">Der Text, der dem Verlaufsstapel des Browsers als Titel für diesen Zustand hinzugefügt wird.</param>
        <summary>Erstellt einen Verlaufspunkt und fügt diesen unter Verwendung des angegebenen Zustandsschlüssels, Zustandswerts und Zustandstitels dem Verlaufsstapel des Browsers hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um einen Verlaufspunkt zu erstellen, wenn Sie einen Wert zum Identifizieren der Zustand und einen Titel für den Zustand speichern möchten. Wenn Sie einen Verlaufspunkt erstellen, Serialisierungs- und verschlüsselte Daten werden an die URL der Webseite angefügt, und ein Eintrag im Verlaufsstapel des Browsers enthalten ist. Wenn die `title` Parameter ist `null`, der Titel der Webseite wird als Titel des Zustandseintrags im Verlaufsstapel verwendet.  
  
 Sie können die Zustandsdaten verwenden, die Seite neu zu erstellen, wenn alle nachfolgenden Server Navigationsereignis ausgelöst wird. Weitere Informationen finden Sie unter [verwalten Verlauf mithilfe von Server Browsersteuerelemente](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly AjaxFrameworkAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly AjaxFrameworkAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AjaxFrameworkAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ AjaxFrameworkAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die AJAX-Frameworkassembly ab, die von Komponenten auf der Seite verwendet wird.</summary>
        <value>Die AJAX-Frameworkassembly.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AjaxFrameworkMode As AjaxFrameworkMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AjaxFrameworkMode AjaxFrameworkMode { System::Web::UI::AjaxFrameworkMode get(); void set(System::Web::UI::AjaxFrameworkMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AjaxFrameworkMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, wie Clientskripts der Microsoft Ajax-Clientbibliothek auf dem Client eingeschlossen werden, oder legt den Wert fest.</summary>
        <value>Ein <see cref="T:System.Web.UI.AjaxFrameworkMode" />-Enumerationswert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> Eigenschaft, können alle Microsoft Ajax-Skript-Dateien, alle Microsoft Ajax-Skriptdateien zu deaktivieren oder einzelne Skriptdateien explizit einzuschließen.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie zum Festlegen der <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> Eigenschaft `Explicit` um anzugeben, dass Skripts explizit angegeben werden können.  
  
```  
<asp:ScriptManager ID="sm1" AjaxFrameworkMode="Explicit" runat="server">   
<Scripts>   
    <asp:ScriptReference Name="MicrosoftAjaxCore.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxComponentModel.js" />    
    <asp:ScriptReference Name="MicrosoftAjaxSerialization.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxNetwork.js" />       
</Scripts>   
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.AjaxFrameworkMode" />
      </Docs>
    </Member>
    <Member MemberName="AllowCustomErrorsRedirect">
      <MemberSignature Language="C#" Value="public bool AllowCustomErrorsRedirect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCustomErrorsRedirect" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowCustomErrorsRedirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowCustomErrorsRedirect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, ob bei einem Fehler während des asynchronen Postbacks der benutzerdefinierte Fehlerabschnitt der Datei "Web.config" verwendet wird, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn zum Bestimmen des Fehlerverhaltens bei asynchronen Postbacks die benutzerdefinierte Fehlereinstellung in der Datei "Web.config" verwendet wird, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Ereignis wird ausgelöst, wenn ein Seitenfehler bei asynchronen Postbacks. Fehler auf dem Server an den Client gesendet werden, hängt die <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> -Eigenschaft, die <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> -Eigenschaft und der benutzerdefinierte Fehlerabschnitt der Datei "Web.config".  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AsyncPostBackError As EventHandler(Of AsyncPostBackErrorEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::AsyncPostBackErrorEventArgs ^&gt; ^ AsyncPostBackError;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt bei einem Seitenfehler während eines asynchronen Postbacks auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Ereignis wird ausgelöst, wenn ein Seitenfehler bei asynchronen Postbacks. Fehler auf dem Server an den Client gesendet werden, hängt die <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> -Eigenschaft, die <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> -Eigenschaft und der benutzerdefinierte Fehlerabschnitt der Datei "Web.config".  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie behandelt die <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Ereignis als festzulegen der <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> Eigenschaft (die an den Client gesendet wird), um die Fehlermeldung des Server-Ausnahme.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackErrorMessage">
      <MemberSignature Language="C#" Value="public string AsyncPostBackErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Fehlermeldung ab, die bei einem Serverausnahmefehler während eines asynchronen Postbacks an den Client gesendet wird, oder legt diese fest.</summary>
        <value>Die Fehlermeldung. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Ereignis wird ausgelöst, wenn ein Seitenfehler bei asynchronen Postbacks. Fehler auf dem Server an den Client gesendet werden, hängt die <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> -Eigenschaft, die <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> -Eigenschaft und der benutzerdefinierte Fehlerabschnitt der Datei "Web.config".  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie behandelt die <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Ereignis als festzulegen der <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> Eigenschaft (die an den Client gesendet wird), um die Fehlermeldung des Server-Ausnahme.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackSourceElementID">
      <MemberSignature Language="C#" Value="public string AsyncPostBackSourceElementID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackSourceElementID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncPostBackSourceElementID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackSourceElementID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManagerInternal.AsyncPostBackSourceElementID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die eindeutige ID des Steuerelements ab, das das asynchrone Postback verursacht hat.</summary>
        <value>Die eindeutige ID eines Steuerelements, wenn das Steuerelement über eine ID verfügt, andernfalls eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID%2A> -Eigenschaft enthält den Wert, der die Steuerelement-ID, die das asynchrone Postback verursacht hat, die in der folgenden Werte sind möglich:  
  
-   Ein Postback aus einem Steuerelement, das innerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement, dessen <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> -Eigenschaftensatz auf `true` (Standard).  
  
-   Ein Postback aus einem Steuerelement, das einen Trigger für eine <xref:System.Web.UI.UpdatePanel> Steuerelement.  
  
-   Ein Postback aus einem Steuerelement, das durch den Aufruf registriert ist die <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> Methode der <xref:System.Web.UI.ScriptManager> Steuerelement.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackTimeout">
      <MemberSignature Language="C#" Value="public int AsyncPostBackTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AsyncPostBackTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AsyncPostBackTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(90)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die Zeit in Sekunden vor dem Timeout asynchroner Postbacks angibt, wenn keine Antwort empfangen wird, oder legt diesen fest.</summary>
        <value>Eine Ganzzahl, die das Timeout in Sekunden darstellt. Der Standardwert ist 90 Sekunden.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationService">
      <MemberSignature Language="C#" Value="public System.Web.UI.AuthenticationServiceManager AuthenticationService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.AuthenticationServiceManager AuthenticationService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AuthenticationService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthenticationService As AuthenticationServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AuthenticationServiceManager ^ AuthenticationService { System::Web::UI::AuthenticationServiceManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AuthenticationServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Web.UI.AuthenticationServiceManager" />-Objekt ab, das der aktuellen <see cref="T:System.Web.UI.ScriptManager" />-Instanz zugeordnet ist.</summary>
        <value>Das <see cref="T:System.Web.UI.AuthenticationServiceManager" />-Objekt für die aktuelle <see cref="T:System.Web.UI.ScriptManager" />-Instanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.AuthenticationServiceManager> von dieser Eigenschaft zurückgegebene Objekt stellt den Authentifizierungsdienst, der mit der Seite registriert ist. Der Authentifizierungsdienst kann definiert werden, der <xref:System.Web.UI.ScriptManager> Steuerelement oder einem zugeordneten <xref:System.Web.UI.ScriptManagerProxy> Steuerelement.  
  
 Sie können den Authentifizierungsdienst verwenden oder ein benutzerdefinierten Authentifizierungsdiensts. Sie können den benutzerdefinierten Dienst im Markup hinzufügen, indem Sie z. B. ein `AuthenticationService` Element innerhalb der `asp:ScriptManager` Element auf der Seite, wie im folgenden Beispiel gezeigt.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <AuthenticationService Path="MyAuthenticationService.asmx" />  
</asp:ScriptManager>  
```  
  
 Sie können auch programmgesteuert konfigurieren, die <xref:System.Web.UI.AuthenticationServiceManager> Objekt. Services registriert werden, die <xref:System.Web.UI.ScriptManager> Steuerelement während der Seite <xref:System.Web.UI.Control.PreRender> Lebenszyklus-Phase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientNavigateHandler">
      <MemberSignature Language="C#" Value="public string ClientNavigateHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientNavigateHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ClientNavigateHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientNavigateHandler As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientNavigateHandler { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Methode ab, die das Ereignis [Sys.Application.navigate](http://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) auf dem Client verarbeitet, oder legt diesen fest.</summary>
        <value>Der Name der Methode, die die [Sys.Application.navigate] behandelt (http://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) Ereignis auf dem Client.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositeScript">
      <MemberSignature Language="C#" Value="public System.Web.UI.CompositeScriptReference CompositeScript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.CompositeScriptReference CompositeScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.CompositeScript" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompositeScript As CompositeScriptReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::CompositeScriptReference ^ CompositeScript { System::Web::UI::CompositeScriptReference ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.CompositeScriptReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf das zusammengesetzte Skript ab, das die Webseite unterstützt.</summary>
        <value>Ein Verweis auf das zusammengesetzte Skript.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter [Kombinieren von Clientskripts in ein zusammengesetztes Skript](http://msdn.microsoft.com/library/d0f608d0-b4c8-4795-990b-ede68c1239b3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyPageUrl">
      <MemberSignature Language="C#" Value="public virtual string EmptyPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyPageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EmptyPageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EmptyPageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EmptyPageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Web.UI.Design.UrlEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine URL zu einer leeren Webseite ab oder legt sie fest.</summary>
        <value>Die URL, die verwendet werden soll, wenn die Zielwebseite leer ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.EmptyPageUrl%2A> Eigenschaft unterstützt die Ajax-Browserverlauf.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdn">
      <MemberSignature Language="C#" Value="public bool EnableCdn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdn" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdn" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdn { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob auf der aktuellen Seite Clientskriptverweise aus CDN-Pfaden (Content Delivery Network) geladen werden.</summary>
        <value>
          <see langword="true" />, wenn Clientskriptverweise aus CDN-Pfaden geladen werden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie diese Eigenschaft nicht auf `true` , wenn Sie festlegen, <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> auf `true` bereits.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdnFallback">
      <MemberSignature Language="C#" Value="public bool EnableCdnFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdnFallback" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdnFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdnFallback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdnFallback { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aktiviert die lokale Kopie eines Skripts, die geladen werden soll, falls das CDN (Content Delivery Network) nicht verfügbar ist.</summary>
        <value>
          <see langword="true" />, wenn der Wert des Fallback-CDN aktiviert ist; andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHistory">
      <MemberSignature Language="C#" Value="public bool EnableHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHistory" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableHistory" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableHistory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableHistory { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Webseite die Verwaltung von Verlaufspunkten unterstützt, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Webseite das Hinzufügen von Verlaufspunkten zum Verlaufsstapel des Browsers unterstützt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.ScriptManager.EnableHistory%2A> Eigenschaft zum Aktivieren der Verwaltung der Verlauf auf einer Webseite.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePageMethods">
      <MemberSignature Language="C#" Value="public bool EnablePageMethods { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePageMethods" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePageMethods" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePageMethods As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePageMethods { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob öffentliche statische Seitenmethoden auf einer ASP.NET-Seite von Clientskripts aufgerufen werden können, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn statische Seitenmethoden auf einer ASP.NET-Seite von Clientskripts als Webmethoden aufgerufen werden können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können statische Seitenmethoden auf einer ASP.NET-Seite hinzufügen und als Webmethoden markieren. Sie können dann diese Methoden aus einem Skript aufrufen, als wären sie Teil eines Webdiensts, jedoch ohne eine eigene ASMX-Datei erstellen. Zum Erstellen von Webmethoden auf einer Seite Importieren der <xref:System.Web.Services> Namespace und fügen eine <xref:System.Web.Services.WebMethodAttribute> -Attribut auf jede statische Methode, die Sie verfügbar machen möchten. Die Methoden müssen als öffentlich gekennzeichnet werden.  
  
 Weitere Informationen finden Sie unter [Webdienste verfügbar gemacht, Clientskripts in ASP.NET AJAX](http://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePartialRendering">
      <MemberSignature Language="C#" Value="public bool EnablePartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePartialRendering { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der das Teilrendering einer Seite ermöglicht, wodurch Sie Bereiche der Seite mithilfe von <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelementen einzeln aktualisieren können, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn das Teilrendering aktiviert ist und Aktualisierungen vollständiger Seiten unterdrückt werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auch wenn die <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> Eigenschaft `true`, Teilrendering von Seiten nicht auftreten. Der Browser unterstützt möglicherweise nicht Teilrendering von Seiten, oder die <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> -Eigenschaftensatz auf `false`.  
  
 Sie können den Wert der überschreiben die <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> Eigenschaft zur Laufzeit während oder vor der Seite <xref:System.Web.UI.Control.Init> Ereignis. Wenn Sie versuchen, diese Eigenschaft nach der Seite ändern <xref:System.Web.UI.Control.Init> Ereignis aufgetreten ist, ein <xref:System.InvalidOperationException> Ausnahme wird ausgelöst.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />-Eigenschaft wird nach dem <see cref="E:System.Web.UI.Control.Init" />-Ereignis der Seite festgelegt.</exception>
        <altmember cref="T:System.Web.UI.UpdatePanel" />
        <altmember cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="EnableScriptGlobalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptGlobalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptGlobalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptGlobalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptGlobalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptGlobalization { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement Skripts rendert, die das Analysieren und Formatieren kulturspezifischer Informationen unterstützen, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn kulturspezifische Informationen angezeigt werden können, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> -Eigenschaftensatz auf `true`, globalisierte ECMAScript (JavaScript)-Funktionen, z. B. die Methode kulturspezifische Informationen angezeigt. Die Kultur kann im Browser, in Servercode oder in der Konfigurationsdatei der Website festgelegt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableScriptLocalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptLocalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptLocalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptLocalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptLocalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptLocalization { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement lokalisierte Versionen von Skriptdateien rendert, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn lokalisierte Skriptdateien gerendert werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> -Eigenschaftensatz auf `true`, die <xref:System.Web.UI.ScriptManager> Objekt abrufen Skriptdateien für die aktuelle Kultur aus, wenn sie vorhanden sind. Z. B. Angeben einer Seite möglicherweise eine Skriptdatei mit dem Namen CustomScript.js. Wenn die Kultur fr-CA festgelegt ist die <xref:System.Web.UI.ScriptManager> Objekt wird zum Abrufen von einer Skriptdatei mit dem Namen CustomScript.fr-CA.js versucht.  
  
> [!NOTE]
>  Um zu verhindern, dass eine Skriptdatei gerenderte zwei Mal die <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> Eigenschaft darf nicht geändert werden, während eines asynchronen Postbacks.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSecureHistoryState">
      <MemberSignature Language="C#" Value="public bool EnableSecureHistoryState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSecureHistoryState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableSecureHistoryState" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableSecureHistoryState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableSecureHistoryState { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Zeichenfolge für den Verlaufszustand verschlüsselt werden soll, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Zeichenfolge für den Verlaufszustand verschlüsselt werden soll, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  Diese Eigenschaft sollte ***nie*** festgelegt werden, um `false` auf einer Website für die Produktion.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptManager GetCurrent (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.ScriptManager GetCurrent(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetCurrent(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::ScriptManager ^ GetCurrent(System::Web::UI::Page ^ page);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">Die Seiteninstanz, von der der <see cref="T:System.Web.UI.ScriptManager" /> abgerufen werden soll.</param>
        <summary>Ruft die Instanz von <see cref="T:System.Web.UI.ScriptManager" /> für ein angegebenes <see cref="T:System.Web.UI.Page" />-Objekt ab.</summary>
        <returns>Die aktuelle Instanz von <see cref="T:System.Web.UI.ScriptManager" /> für das ausgewählte <see cref="T:System.Web.UI.Page" />-Objekt oder <see langword="null" />, wenn keine Instanz definiert ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese statische Methode, um zu bestimmen, ob eine <xref:System.Web.UI.ScriptManager> -Steuerelement ist, auf einer Seite oder die Eigenschaften und Methoden für den Zugriff auf eine <xref:System.Web.UI.ScriptManager> steuern, wenn Sie nicht ihre-ID kennen  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredArrayDeclarations">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredArrayDeclarations" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredArrayDeclarations () As ReadOnlyCollection(Of RegisteredArrayDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredArrayDeclaration ^&gt; ^ GetRegisteredArrayDeclarations();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von ECMAScript-Arraydeklarationen (JavaScript) ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die die Arraydeklarationen enthält.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterArrayDeclaration" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredClientScriptBlocks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredClientScriptBlocks" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredClientScriptBlocks () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredClientScriptBlocks();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von Clientskriptblöcken ab, die vorher beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement registriert wurden.</summary>
        <returns>Eine generische Auflistung, die Clientskriptblöcke enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Clientskriptblöcken registriert werden, die <xref:System.Web.UI.ScriptManager> -Steuerelement für die Verwendung mit einem Steuerelement, das innerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredDisposeScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredDisposeScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredDisposeScripts () As ReadOnlyCollection(Of RegisteredDisposeScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredDisposeScript ^&gt; ^ GetRegisteredDisposeScripts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von <see langword="dispose" />-Skripts ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die <see langword="dispose" />-Skripts enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein `dispose` Skript ausgeführt wird, wenn die <xref:System.Web.UI.UpdatePanel> -Steuerelement aktualisiert oder gelöscht wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredExpandoAttributes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredExpandoAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredExpandoAttributes () As ReadOnlyCollection(Of RegisteredExpandoAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredExpandoAttribute ^&gt; ^ GetRegisteredExpandoAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von benutzerdefinierten Attributen (Expando-Attributen) ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die benutzerdefinierte Attribute enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein benutzerdefiniertes Attribut ist ein Name/Wert-Paar, das gelesen und vom Clientskript festgelegt werden kann.  
  
   
  
## Examples  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.RegisteredExpandoAttribute>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredHiddenFields">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredHiddenFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredHiddenFields () As ReadOnlyCollection(Of RegisteredHiddenField)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredHiddenField ^&gt; ^ GetRegisteredHiddenFields();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von ausgeblendeten Feldern ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die ausgeblendete Felder enthält.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.RegisteredHiddenField" />
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterHiddenField" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredOnSubmitStatements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredOnSubmitStatements" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredOnSubmitStatements () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredOnSubmitStatements();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von <see langword="onsubmit" />-Anweisungen ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die <see langword="onsubmit" />-Anweisungen enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein `onsubmit` -Anweisung ist ECMAScript (JavaScript), die beim Senden des Formulars ausgeführt wird.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredStartupScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredStartupScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredStartupScripts () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredStartupScripts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine schreibgeschützte Auflistung von Startskripts ab, die vorher beim <see cref="T:System.Web.UI.Page" />-Objekt registriert wurden.</summary>
        <returns>Eine generische Auflistung, die Startskripts enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einem Startskript ist die Clientskript, das mit einem Steuerelement verknüpft ist, die ausgeführt wird, wenn das Steuerelement gestartet wird.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ScriptManager.GetRegisteredStartupScripts%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStateString">
      <MemberSignature Language="C#" Value="public string GetStateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetStateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetStateString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetStateString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine Zeichenfolge mit Schlüssel-Wert-Paaren ab, die den Zustand der Webseite darstellen.</summary>
        <returns>Eine Zeichenfolge, die die Schlüssel-Wert-Paare enthält, die den Zustand der Webseite darstellen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDebuggingEnabled">
      <MemberSignature Language="C#" Value="public bool IsDebuggingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDebuggingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsDebuggingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDebuggingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDebuggingEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Debugversionen von Clientskriptbibliotheken gerendert werden.</summary>
        <value>
          <see langword="true" />, wenn die aktuelle Anforderung im Debugmodus ausgeführt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> -Eigenschaft gibt `false` Wenn eine der folgenden Bedingungen zutrifft:  
  
-   Im Element der Konfigurationsdatei die `retail` -Attributsatz zur `true`. Dies überschreibt alle anderen Einstellungen.  
  
-   Die <xref:System.Web.UI.ScriptManager.ScriptMode%2A> -Eigenschaftensatz auf `Auto` oder `Inherit`, und Debuggen ist nicht aktiviert die `compilation` Abschnitt der Datei "Web.config" Anwendungsstamm.  
  
-   Die <xref:System.Web.UI.ScriptManager.ScriptMode%2A>-Eigenschaft ist auf `Release` festgelegt.  
  
    > [!NOTE]
    >  Die `debug` Attribut der Richtlinie wirkt sich nicht auf ASP.NET Ajax-fähigen Anwendungen. Die <xref:System.Web.UI.ScriptManager> Steuerelement verwendet nur die Einstellungen in der Datei "Web.config" und in seine <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> und <xref:System.Web.UI.ScriptManager.ScriptMode%2A> Eigenschaften zu bestimmen, ob die Debug-Skripts zu rendern.  
  
 Weitere Informationen finden Sie unter [Debuggen und Tracing Ajax Applications Overview](http://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpContext.IsDebuggingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsInAsyncPostBack">
      <MemberSignature Language="C#" Value="public bool IsInAsyncPostBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInAsyncPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsInAsyncPostBack" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInAsyncPostBack As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInAsyncPostBack { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManagerInternal.IsInAsyncPostBack</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das aktuelle Postback im Teilrenderingmodus ausgeführt wird.</summary>
        <value>
          <see langword="true" />, wenn das aktuelle Postback im Teilrenderingmodus ausgeführt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> Eigenschaft in Kombination mit der <xref:System.Web.UI.Page.IsPostBack%2A> Eigenschaft zur Unterscheidung zwischen dem ersten Laden der Seite, ein Update Teilrendering von Seiten und ein Ganzseitenmodus Update im <xref:System.Web.UI.Control.Load>, <xref:System.Web.UI.Page.InitComplete>, oder <xref:System.Web.UI.Control.PreRender> Ereignisse.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="IsNavigating">
      <MemberSignature Language="C#" Value="public bool IsNavigating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNavigating" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsNavigating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNavigating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNavigating { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob gegenwärtig ein <see cref="E:System.Web.UI.ScriptManager.Navigate" />-Ereignis behandelt wird.</summary>
        <value>
          <see langword="true" />, wenn derzeit <see cref="E:System.Web.UI.ScriptManager.Navigate" /> behandelt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.ScriptManager.IsNavigating%2A> -Eigenschaft können Sie bestimmen, ob die <xref:System.Web.UI.ScriptManager.Navigate> Ereignis ausgelöst wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Die Schlüsselkennung für das Steuerelement.</param>
        <param name="postCollection">Die Auflistung aller eingehenden POST-Daten.</param>
        <summary>Liest vom Browser an den Server gesendete Formulardaten und ermittelt die Quelle des asynchronen Postbacks.</summary>
        <returns>
          <see langword="true" />, wenn sich der Zustand des <see cref="T:System.Web.UI.ScriptManager" />-Steuerelements aufgrund eines Postbacks geändert hat, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.LoadPostData%2A> Methode wird hauptsächlich von Steuerelemententwicklern verwendet, zum Erweitern der Funktionalität von der <xref:System.Web.UI.ScriptManager> Steuerelement.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadScriptsBeforeUI">
      <MemberSignature Language="C#" Value="public bool LoadScriptsBeforeUI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LoadScriptsBeforeUI" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.LoadScriptsBeforeUI" />
      <MemberSignature Language="VB.NET" Value="Public Property LoadScriptsBeforeUI As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LoadScriptsBeforeUI { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Skripts vor oder nach dem Laden von Markups für die Seitenbenutzeroberfläche geladen werden, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn Skripts vor dem Laden von Markups für die Benutzeroberfläche geladen werden, <see langword="false" />, wenn Skripts nach dem Laden von Markups für die Benutzeroberfläche geladen werden. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> Eigenschaft bestimmt, wie Skripts in der <xref:System.Web.UI.ScriptManager.Scripts%2A> Auflistung relativ zu das Markup für die Seitenbenutzeroberfläche geladen werden.  
  
 Wenn die <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> Eigenschaft ist `true`ein `script` Element gerendert wird, bevor UI-Seitenmarkup geladen wird. In diesem Szenario in Skripts, Benutzeroberflächenelemente definiert sind ist die Benutzeroberfläche voll funktionsfähig, wenn geladen. Wenn das Skript Benutzeroberflächenelemente im Markup zugreift, für die noch keine Instanzen erstellt wurden, kann jedoch ein Fehler auftreten. Um sicherzustellen, dass Elemente der Benutzeroberfläche geladen werden, bevor Sie darauf zugreifen, behandeln Sie das Ereignis für die Klasse.  
  
 Wenn die <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> Eigenschaft ist `false`ein `script` Element gerendert wird, nachdem die Seite UI Markup gerendert wird. In diesem Szenario wird die Benutzeroberfläche wird schneller geladen, aber es möglicherweise nicht voll funktionsfähig sein, wenn Skripts, die zusätzlichen Benutzeroberflächenelemente definieren Laden nicht abgeschlossen haben.  
  
 Legen Sie diese Eigenschaft nicht auf `true` , wenn Sie festlegen, <xref:System.Web.UI.ScriptManager.EnableCdn%2A> auf `true` bereits.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.Scripts" />
        <altmember cref="T:System.Web.UI.ScriptReference" />
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; Navigate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.HistoryEventArgs&gt; Navigate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.Navigate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Navigate As EventHandler(Of HistoryEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::HistoryEventArgs ^&gt; ^ Navigate;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.HistoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Benutzer im Browser auf die Schaltfläche **Zurück** oder **Weiter** klickt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Benutzer des Browsers klickt **wieder** Schaltfläche der Browser navigiert über bereits angezeigten URLs, die URLs enthalten kann, die Verlaufspunkt Daten enthalten. Wenn Clientcode in der Webseite erkennt, dass die URL Zustand Verlaufsdaten enthält, sendet er eine Anforderung auf der Seite "Server". Dies dient als ein Postbackereignis, und die <xref:System.Web.UI.ScriptManagerProxy> Webserversteuerelement löst die `Navigate` Ereignis. Sie können dieses Ereignis behandeln und neu erstellen die Seite entsprechend den Anforderungen der Anwendung mithilfe der Statusdaten, die übergeben wird mit dem Ereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAsyncPostBackError">
      <MemberSignature Language="C#" Value="protected internal virtual void OnAsyncPostBackError (System.Web.UI.AsyncPostBackErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnAsyncPostBackError(class System.Web.UI.AsyncPostBackErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnAsyncPostBackError (e As AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnAsyncPostBackError(System::Web::UI::AsyncPostBackErrorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.AsyncPostBackErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Fehlerereignisdaten.</param>
        <summary>Löst das <see cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Ereignis wird ausgelöst, wenn ein Seitenfehler bei asynchronen Postbacks. Fehler auf dem Server an den Client gesendet werden, hängt die <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> -Eigenschaft, die <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> -Eigenschaft und der benutzerdefinierte Fehlerabschnitt der Datei "Web.config".  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie behandelt die <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Ereignis als festzulegen der <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> Eigenschaft (die an den Client gesendet wird), um die Fehlermeldung des Server-Ausnahme.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.Init" />-Ereignis aus und stellt sicher, dass auf der Seite nur ein einziges <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement vorhanden ist.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Auf der Seite sind mehrere Instanzen von <see cref="T:System.Web.UI.ScriptManager" /> vorhanden.</exception>
        <block subset="none" type="overrides">
          <para>Wenn Sie diese Methode überschreiben, rufen Sie die grundlegende <see cref="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" /> Methode, sodass Skriptdateien für Teilrendering von Seiten richtig behandelt werden.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.PreRender" />-Ereignis aus und registriert Skriptdateien und Dienste für Teilaktualisierungen von Seiten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informationen über DOM finden Sie unter der [Document Objekt Model (DOM) Level 1-Spezifikation](http://go.microsoft.com/fwlink/?LinkId=73305) auf der Website des World Wide Web Consortium (W3C).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Browser, der die Teilanforderung der Seite gesendet hat, unterstützt nicht mindestens DOM Level 1.0.</exception>
        <block subset="none" type="overrides">
          <para>Wenn Sie diese Methode überschreiben, rufen Sie die grundlegende <see cref="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" /> Methode, sodass Skripts Blöcke und Dienste für das Teilrendering von Seiten richtig behandelt werden.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveCompositeScriptReference (System.Web.UI.CompositeScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveCompositeScriptReference(class System.Web.UI.CompositeScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveCompositeScriptReference(System.Web.UI.CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveCompositeScriptReference (e As CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveCompositeScriptReference(System::Web::UI::CompositeScriptReferenceEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.CompositeScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein Objekt, das den Verweis auf das zusammengesetzte Skript darstellt.</param>
        <summary>Löst das <see cref="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResolveScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveScriptReference (System.Web.UI.ScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveScriptReference(class System.Web.UI.ScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveScriptReference(System.Web.UI.ScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveScriptReference (e As ScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveScriptReference(System::Web::UI::ScriptReferenceEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.ScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein Objekt, das das aktuelle Skript darstellt.</param>
        <summary>Löst das <see cref="E:System.Web.UI.ScriptManager.ResolveScriptReference" />-Ereignis für jeden Skriptverweis aus, der vom <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement verwaltet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird aufgerufen, indem Sie die <xref:System.Web.UI.ScriptManager.OnPreRender%2A> Ereignishandler, d. h. jeweils einmal für jeden <xref:System.Web.UI.ScriptReference> in der <xref:System.Web.UI.ScriptManager.Scripts%2A> Auflistung.  
  
 Die <xref:System.Web.UI.ScriptManager.ResolveScriptReference> Ereignis wird ausgelöst, nachdem doppelte skripteinträgen behoben wurden.  
  
 Überschreiben Sie diese Methode, um das Verhalten der einzelnen Skriptblöcke beim Postback oder während des Teilrenderings von Seiten Updates auswirken.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProfileService">
      <MemberSignature Language="C#" Value="public System.Web.UI.ProfileServiceManager ProfileService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ProfileServiceManager ProfileService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ProfileService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProfileService As ProfileServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ProfileServiceManager ^ ProfileService { System::Web::UI::ProfileServiceManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ProfileServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Web.UI.ProfileServiceManager" />-Objekt ab, das der aktuellen <see cref="T:System.Web.UI.ScriptManager" />-Instanz zugeordnet ist.</summary>
        <value>Das <see cref="T:System.Web.UI.ProfileServiceManager" />-Objekt für die aktuelle <see cref="T:System.Web.UI.ScriptManager" />-Instanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ProfileServiceManager> von dieser Eigenschaft zurückgegebene Objekt stellt Profildienst, die mit der Seite registriert ist. Profildienst kann definiert werden, der <xref:System.Web.UI.ScriptManager> Steuerelement oder einem zugeordneten <xref:System.Web.UI.ScriptManagerProxy> Steuerelement.  
  
 Sie können die ASP.NET-Profildienst verwenden oder einen benutzerdefiniertes Profil-Dienst. Sie können den benutzerdefinierten Dienst im Markup hinzufügen, indem Sie z. B. eine `ProfileService` Element innerhalb der `asp:ScriptManager` Element auf der Seite, wie im folgenden Beispiel gezeigt.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <ProfileService LoadProperties="propertyA,propertyB"  
    Path="MyProfileService.asmx" />  
</asp:ScriptManager>  
```  
  
 Sie können auch programmgesteuert konfigurieren, die <xref:System.Web.UI.ProfileServiceManager> Objekt. Services registriert werden, die <xref:System.Web.UI.ScriptManager> Steuerelement während der Seite <xref:System.Web.UI.Control.PreRender> Lebenszyklus-Phase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Eine Zeichenfolge von Schlüssel-Wert-Paaren, die den Verlaufszustand der Webseite darstellen.</param>
        <summary>Verarbeitet ein Postbackereignis, das vom <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement ausgelöst wurde, und lädt den Verlaufszustand der Webseite.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostDataChangedEvent ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostDataChangedEvent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löst Ereignisse für das <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement aus, wenn es ein Postback an den Server ausführt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.RaisePostDataChangedEvent%2A> Methode wird hauptsächlich von Steuerelemententwicklern verwendet, zum Erweitern der Funktionalität von der <xref:System.Web.UI.ScriptManager> Steuerelement. Für die standardmäßige Implementierung des der <xref:System.Web.UI.ScriptManager> -Steuerelement, werden keine Ereignisse ausgelöst.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterArrayDeclaration">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert eine ECMAScript-Arraydeklaration (JavaScript) beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt das Array der Seite hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das das Array registriert.</param>
        <param name="arrayName">Der Name des zu registrierenden Arrays.</param>
        <param name="arrayValue">Der zu registrierende Arraywert bzw. die zu registrierenden Arraywerte.</param>
        <summary>Registriert eine ECMAScript-Arraydeklaration (JavaScript) beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt das Array der Seite hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> Methode, um ein Array der Client-Skript zu registrieren, die kompatibel mit Teilrendering von Seiten und weist keine Abhängigkeiten auf Microsoft Ajax-Bibliothek. Diese Methode registriert das Array bei `control` stellt ein Steuerelement, das innerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement, das aktualisiert wird. Ein Array jedes Mal verwenden, um registrieren ein asynchrones Postbacks tritt auf, die <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> Überladung dieser Methode.  
  
 Wenn Sie ein Array, das nicht beziehen sich auf den teilaktualisierungen von Seiten, und verwenden, wenn Sie das Array nur einmal während der ersten Seitenrendering registrieren möchten, registrieren möchten die <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> Methode bestimmt, ob ein Array mit dem angegebenen Namen, in der `arrayName` Parameter ist bereits registriert. Wenn also die Methode im angegebenen Werte fügt `arrayValue`. Da das Array, das zu registrierende basiert die <xref:System.Collections.ArrayList> -Klasse, Duplikate sind zulässig. Wenn ein registriertes Array mit dem Namen in `arrayName` nicht vorhanden ist, wird das Array erstellt und die Werte in `arrayValue` hinzugefügt werden.  
  
 Um Zeichenfolgenliterale in das Array einzuschließen, verwenden Sie einfache Anführungszeichen (') oder mit Escapezeichen versehen doppelte Anführungszeichen (\\") in `arrayValue`.  
  
 Beachten Sie, dass JavaScript ein Komma (,) als Trennzeichen in einem Array wird. Sie können mehrere Arraywerte geben, indem Sie eine durch Trennzeichen getrennte Zeichenfolge in `arrayValue`. Trennen von zwei Elementen in durch ein Komma `arrayValue` entspricht dem Aufrufen der <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> Methode zweimal, einmal für jedes Element.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Page page, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Page page, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Page ^ page, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das das Array registriert.</param>
        <param name="arrayName">Der Name des zu registrierenden Arrays.</param>
        <param name="arrayValue">Der zu registrierende Arraywert bzw. die zu registrierenden Arraywerte.</param>
        <summary>Registriert eine ECMAScript-Arraydeklaration (JavaScript) beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt das Array der Seite hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> Methode, um ein Array der Client-Skript zu registrieren, die kompatibel mit Teilrendering von Seiten und weist keine Abhängigkeiten auf Microsoft Ajax-Bibliothek. Diese Methode registriert das Array bei jedem asynchronen Postback. Um ein Array für ein Steuerelement zu registrieren, die innerhalb einer <xref:System.Web.UI.UpdatePanel> steuern, sodass das Array registriert ist, nur, wenn der Bereich aktualisiert wird, verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> Überladung dieser Methode.  
  
 Wenn Sie ein Array, das nicht beziehen sich auf den teilaktualisierungen von Seiten, und verwenden, wenn Sie das Array nur einmal während der ersten Seitenrendering registrieren möchten, registrieren möchten die <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAsyncPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterAsyncPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterAsyncPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterAsyncPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterAsyncPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das für asynchrone Postbacks registriert werden soll.</param>
        <summary>Registriert ein Steuerelement als Trigger für asynchrone Postbacks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> Methode ermöglicht es Ihnen Webserversteuerelemente als Trigger registriert, sodass sie statt eines synchrone Postbacks ein asynchrones Postbacks ausführen. Wenn die <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> Eigenschaft ein <xref:System.Web.UI.UpdatePanel> Steuerelement auf festgelegt ist `true` (Dies ist die Standardeinstellung), postback-Steuerelemente in einer der <xref:System.Web.UI.UpdatePanel> Steuerelement automatisch als asynchrone postback-Steuerelemente registriert sind.  
  
 Verwenden der <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> Methode beim Registrieren der Steuerelemente außerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement als Trigger für asynchrone Postbacks und den Inhalt des Update-Panels potenziell zu aktualisieren. Beim Aktualisieren einer <xref:System.Web.UI.UpdatePanel> programmgesteuert zu steuern, rufen Sie die <xref:System.Web.UI.UpdatePanel.Update%2A> Methode.  
  
 Sie können den Trigger deklarativ hinzufügen, mit der `Triggers` Element von der <xref:System.Web.UI.UpdatePanel> Steuerelement. Verwenden Sie in Visual Studio des Designers **UpdatePanelTrigger-Auflistungs-Editor** (Dialogfeld).  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie zum Aufrufen der <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> Methode zum Registrieren einer <xref:System.Web.UI.WebControls.Button> steuern, sodass er bewirkt, ein Update dass ein <xref:System.Web.UI.UpdatePanel> der Inhalt des Steuerelements. Die <xref:System.Web.UI.WebControls.Button> -Steuerelement ist nicht in der <xref:System.Web.UI.UpdatePanel> Steuerelement. Es werden zwei Schaltflächen angezeigt: `Button1` und `Button2`. `Button1` aktualisiert den Inhalt des Bereichs, und `Button2` aktualisiert die ganze Seite.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager1VB.aspx#1)]  
  
 Im folgende Beispiel wird gezeigt, wie zum Aufrufen der <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> Methode, um ein Benutzer registrieren zu steuern, sodass er bewirkt, dass ein Update von einer <xref:System.Web.UI.UpdatePanel> der Inhalt des Steuerelements. Das erste Beispiel zeigt eine Seite mit dem Benutzersteuerelement. Das zweite Beispiel zeigt das Benutzersteuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager2CS.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager2VB.aspx#2)]  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Das registrierte Steuerelement implementiert nicht die Schnittstellen <see cref="T:System.Web.UI.INamingContainer" />, <see cref="T:System.Web.UI.IPostBackDataHandler" /> oder <see cref="T:System.Web.UI.IPostBackEventHandler" />.</exception>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
        <altmember cref="M:System.Web.UI.UpdatePanel.Update" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert einen Clientskriptblock beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt der Seite dann den Skriptblock hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das den Clientskriptblock registriert.</param>
        <param name="type">Der Typ des Clientskriptblocks. Dieser Parameter wird meist mithilfe des Operators <see langword="typeof" /> (C#) bzw. des Operators <see langword="GetType" /> (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für den Skriptblock.</param>
        <param name="script">Das Skript.</param>
        <param name="addScriptTags">
          <see langword="true" />, um den Skriptblock in die Tags <see langword="&lt;script&gt;" /> und <see langword="&lt;/script&gt;" /> einzuschließen, andernfalls <see langword="false" />.</param>
        <summary>Registriert einen Clientskriptblock beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt der Seite dann den Skriptblock hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> Methode, um einen Clientskriptblock registrieren, die kompatibel mit Teilrendering von Seiten und weist keine Abhängigkeiten auf Microsoft Ajax-Bibliothek. Clientskriptblöcken, die mit dieser Methode registriert sind, werden auf der Seite gesendet nur, wenn `control` stellt ein Steuerelement, das innerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement, das aktualisiert wird. Einen Skriptblock jedes Mal verwenden, um registrieren ein asynchrones Postbacks tritt auf, die <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Überladung dieser Methode.  
  
 Wenn Sie möchten einen Skriptblock zu registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und verwenden, wenn Sie den Skriptblock nur einmal während der ersten Seitenrendering registrieren möchten die <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 Wenn `addScriptTags` ist `true`, <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> Methode fügt `<script>` Tags, um den Skriptblock. Übergeben Sie `false` ggf. erstellen `<script>` tags selbst, z. B. Wenn Sie die Attribute der bestimmten festlegen möchten `<script>` Tags. Wenn `addScriptTags` ist `false` und `script` Parameter mehrere Skriptblöcke enthält, wird eine Ausnahme ausgelöst.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> Methode fügt einen Skriptblock der Seite nach der öffnenden `<form>` Tag. Skriptblöcke werden nicht unbedingt in der gleichen Reihenfolge ausgegeben werden, in dem sie registriert sind. Wenn die Reihenfolge der Skriptblöcke wichtig ist, verketten Sie die Skriptblöcke zu einer einzelnen Zeichenfolge (z. B. mithilfe der <xref:System.Text.StringBuilder> Objekt), und registrieren Sie sie als einen einzelnen Client-Skriptblock.  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/CS/ScriptManager_RegisterClientScriptBlockCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/vb/ScriptManager_RegisterClientScriptBlockVB.aspx#1)]  
  
 [!code-xml[System.Web.UI.ScriptManager.RegisterClientScriptBlock#2](~/samples/snippets/common/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/Common/App_Data/Contacts.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Clientskriptblock <paramref name="type" /> ist <see langword="null" />.  Oder:  Das Steuerelement, das den Skriptblock registriert, ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Das Steuerelement, das den Skriptblock registriert, befindet sich nicht in der Steuerelementstruktur der Seite.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das den Clientskriptblock registriert.</param>
        <param name="type">Der Typ des Clientskriptblocks. Dieser Parameter wird meist mithilfe des Operators <see langword="typeof" /> (C#) bzw. des Operators <see langword="GetType" /> (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für den Skriptblock.</param>
        <param name="script">Das zu registrierende Skript.</param>
        <param name="addScriptTags">
          <see langword="true" />, um den Skriptblock in die Tags <see langword="&lt;script&gt;" /> und <see langword="&lt;/script&gt;" /> einzuschließen, andernfalls <see langword="false" />.</param>
        <summary>Registriert einen Clientskriptblock beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt der Seite dann den Skriptblock hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie einen Skriptblock mit dieser Methode registrieren, wird das Skript bei jedem asynchronen Postback gerendert. Um einen Skriptblock für ein Steuerelement zu registrieren, die innerhalb einer <xref:System.Web.UI.UpdatePanel> steuern, sodass Skript registriert wird nur, wenn die <xref:System.Web.UI.UpdatePanel> Steuerelement aktualisiert wird, verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Überladung dieser Methode.  
  
 Wenn Sie möchten einen Skriptblock zu registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und verwenden, wenn Sie den Skriptblock nur einmal während der ersten Seitenrendering registrieren möchten die <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Skriptblock <paramref name="type" /> ist <see langword="null" />.  Oder:  Die Seite, die den Skriptblock registriert, ist <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert eine Clientskriptdatei beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt der Seite dann einen Skriptdateiverweis hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das die Clientskriptdatei registriert.</param>
        <param name="type">Der Typ der zu registrierenden Clientskriptdatei. Dieser Parameter wird meist mithilfe des Operators "typeof" (C#) bzw. des Operators "GetType" (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für die Skriptdatei.</param>
        <param name="url">Die URL der Skriptdatei.</param>
        <summary>Registriert eine Clientskriptdatei beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für die Verwendung mit einem Steuerelement, das sich innerhalb eines <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelements befindet, und fügt der Seite dann einen Skriptdateiverweis hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> -Methode registriert eine Clientskriptdatei für eine Seite oder Teil einer Seite, die teilnimmt in Aktualisierungen von Teilseiten. Client-Skriptdateien, die mit dieser Methode registriert sind auf der Seite gesendet werden nur, wenn die `control` stellt ein Steuerelement, das innerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement, das aktualisiert wird. Verwenden, um eine Skriptdatei jedes Mal registrieren, die bei einem asynchronen Postbacks die <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> Überladung dieser Methode.  
  
 Wenn Sie möchten einen Skriptblock zu registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und verwenden, wenn Sie den Skriptblock nur einmal während der ersten Seitenrendering registrieren möchten die <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> -Methode registriert eine Clientskriptdatei auf der Seite durch Rendern einer `script` Element, dessen öffnendes-Tag enthält, eine `src` Attribut. Die `url` -Parameter zum Festlegen der `src` Attribut. Um URLs zu beheben, verwenden Sie die <xref:System.Web.UI.Control.ResolveClientUrl%2A> Methode. Diese Methode verwendet den Kontext der URL, die sie zum Auflösen des Pfads aufgerufen wird.  
  
 Sowohl die <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> und <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> Methoden Rendern Skriptdateien an den Browser. Wenn bereits ein Skript mit den gleichen Typ und Schlüssel (für eine Skriptdatei) oder desselben Typs und derselben Ressourcennamen (bei einer eingebetteten Ressource) gerendert wird, wird das Skript nicht erneut gerendert.  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptInclude#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/ScriptManager_RegisterClientScriptIncludeCS.aspx#1)]  
  
 [!code-javascript[System.Web.UI.ScriptManager.RegisterClientScriptInclude#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/scripts/script_alertdiv.js#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Clientskriptdatei <paramref name="type" /> ist <see langword="null" />.  Oder:  Das Steuerelement, das die Skriptdatei registriert, ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Das Steuerelement, das die Skriptdatei registriert, befindet sich nicht in der Steuerelementstruktur der Seite.  Oder:  <paramref name="url" /> ist <see langword="null" />.  Oder:  <paramref name="url" /> ist leer.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Page page, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Page page, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das die Clientskriptdatei registriert.</param>
        <param name="type">Der Typ der zu registrierenden Clientskriptdatei. Dieser Parameter wird meist mithilfe des Operators "typeof" (C#) bzw. des Operators "GetType" (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für die Skriptdatei.</param>
        <param name="url">Die URL der Skriptdatei.</param>
        <summary>Registriert das Clientskript bei jedem asynchronen Postback beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement und fügt der Seite dann einen Skriptdateiverweis hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie eine Skriptdatei mit dieser Methode registrieren, wird das Skript bei jedem asynchronen Postback gerendert. Eine Skriptdatei für ein Steuerelement zu registrieren, die innerhalb einer <xref:System.Web.UI.UpdatePanel> steuern, sodass Skript registriert wird nur, wenn die <xref:System.Web.UI.UpdatePanel> Steuerelement aktualisiert wird, verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> Überladung dieser Methode.  
  
 Wenn Sie möchten einen Skriptblock zu registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und verwenden, wenn Sie den Skriptblock nur einmal während der ersten Seitenrendering registrieren möchten die <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Clientskriptdatei <paramref name="type" /> ist <see langword="null" />.  Oder:  Die Seite, die die Skriptdatei registriert, ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="url" /> ist <see langword="null" />.  Oder:  <paramref name="url" /> ist leer.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert das in einer Assembly eingebettete Clientskript beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, um dieses mit einem Steuerelement zu verwenden, das am Teilrendering von Seiten beteiligt ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das das Skript registriert.</param>
        <param name="type">Der Typ des Clientskripts. Dieser Parameter wird meist mithilfe des Operators "typeof" (C#) bzw. des Operators "GetType" (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="resourceName">Ein Bezeichner für die Ressource.</param>
        <summary>Registriert das in einer Assembly eingebettete Clientskript beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, um dieses mit einem Steuerelement zu verwenden, das am Teilrendering von Seiten beteiligt ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> Methode, um ein Skript zu registrieren, die kompatibel mit Teilrendering von Seiten und weist keine Abhängigkeiten auf Microsoft Ajax-Bibliothek. Registrierte Skriptressourcen, die mit dieser Methode registriert sind nur, wenn `control` stellt ein Steuerelement, das innerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement, das aktualisiert wird. Ein Skript jedes Mal verwenden, um registrieren ein asynchrones Postbacks tritt auf, die <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Überladung dieser Methode.  
  
 Wenn Sie möchten einen Skriptblock zu registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und verwenden, wenn Sie den Skriptblock nur einmal während der ersten Seitenrendering registrieren möchten die <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> Methode wird verwendet, wenn Ressourcen aus Assemblys, die über einen HTTP-Handler zugegriffen werden. Diese Methode schließt den Inhalt der Ressourcen-URL in einem `script` Element.  
  
 Sowohl die <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> und die <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> -Methode laden Skriptdateien in den Browser. Wenn ein Skript mit den gleichen Typ und Schlüssel (für eine Skriptdatei) oder desselben Typs und derselben Ressourcennamen (bei einer eingebetteten Ressource) bereits geladen ist, wird das Skript nicht erneut geladen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Clientressource <paramref name="type" /> ist <see langword="null" />.  \- oder - Steuerelements, das das Skript registriert wird <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Das Steuerelement, das das Skript registriert, befindet sich nicht in der Steuerelementstruktur der Seite.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Page page, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Page page, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Page ^ page, Type ^ type, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das das Skript registriert.</param>
        <param name="type">Der Typ des Clientskripts. Dieser Parameter wird meist mithilfe des Operators "typeof" (C#) bzw. des Operators "GetType" (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="resourceName">Ein Bezeichner für die Ressource.</param>
        <summary>Registriert eine in einer Assembly eingebettete Clientskriptdatei bei jedem asynchronen Postback beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie eine Skriptdatei mit dieser Methode registrieren, wird das Skript bei jedem asynchronen Postback gerendert. Um ein Skript für ein Steuerelement zu registrieren, die in eine <xref:System.Web.UI.UpdatePanel> steuern, sodass das Skript registriert wird nur, wenn die <xref:System.Web.UI.UpdatePanel> Steuerelement aktualisiert wird, verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%29> Überladung dieser Methode.  
  
 Wenn Sie möchten einen Skriptblock zu registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und verwenden, wenn Sie den Skriptblock nur einmal während der ersten Seitenrendering registrieren möchten die <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Clientressource <paramref name="type" /> ist <see langword="null" />.  \- oder - Seite, die das Skript registriert wird <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterDataItem">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sendet während des Teilrenderings von Seiten benutzerdefinierte Daten an Steuerelemente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das die Daten empfängt.</param>
        <param name="dataItem">Die Daten, die an das Steuerelement gesendet werden.</param>
        <summary>Sendet während des Teilrenderings von Seiten benutzerdefinierte Daten an ein Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> Methode zum Senden von Daten vom Server an den Client bei asynchronen Postbacks, unabhängig davon, ob das Steuerelement, das Empfangen von Daten innerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> Methode kann nur während eines asynchronen Postbacks aufgerufen werden. Um zu bestimmen, ob ein Postback asynchron ist, verwenden die <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> Eigenschaft. Diese Methode ruft die Überladung, einen Parameter namens akzeptiert `isJsonSerialized` festgelegt `false`. Wenn der `isJsonSerialized` Parametersatz zu `false`, die Zeichenfolge nicht als JavaScript Object Notation (JSON) serialisiert. Weitere Informationen über das JSON-Format finden Sie unter der [Einführung in JSON](http://go.microsoft.com/fwlink/?LinkId=77297) Website.  
  
 Die Datenelemente, die registriert werden die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> Methode in Clientskripts während zugegriffen werden kann, und Ereignisse des Objekts. Wenn Sie diese Ereignisse behandeln, werden die benutzerdefinierten Daten in einem Ereignisargumentobjekt übergeben. Wenn Sie einen Handler für das Ereignis angeben, werden die benutzerdefinierten Daten beispielsweise in der Klasse übergeben, das eine Eigenschaft verfügbar macht.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie zum Senden von Daten auf zwei <xref:System.Web.UI.WebControls.Label> Steuerelemente auf einer Seite während eines asynchronen Postbacks. Die <xref:System.Web.UI.WebControls.Label> Steuerelemente befinden sich nicht in einem <xref:System.Web.UI.UpdatePanel> Steuerelement.  
  
> [!NOTE]
>  Die Daten, die in diesem Beispiel gesendet wird, dient nur zur Veranschaulichung. In einer realen Anwendung verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> Methode, um benutzerdefinierte Daten vom Server zu senden.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />-Methode wird während eines Postbacks aufgerufen.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> ist bereits für <paramref name="control" /> registriert.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem, bool isJsonSerialized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem, bool isJsonSerialized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem, bool isJsonSerialized);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
        <Parameter Name="isJsonSerialized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Das Seitensteuerelement, das die Daten empfängt.</param>
        <param name="dataItem">Die Daten, die an das Steuerelement gesendet werden.</param>
        <param name="isJsonSerialized">
          <see langword="true" />, um anzugeben, dass <c>dataItem</c> als JSON serialisiert wird, andernfalls <see langword="false" />.</param>
        <summary>Sendet benutzerdefinierte Daten während des Teilrenderings von Seiten an ein Steuerelement und gibt an, ob die Daten das JSON-Format (JavaScript Object Notation) aufweisen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> Methode zum Senden von Daten vom Server an den Client bei asynchronen Postbacks, unabhängig davon, ob das Steuerelement, das Empfangen von Daten innerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement.  
  
 Wenn die `dataItem` Parameter, den Sie, für registrieren `control` ist nicht als JSON serialisiert, Festlegen der `isJsonSerialized` Parameter an `false`. Dadurch müssen mit der Funktion für jede Zeichenfolge, die an den Client gesendet wird. Weitere Informationen über das JSON-Format finden Sie unter der [Einführung in JSON](http://go.microsoft.com/fwlink/?LinkId=77297) Website.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> Methode kann nur während eines asynchronen Postbacks aufgerufen werden. Um zu bestimmen, ob ein Postback asynchron ist, verwenden die <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> Eigenschaft.  
  
 Die Datenelemente, die mit registriert sind die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> Methode in Clientskripts während zugegriffen werden kann, und Ereignisse des Objekts. Wenn Sie diese Ereignisse behandeln, werden die benutzerdefinierten Daten in einem Ereignisargumentobjekt übergeben. Wenn Sie einen Handler für das Ereignis angeben, werden die benutzerdefinierten Daten beispielsweise in der Klasse übergeben, das eine Eigenschaft verfügbar macht.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie zum Senden von Daten auf zwei <xref:System.Web.UI.WebControls.Label> Steuerelemente auf einer Seite während eines asynchronen Postbacks. Die <xref:System.Web.UI.WebControls.Label> Steuerelemente befinden sich nicht in einem <xref:System.Web.UI.UpdatePanel> Steuerelement. Dieses Beispiel zeigt die Überladung, nicht verwendet wird, wird, die `isJsonSerialized` Parameter. Andernfalls ist das Verfahren zum Abrufen der Eigenschaft des Objekts die Sie nicht diese Überladung verwendet haben.  
  
> [!NOTE]
>  Die Daten, die in diesem Beispiel gesendet wird, dient nur zur Veranschaulichung. In einer realen Anwendung verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> Methode, um benutzerdefinierte Daten vom Server zu senden. Beispielsweise können Sie das Datenelement um Informationen darüber, ob die Elemente, die nicht innerhalb ein- oder ausblenden zu senden, ein <xref:System.Web.UI.UpdatePanel> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />-Methode wird während eines Postbacks aufgerufen.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> ist bereits für <paramref name="control" /> registriert.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDispose">
      <MemberSignature Language="C#" Value="public void RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, für das das <see langword="dispose" />-Skript vorgesehen ist.</param>
        <param name="disposeScript">Das <see langword="dispose" />-Skript.</param>
        <summary>Registriert ein <see langword="dispose" />-Skript für ein Steuerelement, das sich in einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement befindet. Das Skript wird ausgeführt, wenn das <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement aktualisiert oder gelöscht wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> Methode, um registrieren `dispose` Skripts für Steuerelemente, die innerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement. Bei asynchronen Postbacks <xref:System.Web.UI.UpdatePanel> Steuerelemente aktualisiert, gelöscht oder erstellt werden können. Wenn ein Bereich aktualisiert oder gelöscht werden, eine `dispose` Skripts, die für Steuerelemente registriert werden, die innerhalb der <xref:System.Web.UI.UpdatePanel> aufgerufen werden. In typischen Seite Entwicklungsszenarien, Sie müssen nicht aufrufen, die <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> Methode.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> Methode dient zur Verwendung durch Entwickler von Steuerelementen zum Registrieren von Skripts oder erstellen Sie Steuerelemente, die von erben die <xref:System.Web.UI.IScriptControl> Schnittstelle. Angenommen, Sie verwenden möglicherweise eine `dispose` Skript, wenn Sie ein Clientsteuerelement durch Zusammensetzung entwickeln. Implementieren Sie in das Steuerelement <xref:System.Web.UI.IScriptControl> und einzelne Steuerelemente zu rendern. Registrieren Sie die `dispose` Methode der jedes Element, das nicht definierten Clientkomponente, z. B. entsprechen `Sys.TextBox`. Wenn das benutzerdefinierte Steuerelement aus Elementen, die Clientkomponenten in der Microsoft Ajax-Bibliothek entsprechen besteht, müssen Sie nicht registrieren einer `dispose` Skript zu erstellen, da `dispose` wird automatisch aufgerufen. Verwenden Sie daher die <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> Methode für die Clientkomponenten, die sich in der Microsoft Ajax-Bibliothek und Ressourcen freizugeben, wenn eine Komponente nicht mehr verwendet wird.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> Methode kann für ein Steuerelement mehrmals aufgerufen werden. Mehrere Skripts werden aggregiert. Die Reihenfolge der disposing Skripts entspricht die Reihenfolge, in der die Skripts registriert wurden.  
  
 Wenn Sie sich registrieren eine `dispose` -Skript für ein Steuerelement, das kein <xref:System.Web.UI.UpdatePanel> -Steuerelement, eine Ausnahme ausgelöst. Die `dispose` Skript heißt zwischen der und Ereignisse der-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> ist <see langword="null" />.  Oder:  <paramref name="disposeScript" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> wurde auf der Seite nicht gefunden.  Oder:  <paramref name="control" /> befindet sich nicht in einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement.</exception>
        <altmember cref="T:System.Web.UI.IScriptControl" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public static void RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das das Expando-Attribut registriert.</param>
        <param name="controlId">Das Steuerelement, das das benutzerdefinierte Attribut auf der Seite enthält.</param>
        <param name="attributeName">Der Name des zu registrierenden benutzerdefinierten Attributs.</param>
        <param name="attributeValue">Der Wert des benutzerdefinierten Attributs.</param>
        <param name="encode">
          <see langword="true" />, um das zu registrierende benutzerdefinierte Attribut zu codieren, andernfalls <see langword="false" />.</param>
        <summary>Registriert ein Name-Wert-Paar beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement als benutzerdefiniertes Attribut (Expando-Attribut) eines angegebenen Steuerelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> Methode zum Registrieren einer benutzerdefinierten (Attributen Expando)-Eigenschaft für ein Steuerelement, die kompatibel mit Teilrendering von Seiten und weist keine Abhängigkeiten auf Microsoft Ajax-Bibliothek.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> Methode registriert ein Name/Wert-Paar als benutzerdefiniertes Attribut für das angegebene Steuerelement. Die Eigenschaft wird von ECMAScript (JavaScript) dynamisch festgelegt, XHTML-Kompatibilität für das gerenderte Steuerelement Markup erhalten bleiben. Legen Sie `encode` auf `true` alle Escapezeichen in die dynamische Eigenschaft-Wert haben.  
  
 Wenn das Steuerelement, zu dem die dynamische Eigenschaft hinzugefügt wird, nicht gefunden wird, tritt ein Skriptfehler auf.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> befindet sich nicht in der Steuerelementstruktur der Seite.  Oder:  <paramref name="controlId" /> ist <see langword="null" />.  Oder:  <paramref name="controlId" /> ist leer.  Oder:  <paramref name="attributeName" /> ist <see langword="null" />.  Oder:  <paramref name="attributeName" /> ist leer.  Oder:  <paramref name="attributeName" /> ist bereits registriert.</exception>
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExtenderControl&lt;TExtenderControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterExtenderControl&lt;TExtenderControl&gt; (TExtenderControl extenderControl, System.Web.UI.Control targetControl) where TExtenderControl : System.Web.UI.Control, System.Web.UI.IExtenderControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterExtenderControl&lt;(class System.Web.UI.Control, class System.Web.UI.IExtenderControl) TExtenderControl&gt;(!!TExtenderControl extenderControl, class System.Web.UI.Control targetControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExtenderControl(Of TExtenderControl As {Control, IExtenderControl}) (extenderControl As TExtenderControl, targetControl As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExtenderControl&gt;&#xA; where TExtenderControl : System::Web::UI::Control, System::Web::UI::IExtenderControl virtual void RegisterExtenderControl(TExtenderControl extenderControl, System::Web::UI::Control ^ targetControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterExtenderControl``1(``0,System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtenderControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IExtenderControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="extenderControl" Type="TExtenderControl" />
        <Parameter Name="targetControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <typeparam name="TExtenderControl">Ein Steuerelement, das die <see cref="T:System.Web.UI.IExtenderControl" />-Schnittstelle implementiert.</typeparam>
        <param name="extenderControl">Das zu registrierende Extendersteuerelement.</param>
        <param name="targetControl">Das Skriptsteuerelement, das vom Extendersteuerelement erweitert wird.</param>
        <summary>Registriert ein Extendersteuerelement bei der aktuellen Instanz von <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist in erster Linie für die Verwendung durch Entwickler von Steuerelementen. Rufen Sie die <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> Methode aus einer benutzerdefinierten ASP.NET Ajax-Extendersteuerelement während seiner `onInit` -Ereignishandler hinzu, die Steuern auf der Seite zu registrieren. Ein ASP.NET Ajax-Extendersteuerelement muss registriert sein, um das Teilrendering von Seiten beteiligt.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> Methode fügt das angegebene Extendersteuerelement einer internen Liste von Extendersteuerelementen und der Ziel-Skript-Steuerelementen, die sie erweitern. Diese Liste wird verarbeitet, während die <xref:System.Web.UI.Control.PreRender> Ereignis.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extenderControl" /> ist <see langword="null" />.  Oder:  <paramref name="targetControl" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterHiddenField">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert ein ausgeblendetes Feld.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das das ausgeblendete Feld registriert.</param>
        <param name="hiddenFieldName">Der Name des zu registrierenden ausgeblendeten Felds.</param>
        <param name="hiddenFieldInitialValue">Der Anfangswert des ausgeblendeten Felds.</param>
        <summary>Registriert ein ausgeblendetes Feld beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für ein Steuerelement, das sich in einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> Methode, um ein ausgeblendetes Feld zu registrieren, die kompatibel mit Teilrendering von Seiten und weist keine Abhängigkeiten auf Microsoft Ajax-Bibliothek. Diese Methode registriert das ausgeblendete Feld aus, wenn das Steuerelement, das das Feld registriert innerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement, das aktualisiert wird. Ein ausgeblendetes Feld jedes Mal verwenden, um registrieren ein asynchrones Postbacks tritt auf, die <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> Überladung dieser Methode.  
  
 Wenn Sie ein ausgeblendetes Feld registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und verwenden, wenn Sie das ausgeblendete Feld nur einmal während der ersten Seitenrendering registrieren möchten die <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> Methode erstellt ein ausgeblendetes `input` Element auf der gerenderten HTML-Seite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> ist <see langword="null" />.  Oder:  <paramref name="hiddenFieldName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> befindet sich nicht in der Steuerelementstruktur der Seite.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Page ^ page, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das das ausgeblendete Feld registriert.</param>
        <param name="hiddenFieldName">Der Name des zu registrierenden ausgeblendeten Felds.</param>
        <param name="hiddenFieldInitialValue">Der Anfangswert des ausgeblendeten Felds.</param>
        <summary>Registriert ein ausgeblendetes Feld bei jedem asynchronen Postback beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> Methode, um ein ausgeblendetes Feld zu registrieren, die kompatibel mit Teilrendering von Seiten und weist keine Abhängigkeiten auf Microsoft Ajax-Bibliothek. Diese Methode registriert das ausgeblendete Feld bei jedem asynchronen Postback. Um ein ausgeblendetes Feld für ein Steuerelement zu registrieren, die innerhalb einer <xref:System.Web.UI.UpdatePanel> steuern, sodass das Feld registriert ist, nur, wenn der Bereich aktualisiert wird, verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> Überladung dieser Methode.  
  
 Wenn Sie ein ausgeblendetes Feld registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und verwenden, wenn Sie das ausgeblendete Feld nur einmal während der ersten Seitenrendering registrieren möchten die <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> ist <see langword="null" />.  Oder:  <paramref name="hiddenFieldName" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterNamedClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert in einer Assembly eingebettete Clientskripts anhand des Ressourcennamens beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, um diese mit einem Steuerelement zu verwenden, das am Teilrendering von Seiten beteiligt ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Control control, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Control control, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Control ^ control, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das das Skript registriert.</param>
        <param name="resourceName">Ein Bezeichner für die Ressource.</param>
        <summary>Registriert in einer Assembly eingebettete Clientskripts anhand des Ressourcennamens beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, um diese mit einem Steuerelement zu verwenden, das am Teilrendering von Seiten beteiligt ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Page page, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Page page, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Page,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Page ^ page, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das das Skript registriert.</param>
        <param name="resourceName">Ein Bezeichner für die Ressource.</param>
        <summary>Registriert in einer Assembly eingebettete Clientskripts anhand des Ressourcennamens beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, um diese mit einem Steuerelement zu verwenden, das am Teilrendering von Seiten beteiligt ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterOnSubmitStatement">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert ECMAScript-Code (JavaScript), der beim Senden des Formulars ausgeführt wird.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das die <see langword="onsubmit" />-Anweisung registriert.</param>
        <param name="type">Der Typ der Clientskriptanweisung. Dieser Parameter wird meist mithilfe des Operators "typeof" (C#) bzw. des Operators "GetType" (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für die Skriptanweisung.</param>
        <param name="script">Das zu registrierende Skript.</param>
        <summary>Registriert ECMAScript-Code (JavaScript) beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für ein Steuerelement mit <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement mit Ausführung beim Senden des Formulars.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> Skript, das ausgeführt wird, bevor das Formular gesendet wird, hinzugefügt, sodass Sie ändern die Übermittlung oder abbrechen können.  
  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> Methode zum Rendern einer `onsubmit` -Anweisung, die kompatibel mit Teilrendering von Seiten ist und, die weist keine Abhängigkeiten auf Microsoft Ajax-Bibliothek. JavaScript-Code, der registriert ist, indem Sie mit dieser Methode wird auf der Seite nur gesendet, wenn innerhalb des Steuerelements, das die Anweisung registriert ist ein <xref:System.Web.UI.UpdatePanel> Steuerelement, das aktualisiert wird. Um Code bei jedem asynchronen Postback beim registrieren möchten, verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> Überladung dieser Methode.  
  
 Wenn Sie JavaScript-Code registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und wenn Sie den Code nur einmal während der ersten Seitenrendering registrieren möchten, verwenden die <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 Die *Skript* Parameter von der <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> Methode kann mehrere Befehle des Skripts, die durch Semikolons (;) getrennt sind enthalten.  
  
 Weitere Informationen zu HTML-Formularen und `onsubmit` -Ereignis finden Sie unter der [Website des World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> ist <see langword="null" />.  Oder:  <paramref name="type" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> befindet sich nicht in der Steuerelementstruktur der Seite.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Page page, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Page page, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das die <see langword="onsubmit" />-Anweisung registriert.</param>
        <param name="type">Der Typ der Clientskriptanweisung. Dieser Parameter wird meist mithilfe des Operators "typeof" (C#) bzw. des Operators "GetType" (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für die Skriptanweisung.</param>
        <param name="script">Das zu registrierende Skript.</param>
        <summary>Registriert ECMAScript-Code (JavaScript) beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement für ein Steuerelement mit <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement mit Ausführung beim Senden des Formulars.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Registrieren von JavaScript-Code mit dieser Methode bewirkt, dass das Skript jedes Mal enthalten, die asynchronen Postback.  
  
> [!NOTE]
>  Code aus frühere asynchrone Postbacks wird nicht entfernt. Neue asynchrone Postbacks fügen Code an beliebigen vorhandenen Code für die `onsubmit` Anweisung.  
  
 Um Code für ein Steuerelement zu registrieren, die innerhalb einer <xref:System.Web.UI.UpdatePanel> steuern, sodass der Code registriert ist nur, wenn die <xref:System.Web.UI.UpdatePanel> Steuerelement aktualisiert wird, verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> Überladung dieser Methode.  
  
 Wenn Sie JavaScript-Code registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und wenn Sie den Code nur einmal während der ersten Seitenrendering registrieren möchten, verwenden die <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> ist <see langword="null" />.  Oder:  <paramref name="type" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das für Postbacks registriert werden soll.</param>
        <summary>Registriert ein Steuerelement als Trigger für ein Postback. Diese Methode wird zum Konfigurieren von Postbacksteuerelementen in einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement verwendet, die andernfalls asynchrone Postbacks ausführen würden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A> Methode zum Registrieren von Postbacksteuerelementen in einem <xref:System.Web.UI.UpdatePanel> Steuerelement als Trigger. Steuerelemente, die mit dieser Methode registriert sind aktualisiert eine gesamte Seite statt zu aktualisieren, nur die <xref:System.Web.UI.UpdatePanel> der Inhalt des Steuerelements. Registrieren ein postback-Steuerelement mit dieser Methode außerhalb einer <xref:System.Web.UI.UpdatePanel> Steuerelement hat keine Auswirkung, da diese Steuerelemente standardmäßig keine asynchrone Postbacks ausführen.  
  
 Sie können den Trigger deklarativ hinzufügen, mit der `Triggers` Element von der <xref:System.Web.UI.UpdatePanel> Steuerelement. Verwenden Sie in Visual Studio des Designers **UpdatePanelTrigger-Auflistungs-Editor** (Dialogfeld).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptControl&lt;TScriptControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterScriptControl&lt;TScriptControl&gt; (TScriptControl scriptControl) where TScriptControl : System.Web.UI.Control, System.Web.UI.IScriptControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptControl&lt;(class System.Web.UI.Control, class System.Web.UI.IScriptControl) TScriptControl&gt;(!!TScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptControl(Of TScriptControl As {Control, IScriptControl}) (scriptControl As TScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TScriptControl&gt;&#xA; where TScriptControl : System::Web::UI::Control, System::Web::UI::IScriptControl virtual void RegisterScriptControl(TScriptControl scriptControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptControl``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TScriptControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IScriptControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="scriptControl" Type="TScriptControl" />
      </Parameters>
      <Docs>
        <typeparam name="TScriptControl">Ein Steuerelement, das die <see cref="T:System.Web.UI.IScriptControl" />-Schnittstelle implementiert.</typeparam>
        <param name="scriptControl">Das zu registrierende Skriptsteuerelement.</param>
        <summary>Registriert ein Skriptsteuerelement bei der aktuellen Instanz von <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist in erster Linie für die Verwendung durch Entwickler von Steuerelementen. Rufen Sie die <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> Methode über ein benutzerdefiniertes Steuerelement der ASP.NET Ajax-Skript während seiner `onInit` -Ereignishandler hinzu, die Steuern auf der Seite zu registrieren. Ein ASP.NET Ajax-Skript-Steuerelement muss registriert sein, um das Teilrendering von Seiten beteiligt.  
  
 Die <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> Methode fügt das angegebene Extendersteuerelement einer internen Liste des Skriptsteuerelemente, die während der Verarbeitung der <xref:System.Web.UI.Control.PreRender> Ereignis.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scriptControl" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterScriptDescriptors">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Weist das <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement an, die Klassen <see cref="T:System.Web.UI.ScriptControl" /> oder <see cref="T:System.Web.UI.ExtenderControl" /> erneut aufzurufen, um Skripts zurückzugeben, die das Clientobjekt unterstützen, das ein Clientsteuerelement, eine Clientkomponente oder ein Clientverhalten darstellt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IExtenderControl extenderControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IExtenderControl extenderControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (extenderControl As IExtenderControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IExtenderControl ^ extenderControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extenderControl" Type="System.Web.UI.IExtenderControl" />
      </Parameters>
      <Docs>
        <param name="extenderControl">Das Extendersteuerelement, für das Skriptdeskriptoren registriert werden.</param>
        <summary>Ruft eine <see cref="T:System.Web.UI.ExtenderControl" />-Klasse erneut auf, um Instanzenskripts zurückzugeben, die für die Unterstützung des Clientobjekts gerendert werden müssen, das ein Clientsteuerelement, eine Clientkomponente oder ein Clientverhalten darstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ExtenderControl> -Klasse ruft die <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> Methode in seiner <xref:System.Web.UI.Control.Render%2A> Methode.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ableiten von der <see cref="T:System.Web.UI.ExtenderControl" /> Klasse, und überschreiben die <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> -Methode, jedoch nicht die Basisklassenmethode aufrufen, rufen Sie die <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" /> Methode. Dies ermöglicht die <see cref="T:System.Web.UI.ScriptManager" /> Steuerelement, um die Instanzenskripts zu rendern, die das Clientobjekt unterstützen, die das Steuerelement darstellt.</para>
        </block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IScriptControl scriptControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (scriptControl As IScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IScriptControl ^ scriptControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptDescriptors(System.Web.UI.IScriptControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptControl" Type="System.Web.UI.IScriptControl" />
      </Parameters>
      <Docs>
        <param name="scriptControl">Das Skriptsteuerelement, für das Skriptdeskriptoren registriert werden.</param>
        <summary>Ruft eine <see cref="T:System.Web.UI.ScriptControl" />-Klasse auf, um Instanzenskripts zurückzugeben, die für die Unterstützung des Clientobjekts gerendert werden müssen, das ein Clientsteuerelement, eine Clientkomponente oder ein Clientverhalten darstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptControl> -Klasse ruft die <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> Methode während seiner <xref:System.Web.UI.Control.Render%2A> Ereignis.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ableiten von der <see cref="T:System.Web.UI.ScriptControl" /> Klasse, und überschreiben die <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> -Methode, jedoch nicht die Basisklassenmethode aufrufen, rufen Sie die <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" /> Methode. Dies ermöglicht die <see cref="T:System.Web.UI.ScriptManager" /> Steuerelement, um die Instanzenskripts zu rendern, die das Clientobjekt unterstützen, die das Steuerelement darstellt.</para>
        </block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert einen Startskriptblock beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement und fügt den Skriptblock der Seite hinzu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das den Clientskriptblock registriert.</param>
        <param name="type">Der Typ des Clientskriptblocks. Dieser Parameter wird meist mithilfe des Operators "typeof" (C#) bzw. des Operators "GetType" (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für den Skriptblock.</param>
        <param name="script">Das zu registrierende Skript.</param>
        <param name="addScriptTags">
          <see langword="true" />, um den Skriptblock in die Tags <see langword="&lt;script&gt;" /> und <see langword="&lt;/script&gt;" /> einzuschließen, andernfalls <see langword="false" />.</param>
        <summary>Registriert einen Startskriptblock für ein Steuerelement, das sich in einem <see cref="T:System.Web.UI.UpdatePanel" />-Steuerelement befindet, mithilfe des <see cref="T:System.Web.UI.ScriptManager" />-Steuerelements, und fügt den Skriptblock der Seite hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> Methode, um einen Startskriptblock für eine Seite zu registrieren, die kompatibel mit Teilrendering von Seiten und weist keine Abhängigkeiten auf Microsoft Ajax-Bibliothek. Start-Skriptblöcke, die mit dieser Methode registriert sind werden auf der Seite nur gesendet, wenn innerhalb des Steuerelements, das den Block registriert ist ein <xref:System.Web.UI.UpdatePanel> Steuerelement, das aktualisiert wird. Verwenden, um einen Startskriptblock jedes Mal registrieren, die bei einem asynchronen Postbacks die <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Überladung dieser Methode.  
  
 Wenn Sie einem Startskript registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und wenn Sie das Skript nur einmal während der ersten Seitenrendering registrieren möchten, verwenden möchten die <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 Der Skriptblock, der vom gerendert wird die <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> Methode ausgeführt wird, wenn das Laden die Seite abgeschlossen ist, aber vor der Seite Client `onload` Ereignis wird ausgelöst. Start-Skriptblöcke befinden sich am unteren Rand der gerenderten ASP.NET-Seite kurz vor dem Ausführen der `</form>` Tag.  
  
 Start-Skriptblöcke, die mit registriert sind <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> ist nicht gewährleistet, in der gleichen Reihenfolge ausgegeben werden, in dem sie registriert sind. Wenn die Reihenfolge der Dienststart Skriptblöcke wichtig ist, verwenden Sie eine <xref:System.Text.StringBuilder> Objekt, das um die Skriptblöcken in eine einzelne Zeichenfolge zu erfassen, und registrieren Sie sie als einzelnes Startskript.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> ist <see langword="null" />.  Oder:  <paramref name="type" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> befindet sich nicht in der Steuerelementstruktur der Seite.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">Das Seitenobjekt, das den Clientskriptblock registriert.</param>
        <param name="type">Der Typ des Clientskriptblocks. Dieser Parameter wird meist mithilfe des Operators "typeof" (C#) bzw. des Operators "GetType" (Visual Basic) angegeben, um den Typ des Steuerelements abzurufen, das das Skript registriert.</param>
        <param name="key">Ein eindeutiger Bezeichner für den Skriptblock.</param>
        <param name="script">Das zu registrierende Skript.</param>
        <param name="addScriptTags">
          <see langword="true" />, um den Skriptblock in die Tags <see langword="&lt;script&gt;" /> und <see langword="&lt;/script&gt;" /> einzuschließen, andernfalls <see langword="false" />.</param>
        <summary>Registriert einen Startskriptblock für jedes asynchrone Postback beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement und fügt den Skriptblock der Seite hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie verwenden diese Methode, um einen Startskriptblock zu registrieren, der jedes Mal ist, die asynchronen Postback. Um einen Skriptblock für ein Steuerelement zu registrieren, die innerhalb einer <xref:System.Web.UI.UpdatePanel> steuern, sodass der Skriptblock registriert ist nur, wenn die <xref:System.Web.UI.UpdatePanel> Steuerelement aktualisiert wird, verwenden Sie die <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Überladung dieser Methode.  
  
 Wenn Sie einem Startskript registrieren, die nicht beziehen sich auf den teilaktualisierungen von Seiten, und wenn Sie das Skript nur einmal während der ersten Seitenrendering registrieren möchten, verwenden möchten die <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Methode der <xref:System.Web.UI.ClientScriptManager> Klasse. Sie erhalten einen Verweis auf die <xref:System.Web.UI.ClientScriptManager> -Objekt aus der <xref:System.Web.UI.Page.ClientScript%2A> -Eigenschaft der Seite.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Ein Objekt, das den auf der Seite zu schreibenden Inhalt des Steuerelements empfängt.</param>
        <summary>Rendert den Inhalt des <see cref="T:System.Web.UI.ScriptManager" />-Steuerelements mithilfe des angegebenen <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekts im Browser.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von Steuerelemententwicklern verwendet, zum Erweitern der <xref:System.Web.UI.ScriptManager> Steuerelement.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie diese Methode überschreiben, rufen Sie die grundlegende <see cref="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" /> Methode, damit der Clientskript, das die Klasse definiert, die auf der Seite gerendert wird.</para>
        </block>
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveCompositeScriptReference As EventHandler(Of CompositeScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::CompositeScriptReferenceEventArgs ^&gt; ^ ResolveCompositeScriptReference;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein zusammengesetztes Skript beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement registriert wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveScriptReference As EventHandler(Of ScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::ScriptReferenceEventArgs ^&gt; ^ ResolveScriptReference;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein Member der <see cref="P:System.Web.UI.ScriptManager.Scripts" />-Auflistung beim <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement registriert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird einmal für jedes Mitglied der <xref:System.Web.UI.ScriptManager.Scripts%2A> Auflistung während der Seite <xref:System.Web.UI.Control.PreRender> Ereignis. Verwenden Sie dieses Ereignis, um alle Updates ausführen, bevor das Skript auf der Seite gerendert wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoleService">
      <MemberSignature Language="C#" Value="public System.Web.UI.RoleServiceManager RoleService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.RoleServiceManager RoleService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.RoleService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoleService As RoleServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::RoleServiceManager ^ RoleService { System::Web::UI::RoleServiceManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.RoleServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Web.UI.RoleServiceManager" />-Objekt ab, das der aktuellen <see cref="T:System.Web.UI.ScriptManager" />-Instanz zugeordnet ist.</summary>
        <value>Das <see cref="T:System.Web.UI.RoleServiceManager" />-Objekt für die aktuelle <see cref="T:System.Web.UI.ScriptManager" />-Instanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.RoleServiceManager> von dieser Eigenschaft zurückgegebene Objekt stellt den Rollendienst "", die mit der Seite registriert ist. Der Rollendienst kann definiert werden, der <xref:System.Web.UI.ScriptManager> Steuerelement oder einem zugeordneten <xref:System.Web.UI.ScriptManagerProxy> Steuerelement. Sie können den Rollendienst ASP.NET verwenden oder einen benutzerdefinierten Rollendienst. Sie können den benutzerdefinierten Dienst im Markup hinzufügen, indem Sie z. B. eine `RoleService` Element innerhalb der `asp:ScriptManager` Element auf der Seite, wie im folgenden Beispiel gezeigt:  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <RoleService Path="MyRoleService.asmx" LoadRoles="True" />  
</asp:ScriptManager>  
```  
  
 Sie können auch programmgesteuert konfigurieren, die <xref:System.Web.UI.RoleServiceManager> Objekt. Services registriert werden, die <xref:System.Web.UI.ScriptManager> Steuerelement während der Seite <xref:System.Web.UI.Control.PreRender> Lebenszyklus-Phase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptMode ScriptMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ScriptMode ScriptMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptMode As ScriptMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptMode ScriptMode { System::Web::UI::ScriptMode get(); void set(System::Web::UI::ScriptMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Debug- oder Releaseversionen von Clientskriptbibliotheken gerendert werden, oder legt diesen fest.</summary>
        <value>Der Enumerationswert, der den aktuellen Modus angibt. Der Standardwert ist <see cref="F:System.Web.UI.ScriptMode.Auto" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.ScriptMode%2A> Eigenschaft gibt an, ob die <xref:System.Web.UI.ScriptManager> Steuerelement rendern Debuggen oder Releaseversionen von Clientskriptbibliotheken soll. Dieser Wert kann durch Werte abgelöst werden, die in der Konfigurationsdatei und in der Seitendirektive festgelegt werden.  
  
 Die folgende Tabelle enthält die gültigen Werte für diese Eigenschaft.  
  
|Wert|Definition|  
|-----------|----------------|  
|<xref:System.Web.UI.ScriptMode.Auto>|Debugversionen von Clientskriptbibliotheken werden auf der Webseite verwendet bei der `retail` des Konfigurationselements wird-Attributsatz zur `false`. Andernfalls werden die Releaseversionen von Clientskriptbibliotheken verwendet.|  
|<xref:System.Web.UI.ScriptMode.Inherit>|Bei Anwendung auf die <xref:System.Web.UI.ScriptManager.ScriptMode%2A> Eigenschaft von der <xref:System.Web.UI.ScriptManager> Objekt ist, wird dieser Wert ist identisch mit <xref:System.Web.UI.ScriptMode.Auto>.|  
|<xref:System.Web.UI.ScriptMode.Debug>|Debugversionen von Clientskriptbibliotheken werden auf der Webseite verwendet, es sei denn, die `retail` des Konfigurationselements wird-Attributsatz zur `true`.|  
|<xref:System.Web.UI.ScriptMode.Release>|Releaseversionen von Clientskriptbibliotheken werden auf der Webseite verwendet, es sei denn, die `retail` des Konfigurationselements wird-Attributsatz zur `false`.|  
  
> [!NOTE]
>  Die `debug` Attribut der Richtlinie wirkt sich nicht auf ASP.NET Ajax-fähigen Anwendungen. Die <xref:System.Web.UI.ScriptManager> Steuerelement verwendet nur die Einstellungen in der Datei "Web.config" und in seine <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> und <xref:System.Web.UI.ScriptManager.ScriptMode%2A> Eigenschaften zu bestimmen, ob die Debug-Skripts zu rendern.  
  
 Weitere Informationen finden Sie unter [Debuggen und Tracing Ajax Applications Overview](http://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <see cref="P:System.Web.UI.ScriptManager.ScriptMode" />-Eigenschaft ist keiner der <see cref="T:System.Web.UI.ScriptMode" />-Werte.</exception>
        <altmember cref="T:System.Web.UI.ScriptMode" />
      </Docs>
    </Member>
    <Member MemberName="ScriptPath">
      <MemberSignature Language="C#" Value="public string ScriptPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Set the Path property on each individual ScriptReference instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Stammpfad des zum Erstellen der Pfade zu ASP.NET AJAX und benutzerdefinierten Skriptdateien verwendeten Verzeichnisses ab oder legt diesen fest.</summary>
        <value>Das Verzeichnis, in dem Skriptdateien gespeichert werden. Der Standardwert ist eine leere Zeichenfolge (""), die als relativer Pfad interpretiert wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.ScriptPath%2A> Eigenschaft ermöglicht Ihnen die Angabe eine Absolute, relative oder anwendungsrelativen URL für alle Skripts auf der Seite blockiert. Dies schließt benutzerdefinierte und Drittanbieter-Skriptblöcke, die mit dem aktuellen registriert sind <xref:System.Web.UI.ScriptManager> Instanz. Die <xref:System.Web.UI.ScriptManager.ScriptPath%2A> Eigenschaft wird in der Regel deklarativ als ein Attribut des festgelegt eine `ScriptManager` Element auf der Seite ", aber sie können auch im Code festgelegt werden.  
  
 Wenn die `path` Attribut oder die <xref:System.Web.UI.ScriptReferenceBase.Path%2A> Eigenschaftensatz für eine <xref:System.Web.UI.ScriptReference> Objekt in der <xref:System.Web.UI.ScriptManager.Scripts%2A> -Auflistung, der Pfadwert überschreibt die <xref:System.Web.UI.ScriptManager.ScriptPath%2A> Wert für diesen <xref:System.Web.UI.ScriptReference> Instanz.  
  
 Wenn kein <xref:System.Web.UI.ScriptReferenceBase.Path%2A> -Wert angegeben wird, die <xref:System.Web.UI.ScriptManager> Steuerelement sucht das Verzeichnis, das durch definiert ist die <xref:System.Web.UI.ScriptManager.ScriptPath%2A> Eigenschaft und löst Skriptverweise durch ihre <xref:System.Web.UI.ScriptReference.Name%2A> oder <xref:System.Web.UI.ScriptReference.Assembly%2A> Eigenschaften.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceMapping">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptResourceMapping ScriptResourceMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.UI.ScriptResourceMapping ScriptResourceMapping" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptResourceMapping" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ScriptResourceMapping As ScriptResourceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::UI::ScriptResourceMapping ^ ScriptResourceMapping { System::Web::UI::ScriptResourceMapping ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptResourceMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.ScriptResourceMapping" />-Objekt ab.</summary>
        <value>Ein <see cref="T:System.Web.UI.ScriptResourceMapping" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die statische <xref:System.Web.UI.ScriptManager.ScriptResourceMapping%2A> -Eigenschaft gibt ein <xref:System.Web.UI.ScriptResourceMapping> -Objekt, das eine Auflistung von Zuordnungen enthalten kann, die den Speicherort der Ressource "Script" (Skript Umleitung) darstellen. Diese Auflistung von Zuordnungen basierend auf den Namen oder die Name-Assembly-Paare zugeordnet werden kann, und es kann zeigen Sie auf eine <xref:System.Web.UI.ScriptResourceDefinition> Objekt.  
  
   
  
## Examples  
 In den folgenden Beispielen wird gezeigt, wie das Hinzufügen einer <xref:System.Web.UI.ScriptResourceDefinition> -Objekt, das SKD verweisen kann eine <xref:System.Web.UI.ScriptManager> Objekt. Fügen Sie den folgenden Code zur Datei "Global.asax" in der `Application_Start` Ereignis.  
  
```csharp  
ScriptResourceDefinition myScriptResDef = new ScriptResourceDefinition();  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js";  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js";  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js";  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js";  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", null, myScriptResDef);  
```  
  
```vb  
Dim myScriptResDef As New ScriptResourceDefinition()  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js"  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js"  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js"  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js"  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", Nothing, myScriptResDef)  
```  
  
 Fügen Sie das folgende Markup hinzu, in das Markup für eine ASP.NET Web Forms-Seite (ASPX-Datei), die `form` Element und vor allen Elementen oder Code, die jQuery-Skripts verwendet.  
  
```  
<asp:ScriptManager ID="sm1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="jquery"/>  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scripts">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptReferenceCollection Scripts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ScriptReferenceCollection Scripts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Scripts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scripts As ScriptReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptReferenceCollection ^ Scripts { System::Web::UI::ScriptReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.ScriptReferenceCollection" />-Objekt ab, das die <see cref="T:System.Web.UI.ScriptReference" />-Objekte enthält, die jeweils eine für den Client gerenderte Skriptdatei darstellen.</summary>
        <value>Das <see cref="T:System.Web.UI.ScriptReferenceCollection" />-Objekt der Instanz von <see cref="T:System.Web.UI.ScriptManager" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptReferenceCollection> von dieser Eigenschaft zurückgegebene Objekt ist eine Auflistung von <xref:System.Web.UI.ScriptReference> Objekte, von denen jedes eine Skriptdatei darstellt. Die Auflistung enthält Verweise auf alle Skriptdateien, die ASP.NET Ajax-Funktionen benötigt, und klicken Sie auf benutzerdefinierten Skriptdateien. Benutzerdefinierten Skriptdateien zum Rendern können definiert werden, der <xref:System.Web.UI.ScriptManager> Steuerelement oder einem zugeordneten <xref:System.Web.UI.ScriptManagerProxy> Steuerelement.  
  
 Sie können Skriptdateien auf die Auflistung im Markup hinzufügen, durch Hinzufügen von `asp:ScriptReference` Elemente, die eine `Scripts` Knoten innerhalb der `asp:ScriptManager` Element auf der Seite, wie im folgenden Beispiel gezeigt.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="Script.js" />  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 Können Sie auch Hinzufügen einer <xref:System.Web.UI.ScriptReference> -Objekt an die <xref:System.Web.UI.ScriptManager.Scripts%2A> Auflistung programmgesteuert durch die Verwendung der <xref:System.Collections.ObjectModel.Collection%601.Add%2A> Methode der <xref:System.Web.UI.ScriptReferenceCollection> Klasse.  
  
 Die <xref:System.Web.UI.ScriptManager> -Steuerelement registriert Skriptdateien, während des Steuerelements <xref:System.Web.UI.Control.PreRender> Ereignis.  
  
 Die <xref:System.Web.UI.ScriptManager.Scripts%2A> Sammlung enthält nicht die Core Microsoft Ajax-Bibliothek-Skripts. Die Skripts in der Kernbibliothek werden automatisch gerendert. Sie verfügen nicht über registriert werden die <xref:System.Web.UI.ScriptManager> Steuerelement. Jedoch, wenn Sie außer Kraft setzen ein Core-Skript oder eine beliebige Steuerelement und eine andere Version des Skripts ersetzen möchten, können Sie hinzufügen zu Ihrer Version der <xref:System.Web.UI.ScriptManager.Scripts%2A> Auflistung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Services">
      <MemberSignature Language="C#" Value="public System.Web.UI.ServiceReferenceCollection Services { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ServiceReferenceCollection Services" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Services" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Services As ServiceReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ServiceReferenceCollection ^ Services { System::Web::UI::ServiceReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ServiceReferenceCollectionEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ServiceReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.ServiceReferenceCollection" />-Objekt mit einem <see cref="T:System.Web.UI.ServiceReference" />-Objekt für jeden Webdienst ab, den ASP.NET auf dem Client für AJAX-Funktionen verfügbar macht.</summary>
        <value>Das <see cref="T:System.Web.UI.ServiceReferenceCollection" />-Objekt für die aktuelle <see cref="T:System.Web.UI.ScriptManager" />-Instanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ServiceReferenceCollection> von dieser Eigenschaft zurückgegebene Objekt ist eine Auflistung von <xref:System.Web.UI.ServiceReference> Objekte, von denen jede stellt einen Webdienst, der registriert wird die <xref:System.Web.UI.ScriptManager> Steuerelement. Sie können Dienste im Definieren der <xref:System.Web.UI.ScriptManager> Steuerelement oder einem zugeordneten <xref:System.Web.UI.ScriptManagerProxy> Steuerelement.  
  
 Können Sie Dienste auf die Auflistung im Markup hinzufügen, durch Hinzufügen einer `asp:ServiceReference` Element eine `Services` Element innerhalb der `asp:ScriptManager` auf der Seite Instanz fest, wie im folgenden Beispiel gezeigt.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Services>  
    <asp:ServiceReference Path="Service.asmx" />  
  </Services>  
</asp:ScriptManager>  
```  
  
 Können Sie auch programmgesteuert hinzufügen einer <xref:System.Web.UI.ServiceReference> -Objekt an die <xref:System.Web.UI.ScriptManager.Services%2A> -Auflistung unter Verwendung der <xref:System.Collections.ObjectModel.Collection%601.Add%2A> Methode der <xref:System.Web.UI.ServiceReferenceCollection> Klasse.  
  
 Dienste werden mit registriert die <xref:System.Web.UI.ScriptManager> während der Seite <xref:System.Web.UI.Control.PreRender> Lebenszyklus-Phase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetFocus">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Legt den Browserfokus auf das angegebene Steuerelement fest.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFocus (clientID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::String ^ clientID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">Die ID des Steuerelements, das den Fokus erhalten soll.</param>
        <summary>Legt den Browserfokus auf das über die ID angegebene Steuerelement fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode funktioniert wie die <xref:System.Web.UI.Page.SetFocus%2A> Methode für die <xref:System.Web.UI.Page> Klasse. Beide Methoden stellen dem Steuerelement mit der angegebenen ID, das zum aktive Steuerelement auf der Webseite. Die <xref:System.Web.UI.ScriptManager.SetFocus%2A> Methode der <xref:System.Web.UI.ScriptManager> Klasse wird verwendet, um während eines asynchronen Postbacks der Fokus festgelegt werden. Bei Postbacks und wenn die Seite zuerst gerendert wird die <xref:System.Web.UI.ScriptManager.SetFocus%2A> Methodenaufrufe der <xref:System.Web.UI.Page.SetFocus%2A> Methode der <xref:System.Web.UI.Page> Klasse.  
  
 Wenn es sind mehrere Aufrufe an die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode, das Steuerelement in den letzten Aufruf den Fokus erhält.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.String)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das den Fokus erhalten soll.</param>
        <summary>Legt den Browserfokus auf das angegebene Steuerelement fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode funktioniert wie die <xref:System.Web.UI.Page.SetFocus%2A> Methode für die <xref:System.Web.UI.Page> Klasse. Beide Methoden stellen dem angegebenen Steuerelement, das zum aktive Steuerelement auf der Webseite. Die <xref:System.Web.UI.ScriptManager.SetFocus%2A> Methode der <xref:System.Web.UI.ScriptManager> Klasse wird verwendet, um während eines asynchronen Postbacks der Fokus festgelegt werden. Bei Postbacks und wenn die Seite zuerst gerendert wird die <xref:System.Web.UI.ScriptManager.SetFocus%2A> Methodenaufrufe der <xref:System.Web.UI.Page.SetFocus%2A> Methode der <xref:System.Web.UI.Page> Klasse.  
  
 Wenn es sind mehrere Aufrufe an die <xref:System.Web.UI.ScriptManager.SetFocus%2A> -Methode, in dem letzten Aufruf angegebene Steuerelement den Fokus erhält.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SupportsPartialRendering">
      <MemberSignature Language="C#" Value="public bool SupportsPartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsPartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportsPartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsPartialRendering { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Client das Teilrendering von Seiten unterstützt.</summary>
        <value>
          <see langword="true" />, wenn der Client das Teilrendering von Seiten unterstützt, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> -Eigenschaftensatz auf `false`, <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> -Eigenschaft gibt `false`.  
  
 Gibt die Standard-Überprüfung zu bestimmen, ob das Teilrendering von Seiten unterstützt, wird `true` Wenn die folgenden Bedingungen erfüllt sind:  
  
-   Die <xref:System.Web.Configuration.HttpCapabilitiesBase.W3CDomVersion%2A> der Wert muss größer als oder gleich 1.0 sein.  
  
-   Die <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> der Wert muss größer als oder gleich 1.0 sein.  
  
-   Die <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> Eigenschaftswert muss festgelegt werden, um `true`.  
  
 Wenn die <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> -Eigenschaft explizit festgelegt ist, diese Überprüfungen werden nicht verwendet.  
  
 Entwickler von Steuerelementen verwenden, sollten die <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> Eigenschaft, um zu bestimmen, ob das Teilrendering von Seiten unterstützt werden sollen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />-Eigenschaft wurde auf <see langword="false" /> und die <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />-Eigenschaft auf <see langword="true" /> festgelegt.  Oder:  Die <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />-Eigenschaft wurde nach dem <see cref="E:System.Web.UI.Control.Init" />-Ereignis festgelegt.</exception>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean Implements IPostBackDataHandler.LoadPostData" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Web.UI.IPostBackDataHandler.LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection) = System::Web::UI::IPostBackDataHandler::LoadPostData;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Die Schlüsselkennung für das Steuerelement.</param>
        <param name="postCollection">Eine Auflistung aller eingehenden POST-Daten.</param>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />.</summary>
        <returns>
          <see langword="true" />, wenn sich der Zustand des <see cref="T:System.Web.UI.ScriptManager" />-Steuerelements aufgrund eines Postbacks geändert hat, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.ScriptManager>-Instanz in eine <xref:System.Web.UI.IPostBackDataHandler>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostDataChangedEvent () Implements IPostBackDataHandler.RaisePostDataChangedEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() = System::Web::UI::IPostBackDataHandler::RaisePostDataChangedEvent;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.ScriptManager>-Instanz in eine <xref:System.Web.UI.IPostBackDataHandler>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Eine Zeichenfolge von Schlüssel-Wert-Paaren, die den Verlaufszustand der Webseite darstellen.</param>
        <summary>Ermöglicht es dem <see cref="T:System.Web.UI.ScriptManager" />-Steuerelement, ein Postbackereignis zu verarbeiten und den Verlaufszustand der Webseite zu laden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.IsSecureConnection">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IScriptManager.IsSecureConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IScriptManager.IsSecureConnection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#IsSecureConnection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSecureConnection As Boolean Implements IScriptManager.IsSecureConnection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Web.UI.IScriptManager.IsSecureConnection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue) = System::Web::UI::IScriptManager::RegisterArrayDeclaration;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="arrayName">To be added.</param>
        <param name="arrayValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterClientScriptBlock;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url) = System::Web::UI::IScriptManager::RegisterClientScriptInclude;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="url">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName) = System::Web::UI::IScriptManager::RegisterClientScriptResource;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="resourceName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterDispose">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript) = System::Web::UI::IScriptManager::RegisterDispose;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="disposeScript">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode) = System::Web::UI::IScriptManager::RegisterExpandoAttribute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="controlId">To be added.</param>
        <param name="attributeName">To be added.</param>
        <param name="attributeValue">To be added.</param>
        <param name="encode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterHiddenField">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldValue) = System::Web::UI::IScriptManager::RegisterHiddenField;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="hiddenFieldName">To be added.</param>
        <param name="hiddenFieldValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script) = System::Web::UI::IScriptManager::RegisterOnSubmitStatement;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterPostBackControl">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterPostBackControl(System::Web::UI::Control ^ control) = System::Web::UI::IScriptManager::RegisterPostBackControl;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterStartupScript">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterStartupScript;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.SetFocusInternal">
      <MemberSignature Language="C#" Value="void IScriptManager.SetFocusInternal (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.SetFocusInternal(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#SetFocusInternal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub SetFocusInternal (clientID As String) Implements IScriptManager.SetFocusInternal" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.SetFocusInternal(System::String ^ clientID) = System::Web::UI::IScriptManager::SetFocusInternal;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Überschreibt die <see cref="P:System.Web.UI.Control.Visible" />-Eigenschaft, die von der <see cref="T:System.Web.UI.Control" />-Basisklasse geerbt wurde, um das Festlegen dieses Werts zu verhindern.</summary>
        <value>
          <see langword="true" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.Control.Visible%2A> Eigenschaft überschrieben wird, der <xref:System.Web.UI.ScriptManager> Klasse, um zu verhindern, dass das Festlegen dieses Werts. Ein <xref:System.NotImplementedException> Fehler tritt auf, wenn diese Eigenschaft ein Wert zugewiesen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Ein Wert wird der <see cref="P:System.Web.UI.ScriptManager.Visible" />-Eigenschaft zugewiesen.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
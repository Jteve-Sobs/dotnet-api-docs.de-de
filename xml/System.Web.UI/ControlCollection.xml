<Type Name="ControlCollection" FullName="System.Web.UI.ControlCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0b959c74697841b7d198d15a346c4d91ae3e562f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37589433" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ControlCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ControlCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlCollection : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type ControlCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt ASP.NET-Serversteuerelementen einen Auflistungscontainer für das Verwalten einer Liste der entsprechenden untergeordneten Steuerelemente bereit</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es stehen die Eigenschaften und Methoden der <xref:System.Web.UI.ControlCollection> Klasse über die <xref:System.Web.UI.Control.Controls%2A?displayProperty=nameWithType> Eigenschaft. Da die <xref:System.Web.UI.Control> Klasse ist die Basisklasse für alle ASP.NET-Serversteuerelemente, alle Steuerelemente erben diese Eigenschaft.  
  
 Weitere Informationen zu Sammlungen finden Sie unter [Auflistungen und Datenstrukturen](http://msdn.microsoft.com/library/60cc581f-1db5-445b-ba04-a173396bf872).  
  
   
  
## Examples  
 Im folgenden Codebeispiel Beispiel setzt die <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType> Methode zum Erstellen von zwei Steuerelementen, die beide Instanzen von der benutzerdefinierten Klasse `ChildControl`, das ist einer Zeichenfolgeneigenschaft, die mit dem Namen `Message`. Wenn erstellt, werden die beiden Steuerelemente hinzugefügt, auf die <xref:System.Web.UI.ControlCollection>. Die <xref:System.Web.UI.ControlCollection.Add%2A> Methode wird aufgerufen, auf jedem dieser Steuerelemente, um sie hinzuzufügen, die dieser Version enthält die Klasse <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType>. Die <xref:System.Web.UI.Control.ChildControlsCreated%2A> -Eigenschaftensatz auf `true` , damit diese Steuerelemente nicht unnötigerweise erneut erstellt werden.  
  
 [!code-csharp[Control_Sample_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Control_Sample_1/CS/control_sample.cs#1)]
 [!code-vb[Control_Sample_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Control_Sample_1/VB/control_sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.UI.Control.Controls" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlCollection (System.Web.UI.Control owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Control owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.#ctor(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlCollection(System::Web::UI::Control ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ControlCollection : System.Web.UI.Control -&gt; System.Web.UI.ControlCollection" Usage="new System.Web.UI.ControlCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="owner">Das ASP.NET-Serversteuerelement, für das die Steuerelementauflistung erstellt wurde</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.ControlCollection" />-Klasse für das angegebene übergeordnete Serversteuerelement</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird eine benutzerdefinierte <xref:System.Web.UI.ControlCollection> -Klasse, den Konstruktor überschreibt, um Nachrichten zu schreiben (darunter den Namen des der <xref:System.Web.UI.ControlCollection.Owner%2A> Eigenschaft) in das Ablaufverfolgungsprotokoll, wenn eine Instanz der Auflistung erstellt wird. Ablaufverfolgung für die Seite oder Anwendung für dieses Beispiel funktioniert, muss aktiviert werden.  
  
 [!code-csharp[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/cs/controlcollection_7.cs#1)]
 [!code-vb[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/VB/controlcollection_7.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Tritt ein, wenn der <paramref name="owner" />-Parameter <see langword="null" /> ist</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (System.Web.UI.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Web.UI.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Add(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (child As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Web::UI::Control ^ child);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Web.UI.Control -&gt; unit&#xA;override this.Add : System.Web.UI.Control -&gt; unit" Usage="controlCollection.Add child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="child">Der der Auflistung hinzuzufügende <see cref="T:System.Web.UI.Control" />.</param>
        <summary>Fügt der Auflistung das angegebene <see cref="T:System.Web.UI.Control" />-Objekt hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das neue Steuerelement wird am Ende eines Arrays Ordinalindex hinzugefügt. Das Steuerelement kann eine Instanz von ASP.NET-Serversteuerelementen, ein benutzerdefiniertes Serversteuerelement, die, das Sie erstellen, oder ein literales Steuerelement sein.  
  
 Verwenden Sie zum Hinzufügen eines Steuerelements an einer bestimmten Indexposition in die Auflistung der <xref:System.Web.UI.ControlCollection.AddAt%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.UI.ControlCollection.Add%2A> Methode, um eine Reihe von Vorlagenelementen, hinzuzufügen, die Anzahl der stammen aus dem Ansichtszustand des Serversteuerelements, einer benutzerdefinierten Steuerelementvorlage.  
  
 [!code-csharp[TemplatedDataBoundControl#2](~/samples/snippets/csharp/VS_Snippets_WebNet/TemplatedDataBoundControl/CS/templatedataboundcontrol.cs#2)]
 [!code-vb[TemplatedDataBoundControl#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TemplatedDataBoundControl/VB/templatedataboundcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wird ausgelöst, wenn der <paramref name="child" />-Parameter kein Steuerelement angibt</exception>
        <exception cref="T:System.Web.HttpException">Wird ausgelöst, wenn <see cref="T:System.Web.UI.ControlCollection" /> schreibgeschützt ist</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.AddAt(System.Int32,System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public virtual void AddAt (int index, System.Web.UI.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAt(int32 index, class System.Web.UI.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.AddAt(System.Int32,System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAt (index As Integer, child As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAt(int index, System::Web::UI::Control ^ child);" />
      <MemberSignature Language="F#" Value="abstract member AddAt : int * System.Web.UI.Control -&gt; unit&#xA;override this.AddAt : int * System.Web.UI.Control -&gt; unit" Usage="controlCollection.AddAt (index, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="child" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="index">Die Position im Array, an der das untergeordnete Steuerelement hinzugefügt werden soll</param>
        <param name="child">Der der Auflistung hinzuzufügende <see cref="T:System.Web.UI.Control" />.</param>
        <summary>Fügt der Auflistung das angegebene <see cref="T:System.Web.UI.Control" />-Objekt an der angegebenen Indexposition hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das hinzugefügte Steuerelement kann es sich um eine Instanz von ASP.NET-Serversteuerelementen, ein benutzerdefiniertes Serversteuerelement, die, das Sie erstellen, oder ein literales Steuerelement sein.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.UI.ControlCollection.AddAt%2A> Methode zum Erstellen eines neuen <xref:System.Web.UI.LiteralControl> mit dem Namen `ChildControl2` und fügen sie der `myButton` des Steuerelements <xref:System.Web.UI.ControlCollection> Auflistung an der Indexposition 1.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#1)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="child" />-Parameter gibt kein Steuerelement an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als 0 (null) oder größer als die <see cref="P:System.Web.UI.ControlCollection.Count" />-Eigenschaft.</exception>
        <exception cref="T:System.Web.HttpException">
          <see cref="T:System.Web.UI.ControlCollection" /> ist schreibgeschützt.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.Add(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="controlCollection.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt sämtliche Steuerelemente aus dem <see cref="T:System.Web.UI.ControlCollection" />-Objekt des aktuellen Serversteuerelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um eines benutzerdefinierten Steuerelements zu leeren <xref:System.Web.UI.ControlCollection> beim Überschreiben der <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType> und <xref:System.Web.UI.Control.DataBind%2A> Methoden. Hierzu, bei der Entwicklung zusammengesetzter, auf Vorlagen basierende Steuerelemente oder auf Vorlagen basierenden datengebundenen Steuerelementen.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType> -Methode und der Verwendung der <xref:System.Web.UI.ControlCollection.Clear%2A> Methode, um alle untergeordneten Steuerelemente zuvor im Löschen der <xref:System.Web.UI.ControlCollection> Objekt. In diesem Fall müssen Sie dies, dass veraltete Objekte des Steuerelements <xref:System.Web.UI.ControlCollection> nicht nicht ordnungsgemäß angezeigt werden.  
  
 [!code-csharp[TemplatedDataBoundControl#2](~/samples/snippets/csharp/VS_Snippets_WebNet/TemplatedDataBoundControl/CS/templatedataboundcontrol.cs#2)]
 [!code-vb[TemplatedDataBoundControl#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TemplatedDataBoundControl/VB/templatedataboundcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (System.Web.UI.Control c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Web.UI.Control c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Contains(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (c As Control) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Web::UI::Control ^ c);" />
      <MemberSignature Language="F#" Value="abstract member Contains : System.Web.UI.Control -&gt; bool&#xA;override this.Contains : System.Web.UI.Control -&gt; bool" Usage="controlCollection.Contains c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="c">Das Serversteuerelement, nach dem in der Auflistung gesucht werden soll</param>
        <summary>Bestimmt, ob sich das angegebene Serversteuerelement im <see cref="T:System.Web.UI.ControlCollection" />-Objekt des übergeordneten Serversteuerelements befindet</summary>
        <returns>
          <see langword="true" />, wenn das angegebene Serversteuerelement in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[System.Web.UI.ctrlCollection_Contains#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.CtrlCollection_Contains/CS/ctrlcollection_contains.cs.aspx#1)]
 [!code-vb[System.Web.UI.ctrlCollection_Contains#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.CtrlCollection_Contains/VB/ctrlcollection_contains.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="controlCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Das <see cref="T:System.Array" />, in das die untergeordneten Elemente kopiert werden.</param>
        <param name="index">Der nullbasierte relative Index im <c>Array</c>, an dem der Kopiervorgang beginnt.</param>
        <summary>Kopiert die im <see cref="T:System.Web.UI.ControlCollection" />-Objekt gespeicherten untergeordneten Steuerelemente in ein <see cref="T:System.Array" />-Objekt. Dabei wird mit der angegebenen Indexposition im <see cref="T:System.Array" /> begonnen.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="array" /> ist nicht <see langword="null" /> und nicht eindimensional.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.UI.ControlCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Serversteuerelemente im <see cref="T:System.Web.UI.ControlCollection" />-Objekt für das angegebene ASP.NET-Serversteuerelement ab.</summary>
        <value>Die Anzahl der Serversteuerelemente in <see cref="T:System.Web.UI.ControlCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Web.UI.ControlCollection.Count%2A> Eigenschaft eines Steuerelements durchlaufen <xref:System.Web.UI.ControlCollection> Objekt. Die Verwendung der <xref:System.Web.UI.Control.HasControls%2A?displayProperty=nameWithType> Eigenschaft überprüft, ob das Steuerelement untergeordnete Steuerelemente verfügt. Wenn <xref:System.Web.UI.Control.HasControls%2A?displayProperty=nameWithType> gibt `false`, wird der restliche Code wird nicht ausgeführt.  
  
 [!code-csharp[Classic Control.HasControls Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Control.HasControls Example/CS/source.cs#1)]
 [!code-vb[Classic Control.HasControls Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Control.HasControls Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="controlCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Enumerator ab, der das <see cref="T:System.Web.UI.ControlCollection" />-Objekt durchlaufen kann</summary>
        <returns>Der Enumerator zum Durchlaufen der Auflistung</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel erstellt eine Methode, die über Listet die <xref:System.Web.UI.ControlCollection> Auflistung von einer <xref:System.Web.UI.WebControls.Button> -Steuerelement, `myButton`. Wenn der Enumerator erstellt wird, die <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> -Eigenschaft überprüft, um zu ermitteln, ob der Vorgang threadsicher ist, und ist dies nicht der Fall, die <xref:System.Web.UI.ControlCollection.SyncRoot%2A> Eigenschaft wird verwendet, um ein Objekt, um verstreut sind vorgangsthreads zu erhalten. Wenn die Enumeration abgeschlossen ist, wird der Wert von der <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> Eigenschaft geschrieben wird, als die <xref:System.Web.UI.WebControls.Label.Text%2A> Eigenschaft eine <xref:System.Web.UI.WebControls.Label> Steuerelement auf der Seite mit.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (System.Web.UI.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class System.Web.UI.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.IndexOf(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (value As Control) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::Web::UI::Control ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : System.Web.UI.Control -&gt; int&#xA;override this.IndexOf : System.Web.UI.Control -&gt; int" Usage="controlCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="value">Das <see cref="T:System.Web.UI.Control" />, für das der Index zurückgegeben wird</param>
        <summary>Ruft den Index eines angegebenen <see cref="T:System.Web.UI.Control" />-Objekts in der Auflistung ab</summary>
        <returns>Der Index des angegebenen Serversteuerelements Wenn das Serversteuerelement zu diesem Zeitpunkt kein Member der Auflistung ist, wird -1 zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um zu bestimmen, die Indexposition des angegebenen Steuerelements in der <xref:System.Web.UI.ControlCollection> Objekt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.UI.ControlCollection.IndexOf%2A> Methode, um die Indexposition eines Steuerelements zu schreiben `myLiteralControl`in die <xref:System.Web.UI.ControlCollection> Auflistung von einem <xref:System.Web.UI.WebControls.Button> Steuerelement mit dem Namen `myButton`.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#1)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Web.UI.ControlCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Web.UI.ControlCollection" /> schreibgeschützt ist.</summary>
        <value>
          <see langword="true" />, wenn das Steuerelement schreibgeschützt ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel erstellt eine Methode, die über Listet die <xref:System.Web.UI.ControlCollection> Auflistung von einer <xref:System.Web.UI.WebControls.Button> -Steuerelement, `myButton`. Wenn der Enumerator erstellt wird, die <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> -Eigenschaft überprüft, um zu ermitteln, ob der Vorgang threadsicher ist, und ist dies nicht der Fall, die <xref:System.Web.UI.ControlCollection.SyncRoot%2A> Eigenschaft wird verwendet, um ein Objekt, um verstreut sind vorgangsthreads zu erhalten. Wenn die Enumeration abgeschlossen ist, wird der Wert von der <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> Eigenschaft geschrieben wird, als die <xref:System.Web.UI.WebControls.Label.Text%2A> Eigenschaft eine <xref:System.Web.UI.WebControls.Label> Steuerelement auf der Seite mit.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Web.UI.ControlCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Web.UI.ControlCollection" />-Objekt synchronisiert ist.</summary>
        <value>Diese Eigenschaft ist immer <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel erstellt eine Methode, die über Listet die <xref:System.Web.UI.ControlCollection> Auflistung von einer <xref:System.Web.UI.WebControls.Button> -Steuerelement, `myButton`. Wenn der Enumerator erstellt wird, die <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> -Eigenschaft überprüft, um zu ermitteln, ob der Vorgang threadsicher ist, und ist dies nicht der Fall, die <xref:System.Web.UI.ControlCollection.SyncRoot%2A> Eigenschaft wird verwendet, um ein Objekt, um verstreut sind vorgangsthreads zu erhalten. Wenn die Enumeration abgeschlossen ist, wird der Wert von der <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> Eigenschaft geschrieben wird, als die <xref:System.Web.UI.WebControls.Label.Text%2A> Eigenschaft eine <xref:System.Web.UI.WebControls.Label> Steuerelement auf der Seite mit.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Control this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(index As Integer) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::Control ^ default[int] { System::Web::UI::Control ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Web.UI.Control" Usage="System.Web.UI.ControlCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Die Position des Serversteuerelements in <see cref="T:System.Web.UI.ControlCollection" /></param>
        <summary>Ruft im <see cref="T:System.Web.UI.ControlCollection" />-Objekt an der angegebenen Indexposition einen Verweis auf das Serversteuerelement ab</summary>
        <value>Der Verweis auf das Steuerelement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.UI.ControlCollection.Item%2A> Eigenschaft, um anzugeben, die Indexposition eines untergeordneten Elements zu steuern, wird diese entfernt eine <xref:System.Web.UI.ControlCollection.Remove%2A> Methodenaufruf. Dies erfolgt durch die `myButton.Controls.Remove` Syntax.  
  
 [!code-aspx-csharp[ControlCollection_ReSubmit_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlCollection_ReSubmit_2/CS/controlcollection_copyto.cs.aspx#1)]
 [!code-aspx-vb[ControlCollection_ReSubmit_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlCollection_ReSubmit_2/VB/controlcollection_copyto.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als 0 (null) oder größer oder gleich <see cref="P:System.Web.UI.ControlCollection.Count" />.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Control Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control Owner" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Owner" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Owner As Control" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::Control ^ Owner { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.Web.UI.Control" Usage="System.Web.UI.ControlCollection.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das ASP.NET-Serversteuerelement ab, zu dem das <see cref="T:System.Web.UI.ControlCollection" />-Objekt gehört</summary>
        <value>Das <see cref="T:System.Web.UI.Control" />, zu dem <see cref="T:System.Web.UI.ControlCollection" /> gehört.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird eine benutzerdefinierte <xref:System.Web.UI.ControlCollection> -Klasse, überschreibt der <xref:System.Web.UI.ControlCollection.%23ctor%2A> Methode zum Schreiben von Nachrichten (darunter den Namen der <xref:System.Web.UI.ControlCollection.Owner%2A> Eigenschaft) in das Ablaufverfolgungsprotokoll, wenn eine Instanz der Auflistung erstellt wird. Ablaufverfolgung für die Seite oder Anwendung für dieses Beispiel funktioniert, muss aktiviert werden.  
  
 [!code-csharp[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/cs/controlcollection_7.cs#1)]
 [!code-vb[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/VB/controlcollection_7.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Web.UI.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Web.UI.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Remove(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (value As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Web::UI::Control ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Web.UI.Control -&gt; unit&#xA;override this.Remove : System.Web.UI.Control -&gt; unit" Usage="controlCollection.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="value">Das zu entfernende Serversteuerelement</param>
        <summary>Entfernt das angegebene Serversteuerelement aus dem <see cref="T:System.Web.UI.ControlCollection" />-Objekt des übergeordneten Serversteuerelements</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie zum Entfernen eines Steuerelements über eine Indexposition der <xref:System.Web.UI.ControlCollection.RemoveAt%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.UI.ControlCollection.Remove%2A> Methode so löschen Sie ein untergeordnetes Steuerelement aus der `myButton` -Steuerelement. Zunächst verwendet der Code die <xref:System.Web.UI.ControlCollection.Contains%2A> Methode, um zu bestimmen, ob die `myChildControl` ist Bestandteil der <xref:System.Web.UI.ControlCollection> Objekts und, wenn es sich handelt, werden entfernt.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#4)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ControlCollection.RemoveAt(System.Int32)" />
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="controlCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der Ordinalindex des Serversteuerelements, das aus der Auflistung entfernt werden soll</param>
        <summary>Entfernt ein untergeordnetes Steuerelement an der angegebenen Indexposition aus dem <see cref="T:System.Web.UI.ControlCollection" />-Objekt</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie zum Entfernen eines Steuerelements aus der Auflistung, die basierend auf dessen Wert die <xref:System.Web.UI.ControlCollection.Remove%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.UI.ControlCollection.RemoveAt%2A> Methode so löschen Sie ein untergeordnetes Steuerelement aus der `myButton` -Steuerelement. Der Methodenaufruf gibt zuerst eine Indexposition 1, die von dem das Steuerelement gelöscht wird. Im Beispiel werden dann Schreibvorgänge auf die enthaltende Seite eine Textnachricht, die besagt, dass das Steuerelement an diesem Speicherort aus gelöscht wurde die <xref:System.Web.UI.ControlCollection> Auflistung.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#5)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Wird ausgelöst, wenn <see cref="T:System.Web.UI.ControlCollection" /> schreibgeschützt ist</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.Remove(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Web.UI.ControlCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, mit dem der Zugriff auf die Steuerelementauflistung synchronisiert werden kann</summary>
        <value>Das <see cref="T:System.Object" />, mit dem die Auflistung synchronisiert wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel erstellt eine Methode, die über Listet die <xref:System.Web.UI.ControlCollection> Auflistung von einer <xref:System.Web.UI.WebControls.Button> -Steuerelement, `myButton`. Wenn der Enumerator erstellt wird, die <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> -Eigenschaft überprüft, um zu ermitteln, ob der Vorgang threadsicher ist, und ist dies nicht der Fall, die <xref:System.Web.UI.ControlCollection.SyncRoot%2A> Eigenschaft wird verwendet, um ein Objekt, um verstreut sind vorgangsthreads zu erhalten. Wenn die Enumeration abgeschlossen ist, wird der Wert von der <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> Eigenschaft geschrieben wird, als die <xref:System.Web.UI.WebControls.Label.Text%2A> Eigenschaft eine <xref:System.Web.UI.WebControls.Label> Steuerelement auf der Seite mit.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
  </Members>
</Type>
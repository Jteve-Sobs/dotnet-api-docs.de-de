<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e26743efb14c9e6fb39fe9acf3c0a223a98b0748" /><Meta Name="ms.sourcegitcommit" Value="9058026d5788c19bed0a767fc52b40a1eac8ebfe" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/24/2019" /><Meta Name="ms.locfileid" Value="72847506" /></Metadata><TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type XhtmlTextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Schreibt XHTML-spezifische Zeichen einschließlich aller aus XHTML (Extensible Hypertext Markup Language) abgeleiteten Variationen von XHTML-Modulen in den Ausgabestream für ein ASP.NET-Serversteuerelement für mobile Geräte. Überschreiben Sie die <see cref="T:System.Web.UI.XhtmlTextWriter" />-Klasse, um ein benutzerdefiniertes XHTML-Rendering für ASP.NET-Seiten und Serversteuerelemente bereitzustellen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XHTML ist eine XML-kompatible Markup Sprache, die auf HTML 4,1 basiert und es Ihnen ermöglicht, Websites zu erstellen, die für mehrere Gerätetypen geeignet sind. Es führt die von HTML bereitgestellte Benutzerfreundlichkeit mit den von XML bereitgestellten strengen Element Richtlinien zusammen, um eine Markup Sprache mit einer breiten Palette von Format-und Stil Optionen und eingeschränkter Markup-tagmehrdeutigkeit zu entwickeln. Die <xref:System.Web.UI.XhtmlTextWriter>-Klasse stellt Formatierungsfunktionen bereit, die ASP.NET-Server Steuerelemente verwenden, wenn Sie XHTML-Inhalte an Clients Sie können die <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A>-Methode verwenden, um anzugeben, welcher Typ von XHTML der TextWriter rendert. Unterstützte Dokumenttypen werden in der <xref:System.Web.UI.XhtmlMobileDocType>-Enumeration definiert.  
  
 Die <xref:System.Web.UI.XhtmlTextWriter>-Klasse rendert zwei Sätze von Attributen für-Elemente. Ein Satz ist eine Auflistung allgemeiner Attribute, auf die in der <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A>-Eigenschaft verwiesen wird. Die zweite Menge ist eine Auflistung von Element spezifischen Attributen, auf die in der <xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A>-Eigenschaft verwiesen wird. Weitere Informationen zu den Elementen und Stilen, die gerendert werden, finden Sie in der XHTML Modularisierungsspezifikation auf der [World Wide Web Consortium-Website (W3C)](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 Sie können die Member der <xref:System.Web.UI.XhtmlTextWriter>-Klasse und alle abgeleiteten Klassen verwenden, um benutzerdefinierte TextWriter zu erstellen, die in benutzerdefinierten XHTML-Seiten Adaptern oder Klassen Adaptern verwendet werden. Sie können auch abgeleitete Klassen erstellen, die das Standardverhalten der <xref:System.Web.UI.XhtmlTextWriter>-Klasse überschreiben.  
  
 Standardmäßig werden bei der Arbeit mit Browsern, die HTML 4,0 unterstützen, ASP.NET Seiten und Steuerelemente mit dem XHTML 1,1-Standard kompatibel sein. Weitere Informationen finden Sie unter [XHTML-Standards in Visual Studio und ASP.net](https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97).  
  
 Der <xref:System.Web.UI.HtmlTextWriter> gibt XHTML aus, es sei denn, Sie konfigurieren ASP.net speziell für das Rendering von XHTML-Markup. Weitere Informationen finden Sie unter [Vorgehensweise: Konfigurieren von XHTML-Rendering in ASP.NET Websites](https://docs.microsoft.com/previous-versions/aspnet/ms178159(v=vs.100)).  
  
   
  
## Examples  
 Das Codebeispiel in diesem Abschnitt enthält vier Teile. Im ersten Beispiel wird veranschaulicht, wie eine abgeleitete Klasse erstellt wird. Im zweiten Codebeispiel wird veranschaulicht, wie ein benutzerdefiniertes Steuerelement erstellt wird. Das dritte Codebeispiel veranschaulicht die Verwendung des benutzerdefinierten Steuer Elements. Im vierten Codebeispiel wird der Code bereitstellt, der zum Ausführen des benutzerdefinierten Steuer Elements erforderlich ist.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine benutzerdefinierte Klasse erstellt wird, die von der <xref:System.Web.UI.XhtmlTextWriter>-Klasse abgeleitet wird. Sie verfügt über zwei Konstruktoren, bei denen es sich um einen Standardwert für alle Klassen handelt, die direkt oder indirekt von der <xref:System.Web.UI.HtmlTextWriter> Klasse erben. Der erste Konstruktor nimmt ein <xref:System.IO.TextWriter>-Objekt als Parameter an und ruft den zweiten Konstruktor auf, wobei die folgenden beiden Parameterwerte übergeben werden:  
  
-   Die <xref:System.IO.TextWriter>-Instanz.  
  
-   Der Wert der <xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType>-Eigenschaft, die den Standardzeilen Einzug definiert, der vom XHTML-Textwriter verwendet wird.  
  
 In diesem Codebeispiel wird außerdem veranschaulicht das Überschreiben der <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> und <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> Methoden zum Filtern nach Größe und Farbe Sie Stil, bzw. Darüber hinaus überschreibt Sie die Methoden <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> und <xref:System.Web.UI.HtmlTextWriter.EndRender%2A>, um vor und nach dem Rendern eines Steuer Elements eine Text Zeichenfolge zu schreiben.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie ein benutzerdefiniertes <xref:System.Web.UI.WebControls.Label> Steuerelement namens `TestLabel` und einen benutzerdefinierten Adapter mit dem Namen `XhtmlTestLabelAdapter` erstellen, der den Inhalt des-Steuer Elements als XHTML rendert  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie das benutzerdefinierte Steuerelement `TestLabel` auf einer ASP.NET-Webseite verwendet wird.  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 Um das benutzerdefinierte Steuerelement im vorangehenden Codebeispiel zu verwenden, fügen Sie einer von zwei Dateien das folgende `<controlAdapters>`-Element hinzu. Sie können es der entsprechenden Computer weiten Datei im Unterverzeichnis für einen bestimmten Browser hinzufügen, als Unterordner des .NET Framework Konfigurations Verzeichnisses. Alternativ können Sie es einer benutzerdefinierten Browser Datei im Verzeichnis App_Browsers unter dem Stammverzeichnis der Webanwendung hinzufügen.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <related type="Article" href="https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97">ASP.net-und XHTML-Konformität</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.XhtmlTextWriter" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Die <see cref="T:System.IO.TextWriter" />-Instanz, die XHTML-Inhalte rendert.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.XhtmlTextWriter" />-Klasse, die den im <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />-Feld angegebenen Zeileneinzug verwendet. Wenn Sie den Standardzeileneinzug nicht ändern möchten, verwenden Sie den <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />-Konstruktor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A>-Konstruktor, der ein <xref:System.IO.TextWriter>-Objekt als Parameter annimmt, Ruft den zweiten Konstruktor auf und übergibt zwei Parameterwerte:  
  
-   Die <xref:System.IO.TextWriter>-Instanz.  
  
-   Der im Feld <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> angegebene Zeichen folgen Wert, der den Tabstopps definiert, der vom XHTML-Textwriter verwendet wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die beiden Konstruktoren erstellt werden, die für alle Klassen, die direkt oder indirekt von der <xref:System.Web.UI.HtmlTextWriter> Klasse abgeleitet werden, für eine benutzerdefinierte Klasse, die von der <xref:System.Web.UI.XhtmlTextWriter>-Klasse abgeleitet ist, standardmäßig sind.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Die <see cref="T:System.IO.TextWriter" />-Instanz, die XHTML-Inhalte rendert.</param>
        <param name="tabString">Die Zeichenfolge, die zum Rendern eines Zeileneinzugs verwendet wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.XhtmlTextWriter" />-Klasse mit dem angegebenen Zeileneinzug.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die beiden Konstruktoren erstellt werden, die für alle Klassen, die direkt oder indirekt von der <xref:System.Web.UI.HtmlTextWriter> Klasse abgeleitet werden, für eine benutzerdefinierte Klasse, die von der <xref:System.Web.UI.XhtmlTextWriter>-Klasse abgeleitet ist, standardmäßig sind.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Das XHTML-Element, dem das Attribut hinzugefügt werden soll.</param>
        <param name="attributeName">Das hinzuzufügende Attribut.</param>
        <summary>Fügt einem XHTML-Element ein Attribut hinzu. Die <see cref="T:System.Web.UI.XhtmlTextWriter" />-Eigenschaft verweist auf die Auflistung elementspezifischer Attribute für das <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A>-Methode, um einem XHTML-Element ein Attribut hinzuzufügen. Das hinzugefügte Attribut kann dann vom <xref:System.Web.UI.XhtmlTextWriter> Objekt erkannt und gerendert werden. Verwenden Sie die <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A>-Methode, um zu verhindern, dass der Writer ein gemeinsames Attribut eines XHTML-Elements rendert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Collections.Hashtable" />-Objekt mit allgemeinen Attributen der Markuptags für das <see cref="T:System.Web.UI.XhtmlTextWriter" />-Objekt ab.</summary>
        <value>Ein <see cref="T:System.Collections.Hashtable" />-Objekt, das allgemeine Attribute enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A>-Auflistung enthält Attribute, die in XHTML-Elementen zulässig sind und die in der <xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A>-Eigenschaft nicht unterdrückt werden. Weitere Informationen zu allgemeinen Attributen finden Sie auf der [World Wide Web Consortium-Website (W3C)](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 Wenn eine neue Instanz der <xref:System.Web.UI.XhtmlTextWriter>-Klasse erstellt wird, werden die folgenden allgemeinen Attribute initialisiert:  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementSpecificAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Collections.Hashtable" />-Objekt mit elementspezifischen Attributen ab.</summary>
        <value>Ein <see cref="T:System.Collections.Hashtable" />-Objekt mit elementspezifischen Attributen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A>-Methode, um einem XHTML-Element erkannte Attribute hinzuzufügen. Um allgemeine Attribute für ein XHTML-Element zu entfernen, verwenden Sie die <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A>-Methode.  
  
 Wenn eine neue Instanz der <xref:System.Web.UI.XhtmlTextWriter>-Klasse erstellt wird, wird das <xref:System.Collections.Hashtable> Objekt der Element spezifischen Attribute mit den in der folgenden Tabelle gezeigten Attributen aufgefüllt.  
  
|Element|Attribute|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`, `class`, `title`|  
|`<form>`|`action`, `method`, `enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`, `xml:lang`, `xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`, `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`, `disabled`|  
|`<option>`|`selected`, `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`, `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`, `valign`|  
  
 Weitere Informationen zu den Elementen und Stilen, die gerendert werden, finden Sie in der XHTML Modularisierungsspezifikation auf der [World Wide Web Consortium-Website (W3C)](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="override this.IsValidFormAttribute : string -&gt; bool" Usage="xhtmlTextWriter.IsValidFormAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">Der zu überprüfende Attributname.</param>
        <summary>Prüft ein XHTML-Attribut darauf, ob es im öffnenden Tag eines <see langword="&lt;form&gt;" />-Elements gerendert werden kann.</summary>
        <returns><see langword="true" />, wenn das Attribut auf ein <see langword="&lt;form&gt;" />-Element angewendet werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist nützlich, um ein Attribut bedingt zu Rendering, abhängig davon, ob es vom XHTML-Dokumenttyp des anfordernden Geräts unterstützt wird.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist Teil eines größeren Beispiels, das ein benutzerdefiniertes <xref:System.Web.UI.WebControls.Label> Steuerelement und einen Adapter erstellt, der den Inhalt des-Steuer Elements als XHTML rendert.  
  
 In diesem Codebeispiel wird veranschaulicht, wie eine boolesche Variable namens `attTest` erstellt und auf den Rückgabewert festgelegt wird, der sich aus dem Aufruf der <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A>-Methode mit dem Parameterwert "Style" ergibt. Wenn die <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A>-Methode `true`zurückgibt, werden die Stile, die dem-Steuerelement zugeordnet sind, mithilfe der Methoden <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType> und <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType> gerendert. Wenn der `attTest` Wert `false`ist, werden die Stile nicht gerendert. Stattdessen zeigt die Seite den Text für das Steuerelement an, ein `<br/>` Element, das von der <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A>-Methode gerendert wird, und eine Text Zeichenfolge, die den Benutzer darüber informiert, dass der XHTML-Inhalt des Steuer Elements bedingt gerendert  
  
 Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Web.UI.XhtmlTextWriter>-Klasse bereitgestellt wird.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="xhtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Das zu rendernde XHTML-Attribut.</param>
        <param name="value">Der dem XHTML-Attribut zugewiesene Wert.</param>
        <param name="key">Der dem XHTML-Attribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />-Enumerationswert.</param>
        <summary>Bestimmt, ob das angegebene XHTML-Attribut und sein Wert im aktuellen Markupelement gerendert werden können.</summary>
        <returns><see langword="true" />, wenn das Attribut auf der Seite gerendert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A>-Methode überschrieben wird, um zu überprüfen, ob ein `size` Attribut für eines der von diesem TextWriter gerenderten Elemente gerendert wird. Wenn ein `size` Attribut gerendert wird, überprüft der Code, ob sein Wert 8 Punkt ist. Wenn dies der Fall ist, gibt die <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> Methode `true`zurück, sodass das Attribut und sein Wert wiedergegeben werden können. Wenn der Wert nicht 8 Punkte beträgt, gibt die <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> Methode `false`zurück, und das Attribut und sein Wert werden nicht gerendert. Wenn der Schlüsselparameter der <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A>-Methode nicht mit dem <xref:System.Web.UI.HtmlTextWriterAttribute.Size>-Attribut identisch ist, wird die Basisfunktionalität der <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A>-Methode entsprechend der Definition in der <xref:System.Web.UI.XhtmlTextWriter>-Klasse aufgerufen.  
  
 Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Web.UI.XhtmlTextWriter>-Klasse bereitgestellt wird.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="xhtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Das zu rendernde XHTML-Formatvorlagenattribut.</param>
        <param name="value">Der dem XHTML-Formatvorlagenattribut zugewiesene Wert.</param>
        <param name="key">Der dem XHTML-Formatvorlagenattribut zugeordnete <see cref="T:System.Web.UI.HtmlTextWriterStyle" />-Enumerationswert.</param>
        <summary>Bestimmt, ob das angegebene XHTML-Formatattribut und sein Wert im aktuellen Markupelement gerendert werden können.</summary>
        <returns><see langword="true" />, wenn das Formatvorlagenattribut gerendert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A>-Methode überschrieben wird, um zu überprüfen, ob ein <xref:System.Web.UI.HtmlTextWriterStyle.Color> Attribut für eines der Elemente gerendert wird, die von diesem TextWriter gerendert werden. Wenn ein <xref:System.Web.UI.HtmlTextWriterStyle.Color> Attribut gerendert wird, überprüft der Code, ob der Wert lila ist. Wenn der Wert lila ist, gibt die <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> Methode `false` zurück, und das Attribut und sein Wert werden nicht gerendert. Wenn das <xref:System.Web.UI.HtmlTextWriterStyle.Color>-Attribut auf einen anderen Wert festgelegt ist, gibt die <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A>-Methode `true` zurück, und das-Attribut und sein Wert werden gerendert. Wenn der Schlüsselparameter der <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A>-Methode nicht mit dem <xref:System.Web.UI.HtmlTextWriterStyle.Color>-Attribut identisch ist, wird die Basisfunktionalität der <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A>-Methode entsprechend der Definition in der <xref:System.Web.UI.XhtmlTextWriter>-Klasse aufgerufen.  
  
 Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Web.UI.XhtmlTextWriter>-Klasse bereitgestellt wird.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Das XHTML-Element, aus dem ein Attribut entfernt werden soll.</param>
        <param name="attributeName">Das Attribut, das aus dem angegebenen XHTML-Element entfernt werden soll.</param>
        <summary>Entfernt ein Attribut aus der <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />-Auflistung eines Elements.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberSignature Language="F#" Value="abstract member SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit&#xA;override this.SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit" Usage="xhtmlTextWriter.SetDocType docType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType">Einer der <see cref="T:System.Web.UI.XhtmlMobileDocType" />-Enumerationswerte.</param>
        <summary>Gibt den XHTML-Dokumenttyp an, den der Textwriter auf der Seite oder im Steuerelement rendern soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A>-Methode in einem benutzerdefinierten Seiten Adapter, um den Typ des XHTML zu definieren, das Sie auf dem anfordernden Gerät darstellen möchten. Unterstützte Dokumenttypen werden in der <xref:System.Web.UI.XhtmlMobileDocType>-Enumeration definiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressCommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Collections.Hashtable" />-Objekt von Elementen ab, für die <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />-Attribute unterdrückt werden.</summary>
        <value>Eine <see cref="T:System.Collections.Hashtable" /> von Elementen, die eine Auflistung von nicht gerenderten <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> enthalten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die unterdrückte Attribut Auflistung enthält eine Liste der XHTML-Elemente, für die keine <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> Attribute gerendert werden.  
  
 Wenn eine neue Instanz der <xref:System.Web.UI.XhtmlTextWriter>-Klasse erstellt wird, enthält das <xref:System.Collections.Hashtable> Objekt von Elementen, für die <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> Attribute unterdrückt werden, Folgendes:  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="xhtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt ein <see langword="&lt;br/&gt;" />-Element in den XHTML-Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die geerbte <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType> Methode überschrieben wird, um eine Text Zeichenfolge mit der <xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType>-Methode und ein `<br/>`-Element mit der <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A>-Methode zu schreiben  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

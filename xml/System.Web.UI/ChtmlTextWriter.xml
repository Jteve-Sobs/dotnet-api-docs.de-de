<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="10e7a35bd9b0c5d58d3648b9bb15ef936a074a6d" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86657022" /></Metadata><TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <TypeSignature Language="F#" Value="type ChtmlTextWriter = class&#xA;    inherit Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Schreibt eine Reihe von cHTML-spezifischen Zeichen und Text in den Ausgabestream eines ASP.NET-Serversteuerelements. Die <see cref="T:System.Web.UI.ChtmlTextWriter" />-Klasse stellt Formatierungsfunktionen bereit, die von ASP.NET-Serversteuerelementen beim Rendern von cHTML-Inhalten auf Clients verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML (cHTML) ist eine Teilmenge von HTML 2,0, HTML 3,2 und HTML 4,0 und soll auf Geräten mit eingeschränkter Arbeitsspeicher-und CPU-Leistung zusammen mit kleinen Anzeige Bildschirmen, eingeschränkten Formatierungsfunktionen und einer begrenzten Anzahl von Eingabeoptionen (z. b. einem Mobil telefontouchpad) gerencht werden. Daher wird von cHTML Folgendes nicht unterstützt:  
  
-   JPEG-Bilder.  
  
-   Tabellen.  
  
-   Bild Zuordnungen.  
  
-   Mehrere Zeichen Schriftarten und-Stile.  
  
-   Hintergrundfarben und Bilder.  
  
-   SSE.  
  
-   Stylesheets.  
  
 Die- <xref:System.Web.UI.ChtmlTextWriter> Klasse wird von der- <xref:System.Web.UI.Html32TextWriter> Klasse abgeleitet, und viele Funktionen werden von der <xref:System.Web.UI.Html32TextWriter> -Klasse und der-Basisklasse für alle Markup Textschreiber, d. h. die-Klasse, bereitgestellt <xref:System.Web.UI.HtmlTextWriter> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Klasse mit `CustomChtmlTextWriter` dem Namen erstellt wird, die von der-Klasse abgeleitet wird <xref:System.Web.UI.ChtmlTextWriter> . Er erstellt zwei Konstruktoren und überschreibt die- <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> Methode, um zu verhindern, `bgcolor` dass das Style-Attribut in den Ausgabestream des-Objekts geschrieben wird <xref:System.Web.UI.ChtmlTextWriter> . Außerdem wird eine Klasse mit dem Namen erstellt, `ChtmlCustomPageAdapter` die eine Methode definiert, `CreateCustomChtmlTextWriter` , die eine Instanz der-Klasse erstellt und zurückgibt `CustomChtmlTextWriter` . Der `CustomChtmlTextWriter` rendert dann cHTML-Inhalt für eine Seite auf Geräten mit Browsern, die cHTML-Markup verwenden.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.ChtmlTextWriter" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, der den Inhalt des Markups rendert.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.ChtmlTextWriter" />-Klasse, die für den Zeileneinzug die <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />-Konstante verwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.UI.ChtmlTextWriter> Klasse verfügt über zwei Konstruktoren, die für alle Klassen, die direkt oder indirekt von der-Klasse abgeleitet sind, den Standardwert haben <xref:System.Web.UI.HtmlTextWriter> .  
  
 Der <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> Konstruktor, der eine Instanz der- <xref:System.IO.TextWriter> Klasse als Parameter annimmt, Ruft den zweiten Konstruktor auf und übergibt ihm zwei Parameterwerte:  
  
-   Die <xref:System.IO.TextWriter>.  
  
-   Der im Feld angegebene Zeichen folgen Wert <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> , der den Tabstopps definiert, der vom XHTML-Textwriter verwendet wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Klasse mit dem Namen erstellt `ChtmlCustomPageAdapter` und eine Methode definiert wird, `CreateCustomChtmlTextWriter` die eine Instanz der-Klasse erstellt und zurückgibt `CustomChtmlTextWriter` . Der `CustomChtmlTextWriter` rendert dann cHTML-Inhalt für Seiten auf Geräten mit Browsern, die cHTML-Markup verwenden.  
  
 Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.Web.UI.ChtmlTextWriter> .  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, der den Inhalt des Markups rendert.</param>
        <param name="tabString">Die Anzahl der in <see cref="P:System.Web.UI.HtmlTextWriter.Indent" /> definierten Abstände.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.ChtmlTextWriter" />-Klasse mit dem angegebenen Zeileneinzug.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> Konstruktor, der sowohl eine Instanz der <xref:System.IO.TextWriter> -Klasse als auch eine Zeichenfolge als Parameter annimmt, Ruft den Konstruktor auf, der <xref:System.Web.UI.Html32TextWriter> dieselben Parameter annimmt, wenn er eine Instanz der- <xref:System.Web.UI.ChtmlTextWriter> Klasse erstellt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine benutzerdefinierte Klasse namens erstellt `CustomChtmlTextWriter` wird, die von der-Klasse abgeleitet wird <xref:System.Web.UI.ChtmlTextWriter> . Es werden zwei Konstruktoren erstellt, die Sie verwenden können, um eine Instanz der benutzerdefinierten-Klasse mit demselben Muster wie alle Klassen zu erstellen, die direkt oder indirekt von der-Klasse abgeleitet werden <xref:System.Web.UI.HtmlTextWriter> .  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Das cHTML-Element, dem das Attribut hinzugefügt werden soll.</param>
        <param name="attributeName">Das Attribut, das <paramref name="elementName" /> hinzugefügt werden soll.</param>
        <summary>Fügt einem cHTML-Element des <see cref="T:System.Web.UI.ChtmlTextWriter" />-Objekts ein Attribut hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> Methode fügt einem cHTML-Element ein Attribut hinzu. Das erkannte Attribut wird in der Auflistung der erkannten Attribute <xref:System.Collections.Hashtable> des <xref:System.Web.UI.ChtmlTextWriter> Objekts gespeichert, auf das von der-Eigenschaft verwiesen wird <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> .  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalSuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Collections.Hashtable" />-Objekt mit global inaktiven Attributen auf, die nicht auf cHTML-Elementen gerendert werden können.</summary>
        <value>Eine <see cref="T:System.Collections.Hashtable" /> von global inaktiven cHTML-Attributen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Liste sind die Global unterdrückten Attribute aufgeführt, die festgelegt werden, wenn eine neue Instanz der- <xref:System.Web.UI.ChtmlTextWriter> Klasse erstellt wird.  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="chtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Das zu rendernde cHTML-Attribut.</param>
        <param name="value">Der <paramref name="name" /> zugewiesene Wert.</param>
        <param name="key">Der <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, der <paramref name="name" /> zugeordnet ist.</param>
        <summary>Bestimmt, ob das angegebene cHTML-Attribut und dessen Wert auf der anfordernden Seite gerendert werden. Sie können Attribute filtern, die Sie nicht auf Geräten rendern möchten, die cHTML unterstützen, indem Sie die <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />-Methode in Klassen überschreiben, die aus der <see cref="T:System.Web.UI.ChtmlTextWriter" />-Klasse abgeleitet sind.</summary>
        <returns><see langword="true" />, um das Attribut und dessen Wert in den <see cref="T:System.Web.UI.ChtmlTextWriter" />-Ausgabestream zu schreiben, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig verhindert die- <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> Methode, dass Global unterdrückte Attribute, die in der <xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A> -Eigenschaft und den Element spezifischen, unterdrückten Attributen aufgelistet sind, die in der-Eigenschaft aufgelistet sind, in <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A> den Ausgabestream geschrieben werden. Sie können das Verhalten der- <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> Methode in Klassen überschreiben, die von der-Klasse abgeleitet werden <xref:System.Web.UI.ChtmlTextWriter> .  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht, wie eine benutzerdefinierte Klasse verwendet wird, die die-Methode überschreibt, <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> um zu verhindern, dass das `bgcolor` Attribut in den cHTML-Ausgabestream geschrieben wird. Anschließend wird die Funktionalität aufgerufen, die von der-Methode der-Klasse bereitgestellt wird, <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> <xref:System.Web.UI.ChtmlTextWriter> um sicherzustellen, dass auch das Standardverhalten verwendet wird.  
  
 Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.Web.UI.ChtmlTextWriter> .  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="chtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Formatvorlagenattributs, der gerendert werden soll.</param>
        <param name="value">Eine Zeichenfolge mit dem <paramref name="name" /> zugewiesenen Wert.</param>
        <param name="key">Der <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, der <paramref name="name" /> zugeordnet ist.</param>
        <summary>Bestimmt, ob das angegebene cHTML-Markupformatattribut und sein Wert im aktuellen Markupelement gerendert werden können.</summary>
        <returns><see langword="true" />, wenn das Format gerendert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A> Methode gibt zurück `false` `key` , wenn gleich dem <xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration> -Feld und der-Wert ist `"line-through"` .  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="chtmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des zu rendernden cHTML-Elements.</param>
        <param name="key">Der <see cref="T:System.Web.UI.HtmlTextWriterTag" />, der <paramref name="name" /> zugeordnet ist.</param>
        <summary>Bestimmt, ob das angegebene cHTML-Markupelement auf der anfordernden Seite gerendert wird.</summary>
        <returns><see langword="true" />, wenn das angegebene cHTML-Markupelement gerendert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das cHTML-Element ein- `span` Element ist, <xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A> gibt die Methode zurück `false` . Für alle anderen Tags wird zurückgegeben `true` .  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Collections.Hashtable" />-Objekt von erkannten Attributen ab, die auf cHTML-Elementen gerendert werden können.</summary>
        <value>Eine <see cref="T:System.Collections.Hashtable" /> mit erkannten cHTML-Attributen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> Methode, um der erkannten Attribute-Auflistung erkannte Attribute hinzuzufügen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Das cHTML-Element, aus dem ein Attribut entfernt werden soll.</param>
        <param name="attributeName">Das Attribut, das aus <paramref name="elementName" /> entfernt werden soll.</param>
        <summary>Entfernt ein Attribut aus einem cHTML-Element des <see cref="T:System.Web.UI.ChtmlTextWriter" />-Objekts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der- <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> Methode wird ein Attribut aus einem cHTML-Element entfernt. Das erkannte Attribut wird aus der Auflistung der erkannten Attribute <xref:System.Collections.Hashtable> des <xref:System.Web.UI.ChtmlTextWriter> Objekts entfernt, auf das von der-Eigenschaft verwiesen wird <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> .  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Collections.Hashtable" />-Objekt von inaktiven Attributen ab, die vom Benutzer angegeben und nicht auf cHTML-Elementen gerendert werden.</summary>
        <value>Eine <see cref="T:System.Collections.Hashtable" /> mit inaktiven cHTML-Attributen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> Methode, um der unterdrückten Attribut Auflistung Attribute hinzuzufügen.  
  
 In der folgenden Liste werden die standardmäßigen unterdrückten Attribute angezeigt, die für ein-Element festgelegt werden, `div` Wenn eine neue Instanz der- <xref:System.Web.UI.ChtmlTextWriter> Klasse erstellt wird.  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 In der folgenden Liste werden die standardmäßigen unterdrückten Attribute angezeigt, die für ein-Element festgelegt werden, `span` Wenn eine neue Instanz der- <xref:System.Web.UI.ChtmlTextWriter> Klasse erstellt wird.  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="chtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt ein <see langword="br" />-Element in den cHTML-Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> Methode, um einen Zeilenumbruch in einen cHTML-Stream einzufügen.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie eine cHTML-Klasse und benutzerdefinierte Eigenschaften erstellt werden. Im zweiten Codebeispiel wird veranschaulicht, wie eine benutzerdefinierte Klasse auf einer Webseite verwendet wird.  
  
 Um den benutzerdefinierten `ChtmlSimplelabelAdapter` Adapter zu verwenden, fügen Sie den folgenden Code entweder der entsprechenden Computer weiten Datei im Unterverzeichnis für den Browser des .NET Framework Konfigurations Verzeichnisses oder einer benutzerdefinierten Browser Datei im App_Browsers Verzeichnis unter dem Stammverzeichnis der Webanwendung hinzu.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine cHTML-Adapter Klasse mit dem Namen `ChtmlSimpleLabelAdapter` für eine Klasse mit dem Namen erstellt wird `SimpleLabel` . Es erstellt eine benutzerdefinierte Eigenschaft, die `Control` der `ChtmlSimpleLabelAdapter` -Klasse den Zugriff auf die Member der `SimpleLabel` -Klasse ermöglicht und dann die-Methode überschreibt <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> . Bei der außer Kraft Setzung werden folgende Aktionen ausgeführt:  
  
-   Es wird ein Verweis auf ein-Objekt mit dem <xref:System.Web.UI.ChtmlTextWriter> Namen erstellt `w` , das von dem-Objekt abgeleitet wird, <xref:System.Web.UI.HtmlTextWriter> das als- `writer` Parameter für die-Methode übergeben wird <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> .  
  
-   Sie erstellt eine Zeichenfolge und legt Sie auf den `SimpleLabel.Text` Wert fest.  
  
-   Sie ruft die- <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode auf, um die von der- <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> Eigenschaft der Bezeichnung definierten Stile auf den cHTML-Ausgabestream anzuwenden.  
  
-   Er schreibt den `Text` Eigenschafts Wert in den Stream und schließt den styleblock durch Aufrufen der- <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methode.  
  
-   Die-Methode wird aufgerufen <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> , um ein- `br` Element im Ausgabestream nach dem Rendern von Text und Stilen zu rendern.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 Im folgenden Beispiel wird veranschaulicht, wie die- `SimpleLabel` Klasse in einer Webseite verwendet wird.  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteEncodedText : string -&gt; unit" Usage="chtmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Die Textzeichenfolge, die codiert und in den Ausgabestream geschrieben werden soll.</param>
        <summary>Codiert den angegebenen Text für das anfordernde Gerät und schreibt ihn dann in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der an die Methode übergebenen Text Parameter <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> ist `null` oder eine Länge von 0 (null) aufweist, wird nichts geschrieben.  
  
 Verwenden Sie die- <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> Methode, wenn eine Zeichenfolge eckige Klammern ( \< or > ) oder ein kaufmännisches und-Zeichen (&) enthält, und Sie sicherstellen möchten, dass Sie auf dem anfordernden Gerät korrekt gerendert werden.  
  
 Die <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> -Methode verwendet die-Methode der Basisklasse <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> .  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>

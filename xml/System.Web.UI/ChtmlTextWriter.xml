<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ef03c43dbc93b3127a7d0d0a57d992baf0a23e50" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="58874916" /></Metadata><TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <TypeSignature Language="F#" Value="type ChtmlTextWriter = class&#xA;    inherit Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Schreibt eine Reihe von cHTML-spezifischen Zeichen und Text in den Ausgabestream eines ASP.NET-Serversteuerelements. Die <see cref="T:System.Web.UI.ChtmlTextWriter" />-Klasse stellt Formatierungsfunktionen bereit, die von ASP.NET-Serversteuerelementen beim Rendern von cHTML-Inhalten auf Clients verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML, cHTML, ist eine Teilmenge der HTML 2.0 und HTML 3.2, HTML 4.0 auch auf Geräten mit eingeschränktem Arbeitsspeicher und CPU-Leistung, zusammen mit kleinen Bildschirmen, Formatierung, Funktionen und eine begrenzte Anzahl von Eingabeoptionen (z. B. ein Mobiltelefon beschränkt gerendert werden soll Touchpad). Aus diesem Grund unterstützt cHTML Folgendes nicht:  
  
-   JPEG-Bilder.  
  
-   Tabellen.  
  
-   Image zugeordnet ist.  
  
-   Mehrere Zeichenschriftarten und Formate.  
  
-   Hintergrundfarben und Bilder.  
  
-   Frames.  
  
-   Stylesheets.  
  
 Die <xref:System.Web.UI.ChtmlTextWriter> Klasse leitet sich von der <xref:System.Web.UI.Html32TextWriter> -Klasse und einen Großteil der Funktionalität erfolgt über die <xref:System.Web.UI.Html32TextWriter> und die Basisklasse für alle Markup-TextWriter, handelt es sich die <xref:System.Web.UI.HtmlTextWriter> Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer Klasse, die mit dem Namen `CustomChtmlTextWriter` , ergibt sich aus der <xref:System.Web.UI.ChtmlTextWriter> Klasse. Sie erstellt zwei Konstruktoren und überschreibt die <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> Methode, um zu verhindern, dass die `bgcolor` Style-Attribut aus, in den Ausgabestream geschrieben werden die <xref:System.Web.UI.ChtmlTextWriter> Objekt. Erstellt auch eine Klasse namens `ChtmlCustomPageAdapter` , definiert eine Methode, `CreateCustomChtmlTextWriter`, die erstellt und gibt eine Instanz des der `CustomChtmlTextWriter` Klasse. Die `CustomChtmlTextWriter` rendert dann cHTML-Inhalten für eine Seite für Geräte mit dem Browser, die cHTML-Markup verwenden.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.ChtmlTextWriter" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, der den Inhalt des Markups rendert.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.ChtmlTextWriter" />-Klasse, die für den Zeileneinzug die <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />-Konstante verwendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ChtmlTextWriter> Klasse besitzt zwei Konstruktoren, der standard für alle Klassen, die direkt oder indirekt von abgeleitet ist die <xref:System.Web.UI.HtmlTextWriter> Klasse.  
  
 Die <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> -Konstruktor nimmt eine Instanz von der <xref:System.IO.TextWriter> Klasse als Parameter verwendet, ruft den zweiten Konstruktor auf und übergibt sie zwei Parameterwerte:  
  
-   Die <xref:System.IO.TextWriter>.  
  
-   Der Zeichenfolgenwert, der im angegebenen die <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> -Feld, das die Tabstopps definiert, die von XHTML-Textwriter verwendet wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer Klasse, die mit dem Namen `ChtmlCustomPageAdapter` und definiert eine Methode, `CreateCustomChtmlTextWriter`, die erstellt und gibt eine Instanz des der `CustomChtmlTextWriter` Klasse. Die `CustomChtmlTextWriter` rendert dann cHTML-Inhalten für Seiten für Geräte mit dem Browser, die cHTML-Markup verwenden.  
  
 Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Web.UI.ChtmlTextWriter> Klasse.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, der den Inhalt des Markups rendert.</param>
        <param name="tabString">Die Anzahl der in <see cref="P:System.Web.UI.HtmlTextWriter.Indent" /> definierten Abstände.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.ChtmlTextWriter" />-Klasse mit dem angegebenen Zeileneinzug.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> -Konstruktor nimmt sowohl eine Instanz der der <xref:System.IO.TextWriter> -Klasse und eine Zeichenfolge als Parameter, die Aufrufe der <xref:System.Web.UI.Html32TextWriter> Konstruktor, der die gleichen Parameter verwendet, bei der Erstellung einer Instanz von der <xref:System.Web.UI.ChtmlTextWriter> Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer benutzerdefinierten Klasse, die mit dem Namen `CustomChtmlTextWriter` , ergibt sich aus der <xref:System.Web.UI.ChtmlTextWriter> Klasse. Erstellen von zwei Konstruktoren, die Sie verwenden können, um eine Instanz der benutzerdefinierten Klasse zu erstellen, mit dem gleichen Muster wie alle Klassen, die sich, direkt ableiten oder indirekt von der <xref:System.Web.UI.HtmlTextWriter> Klasse.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Das cHTML-Element, dem das Attribut hinzugefügt werden soll.</param>
        <param name="attributeName">Das Attribut, das <paramref name="elementName" /> hinzugefügt werden soll.</param>
        <summary>Fügt einem cHTML-Element des <see cref="T:System.Web.UI.ChtmlTextWriter" />-Objekts ein Attribut hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> Methode einem cHTML-Element ein Attribut hinzugefügt. Das erkannte Attribut befindet sich in der erkannten Attributen <xref:System.Collections.Hashtable> Auflistung von der <xref:System.Web.UI.ChtmlTextWriter> -Objekt, das vom verwiesen wird die <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalSuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Collections.Hashtable" />-Objekt mit global inaktiven Attributen auf, die nicht auf cHTML-Elementen gerendert werden können.</summary>
        <value>Eine <see cref="T:System.Collections.Hashtable" /> von global inaktiven cHTML-Attributen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgende Liste enthält die global inaktiven Attributen, die festgelegt werden, wenn eine neue Instanz der dem <xref:System.Web.UI.ChtmlTextWriter> -Klasse erstellt wird.  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="chtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Das zu rendernde cHTML-Attribut.</param>
        <param name="value">Der <paramref name="name" /> zugewiesene Wert.</param>
        <param name="key">Das <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, das <paramref name="name" /> zugeordnet ist.</param>
        <summary>Bestimmt, ob das angegebene cHTML-Attribut und dessen Wert auf der anfordernden Seite gerendert werden. Sie können Attribute filtern, die Sie nicht auf Geräten rendern möchten, die cHTML unterstützen, indem Sie die <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />-Methode in Klassen überschreiben, die aus der <see cref="T:System.Web.UI.ChtmlTextWriter" />-Klasse abgeleitet sind.</summary>
        <returns><see langword="true" />, um das Attribut und dessen Wert in den <see cref="T:System.Web.UI.ChtmlTextWriter" />-Ausgabestream zu schreiben, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Standardeinstellung die <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> Methode wird verhindert, dass global inaktiven Attributen, die in aufgeführt sind die <xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A> Eigenschaft und elementspezifischen, unterdrückt Attribute, die in aufgeführt sind die <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A> Eigenschaft aus, die in den Ausgabestream geschrieben werden. Sie können das Verhalten der überschreiben die <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> -Methode in der von abgeleiteten Klassen der <xref:System.Web.UI.ChtmlTextWriter> Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine benutzerdefinierte Klasse zu verwenden, die überschreibt die <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> Methode, um zu verhindern, dass die `bgcolor` Attribut aus, die in den cHTML-Ausgabestream geschrieben werden. Es ruft dann die Funktionen, die von der Basis bereitgestellt wird <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> Methode aus der <xref:System.Web.UI.ChtmlTextWriter> Klasse, um sicherzustellen, dass das Standardverhalten verwendet wird, zu.  
  
 Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Web.UI.ChtmlTextWriter> Klasse.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="chtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des Formatvorlagenattributs, der gerendert werden soll.</param>
        <param name="value">Eine Zeichenfolge mit dem <paramref name="name" /> zugewiesenen Wert.</param>
        <param name="key">Das <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, das <paramref name="name" /> zugeordnet ist.</param>
        <summary>Bestimmt, ob das angegebene cHTML-Markupformatattribut und sein Wert im aktuellen Markupelement gerendert werden können.</summary>
        <returns><see langword="true" />, wenn das Format gerendert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A> Methodenrückgabe `false` beim `key` ist gleich der <xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration> Feld und der Wert ist `"line-through"`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="chtmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge mit dem Namen des zu rendernden cHTML-Elements.</param>
        <param name="key">Das <see cref="T:System.Web.UI.HtmlTextWriterTag" />, das <paramref name="name" /> zugeordnet ist.</param>
        <summary>Bestimmt, ob das angegebene cHTML-Markupelement auf der anfordernden Seite gerendert wird.</summary>
        <returns><see langword="true" />, wenn das angegebene cHTML-Markupelement gerendert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das cHTML-Element ist eine `span` Element der <xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A> Methodenrückgabe `false`. Gibt für alle anderen Tags `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Collections.Hashtable" />-Objekt von erkannten Attributen ab, die auf cHTML-Elementen gerendert werden können.</summary>
        <value>Eine <see cref="T:System.Collections.Hashtable" /> mit erkannten cHTML-Attributen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> erkannten hinzuzufügenden Methode Attribute auf die Auflistung von erkannten Attributen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Das cHTML-Element, aus dem ein Attribut entfernt werden soll.</param>
        <param name="attributeName">Das Attribut, das aus <paramref name="elementName" /> entfernt werden soll.</param>
        <summary>Entfernt ein Attribut aus einem cHTML-Element des <see cref="T:System.Web.UI.ChtmlTextWriter" />-Objekts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> -Methode entfernt ein Attribut aus einem cHTML-Element. Das erkannte Attribut wird entfernt, anhand der erkannten Attribute <xref:System.Collections.Hashtable> Auflistung von der <xref:System.Web.UI.ChtmlTextWriter> -Objekt, das vom verwiesen wird die <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Collections.Hashtable" />-Objekt von inaktiven Attributen ab, die vom Benutzer angegeben und nicht auf cHTML-Elementen gerendert werden.</summary>
        <value>Eine <see cref="T:System.Collections.Hashtable" /> mit inaktiven cHTML-Attributen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> Methode, um die Attribute der attributauflistung unterdrückt hinzuzufügen.  
  
 Die folgende Liste enthält die standardmäßige unterdrückt Attribute, die für die festgelegt werden eine `div` -Element, wenn eine neue Instanz der dem <xref:System.Web.UI.ChtmlTextWriter> -Klasse erstellt wird.  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 Die folgende Liste enthält die standardmäßige unterdrückt Attribute, die für die festgelegt werden eine `span` -Element, wenn eine neue Instanz der dem <xref:System.Web.UI.ChtmlTextWriter> -Klasse erstellt wird.  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="chtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt ein <see langword="br" />-Element in den cHTML-Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> Methode zum Einfügen einer Zeile in einen Stream von cHTML zu unterbrechen.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie eine cHTML-Klasse und benutzerdefinierte Eigenschaften erstellen wird. Im zweiten Codebeispiel wird veranschaulicht, wie eine benutzerdefinierte Klasse auf einer Webseite verwendet wird.  
  
 Um die Verwendung der benutzerdefinierten `ChtmlSimplelabelAdapter` Adapter hinzufügen, der folgende code entweder die entsprechende computerweite Datei im Unterverzeichnis für den .NET Framework Configuration-Verzeichnis oder in einer benutzerdefinierten Browser-Datei im Verzeichnis App_Browsers unter der Web-Browser Stammverzeichnis der Anwendung.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer cHTML-Adapter-Klasse, die mit dem Namen `ChtmlSimpleLabelAdapter` für eine Klasse, die mit dem Namen `SimpleLabel`. Es erstellt eine benutzerdefinierte `Control` eine Eigenschaft, können die `ChtmlSimpleLabelAdapter` Klasse, um die Elemente der Zugriff auf die `SimpleLabel` -Klasse, und klicken Sie dann auf Außerkraftsetzungen der <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> Methode. Treten in der Außerkraftsetzung die folgenden Schritte aus:  
  
-   Erstellt einen Verweis auf eine <xref:System.Web.UI.ChtmlTextWriter> Objekt, mit dem Namen `w`, ergibt sich aus der <xref:System.Web.UI.HtmlTextWriter> -Objekt, das als übergeben wird die `writer` -Parameter für die <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> Methode.  
  
-   Es erstellt eine Zeichenfolge und legt es auf die `SimpleLabel.Text` Wert.  
  
-   Ruft die <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Methode, um die Stile angewendet werden, die von definiert sind die <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> -Eigenschaft der Bezeichnung in den cHTML-Ausgabestream.  
  
-   Er schreibt die `Text` Eigenschaftswert angibt, der dem Stream und der Formatblock durch Aufrufen der <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Methode.  
  
-   Ruft die <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> Methode zum Rendern einer `br` Element in den Ausgabestream, nach dem Rendern von Text und Stile.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 Im folgenden Beispiel wird veranschaulicht, wie die `SimpleLabel` Klasse auf einer Webseite.  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteEncodedText : string -&gt; unit" Usage="chtmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Die Textzeichenfolge, die codiert und in den Ausgabestream geschrieben werden soll.</param>
        <summary>Codiert den angegebenen Text für das anfordernde Gerät und schreibt ihn dann in den Ausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Textparameter übergeben wird, in der <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> Methode ist `null` oder hat die Länge 0 (null), wird nichts geschrieben wird.  
  
 Verwenden der <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> Methode, wenn eine Zeichenfolge mit spitzen Klammern enthält (\< oder >) oder ein kaufmännisches und-Zeichen (&), und stellen Sie sicher, dass sie ordnungsgemäß auf dem anfordernden Gerät gerendert werden sollen.  
  
 Die <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> Methode verwendet, der Basisklasse <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>
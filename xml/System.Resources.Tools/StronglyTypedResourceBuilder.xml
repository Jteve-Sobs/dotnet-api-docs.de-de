<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a80545bc8f3b284edde603f4882f47162dac39d1" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70353297" /></Metadata><TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <TypeSignature Language="F#" Value="type StronglyTypedResourceBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Bietet Unterstützung für stark typisierte Ressourcen. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel trennen Ressourcen Code von Inhalten in einer Anwendung. Das Erstellen und Verarbeiten dieser Ressourcen vereinfacht das entwickeln Lokalisier barer Anwendungen. Im .NET Framework werden Ressourcen normalerweise mithilfe der <xref:System.Resources.ResourceManager> -Klasse genutzt, die Methoden enthält, die zur Laufzeit Zugriff auf kulturspezifische Ressourcen bereitstellen. Weitere Informationen zum Erstellen und verbrauchen von Ressourcen finden Sie unter [Ressourcen in Desktop-Apps](https://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890).  
  
 Die Unterstützung von stark typisierten Ressourcen ist eine Kompilierzeit Funktion, die den Zugriff auf Ressourcen kapselt, indem Klassen erstellt werden, die einen`get`Satz statischer Schreib geschützter Eigenschaften () enthalten. Dies bietet eine alternative Möglichkeit, Ressourcen zu verwenden, anstatt die <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> - <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> Methode und die-Methode aufrufen zu müssen.  
  
 Die grundlegende Funktionalität für eine stark typisierte Ressourcen Unterstützung wird <xref:System.Resources.Tools.StronglyTypedResourceBuilder> von der-Klasse (sowie `/str` von der Befehlszeilenoption in " [Resgen. exe" (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)) bereitgestellt. Bei der Ausgabe der <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> -Methode handelt es sich um eine Klasse, die stark typisierte Eigenschaften enthält, die den Ressourcen entsprechen, auf die im Eingabeparameter verwiesen wird. Diese Klasse bietet schreibgeschützten Zugriff auf die Ressourcen, die in der verarbeiteten Datei verfügbar sind.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Klasse mit `DemoResources` dem Namen generiert, C# die in oder Visual Basic geschrieben ist (abhängig vom Quellcode des Beispiels). Diese Klasse befindet sich im `DemoApp` -Namespace und verfügt über Eigenschaften, die die Bitmap eines Logos und den Namen einer Anwendung zurückgeben. Im Beispiel wird eine `CreateResourceFile` -Methode aufgerufen, um die erforderliche resw-Datei zu erstellen, und es muss eine Bitmapdatei mit dem Namen "Logo. bmp" im aktuellen Verzeichnis des Beispiels gefunden werden. Im Codebeispiel wird die folgende Ressourcen Datei mit dem Namen Demo. resx verwendet:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]  
  
 Der Anwendungscode kann dann die Klasse wie folgt verwenden:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Generiert eine Klassendatei mit stark typisierten Eigenschaften, die den im Eingabeparameter angegebenen Ressourcen entsprechen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * System.CodeDom.Compiler.CodeDomProvider * bool * String[] -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Eine <see cref="T:System.Collections.IDictionary" />-Sammlung, wo jedes Wörterbucheintrags-Schlüssel/Wert-Paar der Name einer Ressource und der Wert der Ressource ist.</param>
        <param name="baseName">Der Name der zu generierenden Klasse.</param>
        <param name="generatedCodeNamespace">Der Namespace der zu generierenden Klasse.</param>
        <param name="codeProvider">Eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Klasse, die die Sprache bereitstellt, in der die Klasse generiert wird.</param>
        <param name="internalClass"><see langword="true" /> zum Generieren einer internen Klasse; <see langword="false" /> zum Generieren einer öffentlichen Klasse.</param>
        <param name="unmatchable">Ein Array, das jeden Ressourcennamen enthält, für den eine Eigenschaft generiert werden kann. Eine Eigenschaft kann in der Regel nicht generiert werden, da der Ressourcenname kein gültiger Bezeichner ist.</param>
        <summary>Generiert eine Klassendatei mit stark typisierten Eigenschaften, die den Ressourcen entsprechen, auf die in der angegebenen Sammlung verwiesen wird.</summary>
        <returns>Ein <see cref="T:System.CodeDom.CodeCompileUnit" />-Container.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> die-Methode, um eine Klasse zu generieren, die einen stark typisierten, schreibgeschützten Wrapper für den Zugriff auf die `resourceList` im-Parameter enthaltenen Ressourcen bereitstellt.  
  
 Die <xref:System.Resources.Tools.StronglyTypedResourceBuilder> -Klasse ignoriert alle Ressourcennamen, die mit den Zeichen "$" oder "> >" beginnen. Die Ressourcennamen "Culture" und "ResourceManager" sind ungültige Bezeichner.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceList" />, <paramref name="basename" /> oder <paramref name="codeProvider" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Ein Ressourcenknotenname entspricht nicht seinem Schlüssel in <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool * String[] -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Der Name einer RESX-Datei, die als Eingabe verwendet wird.</param>
        <param name="baseName">Der Name der zu generierenden Klasse.</param>
        <param name="generatedCodeNamespace">Der Namespace der zu generierenden Klasse.</param>
        <param name="codeProvider">Eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Klasse, die die Sprache bereitstellt, in der die Klasse generiert wird.</param>
        <param name="internalClass"><see langword="true" /> zum Generieren einer internen Klasse; <see langword="false" /> zum Generieren einer öffentlichen Klasse.</param>
        <param name="unmatchable">Ein <see cref="T:System.String" />-Array, das jeden Ressourcennamen enthält, für den eine Eigenschaft generiert werden kann. Eine Eigenschaft kann in der Regel nicht generiert werden, da der Ressourcenname kein gültiger Bezeichner ist.</param>
        <summary>Generiert eine Klassendatei mit stark typisierten Eigenschaften, die den Ressourcen in der angegebenen RESX-Datei entsprechen.</summary>
        <returns>Ein <see cref="T:System.CodeDom.CodeCompileUnit" />-Container.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> die-Methode, um eine Klasse zu generieren, die stark typisierten, schreibgeschützten Zugriff auf die `resxFile` im-Parameter enthaltenen Ressourcen bereitstellt.  
  
 Die <xref:System.Resources.Tools.StronglyTypedResourceBuilder> -Klasse ignoriert alle Ressourcennamen, die mit den Zeichen "$" oder "> >" beginnen. Die Ressourcennamen "Culture" und "ResourceManager" sind ungültige Bezeichner.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="basename" /> oder <paramref name="codeProvider" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool * String[] -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Eine <see cref="T:System.Collections.IDictionary" />-Sammlung, wo jedes Wörterbucheintrags-Schlüssel/Wert-Paar der Name einer Ressource und der Wert der Ressource ist.</param>
        <param name="baseName">Der Name der zu generierenden Klasse.</param>
        <param name="generatedCodeNamespace">Der Namespace der zu generierenden Klasse.</param>
        <param name="resourcesNamespace">Der Namespace der zu generierenden Ressource.</param>
        <param name="codeProvider">Ein <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Objekt, das die Sprache bereitstellt, in der die Klasse generiert wird.</param>
        <param name="internalClass"><see langword="true" /> zum Generieren einer internen Klasse; <see langword="false" /> zum Generieren einer öffentlichen Klasse.</param>
        <param name="unmatchable">Ein <see cref="T:System.String" />-Array, das jeden Ressourcennamen enthält, für den eine Eigenschaft generiert werden kann. Eine Eigenschaft kann in der Regel nicht generiert werden, da der Ressourcenname kein gültiger Bezeichner ist.</param>
        <summary>Generiert eine Klassendatei mit stark typisierten Eigenschaften, die den Ressourcen entsprechen, auf die in der angegebenen Sammlung verwiesen wird.</summary>
        <returns>Ein <see cref="T:System.CodeDom.CodeCompileUnit" />-Container.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Überladung können Sie den `resourcesNamespace` -Parameter verwenden, um den Namespace für die generierten Ressourcen anzugeben. In diesem Fall sieht der generierte Code wie folgt aus:  
  
```  
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);  
```  
  
 In den meisten Fällen müssen Sie diese Methode nicht aus Ihrem Anwendungscode abrufen.  
  
 Die <xref:System.Resources.Tools.StronglyTypedResourceBuilder> -Klasse ignoriert alle Ressourcennamen, die mit den Zeichen "$" oder "> >" beginnen. Die Ressourcennamen "Culture" und "ResourceManager" sind ungültige Bezeichner.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceList" />, <paramref name="basename" /> oder <paramref name="codeProvider" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Ein Ressourcenknotenname entspricht nicht seinem Schlüssel in <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool * String[] -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Der Name einer RESX-Datei, die als Eingabe verwendet wird.</param>
        <param name="baseName">Der Name der zu generierenden Klasse.</param>
        <param name="generatedCodeNamespace">Der Namespace der zu generierenden Klasse.</param>
        <param name="resourcesNamespace">Der Namespace der zu generierenden Ressource.</param>
        <param name="codeProvider">Eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Klasse, die die Sprache bereitstellt, in der die Klasse generiert wird.</param>
        <param name="internalClass"><see langword="true" /> zum Generieren einer internen Klasse; <see langword="false" /> zum Generieren einer öffentlichen Klasse.</param>
        <param name="unmatchable">Ein <see cref="T:System.String" />-Array, das jeden Ressourcennamen enthält, für den eine Eigenschaft generiert werden kann. Eine Eigenschaft kann in der Regel nicht generiert werden, da der Ressourcenname kein gültiger Bezeichner ist.</param>
        <summary>Generiert eine Klassendatei mit stark typisierten Eigenschaften, die den Ressourcen in der angegebenen RESX-Datei entsprechen.</summary>
        <returns>Ein <see cref="T:System.CodeDom.CodeCompileUnit" />-Container.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> die-Methode, um eine Klasse zu generieren, die stark typisierten, schreibgeschützten Zugriff auf die `resxFile` im-Parameter enthaltenen Ressourcen bereitstellt.  
  
 Die <xref:System.Resources.Tools.StronglyTypedResourceBuilder> -Klasse ignoriert alle Ressourcennamen, die mit den Zeichen "$" oder "> >" beginnen. Die Ressourcennamen "Culture" und "ResourceManager" sind ungültige Bezeichner.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="basename" /> oder <paramref name="codeProvider" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member VerifyResourceName : string * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName (key, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">Die zu überprüfende Zeichenfolge, ggf. in einen gültigen Ressourcennamen konvertiert.</param>
        <param name="provider">Ein <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Objekt, das die zu verwendende Zielsprache angibt.</param>
        <summary>Generiert auf Grundlage der angegebenen Eingabezeichenfolge und des Codeanbieters eine gültige Ressourcenzeichenfolge.</summary>
        <returns>Ein gültiger Ressourcenname, der vom <paramref name="key" />-Parameter abgeleitet wurde. Alle ungültigen Token werden durch einen Unterstrich (_) ersetzt, oder <see langword="null" />, wenn die Zeichenfolge im Kontext der im <paramref name="provider" />-Parameter angegebenen Sprache noch immer ungültige Zeichen enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der `key` -Parameter eine gültige Zeichenfolge ist, wird diese Zeichenfolge zurückgegeben. Wenn der `key` -Parameter eine ungültige Zeichenfolge oder eine Zeichenfolge mit ungültigen <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> Zeichen ist, versucht die-Methode, basierend auf `key` den `provider` Parametern und eine gültige Zeichenfolge zu generieren. Wenn eine gültige Zeichenfolge generiert werden kann, wird diese Zeichenfolge zurückgegeben. `null` andernfalls wird zurückgegeben.  
  
 Wenn der `key` -Parameter eine leere Zeichenfolge ("") ist, wird eine Zeichenfolge zurückgegeben, die aus einem einzelnen Unterstrich Zeichen (_) besteht. Wenn der `key` -Parameter keine leere Zeichenfolge ist, <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> vergleicht die-Methode jedes Zeichen in der Zeichenfolge mit einem Satz ungültiger Token basierend auf der durch `provider` den-Parameter angegebenen Sprache. Alle ungültigen Zeichen in der Zeichenfolge werden durch einen Unterstrich ersetzt. Die Zeichen, die durch einen Unterstrich ersetzt werden, lauten wie folgt:  
  
 "" (Leerzeichen), U + 00A0 (nicht unterbrechungfreier Raum), "." (Period), ', ' (Komma), '; ' (Semikolon),&#124;"", "~", "@", "#", "%", "^", "&", "*", "+", "-", "/",\\\<"", "", ">", "?", "[", "]", "(", ")", "{", "}", "" "(Anführungszeichen)," "(Apostroph),": "und"! ".  
  
> [!NOTE]
>  Stark typisierte Ressourcen lassen die Verwendung von sprach Schlüsselwörtern (z `if`. `for`b., usw.) als Ressourcen Schlüsselnamen nicht zu. Das <xref:System.CodeDom> Entwurfsmuster ermöglicht jedoch die Verwendung von sprach Schlüsselwörtern, indem das-Schlüsselwort mit dem Unterstrich vorangestellt wird. Die <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> -Methode ruft <xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A> die-Methode auf, um diesen Entwurf zu erzwingen. Wenn Sie z. b. einen Ressourcennamen verwenden, der mit einem sprach Schlüsselwort identisch ist `for`(z. b. `_for` ), wird der Name als in der generierten Ressourcen Klasse mit starker Typisierung angezeigt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> oder <paramref name="provider" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

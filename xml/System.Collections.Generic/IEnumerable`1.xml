<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5feb3fcf50e32654b97561534820a033d266644c" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70331025" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Der Typ der aufzulistenden Objekte.</typeparam>
    <summary>Macht den Enumerator verfügbar, der eine einfache Iteration durch eine Auflistung eines angegebenen Typs unterstützt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601>ist die Basisschnittstelle für Auflistungen <xref:System.Collections.Generic> im-Namespace <xref:System.Collections.Generic.List%601>, <xref:System.Collections.Generic.Dictionary%602>z. <xref:System.Collections.Generic.Stack%601> b., und und andere <xref:System.Collections.ObjectModel.ObservableCollection%601> generische <xref:System.Collections.Concurrent.ConcurrentStack%601>Auflistungen wie und. Auflistungen <xref:System.Collections.Generic.IEnumerable%601> , die implementieren, können mithilfe der `foreach` -Anweisung aufgelistet werden.  
  
 Informationen zur nicht generischen Version dieser Schnittstelle finden <xref:System.Collections.IEnumerable?displayProperty=nameWithType>Sie unter.  
  
 <xref:System.Collections.Generic.IEnumerable%601>enthält eine einzelne Methode, die Sie implementieren müssen, wenn Sie diese Schnittstelle implementieren. , die ein <xref:System.Collections.Generic.IEnumerator%601> -Objekt zurückgibt. <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> Der zurück <xref:System.Collections.Generic.IEnumerator%601> gegebene bietet die Möglichkeit, die Auflistung durch das verfügbar machen einer <xref:System.Collections.Generic.IEnumerator%601.Current%2A> Eigenschaft zu durchlaufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Collections.Generic.IEnumerable%601> -Schnittstelle implementiert wird und wie diese Implementierung verwendet wird, um eine LINQ-Abfrage zu erstellen. Wenn Sie implementieren <xref:System.Collections.Generic.IEnumerable%601>, müssen Sie <xref:System.Collections.Generic.IEnumerator%601> auch oder nur für C# das [Yield](~/docs/csharp/language-reference/keywords/yield.md) -Schlüsselwort verwenden. Die <xref:System.Collections.Generic.IEnumerator%601> Implementierung von <xref:System.IDisposable> erfordert auch, dass implementiert wird. Dies wird in diesem Beispiel veranschaulicht.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Ein weiteres C# Beispiel, das veranschaulicht, wie die <xref:System.Collections.Generic.IEnumerable%601> -Schnittstelle implementiert wird, finden Sie unter [Generics Sample](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). In diesem Beispiel wird `yield` das-Schlüsselwort <xref:System.Collections.Generic.IEnumerator%601>anstelle der Implementierung von verwendet.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />ist für die Parität mit nicht generischen Auflistungen enthalten. durch <see cref="T:System.Collections.Generic.IEnumerable`1" /> Implementieren von kann eine generische Auflistung an eine Methode, die ein <see cref="T:System.Collections.IEnumerable" /> -Objekt erwartet, übermittelt werden.</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">Exemplarische Vorgehensweise: Implementieren von IEnumerable(Of T) in Visual Basic</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">Iteratoren (C# und Visual Basic)</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593">Generics-Beispiel</related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
        <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der zurück <xref:System.Collections.Generic.IEnumerator%601> gegebene bietet die Möglichkeit, die Auflistung durch das verfügbar machen einer <xref:System.Collections.Generic.IEnumerator%601.Current%2A> Eigenschaft zu durchlaufen. Sie können Enumeratoren verwenden, um die Daten in einer Auflistung zu lesen, jedoch nicht, um die Auflistung zu ändern.  
  
 Zu Beginn wird der Enumerator vor das erste Element in der Auflistung positioniert. An dieser Position ist <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nicht definiert. Daher muss die <xref:System.Collections.IEnumerator.MoveNext%2A> -Methode aufgerufen werden, um den Enumerator vor dem Lesen des Werts von <xref:System.Collections.Generic.IEnumerator%601.Current%2A>auf das erste Element der Auflistung zu setzen.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>Gibt das gleiche Objekt zurück <xref:System.Collections.IEnumerator.MoveNext%2A> , bis erneut aufgerufen <xref:System.Collections.IEnumerator.MoveNext%2A> wird <xref:System.Collections.Generic.IEnumerator%601.Current%2A> , wenn auf das nächste Element festgelegt wird.  
  
 Wenn <xref:System.Collections.IEnumerator.MoveNext%2A> das Ende der Auflistung übergibt, wird der Enumerator hinter dem letzten Element in der Auflistung platziert, und <xref:System.Collections.IEnumerator.MoveNext%2A> gibt `false` zurück. Wenn sich der Enumerator an dieser Position befindet, geben nachfolgende Aufrufe von <xref:System.Collections.IEnumerator.MoveNext%2A> auch `false` zurück. Wenn der letzte Aufruf <xref:System.Collections.IEnumerator.MoveNext%2A> zurückgegebene `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> ist nicht definiert. Sie können <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nicht erneut auf das erste Element der Auflistung festlegen, sondern müssen eine neue Enumeratorinstanz erstellen.  

 Wenn Änderungen an der Auflistung vorgenommen werden, z. b. das Hinzufügen, ändern oder Löschen von Elementen, ist das Verhalten des Enumerators nicht definiert.  
  
 Ein Enumerator hat keinen exklusiven Zugriff auf die Auflistung, sodass ein Enumerator gültig bleibt, solange die Auflistung unverändert bleibt. Wenn an der Auflistung Änderungen vorgenommen werden, z. b. das Hinzufügen, ändern oder Löschen von Elementen, wird der Enumerator für ungültig erklärt, und Sie erhalten möglicherweise unerwartete Ergebnisse. Außerdem ist das Auflisten einer Auflistung keine Thread sichere Prozedur. Um die Thread Sicherheit zu gewährleisten, sollten Sie die Auflistung während des Enumerators sperren oder die Synchronisierung für die Auflistung implementieren.  
  
 Standard Implementierungen von Auflistungen <xref:System.Collections.Generic?displayProperty=nameWithType> im-Namespace werden nicht synchronisiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Collections.Generic.IEnumerable%601> -Schnittstelle implementiert wird und diese Implementierung verwendet wird, um eine LINQ-Abfrage zu erstellen. Wenn Sie implementieren <xref:System.Collections.Generic.IEnumerable%601>, müssen Sie <xref:System.Collections.Generic.IEnumerator%601> auch oder nur für C# das [Yield](~/docs/csharp/language-reference/keywords/yield.md) -Schlüsselwort verwenden. Die <xref:System.Collections.Generic.IEnumerator%601> Implementierung von <xref:System.IDisposable> erfordert auch, dass implementiert wird. Dies wird in diesem Beispiel veranschaulicht.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Ein weiteres C# Beispiel, das veranschaulicht, wie die <xref:System.Collections.Generic.IEnumerable%601> -Schnittstelle implementiert wird, finden Sie unter [Generics Sample](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). In diesem Beispiel wird das `yield` -Schlüsselwort anstelle <xref:System.Collections.Generic.IEnumerator%601>der Implementierung von verwendet.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">Exemplarische Vorgehensweise: Implementieren von IEnumerable(Of T) in Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">Iteratoren (C# und Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>

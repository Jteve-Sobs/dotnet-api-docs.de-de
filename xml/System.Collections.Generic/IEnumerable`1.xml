<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72ead708986af1bfd1c09bf3cba948dafe641085" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36645097" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Der Typ der aufzulistenden Objekte.</typeparam>
    <summary>Exposes the enumerator, which supports a simple iteration over a collection of a specified type.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> ist die Basisschnittstelle für Sammlungen in der <xref:System.Collections.Generic> Namespace z. B. <xref:System.Collections.Generic.List%601>, <xref:System.Collections.Generic.Dictionary%602>, und <xref:System.Collections.Generic.Stack%601> und andere generischen Auflistungen wie z. B. <xref:System.Collections.ObjectModel.ObservableCollection%601> und <xref:System.Collections.Concurrent.ConcurrentStack%601>. Auflistungen bereit, implementieren <xref:System.Collections.Generic.IEnumerable%601> aufgelistet werden kann, mithilfe der `foreach` Anweisung.  
  
 Die nicht generische Version dieser Schnittstelle finden Sie <xref:System.Collections.IEnumerable?displayProperty=nameWithType>.  
  
 <xref:System.Collections.Generic.IEnumerable%601> enthält eine einzelne Methode, die Sie implementieren müssen, wenn Sie diese Schnittstelle implementieren. <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>, welche gibt ein <xref:System.Collections.Generic.IEnumerator%601> Objekt. Das zurückgegebene <xref:System.Collections.Generic.IEnumerator%601> bietet die Möglichkeit zum Durchlaufen der Auflistung, verfügbar machen, eine <xref:System.Collections.Generic.IEnumerator%601.Current%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Implementieren der <xref:System.Collections.Generic.IEnumerable%601> -Schnittstelle und, dass diese Implementierung zu verwenden, um eine LINQ-Abfrage zu erstellen. Bei der Implementierung <xref:System.Collections.Generic.IEnumerable%601>, müssen Sie auch implementieren <xref:System.Collections.Generic.IEnumerator%601> oder nur für c#, können Sie die [yield](~/docs/csharp/language-reference/keywords/yield.md) Schlüsselwort. Implementieren von <xref:System.Collections.Generic.IEnumerator%601> erfordert außerdem <xref:System.IDisposable> implementiert werden, die in diesem Beispiel angezeigt werden.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Eine andere C#-Beispiel für die Implementierung der <xref:System.Collections.Generic.IEnumerable%601> Schnittstelle, finden Sie unter der [Generikabeispiel](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). Dieses Beispiel verwendet die `yield` Schlüsselwort, anstatt zu implementieren <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ist für die Parität mit nicht-generische Auflistungen enthalten. Implementieren von <see cref="T:System.Collections.Generic.IEnumerable`1" /> kann eine generische Auflistung, an eine Methode übergeben werden, erwartet ein <see cref="T:System.Collections.IEnumerable" /> Objekt.</para>
    </block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the collection.</summary>
        <returns>An enumerator that can be used to iterate through the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das zurückgegebene <xref:System.Collections.Generic.IEnumerator%601> bietet die Möglichkeit zum Durchlaufen der Auflistung, verfügbar machen, eine <xref:System.Collections.Generic.IEnumerator%601.Current%2A> Eigenschaft. Mit Enumeratoren können die Daten in einer Auflistung gelesen, jedoch nicht zum Ändern der Auflistung.  
  
 Zu Beginn wird der Enumerator vor das erste Element in der Auflistung positioniert. An dieser Position ist <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nicht definiert. Sie müssen daher rufen die <xref:System.Collections.IEnumerator.MoveNext%2A> Methode, um den Enumerator auf das erste Element der Auflistung vor dem Lesen des Werts von <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> Gibt das gleiche Objekt bis <xref:System.Collections.IEnumerator.MoveNext%2A> erneut aufgerufen, als <xref:System.Collections.IEnumerator.MoveNext%2A> legt <xref:System.Collections.Generic.IEnumerator%601.Current%2A> auf das nächste Element.  
  
 Wenn <xref:System.Collections.IEnumerator.MoveNext%2A> das Ende der Auflistung übergibt, wird der Enumerator hinter dem letzten Element in der Auflistung platziert, und <xref:System.Collections.IEnumerator.MoveNext%2A> gibt `false` zurück. Wenn sich der Enumerator an dieser Position befindet, geben nachfolgende Aufrufe von <xref:System.Collections.IEnumerator.MoveNext%2A> auch `false` zurück. Wenn der letzte Aufruf <xref:System.Collections.IEnumerator.MoveNext%2A> zurückgegebene `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> ist nicht definiert. Sie können <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nicht erneut auf das erste Element der Auflistung festlegen, sondern müssen eine neue Enumeratorinstanz erstellen.  

 Das Verhalten des Enumerators ist nicht definiert, wenn Änderungen an der Auflistung, z. B. hinzufügen, ändern oder Löschen von Elementen, vorgenommen werden.  
  
 Ein Enumerator hat keinen exklusiven Zugriff auf die Auflistung so ein Enumerator gültig, bleibt solange die Auflistung unverändert ist. Wenn Änderungen an der Auflistung vorgenommen werden, z. B. hinzufügen, bearbeiten oder Löschen von Elementen, wird der Enumerator ungültig, und erhalten Sie möglicherweise unerwartete Ergebnisse. Darüber hinaus ist die enumerieren einer Auflistung keine threadsichere Prozedur. Um Threadsicherheit zu gewährleisten, sollten Sie die Auflistung während der Enumerator sperren oder implementieren Sie die Synchronisierung in der Auflistung.  
  
 Standardimplementierungen der Auflistungen in der <xref:System.Collections.Generic?displayProperty=nameWithType> Namespace werden nicht synchronisiert.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Implementieren der <xref:System.Collections.Generic.IEnumerable%601> Schnittstelle, und diese Implementierung verwendet, um eine LINQ-Abfrage zu erstellen. Bei der Implementierung <xref:System.Collections.Generic.IEnumerable%601>, müssen Sie auch implementieren <xref:System.Collections.Generic.IEnumerator%601> oder nur für c#, können Sie die [yield](~/docs/csharp/language-reference/keywords/yield.md) Schlüsselwort. Implementieren von <xref:System.Collections.Generic.IEnumerator%601> erfordert außerdem <xref:System.IDisposable> implementiert werden, die in diesem Beispiel angezeigt werden.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Eine andere C#-Beispiel für die Implementierung der <xref:System.Collections.Generic.IEnumerable%601> Schnittstelle, finden Sie unter der [Generikabeispiel](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). Dieses Beispiel verwendet, der die `yield` Schlüsselwort, anstatt zu implementieren <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="Comparer&lt;T&gt;" FullName="System.Collections.Generic.Comparer&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f518f5ced972dfa63784d51c93c4cd0209b57c3" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70702475" /></Metadata><TypeSignature Language="C#" Value="public abstract class Comparer&lt;T&gt; : System.Collections.Generic.IComparer&lt;T&gt;, System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Comparer`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IComparer`1&lt;!T&gt;, class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Comparer`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Comparer(Of T)&#xA;Implements IComparer, IComparer(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Comparer abstract : System::Collections::Generic::IComparer&lt;T&gt;, System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type Comparer&lt;'T&gt; = class&#xA;    interface IComparer&#xA;    interface IComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">Der Typ der zu vergleichenden Objekte.</typeparam>
    <summary>Stellt eine Basisklasse für Implementierungen der generischen <see cref="T:System.Collections.Generic.IComparer`1" />-Schnittstelle bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leiten Sie von dieser Klasse ab, um eine benutzerdefinierte <xref:System.Collections.Generic.IComparer%601> Implementierung der-Schnittstelle zur Verwendung mit Auflistungs Klassen wie den <xref:System.Collections.Generic.SortedList%602> generischen Klassen und <xref:System.Collections.Generic.SortedDictionary%602> bereitzustellen.  
  
 Der Unterschied zwischen der Ableitung <xref:System.Collections.Generic.Comparer%601> von der-Klasse <xref:System.IComparable?displayProperty=nameWithType> und der Implementierung der-Schnittstelle lautet wie folgt:  
  
-   Um anzugeben, wie zwei Objekte standardmäßig verglichen werden sollen, implementieren <xref:System.IComparable?displayProperty=nameWithType> Sie die-Schnittstelle in der Klasse. Dadurch wird sichergestellt, dass bei Sortiervorgängen der von Ihnen angegebene Standard Vergleichs Code verwendet wird.  
  
-   Um einen Vergleich zu definieren, der anstelle des Standardcomparers verwendet werden soll, <xref:System.Collections.Generic.Comparer%601> leiten Sie von der-Klasse ab. Anschließend können Sie diesen Vergleich in Sortiervorgängen verwenden, die einen Vergleich als Parameter akzeptieren.  
  
 <xref:System.Collections.Generic.Comparer%601.Default%2A> Das von der-Eigenschaft zurückgegebene- <xref:System.IComparable%601?displayProperty=nameWithType> Objekt verwendet die`IComparable<T>` `IComparable(Of T)` generische C#-Schnittstelle (in Visual Basic), um zwei-Objekte zu vergleichen. Wenn der `T` Typ die <xref:System.IComparable%601?displayProperty=nameWithType> generische-Schnittstelle nicht implementiert <xref:System.Collections.Generic.Comparer%601.Default%2A> , gibt die <xref:System.Collections.Generic.Comparer%601> -Eigenschaft eine <xref:System.IComparable?displayProperty=nameWithType> zurück, die die-Schnittstelle verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die-Klasse `BoxLengthFirst`von der <xref:System.Collections.Generic.Comparer%601> -Klasse abgeleitet. Dieser Vergleich vergleicht zwei Objekte vom Typ `Box`. Sie sortiert Sie zuerst nach Länge, dann nach Höhe und dann nach Breite. Die `Box` -Klasse implementiert <xref:System.IComparable%601> die-Schnittstelle, um den Standard `Box` Vergleich zwischen zwei-Objekten zu steuern. Diese Standard Implementierung sortiert zuerst nach Höhe, dann nach Länge und dann nach Breite. Das Beispiel zeigt die Unterschiede zwischen den beiden vergleichen, indem eine Liste `Box` von Objekten zuerst mithilfe des `BoxLengthFirst` Vergleichs und dann mithilfe des Standardcomparers sortiert wird.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.BoxCompare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />und <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> unterscheiden sich unter Umständen in Bezug auf Kultur Sensitivität und Unterscheidung nach Groß-/Kleinschreibung.  
  
Für Zeichen folgen Vergleiche wird <see cref="T:System.StringComparer" /> die-Klasse für die <c>&lt;Comparer&gt;-Zeichenfolge</c>empfohlen.  Eigenschaften der <see cref="T:System.StringComparer" /> -Klasse geben vordefinierte Instanzen zurück, die Zeichen folgen Vergleiche mit unterschiedlichen Kombinationen aus Kultur Sensitivität und Groß-/Kleinschreibung durchführen.  Die Groß-/Kleinschreibung und die Kultur Sensitivität sind bei den Membern <see cref="T:System.StringComparer" /> der gleichen Instanz konsistent.  
  
Weitere Informationen zu kulturspezifischen vergleichen finden Sie unter <see cref="N:System.Globalization" /> Namespace und [Globalisierung und Lokalisierung](~/docs/standard/globalization-localization/index.md).</para></block>
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.StringComparer" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Comparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Comparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Generic.Comparer`1" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As T, y As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(T x, T y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : 'T * 'T -&gt; int" Usage="comparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">Das erste zu vergleichende Objekt.</param>
        <param name="y">Das zweite zu vergleichende Objekt.</param>
        <summary>Vergleicht beim Überschreiben in einer abgeleiteten Klasse zwei Objekte gleichen Typs und gibt über den zurückgegebenen Wert an, ob das eine Objekt kleiner, größer oder gleich dem anderen Objekt ist.</summary>
        <returns>Eine ganze Zahl mit Vorzeichen, die die relativen Werte von <paramref name="x" /> und <paramref name="y" /> angibt, wie in der folgenden Tabelle veranschaulicht.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Bedeutung 
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description><paramref name="x" /> ist kleiner als <paramref name="y" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="x" /> ist gleich <paramref name="y" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description><paramref name="x" /> ist größer als <paramref name="y" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie diese Methode, um einen angepassten Sortier Reihenfolgen `T`Vergleich für den Typ bereitzustellen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Vergleich von `Box` -Objekten definiert, die anstelle des Standardcomparers verwendet werden können. Dieses Beispiel ist Teil eines größeren Beispiels, das für die <xref:System.Collections.Generic.Comparer%601> -Klasse bereitgestellt wird.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#5)]
 [!code-vb[System.Collections.Generic.BoxCompare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Typ <paramref name="T" /> implementiert weder die generische <see cref="T:System.IComparable`1" />-Schnittstelle noch die <see cref="T:System.IComparable" />-Schnittstelle.</exception>
        <block subset="none" type="overrides"><para>Der <see langword="null" /> Vergleich mit einem beliebigen Verweistyp ist zulässig und generiert keine Ausnahme. Ein NULL-Verweis gilt als kleiner als jeder Verweis, der nicht NULL ist.  
  
Informationen zu kulturspezifischen vergleichen finden Sie unter <see cref="N:System.Globalization" /> Namespace und [Globalisierung und Lokalisierung](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Create (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Comparer`1&lt;!T&gt; Create(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (comparison As Comparison(Of T)) As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::Comparer&lt;T&gt; ^ Create(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="static member Create : Comparison&lt;'T&gt; -&gt; System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Create comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="comparison">Der Vergleich, der verwendet werden soll.</param>
        <summary>Erstellt mithilfe des angegebenen Vergleichs einen Vergleich.</summary>
        <returns>Der neue Comparer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.Comparer`1&lt;!T&gt; Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Comparer`1.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::Comparer&lt;T&gt; ^ Default { System::Collections::Generic::Comparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt für den vom generischen Argument angegebenen Typ einen Standardvergleich für die Sortierreihenfolgen zurück.</summary>
        <value>Ein Objekt, das <see cref="T:System.Collections.Generic.Comparer`1" /> erbt und als Sortierreihenfolgenvergleich für den Typ <paramref name="T" /> fungiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Collections.Generic.Comparer%601> von dieser Eigenschaft zurückgegebene verwendet <xref:System.IComparable%601?displayProperty=nameWithType> die `IComparable(Of T)` generische-`IComparable<T>` Schnitt C#Stelle (in Visual Basic), um zwei-Objekte zu vergleichen. Wenn der `T` Typ die <xref:System.IComparable%601?displayProperty=nameWithType> generische Schnittstelle nicht implementiert, gibt diese Eigenschaft <xref:System.Collections.Generic.Comparer%601> eine zurück, <xref:System.IComparable?displayProperty=nameWithType> die die-Schnittstelle verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die <xref:System.Collections.Generic.Comparer%601.Default%2A> -Eigenschaft verwendet wird, um ein Objekt zu erhalten, das den Standard Vergleich ausführt. Dieses Beispiel ist Teil eines größeren Beispiels, das für die <xref:System.Collections.Generic.Comparer%601> -Klasse bereitgestellt wird.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxCompare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Für Zeichen folgen Vergleiche wird <see cref="T:System.StringComparer" /> die-Klasse für die <c>&lt;Comparer&gt; -Zeichenfolge</c> (<c>Comparer (of String)</c> in Visual Basic) empfohlen.  Eigenschaften der <see cref="T:System.StringComparer" /> -Klasse geben vordefinierte Instanzen zurück, die Zeichen folgen Vergleiche mit unterschiedlichen Kombinationen aus Kultur Sensitivität und Groß-/Kleinschreibung durchführen.  Die Groß-/Kleinschreibung und die Kultur Sensitivität sind bei den Membern <see cref="T:System.StringComparer" /> der gleichen Instanz konsistent.  
  
Weitere Informationen zu kulturspezifischen vergleichen finden Sie unter <see cref="N:System.Globalization" /> Namespace und [Globalisierung und Lokalisierung](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Das erste zu vergleichende Objekt.</param>
        <param name="y">Das zweite zu vergleichende Objekt.</param>
        <summary>Vergleicht zwei Objekte und gibt einen Wert zurück, der angibt, ob ein Wert niedriger, gleich oder größer als der andere Wert ist.</summary>
        <returns>Eine ganze Zahl mit Vorzeichen, die die relativen Werte von <paramref name="x" /> und <paramref name="y" /> angibt, wie in der folgenden Tabelle veranschaulicht.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Bedeutung 
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description><paramref name="x" /> ist kleiner als <paramref name="y" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="x" /> ist gleich <paramref name="y" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description><paramref name="x" /> ist größer als <paramref name="y" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist ein Wrapper für die <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> -Methode, `obj` daher muss in den Typ umgewandelt werden, der vom generischen-Argument `T` der aktuellen Instanz angegeben wird. Wenn Sie nicht in `T`umgewandelt werden kann, wird eine <xref:System.ArgumentException> ausgelöst.  
  
 Der `null` Vergleich mit einem beliebigen Verweistyp ist zulässig und generiert keine Ausnahme. Beim Sortieren `null` wird als kleiner als ein beliebiges anderes Objekt betrachtet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> -Methode verwendet wird, um zwei-Objekte zu vergleichen. Dieses Beispiel ist Teil eines größeren Beispiels, das für die <xref:System.Collections.Generic.Comparer%601> -Klasse bereitgestellt wird.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#4)]
 [!code-vb[System.Collections.Generic.BoxCompare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="x" /> oder <paramref name="y" /> weist einen Typ auf, der nicht in den Typ <paramref name="T" /> umgewandelt werden kann.  
  
- oder - 
 <paramref name="x" /> und <paramref name="y" /> implementieren weder die generische <see cref="T:System.IComparable`1" />-Schnittstelle noch die generische <see cref="T:System.IComparable" />-Schnittstelle.</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />und <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> Verhalten sich in Bezug auf Kultur Sensitivität und Berücksichtigung der Groß-/Kleinschreibung anders.  
  
Für Zeichen folgen Vergleiche wird <see cref="T:System.StringComparer" /> die-Klasse für die <c>&lt;Comparer&gt;-Zeichenfolge</c>empfohlen.  Eigenschaften der <see cref="T:System.StringComparer" /> -Klasse geben vordefinierte Instanzen zurück, die Zeichen folgen Vergleiche mit unterschiedlichen Kombinationen aus Kultur Sensitivität und Groß-/Kleinschreibung durchführen.  Die Groß-/Kleinschreibung und die Kultur Sensitivität sind bei den Membern <see cref="T:System.StringComparer" /> der gleichen Instanz konsistent.  
  
Weitere Informationen zu kulturspezifischen vergleichen finden Sie unter <see cref="N:System.Globalization" /> Namespace und [Globalisierung und Lokalisierung](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>

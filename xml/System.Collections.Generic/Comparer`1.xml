<Type Name="Comparer&lt;T&gt;" FullName="System.Collections.Generic.Comparer&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f16f70a6ecc86c79689f40eb54b9d7bd114712aa" /><Meta Name="ms.sourcegitcommit" Value="f9e71795ba0f9c2dfaa74bec233343ed0f3ffd99" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/15/2019" /><Meta Name="ms.locfileid" Value="57928021" /></Metadata><TypeSignature Language="C#" Value="public abstract class Comparer&lt;T&gt; : System.Collections.Generic.IComparer&lt;T&gt;, System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Comparer`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IComparer`1&lt;!T&gt;, class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Comparer`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Comparer(Of T)&#xA;Implements IComparer, IComparer(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Comparer abstract : System::Collections::Generic::IComparer&lt;T&gt;, System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type Comparer&lt;'T&gt; = class&#xA;    interface IComparer&#xA;    interface IComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">Der Typ der zu vergleichenden Objekte.</typeparam>
    <summary>Stellt eine Basisklasse für Implementierungen der generischen <see cref="T:System.Collections.Generic.IComparer`1" />-Schnittstelle bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leiten Sie von dieser Klasse, um eine benutzerdefinierte Implementierung bieten die <xref:System.Collections.Generic.IComparer%601> Schnittstelle für die Verwendung mit Auflistungsklassen, z. B. die <xref:System.Collections.Generic.SortedList%602> und <xref:System.Collections.Generic.SortedDictionary%602> generischen Klassen.  
  
 Der Unterschied zwischen der Ableitung von der <xref:System.Collections.Generic.Comparer%601> -Klasse und Implementieren der <xref:System.IComparable?displayProperty=nameWithType> Schnittstelle lautet wie folgt:  
  
-   An wie die beiden Objekte standardmäßig verglichen werden soll, implementieren die <xref:System.IComparable?displayProperty=nameWithType> Schnittstelle in Ihrer Klasse. Dadurch wird sichergestellt, dass Sortiervorgänge den Standardcode für den Vergleich verwendet, den Sie angegeben haben.  
  
-   Um einen Vergleich, statt die standardmäßige Vergleichsfunktion verwendet zu definieren, leiten Sie von der <xref:System.Collections.Generic.Comparer%601> Klasse. Klicken Sie dann können dieses Vergleichs in Sortiervorgänge, die einen Vergleich als Parameter annehmen.  
  
 Das von zurückgegebene Objekt der <xref:System.Collections.Generic.Comparer%601.Default%2A> Eigenschaft verwendet die <xref:System.IComparable%601?displayProperty=nameWithType> generische Schnittstelle (`IComparable<T>` in C# `IComparable(Of T)` in Visual Basic) vergleicht zwei Objekte. Wenn Typ `T` implementiert nicht die <xref:System.IComparable%601?displayProperty=nameWithType> generische Schnittstelle, die <xref:System.Collections.Generic.Comparer%601.Default%2A> -Eigenschaft gibt eine <xref:System.Collections.Generic.Comparer%601> , verwendet der <xref:System.IComparable?displayProperty=nameWithType> Schnittstelle.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine Klasse abgeleitet `BoxLengthFirst`, aus der <xref:System.Collections.Generic.Comparer%601> Klasse. Dieser Vergleich vergleicht zwei Objekte des Typs `Box`. Sortiert sie zunächst nach der Länge, und klicken Sie dann nach Höhe, und dann nach Breite. Die `Box` -Klasse implementiert die <xref:System.IComparable%601> Schnittstelle, um den Standardvergleich zwischen zwei steuern `Box` Objekte. Diese Standardimplementierung sortiert zuerst nach Höhe, und klicken Sie dann nach der Länge, und dann nach Breite. Das Beispiel zeigt die Unterschiede zwischen den zwei Vergleiche von Sortieren einer Liste von `Box` Objekte zuerst mithilfe der `BoxLengthFirst` Vergleich, und klicken Sie dann mithilfe des Standardvergleichs.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.BoxCompare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> und <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> verhält sich möglicherweise anders in Bezug auf die Berücksichtigung von Kultur und Groß-/Kleinschreibung.  
  
Für Vergleiche von Zeichenfolgen die <see cref="T:System.StringComparer" /> Klasse vorzuziehen ist <c>Comparer&lt;Zeichenfolge&gt;</c>.  Eigenschaften der <see cref="T:System.StringComparer" /> Klasse zurückgeben, vordefinierte Instanzen, die Zeichenfolgenvergleiche mit verschiedenen Kombinationen der Berücksichtigung von Kultur und Groß-/Kleinschreibung durchzuführen.  Die Groß-/Kleinschreibung und der Berücksichtigung von Kultur entsprechen der Elemente des gleichen <see cref="T:System.StringComparer" /> Instanz.  
  
Weitere Informationen zu kulturabhängige Vergleiche, finden Sie unter den <see cref="N:System.Globalization" /> Namespace und [Globalisierung und Lokalisierung](~/docs/standard/globalization-localization/index.md).</para></block>
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.StringComparer" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Comparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Comparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Generic.Comparer`1" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As T, y As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(T x, T y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : 'T * 'T -&gt; int" Usage="comparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">Das erste zu vergleichende Objekt.</param>
        <param name="y">Das zweite zu vergleichende Objekt.</param>
        <summary>Vergleicht beim Überschreiben in einer abgeleiteten Klasse zwei Objekte gleichen Typs und gibt über den zurückgegebenen Wert an, ob das eine Objekt kleiner, größer oder gleich dem anderen Objekt ist.</summary>
        <returns>Eine ganze Zahl mit Vorzeichen, die die relativen Werte von <paramref name="x" /> und <paramref name="y" /> angibt, wie in der folgenden Tabelle veranschaulicht.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Bedeutung 
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description><paramref name="x" /> ist kleiner als <paramref name="y" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="x" /> ist gleich <paramref name="y" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description><paramref name="x" /> ist größer als <paramref name="y" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie diese Methode zum Bereitstellen von einem benutzerdefinierten Vergleich für den Typ der Sortierreihenfolge `T`.  
  
   
  
## Examples  
 Das folgende Beispiel definiert einen Vergleich `Box` Objekte, die anstelle der Standardvergleich verwendet werden können. In diesem Beispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Collections.Generic.Comparer%601> Klasse.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#5)]
 [!code-vb[System.Collections.Generic.BoxCompare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Typ <paramref name="T" /> implementiert weder die generische <see cref="T:System.IComparable`1" />-Schnittstelle noch die <see cref="T:System.IComparable" />-Schnittstelle.</exception>
        <block subset="none" type="overrides"><para>Vergleichen von <see langword="null" /> mit jeder Verweis ist zulässig und löst keine Ausnahme. Ein null-Verweis gilt als kleiner als jedes beliebige-Verweis sein, der nicht null ist.  
  
Informationen dazu, kulturabhängige Vergleiche, finden Sie unter den <see cref="N:System.Globalization" /> Namespace und [Globalisierung und Lokalisierung](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Create (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Comparer`1&lt;!T&gt; Create(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (comparison As Comparison(Of T)) As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::Comparer&lt;T&gt; ^ Create(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="static member Create : Comparison&lt;'T&gt; -&gt; System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Create comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="comparison">Der Vergleich, der verwendet werden soll.</param>
        <summary>Erstellt mithilfe des angegebenen Vergleichs einen Vergleich.</summary>
        <returns>Der neue Comparer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.Comparer`1&lt;!T&gt; Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Comparer`1.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::Comparer&lt;T&gt; ^ Default { System::Collections::Generic::Comparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt für den vom generischen Argument angegebenen Typ einen Standardvergleich für die Sortierreihenfolgen zurück.</summary>
        <value>Ein Objekt, das <see cref="T:System.Collections.Generic.Comparer`1" /> erbt und als Sortierreihenfolgenvergleich für den Typ <paramref name="T" /> fungiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Collections.Generic.Comparer%601> von dieser Eigenschaft zurückgegebene verwendet die <xref:System.IComparable%601?displayProperty=nameWithType> generische Schnittstelle (`IComparable<T>` in C# `IComparable(Of T)` in Visual Basic), zwei Objekte verglichen werden soll. Wenn Typ `T` implementiert nicht die <xref:System.IComparable%601?displayProperty=nameWithType> generische Schnittstelle, gibt diese Eigenschaft eine <xref:System.Collections.Generic.Comparer%601> , verwendet der <xref:System.IComparable?displayProperty=nameWithType> Schnittstelle.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Collections.Generic.Comparer%601.Default%2A> Eigenschaft, um ein Objekt abzurufen, die den Standardvergleich ausführt. In diesem Beispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Collections.Generic.Comparer%601> Klasse.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxCompare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Für Vergleiche von Zeichenfolgen die <see cref="T:System.StringComparer" /> Klasse vorzuziehen ist <c>Comparer&lt;Zeichenfolge&gt;</c> (<c>Vergleich (Of String)</c> in Visual Basic).  Eigenschaften der <see cref="T:System.StringComparer" /> Klasse zurückgeben, vordefinierte Instanzen, die Zeichenfolgenvergleiche mit verschiedenen Kombinationen der Berücksichtigung von Kultur und Groß-/Kleinschreibung durchzuführen.  Die Groß-/Kleinschreibung und der Berücksichtigung von Kultur entsprechen der Elemente des gleichen <see cref="T:System.StringComparer" /> Instanz.  
  
Weitere Informationen zu kulturabhängige Vergleiche, finden Sie unter den <see cref="N:System.Globalization" /> Namespace und [Globalisierung und Lokalisierung](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Das erste zu vergleichende Objekt.</param>
        <param name="y">Das zweite zu vergleichende Objekt.</param>
        <summary>Vergleicht zwei Objekte und gibt einen Wert zurück, der angibt, ob ein Wert niedriger, gleich oder größer als der andere Wert ist.</summary>
        <returns>Eine ganze Zahl mit Vorzeichen, die die relativen Werte von <paramref name="x" /> und <paramref name="y" /> angibt, wie in der folgenden Tabelle veranschaulicht.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Bedeutung 
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description><paramref name="x" /> ist kleiner als <paramref name="y" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="x" /> ist gleich <paramref name="y" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description><paramref name="x" /> ist größer als <paramref name="y" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist ein Wrapper für die <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> Methode, sodass `obj` müssen in den vom generischen Argument angegebenen Typ umgewandelt werden `T` der aktuellen Instanz. Wenn es in umgewandelt werden, kann nicht `T`, <xref:System.ArgumentException> ausgelöst.  
  
 Vergleichen von `null` mit jeder Verweis ist zulässig und löst keine Ausnahme. Beim Sortieren von `null` gilt als kleiner als jedes andere Objekt.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> Methode, um zwei Objekte zu vergleichen. In diesem Beispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Collections.Generic.Comparer%601> Klasse.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#4)]
 [!code-vb[System.Collections.Generic.BoxCompare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="x" /> oder <paramref name="y" /> weist einen Typ auf, der nicht in den Typ <paramref name="T" /> umgewandelt werden kann.  
  
- oder - 
 <paramref name="x" /> und <paramref name="y" /> implementieren weder die generische <see cref="T:System.IComparable`1" />-Schnittstelle noch die generische <see cref="T:System.IComparable" />-Schnittstelle.</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> und <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> Verhalten sich anders, hinsichtlich der Berücksichtigung von Kultur und Groß-/Kleinschreibung.  
  
Für Vergleiche von Zeichenfolgen die <see cref="T:System.StringComparer" /> Klasse vorzuziehen ist <c>Comparer&lt;Zeichenfolge&gt;</c>.  Eigenschaften der <see cref="T:System.StringComparer" /> Klasse zurückgeben, vordefinierte Instanzen, die Zeichenfolgenvergleiche mit verschiedenen Kombinationen der Berücksichtigung von Kultur und Groß-/Kleinschreibung durchzuführen.  Die Groß-/Kleinschreibung und der Berücksichtigung von Kultur entsprechen der Elemente des gleichen <see cref="T:System.StringComparer" /> Instanz.  
  
Weitere Informationen zu kulturabhängige Vergleiche, finden Sie unter den <see cref="N:System.Globalization" /> Namespace und [Globalisierung und Lokalisierung](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>
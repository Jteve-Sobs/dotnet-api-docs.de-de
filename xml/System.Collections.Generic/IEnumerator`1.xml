<Type Name="IEnumerator&lt;T&gt;" FullName="System.Collections.Generic.IEnumerator&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8e13a014f4417398fdd509db415e7c1b53e69536" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73375854" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerator&lt;out T&gt; : IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerator`1&lt;+ T&gt; implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerator(Of Out T)&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerator : IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type IEnumerator&lt;'T&gt; = interface&#xA;    interface IDisposable&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Der Typ der aufzulistenden Objekte.</typeparam>
    <summary>Unterstützt eine einfache Iteration durch eine generische Auflistung.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerator%601> ist die Basisschnittstelle für alle generischen Enumeratoren.  
  
 Die `foreach`-Anweisung der C# Sprache (`for each` in C++, `For Each` in Visual Basic) verbirgt die Komplexität der Enumeratoren.  Daher empfiehlt es sich, `foreach` zu verwenden und den Enumerator nicht direkt zu ändern.  
  
 Mit Enumeratoren können die Daten in der Auflistung zwar gelesen, jedoch nicht zum Ändern der zugrunde liegenden Auflistung verwendet werden.  
  
 Zu Beginn wird der Enumerator vor das erste Element in der Auflistung positioniert. An dieser Position ist <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nicht definiert. Daher muss der Enumerator durch einen Aufruf von <xref:System.Collections.IEnumerator.MoveNext%2A> auf das erste Element der Auflistung gesetzt werden, bevor der Wert von <xref:System.Collections.Generic.IEnumerator%601.Current%2A> gelesen werden kann.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> gibt solange dasselbe Objekt zurück, bis <xref:System.Collections.IEnumerator.MoveNext%2A> aufgerufen wird. <xref:System.Collections.IEnumerator.MoveNext%2A> legt <xref:System.Collections.Generic.IEnumerator%601.Current%2A> auf das nächste Element fest.  
  
 Wenn <xref:System.Collections.IEnumerator.MoveNext%2A> das Ende der Auflistung übergibt, wird der Enumerator hinter dem letzten Element in der Auflistung platziert, und <xref:System.Collections.IEnumerator.MoveNext%2A> gibt `false` zurück. Wenn sich der Enumerator an dieser Position befindet, geben nachfolgende Aufrufe von <xref:System.Collections.IEnumerator.MoveNext%2A> auch `false` zurück. Wenn der letzte Aufruf <xref:System.Collections.IEnumerator.MoveNext%2A> zurückgegebene `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> ist nicht definiert. Sie können <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nicht erneut auf das erste Element der Auflistung festlegen, sondern müssen eine neue Enumeratorinstanz erstellen.  
  
 Die <xref:System.Collections.IEnumerator.Reset%2A>-Methode wird für die COM-Interoperabilität bereitgestellt. Es muss nicht unbedingt implementiert werden. Stattdessen kann der Implementierer einfach eine <xref:System.NotSupportedException>auslösen. Wenn Sie dies jedoch tun, sollten Sie sicherstellen, dass sich keine Aufrufer auf die <xref:System.Collections.IEnumerator.Reset%2A> Funktionen verlassen.  
  
 Wenn Änderungen an der Auflistung vorgenommen werden, z. b. das Hinzufügen, ändern oder Löschen von Elementen, ist das Verhalten des Enumerators nicht definiert.  
  
 Der Enumerator hat keinen exklusiven Zugriff auf die Auflistung; daher ist die Enumeration einer Auflistung systembedingt kein threadsicheres Verfahren. Um während der Enumeration Threadsicherheit zu garantieren, können Sie die Auflistung während der gesamten Enumeration sperren. Um den Lese- und Schreibzugriff auf diese Auflistung durch mehrere Threads zuzulassen, müssen Sie eine eigene Synchronisierung implementieren.  
  
 Standardimplementierungen der Auflistungen im <xref:System.Collections.Generic?displayProperty=nameWithType>-Namespace werden nicht synchronisiert.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine Implementierung der <xref:System.Collections.Generic.IEnumerator%601>-Schnittstelle für eine Auflistungs Klasse von benutzerdefinierten Objekten. Das benutzerdefinierte Objekt ist eine Instanz des Typs `Box`, und die Auflistungs Klasse ist `BoxCollection`. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.Collections.Generic.ICollection%601>-Schnittstelle bereitgestellt wird.  
  
 [!code-csharp[System.Collections.Generic.BoxExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxexamples/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxexamples/vb/program.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Zum Implementieren dieser Schnittstelle muss die nicht generische <see cref="T:System.Collections.IEnumerator" />-Schnittstelle implementiert werden. Die Methoden <see cref="M:System.Collections.IEnumerator.MoveNext" /> und <see cref="M:System.Collections.IEnumerator.Reset" /> sind nicht von <typeparamref name="T" />abhängig und werden nur in der nicht generischen-Schnittstelle angezeigt. Die <see cref="P:System.Collections.Generic.IEnumerator`1.Current" />-Eigenschaft wird auf beiden Schnittstellen angezeigt und hat unterschiedliche Rückgabe Typen. Implementieren Sie die nicht generische <see cref="P:System.Collections.IEnumerator.Current" />-Eigenschaft als explizite Schnittstellen Implementierung. Dies ermöglicht es jedem Consumer der nicht generischen-Schnittstelle, die generische-Schnittstelle zu verwenden.  
  
Außerdem <see cref="T:System.Collections.Generic.IEnumerator`1" /> <see cref="T:System.IDisposable" />implementiert, sodass Sie die <see cref="M:System.IDisposable.Dispose" />-Methode implementieren müssen. Dies ermöglicht es Ihnen, Datenbankverbindungen oder Datei Handles oder ähnliche Vorgänge zu schließen, wenn Sie andere Ressourcen verwenden. Wenn keine zusätzlichen Ressourcen zum verwerfen vorhanden sind, stellen Sie eine leere <see cref="M:System.IDisposable.Dispose" />-Implementierung bereit.</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IEnumerator`1.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.Collections.Generic.IEnumerator&lt;'T&gt;.Current" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Element in der Auflistung an der aktuellen Position des Enumerators ab.</summary>
        <value>Das Element in der Auflistung an der aktuellen Position des Enumerators.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> ist unter den folgenden Bedingungen nicht definiert:  
  
-   Der Enumerator ist vor dem Erstellen des Enumerators vor dem ersten Element in der Auflistung positioniert.   <xref:System.Collections.IEnumerator.MoveNext%2A> müssen aufgerufen werden, um den Enumerator vor dem Lesen des Werts <xref:System.Collections.Generic.IEnumerator%601.Current%2A>auf das erste Element der Auflistung zu setzen.  
  
-   Der letzte Aufrufe von <xref:System.Collections.IEnumerator.MoveNext%2A> `false`zurückgegeben, der das Ende der Auflistung angibt.  
  
-   Der Enumerator wird aufgrund der in der Auflistung vorgenommenen Änderungen ungültig, z. b. durch Hinzufügen, ändern oder Löschen von Elementen.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> gibt solange dasselbe Objekt zurück, bis <xref:System.Collections.IEnumerator.MoveNext%2A> aufgerufen wird. <xref:System.Collections.IEnumerator.MoveNext%2A> legt <xref:System.Collections.Generic.IEnumerator%601.Current%2A> auf das nächste Element fest.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Zum Implementieren dieser Schnittstelle muss die nicht generische <see cref="T:System.Collections.IEnumerator" />-Schnittstelle implementiert werden. Die <see cref="P:System.Collections.Generic.IEnumerator`1.Current" />-Eigenschaft wird auf beiden Schnittstellen angezeigt und hat unterschiedliche Rückgabe Typen. Implementieren Sie die nicht generische <see cref="P:System.Collections.IEnumerator.Current" />-Eigenschaft als explizite Schnittstellen Implementierung. Dies ermöglicht es jedem Consumer der nicht generischen-Schnittstelle, die generische-Schnittstelle zu verwenden.</para></block>
        <altmember cref="P:System.Collections.IEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
      </Docs>
    </Member>
  </Members>
</Type>

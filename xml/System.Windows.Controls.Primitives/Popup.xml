<Type Name="Popup" FullName="System.Windows.Controls.Primitives.Popup">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c7a5c14ccdc9c360f63945190aee8f8f3b7c4a9" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70435016" /></Metadata><TypeSignature Language="C#" Value="public class Popup : System.Windows.FrameworkElement, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Popup extends System.Windows.FrameworkElement implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Primitives.Popup" />
  <TypeSignature Language="VB.NET" Value="Public Class Popup&#xA;Inherits FrameworkElement&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class Popup : System::Windows::FrameworkElement, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type Popup = class&#xA;    inherit FrameworkElement&#xA;    interface IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Opened")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Child")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Child")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Popupfenster mit Inhalt dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **Inhalts Modell**: <xref:System.Windows.Controls.Primitives.Popup> verfügt über eine Inhalts Eigenschaft <xref:System.Windows.Controls.Primitives.Popup.Child%2A>:. Ein <xref:System.Windows.Controls.Primitives.Popup> -Element kann maximal ein untergeordnetes Element haben, das beliebig <xref:System.Windows.UIElement>sein kann.  
  
 Die folgende Abbildung zeigt ein <xref:System.Windows.Controls.Primitives.Popup> Steuerelement, das <xref:System.Windows.Controls.Button> über ein als übergeordnetes Element verfügt.  
  
 ![Popup Abbildung] (~/add/media/popuppicture.JPG "Popup Abbildung")  
  
 Sie können ein Popup positionieren, indem Sie <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A>die <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A>Eigenschaften <xref:System.Windows.Controls.Primitives.Popup.Placement%2A>, <xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A>,, <xref:System.Windows.Controls.Primitives.Popup.VerticalOffset%2A> und festlegen. Weitere Informationen finden Sie unter [Verhalten beim Platzieren von Popups](~/docs/framework/wpf/controls/popup-placement-behavior.md). Wenn <xref:System.Windows.Controls.Primitives.Popup> auf dem Bildschirm angezeigt wird, wird er nicht neu positioniert, wenn das übergeordnete Element neu positioniert wird.  
  
 Ein <xref:System.Windows.Controls.Primitives.Popup> zeigt seinen Inhalt in einem eigenen Fenster auf dem Bildschirm an. Ein <xref:System.Windows.Controls.Primitives.Popup> -Steuerelement unterstützt <xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A> Animation, wenn die `true` -Eigenschaft auf festgelegt ist und die Anwendung mit voller Vertrauenswürdigkeit ausgeführt wird. Eine Anwendung, die mit voller Vertrauenswürdigkeit ausgeführt wird, verfügt über vollständigen Zugriff auf Systemressourcen und wird in der Regel auf dem System des Benutzers installiert. Weitere Informationen finden Sie unter [Security (WPF)](~/docs/framework/wpf/security-wpf.md).  
  
 Damit Bitmap-und Deckkraft Effekte im Inhalt eines <xref:System.Windows.Controls.Primitives.Popup>angezeigt werden, müssen Sie die Effekte direkt auf den <xref:System.Windows.Controls.Primitives.Popup> Inhalt festlegen. Der Inhalt <xref:System.Windows.Controls.Primitives.Popup> eines erbt keine Effekte, die für das <xref:System.Windows.Controls.Primitives.Popup> Steuerelement oder ein anderes Element im übergeordneten Fenster festgelegt sind.  
  
 Ein <xref:System.Windows.Controls.Primitives.Popup> -Wert wird standardmäßig auf seinen Inhalt skaliert. Wenn dies auftritt, kann das <xref:System.Windows.UIElement.RenderTransform%2A> Anwenden eines-oder-Bitmapeffekte bewirken, dass das <xref:System.Windows.Controls.Primitives.Popup> verdeckt wird. Dies liegt daran, dass die Standardgröße des Inhalts nicht genügend Bereich für die anzuzeigenden Effekte bereitstellt. Wenn mehr Speicherplatz erforderlich ist, können Sie einen Rand um den <xref:System.Windows.Controls.Primitives.Popup> Inhalt definieren, um den Bereich zu vergrößern, der für das Steuerelement verfügbar ist.  
  
 Die <xref:System.Windows.FrameworkElement.Parent%2A> -Eigenschaft muss für die <xref:System.Windows.Controls.Primitives.Popup> festgelegt werden, wenn [!INCLUDE[TLA#tla_winfxwebapp](~/includes/tlasharptla-winfxwebapp-md.md)]Sie in einem verwendet wird.  
  
 Verwenden Sie zum Erstellen einer QuickInfo <xref:System.Windows.Controls.ToolTip> die <xref:System.Windows.Controls.ToolTipService> Klassen und. Weitere Informationen finden Sie unter [Übersicht über die QuickInfo](~/docs/framework/wpf/controls/tooltip-overview.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Controls.Primitives.Popup> -Steuerelement erstellt wird.  
  
 [!code-xaml[PopupSimple#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml#2)]  
  
 [!code-csharp[PopupSimple#CreatePopup](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#createpopup)]
 [!code-vb[PopupSimple#CreatePopup](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupSimple/VisualBasic/Window1.xaml.vb#createpopup)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Controls.Primitives.PlacementMode" />
    <altmember cref="T:System.Windows.Controls.ToolTip" />
    <altmember cref="T:System.Windows.Controls.ToolTipService" />
    <altmember cref="T:System.Windows.Controls.Primitives.CustomPopupPlacementCallback" />
    <altmember cref="T:System.Windows.Controls.Primitives.PopupAnimation" />
    <altmember cref="T:System.Windows.Controls.Primitives.PopupPrimaryAxis" />
    <altmember cref="T:System.Windows.Controls.Primitives.CustomPopupPlacement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Popup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Popup();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Controls.Primitives.Popup" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparency">
      <MemberSignature Language="C#" Value="public bool AllowsTransparency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsTransparency" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.AllowsTransparency" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowsTransparency As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsTransparency { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowsTransparency : bool with get, set" Usage="System.Windows.Controls.Primitives.Popup.AllowsTransparency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelement transparente Inhalte enthalten kann, oder legt ihn fest.</summary>
        <value><see langword="true" />, wenn das <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelement transparente Inhalte enthalten kann, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Controls.Primitives.Popup> Steuerelement kann nur transparente Inhalte enthalten, wenn die Anwendung mit voller Vertrauenswürdigkeit ausgeführt wird. Eine Anwendung, die mit voller Vertrauenswürdigkeit ausgeführt wird, verfügt über vollständigen Zugriff auf Systemressourcen und wird in der Regel auf dem lokalen System installiert. Weitere Informationen finden Sie unter [Security (WPF)](~/docs/framework/wpf/security-wpf.md).  
  
 Diese Eigenschaft kann nicht auf fest `true` gelegt werden <xref:System.Windows.Controls.Primitives.Popup> , wenn in einem [!INCLUDE[TLA#tla_winfxwebapp](~/includes/tlasharptla-winfxwebapp-md.md)]gehostet wird.  
  
 Wenn die <xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A> -Eigenschaft in einer `true` Anwendung, die nicht mit voller Vertrauenswürdigkeit ausgeführt wird, auf <xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A> festgelegt ist, wird `false`der-Eigenschafts Wert in geändert. Eine Anwendung, die in einem Browser gehostet wird, ist ein Beispiel für eine Anwendung, die nicht mit voller Vertrauenswürdigkeit ausgeführt wird.  
  
<a name="dependencyPropertyInfo_AllowsTransparency"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.AllowsTransparencyProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die <xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A> -Eigenschaft für <xref:System.Windows.Controls.Primitives.Popup> ein-Steuerelement festgelegt wird.  
  
 [!code-csharp[PopupSnips#AllowsTransparency](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml.cs#allowstransparency)]
 [!code-vb[PopupSnips#AllowsTransparency](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupSnips/visualbasic/window1.xaml.vb#allowstransparency)]
 [!code-xaml[PopupSnips#AllowsTransparency](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml#allowstransparency)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">zum Festlegen dieser Eigenschaft auf <see langword="true" />. Zugehörige Enumeration:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Windows.Window.AllowsTransparency" />
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparencyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowsTransparencyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.AllowsTransparencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowsTransparencyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowsTransparencyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowsTransparencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.AllowsTransparencyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.Primitives.Popup.AllowsTransparency" />-Abhängigkeitseigenschaft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Bezeichner für die <xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A>-Abhängigkeitseigenschaft.  
  
   
  
## Examples  
 [Übersicht über Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/dependency-properties-overview.md)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Child">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Child { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Child" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.Child" />
      <MemberSignature Language="VB.NET" Value="Public Property Child As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ Child { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Child : System.Windows.UIElement with get, set" Usage="System.Windows.Controls.Primitives.Popup.Child" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Inhalt des <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelements ab oder legt diesen fest.</summary>
        <value>Die <see cref="T:System.Windows.UIElement" />-Inhalt des <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelements. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **Inhalts Modell**: die <xref:System.Windows.Controls.Primitives.Popup.Child%2A> Eigenschaft ist die einzige Inhalts Eigenschaft für das <xref:System.Windows.Controls.Primitives.Popup> Steuerelement. Ein <xref:System.Windows.Controls.Primitives.Popup> kann nur ein unter <xref:System.Windows.UIElement> geordnetes Element aufweisen, aber dieses untergeordnete Element kann komplexen eingebetteten Inhalt enthalten. Das untergeordnete Element kann z. b <xref:System.Windows.Controls.StackPanel> . ein- <xref:System.Windows.Controls.Image>Element sein, das einen, Text und andere Typen von-Steuerelementen enthält.  
  
 Wenn einem <xref:System.Windows.Controls.Primitives.Popup> -Steuerelement Inhalt hinzugefügt wird <xref:System.Windows.Controls.Primitives.Popup> , wird das-Steuerelement zum logischen übergeordneten Element des-Inhalts. Entsprechend wird der <xref:System.Windows.Controls.Primitives.Popup> Inhalt als logisches untergeordnetes Element <xref:System.Windows.Controls.Primitives.Popup>von betrachtet. Der untergeordnete Inhalt wird nicht der visuellen Struktur hinzugefügt, die <xref:System.Windows.Controls.Primitives.Popup> das Steuerelement enthält. Stattdessen wird der untergeordnete Inhalt in einem separaten Fenster mit seiner eigenen visuellen Struktur gerendert <xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A> , wenn auf `true`festgelegt ist.  
  
<a name="dependencyPropertyInfo_Child"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.ChildProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie einem <xref:System.Windows.Controls.Primitives.Popup> -Steuerelement Inhalt hinzugefügt wird.  
  
 [!code-csharp[PopupSnips#Child](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml.cs#child)]
 [!code-vb[PopupSnips#Child](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupSnips/visualbasic/window1.xaml.vb#child)]
 [!code-xaml[PopupSnips#Child](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml#child)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ChildProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ChildProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.ChildProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ChildProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ChildProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ChildProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.ChildProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.Primitives.Popup.Child" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public event EventHandler Closed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Closed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.Primitives.Popup.Closed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Closed;" />
      <MemberSignature Language="F#" Value="member this.Closed : EventHandler " Usage="member this.Closed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich der Wert der <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" />-Eigenschaft in <see langword="false" /> ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Controls.Primitives.Popup> -Objekt wird geöffnet und geschlossen, indem die <xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A> -Eigenschaft ein-und ausgeschaltet wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein Ereignishandler für das <xref:System.Windows.Controls.Primitives.Popup.Closed> -Ereignis definiert wird.  
  
 [!code-csharp[PopupSnips#Closed](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml.cs#closed)]
 [!code-vb[PopupSnips#Closed](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupSnips/visualbasic/window1.xaml.vb#closed)]
 [!code-xaml[PopupSnips#Closed](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml#closed)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Controls.Primitives.Popup.Opened" />
      </Docs>
    </Member>
    <Member MemberName="CreateRootPopup">
      <MemberSignature Language="C#" Value="public static void CreateRootPopup (System.Windows.Controls.Primitives.Popup popup, System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateRootPopup(class System.Windows.Controls.Primitives.Popup popup, class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.CreateRootPopup(System.Windows.Controls.Primitives.Popup,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateRootPopup(System::Windows::Controls::Primitives::Popup ^ popup, System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="static member CreateRootPopup : System.Windows.Controls.Primitives.Popup * System.Windows.UIElement -&gt; unit" Usage="System.Windows.Controls.Primitives.Popup.CreateRootPopup (popup, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="popup" Type="System.Windows.Controls.Primitives.Popup" />
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="popup">Das <see cref="T:System.Windows.Controls.Primitives.Popup" />, zu dem das untergeordnete Element hinzugefügt wird.</param>
        <param name="child">Der untergeordnete <see cref="T:System.Windows.UIElement" />-Inhalt.</param>
        <summary>Fügt ein untergeordnetes Element an ein <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelement an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Möglicherweise möchten Sie ein benutzerdefiniertes Steuerelement erstellen, das über die gleiche Funktionalität wie ein vorhandenes Steuerelement verfügt <xref:System.Windows.Controls.Primitives.Popup>und auch das Verhalten von zeigt.  Sie können das Verhalten des Steuer Elements wie <xref:System.Windows.Controls.Primitives.Popup> ein Verhalten, <xref:System.Windows.Controls.Primitives.Popup> indem Sie dem Steuerelement ein <xref:System.Windows.Controls.Primitives.Popup.CreateRootPopup%2A> -Element hinzufügen und die-Methode aufrufen.  
  
 Diese Methode weist `child` die untergeordnete Eigenschaft zu und bindet die folgenden Eigenschaften `child`an.  
  
-   <xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A>  
  
-   <xref:System.Windows.Controls.Primitives.Popup.CustomPopupPlacementCallback%2A>  
  
-   <xref:System.Windows.Controls.Primitives.Popup.Placement%2A>  
  
-   <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A>  
  
-   <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A>  
  
-   <xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A>  
  
-   <xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A>  
  
-   <xref:System.Windows.Controls.Primitives.Popup.VerticalOffset%2A>  
  
 Sie sollten diese als Abhängigkeits Eigenschaften in Ihrem-Steuerelement implementieren, damit es auf die gleiche Weise <xref:System.Windows.Controls.Primitives.Popup>wie ein verwendet werden kann. Weitere Informationen finden Sie unter [Benutzerdefinierte Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/custom-dependency-properties.md).  
  
 Wenn Sie <xref:System.Windows.Controls.Primitives.Popup.CreateRootPopup%2A>aufzurufen `child` , kann kein untergeordnetes Element <xref:System.Windows.UIElement>eines sein. Außerdem sollte `PlacementTarget` für das-Steuerelement festgelegt werden, bevor diese Methode aufgerufen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomPopupPlacementCallback">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.Primitives.CustomPopupPlacementCallback CustomPopupPlacementCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.Primitives.CustomPopupPlacementCallback CustomPopupPlacementCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.CustomPopupPlacementCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomPopupPlacementCallback As CustomPopupPlacementCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::Primitives::CustomPopupPlacementCallback ^ CustomPopupPlacementCallback { System::Windows::Controls::Primitives::CustomPopupPlacementCallback ^ get(); void set(System::Windows::Controls::Primitives::CustomPopupPlacementCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomPopupPlacementCallback : System.Windows.Controls.Primitives.CustomPopupPlacementCallback with get, set" Usage="System.Windows.Controls.Primitives.Popup.CustomPopupPlacementCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Primitives.CustomPopupPlacementCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Delegathandlermethode ab, die das <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelement positioniert, oder legt diese Methode fest.</summary>
        <value>Die <see cref="T:System.Windows.Controls.Primitives.CustomPopupPlacementCallback" />-Delegatenmethode, die Informationen zur Platzierung für das <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelement bereitstellt. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_CustomPopupPlacementCallback"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.CustomPopupPlacementCallbackProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Windows.Controls.Primitives.Popup.CustomPopupPlacementCallback%2A> Delegat festgelegt wird.  
  
 [!code-csharp[PopupCustomPlacement#DelegateDefinition](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupCustomPlacement/CSharp/Window1.xaml.cs#delegatedefinition)]
 [!code-vb[PopupCustomPlacement#DelegateDefinition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupCustomPlacement/visualbasic/window1.xaml.vb#delegatedefinition)]  
  
 [!code-csharp[PopupCustomPlacement#DelegateInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupCustomPlacement/CSharp/Window1.xaml.cs#delegateinstance)]
 [!code-vb[PopupCustomPlacement#DelegateInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupCustomPlacement/visualbasic/window1.xaml.vb#delegateinstance)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Primitives.CustomPopupPlacementCallback" />
      </Docs>
    </Member>
    <Member MemberName="CustomPopupPlacementCallbackProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomPopupPlacementCallbackProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomPopupPlacementCallbackProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.CustomPopupPlacementCallbackProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomPopupPlacementCallbackProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomPopupPlacementCallbackProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomPopupPlacementCallbackProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.CustomPopupPlacementCallbackProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="T:System.Windows.Controls.Primitives.CustomPopupPlacementCallback" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="popup.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt das logische übergeordnete Element eines <see cref="T:System.Windows.Controls.Primitives.Popup" /> zurück.</summary>
        <returns>Wenn das <see cref="T:System.Windows.Controls.Primitives.Popup" /> nicht über ein definiertes übergeordnetes Element verfügt und das <see cref="P:System.Windows.Controls.Primitives.Popup.PlacementTarget" /> nicht <see langword="null" /> ist, wird das <see cref="P:System.Windows.Controls.Primitives.Popup.PlacementTarget" /> zurückgegeben. Andernfalls sind die Rückgabewerte dieselben wie bei <see cref="M:System.Windows.FrameworkElement.GetUIParentCore" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDropShadow">
      <MemberSignature Language="C#" Value="public bool HasDropShadow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasDropShadow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.HasDropShadow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasDropShadow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasDropShadow { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasDropShadow : bool" Usage="System.Windows.Controls.Primitives.Popup.HasDropShadow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein <see cref="T:System.Windows.Controls.Primitives.Popup" /> mit einem Schlagschatteneffekt angezeigt wird.</summary>
        <value><see langword="true" />, wenn das <see cref="T:System.Windows.Controls.Primitives.Popup" /> mit einem Schlagschatteneffekt angezeigt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Schlag Schatteneffekt wird angezeigt, <xref:System.Windows.SystemParameters.DropShadow%2A?displayProperty=nameWithType> wenn die- <xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A?displayProperty=nameWithType> Eigenschaft und die- `true`Eigenschaft auf festgelegt sind.  
  
<a name="dependencyPropertyInfo_HasDropShadow"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.HasDropShadowProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie den Wert <xref:System.Windows.Controls.Primitives.Popup.HasDropShadow%2A> der-Eigenschaft erhalten.  
  
 [!code-csharp[PopupSnips#HasDropShadow](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml.cs#hasdropshadow)]
 [!code-vb[PopupSnips#HasDropShadow](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupSnips/visualbasic/window1.xaml.vb#hasdropshadow)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDropShadowProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HasDropShadowProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HasDropShadowProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.HasDropShadowProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HasDropShadowProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HasDropShadowProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HasDropShadowProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.HasDropShadowProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.Primitives.Popup.HasDropShadow" />-Abhängigkeitseigenschaft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Bezeichner für die <xref:System.Windows.Controls.Primitives.Popup.HasDropShadow%2A>-Abhängigkeitseigenschaft.  
  
   
  
## Examples  
 [Übersicht über Abhängigkeitseigenschaften](~/docs/framework/wpf/advanced/dependency-properties-overview.md)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalOffset">
      <MemberSignature Language="C#" Value="public double HorizontalOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 HorizontalOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalOffset As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double HorizontalOffset { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalOffset : double with get, set" Usage="System.Windows.Controls.Primitives.Popup.HorizontalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den horizontalen Abstand zwischen dem Zielursprung und dem Ausrichtungspunkt für das Popup ab oder legt diesen fest.</summary>
        <value>Der horizontale Abstand zwischen dem Zielursprung und dem Ausrichtungspunkt für das Popup. Weitere Informationen zum Ziel Ursprung und zum Popup Ausrichtungs Punkt finden Sie unter [Popup-Platzierungs Verhalten](~/docs/framework/wpf/controls/popup-placement-behavior.md). Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können ein Popup positionieren, indem Sie <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A>die <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A>Eigenschaften <xref:System.Windows.Controls.Primitives.Popup.Placement%2A>, <xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A>,, <xref:System.Windows.Controls.Primitives.Popup.VerticalOffset%2A> und festlegen. Weitere Informationen finden Sie unter [Verhalten beim Platzieren von Popups](~/docs/framework/wpf/controls/popup-placement-behavior.md).  
  
<a name="dependencyPropertyInfo_HorizontalOffset"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
<a name="xamlAttributeUsage_HorizontalOffset"></a>   
## <a name="xaml-attribute-usage"></a>Verwendung von XAML-Attributen  
  
```  
<object HorizontalOffset="double"/>  
- or -  
<object HorizontalOffset="qualifiedDouble"/>  
```  
  
<a name="xamlValues_HorizontallOffset"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 `double`  
 <xref:System.Double>  
  
 Eine Zeichen folgen Darstellung eines <xref:System.Double> -Werts. Dies wird als [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] Maßeinheit interpretiert. Zeichen folgen müssen nicht explizit Dezimalstellen enthalten. Beispielsweise ist der `1` Wert akzeptabel.  
  
 Die gleichen <xref:System.Double> Bereichs Einschränkungen gelten für diejenigen, die im Abschnitt Eigenschafts Wert dieses Themas erwähnt werden.  
  
 `qualifiedDouble`  
 Ein `double` Wert, wie zuvor in dieser Tabelle beschrieben, gefolgt von einer der folgenden Einheiten Deklarations Zeichenfolgen `cm`: `px`, `pt` `in`, oder.  
  
 `px`(Standard) ist[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in`ist Zoll; 1In = 96px  
  
 `cm`ist Zentimeter; 1cm = (96/2,54) px  
  
 `pt`ist Punkte 1pt = (96/72) px  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Windows.Controls.Primitives.Popup> erstellt und die <xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A> - <xref:System.Windows.Controls.Primitives.Popup.VerticalOffset%2A> Eigenschaft und die-Eigenschaft auf 20 festgelegt.  Die <xref:System.Windows.Controls.Primitives.Popup.Placement%2A> -Eigenschaft ist auf <xref:System.Windows.Controls.Primitives.PlacementMode.Bottom> festgelegt (die Standardeinstellung), sodass der Ziel Ursprung die linke untere Ecke des Zielbereichs und der Popup Ausrichtungs Punkt die linke <xref:System.Windows.Controls.Primitives.Popup>obere Ecke des ist.  
  
 [!code-xaml[PopupPositionSnippet#5](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupPositionSnippet/CS/Window1.xaml#5)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.PlacementTarget" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.PlacementRectangle" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.Placement" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalOffsetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalOffsetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalOffsetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalOffsetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalOffsetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HorizontalOffsetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOpen">
      <MemberSignature Language="C#" Value="public bool IsOpen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.IsOpen" />
      <MemberSignature Language="VB.NET" Value="Public Property IsOpen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOpen { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsOpen : bool with get, set" Usage="System.Windows.Controls.Primitives.Popup.IsOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Bezeichnung für <see cref="T:System.Windows.Controls.Primitives.Popup" /> sichtbar ist, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn das <see cref="T:System.Windows.Controls.Primitives.Popup" />-Objekt sichtbar ist, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Steuerelement einen <xref:System.Windows.Controls.Primitives.Popup> als Teil seines Standard Stils verwendet, binden <xref:System.Windows.Controls.Primitives.Popup> Sie <xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A> die-Eigenschaft von an eine Eigenschaft des Steuer Elements. Beispielsweise kann eine <xref:System.Windows.Controls.ComboBox> seine <xref:System.Windows.Controls.ComboBox.IsDropDownOpen%2A> -Eigenschaft <xref:System.Windows.Controls.Primitives.Popup>an die <xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A> -Eigenschaft des-Objekts binden. Dadurch <xref:System.Windows.Controls.Primitives.Popup> wird die Logik zum Steuern der Sichtbarkeit von vereinfacht.  
  
<a name="dependencyPropertyInfo_IsOpen"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.IsOpenProperty>|  
|Metadateneigenschaften auf `true` festgelegt|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
   
  
## Examples  
 Im folgenden Beispiel wird das Festlegen der <xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[PopupSnips#IsOpen](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml.cs#isopen)]
 [!code-vb[PopupSnips#IsOpen](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupSnips/visualbasic/window1.xaml.vb#isopen)]
 [!code-xaml[PopupSnips#IsOpen](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml#isopen)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOpenProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsOpenProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsOpenProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.IsOpenProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsOpenProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsOpenProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsOpenProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.IsOpenProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.Controls.Primitives.Popup.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Enumerator ab, den Sie verwenden können, um auf die logischen untergeordneten Elemente des <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelements zuzugreifen.</summary>
        <value>Ein <see cref="T:System.Collections.IEnumerator" />, den Sie verwenden können, um auf die logischen untergeordneten Elemente eines <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelements zuzugreifen. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie einem <xref:System.Windows.Controls.Primitives.Popup> -Steuerelement Inhalt hinzufügen <xref:System.Windows.Controls.Primitives.Popup> , wird das-Steuerelement zum logischen übergeordneten Element des-Inhalts. Entsprechend wird der <xref:System.Windows.Controls.Primitives.Popup> Inhalt als logisches untergeordnetes Element <xref:System.Windows.Controls.Primitives.Popup>von betrachtet. Der untergeordnete Inhalt wird nicht der visuellen Struktur hinzugefügt, die <xref:System.Windows.Controls.Primitives.Popup> das Steuerelement enthält. Stattdessen wird der untergeordnete Inhalt in einem separaten Fenster gerendert, das über eine eigene visuelle <xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A> Struktur verfügt, wenn `true`die-Eigenschaft auf festgelegt ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="popup.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Die verfügbare Größe, die dieses Element dem untergeordneten Element bereitstellen kann. Sie können den Wert unendlich verwenden, um anzuzeigen, dass das Element an die Größe jedes Inhalts angepasst werden kann.</param>
        <summary>Bestimmt die erforderliche Größe des <see cref="T:System.Windows.Controls.Primitives.Popup" />-Inhalts innerhalb der visuellen Struktur des logischen übergeordneten Elements.</summary>
        <returns>Eine <see cref="T:System.Windows.Size" />-Struktur, bei der die <see cref="P:System.Windows.Size.Height" />-Eigenschaft und die <see cref="P:System.Windows.Size.Width" />-Eigenschaft beide gleich 0 (null) sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt immer einen <xref:System.Windows.Size> -Wert zurück, der eine Breite und Höhe von 0 (NULL <xref:System.Windows.Controls.Primitives.Popup> ) aufweist, da sich der Inhalt nicht in der visuellen Struktur des <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A>logischen übergeordneten Elements oder befindet. Der untergeordnete Inhalt wird in einem anderen Fenster erstellt, das über eine eigene visuelle Struktur verfügt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnClosed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.OnClosed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClosed : EventArgs -&gt; unit&#xA;override this.OnClosed : EventArgs -&gt; unit" Usage="popup.OnClosed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Reagiert, wenn der Wert der <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" />-Eigenschaft von <see langword="true" /> in <see langword="false" /> geändert wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnOpened">
      <MemberSignature Language="C#" Value="protected virtual void OnOpened (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpened(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.OnOpened(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnOpened (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnOpened(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnOpened : EventArgs -&gt; unit&#xA;override this.OnOpened : EventArgs -&gt; unit" Usage="popup.OnOpened e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisargumente.</param>
        <summary>Reagiert auf den Zustand, bei dem der Wert der <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" />-Eigenschaft von <see langword="false" /> in <see langword="true" /> geändert wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected override void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="popup.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Stellt eine Klassenbehandlung für das <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />-Ereignis bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung stellt sicher, dass <xref:System.Windows.Controls.Primitives.Popup> ein-Objekt geschlossen wird, wenn ein <xref:System.Windows.Controls.Primitives.Popup> Maus Ereignis <xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A> außerhalb von auftritt, `false`wenn die-Eigenschaft auf festgelegt ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected override void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="popup.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Stellt eine Klassenbehandlung für das <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />-Ereignis bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung stellt sicher, dass <xref:System.Windows.Controls.Primitives.Popup> ein-Objekt geschlossen wird, wenn ein <xref:System.Windows.Controls.Primitives.Popup> Maus Ereignis <xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A> außerhalb von auftritt, `false`wenn die-Eigenschaft auf festgelegt ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected override void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="popup.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Stellt eine Klassenbehandlung für das <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />-Ereignis bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung stellt sicher, dass <xref:System.Windows.Controls.Primitives.Popup> ein-Objekt geschlossen wird, wenn ein <xref:System.Windows.Controls.Primitives.Popup> Maus Ereignis <xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A> außerhalb von auftritt, `false`wenn die-Eigenschaft auf festgelegt ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected override void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="popup.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Stellt eine Klassenbehandlung für das <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />-Ereignis bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Implementierung stellt sicher, dass <xref:System.Windows.Controls.Primitives.Popup> ein-Objekt geschlossen wird, wenn ein <xref:System.Windows.Controls.Primitives.Popup> Maus Ereignis <xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A> außerhalb von auftritt, `false`wenn die-Eigenschaft auf festgelegt ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Opened">
      <MemberSignature Language="C#" Value="public event EventHandler Opened;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Opened" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.Primitives.Popup.Opened" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Opened As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Opened;" />
      <MemberSignature Language="F#" Value="member this.Opened : EventHandler " Usage="member this.Opened : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich der Wert der <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" />-Eigenschaft in <see langword="true" /> ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Controls.Primitives.Popup> -Objekt wird geöffnet und geschlossen, indem die <xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A> -Eigenschaft ein-und ausgeschaltet wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein Ereignishandler für das <xref:System.Windows.Controls.Primitives.Popup.Opened> -Ereignis definiert wird.  
  
 [!code-csharp[PopupSnips#Opened](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml.cs#opened)]
 [!code-vb[PopupSnips#Opened](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupSnips/visualbasic/window1.xaml.vb#opened)]
 [!code-xaml[PopupSnips#Opened](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml#opened)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Controls.Primitives.Popup.Closed" />
      </Docs>
    </Member>
    <Member MemberName="Placement">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.Primitives.PlacementMode Placement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.Primitives.PlacementMode Placement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.Placement" />
      <MemberSignature Language="VB.NET" Value="Public Property Placement As PlacementMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::Primitives::PlacementMode Placement { System::Windows::Controls::Primitives::PlacementMode get(); void set(System::Windows::Controls::Primitives::PlacementMode value); };" />
      <MemberSignature Language="F#" Value="member this.Placement : System.Windows.Controls.Primitives.PlacementMode with get, set" Usage="System.Windows.Controls.Primitives.Popup.Placement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Primitives.PlacementMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Ausrichtung des <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelements beim Öffnen ab oder legt diese fest, und gibt das Verhalten des <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelements an, wenn dieses die Bildschirmgrenzen überschreitet.</summary>
        <value>Ein Wert der <see cref="T:System.Windows.Controls.Primitives.PlacementMode" />-Enumeration, der die Ausrichtung des <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelements beim Öffnen bestimmt und angibt, wie das Steuerelement mit den Bildschirmgrenzen interagiert. Die Standardeinstellung ist <see cref="F:System.Windows.Controls.Primitives.PlacementMode.Bottom" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können ein Popup positionieren, indem Sie <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A>die <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A>Eigenschaften <xref:System.Windows.Controls.Primitives.Popup.Placement%2A>, <xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A>,, <xref:System.Windows.Controls.Primitives.Popup.VerticalOffset%2A> und festlegen. Weitere Informationen finden Sie unter [Verhalten beim Platzieren von Popups](~/docs/framework/wpf/controls/popup-placement-behavior.md).  
  
 Wenn die <xref:System.Windows.SystemParameters.MenuDropAlignment%2A> -Eigenschaft `true` <xref:System.Windows.Controls.Primitives.PlacementMode.Right> <xref:System.Windows.Controls.Primitives.Popup.Placement%2A> <xref:System.Windows.Controls.Primitives.PlacementMode.Left> <xref:System.Windows.Controls.Primitives.Popup> <xref:System.Windows.Controls.Primitives.Popup.Placement%2A> auf fest <xref:System.Windows.Controls.Primitives.PlacementMode.Left>  gelegt ist, wird durch das Festlegen von auf oder die Position von umgekehrt <xref:System.Windows.Controls.Primitives.Popup> rechter Rand von <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A> und ein <xref:System.Windows.Controls.Primitives.Popup> , <xref:System.Windows.Controls.Primitives.Popup.Placement%2A> bei dem <xref:System.Windows.Controls.Primitives.PlacementMode.Right> auf festgelegt ist, um den rechten Rand am <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A>linken Rand von ausgerichtet.  
  
<a name="dependencyPropertyInfo_Placement"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.PlacementProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
   
  
## Examples  
 Im folgenden Beispiel werden vier <xref:System.Windows.Controls.Primitives.Popup> Steuerelemente erstellt, die relativ zu einem Bild sind. Jede <xref:System.Windows.Controls.Primitives.Popup> weist einen anderen Wert für die Platzierungs Eigenschaft auf.  
  
 [!code-xaml[PopupPositionSnippet#3](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupPositionSnippet/CS/Window1.xaml#3)]   
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Primitives.PlacementMode" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.Placement" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" />
      </Docs>
    </Member>
    <Member MemberName="PlacementProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PlacementProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PlacementProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.PlacementProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PlacementProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PlacementProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PlacementProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.PlacementProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.Primitives.Popup.Placement" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlacementRectangle">
      <MemberSignature Language="C#" Value="public System.Windows.Rect PlacementRectangle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect PlacementRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.PlacementRectangle" />
      <MemberSignature Language="VB.NET" Value="Public Property PlacementRectangle As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect PlacementRectangle { System::Windows::Rect get(); void set(System::Windows::Rect value); };" />
      <MemberSignature Language="F#" Value="member this.PlacementRectangle : System.Windows.Rect with get, set" Usage="System.Windows.Controls.Primitives.Popup.PlacementRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Rechteck ab, zu dem das <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelement beim Öffnen relativ positioniert wird, oder legt dieses fest.</summary>
        <value>Das Rechteck, an dem das <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelement positioniert wird. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können ein Popup positionieren, indem Sie <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A>die <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A>Eigenschaften <xref:System.Windows.Controls.Primitives.Popup.Placement%2A>, <xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A>,, <xref:System.Windows.Controls.Primitives.Popup.VerticalOffset%2A> und festlegen. Weitere Informationen finden Sie unter [Verhalten beim Platzieren von Popups](~/docs/framework/wpf/controls/popup-placement-behavior.md).  
  
<a name="dependencyPropertyInfo_PlacementRectangle"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.PlacementRectangleProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A> -Eigenschaft <xref:System.Windows.Controls.Primitives.Popup>eines-Objekts festgelegt. Die <xref:System.Windows.Rect.X%2A>Eigenschaften <xref:System.Windows.Rect.Y%2A>, , <xref:System.Windows.Rect.Width%2A>  und <xref:System.Windows.Rect.Height%2A>  von sind <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A>  50, 50, 50 und 100 bzw. Der <xref:System.Windows.Controls.Primitives.Popup> ist relativ zu den Begrenzungen <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A> der-Eigenschaft. Beachten Sie, <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A> dass die-Eigenschaft kein sichtbares Element in der Anwendung erstellt. im Beispiel <xref:System.Windows.Shapes.Rectangle> wird ein-Objekt mit denselben Begrenzungen <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A>erstellt, das die darstellt.  
  
 [!code-xaml[PopupPositionSnippet#6](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupPositionSnippet/CS/Window1.xaml#6)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.PlacementTarget" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.Placement" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160032">Beispiel für Popup Platzierung</related>
      </Docs>
    </Member>
    <Member MemberName="PlacementRectangleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PlacementRectangleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PlacementRectangleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.PlacementRectangleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PlacementRectangleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PlacementRectangleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PlacementRectangleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.PlacementRectangleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.Primitives.Popup.PlacementRectangle" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlacementTarget">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement PlacementTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement PlacementTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.PlacementTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property PlacementTarget As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ PlacementTarget { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PlacementTarget : System.Windows.UIElement with get, set" Usage="System.Windows.Controls.Primitives.Popup.PlacementTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Element ab, zu dem das <see cref="T:System.Windows.Controls.Primitives.Popup" /> beim Öffnen relativ positioniert wird.</summary>
        <value>Das <see cref="T:System.Windows.UIElement" />, das das logisch übergeordnete Element des <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelements ist. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können ein Popup positionieren, indem Sie <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A>die <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A>Eigenschaften <xref:System.Windows.Controls.Primitives.Popup.Placement%2A>, <xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A>,, <xref:System.Windows.Controls.Primitives.Popup.VerticalOffset%2A> und festlegen. Weitere Informationen finden Sie unter [Verhalten beim Platzieren von Popups](~/docs/framework/wpf/controls/popup-placement-behavior.md).  
  
<a name="dependencyPropertyInfo_PlacementTarget"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.PlacementTargetProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Windows.Controls.Primitives.Popup> erstellt, die das untergeordnete <xref:System.Windows.Controls.Canvas>Element eines ist <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A> , `ellipse1`und auf festgelegt, sodass das Popup <xref:System.Windows.Shapes.Ellipse>-Element relativ zum ist.  
  
 [!code-xaml[PopupPositionSnippet#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupPositionSnippet/CS/Window1.xaml#2)]    
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.Placement" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.PlacementRectangle" />
      </Docs>
    </Member>
    <Member MemberName="PlacementTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PlacementTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PlacementTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.PlacementTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PlacementTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PlacementTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PlacementTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.PlacementTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.Primitives.Popup.PlacementTarget" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopupAnimation">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.Primitives.PopupAnimation PopupAnimation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.Primitives.PopupAnimation PopupAnimation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.PopupAnimation" />
      <MemberSignature Language="VB.NET" Value="Public Property PopupAnimation As PopupAnimation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::Primitives::PopupAnimation PopupAnimation { System::Windows::Controls::Primitives::PopupAnimation get(); void set(System::Windows::Controls::Primitives::PopupAnimation value); };" />
      <MemberSignature Language="F#" Value="member this.PopupAnimation : System.Windows.Controls.Primitives.PopupAnimation with get, set" Usage="System.Windows.Controls.Primitives.Popup.PopupAnimation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Primitives.PopupAnimation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Animation für das Öffnen und Schließen eines <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelements ab oder legt diese Animation fest.</summary>
        <value>Der <see cref="T:System.Windows.Controls.Primitives.PopupAnimation" />-Enumerationswert, der eine Animation für ein Öffnen und Schließen eines <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelements definiert. Die Standardeinstellung ist <see cref="F:System.Windows.Controls.Primitives.PopupAnimation.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Controls.Primitives.Popup> kann nur animiert werden, <xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A> wenn die-Eigenschaft `true`auf festgelegt ist. Dies erfordert, dass die Anwendung, <xref:System.Windows.Controls.Primitives.Popup> die das Steuerelement erstellt, mit voller Vertrauenswürdigkeit ausgeführt wird.  
  
 Wenn animiert <xref:System.Windows.Controls.Primitives.Popup> wird, wird nicht animiert. <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A>  
  
<a name="dependencyPropertyInfo_PopupAnimation"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.PopupAnimationProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
   
  
## Examples  
 Im folgenden Beispiel wird das Festlegen der <xref:System.Windows.Controls.Primitives.Popup.PopupAnimation%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[PopupSnips#AllowsTransparency](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml.cs#allowstransparency)]
 [!code-vb[PopupSnips#AllowsTransparency](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupSnips/visualbasic/window1.xaml.vb#allowstransparency)]
 [!code-xaml[PopupSnips#AllowsTransparency](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml#allowstransparency)]  
  
 [!code-csharp[PopupSnips#Animation](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml.cs#animation)]
 [!code-vb[PopupSnips#Animation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupSnips/visualbasic/window1.xaml.vb#animation)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Primitives.PopupAnimation" />
      </Docs>
    </Member>
    <Member MemberName="PopupAnimationProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PopupAnimationProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PopupAnimationProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.PopupAnimationProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PopupAnimationProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PopupAnimationProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PopupAnimationProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.PopupAnimationProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.Primitives.Popup.PopupAnimation" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StaysOpen">
      <MemberSignature Language="C#" Value="public bool StaysOpen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StaysOpen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.StaysOpen" />
      <MemberSignature Language="VB.NET" Value="Public Property StaysOpen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StaysOpen { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StaysOpen : bool with get, set" Usage="System.Windows.Controls.Primitives.Popup.StaysOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelement geschlossen wird, sobald es den Fokus verliert.</summary>
        <value><see langword="true" />, wenn das <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelement geschlossen wird, wenn die <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" />-Eigenschaft auf <see langword="false" /> festgelegt wird; <see langword="false" />, wenn das <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelement geschlossen wird, wenn ein Maus- oder Tastaturereignis außerhalb des <see cref="T:System.Windows.Controls.Primitives.Popup" />-Steuerelements auftritt. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A> -Eigenschaft auf `true`festgelegt <xref:System.Windows.Controls.Primitives.Popup> ist, bleibt geöffnet, bis Sie explizit geschlossen wird <xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A> , indem `false`die-Eigenschaft auf festgelegt wird. <xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A> <xref:System.Windows.Controls.Primitives.Popup> Wenn den Wert <xref:System.Windows.Controls.Primitives.Popup> hat, fängt das-Steuerelement alle Maus-und Tastatur Ereignisse ab, um zu bestimmen, wann eines dieser Ereignisse außerhalb des-Steuer Elements auftritt. `false`  
  
<a name="dependencyPropertyInfo_StaysOpen"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.StaysOpenProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
   
  
## Examples  
 Im folgenden Beispiel wird das Festlegen der <xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[PopupSnips#StaysOpen](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml.cs#staysopen)]
 [!code-vb[PopupSnips#StaysOpen](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PopupSnips/visualbasic/window1.xaml.vb#staysopen)]
 [!code-xaml[PopupSnips#StaysOpen](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSnips/Csharp/Window1.xaml#staysopen)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" />
      </Docs>
    </Member>
    <Member MemberName="StaysOpenProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StaysOpenProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StaysOpenProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.StaysOpenProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StaysOpenProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StaysOpenProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StaysOpenProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.StaysOpenProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.Primitives.Popup.StaysOpen" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Ein Objekt, das als untergeordnetes Element hinzugefügt werden soll.</param>
        <summary>Dieser Member unterstützt die [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Infrastruktur und ist nicht für die direkte Verwendung im Code vorgesehen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.Popup.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Eine Zeichenfolge, die dem Objekt hinzugefügt werden soll.</param>
        <summary>Dieser Member unterstützt die [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Infrastruktur und ist nicht für die direkte Verwendung im Code vorgesehen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalOffset">
      <MemberSignature Language="C#" Value="public double VerticalOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 VerticalOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalOffset As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double VerticalOffset { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalOffset : double with get, set" Usage="System.Windows.Controls.Primitives.Popup.VerticalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den vertikalen Abstand zwischen dem Zielursprung und dem Ausrichtungspunkt für das Popup ab oder legt diesen fest.</summary>
        <value>Der vertikale Abstand zwischen dem Zielursprung und dem Ausrichtungspunkt für das Popup. Weitere Informationen zum Ziel Ursprung und zum Popup Ausrichtungs Punkt finden Sie unter [Popup-Platzierungs Verhalten](~/docs/framework/wpf/controls/popup-placement-behavior.md). Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können ein Popup positionieren, indem Sie <xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A>die <xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A>Eigenschaften <xref:System.Windows.Controls.Primitives.Popup.Placement%2A>, <xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A>,, <xref:System.Windows.Controls.Primitives.Popup.VerticalOffset%2A> und festlegen. Weitere Informationen finden Sie unter [Verhalten beim Platzieren von Popups](~/docs/framework/wpf/controls/popup-placement-behavior.md).  
  
<a name="xamlAttributeUsage_VerticalOffset"></a>   
## <a name="xaml-attribute-usage"></a>Verwendung von XAML-Attributen  
  
```  
<object VerticalOffset="double"/>  
- or -  
<object VerticalOffset="qualifiedDouble"/>  
```  
  
<a name="xamlValues_VerticalOffset"></a>   
## <a name="xaml-values"></a>XAML-Werte  
 `double`  
 <xref:System.Double>  
  
 Eine Zeichen folgen Darstellung eines <xref:System.Double> -Werts. Dies wird als [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] Maßeinheit interpretiert. Zeichen folgen müssen nicht explizit Dezimalstellen enthalten. Beispielsweise ist der `1` Wert akzeptabel.  
  
 Die gleichen <xref:System.Double> Bereichs Einschränkungen gelten für diejenigen, die im Abschnitt Eigenschafts Wert dieses Themas erwähnt werden.  
  
 `qualifiedDouble`  
 Ein `double` Wert, wie zuvor in dieser Tabelle beschrieben, gefolgt von einer der folgenden Einheiten Deklarations Zeichenfolgen `cm`: `px`, `pt` `in`, oder.  
  
 `px`(Standard) ist[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in`ist Zoll; 1In = 96px  
  
 `cm`ist Zentimeter; 1cm = (96/2,54) px  
  
 `pt`ist Punkte 1pt = (96/72) px  
  
<a name="dependencyPropertyInfo_VerticalOffset"></a>   
## <a name="dependency-property-information"></a>Informationen zur Abhängigkeitseigenschaft  
  
|||  
|-|-|  
|Bezeichnerfeld|<xref:System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty>|  
|Metadateneigenschaften auf `true` festgelegt|Keine|  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Windows.Controls.Primitives.Popup> erstellt und die <xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A> - <xref:System.Windows.Controls.Primitives.Popup.VerticalOffset%2A> Eigenschaft und die-Eigenschaft auf 20 festgelegt.  Die <xref:System.Windows.Controls.Primitives.Popup.Placement%2A> -Eigenschaft ist auf <xref:System.Windows.Controls.Primitives.PlacementMode.Bottom> festgelegt (die Standardeinstellung), sodass der Ziel Ursprung die linke untere Ecke des Zielbereichs ist und der Popup Ausrichtungs Punkt die linke <xref:System.Windows.Controls.Primitives.Popup>obere Ecke des ist.  
  
 [!code-xaml[PopupPositionSnippet#5](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupPositionSnippet/CS/Window1.xaml#5)]     
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.PlacementTarget" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.PlacementRectangle" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.Placement" />
        <altmember cref="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" />
      </Docs>
    </Member>
    <Member MemberName="VerticalOffsetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalOffsetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalOffsetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalOffsetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalOffsetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VerticalOffsetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bezeichnet die <see cref="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" />-Abhängigkeitseigenschaft.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

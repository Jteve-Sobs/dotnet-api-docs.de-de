<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3826e6f3e20f9dbc94d47c3d958b6e469e8cfe76" />
    <Meta Name="ms.sourcegitcommit" Value="e7865e39826e7aaf54da4c7042975153813a31c7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/16/2018" />
    <Meta Name="ms.locfileid" Value="31044261" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Unterstützt die Implementierung der <see cref="T:System.Data.IDbDataAdapter" />-Schnittstelle. Vererber von <see cref="T:System.Data.Common.DbDataAdapter" /> implementieren verschiedene Funktion zur Bereitstellung einer starken Typisierung, aber vererben die meisten Funktionen, die benötigt werden, um einen **DataAdapter** vollständig zu implementieren.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter> Klasse erbt von der <xref:System.Data.Common.DataAdapter> -Klasse und implementiert die <xref:System.Data.IDbDataAdapter> Schnittstelle. Sie hilft bei der eine Klasse implementieren eine **"DataAdapter"** für die Verwendung mit einer relationalen Datenbank vorgesehen.  
  
 Eine Anwendung erstellt eine Instanz der nicht der <xref:System.Data.Common.DbDataAdapter> -Klasse direkt, sondern erstellt eine Instanz einer Klasse, die von ihr erbt.  
  
 Klassen, erben <xref:System.Data.Common.DbDataAdapter> müssen Sie die geerbten Member implementieren und definieren Sie in der Regel zusätzliche Elemente, um die anbieterspezifische Funktionalität hinzufügen. Z. B. die <xref:System.Data.Common.DbDataAdapter> Klasse definiert die <xref:System.Data.IDbDataAdapter.SelectCommand%2A> -Eigenschaft, und die <xref:System.Data.Common.DbDataAdapter> Klasse definiert acht Überladungen der der <xref:System.Data.IDataAdapter.Fill%2A> Methode. Wiederum die <xref:System.Data.OleDb.OleDbDataAdapter> Klasse erbt die <xref:System.Data.Common.DbDataAdapter.Fill%2A> -Methode, und definiert außerdem zwei zusätzliche Überladungen <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> , die ein ADO-Recordset-Objekt als Parameter übernehmen.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Beim Erben von der <see cref="T:System.Data.Common.DbDataAdapter" /> -Klasse, es wird empfohlen, dass Sie die folgenden Konstruktoren implementieren:  
  
 <list type="table"><listheader><term> Element  
  
 </term><description> Beschreibung  
  
 </description></listheader><item><term> *Prv*DataAdapter()  
  
 </term><description> Initialisiert eine neue Instanz der dem *Prv*DataAdapter-Klasse.  
  
 </description></item><item><term> *Prv*"DataAdapter" (*Prv*Befehl *SelectCommand*)  
  
 </term><description> Initialisiert eine neue Instanz der dem *Prv*"DataAdapter"-Klasse mit der angegebenen SQL-SELECT-Anweisung.  
  
 </description></item><item><term> *Prv*"DataAdapter" (Zeichenfolge *SelectCommandText*, Zeichenfolge *SelectConnectionString*)  
  
 </term><description> Initialisiert eine neue Instanz der dem *Prv*"DataAdapter"-Klasse mit einer SQL SELECT-Anweisung und eine Verbindungszeichenfolge enthalten.  
  
 </description></item><item><term> *Prv*"DataAdapter" (Zeichenfolge *SelectCommandText*, *Prv*Verbindung *SelectConnection*)  
  
 </term><description> Initialisiert eine neue Instanz der dem *Prv*"DataAdapter"-Klasse mit einer SQL SELECT-Anweisung und eine *Prv*Verbindungsobjekt.  
  
 </description></item></list>  
  
 Um eine Konsistenz zwischen .NET Framework-Datenanbietern zu erzielen, sollten Sie die erbende Klasse in der Form benennen *Prv*"DataAdapter", wobei *Prv* ist die einheitliche Präfix für alle Klassen in einer bestimmten .NET Framework Data Provider-Namespace. "Sql" ist z. B. das Präfix der <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> -Klasse in der **System.Data.SqlClient** Namespace.</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz einer <see langword="DataAdapter" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz einer **DataAdapter** Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Erstellen einer Instanz von <xref:System.Data.Common.DbDataAdapter>, werden die folgenden Eigenschaften für den Lese-/Schreibzugriff auf die folgenden Ausgangswerte festgelegt.  
  
|Eigenschaften|Anfangswert|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|Ein neuer <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|Ein neuer <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|Ein neuer <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|Ein neuer <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 Sie können den Wert der alle diese Eigenschaften über einen separaten Aufruf der Eigenschaft ändern.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">Ein für die Erstellung des neuen <see langword="DataAdapter" /> verwendetes <see langword="DataAdapter" />-Objekt.</param>
        <summary>Initialisiert eine neue Instanz einer <see langword="DataAdapter" />-Klasse aus einem vorhandenen Objekt desselben Typs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung von der <xref:System.Data.Common.DbDataAdapter> Konstruktor ist für die Verwendung durch einen .NET Framework-Datenanbieter vorgesehen, wenn einen ähnlichen Konstruktor für die Verwendung in einem Klon implementiert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" />
      </Parameters>
      <Docs>
        <param name="command">Der dem Batch hinzuzufügende <see cref="T:System.Data.IDbCommand" />.</param>
        <summary>Fügt im aktuellen Batch einen <see cref="T:System.Data.IDbCommand" /> hinzu.</summary>
        <returns>Die Anzahl der Befehle im Batch vor dem Hinzufügen des <see cref="T:System.Data.IDbCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, löst diese Methode <xref:System.NotSupportedException>. Klassen, die von erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um die Batches unterstützen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Der Adapter unterstützt keine Batches.</exception>
        <block subset="none" type="overrides">
          <para>Diese Methode wird geschützt und ist für die Verwendung durch einen .NET Framework-Datenanbieter konzipiert.  
  
 Wenn eine Klasse, die von erben <see cref="T:System.Data.Common.DbDataAdapter" /> Batches unterstützt, überschreibt diese Klasse diese Methode, damit Benutzer einen Befehl zu einem Batch hinzufügen können.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle <see cref="T:System.Data.IDbCommand" />-Objekte aus dem Batch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, löst diese Methode <xref:System.NotSupportedException>. Klassen, die von erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um die Batches unterstützen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Der Adapter unterstützt keine Batches.</exception>
        <block subset="none" type="overrides">
          <para>Diese Methode wird geschützt und ist für die Verwendung durch einen .NET Framework-Datenanbieter konzipiert.  
  
 Wenn eine Klasse, die von erben <see cref="T:System.Data.Common.DbDataAdapter" /> Batches unterstützt, überschreibt diese Klasse diese Methode, damit Benutzer auf alle Befehle aus einem Batch entfernen können.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">Die <see cref="T:System.Data.DataRow" />, mit der die Datenquelle aktualisiert wird.</param>
        <param name="command">Der während des <see cref="T:System.Data.IDbCommand" /> ausgeführte <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Gibt an, ob es sich bei dem Befehl um eine UPDATE-Anweisung, INSERT-Anweisung, DELETE-Anweisung oder SELECT-Anweisung handelt.</param>
        <param name="tableMapping">Ein <see cref="T:System.Data.Common.DataTableMapping" />-Objekt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Common.RowUpdatedEventArgs" />-Klasse.</summary>
        <returns>Eine neue Instanz der <see cref="T:System.Data.Common.RowUpdatedEventArgs" />-Klasse.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> Methode.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">Die <see cref="T:System.Data.DataRow" />, mit der die Datenquelle aktualisiert wird.</param>
        <param name="command">Das während des <see cref="T:System.Data.IDbCommand" /> auszuführende <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Gibt an, ob es sich bei dem Befehl um eine UPDATE-Anweisung, INSERT-Anweisung, DELETE-Anweisung oder SELECT-Anweisung handelt.</param>
        <param name="tableMapping">Ein <see cref="T:System.Data.Common.DataTableMapping" />-Objekt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Common.RowUpdatingEventArgs" />-Klasse.</summary>
        <returns>Eine neue Instanz der <see cref="T:System.Data.Common.RowUpdatingEventArgs" />-Klasse.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> Methode.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Der vom <see cref="T:System.Data.Common.DataAdapter" />-Objekt verwendete Standardname für Tabellenzuordnungen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Table" lautet der Name der von verwendet die <xref:System.Data.Common.DataAdapter> Objekt für die tabellenzuordnungen.  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> ist, wenn eine Anwendung eine Zuordnung zu einer Tabelle mit fügt <xref:System.Data.Common.DbDataAdapter.Fill%2A>, aber nicht an eine <xref:System.Data.DataTable> Name.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Befehl zum Löschen von Datensätzen aus dem Dataset ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, das während der Ausführung von <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in der Datenquelle zu löschen, die gelöschten Zeilen im DataSet entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Während der <xref:System.Data.Common.DbDataAdapter.Update%2A>, wenn diese Eigenschaft nicht festgelegt ist und Primärschlüsselinformationen vorhanden, in ist der <xref:System.Data.DataSet>, die <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> wird automatisch generiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.OleDb.OleDbDataAdapter> und legt einige ihrer Eigenschaften.  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Gibt die von <see cref="T:System.Data.Common.DbDataAdapter" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt den aktuellen Batch aus.</summary>
        <returns>Der Rückgabewert des letzten Befehls im Batch.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, löst diese Methode <xref:System.NotSupportedException>. Klassen, die von erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um die Batches unterstützen.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Diese Methode wird geschützt und ist für die Verwendung durch einen .NET Framework-Datenanbieter konzipiert.  
  
 Wenn eine Klasse, die von erben <see cref="T:System.Data.Common.DbDataAdapter" /> Batches unterstützt, überschreibt diese Klasse diese Methode, damit Benutzer einen Batch ausführen können. Eine Implementierung dieser Methode kombiniert, die Befehle im Adapter in einem Batch und führt den Batch und gibt den Rückgabewert des Batches zurück.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Füllt ein <see cref="T:System.Data.DataSet" /> oder eine <see cref="T:System.Data.DataTable" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <summary>Fügt Zeilen in <see cref="T:System.Data.DataSet" /> hinzu oder aktualisiert diese.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> Methode ruft die Daten aus der Datenquelle mithilfe einer SELECT-Anweisung ab. Die <xref:System.Data.IDbConnection> mit der select-Befehl muss gültig sein, aber er muss nicht geöffnet werden. Wenn die <xref:System.Data.IDbConnection> wird geschlossen, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, wird es zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, es bleibt geöffnet.  
  
 Wenn ein Fehler oder eine Ausnahme, beim Füllen der Datentabellen festgestellt wird, bleiben vor dem Auftreten des Fehlers hinzugefügte Zeilen in den Datentabellen. Im weiteren Verlauf des Vorgangs wird abgebrochen.  
  
 Wenn ein Befehl keine Zeilen zurückgibt, werden keine Tabellen hinzugefügt, um die <xref:System.Data.DataSet>, und es werden keine Ausnahmen ausgelöst.  
  
 Wenn die <xref:System.Data.Common.DbDataAdapter> Objekt trifft doppelte Spalten beim Auffüllen einer <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten unter Verwendung des Musters "*Columnname*1","*Columnname*2", " *Columnname*3" und So weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw.  
  
 Wenn die angegebene Abfrage mehrere Ergebnisse zurückgibt, wird das Resultset für jede Zeile zurückgeben der Abfrage in einer separaten Tabelle platziert. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf den angegebenen Tabellennamen (z. B. "Table", "Table1", "Table2" usw.). Da keine Tabelle für eine Abfrage, die keine Zeilen zurückgibt erstellt wird, wenn Sie eine Abfrage zum Einfügen von gefolgt von einer select-Abfrage verarbeiten, ist für die select-Abfrage erstellte Tabelle "Table" benannt, ist die erste Tabelle erstellt. Anwendungen, die mithilfe von Spalten- und Tabellennamen sollten sicherstellen, dass Konflikte mit dieser Benennungsschema erfolgt nicht.  
  
 Wenn die SELECT-Anweisung zum Füllen der <xref:System.Data.DataSet> mehrere Ergebnisse zurückgibt, z. B. SQL-Batchanweisungen, wenn eines der Ergebnisse einen Fehler enthält, alle nachfolgenden Ergebnisse werden übersprungen und nicht hinzugefügt werden die <xref:System.Data.DataSet>.  
  
 Bei nachfolgenden Verwendung <xref:System.Data.Common.DbDataAdapter.Fill%2A> Aufrufe zum Aktualisieren des Inhalts der <xref:System.Data.DataSet>, müssen zwei Bedingungen erfüllt sein:  
  
1.  Die SQL-Anweisung übereinstimmen, dem Schlüssel Anfangs zum Auffüllen der <xref:System.Data.DataSet>.  
  
2.  Die **Schlüssel** Spalteninformationen muss vorhanden sein.  
  
 Wenn Primärschlüsselinformationen vorhanden ist, wird keine doppelten Zeilen abgestimmt sind und nur einmal in der <xref:System.Data.DataTable> , entspricht der <xref:System.Data.DataSet>. Primärschlüsselinformationen kann festgelegt werden, entweder durch <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, durch Angabe der <xref:System.Data.DataTable.PrimaryKey%2A> Eigenschaft von der <xref:System.Data.DataTable>, oder durch Festlegen der <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> Eigenschaft `AddWithKey`.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A>-Wert für die resultierende <xref:System.Data.DataTable> festgelegt. Sie müssen explizit definieren, dass den Primärschlüssel, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Primärschlüssel definieren](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework-Datenanbieter für OLE DB-Schemainformationen für nur das erste Ergebnis ab. Verwenden Sie zum Abrufen von Schemainformationen für mehrere Ergebnisse <xref:System.Data.Common.DbDataAdapter.Fill%2A> mit der <xref:System.Data.MissingSchemaAction> festgelegt `AddWithKey`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Der Name der <see cref="T:System.Data.DataTable" />, die für die Tabellenzuordnung verwendet werden soll.</param>
        <summary>Aktualisiert Zeilen in einem angegebenen Bereich des <see cref="T:System.Data.DataSet" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, die den <see cref="T:System.Data.DataTable" />-Namen verwendet.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> Methode ruft Zeilen ab, aus der Datenquelle mithilfe der SELECT-Anweisung angegeben wird, ein zugeordnetes <xref:System.Data.IDbDataAdapter.SelectCommand%2A> Eigenschaft. Das Verbindungsobjekt, das die SELECT-Anweisung zugeordnet, muss gültig sein, aber er muss nicht geöffnet werden. Wenn die Verbindung geschlossen wird, bevor Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, es wird zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, es bleibt geöffnet.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> klicken Sie dann den Vorgang fügt die Zeilen Ziel <xref:System.Data.DataTable> Objekte in der <xref:System.Data.DataSet>, beim Erstellen der <xref:System.Data.DataTable> Objekten zurück, wenn sie nicht bereits vorhanden sind. Beim Erstellen <xref:System.Data.DataTable> Objekte, die <xref:System.Data.Common.DbDataAdapter.Fill%2A> Vorgang normalerweise nur Metadaten für Spaltennamen erstellt. Jedoch, wenn die <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> -Eigenschaftensatz auf `AddWithKey`, entsprechenden Primärschlüssel und Einschränkungen werden ebenfalls erstellt.  
  
 Wenn die <xref:System.Data.Common.DbDataAdapter> mehrfach vorhandene Spalten findet beim Auffüllen des eine <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "*Columnname*1", "*Columnname*2", "*Columnname*3" und So weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn mehrere Resultsets hinzugefügt werden, um die <xref:System.Data.DataSet> jedes Resultset in einer separaten Tabelle platziert wird.  
  
 Die Überladung der <xref:System.Data.Common.DbDataAdapter.Fill%2A> , akzeptiert `DataTable` wie ein Parameter nur das erste Ergebnis abruft. Verwenden Sie eine Überladung des <xref:System.Data.Common.DbDataAdapter.Fill%2A> , akzeptiert `DataSet` als Parameter an mehreren Ergebnisse zu erhalten.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> -Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> enthält mehrere <xref:System.Data.DataTable> Objekte, deren Namen unterscheiden sich nur durch '-Fällen. In solchen Situationen <xref:System.Data.Common.DbDataAdapter.Fill%2A> führt einen Vergleich Groß-/Kleinschreibung beachtet, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle aus, wenn keine genaue Übereinstimmung vorhanden ist. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird und die <xref:System.Data.DataSet> enthält nur ein <xref:System.Data.DataTable> , deren Name unterscheidet sich nur in Fällen, <xref:System.Data.DataTable> wird aktualisiert. In diesem Szenario ist der Vergleich Groß-/Kleinschreibung beachtet. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Sie können die <xref:System.Data.Common.DbDataAdapter.Fill%2A> -Methode mehrere Male auf dem gleichen <xref:System.Data.DataTable>. Wenn ein Primärschlüssel vorhanden ist, werden eingehende Zeilen mit übereinstimmenden Zeilen zusammengeführt, die bereits vorhanden sind. Wenn kein Primärschlüssel vorhanden ist, werden eingehende Zeilen an angehängt der <xref:System.Data.DataTable>.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A>-Wert für die resultierende <xref:System.Data.DataTable> festgelegt. Sie müssen explizit definieren, dass den Primärschlüssel, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Primärschlüssel definieren](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.Fill%2A> und <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Anbieter für .NET Framework-Daten abruft, die Schemainformationen für nur das erste Ergebnis.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <block subset="none" type="overrides">
          <para>Diese Überladung von der <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> Methode wird geschützt und ist für die Verwendung durch einen .NET Framework-Datenanbieter konzipiert.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <summary>Aktualisiert Zeilen im <see cref="T:System.Data.DataSet" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, die den Namen des <see cref="T:System.Data.DataSet" /> und den Namen der <see cref="T:System.Data.DataTable" /> verwenden.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> Methode ruft die Daten aus der Datenquelle mithilfe einer SELECT-Anweisung ab. Die <xref:System.Data.IDbConnection> mit der select-Befehl muss gültig sein, aber er muss nicht geöffnet werden. Wenn die <xref:System.Data.IDbConnection> wird geschlossen, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, es wird zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, es bleibt geöffnet.  
  
 Wenn ein Befehl keine Zeilen zurückgibt, werden keine Tabellen hinzugefügt, um die <xref:System.Data.DataSet>, und es werden keine Ausnahmen ausgelöst.  
  
 Wenn die <xref:System.Data.Common.DbDataAdapter> Objekt trifft doppelte Spalten beim Auffüllen einer <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "columnname1", "columnname2", "Spaltenname3" usw. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw.  
  
 Wenn die angegebene Abfrage mehrere Ergebnisse zurückgibt, wird jedes Resultset in einer separaten Tabelle platziert. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf den angegebenen Tabellennamen (z. B. "Table", "Table1", "Table2" usw.). Da keine Tabelle für eine Abfrage, die keine Zeilen zurückgibt erstellt wird würden Sie eine Abfrage zum Einfügen von gefolgt von einer select-Abfrage zu verarbeiten, würde für die select-Abfrage erstellte Tabelle "Tabelle" benannt werden, da er die erste Tabelle erstellt wird. Anwendungen, die mithilfe von Spalten- und Tabellennamen sollten sicherstellen, dass Konflikte mit dieser Benennungsschema erfolgt nicht.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> -Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> enthält mehrere <xref:System.Data.DataTable> Objekte, deren Namen unterscheiden sich nur durch '-Fällen. In solchen Situationen <xref:System.Data.Common.DbDataAdapter.Fill%2A> führt einen Vergleich Groß-/Kleinschreibung beachtet, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle aus, wenn keine genaue Übereinstimmung vorhanden ist. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird und die <xref:System.Data.DataSet> enthält nur ein <xref:System.Data.DataTable> , deren Name unterscheidet sich nur in Fällen, <xref:System.Data.DataTable> wird aktualisiert. In diesem Szenario ist der Vergleich Groß-/Kleinschreibung beachtet. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Wenn ein Fehler oder eine Ausnahme, beim Füllen der Datentabellen festgestellt wird, bleiben vor dem Auftreten des Fehlers hinzugefügte Zeilen in den Datentabellen. Im weiteren Verlauf des Vorgangs wird abgebrochen.  
  
 Wenn die SELECT-Anweisung zum Füllen der <xref:System.Data.DataSet> mehrere Ergebnisse zurückgibt, z. B. ein Batch SQL-Anweisung, Bedenken Sie Folgendes:  
  
-   Wenn eines der Ergebnisse einen Fehler enthält, werden alle nachfolgenden Ergebnisse übersprungen und nicht hinzugefügt werden, um die <xref:System.Data.DataSet>.  
  
 Bei nachfolgenden Verwendung <xref:System.Data.Common.DbDataAdapter.Fill%2A> Aufrufe zum Aktualisieren des Inhalts der <xref:System.Data.DataSet>, müssen zwei Bedingungen erfüllt sein:  
  
1.  Die SQL-Anweisung übereinstimmen, dem Schlüssel Anfangs zum Auffüllen der <xref:System.Data.DataSet>.  
  
2.  Die **Schlüssel** Spalteninformationen muss vorhanden sein. Wenn Primärschlüsselinformationen vorhanden ist, wird keine doppelten Zeilen abgestimmt sind und nur einmal in der <xref:System.Data.DataTable> , entspricht der <xref:System.Data.DataSet>. Primärschlüsselinformationen kann festgelegt werden, entweder durch <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, durch Angabe der <xref:System.Data.DataTable.PrimaryKey%2A> Eigenschaft von der <xref:System.Data.DataTable>, oder durch Festlegen der <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> Eigenschaft `AddWithKey`.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A>-Wert für die resultierende <xref:System.Data.DataTable> festgelegt. Sie müssen explizit definieren, dass den Primärschlüssel, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Primärschlüssel definieren](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework-Datenanbieter für OLE DB-Schemainformationen für nur das erste Ergebnis ab. Verwenden Sie zum Abrufen von Schemainformationen für mehrere Ergebnisse <xref:System.Data.Common.DbDataAdapter.Fill%2A> mit der <xref:System.Data.MissingSchemaAction> festgelegt `AddWithKey`.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.OleDb.OleDbDataAdapter>, zum Füllen einer <xref:System.Data.DataSet> mit Zeilen aus der Categories-Tabelle. In diesem Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Data.OleDb.OleDbDataAdapter> und ein <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">Die Quelltabelle ist ungültig.</exception>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> Methode.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Ein <see cref="T:System.Data.DataTable" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <param name="command">Die SQL-SELECT-Anweisung, mit der Zeilen aus der Datenquelle abgerufen werden.</param>
        <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Aktualisiert Zeilen in einer <see cref="T:System.Data.DataTable" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, wobei die angegebenen Werte für <see cref="T:System.Data.DataTable" />, <see cref="T:System.Data.IDbCommand" /> und <see cref="T:System.Data.CommandBehavior" /> verwendet werden.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataTable" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> Methode ruft Zeilen ab, aus der Datenquelle mithilfe der SELECT-Anweisung angegeben wird, ein zugeordnetes <xref:System.Data.IDbDataAdapter.SelectCommand%2A> Eigenschaft. Das Verbindungsobjekt, das die SELECT-Anweisung zugeordnet, muss gültig sein, aber er muss nicht geöffnet werden. Wenn die Verbindung geschlossen wird, bevor Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, wird es zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, es bleibt geöffnet.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> klicken Sie dann den Vorgang fügt die Zeilen in das angegebene Ziel <xref:System.Data.DataTable> Objekt in der <xref:System.Data.DataSet>, wodurch die <xref:System.Data.DataTable> Objekt, wenn sie nicht bereits vorhanden ist. Beim Erstellen einer <xref:System.Data.DataTable> -Objekt, das <xref:System.Data.Common.DbDataAdapter.Fill%2A> Vorgang normalerweise nur Metadaten für Spaltennamen erstellt. Jedoch, wenn die <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> -Eigenschaftensatz auf `AddWithKey`, entsprechenden Primärschlüssel und Einschränkungen werden ebenfalls erstellt.  
  
 Wenn die <xref:System.Data.Common.DbDataAdapter> Objekt trifft doppelte Spalten beim Auffüllen des eine <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "*Columnname*1", "*Columnname*2 ","*Columnname*3 ", und so weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw.  
  
 Die Überladung der <xref:System.Data.Common.DbDataAdapter.Fill%2A> , akzeptiert `DataTable` wie ein Parameter nur das erste Ergebnis abruft. Verwenden Sie eine Überladung des <xref:System.Data.Common.DbDataAdapter.Fill%2A> , akzeptiert `DataSet` als Parameter an mehreren Ergebnisse zu erhalten.  
  
 Sie können die <xref:System.Data.Common.DbDataAdapter.Fill%2A> -Methode mehrere Male auf dem gleichen <xref:System.Data.DataTable>. Wenn ein Primärschlüssel vorhanden ist, werden eingehende Zeilen mit übereinstimmenden Zeilen zusammengeführt, die bereits vorhanden sind. Wenn kein Primärschlüssel vorhanden ist, werden eingehende Zeilen an angehängt der <xref:System.Data.DataTable>.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A>-Wert für die resultierende <xref:System.Data.DataTable> festgelegt. Sie müssen explizit definieren, dass den Primärschlüssel, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Primärschlüssel definieren](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework-Datenanbieter für OLE DB-Schemainformationen für nur das erste Ergebnis ab. Verwenden Sie zum Abrufen von Schemainformationen für mehrere Ergebnisse <xref:System.Data.Common.DbDataAdapter.Fill%2A> mit der <xref:System.Data.MissingSchemaAction> festgelegt `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Diese Überladung von der <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> Methode wird geschützt und ist für die Verwendung durch einen .NET Framework-Datenanbieter konzipiert.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">Die nullbasierte Datensatznummer, bei der begonnen wird.</param>
        <param name="maxRecords">Die maximale Anzahl der abzurufenden Datensätze.</param>
        <param name="dataTables">Die <see cref="T:System.Data.DataTable" />-Objekte, die aus der Datenquelle gefüllt werden sollen.</param>
        <summary>Aktualisiert Zeilen in einer <see cref="T:System.Data.DataTable" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen. Dabei wird mit dem angegebenen Datensatz begonnen, und es werden bis zur angegebenen Anzahl an Datensätzen abgerufen.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataTable" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dieser Wert schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DataAdapter.Fill%2A> Methode ruft Zeilen ab, aus der Datenquelle mithilfe der SELECT-Anweisung angegeben wird, ein zugeordnetes <xref:System.Data.IDbDataAdapter.SelectCommand%2A> Eigenschaft. Das Verbindungsobjekt, das die SELECT-Anweisung zugeordnet, muss gültig sein, aber er muss nicht geöffnet werden. Wenn die Verbindung geschlossen wird, bevor Sie <xref:System.Data.Common.DataAdapter.Fill%2A> wird aufgerufen, es wird zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DataAdapter.Fill%2A> wird aufgerufen, es bleibt geöffnet.  
  
 Die <xref:System.Data.Common.DataAdapter.Fill%2A> klicken Sie dann den Vorgang fügt die Zeilen Ziel <xref:System.Data.DataTable> Objekte in der <xref:System.Data.DataSet>, beim Erstellen der <xref:System.Data.DataTable> Objekten zurück, wenn sie nicht bereits vorhanden sind. Beim Erstellen <xref:System.Data.DataTable> Objekte, die <xref:System.Data.Common.DataAdapter.Fill%2A> Vorgang normalerweise nur Metadaten für Spaltennamen erstellt. Jedoch, wenn die <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> -Eigenschaftensatz auf `AddWithKey`, entsprechenden Primärschlüssel und Einschränkungen werden ebenfalls erstellt.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A>-Wert für die resultierende <xref:System.Data.DataTable> festgelegt. Sie müssen explizit definieren, dass den Primärschlüssel, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Primärschlüssel definieren](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Findet der Datenadapter doppelte Spalten beim Auffüllen einer <xref:System.Data.DataTable>, generiert er für die nachfolgenden Spalten mit dem Muster "columnname1", "columnname2", "Spaltenname3" usw. Namen. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn mehrere Resultsets hinzugefügt werden, um die <xref:System.Data.DataSet>, wird jedes Resultset in einer separaten Tabelle platziert. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf den angegebenen Tabellennamen (z. B. "Table", "Table1", "Table2" usw.). Anwendungen, die mithilfe von Spalten- und Tabellennamen sollten sicherstellen, dass Konflikte mit dieser Benennungsschema erfolgt nicht.  
  
 Wenn die SELECT-Anweisung zum Füllen der <xref:System.Data.DataSet> mehrere Ergebnisse zurückgibt, z. B. einen Batch SQL-Anweisungen, wenn eines der Ergebnisse einen Fehler enthält alle nachfolgenden Ergebnisse werden übersprungen und nicht hinzugefügt der <xref:System.Data.DataSet>.  
  
 Sie können die <xref:System.Data.Common.DataAdapter.Fill%2A> -Methode mehrere Male auf dem gleichen <xref:System.Data.DataTable>. Wenn ein Primärschlüssel vorhanden ist, werden eingehende Zeilen mit übereinstimmenden Zeilen zusammengeführt, die bereits vorhanden sind. Wenn kein Primärschlüssel vorhanden ist, werden eingehende Zeilen an angehängt der <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework-Datenanbieter für OLE DB-Schemainformationen für nur das erste Ergebnis ab. Verwenden Sie zum Abrufen von Schemainformationen für mehrere Ergebnisse <xref:System.Data.Common.DbDataAdapter.Fill%2A> mit der <xref:System.Data.MissingSchemaAction> festgelegt `AddWithKey`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <param name="startRecord">Die nullbasierte Datensatznummer, bei der begonnen wird.</param>
        <param name="maxRecords">Die maximale Anzahl der abzurufenden Datensätze.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <summary>Aktualisiert Zeilen in einem angegebenen Bereich des <see cref="T:System.Data.DataSet" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, die den Namen des <see cref="T:System.Data.DataSet" /> und den Namen der <see cref="T:System.Data.DataTable" /> verwenden.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein `maxRecords` Wert 0 ruft alle Datensätze, die nach dem Anfangsdatensatz gefunden. Wenn `maxRecords` ist größer als die Anzahl der verbleibenden Zeilen, nur die verbleibenden Zeilen zurückgegeben werden, und es wird kein Fehler ausgegeben.  
  
 Wenn der entsprechende select-Befehl eine Anweisung mehrere Ergebnisse zurückgeben <xref:System.Data.Common.DbDataAdapter.Fill%2A> gilt nur `maxRecords` auf das erste Ergebnis.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> Methode ruft die Daten aus der Datenquelle mithilfe einer SELECT-Anweisung ab. Die <xref:System.Data.IDbConnection> Objekt, mit der SELECT-Anweisung zugewiesen ist, muss gültig sein, aber er muss nicht geöffnet werden. Wenn die <xref:System.Data.IDbConnection> wird geschlossen, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, wird es zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, es bleibt geöffnet.  
  
 Wenn ein Befehl keine Zeilen zurückgibt, werden keine Tabellen hinzugefügt, um die <xref:System.Data.DataSet>, jedoch wird keine Ausnahme ausgelöst.  
  
 Wenn die <xref:System.Data.Common.DbDataAdapter> Objekt trifft doppelte Spalten beim Auffüllen des eine <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "*Columnname*1", "*Columnname*2 ","*Columnname*3 ", und so weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw.  
  
 Wenn die angegebene Abfrage mehrere Ergebnisse zurückgibt, wird jedes Resultset in einer separaten Tabelle platziert. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf den angegebenen Tabellennamen (z. B. "Table", "Table1", "Table2" usw.). Da keine Tabelle für eine Abfrage, die keine Zeilen zurückgibt erstellt wird, wenn Sie eine Abfrage zum Einfügen von gefolgt von einer select-Abfrage verarbeiten, heißt für die select-Abfrage erstellte Tabelle "Tabelle", da er die erste Tabelle erstellt wird. Anwendungen, die mithilfe von Spalten- und Tabellennamen sollten sicherstellen, dass Konflikte mit dieser Benennungsschema erfolgt nicht.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> -Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> enthält mehrere <xref:System.Data.DataTable> Objekte, deren Namen unterscheiden sich nur durch '-Fällen. In solchen Situationen <xref:System.Data.Common.DbDataAdapter.Fill%2A> führt einen Vergleich Groß-/Kleinschreibung beachtet, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle aus, wenn keine genaue Übereinstimmung vorhanden ist. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird und die <xref:System.Data.DataSet> enthält nur ein <xref:System.Data.DataTable> , deren Name unterscheidet sich nur in Fällen, <xref:System.Data.DataTable> wird aktualisiert. In diesem Szenario ist der Vergleich Groß-/Kleinschreibung beachtet. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Wenn ein Fehler oder eine Ausnahme, beim Füllen der Datentabellen festgestellt wird, bleiben vor dem Auftreten des Fehlers hinzugefügte Zeilen in den Datentabellen. Im weiteren Verlauf des Vorgangs wird abgebrochen.  
  
 Wenn die SELECT-Anweisung zum Füllen der <xref:System.Data.DataSet> mehrere Ergebnisse zurückgibt, z. B. SQL-Batchanweisungen, Bedenken Sie Folgendes:  
  
-   Beim Verarbeiten innerhalb eines Batches von SQL-Anweisung mehrere Ergebnisse `maxRecords` gilt nur für das erste Ergebnis. Dasselbe gilt für Zeilen, die in Kapitel unterteilte Ergebnisse (.NET Framework-Datenanbieter für OLE DB-nur) enthält. Das Ergebnis der obersten Ebene wird durch beschränkt `maxRecords`, jedoch werden alle untergeordneten Zeilen hinzugefügt.  
  
-   Wenn eines der Ergebnisse einen Fehler enthält, werden alle nachfolgenden Ergebnisse übersprungen und nicht hinzugefügt werden, um die <xref:System.Data.DataSet>.  
  
 Bei nachfolgenden Verwendung <xref:System.Data.Common.DbDataAdapter.Fill%2A> Aufrufe zum Aktualisieren des Inhalts der <xref:System.Data.DataSet>, müssen zwei Bedingungen erfüllt sein:  
  
1.  Die SQL-Anweisung übereinstimmen, dem Schlüssel Anfangs zum Auffüllen der <xref:System.Data.DataSet>.  
  
2.  Die **Schlüssel** Spalteninformationen muss vorhanden sein.  
  
 Wenn Primärschlüsselinformationen vorhanden ist, alle doppelten Zeilen abgeglichen und nur einmal in der <xref:System.Data.DataTable> , entspricht der <xref:System.Data.DataSet>. Primärschlüsselinformationen kann festgelegt werden, entweder durch <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, durch Angabe der <xref:System.Data.DataTable.PrimaryKey%2A> Eigenschaft von der <xref:System.Data.DataTable>, oder durch Festlegen der <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> Eigenschaft `AddWithKey`.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A>-Wert für die resultierende <xref:System.Data.DataTable> festgelegt. Sie müssen explizit definieren, dass den Primärschlüssel, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Primärschlüssel definieren](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework-Datenanbieter für OLE DB-Schemainformationen für nur das erste Ergebnis ab. Verwenden Sie zum Abrufen von Schemainformationen für mehrere Ergebnisse <xref:System.Data.Common.DbDataAdapter.Fill%2A> mit der <xref:System.Data.MissingSchemaAction> festgelegt `AddWithKey`.  
  
> [!NOTE]
>  Die `DataSet` enthält nicht mehr als die angegebene Anzahl von Datensätzen durch `maxRecords`. Das gesamte, von der Abfrage generierte Resultset ist jedoch immer noch vom Server zurückgegeben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.OleDb.OleDbDataAdapter>, zum Füllen einer <xref:System.Data.DataSet> mit 15 Zeilen, beginnend bei Zeile 10, aus der **Kategorien** Tabelle. In diesem Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Data.OleDb.OleDbDataAdapter> und ein <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">
          <see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.  
  
 - oder -   
  
 Die Verbindung ist ungültig.</exception>
        <exception cref="T:System.InvalidCastException">Die Verbindung konnte nicht gefunden werden.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="startRecord" />-Parameter ist kleiner als 0.  
  
 - oder -   
  
 Der <paramref name="maxRecords" />-Parameter ist kleiner als 0.</exception>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> Methode.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTables">Die <see cref="T:System.Data.DataTable" />-Objekte, die aus der Datenquelle gefüllt werden sollen.</param>
        <param name="startRecord">Die nullbasierte Datensatznummer, bei der begonnen wird.</param>
        <param name="maxRecords">Die maximale Anzahl der abzurufenden Datensätze.</param>
        <param name="command">Der <see cref="T:System.Data.IDbCommand" />, der ausgeführt wird, um die <see cref="T:System.Data.DataTable" />-Objekte zu füllen.</param>
        <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Aktualisiert Zeilen in einem angegebenen Bereich des <see cref="T:System.Data.DataSet" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, die den Namen des <see cref="T:System.Data.DataSet" /> und den Namen der <see cref="T:System.Data.DataTable" /> verwenden.</summary>
        <returns>Die Anzahl der Zeilen, die in den Datentabellen hinzugefügt bzw. darin aktualisiert wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein `maxRecords` Wert 0 ruft alle Datensätze, die nach dem Anfangsdatensatz gefunden. Wenn `maxRecords` ist größer als die Anzahl der verbleibenden Zeilen, nur die verbleibenden Zeilen zurückgegeben werden und wird kein Fehler ausgegeben.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> Methode ruft die Daten aus der Datenquelle mithilfe einer SELECT-Anweisung ab. Die <xref:System.Data.IDbConnection> Objekt, mit der SELECT-Anweisung zugewiesen ist, muss gültig sein, aber er muss nicht geöffnet werden. Wenn die <xref:System.Data.IDbConnection> wird geschlossen, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, es wird zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, es bleibt geöffnet.  
  
 Wenn ein Befehl keine Zeilen zurückgibt, werden keine Tabellen hinzugefügt, um die <xref:System.Data.DataSet>, jedoch wird keine Ausnahme ausgelöst.  
  
 Wenn die <xref:System.Data.Common.DbDataAdapter> Objekt trifft doppelte Spalten beim Auffüllen des eine <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "*Columnname*1", "*Columnname*2 ","*Columnname*3 ", und so weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw.  
  
 Wenn die angegebene Abfrage mehrere Ergebnisse zurückgibt, wird jedes Resultset in einer separaten Tabelle platziert. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf den angegebenen Tabellennamen (z. B. "Table", "Table1", "Table2" usw.). Da keine Tabelle für eine Abfrage, die keine Zeilen zurückgibt erstellt wird würden Sie eine Abfrage zum Einfügen von gefolgt von einer select-Abfrage zu verarbeiten, würde für die select-Abfrage erstellte Tabelle "Tabelle" benannt werden, da er die erste Tabelle erstellt wird. Anwendungen, die mithilfe von Spalten- und Tabellennamen sollten sicherstellen, dass Konflikte mit dieser Benennungsschema erfolgt nicht.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> -Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> enthält mehrere <xref:System.Data.DataTable> Objekte, deren Namen unterscheiden sich nur durch '-Fällen. In solchen Situationen <xref:System.Data.Common.DbDataAdapter.Fill%2A> führt einen Vergleich Groß-/Kleinschreibung beachtet, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle aus, wenn keine genaue Übereinstimmung vorhanden ist. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird und die <xref:System.Data.DataSet> enthält nur ein <xref:System.Data.DataTable> , deren Name unterscheidet sich nur in Fällen, <xref:System.Data.DataTable> wird aktualisiert. In diesem Szenario ist der Vergleich Groß-/Kleinschreibung beachtet. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Wenn ein Fehler oder eine Ausnahme, beim Füllen der Datentabellen festgestellt wird, bleiben vor dem Auftreten des Fehlers hinzugefügte Zeilen in den Datentabellen. Im weiteren Verlauf des Vorgangs wird abgebrochen.  
  
 Wenn die SELECT-Anweisung zum Füllen der <xref:System.Data.DataTable> Objekte mehrere Ergebnisse zurückgibt, z. B. ein Batch SQL-Anweisung, Bedenken Sie Folgendes:  
  
-   Beim Verarbeiten innerhalb eines Batches von SQL-Anweisung mehrere Ergebnisse `maxRecords` gilt nur für das erste Ergebnis. Dasselbe gilt für Zeilen, die in Kapitel unterteilte Ergebnisse (.NET Framework-Datenanbieter für OLE DB-nur) enthält. Das Ergebnis der obersten Ebene wird durch beschränkt `maxRecords`, jedoch werden alle untergeordneten Zeilen hinzugefügt.  
  
-   Wenn einem der Ergebnisse einen Fehler enthält, werden alle nachfolgenden Ergebnisse übersprungen.  
  
> [!NOTE]
>  Die `DataSet` enthält nicht mehr als die angegebene Anzahl von Datensätzen durch `maxRecords`. Das gesamte, von der Abfrage generierte Resultset ist jedoch immer noch vom Server zurückgegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">
          <see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.  
  
 - oder -   
  
 Die Verbindung ist ungültig.</exception>
        <exception cref="T:System.InvalidCastException">Die Verbindung konnte nicht gefunden werden.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="startRecord" />-Parameter ist kleiner als 0.  
  
 - oder -   
  
 Der <paramref name="maxRecords" />-Parameter ist kleiner als 0.</exception>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> Methode.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <param name="startRecord">Die nullbasierte Datensatznummer, bei der begonnen wird.</param>
        <param name="maxRecords">Die maximale Anzahl der abzurufenden Datensätze.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <param name="command">Die SQL-SELECT-Anweisung, mit der Zeilen aus der Datenquelle abgerufen werden.</param>
        <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Aktualisiert Zeilen in einem angegebenen Bereich im <see cref="T:System.Data.DataSet" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, die den Namen des <see cref="T:System.Data.DataSet" />, den Namen der Quelltabelle, die Befehlszeichenfolge und das Befehlsverhalten verwenden.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> Methode ruft Zeilen ab, aus der Datenquelle mithilfe der SELECT-Anweisung angegeben wird, ein zugeordnetes <xref:System.Data.IDbDataAdapter.SelectCommand%2A> Eigenschaft. Das Verbindungsobjekt, das die SELECT-Anweisung zugeordnet, muss gültig sein, aber er muss nicht geöffnet werden. Wenn die Verbindung geschlossen wird, bevor Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, es wird zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.Fill%2A> wird aufgerufen, es bleibt geöffnet.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> klicken Sie dann den Vorgang fügt die Zeilen Ziel <xref:System.Data.DataTable> Objekte in der <xref:System.Data.DataSet>, beim Erstellen der <xref:System.Data.DataTable> Objekten zurück, wenn sie nicht bereits vorhanden sind. Beim Erstellen <xref:System.Data.DataTable> Objekte, die <xref:System.Data.Common.DbDataAdapter.Fill%2A> Vorgang normalerweise nur Metadaten für Spaltennamen erstellt. Jedoch, wenn die <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> -Eigenschaftensatz auf `AddWithKey`, entsprechenden Primärschlüssel und Einschränkungen werden ebenfalls erstellt.  
  
 Wenn die <xref:System.Data.Common.DbDataAdapter> mehrfach vorhandene Spalten findet beim Auffüllen des eine <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "*Columnname*1", "*Columnname*2", "*Columnname*3" und So weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn mehrere Resultsets hinzugefügt werden, um die <xref:System.Data.DataSet> jedes Resultset in einer separaten Tabelle platziert wird. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf den angegebenen Tabellennamen (z. B. "Table", "Table1", "Table2" usw.). Anwendungen, die mithilfe von Spalten- und Tabellennamen sollten sicherstellen, dass Konflikte mit dieser Benennungsschema erfolgt nicht.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A> -Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> enthält mehrere <xref:System.Data.DataTable> Objekte, deren Namen unterscheiden sich nur durch '-Fällen. In solchen Situationen <xref:System.Data.Common.DbDataAdapter.Fill%2A> führt einen Vergleich Groß-/Kleinschreibung beachtet, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle aus, wenn keine genaue Übereinstimmung vorhanden ist. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird und die <xref:System.Data.DataSet> enthält nur ein <xref:System.Data.DataTable> , deren Name unterscheidet sich nur in Fällen, <xref:System.Data.DataTable> wird aktualisiert. In diesem Szenario ist der Vergleich Groß-/Kleinschreibung beachtet. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Sie können die <xref:System.Data.Common.DbDataAdapter.Fill%2A> -Methode mehrere Male auf dem gleichen <xref:System.Data.DataTable>. Wenn ein Primärschlüssel vorhanden ist, werden eingehende Zeilen mit übereinstimmenden Zeilen zusammengeführt, die bereits vorhanden sind. Wenn kein Primärschlüssel vorhanden ist, werden eingehende Zeilen an angehängt der <xref:System.Data.DataTable>.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A>-Wert für die resultierende <xref:System.Data.DataTable> festgelegt. Sie müssen explizit definieren, dass den Primärschlüssel, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Primärschlüssel definieren](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.Fill%2A> und <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Anbieter für .NET Framework-Daten abruft, die Schemainformationen für nur das erste Ergebnis.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="startRecord" />-Parameter ist kleiner als 0.  
  
 - oder -   
  
 Der <paramref name="maxRecords" />-Parameter ist kleiner als 0.</exception>
        <block subset="none" type="overrides">
          <para>Diese Überladung von der <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> Methode wird geschützt und ist für die Verwendung durch einen .NET Framework-Datenanbieter konzipiert.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Verhalten des Befehls für das Füllen des Datenadapters ab oder dieses legt.</summary>
        <value>Das <see cref="T:System.Data.CommandBehavior" /> des Befehls für das Füllen des Datenadapters.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt einem <see cref="T:System.Data.DataTable" /> eine <see cref="T:System.Data.DataSet" /> hinzu und konfiguriert das Schema so, dass es dem Schema in der Datenquelle entspricht.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, in das das Schema eingefügt werden soll.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte, die angeben, wie das Schema eingefügt wird.</param>
        <summary>Fügt dem angegebenen <see cref="T:System.Data.DataTable" /> eine <see cref="T:System.Data.DataSet" /> mit dem Namen "Table" hinzu und konfiguriert das Schema anhand des angegebenen <see cref="T:System.Data.SchemaType" /> so, dass es dem Schema in der Datenquelle entspricht.</summary>
        <returns>Ein Verweis auf eine Auflistung von <see cref="T:System.Data.DataTable" />-Objekten, die dem <see cref="T:System.Data.DataSet" /> hinzugefügt wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft die Schemainformationen ab, aus der Datenquelle mit dem <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Ein <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vorgang fügt eine <xref:System.Data.DataTable> an das Ziel <xref:System.Data.DataSet>. Es fügt dann die Spalten aus, die die <xref:System.Data.DataColumnCollection> von der <xref:System.Data.DataTable>, und konfiguriert die folgenden <xref:System.Data.DataColumn> Eigenschaften, wenn sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A> Sie müssen festlegen, <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> getrennt.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Außerdem konfiguriert der <xref:System.Data.DataTable.PrimaryKey%2A> und <xref:System.Data.DataTable.Constraints%2A> Eigenschaften gemäß den folgenden Regeln:  
  
-   Wenn eine oder mehrere Primärschlüsselspalten, indem zurückgegeben werden die <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, sie werden verwendet, als die Primärschlüsselspalten für die <xref:System.Data.DataTable>.  
  
-   Wenn keine Primärschlüsselspalten werden zurückgegeben, aber eindeutige Spalten sind, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn und nur, wenn die eindeutigen Spalten NULL nicht zulässig ist. Wenn eine der Spalten NULL-Werte zulässt, ist eine <xref:System.Data.UniqueConstraint> hinzugefügt wird die <xref:System.Data.ConstraintCollection>, aber die <xref:System.Data.DataTable.PrimaryKey%2A> Eigenschaft nicht festgelegt ist.  
  
-   Wenn Primärschlüsselspalten und eindeutige Spalten zurückgegeben werden, dienen als Primärschlüsselspalten für die Primärschlüsselspalten der <xref:System.Data.DataTable>.  
  
 Beachten Sie, dass es sich bei Primärschlüsseln und unique-Einschränkungen, um hinzugefügt werden die <xref:System.Data.ConstraintCollection> gemäß der vorangehenden Regeln, aber andere Einschränkung Typen nicht hinzugefügt werden.  
  
 Wenn Sie einen eindeutigen gruppierten Index für eine Spalte oder Spalten in einer SQL Server-Tabelle definiert ist, und wird auf einem separaten Satz von Spalten, primary Key-Einschränkung definiert, und klicken Sie dann den Namen der Spalten im gruppierten Index zurückgegeben werden. Um den Namen oder die Namen der Primärschlüsselspalten zurückzugeben, verwenden Sie einen Abfragehinweis mit der SELECT-Anweisung, die den Namen des Primärschlüsselindexes angibt. Weitere Informationen zum Angeben von Abfragehinweisen finden Sie unter [-Abfragehinweis (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Informationen zum Primärschlüssel wird verwendet, während <xref:System.Data.Common.DbDataAdapter.Fill%2A> zu suchen und ersetzen alle Zeilen, deren Schlüsselspalten übereinstimmen. Wenn dies nicht das gewünschte Verhalten ist, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A> ohne Schemainformationen anzufordern.  
  
 Wenn die <xref:System.Data.IDataAdapter> mehrfach vorhandene Spalten findet beim Auffüllen des eine <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "*Columnname*1", "*Columnname*2", "*Columnname*3" und So weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn mehrere Resultsets hinzugefügt werden, um die <xref:System.Data.DataSet> jedes Resultset in einer separaten Tabelle platziert wird. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf den angegebenen Tabellennamen (z. B. "Table", "Table1", "Table2" und So weiter.). Anwendungen, die mithilfe von Spalten- und Tabellennamen sollten sicherstellen, dass Konflikte mit dieser Benennungsschema erfolgt nicht.  
  
 Die <xref:System.Data.IDbConnection> mit der select-Befehl muss gültig sein, aber er muss nicht öffnen. Wenn die <xref:System.Data.IDbConnection> wird geschlossen, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wird aufgerufen, es wird zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wird aufgerufen, es bleibt geöffnet.  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework-Datenanbieter für OLE DB-Schemainformationen für nur das erste Ergebnis ab. Verwenden Sie zum Abrufen von Schemainformationen für mehrere Ergebnisse <xref:System.Data.Common.DbDataAdapter.Fill%2A> mit der <xref:System.Data.MissingSchemaAction> festgelegt `AddWithKey`.  
  
 Bei der Verwendung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> fügt der .NET Framework-Datenanbieter für SQL Server eine FOR BROWSE-Klausel an die ausgeführte Anweisung an. Der Benutzer muss mögliche Nebeneffekte beachten, z. B. Beeinträchtigungen bei der Verwendung von SET FMTONLY ON-Anweisungen. Weitere Informationen finden Sie in der SQL Server-Onlinedokumentation.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.SqlClient.SqlDataAdapter>, zum Füllen einer <xref:System.Data.DataSet> mit dem Schema, und gibt eine <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">Die mit dem Schema aus der Datenquelle zu füllende <see cref="T:System.Data.DataTable" />.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte.</param>
        <summary>Konfiguriert das Schema der angegebenen <see cref="T:System.Data.DataTable" /> auf der Grundlage des angegebenen <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>Eine <see cref="T:System.Data.DataTable" />, die aus der Datenquelle zurückgegebene Schemainformationen enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Methode ruft das Schema ab, aus der Datenquelle mit dem <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. Das Verbindungsobjekt zugeordnete der <xref:System.Data.IDbDataAdapter.SelectCommand%2A> müssen gültig sein, aber es muss nicht geöffnet werden. Wenn die Verbindung geschlossen wird, bevor Sie <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wird aufgerufen, es wird zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wird aufgerufen, es bleibt geöffnet.  
  
 Ein <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vorgang gibt eine <xref:System.Data.DataTable>. Es fügt dann die Spalten aus, die die <xref:System.Data.DataColumnCollection> von der <xref:System.Data.DataTable>, und konfiguriert die folgenden <xref:System.Data.DataColumn> Eigenschaften, wenn sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A> Sie müssen festlegen, <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> getrennt.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Außerdem konfiguriert der <xref:System.Data.DataTable.PrimaryKey%2A> und <xref:System.Data.DataTable.Constraints%2A> Eigenschaften gemäß den folgenden Regeln:  
  
-   Wenn eine <xref:System.Data.DataTable.PrimaryKey%2A> wurde bereits definiert wurde, für die `DataTable`, oder die `DataTable` enthält Daten, die `PrimaryKey` -Eigenschaft nicht festgelegt werden.  
  
-   Wenn eine oder mehrere Primärschlüsselspalten, indem zurückgegeben werden die <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, sie werden verwendet, als die Primärschlüsselspalten für die `DataTable`.  
  
-   Wenn keine Primärschlüsselspalten werden zurückgegeben, aber eindeutige Spalten sind, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn und nur, wenn die eindeutigen Spalten NULL nicht zulässig ist. Wenn eine der Spalten NULL-Werte zulässt, ist eine <xref:System.Data.UniqueConstraint> hinzugefügt wird die <xref:System.Data.ConstraintCollection>, aber die `PrimaryKey` Eigenschaft nicht festgelegt ist.  
  
-   Wenn Primärschlüsselspalten und eindeutige Spalten zurückgegeben werden, dienen als Primärschlüsselspalten für die Primärschlüsselspalten der `DataTable`.  
  
 Beachten Sie, dass es sich bei Primärschlüsseln und unique-Einschränkungen, um hinzugefügt werden die <xref:System.Data.ConstraintCollection> gemäß der vorangehenden Regeln, aber andere Einschränkung Typen nicht hinzugefügt werden. Dieser Vorgang kann mehrere Roundtrips zum Server erfordern.  
  
 Wenn Sie einen eindeutigen gruppierten Index für eine Spalte oder Spalten in einer SQL Server-Tabelle definiert ist, und wird auf einem separaten Satz von Spalten, primary Key-Einschränkung definiert, und klicken Sie dann den Namen der Spalten im gruppierten Index zurückgegeben werden. Um den Namen oder die Namen der Primärschlüsselspalten zurückzugeben, verwenden Sie einen Abfragehinweis mit der SELECT-Anweisung, die den Namen des Primärschlüsselindexes angibt. Weitere Informationen zum Angeben von Abfragehinweisen finden Sie unter [-Abfragehinweis (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Wenn die <xref:System.Data.Common.DbDataAdapter> mehrfach vorhandene Spalten findet beim Auffüllen des eine <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "*Columnname*1", "*Columnname*2", "*Columnname*3" und So weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn mehrere Resultsets hinzugefügt werden, um die <xref:System.Data.DataSet> jedes Resultset in einer separaten Tabelle platziert wird. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf den angegebenen Tabellennamen (z. B. "Table", "Table1", "Table2" und So weiter.). Anwendungen, die mithilfe von Spalten- und Tabellennamen sollten sicherstellen, dass Konflikte mit dieser Benennungsschema erfolgt nicht.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> keine zurückgibt Zeilen. Verwenden der <xref:System.Data.Common.DbDataAdapter.Fill%2A> Methode zum Hinzufügen von Zeilen zu einer <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework-Datenanbieter für OLE DB-Schemainformationen für nur das erste Ergebnis ab. Verwenden Sie zum Abrufen von Schemainformationen für mehrere Ergebnisse <xref:System.Data.Common.DbDataAdapter.Fill%2A> mit der <xref:System.Data.MissingSchemaAction> festgelegt `AddWithKey`.  
  
 Bei der Verwendung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> fügt der .NET Framework-Datenanbieter für SQL Server eine FOR BROWSE-Klausel an die ausgeführte Anweisung an. Der Benutzer muss mögliche Nebeneffekte beachten, z. B. Beeinträchtigungen bei der Verwendung von SET FMTONLY ON-Anweisungen. Weitere Informationen finden Sie in der SQL Server-Onlinedokumentation.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.SqlClient.SqlDataAdapter>, zum Füllen einer <xref:System.Data.DataSet> mit dem Schema, und gibt eine <xref:System.Data.DataTable>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, in das das Schema eingefügt werden soll.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte, die angeben, wie das Schema eingefügt wird.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <summary>Fügt dem angegebenen <see cref="T:System.Data.DataTable" /> eine <see cref="T:System.Data.DataSet" /> hinzu und konfiguriert das Schema auf der Grundlage des angegeben <see cref="T:System.Data.SchemaType" /> und der angegebenen <see cref="T:System.Data.DataTable" /> so, dass es mit dem Schema in der Datenquelle übereinstimmt.</summary>
        <returns>Ein Verweis auf eine Auflistung von <see cref="T:System.Data.DataTable" />-Objekten, die dem <see cref="T:System.Data.DataSet" /> hinzugefügt wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft die Schemainformationen ab, aus der Datenquelle mit dem <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Ein <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vorgang fügt eine <xref:System.Data.DataTable> an das Ziel <xref:System.Data.DataSet>. Es fügt dann die Spalten aus, die die <xref:System.Data.DataColumnCollection> von der <xref:System.Data.DataTable>, und konfiguriert die folgenden <xref:System.Data.DataColumn> Eigenschaften, wenn sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A> Sie müssen festlegen, <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> getrennt.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Außerdem konfiguriert der <xref:System.Data.DataTable.PrimaryKey%2A> und <xref:System.Data.DataTable.Constraints%2A> Eigenschaften gemäß den folgenden Regeln:  
  
-   Wenn eine oder mehrere Primärschlüsselspalten, indem zurückgegeben werden die <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, sie werden verwendet, als die Primärschlüsselspalten für die <xref:System.Data.DataTable>.  
  
-   Wenn keine Primärschlüsselspalten werden zurückgegeben, aber eindeutige Spalten sind, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn und nur, wenn die eindeutigen Spalten NULL nicht zulässig ist. Wenn eine der Spalten NULL-Werte zulässt, ist eine <xref:System.Data.UniqueConstraint> hinzugefügt wird die <xref:System.Data.ConstraintCollection>, aber die <xref:System.Data.DataTable.PrimaryKey%2A> Eigenschaft nicht festgelegt ist.  
  
-   Wenn Primärschlüsselspalten und eindeutige Spalten zurückgegeben werden, dienen als Primärschlüsselspalten für die Primärschlüsselspalten der <xref:System.Data.DataTable>.  
  
 Beachten Sie, dass es sich bei Primärschlüsseln und unique-Einschränkungen, um hinzugefügt werden die <xref:System.Data.ConstraintCollection> gemäß der vorangehenden Regeln, aber andere Einschränkung Typen nicht hinzugefügt werden.  
  
 Wenn Sie einen eindeutigen gruppierten Index für eine Spalte oder Spalten in einer SQL Server-Tabelle definiert ist, und wird auf einem separaten Satz von Spalten, primary Key-Einschränkung definiert, und klicken Sie dann den Namen der Spalten im gruppierten Index zurückgegeben werden. Um den Namen oder die Namen der Primärschlüsselspalten zurückzugeben, verwenden Sie einen Abfragehinweis mit der SELECT-Anweisung, die den Namen des Primärschlüsselindexes angibt. Weitere Informationen zum Angeben von Abfragehinweisen finden Sie unter [-Abfragehinweis (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Informationen zum Primärschlüssel wird verwendet, während <xref:System.Data.Common.DbDataAdapter.Fill%2A> zu suchen und ersetzen alle Zeilen, deren Schlüsselspalten übereinstimmen. Wenn dies nicht das gewünschte Verhalten ist, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A> ohne Schemainformationen anzufordern.  
  
 Wenn die <xref:System.Data.Common.DbDataAdapter> mehrfach vorhandene Spalten findet beim Auffüllen des eine <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "*Columnname*1", "*Columnname*2", "*Columnname*3" und So weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn mehrere Resultsets hinzugefügt werden, um die <xref:System.Data.DataSet> jedes Resultset in einer separaten Tabelle platziert wird. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf den angegebenen Tabellennamen (z. B. "Table", "Table1", "Table2" und So weiter.). Anwendungen, die mithilfe von Spalten- und Tabellennamen sollten sicherstellen, dass Konflikte mit dieser Benennungsschema erfolgt nicht.  
  
 Die <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> -Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> enthält mehrere <xref:System.Data.DataTable> Objekte, deren Namen unterscheiden sich nur durch '-Fällen. In solchen Situationen <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> führt einen Vergleich Groß-/Kleinschreibung beachtet, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle aus, wenn keine genaue Übereinstimmung vorhanden ist. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird und die <xref:System.Data.DataSet> enthält nur ein <xref:System.Data.DataTable> , deren Name unterscheidet sich nur in Fällen, <xref:System.Data.DataTable> wird aktualisiert. In diesem Szenario ist der Vergleich Groß-/Kleinschreibung beachtet. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Die <xref:System.Data.IDbConnection> mit der select-Befehl muss gültig sein, aber er muss nicht öffnen. Wenn die <xref:System.Data.IDbConnection> wird geschlossen, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wird aufgerufen, es wird zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wird aufgerufen, es bleibt geöffnet.  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework-Datenanbieter für OLE DB-Schemainformationen für nur das erste Ergebnis ab. Verwenden Sie zum Abrufen von Schemainformationen für mehrere Ergebnisse <xref:System.Data.Common.DbDataAdapter.Fill%2A> mit der <xref:System.Data.MissingSchemaAction> festgelegt `AddWithKey`.  
  
 Bei der Verwendung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> fügt der .NET Framework-Datenanbieter für SQL Server eine FOR BROWSE-Klausel an die ausgeführte Anweisung an. Der Benutzer muss mögliche Nebeneffekte beachten, z. B. Beeinträchtigungen bei der Verwendung von SET FMTONLY ON-Anweisungen. Weitere Informationen finden Sie in der SQL Server-Onlinedokumentation.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.SqlClient.SqlDataAdapter>, zum Füllen einer <xref:System.Data.DataSet> mit dem Schema, und gibt eine <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Eine Quelltabelle, aus der das Schema abgerufen werden soll, konnte nicht gefunden werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Die mit dem Schema aus der Datenquelle zu füllende <see cref="T:System.Data.DataTable" />.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte.</param>
        <param name="command">Die SQL-SELECT-Anweisung, mit der Zeilen aus der Datenquelle abgerufen werden.</param>
        <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Konfiguriert das Schema der angegebenen <see cref="T:System.Data.DataTable" /> auf der Grundlage des angegebenen <see cref="T:System.Data.SchemaType" />, der angegebenen Befehlszeichenfolge und der angegebenen <see cref="T:System.Data.CommandBehavior" />-Werte.</summary>
        <returns>Ein <see cref="T:System.Data.DataTable" />-Objekt, das aus der Datenquelle zurückgegebene Schemainformationen enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Methode ruft das Schema ab, aus der Datenquelle mit dem <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. Das Verbindungsobjekt zugeordnete der <xref:System.Data.IDbDataAdapter.SelectCommand%2A> müssen gültig sein, aber es muss nicht geöffnet werden. Wenn die Verbindung geschlossen wird, bevor Sie <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wird aufgerufen, es wird zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wird aufgerufen, es bleibt geöffnet.  
  
 Ein <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vorgang fügt eine <xref:System.Data.DataTable> an das Ziel <xref:System.Data.DataSet>. Es fügt dann die Spalten aus, die die <xref:System.Data.DataColumnCollection> von der <xref:System.Data.DataTable>, und konfiguriert die folgenden <xref:System.Data.DataColumn> Eigenschaften, wenn sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A> Sie müssen festlegen, <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> getrennt.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Außerdem konfiguriert der <xref:System.Data.DataTable.PrimaryKey%2A> und <xref:System.Data.DataTable.Constraints%2A> Eigenschaften gemäß den folgenden Regeln:  
  
-   Wenn eine oder mehrere Primärschlüsselspalten, indem zurückgegeben werden die <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, sie werden verwendet, als die Primärschlüsselspalten für die <xref:System.Data.DataTable>.  
  
-   Wenn keine Primärschlüsselspalten werden zurückgegeben, aber eindeutige Spalten sind, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn und nur, wenn die eindeutigen Spalten NULL nicht zulässig ist. Wenn eine der Spalten NULL-Werte zulässt, ist eine <xref:System.Data.UniqueConstraint> hinzugefügt wird die <xref:System.Data.ConstraintCollection>, aber die <xref:System.Data.DataTable.PrimaryKey%2A> Eigenschaft nicht festgelegt ist.  
  
-   Wenn Primärschlüsselspalten und eindeutige Spalten zurückgegeben werden, dienen als Primärschlüsselspalten für die Primärschlüsselspalten der <xref:System.Data.DataTable>.  
  
 Beachten Sie, dass es sich bei Primärschlüsseln und unique-Einschränkungen, um hinzugefügt werden die <xref:System.Data.ConstraintCollection> gemäß der vorangehenden Regeln, aber andere Einschränkung Typen nicht hinzugefügt werden.  
  
 Wenn Sie einen eindeutigen gruppierten Index für eine Spalte oder Spalten in einer SQL Server-Tabelle definiert ist, und wird auf einem separaten Satz von Spalten, primary Key-Einschränkung definiert, und klicken Sie dann den Namen der Spalten im gruppierten Index zurückgegeben werden. Um den Namen oder die Namen der Primärschlüsselspalten zurückzugeben, verwenden Sie einen Abfragehinweis mit der SELECT-Anweisung, die den Namen des Primärschlüsselindexes angibt. Weitere Informationen zum Angeben von Abfragehinweisen finden Sie unter [-Abfragehinweis (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Wenn die <xref:System.Data.IDataAdapter> mehrfach vorhandene Spalten findet beim Auffüllen des eine <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "*Columnname*1", "*Columnname*2", "*Columnname*3" und So weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn mehrere Resultsets hinzugefügt werden, um die <xref:System.Data.DataSet> jedes Resultset in einer separaten Tabelle platziert wird. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf den angegebenen Tabellennamen (z. B. "Table", "Table1", "Table2" und So weiter.). Anwendungen, die mithilfe von Spalten- und Tabellennamen sollten sicherstellen, dass Konflikte mit dieser Benennungsschema erfolgt nicht.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> keine zurückgibt Zeilen. Verwenden der <xref:System.Data.Common.DbDataAdapter.Fill%2A> Methode zum Hinzufügen von Zeilen zu einer <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework-Datenanbieter für OLE DB-Schemainformationen für nur das erste Ergebnis ab. Verwenden Sie zum Abrufen von Schemainformationen für mehrere Ergebnisse <xref:System.Data.Common.DbDataAdapter.Fill%2A> mit der <xref:System.Data.MissingSchemaAction> festgelegt `AddWithKey`.  
  
 Bei der Verwendung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> fügt der .NET Framework-Datenanbieter für SQL Server eine FOR BROWSE-Klausel an die ausgeführte Anweisung an. Der Benutzer muss mögliche Nebeneffekte beachten, z. B. Beeinträchtigungen bei der Verwendung von SET FMTONLY ON-Anweisungen. Weitere Informationen finden Sie in der SQL Server-Onlinedokumentation.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Diese Implementierung der <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> Methode wird geschützt und ist für die Verwendung durch einen .NET Framework-Datenanbieter konzipiert.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Die mit dem Schema aus der Datenquelle zu füllende <see cref="T:System.Data.DataSet" />.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte.</param>
        <param name="command">Die SQL-SELECT-Anweisung, mit der Zeilen aus der Datenquelle abgerufen werden.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Fügt dem angegebenen <see cref="T:System.Data.DataTable" /> eine <see cref="T:System.Data.DataSet" /> mit dem Namen "Table" hinzu und konfiguriert das Schema anhand des angegebenen <see cref="T:System.Data.SchemaType" /> so, dass es dem Schema in der Datenquelle entspricht.</summary>
        <returns>Ein Array von <see cref="T:System.Data.DataTable" />-Objekten, die aus der Datenquelle zurückgegebene Schemainformationen enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Methode ruft das Schema ab, aus der Datenquelle mit dem <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. Das Verbindungsobjekt zugeordnete der <xref:System.Data.IDbDataAdapter.SelectCommand%2A> müssen gültig sein, aber es muss nicht geöffnet werden. Wenn die Verbindung geschlossen wird, bevor Sie <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wird aufgerufen, es wird zum Abrufen der Daten geöffnet und anschließend geschlossen. Wenn die Verbindung vor dem Öffnen wird <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wird aufgerufen, es bleibt geöffnet.  
  
 Ein <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vorgang fügt eine <xref:System.Data.DataTable> an das Ziel <xref:System.Data.DataSet>. Es fügt dann die Spalten aus, die die <xref:System.Data.DataColumnCollection> von der <xref:System.Data.DataTable>, und konfiguriert die folgenden <xref:System.Data.DataColumn> Eigenschaften, wenn sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A> Sie müssen festlegen, <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> getrennt.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Außerdem konfiguriert der <xref:System.Data.DataTable.PrimaryKey%2A> und <xref:System.Data.DataTable.Constraints%2A> Eigenschaften gemäß den folgenden Regeln:  
  
-   Wenn eine oder mehrere Primärschlüsselspalten, indem zurückgegeben werden die <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, sie werden verwendet, als die Primärschlüsselspalten für die <xref:System.Data.DataTable>.  
  
-   Wenn keine Primärschlüsselspalten werden zurückgegeben, aber eindeutige Spalten sind, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn und nur, wenn die eindeutigen Spalten NULL nicht zulässig ist. Wenn eine der Spalten NULL-Werte zulässt, ist eine <xref:System.Data.UniqueConstraint> hinzugefügt wird die <xref:System.Data.ConstraintCollection>, aber die <xref:System.Data.DataTable.PrimaryKey%2A> Eigenschaft nicht festgelegt ist.  
  
-   Wenn Primärschlüsselspalten und eindeutige Spalten zurückgegeben werden, dienen als Primärschlüsselspalten für die Primärschlüsselspalten der <xref:System.Data.DataTable>.  
  
 Beachten Sie, dass es sich bei Primärschlüsseln und unique-Einschränkungen, um hinzugefügt werden die <xref:System.Data.ConstraintCollection> gemäß der vorangehenden Regeln, aber andere Einschränkung Typen nicht hinzugefügt werden.  
  
 Wenn Sie einen eindeutigen gruppierten Index für eine Spalte oder Spalten in einer SQL Server-Tabelle definiert ist, und wird auf einem separaten Satz von Spalten, primary Key-Einschränkung definiert, und klicken Sie dann den Namen der Spalten im gruppierten Index zurückgegeben werden. Um den Namen oder die Namen der Primärschlüsselspalten zurückzugeben, verwenden Sie einen Abfragehinweis mit der SELECT-Anweisung, die den Namen des Primärschlüsselindexes angibt. Weitere Informationen zum Angeben von Abfragehinweisen finden Sie unter [-Abfragehinweis (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Wenn die <xref:System.Data.IDataAdapter> mehrfach vorhandene Spalten findet beim Auffüllen des eine <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "*Columnname*1", "*Columnname*2", "*Columnname*3" und So weiter. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn mehrere Resultsets hinzugefügt werden, um die <xref:System.Data.DataSet> jedes Resultset in einer separaten Tabelle platziert wird. Zusätzliche Resultsets werden mit dem Namen durch Anhängen von ganzzahligen Werten auf den angegebenen Tabellennamen (z. B. "Table", "Table1", "Table2" und So weiter.). Anwendungen, die mithilfe von Spalten- und Tabellennamen sollten sicherstellen, dass Konflikte mit dieser Benennungsschema erfolgt nicht.  
  
 Die <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> -Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> enthält mehrere <xref:System.Data.DataTable> Objekte, deren Namen unterscheiden sich nur durch '-Fällen. In solchen Situationen <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> führt einen Vergleich Groß-/Kleinschreibung beachtet, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle aus, wenn keine genaue Übereinstimmung vorhanden ist. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird und die <xref:System.Data.DataSet> enthält nur ein <xref:System.Data.DataTable> , deren Name unterscheidet sich nur in Fällen, <xref:System.Data.DataTable> wird aktualisiert. In diesem Szenario ist der Vergleich Groß-/Kleinschreibung beachtet. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> keine zurückgibt Zeilen. Verwenden der <xref:System.Data.Common.DbDataAdapter.Fill%2A> Methode zum Hinzufügen von Zeilen zu einer <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Beim Verarbeiten von Batch-SQL-Anweisungen, die mehrere Ergebnisse, die Implementierung von zurückgeben <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework-Datenanbieter für OLE DB-Schemainformationen für nur das erste Ergebnis ab. Verwenden Sie zum Abrufen von Schemainformationen für mehrere Ergebnisse <xref:System.Data.Common.DbDataAdapter.Fill%2A> mit der <xref:System.Data.MissingSchemaAction> festgelegt `AddWithKey`.  
  
 Bei der Verwendung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> fügt der .NET Framework-Datenanbieter für SQL Server eine FOR BROWSE-Klausel an die ausgeführte Anweisung an. Der Benutzer muss mögliche Nebeneffekte beachten, z. B. Beeinträchtigungen bei der Verwendung von SET FMTONLY ON-Anweisungen. Weitere Informationen finden Sie in der SQL Server-Onlinedokumentation.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Diese Implementierung der <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> Methode wird geschützt und ist für die Verwendung durch einen .NET Framework-Datenanbieter konzipiert.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="parameterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Der Index des Befehls, dessen Parameter abgerufen werden soll.</param>
        <param name="parameterIndex">Der Index des Parameter im Befehl.</param>
        <summary>Gibt einen <see cref="T:System.Data.IDataParameter" /> von einem der Befehle im aktuellen Batch zurück.</summary>
        <returns>Die angegebene <see cref="T:System.Data.IDataParameter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, löst diese Methode <xref:System.NotSupportedException>. Klassen, die von erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um die Batches unterstützen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Der Adapter unterstützt keine Batches.</exception>
        <block subset="none" type="overrides">
          <para>Diese Methode wird geschützt und ist für die Verwendung durch einen .NET Framework-Datenanbieter konzipiert.  
  
 Wenn eine Klasse, die von erben <see cref="T:System.Data.Common.DbDataAdapter" /> Batches unterstützt, überschreibt diese Klasse diese Methode, damit Benutzer einen Batch ausführen können. Wird verwendet, um eine Implementierung der <paramref name="commandIdentifier" /> bereitgestellt, um den angeforderten Befehl zu suchen, und verwendet dann die <paramref name="parameterIndex" /> bereitgestellt, um den angeforderten Parameter. Z. B. eine <paramref name="commandIdentifier" /> 0 und eine <paramref name="parameterIndex" /> 0 den ersten Parameter aus dem ersten Befehl im Batch zurück.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="recordsAffected" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="error" Type="System.Exception&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Die nullbasierte Ordnungszahl der Spalte des einzelnen Befehls im Batch.</param>
        <param name="recordsAffected">Die Anzahl der Zeilen im Datenspeicher, auf die sich der angegebene Befehl im Batch auswirkt.</param>
        <param name="error">Eine <see cref="T:System.Exception" />, die während der Ausführung des angegebenen Befehls ausgelöst wird. Gibt <see langword="null" /> (<see langword="Nothing" /> in Visual Basic) zurück, wenn keine Ausnahme ausgelöst wird.</param>
        <summary>Gibt Informationen über einen einzelnen Updateversuch innerhalb eines größeren Updates im Batchmodus zurück.</summary>
        <returns>Informationen über einen einzelnen Updateversuch innerhalb eines größeren Updates im Batchmodus.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Datenanbieter, die als Batch erstellten Aktualisierungslogik unterstützen, müssen eine Reihe von virtuellen Methoden überschreiben, auf die <xref:System.Data.Common.DbDataAdapter> Klasse. `GetBatchedRecordsAffected` Stellt eine dieser virtuellen Methoden dar. Die `DbDataAdapter` Klasse basiert auf `GetBatchedRecordsAffected` bestimmen den Erfolg oder Misserfolg der individuellen Updates Versuche innerhalb eines Batches jeweils entsprechenden kennzeichnen <xref:System.Data.DataRow> entsprechend.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die Parameter ab, die vom Benutzer beim Ausführen einer SQL-SELECT-Anweisung festgelegt wurden.</summary>
        <returns>Ein Array von <see cref="T:System.Data.IDataParameter" />-Objekten, das die vom Benutzer festgelegten Parameter enthält.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert die Batchverarbeitung für den <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, löst diese Methode <xref:System.NotSupportedException>. Klassen, die von erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um die Batches unterstützen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Der Adapter unterstützt keine Batches.</exception>
        <block subset="none" type="overrides">
          <para>Diese Methode wird geschützt und ist für die Verwendung durch einen .NET Framework-Datenanbieter konzipiert.  
  
 Wenn eine Klasse, die von erben <see cref="T:System.Data.Common.DbDataAdapter" /> Batches unterstützt, diese Klasse diese Methode überschreibt. Diese Methode bietet der Klasse die Möglichkeit, initialisieren alle Ressourcen, die zur Unterstützung der Batchverarbeitung erforderlich sind. Eine Klasse kann z. B. eine Datenstruktur zum Speichern von des Satzes von Befehlen im Batch reservieren.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Befehl ab, mit dem neue Datensätze in die Datenquelle eingefügt werden, oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, der während der Ausführung von <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in die Datenquelle einzufügen, die neuen Zeilen im Dataset entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Während der <xref:System.Data.Common.DbDataAdapter.Update%2A>, wenn diese Eigenschaft nicht festgelegt ist und Primärschlüsselinformationen vorhanden, in ist der <xref:System.Data.DataSet>, die <xref:System.Data.IDbDataAdapter.InsertCommand%2A> wird automatisch generiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.OleDb.OleDbDataAdapter> und legt einige ihrer Eigenschaften.  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Ein <see cref="T:System.Data.Common.RowUpdatedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see langword="RowUpdated" />-Ereignis eines .NET Framework-Datenanbieters aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Eine Übersicht finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> Methode.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Ein <see cref="T:System.Data.Common.RowUpdatingEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see langword="RowUpdating" />-Ereignis eines .NET Framework-Datenanbieters aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Eine Übersicht finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> in einer abgeleiteten Klasse werden der Basen Klasse aufrufen <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> Methode.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Befehl ab, mit dem Datensätze in der Datenquelle ausgewählt werden, oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, der während der Ausführung von <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze aus der Datenquelle zur Platzierung im Dataset auszuwählen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.OleDb.OleDbDataAdapter> und legt einige ihrer Eigenschaften.  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung zum Löschen von Datensätzen aus dem Dataset ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, das während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in der Datenquelle zu löschen, die gelöschten Zeilen im DataSet entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.Common.DbDataAdapter>-Instanz in eine <xref:System.Data.IDbDataAdapter>-Schnittstelle umgewandelt wird.  
  
 Weitere Informationen finden Sie unter <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung ab, mit der neue Datensätze in die Datenquelle eingefügt werden, oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, das während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in die Datenquelle einzufügen, die neuen Zeilen im Dataset entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.Common.DbDataAdapter>-Instanz in eine <xref:System.Data.IDbDataAdapter>-Schnittstelle umgewandelt wird.  
  
 Weitere Informationen finden Sie unter <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung ab, mit der Datensätze in der Datenquelle ausgewählt werden, oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, der während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze aus der Datenquelle zur Platzierung im Dataset auszuwählen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.Common.DbDataAdapter>-Instanz in eine <xref:System.Data.IDbDataAdapter>-Schnittstelle umgewandelt wird.  
  
 Weitere Informationen finden Sie unter <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung ab, mit der Datensätze in der Datenquelle aktualisiert werden, oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, das während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in der Datenquelle zu aktualisieren, die geänderten Zeilen im Dataset entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.Common.DbDataAdapter>-Instanz in eine <xref:System.Data.IDbDataAdapter>-Schnittstelle umgewandelt wird.  
  
 Weitere Informationen finden Sie unter <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues Objekt, das eine Kopie der aktuellen Instanz darstellt.</summary>
        <returns>Ein neues Objekt, das eine Kopie dieser Instanz ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.Common.DbDataAdapter>-Instanz in eine <xref:System.ICloneable>-Schnittstelle umgewandelt wird.  
  
 Weitere Informationen finden Sie unter <xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet die Batchverarbeitung für den <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, löst diese Methode <xref:System.NotSupportedException>. Klassen, die von erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um die Batches unterstützen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Der Adapter unterstützt keine Batches.</exception>
        <block subset="none" type="overrides">
          <para>Diese Methode wird geschützt und ist für die Verwendung durch einen .NET Framework-Datenanbieter konzipiert.  
  
 Wenn eine Klasse, die von erben <see cref="T:System.Data.Common.DbDataAdapter" /> Batches unterstützt, diese Klasse diese Methode überschreibt. Diese Methode ermöglicht die Klasse, die zur Unterstützung der Batchverarbeitung reservierten Ressourcen freizugeben. Die Klasse kann z. B. die Datenstruktur freigeben, die die Befehle im Batch enthält.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktualisiert die Werte in der Datenbank, indem für jede eingefügte, aktualisierte oder gelöschte Zeile im  <see cref="T:System.Data.DataSet" /> die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung ausgeführt werden.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">Ein Array von <see cref="T:System.Data.DataRow" />-Objekten, mit denen die Datenquelle aktualisiert wird.</param>
        <summary>Aktualisiert die Werte in der Datenbank, indem für jede eingefügte, aktualisierte oder gelöschte Zeile im angegebenen Array in <see cref="T:System.Data.DataSet" /> die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung ausgeführt werden.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung ruft die <xref:System.Data.Common.DbDataAdapter.Update%2A> -Methode, die <xref:System.Data.Common.DbDataAdapter> untersucht die <xref:System.Data.DataRow.RowState%2A> -Eigenschaft, und führt die erforderlichen EINFÜGE-, Update- oder DELETE-Anweisungen iterativ für jede Zeile, die entsprechend der Reihenfolge der Indizes in der konfiguriert<xref:System.Data.DataSet>. Beispielsweise <xref:System.Data.Common.DbDataAdapter.Update%2A> kann Ausführen eine DELETE-Anweisung, gefolgt von einer INSERT-Anweisung und einer weiteren DELETE-Anweisung aufgrund die Anordnung der Zeilen in der <xref:System.Data.DataTable>.  
  
 Beachten Sie, dass diese Anweisungen als Batchprozess nicht ausgeführt werden; Jede Zeile wird einzeln aktualisiert. Eine Anwendung kann Aufrufen der <xref:System.Data.DataSet.GetChanges%2A> Methode in Situationen, in denen die Reihenfolge der Anweisungstypen (z. B. Insert vor Update) gesteuert werden muss. Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit "DataAdapters"](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Wenn die INSERT-, Update- oder DELETE-Anweisungen nicht angegeben wurden, die <xref:System.Data.Common.DbDataAdapter.Update%2A> Methode wird eine Ausnahme generiert. Allerdings können Sie erstellen eine <xref:System.Data.SqlClient.SqlCommandBuilder> oder <xref:System.Data.OleDb.OleDbCommandBuilder> Objekt, das SQL-Anweisungen für einzelne Tabellen Updates automatisch zu generieren, wenn Sie festlegen, die `SelectCommand` Eigenschaft eines .NET Framework-Datenanbieters. Alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen, werden dann generiert, indem die **CommandBuilder**. Diese Generierungslogik müssen Schlüsselspalteninformationen vorhanden sein der <xref:System.Data.DataSet>. Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A> Methode ruft Zeilen ab, aus der Tabelle in der ersten Zuordnung vor dem Ausführen eines Updates aufgeführt. Die <xref:System.Data.Common.DbDataAdapter.Update%2A> dann aktualisiert die Zeile mit dem Wert, der die <xref:System.Data.IDbCommand.UpdatedRowSource%2A> Eigenschaft. Alle weiteren zurückgegebenen Zeilen werden ignoriert.  
  
 Nach dem Laden Daten zurück in die <xref:System.Data.DataSet>, die <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Ereignis wird ausgelöst, sodass der Benutzer die abgestimmt überprüfen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter enthalten, die vom Befehl zurückgegeben wird. Nachdem eine Zeile erfolgreich aktualisiert wurde, werden die Änderungen an dieser Zeile akzeptiert.  
  
 Bei Verwendung <xref:System.Data.Common.DbDataAdapter.Update%2A>, die Reihenfolge der Ausführung lautet wie folgt:  
  
1.  Die Werte in der <xref:System.Data.DataRow> in die Parameterwerte verschoben werden.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl ausgeführt wird.  
  
4.  Wenn der Befehl, um festgelegt ist `FirstReturnedRecord`, das erste zurückgegebene Ergebnis befindet sich der <xref:System.Data.DataRow>.  
  
5.  Wenn Output-Parameter vorhanden sind, werden sie platziert, der <xref:System.Data.DataRow>.  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jeder Befehl zugeordneten der <xref:System.Data.Common.DbDataAdapter> hat normalerweise eine Auflistung von Parametern zugeordnet. Parameter sind zugeordnet, mit der aktuellen Zeile über die `SourceColumn` und `SourceVersion` Eigenschaften eines .NET Framework-Datenanbieters `Parameter` Klasse. `SourceColumn` bezieht sich auf eine <xref:System.Data.DataTable> Spalte, die die <xref:System.Data.Common.DbDataAdapter> Verweise auf die Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn` bezieht sich auf den Namen der nicht zugeordnete Spalte, bevor keine tabellenzuordnungen angewendet wurden. Wenn `SourceColumn` bezieht sich auf eine nicht vorhandene Spalte, welche Aktion abhängig ist, auf eine der folgenden <xref:System.Data.MissingMappingAction> Werte.  
  
|Enumerationswert|Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Quellspalten und den Tabellennamen in der <xref:System.Data.DataSet> , wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Ein <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt sind, ist eine fehlenden Zuordnung für einen Eingabeparameter in der Regel das Ergebnis eines Fehlers an.|  
|`MissingMappingAction.Error`|Ein <xref:System.SystemException> wird generiert.|  
  
 Die `SourceColumn` Eigenschaft wird auch verwendet, um den Wert für die Ausgabe zuzuordnen oder Eingabe-/Ausgabeparameter zurück an den `DataSet`. Eine Ausnahme wird generiert, wenn er auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion` Eigenschaft eines .NET Framework-Datenanbieters `Parameter` -Klasse bestimmt, ob die ursprünglichen, die aktuelle oder die vorgeschlagene Version des Spaltenwerts verwendet. Diese Funktion wird häufig verwendet, um die ursprünglichen Werte in der WHERE-Klausel einer UPDATE-Anweisung zu suchende Verletzung der vollständigen Parallelität einzuschließen.  
  
> [!NOTE]
>  Tritt ein Fehler bei der Aktualisierung einer Zeile, wird eine Ausnahme ausgelöst, und die Ausführung des Updates wird nicht mehr unterstützt. Legen Sie zum Fortsetzen des Vorgangs des Update-Vorgangs ohne Ausnahmen zu generieren, wenn ein Fehler aufgetreten ist die <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Eigenschaft `true` vor dem Aufruf <xref:System.Data.Common.DbDataAdapter.Update%2A>. Sie können auch für eine pro Zeile einzeln auf Fehler reagieren die `RowUpdated` -Ereignis für einen "DataAdapter". Den Update-Vorgang fortgesetzt, ohne Auslösen einer Ausnahme in der `RowUpdated` Ereignissatz, der <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> Eigenschaft von der <xref:System.Data.Common.RowUpdatedEventArgs> auf <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.OleDb.OleDbDataAdapter>, um die Datenquelle zu aktualisieren.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.SystemException">Es ist keine zu aktualisierende <see cref="T:System.Data.DataRow" /> vorhanden.  
  
 - oder -   
  
 Es ist keine zu aktualisierende <see cref="T:System.Data.DataTable" /> vorhanden.  
  
 - oder -   
  
 Es ist kein <see cref="T:System.Data.DataSet" /> vorhanden, das als Quelle verwendet werden kann.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Die <see cref="T:System.Data.DataSet" />, mit der die Datenquelle aktualisiert wird.</param>
        <summary>Aktualisiert die Werte in der Datenbank, indem für jede eingefügte, aktualisierte oder gelöschte Zeile im angegebenen <see cref="T:System.Data.DataSet" /> die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung ausgeführt werden.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung ruft die <xref:System.Data.Common.DbDataAdapter.Update%2A> -Methode, die <xref:System.Data.Common.DbDataAdapter> untersucht die <xref:System.Data.DataRow.RowState%2A> -Eigenschaft, und führt die erforderlichen EINFÜGE-, Update- oder DELETE-Anweisungen iterativ für jede Zeile, die entsprechend der Reihenfolge der Indizes in der konfiguriert<xref:System.Data.DataSet>. Beispielsweise <xref:System.Data.Common.DbDataAdapter.Update%2A> kann Ausführen eine DELETE-Anweisung, gefolgt von einer INSERT-Anweisung und einer weiteren DELETE-Anweisung aufgrund die Anordnung der Zeilen in der <xref:System.Data.DataTable>.  
  
 Beachten Sie, dass diese Anweisungen als Batchprozess nicht ausgeführt werden; Jede Zeile wird einzeln aktualisiert. Eine Anwendung kann Aufrufen der <xref:System.Data.DataSet.GetChanges%2A> Methode in Situationen, in denen die Reihenfolge der Anweisungstypen (z. B. Insert vor Update) gesteuert werden muss. Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit "DataAdapters"](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Wenn die INSERT-, Update- oder DELETE-Anweisungen nicht angegeben wurden, die <xref:System.Data.Common.DbDataAdapter.Update%2A> Methode wird eine Ausnahme generiert. Allerdings können Sie erstellen eine <xref:System.Data.SqlClient.SqlCommandBuilder> oder <xref:System.Data.OleDb.OleDbCommandBuilder> Objekt, das SQL-Anweisungen für einzelne Tabellen Updates automatisch zu generieren, wenn Sie festlegen, die `SelectCommand` Eigenschaft eines .NET Framework-Datenanbieters. Alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen, werden dann generiert, indem die **CommandBuilder**. Diese Generierungslogik müssen Schlüsselspalteninformationen vorhanden sein der <xref:System.Data.DataSet>. Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A> Methode ruft Zeilen ab, aus der Tabelle in der ersten Zuordnung vor dem Ausführen eines Updates aufgeführt. Die <xref:System.Data.Common.DbDataAdapter.Update%2A> dann aktualisiert die Zeile mit dem Wert, der die <xref:System.Data.IDbCommand.UpdatedRowSource%2A> Eigenschaft. Alle weiteren zurückgegebenen Zeilen werden ignoriert.  
  
 Nach dem Laden Daten zurück in die <xref:System.Data.DataSet>, die <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Ereignis wird ausgelöst, sodass der Benutzer die abgestimmt überprüfen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter enthalten, die vom Befehl zurückgegeben wird. Nachdem eine Zeile erfolgreich aktualisiert wurde, werden die Änderungen an dieser Zeile akzeptiert.  
  
 Bei Verwendung <xref:System.Data.Common.DbDataAdapter.Update%2A>, die Reihenfolge der Ausführung lautet wie folgt:  
  
1.  Die Werte in der <xref:System.Data.DataRow> in die Parameterwerte verschoben werden.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl ausgeführt wird.  
  
4.  Wenn der Befehl, um festgelegt ist `FirstReturnedRecord`, und klicken Sie dann das erste Ergebnis befindet sich zurückgegebene der <xref:System.Data.DataRow>.  
  
5.  Wenn Output-Parameter vorhanden sind, werden sie platziert, der <xref:System.Data.DataRow>.  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jeder Befehl zugeordneten der <xref:System.Data.Common.DbDataAdapter> hat normalerweise eine Auflistung von Parametern zugeordnet. Parameter sind zugeordnet, mit der aktuellen Zeile über die `SourceColumn` und `SourceVersion` Eigenschaften eines .NET Framework-Datenanbieters `Parameter` Klasse. `SourceColumn` bezieht sich auf eine <xref:System.Data.DataTable> Spalte, die die <xref:System.Data.Common.DbDataAdapter> Verweise auf die Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn` bezieht sich auf den Namen der nicht zugeordnete Spalte, bevor keine tabellenzuordnungen angewendet wurden. Wenn `SourceColumn` bezieht sich auf eine nicht vorhandene Spalte, welche Aktion abhängig ist, auf eine der folgenden <xref:System.Data.MissingMappingAction> Werte.  
  
|Enumerationswert|Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Quellspalten und den Tabellennamen in der <xref:System.Data.DataSet> , wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Ein <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt sind, ist eine fehlenden Zuordnung für einen Eingabeparameter in der Regel das Ergebnis eines Fehlers an.|  
|`MissingMappingAction.Error`|Ein <xref:System.SystemException> wird generiert.|  
  
 Die `SourceColumn` Eigenschaft wird auch verwendet, um den Wert für die Ausgabe zuzuordnen oder Eingabe-/Ausgabeparameter zurück an den `DataSet`. Eine Ausnahme wird generiert, wenn er auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion` Eigenschaft eines .NET Framework-Datenanbieters `Parameter` -Klasse bestimmt, ob die ursprünglichen, die aktuelle oder die vorgeschlagene Version des Spaltenwerts verwendet. Diese Funktion wird häufig verwendet, um die ursprünglichen Werte in der WHERE-Klausel einer UPDATE-Anweisung zu suchende Verletzung der vollständigen Parallelität einzuschließen.  
  
> [!NOTE]
>  Tritt ein Fehler bei der Aktualisierung einer Zeile, wird eine Ausnahme ausgelöst, und die Ausführung des Updates wird nicht mehr unterstützt. Legen Sie zum Fortsetzen des Vorgangs des Update-Vorgangs ohne Ausnahmen zu generieren, wenn ein Fehler aufgetreten ist die <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Eigenschaft `true` vor dem Aufruf <xref:System.Data.Common.DbDataAdapter.Update%2A>. Sie können auch für eine pro Zeile einzeln auf Fehler reagieren die `RowUpdated` -Ereignis für einen "DataAdapter". Den Update-Vorgang fortgesetzt, ohne Auslösen einer Ausnahme in der `RowUpdated` Ereignissatz, der <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> Eigenschaft von der <xref:System.Data.Common.RowUpdatedEventArgs> auf <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.OleDb.OleDbDataAdapter>, um die Datenquelle zu aktualisieren.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Die <see cref="T:System.Data.DataTable" />, mit der die Datenquelle aktualisiert wird.</param>
        <summary>Aktualisiert die Werte in der Datenbank, indem für jede eingefügte, aktualisierte oder gelöschte Zeile im angegebenen <see cref="T:System.Data.DataTable" /> die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung ausgeführt werden.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataTable" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung ruft die <xref:System.Data.Common.DbDataAdapter.Update%2A> -Methode, die <xref:System.Data.Common.DbDataAdapter> untersucht die <xref:System.Data.DataRow.RowState%2A> -Eigenschaft, und führt die erforderlichen EINFÜGE-, Update- oder DELETE-Anweisungen iterativ für jede Zeile, die entsprechend der Reihenfolge der Indizes in der konfiguriert<xref:System.Data.DataSet>. Beispielsweise <xref:System.Data.Common.DbDataAdapter.Update%2A> kann Ausführen eine DELETE-Anweisung, gefolgt von einer INSERT-Anweisung und einer weiteren DELETE-Anweisung aufgrund die Anordnung der Zeilen in der <xref:System.Data.DataTable>.  
  
 Beachten Sie, dass diese Anweisungen als Batchprozess nicht ausgeführt werden; Jede Zeile wird einzeln aktualisiert. Eine Anwendung kann Aufrufen der <xref:System.Data.DataSet.GetChanges%2A> Methode in Situationen, in denen die Reihenfolge der Anweisungstypen (z. B. Insert vor Update) gesteuert werden muss. Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit "DataAdapters"](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Wenn die INSERT-, Update- oder DELETE-Anweisungen nicht angegeben wurden, die <xref:System.Data.Common.DbDataAdapter.Update%2A> Methode wird eine Ausnahme generiert. Allerdings können Sie erstellen eine <xref:System.Data.SqlClient.SqlCommandBuilder> oder <xref:System.Data.OleDb.OleDbCommandBuilder> Objekt, das SQL-Anweisungen für einzelne Tabellen Updates automatisch zu generieren, wenn Sie festlegen, die `SelectCommand` Eigenschaft eines .NET Framework-Datenanbieters. Alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen, werden dann generiert, indem die **CommandBuilder**. Diese Generierungslogik müssen Schlüsselspalteninformationen vorhanden sein der <xref:System.Data.DataSet>. Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A> Methode ruft Zeilen ab, aus der Tabelle in der ersten Zuordnung vor dem Ausführen eines Updates aufgeführt. Die <xref:System.Data.Common.DbDataAdapter.Update%2A> dann aktualisiert die Zeile mit dem Wert, der die <xref:System.Data.IDbCommand.UpdatedRowSource%2A> Eigenschaft. Alle weiteren zurückgegebenen Zeilen werden ignoriert.  
  
 Nach dem Laden Daten zurück in die <xref:System.Data.DataSet>, die <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Ereignis wird ausgelöst, sodass der Benutzer die abgestimmt überprüfen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter enthalten, die vom Befehl zurückgegeben wird. Nachdem eine Zeile erfolgreich aktualisiert wurde, werden die Änderungen an dieser Zeile akzeptiert.  
  
 Bei Verwendung <xref:System.Data.Common.DbDataAdapter.Update%2A>, die Reihenfolge der Ausführung lautet wie folgt:  
  
1.  Die Werte in der <xref:System.Data.DataRow> in die Parameterwerte verschoben werden.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl ausgeführt wird.  
  
4.  Wenn der Befehl, um festgelegt ist `FirstReturnedRecord`, und klicken Sie dann das erste Ergebnis befindet sich zurückgegebene der <xref:System.Data.DataRow>.  
  
5.  Wenn Output-Parameter vorhanden sind, werden sie platziert, der <xref:System.Data.DataRow>.  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jeder Befehl zugeordneten der <xref:System.Data.Common.DbDataAdapter> hat normalerweise eine Auflistung von Parametern zugeordnet. Parameter sind zugeordnet, mit der aktuellen Zeile über die `SourceColumn` und `SourceVersion` Eigenschaften eines .NET Framework-Datenanbieters `Parameter` Klasse. `SourceColumn` bezieht sich auf eine <xref:System.Data.DataTable> Spalte, die die <xref:System.Data.Common.DbDataAdapter> Verweise auf die Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn` bezieht sich auf den Namen der nicht zugeordnete Spalte, bevor keine tabellenzuordnungen angewendet wurden. Wenn `SourceColumn` bezieht sich auf eine nicht vorhandene Spalte, welche Aktion abhängig ist, auf eine der folgenden <xref:System.Data.MissingMappingAction> Werte.  
  
|Enumerationswert|Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Quellspalten und den Tabellennamen in der <xref:System.Data.DataSet> , wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Ein <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt sind, ist eine fehlenden Zuordnung für einen Eingabeparameter in der Regel das Ergebnis eines Fehlers an.|  
|`MissingMappingAction.Error`|Ein <xref:System.SystemException> wird generiert.|  
  
 Die `SourceColumn` Eigenschaft wird auch verwendet, um den Wert für die Ausgabe zuzuordnen oder Eingabe-/Ausgabeparameter zurück an den `DataSet`. Eine Ausnahme wird generiert, wenn er auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion` Eigenschaft eines .NET Framework-Datenanbieters `Parameter` -Klasse bestimmt, ob die ursprünglichen, die aktuelle oder die vorgeschlagene Version des Spaltenwerts verwendet. Diese Funktion wird häufig verwendet, um die ursprünglichen Werte in der WHERE-Klausel einer UPDATE-Anweisung zu suchende Verletzung der vollständigen Parallelität einzuschließen.  
  
> [!NOTE]
>  Tritt ein Fehler bei der Aktualisierung einer Zeile, wird eine Ausnahme ausgelöst, und die Ausführung des Updates wird nicht mehr unterstützt. Legen Sie zum Fortsetzen des Vorgangs des Update-Vorgangs ohne Ausnahmen zu generieren, wenn ein Fehler aufgetreten ist die <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Eigenschaft `true` vor dem Aufruf <xref:System.Data.Common.DbDataAdapter.Update%2A>. Sie können auch für eine pro Zeile einzeln auf Fehler reagieren die `RowUpdated` -Ereignis für einen "DataAdapter". Den Update-Vorgang fortgesetzt, ohne Auslösen einer Ausnahme in der `RowUpdated` Ereignissatz, der <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> Eigenschaft von der <xref:System.Data.Common.RowUpdatedEventArgs> auf <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.OleDb.OleDbDataAdapter>, um die Datenquelle zu aktualisieren.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.SystemException">Es ist keine zu aktualisierende <see cref="T:System.Data.DataRow" /> vorhanden.  
  
 - oder -   
  
 Es ist keine zu aktualisierende <see cref="T:System.Data.DataTable" /> vorhanden.  
  
 - oder -   
  
 Es ist kein <see cref="T:System.Data.DataSet" /> vorhanden, das als Quelle verwendet werden kann.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">Ein Array von <see cref="T:System.Data.DataRow" />-Objekten, mit denen die Datenquelle aktualisiert wird.</param>
        <param name="tableMapping">Die zu verwendende <see cref="P:System.Data.IDataAdapter.TableMappings" />-Auflistung.</param>
        <summary>Aktualisiert die Werte in der Datenbank, indem für jede eingefügte, aktualisierte oder gelöschte Zeile im angegebenen Array von <see cref="T:System.Data.DataSet" />-Objekten die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung ausgeführt werden.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung ruft die <xref:System.Data.Common.DbDataAdapter.Update%2A> -Methode, die <xref:System.Data.Common.DbDataAdapter> untersucht die <xref:System.Data.DataRow.RowState%2A> -Eigenschaft, und führt die erforderlichen EINFÜGE-, Update- oder DELETE-Anweisungen iterativ für jede Zeile, die entsprechend der Reihenfolge der Indizes in der konfiguriert<xref:System.Data.DataSet>. Beispielsweise <xref:System.Data.Common.DbDataAdapter.Update%2A> kann Ausführen eine DELETE-Anweisung, gefolgt von einer INSERT-Anweisung und einer weiteren DELETE-Anweisung aufgrund die Anordnung der Zeilen in der <xref:System.Data.DataTable>.  
  
 Beachten Sie, dass diese Anweisungen als Batchprozess nicht ausgeführt werden; Jede Zeile wird einzeln aktualisiert. Eine Anwendung kann Aufrufen der <xref:System.Data.DataSet.GetChanges%2A> Methode in Situationen, in denen die Reihenfolge der Anweisungstypen (z. B. Insert vor Update) gesteuert werden muss. Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit "DataAdapters"](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Wenn die INSERT-, Update- oder DELETE-Anweisungen nicht angegeben wurden, die <xref:System.Data.Common.DbDataAdapter.Update%2A> Methode wird eine Ausnahme generiert. Allerdings können Sie erstellen eine <xref:System.Data.SqlClient.SqlCommandBuilder> oder <xref:System.Data.OleDb.OleDbCommandBuilder> Objekt, das SQL-Anweisungen für einzelne Tabellen Updates automatisch zu generieren, wenn Sie festlegen, die `SelectCommand` Eigenschaft eines .NET Framework-Datenanbieters. Alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen, werden dann generiert, indem die **CommandBuilder**. Diese Generierungslogik müssen Schlüsselspalteninformationen vorhanden sein der <xref:System.Data.DataSet>. Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A> Methode ruft Zeilen ab, aus der Tabelle in der ersten Zuordnung vor dem Ausführen eines Updates aufgeführt. Die <xref:System.Data.Common.DbDataAdapter.Update%2A> dann aktualisiert die Zeile mit dem Wert, der die <xref:System.Data.IDbCommand.UpdatedRowSource%2A> Eigenschaft. Alle weiteren zurückgegebenen Zeilen werden ignoriert.  
  
 Nach dem Laden Daten zurück in die <xref:System.Data.DataSet>, die <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Ereignis wird ausgelöst, sodass der Benutzer die abgestimmt überprüfen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter enthalten, die vom Befehl zurückgegeben wird. Nachdem eine Zeile erfolgreich aktualisiert wurde, werden die Änderungen an dieser Zeile akzeptiert.  
  
 Bei Verwendung <xref:System.Data.Common.DbDataAdapter.Update%2A>, die Reihenfolge der Ausführung lautet wie folgt:  
  
1.  Die Werte in der <xref:System.Data.DataRow> in die Parameterwerte verschoben werden.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl ausgeführt wird.  
  
4.  Wenn der Befehl, um festgelegt ist `FirstReturnedRecord`, und klicken Sie dann das erste Ergebnis befindet sich zurückgegebene der <xref:System.Data.DataRow>.  
  
5.  Wenn Output-Parameter vorhanden sind, werden sie platziert, der <xref:System.Data.DataRow>.  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jeder Befehl zugeordneten der <xref:System.Data.Common.DbDataAdapter> hat normalerweise eine Auflistung von Parametern zugeordnet. Parameter sind zugeordnet, mit der aktuellen Zeile über die `SourceColumn` und `SourceVersion` Eigenschaften eines .NET Framework-Datenanbieters `Parameter` Klasse. `SourceColumn` bezieht sich auf eine <xref:System.Data.DataTable> Spalte, die die <xref:System.Data.Common.DbDataAdapter> Verweise auf die Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn` bezieht sich auf den Namen der nicht zugeordnete Spalte, bevor keine tabellenzuordnungen angewendet wurden. Wenn `SourceColumn` bezieht sich auf eine nicht vorhandene Spalte, welche Aktion abhängig ist, auf eine der folgenden <xref:System.Data.MissingMappingAction> Werte.  
  
|Enumerationswert|Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Quellspalten und den Tabellennamen in der <xref:System.Data.DataSet> , wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Ein <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt sind, ist eine fehlenden Zuordnung für einen Eingabeparameter in der Regel das Ergebnis eines Fehlers an.|  
|`MissingMappingAction.Error`|Ein <xref:System.SystemException> wird generiert.|  
  
 Die `SourceColumn` Eigenschaft wird auch verwendet, um den Wert für die Ausgabe zuzuordnen oder Eingabe-/Ausgabeparameter zurück an den `DataSet`. Eine Ausnahme wird generiert, wenn er auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion` Eigenschaft eines .NET Framework-Datenanbieters `Parameter` -Klasse bestimmt, ob die ursprünglichen, die aktuelle oder die vorgeschlagene Version des Spaltenwerts verwendet. Diese Funktion wird häufig verwendet, um die ursprünglichen Werte in der WHERE-Klausel einer UPDATE-Anweisung zu suchende Verletzung der vollständigen Parallelität einzuschließen.  
  
> [!NOTE]
>  Tritt ein Fehler bei der Aktualisierung einer Zeile, wird eine Ausnahme ausgelöst, und die Ausführung des Updates wird nicht mehr unterstützt. Legen Sie zum Fortsetzen des Vorgangs des Update-Vorgangs ohne Ausnahmen zu generieren, wenn ein Fehler aufgetreten ist die <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Eigenschaft `true` vor dem Aufruf <xref:System.Data.Common.DbDataAdapter.Update%2A>. Sie können auch für eine pro Zeile einzeln auf Fehler reagieren die `RowUpdated` -Ereignis für einen "DataAdapter". Den Update-Vorgang fortgesetzt, ohne Auslösen einer Ausnahme in der `RowUpdated` Ereignissatz, der <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> Eigenschaft von der <xref:System.Data.Common.RowUpdatedEventArgs> auf <xref:System.Data.UpdateStatus.Continue>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.SystemException">Es ist keine zu aktualisierende <see cref="T:System.Data.DataRow" /> vorhanden.  
  
 - oder -   
  
 Es ist keine zu aktualisierende <see cref="T:System.Data.DataTable" /> vorhanden.  
  
 - oder -   
  
 Es ist kein <see cref="T:System.Data.DataSet" /> vorhanden, das als Quelle verwendet werden kann.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Das zum Aktualisieren der Datenquelle zu verwendende <see cref="T:System.Data.DataSet" />.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <summary>Aktualisiert die Werte in der Datenbank, indem es die jeweiligen Anweisungen „Einfügen“, „Aktualisieren“ oder „Löschen“ für jede eingefügte, aktualisierte oder gelöschte Zeile in dem <see cref="T:System.Data.DataSet" /> mit dem angegebenen <see cref="T:System.Data.DataTable" />-Namen ausführt.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung ruft die <xref:System.Data.Common.DbDataAdapter.Update%2A> -Methode, die <xref:System.Data.Common.DbDataAdapter> untersucht die <xref:System.Data.DataRow.RowState%2A> -Eigenschaft, und führt die erforderlichen EINFÜGE-, Update- oder DELETE-Anweisungen iterativ für jede Zeile, die entsprechend der Reihenfolge der Indizes in der konfiguriert<xref:System.Data.DataSet>. Beispielsweise <xref:System.Data.Common.DbDataAdapter.Update%2A> kann Ausführen eine DELETE-Anweisung, gefolgt von einer INSERT-Anweisung und einer weiteren DELETE-Anweisung aufgrund die Anordnung der Zeilen in der <xref:System.Data.DataTable>.  
  
 Beachten Sie, dass diese Anweisungen als Batchprozess nicht ausgeführt werden; Jede Zeile wird einzeln aktualisiert. Eine Anwendung kann Aufrufen der <xref:System.Data.DataSet.GetChanges%2A> Methode in Situationen, in denen die Reihenfolge der Anweisungstypen gesteuert werden muss (z. B. INSERT vor UPDATE). Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit "DataAdapters"](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Wenn die INSERT-, Update- oder DELETE-Anweisungen nicht angegeben wurden, die <xref:System.Data.Common.DbDataAdapter.Update%2A> Methode wird eine Ausnahme generiert. Allerdings können Sie erstellen eine <xref:System.Data.SqlClient.SqlCommandBuilder> oder <xref:System.Data.OleDb.OleDbCommandBuilder> Objekt, das SQL-Anweisungen für einzelne Tabellen Updates automatisch zu generieren, wenn Sie festlegen, die `SelectCommand` Eigenschaft eines .NET Framework-Datenanbieters. Alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen, werden dann generiert, indem die **CommandBuilder**. Diese Generierungslogik müssen Schlüsselspalteninformationen vorhanden sein der <xref:System.Data.DataSet>. Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A> -Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> enthält mehrere <xref:System.Data.DataTable> Objekte, deren Namen unterscheiden sich nur durch '-Fällen. Wenn mehrere Tabellen mit demselben Namen, aber andere Groß-/Kleinschreibung, vorhanden ist, einem `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A> führt einen Vergleich Groß-/Kleinschreibung beachtet, um die entsprechende Tabelle zu suchen, und generiert eine Ausnahme aus, wenn keine genaue Übereinstimmung vorhanden ist. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Update%2A> aufgerufen wird und die <xref:System.Data.DataSet> enthält nur ein <xref:System.Data.DataTable> , deren Name unterscheidet sich nur in Fällen, <xref:System.Data.DataTable> wird aktualisiert. In diesem Szenario ist der Vergleich Groß-/Kleinschreibung beachtet. Der folgende C#-Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A> Methode ruft Zeilen ab, aus der Tabelle in der ersten Zuordnung vor dem Ausführen eines Updates aufgeführt. Die <xref:System.Data.Common.DbDataAdapter.Update%2A> dann aktualisiert die Zeile mit dem Wert, der die <xref:System.Data.IDbCommand.UpdatedRowSource%2A> Eigenschaft. Alle weiteren zurückgegebenen Zeilen werden ignoriert.  
  
 Nach dem Laden Daten zurück in die <xref:System.Data.DataSet>, die <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Ereignis wird ausgelöst, sodass der Benutzer die abgestimmt überprüfen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter enthalten, die vom Befehl zurückgegeben wird. Nachdem eine Zeile erfolgreich aktualisiert wurde, werden die Änderungen an dieser Zeile akzeptiert.  
  
 Bei Verwendung <xref:System.Data.Common.DbDataAdapter.Update%2A>, die Reihenfolge der Ausführung lautet wie folgt:  
  
1.  Die Werte in der <xref:System.Data.DataRow> in die Parameterwerte verschoben werden.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl ausgeführt wird.  
  
4.  Wenn der Befehl, um festgelegt ist `FirstReturnedRecord`, und klicken Sie dann das erste Ergebnis befindet sich zurückgegebene der <xref:System.Data.DataRow>.  
  
5.  Wenn Output-Parameter vorhanden sind, werden sie platziert, der <xref:System.Data.DataRow>.  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jeder Befehl zugeordneten der <xref:System.Data.Common.DbDataAdapter> hat normalerweise eine Auflistung von Parametern zugeordnet. Parameter sind zugeordnet, mit der aktuellen Zeile über die `SourceColumn` und `SourceVersion` Eigenschaften eines .NET Framework-Datenanbieters `Parameter` Klasse. `SourceColumn` bezieht sich auf eine <xref:System.Data.DataTable> Spalte, die die <xref:System.Data.Common.DbDataAdapter> Verweise auf die Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn` bezieht sich auf den Namen der nicht zugeordnete Spalte, bevor keine tabellenzuordnungen angewendet wurden. Wenn `SourceColumn` bezieht sich auf eine nicht vorhandene Spalte, welche Aktion abhängig ist, auf eine der folgenden <xref:System.Data.MissingMappingAction> Werte.  
  
|Enumerationswert|Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Quellspalten und den Tabellennamen in der <xref:System.Data.DataSet> , wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Ein <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt sind, ist eine fehlenden Zuordnung für einen Eingabeparameter in der Regel das Ergebnis eines Fehlers an.|  
|`MissingMappingAction.Error`|Ein <xref:System.SystemException> wird generiert.|  
  
 Die `SourceColumn` Eigenschaft wird auch verwendet, um den Wert für die Ausgabe zuzuordnen oder Eingabe-/Ausgabeparameter zurück an den `DataSet`. Eine Ausnahme wird generiert, wenn er auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion` Eigenschaft eines .NET Framework-Datenanbieters `Parameter` -Klasse bestimmt, ob die ursprünglichen, die aktuelle oder die vorgeschlagene Version des Spaltenwerts verwendet. Diese Funktion wird häufig verwendet, um die ursprünglichen Werte in der WHERE-Klausel einer UPDATE-Anweisung zu suchende Verletzung der vollständigen Parallelität einzuschließen.  
  
> [!NOTE]
>  Tritt ein Fehler bei der Aktualisierung einer Zeile, wird eine Ausnahme ausgelöst, und die Ausführung des Updates wird nicht mehr unterstützt. Legen Sie zum Fortsetzen des Vorgangs des Update-Vorgangs ohne Ausnahmen zu generieren, wenn ein Fehler aufgetreten ist die <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Eigenschaft `true` vor dem Aufruf <xref:System.Data.Common.DbDataAdapter.Update%2A>. Sie können auch für eine pro Zeile einzeln auf Fehler reagieren die `RowUpdated` -Ereignis für einen "DataAdapter". Den Update-Vorgang fortgesetzt, ohne Auslösen einer Ausnahme in der `RowUpdated` Ereignissatz, der <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> Eigenschaft von der <xref:System.Data.Common.RowUpdatedEventArgs> auf <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.OleDb.OleDbDataAdapter>, um die Datenquelle zu aktualisieren.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, mit dem die Batchverarbeitung aktiviert bzw. deaktiviert wird, und gibt die Anzahl der Befehle an, die pro Batch ausgeführt werden können.</summary>
        <value>Die Anzahl der Zeilen, die pro Batch verarbeitet werden.  
  
 <list type="table"><listheader><term> Wert ist  
  
 </term><description> Auswirkung  
  
 </description></listheader><item><term> 0 (null)  
  
 </term><description> Es gibt keine Beschränkung für die Batchgröße.  
  
 </description></item><item><term> 1  
  
 </term><description> Deaktiviert die Batchaktualisierung.  
  
 </description></item><item><term> &gt; 1  
  
 </term><description> Änderungen gesendet werden, verwenden von Batches von <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> Vorgänge zu einem Zeitpunkt.  
  
 </description></item></list>  
  
 Wenn dies auf einen anderen Wert als 1 festlegen, alle Befehle, die verknüpft sind, mit der <see cref="T:System.Data.Common.DbDataAdapter" /> benötigen ihre <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> -Eigenschaftensatz auf **keine** oder **OutputParameters**. Andernfalls wird eine Ausnahme ausgelöst.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A> Eigenschaft so aktualisieren eine Datenquelle mit Änderungen von einem <xref:System.Data.DataSet>. Wenn der Datenanbieter die Batchverarbeitung unterstützt, kann dies Anwendungsleistung erhöhen, indem Sie verringert die Anzahl der Roundtrips zum Server. In ADO.NET 2.0 wird diese Eigenschaft für die .NET-Datenanbieter für SQL Server (SqlClient) und Oracle (OracleClient) unterstützt.  
  
 Die Ausführung eines extrem großen Batches könnte die Leistung verringern. Daher sollten Sie die Einstellung für eine optimale Batchgröße vor der Implementierung Ihrer Anwendung austesten.  
  
 Ein <xref:System.ArgumentOutOfRangeException> wird ausgelöst, wenn der Wert, auf eine Zahl festgelegt ist kleiner als 0 (null).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Befehl ab, mit dem Datensätze in der Datenquelle aktualisiert werden, oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, der während der Ausführung von <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in der Datenquelle zu aktualisieren, die geänderten Zeilen im Dataset entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Während der <xref:System.Data.Common.DbDataAdapter.Update%2A>, wenn diese Eigenschaft nicht festgelegt ist und Primärschlüsselinformationen vorhanden, in ist der <xref:System.Data.DataSet>, die <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> wird automatisch generiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete Klasse <xref:System.Data.OleDb.OleDbDataAdapter> und legt einige ihrer Eigenschaften.  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
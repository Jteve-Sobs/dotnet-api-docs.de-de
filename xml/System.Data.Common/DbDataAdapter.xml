<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6fbe8cf7fb5f85c4f91f246d65bab1921115e191" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75142890" /></Metadata><TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Unterstützt die Implementierung der <see cref="T:System.Data.IDbDataAdapter" />-Schnittstelle. Vererber von <see cref="T:System.Data.Common.DbDataAdapter" /> implementieren verschiedene Funktion zur Bereitstellung einer starken Typisierung, aber vererben die meisten Funktionen, die benötigt werden, um einen **DataAdapter** vollständig zu implementieren.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter>-Klasse erbt von der <xref:System.Data.Common.DataAdapter>-Klasse und implementiert die <xref:System.Data.IDbDataAdapter>-Schnittstelle. Dadurch kann eine Klasse einen **DataAdapter** implementieren, der für die Verwendung mit einer relationalen Datenbank entworfen wurde.  
  
 Eine Anwendung erstellt keine Instanz der <xref:System.Data.Common.DbDataAdapter>-Klasse direkt, sondern erstellt eine Instanz einer Klasse, die von ihr erbt.  
  
 Klassen, die <xref:System.Data.Common.DbDataAdapter> erben, müssen die geerbten Member implementieren und in der Regel zusätzliche Elemente definieren, um anbieterspezifische Funktionen hinzuzufügen. Die <xref:System.Data.Common.DbDataAdapter>-Klasse definiert z. b. die <xref:System.Data.IDbDataAdapter.SelectCommand%2A>-Eigenschaft, und die <xref:System.Data.Common.DbDataAdapter>-Klasse definiert acht über Ladungen der <xref:System.Data.IDataAdapter.Fill%2A>-Methode. Die <xref:System.Data.OleDb.OleDbDataAdapter>-Klasse erbt wiederum die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode und definiert außerdem zwei zusätzliche über Ladungen von <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>, die ein ADO-Recordset-Objekt als Parameter annehmen.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Wenn Sie von der <see cref="T:System.Data.Common.DbDataAdapter" />-Klasse erben, empfiehlt es sich, die folgenden Konstruktoren zu implementieren: 
 <list type="table"><listheader><term> Element 
 </term><description> Beschreibung 
 </description></listheader><item><term> *Prv* DataAdapter () 
 </term><description> Initialisiert eine neue Instanz der *Prv*DataAdapter-Klasse.  
  
 </description></item><item><term> *Prv* DataAdapter (*Prv*-Befehl *SelectCommand*) 
 </term><description> Initialisiert eine neue Instanz der *Prv*DataAdapter-Klasse mit der angegebenen SQL SELECT-Anweisung.  
  
 </description></item><item><term> *Prv* DataAdapter (String *selectCommandText*, String *selectConnectionString*) 
 </term><description> Initialisiert eine neue Instanz der *Prv*DataAdapter-Klasse mit einer SQL-SELECT-Anweisung und einer Verbindungs Zeichenfolge.  
  
 </description></item><item><term> *Prv* DataAdapter (String *selectCommandText*, *Prv*Connection *selectconnection*) 
 </term><description> Initialisiert eine neue Instanz der *Prv*DataAdapter-Klasse mit einer SQL-SELECT-Anweisung und einem *Prv*-Verbindungs Objekt.  
  
 </description></item></list>  

 Wenn Sie die Konsistenz zwischen .NET Framework Datenanbietern herauf Stufen möchten, sollten Sie die erbende Klasse in der Form *Prv*DataAdapter benennen, wobei *Prv* das einheitliche Präfix ist, das für alle Klassen in einem bestimmten .NET Framework Datenanbieter-Namespace angegeben wird. Beispielsweise ist "SQL" das Präfix der <see cref="T:System.Data.SqlClient.SqlDataAdapter" />-Klasse im Namespace " **System. Data. SqlClient** ".</para></block>
    <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz einer <see langword="DataAdapter" />-Klasse.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz einer **DataAdapter** Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie eine Instanz von <xref:System.Data.Common.DbDataAdapter>erstellen, werden die folgenden Lese-/Schreibeigenschaften auf die folgenden Anfangswerte festgelegt.  
  
|Eigenschaften|Anfangswert|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|Ein neuer <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|Ein neuer <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|Ein neuer <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|Ein neuer <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 Sie können den Wert dieser Eigenschaften durch einen separaten aufrufungstyp ändern.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbDataAdapter : System.Data.Common.DbDataAdapter -&gt; System.Data.Common.DbDataAdapter" Usage="new System.Data.Common.DbDataAdapter adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">Ein für die Erstellung des neuen <see langword="DataAdapter" /> verwendetes <see langword="DataAdapter" />-Objekt.</param>
        <summary>Initialisiert eine neue Instanz einer <see langword="DataAdapter" />-Klasse aus einem vorhandenen Objekt desselben Typs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung des <xref:System.Data.Common.DbDataAdapter> Konstruktors ist für die Verwendung durch einen .NET Framework Datenanbieter konzipiert, wenn ein ähnlicher Konstruktor für die Verwendung in einer Klon Implementierung implementiert wird.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddToBatch : System.Data.IDbCommand -&gt; int&#xA;override this.AddToBatch : System.Data.IDbCommand -&gt; int" Usage="dbDataAdapter.AddToBatch command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="command">Der dem Batch hinzuzufügende <see cref="T:System.Data.IDbCommand" />.</param>
        <summary>Fügt im aktuellen Batch einen <see cref="T:System.Data.IDbCommand" /> hinzu.</summary>
        <returns>Die Anzahl der Befehle im Batch vor dem Hinzufügen des <see cref="T:System.Data.IDbCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>löst diese Methode <xref:System.NotSupportedException>aus. Klassen, die von Erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um Unterstützung für Batches bereitzustellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Der Adapter unterstützt keine Batches.</exception>
        <block subset="none" type="overrides"><para>Diese Methode ist geschützt und ist für die Verwendung durch einen .NET Framework Datenanbieter konzipiert.  
  
Wenn eine Klasse, die von <see cref="T:System.Data.Common.DbDataAdapter" /> erbt, Batches unterstützt, überschreibt diese Klasse diese Methode, damit Benutzer einem Batch einen Befehl hinzufügen können.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberSignature Language="F#" Value="abstract member ClearBatch : unit -&gt; unit&#xA;override this.ClearBatch : unit -&gt; unit" Usage="dbDataAdapter.ClearBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle <see cref="T:System.Data.IDbCommand" />-Objekte aus dem Batch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>löst diese Methode <xref:System.NotSupportedException>aus. Klassen, die von Erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um Unterstützung für Batches bereitzustellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Der Adapter unterstützt keine Batches.</exception>
        <block subset="none" type="overrides"><para>Diese Methode ist geschützt und ist für die Verwendung durch einen .NET Framework Datenanbieter konzipiert.  
  
Wenn eine Klasse, die von <see cref="T:System.Data.Common.DbDataAdapter" /> erbt, Batches unterstützt, überschreibt diese Klasse diese Methode, damit Benutzer alle Befehle aus einem Batch entfernen können.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs&#xA;override this.CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">Die <see cref="T:System.Data.DataRow" />, mit der die Datenquelle aktualisiert wird.</param>
        <param name="command">Der während des <see cref="T:System.Data.IDbCommand" /> ausgeführte <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Gibt an, ob der Befehl einer der Anweisungen UPDATE, INSERT, DELETE oder SELECT entspricht.</param>
        <param name="tableMapping">Ein <see cref="T:System.Data.Common.DataTableMapping" />-Objekt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Common.RowUpdatedEventArgs" />-Klasse.</summary>
        <returns>Eine neue Instanz der <see cref="T:System.Data.Common.RowUpdatedEventArgs" />-Klasse.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass Sie die <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />-Methode der Basisklasse aufzurufen.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs&#xA;override this.CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">Die <see cref="T:System.Data.DataRow" />, mit der die Datenquelle aktualisiert wird.</param>
        <param name="command">Das während des <see cref="T:System.Data.IDbCommand" /> auszuführende <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Gibt an, ob der Befehl einer der Anweisungen UPDATE, INSERT, DELETE oder SELECT entspricht.</param>
        <param name="tableMapping">Ein <see cref="T:System.Data.Common.DataTableMapping" />-Objekt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Common.RowUpdatingEventArgs" />-Klasse.</summary>
        <returns>Eine neue Instanz der <see cref="T:System.Data.Common.RowUpdatingEventArgs" />-Klasse.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass Sie die <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />-Methode der Basisklasse aufzurufen.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberSignature Language="F#" Value="val mutable DefaultSourceTableName : string" Usage="System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Der vom <see cref="T:System.Data.Common.DataAdapter" />-Objekt verwendete Standardname für Tabellenzuordnungen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Table" ist der Standardname, der vom <xref:System.Data.Common.DataAdapter>-Objekt für Tabellen Zuordnungen verwendet wird.  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> ist, wenn eine Anwendung eine Tabellen Zuordnung hinzufügt, die mit <xref:System.Data.Common.DbDataAdapter.Fill%2A>verwendet werden soll, aber keinen <xref:System.Data.DataTable> Namen angibt.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Befehl zum Löschen von Datensätzen aus dem Dataset ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, das während der Ausführung von <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in der Datenquelle zu löschen, die gelöschten Zeilen im DataSet entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft während <xref:System.Data.Common.DbDataAdapter.Update%2A>nicht festgelegt ist und Primärschlüssel Informationen in der <xref:System.Data.DataSet>vorhanden sind, wird die <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> automatisch generiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse <xref:System.Data.OleDb.OleDbDataAdapter> erstellt und einige ihrer Eigenschaften festgelegt.  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Bearbeiten von Daten (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dbDataAdapter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Veröffentlicht die durch den <see cref="T:System.Data.Common.DbDataAdapter" /> verwendeten nicht verwalteten Ressourcen und nimmt eine optionale Veröffentlichung der verwalteten Ressourcen vor.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberSignature Language="F#" Value="abstract member ExecuteBatch : unit -&gt; int&#xA;override this.ExecuteBatch : unit -&gt; int" Usage="dbDataAdapter.ExecuteBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt den aktuellen Batch aus.</summary>
        <returns>Der Rückgabewert des letzten Befehls im Batch.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>löst diese Methode <xref:System.NotSupportedException>aus. Klassen, die von Erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um Unterstützung für Batches bereitzustellen.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Diese Methode ist geschützt und ist für die Verwendung durch einen .NET Framework Datenanbieter konzipiert.  
  
Wenn eine Klasse, die von <see cref="T:System.Data.Common.DbDataAdapter" /> erbt, Batches unterstützt, überschreibt diese Klasse diese Methode, damit Benutzer einen Batch ausführen können. Eine Implementierung dieser Methode kombiniert die Befehle im Adapter in einem Batch, führt dann den Batch aus und gibt den Rückgabewert des Batches zurück.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Bearbeiten von Daten (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Füllt ein <see cref="T:System.Data.DataSet" /> oder eine <see cref="T:System.Data.DataTable" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <summary>Fügt Zeilen in <see cref="T:System.Data.DataSet" /> hinzu oder aktualisiert diese.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode ruft die Daten mithilfe einer SELECT-Anweisung aus der Datenquelle ab. Das <xref:System.Data.IDbConnection>-Objekt, das dem SELECT-Befehl zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die <xref:System.Data.IDbConnection> geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, bleibt Sie geöffnet.  
  
 Wenn beim Auffüllen der Datentabellen ein Fehler oder eine Ausnahme aufgetreten ist, verbleiben die Zeilen, die vor dem Auftreten des Fehlers hinzugefügt wurden, in den Datentabellen. Der restliche Vorgang wird abgebrochen.  
  
 Wenn ein Befehl keine Zeilen zurückgibt, werden dem <xref:System.Data.DataSet>keine Tabellen hinzugefügt, und es wird keine Ausnahme ausgelöst.  
  
 Wenn das <xref:System.Data.Common.DbDataAdapter>-Objekt beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten findet, werden die Namen für die nachfolgenden Spalten mit dem Muster "*ColumnName*1", "*ColumnName*2", "*ColumnName*3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw.  
  
 Wenn die angegebene Abfrage mehrere Ergebnisse zurückgibt, wird das Resultset für jede Zeile, die die Abfrage zurückgibt, in eine separate Tabelle eingefügt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Da keine Tabelle für eine Abfrage erstellt wird, die keine Zeilen zurückgibt, wenn Sie eine INSERT-Abfrage verarbeiten, auf die eine SELECT-Abfrage folgt, wird die für die SELECT-Abfrage erstellte Tabelle als "Table" benannt, da es sich um die erste erstellte Tabelle handelt. Anwendungen, die Spalten-und Tabellennamen verwenden, sollten sicherstellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 Wenn die SELECT-Anweisung zum Auffüllen der <xref:System.Data.DataSet> mehrere Ergebnisse zurückgibt, wie z. b. Batch-SQL-Anweisungen, werden alle nachfolgenden Ergebnisse übersprungen und nicht der <xref:System.Data.DataSet>hinzugefügt, wenn eines der Ergebnisse einen Fehler enthält.  
  
 Wenn Sie nachfolgende <xref:System.Data.Common.DbDataAdapter.Fill%2A> Aufrufe zum Aktualisieren des Inhalts der <xref:System.Data.DataSet>verwenden, müssen zwei Bedingungen erfüllt sein:  
  
1.  Die SQL-Anweisung sollte mit der Anweisung identisch sein, die anfänglich zum Auffüllen des <xref:System.Data.DataSet>verwendet wurde.  
  
2.  Die **Schlüssel** Spalten Informationen müssen vorhanden sein.  
  
 Wenn Primärschlüssel Informationen vorhanden sind, sind doppelte Zeilen abgestimmt und werden nur einmal in der <xref:System.Data.DataTable> angezeigt, die der <xref:System.Data.DataSet>entspricht. Primärschlüssel Informationen können entweder über <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>festgelegt werden, indem Sie die <xref:System.Data.DataTable.PrimaryKey%2A>-Eigenschaft der <xref:System.Data.DataTable>angeben oder indem Sie die <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>-Eigenschaft auf `AddWithKey`festlegen.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A> -Wert für die resultierende <xref:System.Data.DataTable>festgelegt. Sie müssen den Primärschlüssel explizit definieren, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Definieren von primär Schlüsseln](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, werden bei der Implementierung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework Datenanbieter für OLE DB Schema Informationen nur für das erste Ergebnis abgerufen. Um Schema Informationen für mehrere Ergebnisse abzurufen, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, wobei die <xref:System.Data.MissingSchemaAction> auf `AddWithKey`festgelegt ist.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Fill dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Der Name der <see cref="T:System.Data.DataTable" />, die für die Tabellenzuordnung verwendet werden soll.</param>
        <summary>Aktualisiert Zeilen in einem angegebenen Bereich des <see cref="T:System.Data.DataSet" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, die den <see cref="T:System.Data.DataTable" />-Namen verwendet.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode ruft Zeilen aus der Datenquelle mithilfe der SELECT-Anweisung ab, die durch eine zugeordnete <xref:System.Data.IDbDataAdapter.SelectCommand%2A> Eigenschaft angegeben wird. Das Verbindungs Objekt, das der SELECT-Anweisung zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die Verbindung geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, bleibt Sie geöffnet.  
  
 Der <xref:System.Data.Common.DbDataAdapter.Fill%2A> Vorgang fügt die Zeilen dann den Ziel <xref:System.Data.DataTable> Objekten im <xref:System.Data.DataSet>hinzu und erstellt die <xref:System.Data.DataTable> Objekte, wenn Sie nicht bereits vorhanden sind. Beim Erstellen von <xref:System.Data.DataTable> Objekten erstellt der <xref:System.Data.Common.DbDataAdapter.Fill%2A> Vorgang normalerweise nur Spaltennamen-Metadaten. Wenn die <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>-Eigenschaft jedoch auf `AddWithKey`festgelegt ist, werden auch die entsprechenden Primärschlüssel und Einschränkungen erstellt.  
  
 Wenn <xref:System.Data.Common.DbDataAdapter> beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten gefunden werden, werden die Namen für die nachfolgenden Spalten mithilfe des Musters "*ColumnName*1", "*ColumnName*2", "*ColumnName*3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn der <xref:System.Data.DataSet> werden mehrere Resultsets in eine separate Tabelle eingefügt.  
  
 Die Überladung von <xref:System.Data.Common.DbDataAdapter.Fill%2A>, die `DataTable` als Parameter annimmt, erhält nur das erste Ergebnis. Verwenden Sie eine Überladung von <xref:System.Data.Common.DbDataAdapter.Fill%2A>, die `DataSet` als Parameter annimmt, um mehrere Ergebnisse zu erhalten.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> mehrere <xref:System.Data.DataTable> Objekte enthält, deren Namen sich nur in Groß-/Kleinschreibung In solchen Fällen führt <xref:System.Data.Common.DbDataAdapter.Fill%2A> einen Vergleich durch, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle, wenn keine genaue Übereinstimmung vorliegt. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird und die <xref:System.Data.DataSet> nur eine <xref:System.Data.DataTable> enthält, deren Name sich nur in der Groß-/Kleinschreibung unterscheidet, wird diese <xref:System.Data.DataTable> aktualisiert. In diesem Szenario wird beim Vergleich die Groß-/Kleinschreibung nicht beachtet. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode kann mehrmals für denselben <xref:System.Data.DataTable>verwendet werden. Wenn ein Primärschlüssel vorhanden ist, werden eingehende Zeilen mit übereinstimmenden Zeilen zusammengeführt, die bereits vorhanden sind. Wenn kein Primärschlüssel vorhanden ist, werden eingehende Zeilen an den <xref:System.Data.DataTable>angefügt.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A> -Wert für die resultierende <xref:System.Data.DataTable>festgelegt. Sie müssen den Primärschlüssel explizit definieren, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Definieren von primär Schlüsseln](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, ruft die Implementierung von <xref:System.Data.Common.DbDataAdapter.Fill%2A> und <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für einen .NET Framework Datenanbieter Schema Informationen nur für das erste Ergebnis ab.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <block subset="none" type="overrides"><para>Diese Überladung der <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />-Methode ist geschützt und wurde für die Verwendung durch einen .NET Framework Datenanbieter konzipiert.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <summary>Aktualisiert Zeilen im <see cref="T:System.Data.DataSet" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, die den Namen des <see cref="T:System.Data.DataSet" /> und den Namen der <see cref="T:System.Data.DataTable" /> verwenden.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode ruft die Daten mithilfe einer SELECT-Anweisung aus der Datenquelle ab. Das <xref:System.Data.IDbConnection>-Objekt, das dem SELECT-Befehl zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die <xref:System.Data.IDbConnection> geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, bleibt Sie geöffnet.  
  
 Wenn ein Befehl keine Zeilen zurückgibt, werden dem <xref:System.Data.DataSet>keine Tabellen hinzugefügt, und es wird keine Ausnahme ausgelöst.  
  
 Wenn die <xref:System.Data.Common.DbDataAdapter> Objekt trifft doppelte Spalten beim Auffüllen einer <xref:System.Data.DataTable>, generiert er Namen für die nachfolgenden Spalten, die mit dem Muster "columnname1", "columnname2", "Spaltenname3" usw. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw.  
  
 Wenn die angegebene Abfrage mehrere Ergebnisse zurückgibt, wird jedes Resultset in einer separaten Tabelle abgelegt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Da keine Tabelle für eine Abfrage erstellt wird, die keine Zeilen zurückgibt, wird die für die SELECT-Abfrage erstellte Tabelle, wenn Sie eine INSERT-Abfrage gefolgt von einer SELECT-Abfrage verarbeiten, als "Table" bezeichnet, da es sich um die erste erstellte Tabelle handelt. Anwendungen, die Spalten-und Tabellennamen verwenden, sollten sicherstellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> mehrere <xref:System.Data.DataTable> Objekte enthält, deren Namen sich nur in Groß-/Kleinschreibung In solchen Fällen führt <xref:System.Data.Common.DbDataAdapter.Fill%2A> einen Vergleich durch, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle, wenn keine genaue Übereinstimmung vorliegt. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird und die <xref:System.Data.DataSet> nur eine <xref:System.Data.DataTable> enthält, deren Name sich nur in der Groß-/Kleinschreibung unterscheidet, wird diese <xref:System.Data.DataTable> aktualisiert. In diesem Szenario wird beim Vergleich die Groß-/Kleinschreibung nicht beachtet. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Wenn beim Auffüllen der Datentabellen ein Fehler oder eine Ausnahme aufgetreten ist, verbleiben die Zeilen, die vor dem Auftreten des Fehlers hinzugefügt wurden, in den Datentabellen. Der restliche Vorgang wird abgebrochen.  
  
 Wenn die SELECT-Anweisung zum Auffüllen der <xref:System.Data.DataSet> mehrere Ergebnisse zurückgibt, wie z. b. eine Batch SQL-Anweisung, beachten Sie Folgendes:  
  
-   Wenn eines der Ergebnisse einen Fehler enthält, werden alle nachfolgenden Ergebnisse übersprungen und der <xref:System.Data.DataSet>nicht hinzugefügt.  
  
 Wenn Sie nachfolgende <xref:System.Data.Common.DbDataAdapter.Fill%2A> Aufrufe zum Aktualisieren des Inhalts der <xref:System.Data.DataSet>verwenden, müssen zwei Bedingungen erfüllt sein:  
  
1.  Die SQL-Anweisung sollte mit der Anweisung identisch sein, die anfänglich zum Auffüllen des <xref:System.Data.DataSet>verwendet wurde.  
  
2.  Die **Schlüssel** Spalten Informationen müssen vorhanden sein. Wenn Primärschlüssel Informationen vorhanden sind, sind doppelte Zeilen abgestimmt und werden nur einmal in der <xref:System.Data.DataTable> angezeigt, die der <xref:System.Data.DataSet>entspricht. Primärschlüssel Informationen können entweder über <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>festgelegt werden, indem Sie die <xref:System.Data.DataTable.PrimaryKey%2A>-Eigenschaft der <xref:System.Data.DataTable>angeben oder indem Sie die <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>-Eigenschaft auf `AddWithKey`festlegen.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A> -Wert für die resultierende <xref:System.Data.DataTable>festgelegt. Sie müssen den Primärschlüssel explizit definieren, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Definieren von primär Schlüsseln](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, werden bei der Implementierung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework Datenanbieter für OLE DB Schema Informationen nur für das erste Ergebnis abgerufen. Um Schema Informationen für mehrere Ergebnisse abzurufen, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, wobei die <xref:System.Data.MissingSchemaAction> auf `AddWithKey`festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse (<xref:System.Data.OleDb.OleDbDataAdapter>) verwendet, um eine <xref:System.Data.DataSet> mit Zeilen aus der Categories-Tabelle zu füllen. In diesem Beispiel wird davon ausgegangen, dass Sie eine <xref:System.Data.OleDb.OleDbDataAdapter> und eine <xref:System.Data.DataSet>erstellt haben.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">Die Quelltabelle ist ungültig.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass Sie die <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />-Methode der Basisklasse aufzurufen.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDataReader ^ dataReader);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDataReader -&gt; int" Usage="dbDataAdapter.Fill (dataTable, dataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataTable">Ein <see cref="T:System.Data.DataTable" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <param name="dataReader">Der Name des <see cref="T:System.Data.IDataReader" />-Objekts.</param>
        <summary>Aktualisiert Zeilen in einer <see cref="T:System.Data.DataTable" /> oder fügt Zeilen hinzu, um anhand der angegebenen Namen <see cref="T:System.Data.DataTable" /> und <see cref="T:System.Data.IDataReader" /> Übereinstimmung mit den Zeilen in der Datenquelle zu erzielen.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataTable" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Ein <see cref="T:System.Data.DataTable" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <param name="command">Die SQL-SELECT-Anweisung, mit der Zeilen aus der Datenquelle abgerufen werden.</param>
        <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Aktualisiert Zeilen in einer <see cref="T:System.Data.DataTable" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, wobei die angegebenen Werte für <see cref="T:System.Data.DataTable" />, <see cref="T:System.Data.IDbCommand" /> und <see cref="T:System.Data.CommandBehavior" /> verwendet werden.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataTable" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode ruft Zeilen aus der Datenquelle mithilfe der SELECT-Anweisung ab, die durch eine zugeordnete <xref:System.Data.IDbDataAdapter.SelectCommand%2A> Eigenschaft angegeben wird. Das Verbindungs Objekt, das der SELECT-Anweisung zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die Verbindung geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, bleibt Sie geöffnet.  
  
 Der <xref:System.Data.Common.DbDataAdapter.Fill%2A> Vorgang fügt dann die Zeilen dem angegebenen Ziel <xref:System.Data.DataTable> Objekt im <xref:System.Data.DataSet>hinzu und erstellt das <xref:System.Data.DataTable> Objekt, wenn es nicht bereits vorhanden ist. Beim Erstellen eines <xref:System.Data.DataTable> Objekts erstellt der <xref:System.Data.Common.DbDataAdapter.Fill%2A> Vorgang normalerweise nur Spaltennamen-Metadaten. Wenn die <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>-Eigenschaft jedoch auf `AddWithKey`festgelegt ist, werden auch die entsprechenden Primärschlüssel und Einschränkungen erstellt.  
  
 Wenn das <xref:System.Data.Common.DbDataAdapter>-Objekt beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten findet, werden die Namen für die nachfolgenden Spalten mithilfe des Musters "*ColumnName*1", "*ColumnName*2", "*ColumnName*3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw.  
  
 Die Überladung von <xref:System.Data.Common.DbDataAdapter.Fill%2A>, die `DataTable` als Parameter annimmt, erhält nur das erste Ergebnis. Verwenden Sie eine Überladung von <xref:System.Data.Common.DbDataAdapter.Fill%2A>, die `DataSet` als Parameter annimmt, um mehrere Ergebnisse zu erhalten.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode kann mehrmals für denselben <xref:System.Data.DataTable>verwendet werden. Wenn ein Primärschlüssel vorhanden ist, werden eingehende Zeilen mit übereinstimmenden Zeilen zusammengeführt, die bereits vorhanden sind. Wenn kein Primärschlüssel vorhanden ist, werden eingehende Zeilen an den <xref:System.Data.DataTable>angefügt.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A> -Wert für die resultierende <xref:System.Data.DataTable>festgelegt. Sie müssen den Primärschlüssel explizit definieren, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Definieren von primär Schlüsseln](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, werden bei der Implementierung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework Datenanbieter für OLE DB Schema Informationen nur für das erste Ergebnis abgerufen. Um Schema Informationen für mehrere Ergebnisse abzurufen, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, wobei die <xref:System.Data.MissingSchemaAction> auf `AddWithKey`festgelegt ist.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Diese Überladung der <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />-Methode ist geschützt und wurde für die Verwendung durch einen .NET Framework Datenanbieter konzipiert.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="override this.Fill : int * int * System.Data.DataTable[] -&gt; int" Usage="dbDataAdapter.Fill (startRecord, maxRecords, dataTables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">Die nullbasierte Datensatznummer, bei der begonnen wird.</param>
        <param name="maxRecords">Die maximale Anzahl der abzurufenden Datensätze.</param>
        <param name="dataTables">Die <see cref="T:System.Data.DataTable" />-Objekte, die aus der Datenquelle gefüllt werden sollen.</param>
        <summary>Aktualisiert Zeilen in einer <see cref="T:System.Data.DataTable" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen. Dabei wird mit dem angegebenen Datensatz begonnen, und es werden bis zur angegebenen Anzahl an Datensätzen abgerufen.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataTable" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dieser Wert schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DataAdapter.Fill%2A>-Methode ruft Zeilen aus der Datenquelle mithilfe der SELECT-Anweisung ab, die durch eine zugeordnete <xref:System.Data.IDbDataAdapter.SelectCommand%2A> Eigenschaft angegeben wird. Das Verbindungs Objekt, das der SELECT-Anweisung zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die Verbindung geschlossen wird, bevor <xref:System.Data.Common.DataAdapter.Fill%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen, und dann wird Sie geschlossen. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DataAdapter.Fill%2A> aufgerufen wird, bleibt Sie geöffnet.  
  
 Der <xref:System.Data.Common.DataAdapter.Fill%2A> Vorgang fügt die Zeilen dann den Ziel <xref:System.Data.DataTable> Objekten im <xref:System.Data.DataSet>hinzu und erstellt die <xref:System.Data.DataTable> Objekte, wenn Sie nicht bereits vorhanden sind. Beim Erstellen von <xref:System.Data.DataTable> Objekten erstellt der <xref:System.Data.Common.DataAdapter.Fill%2A> Vorgang normalerweise nur Spaltennamen-Metadaten. Wenn die <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>-Eigenschaft jedoch auf `AddWithKey`festgelegt ist, werden auch die entsprechenden Primärschlüssel und Einschränkungen erstellt.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A> -Wert für die resultierende <xref:System.Data.DataTable>festgelegt. Sie müssen den Primärschlüssel explizit definieren, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Definieren von primär Schlüsseln](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Wenn der Daten Adapter beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten erkennt, generiert er mithilfe des Musters "columnname1", "columnname2", "columnname3" usw. Namen für die nachfolgenden Spalten. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn der <xref:System.Data.DataSet>mehrere Resultsets hinzugefügt werden, wird jedes Resultset in einer separaten Tabelle abgelegt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Anwendungen, die Spalten-und Tabellennamen verwenden, sollten sicherstellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 Wenn die SELECT-Anweisung zum Auffüllen der <xref:System.Data.DataSet> mehrere Ergebnisse zurückgibt, wie z. b. eine Batch-SQL-Anweisung, werden alle nachfolgenden Ergebnisse übersprungen und dem <xref:System.Data.DataSet>nicht hinzugefügt, wenn eines der Ergebnisse einen Fehler enthält.  
  
 Die <xref:System.Data.Common.DataAdapter.Fill%2A>-Methode kann mehrmals für denselben <xref:System.Data.DataTable>verwendet werden. Wenn ein Primärschlüssel vorhanden ist, werden eingehende Zeilen mit übereinstimmenden Zeilen zusammengeführt, die bereits vorhanden sind. Wenn kein Primärschlüssel vorhanden ist, werden eingehende Zeilen an den <xref:System.Data.DataTable>angefügt.  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, werden bei der Implementierung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework Datenanbieter für OLE DB Schema Informationen nur für das erste Ergebnis abgerufen. Um Schema Informationen für mehrere Ergebnisse abzurufen, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, wobei die <xref:System.Data.MissingSchemaAction> auf `AddWithKey`festgelegt ist.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <param name="startRecord">Die nullbasierte Datensatznummer, bei der begonnen wird.</param>
        <param name="maxRecords">Die maximale Anzahl der abzurufenden Datensätze.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <summary>Aktualisiert Zeilen in einem angegebenen Bereich des <see cref="T:System.Data.DataSet" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, die den Namen des <see cref="T:System.Data.DataSet" /> und den Namen der <see cref="T:System.Data.DataTable" /> verwenden.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein `maxRecords` Wert von 0 ruft alle Datensätze ab, die nach dem Start Datensatz gefunden wurden. Wenn `maxRecords` größer als die Anzahl der verbleibenden Zeilen ist, werden nur die verbleibenden Zeilen zurückgegeben, und es wird kein Fehler ausgegeben.  
  
 Wenn der entsprechende SELECT-Befehl eine-Anweisung ist, die mehrere Ergebnisse zurückgibt, wird <xref:System.Data.Common.DbDataAdapter.Fill%2A> nur `maxRecords` auf das erste Ergebnis anwenden.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode ruft die Daten mithilfe einer SELECT-Anweisung aus der Datenquelle ab. Das <xref:System.Data.IDbConnection>-Objekt, das der SELECT-Anweisung zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die <xref:System.Data.IDbConnection> geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, bleibt Sie geöffnet.  
  
 Wenn ein Befehl keine Zeilen zurückgibt, werden dem <xref:System.Data.DataSet>keine Tabellen hinzugefügt, es wird jedoch keine Ausnahme ausgelöst.  
  
 Wenn das <xref:System.Data.Common.DbDataAdapter>-Objekt beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten findet, werden die Namen für die nachfolgenden Spalten mithilfe des Musters "*ColumnName*1", "*ColumnName*2", "*ColumnName*3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw.  
  
 Wenn die angegebene Abfrage mehrere Ergebnisse zurückgibt, wird jedes Resultset in einer separaten Tabelle abgelegt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Da keine Tabelle für eine Abfrage erstellt wird, die keine Zeilen zurückgibt, wenn Sie eine INSERT-Abfrage verarbeiten, auf die eine SELECT-Abfrage folgt, wird die für die SELECT-Abfrage erstellte Tabelle als "Table" benannt, da es sich um die erste erstellte Tabelle handelt. Anwendungen, die Spalten-und Tabellennamen verwenden, sollten sicherstellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> mehrere <xref:System.Data.DataTable> Objekte enthält, deren Namen sich nur in Groß-/Kleinschreibung In solchen Fällen führt <xref:System.Data.Common.DbDataAdapter.Fill%2A> einen Vergleich durch, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle, wenn keine genaue Übereinstimmung vorliegt. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird und die <xref:System.Data.DataSet> nur eine <xref:System.Data.DataTable> enthält, deren Name sich nur in der Groß-/Kleinschreibung unterscheidet, wird diese <xref:System.Data.DataTable> aktualisiert. In diesem Szenario wird beim Vergleich die Groß-/Kleinschreibung nicht beachtet. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Wenn beim Auffüllen der Datentabellen ein Fehler oder eine Ausnahme aufgetreten ist, verbleiben die Zeilen, die vor dem Auftreten des Fehlers hinzugefügt wurden, in den Datentabellen. Der restliche Vorgang wird abgebrochen.  
  
 Wenn die SELECT-Anweisung zum Auffüllen der <xref:System.Data.DataSet> mehrere Ergebnisse zurückgibt, wie z. b. Batch-SQL-Anweisungen, beachten Sie Folgendes:  
  
-   Wenn Sie mehrere Ergebnisse aus einer Batch SQL-Anweisung verarbeiten, gilt `maxRecords` nur für das erste Ergebnis. Das gleiche gilt für Zeilen, die die in Kapitel unterteilten Ergebnisse (.NET Framework Datenanbieter nur für OLE DB) enthalten. Das Ergebnis der obersten Ebene wird durch `maxRecords`eingeschränkt, aber alle untergeordneten Zeilen werden hinzugefügt.  
  
-   Wenn eines der Ergebnisse einen Fehler enthält, werden alle nachfolgenden Ergebnisse übersprungen und der <xref:System.Data.DataSet>nicht hinzugefügt.  
  
 Wenn Sie nachfolgende <xref:System.Data.Common.DbDataAdapter.Fill%2A> Aufrufe zum Aktualisieren des Inhalts der <xref:System.Data.DataSet>verwenden, müssen zwei Bedingungen erfüllt sein:  
  
1.  Die SQL-Anweisung sollte mit der Anweisung identisch sein, die anfänglich zum Auffüllen des <xref:System.Data.DataSet>verwendet wurde.  
  
2.  Die **Schlüssel** Spalten Informationen müssen vorhanden sein.  
  
 Wenn Primärschlüssel Informationen vorhanden sind, werden doppelte Zeilen abgestimmt und nur einmal in der <xref:System.Data.DataTable> angezeigt, die der <xref:System.Data.DataSet>entspricht. Primärschlüssel Informationen können entweder über <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>festgelegt werden, indem Sie die <xref:System.Data.DataTable.PrimaryKey%2A>-Eigenschaft der <xref:System.Data.DataTable>angeben oder indem Sie die <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>-Eigenschaft auf `AddWithKey`festlegen.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A> -Wert für die resultierende <xref:System.Data.DataTable>festgelegt. Sie müssen den Primärschlüssel explizit definieren, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Definieren von primär Schlüsseln](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, werden bei der Implementierung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework Datenanbieter für OLE DB Schema Informationen nur für das erste Ergebnis abgerufen. Um Schema Informationen für mehrere Ergebnisse abzurufen, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, wobei die <xref:System.Data.MissingSchemaAction> auf `AddWithKey`festgelegt ist.  
  
> [!NOTE]
>  Der `DataSet` enthält nicht mehr als die Anzahl der Datensätze, die durch `maxRecords`angegeben werden. Allerdings wird das gesamte von der Abfrage generierte Resultset weiterhin vom Server zurückgegeben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse (<xref:System.Data.OleDb.OleDbDataAdapter>) verwendet, um eine <xref:System.Data.DataSet> mit 15 Zeilen, beginnend bei Zeile 10, aus der **Categories** -Tabelle auszufüllen. In diesem Beispiel wird davon ausgegangen, dass Sie eine <xref:System.Data.OleDb.OleDbDataAdapter> und eine <xref:System.Data.DataSet>erstellt haben.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.  
  
 - oder -  
  
 Die connection ist ungültig.</exception>
        <exception cref="T:System.InvalidCastException">Die Verbindung konnte nicht gefunden werden.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="startRecord" />-Parameter ist kleiner als 0.  
  
- oder - 
Der <paramref name="maxRecords" />-Parameter ist kleiner als 0.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass Sie die <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />-Methode der Basisklasse aufzurufen.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, string srcTable, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable, System::Data::IDataReader ^ dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string * System.Data.IDataReader * int * int -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable, dataReader, startRecord, maxRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="srcTable" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="2" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="startRecord" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <param name="srcTable">Der Name der <see cref="T:System.Data.DataTable" />, die für die Tabellenzuordnung verwendet werden soll.</param>
        <param name="dataReader">Der Name des <see cref="T:System.Data.IDataReader" />-Objekts.</param>
        <param name="startRecord">Die nullbasierte Datensatznummer, bei der begonnen wird.</param>
        <param name="maxRecords">Die maximale Anzahl der abzurufenden Datensätze.</param>
        <summary>Aktualisiert Zeilen in einem angegebenen Bereich im <see cref="T:System.Data.DataSet" /> oder fügt Zeilen hinzu, um anhand der Namen <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataTable" /> und <see cref="T:System.Data.IDataReader" /> Übereinstimmung mit den Zeilen in der Datenquelle zu erzielen.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable[] * int * int * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTables, startRecord, maxRecords, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startRecord" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dataTables">Die <see cref="T:System.Data.DataTable" />-Objekte, die aus der Datenquelle gefüllt werden sollen.</param>
        <param name="startRecord">Die nullbasierte Datensatznummer, bei der begonnen wird.</param>
        <param name="maxRecords">Die maximale Anzahl der abzurufenden Datensätze.</param>
        <param name="command">Der <see cref="T:System.Data.IDbCommand" />, der ausgeführt wird, um die <see cref="T:System.Data.DataTable" />-Objekte zu füllen.</param>
        <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Aktualisiert Zeilen in einem angegebenen Bereich des <see cref="T:System.Data.DataSet" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, die den Namen des <see cref="T:System.Data.DataSet" /> und den Namen der <see cref="T:System.Data.DataTable" /> verwenden.</summary>
        <returns>Die Anzahl der Zeilen, die in den Datentabellen hinzugefügt bzw. darin aktualisiert wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein `maxRecords` Wert von 0 ruft alle Datensätze ab, die nach dem Start Datensatz gefunden wurden. Wenn `maxRecords` größer als die Anzahl der verbleibenden Zeilen ist, werden nur die verbleibenden Zeilen zurückgegeben, und es wird kein Fehler ausgegeben.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode ruft die Daten mithilfe einer SELECT-Anweisung aus der Datenquelle ab. Das <xref:System.Data.IDbConnection>-Objekt, das der SELECT-Anweisung zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die <xref:System.Data.IDbConnection> geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, bleibt Sie geöffnet.  
  
 Wenn ein Befehl keine Zeilen zurückgibt, werden dem <xref:System.Data.DataSet>keine Tabellen hinzugefügt, es wird jedoch keine Ausnahme ausgelöst.  
  
 Wenn das <xref:System.Data.Common.DbDataAdapter>-Objekt beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten findet, werden die Namen für die nachfolgenden Spalten mithilfe des Musters "*ColumnName*1", "*ColumnName*2", "*ColumnName*3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw.  
  
 Wenn die angegebene Abfrage mehrere Ergebnisse zurückgibt, wird jedes Resultset in einer separaten Tabelle abgelegt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Da keine Tabelle für eine Abfrage erstellt wird, die keine Zeilen zurückgibt, wird die für die SELECT-Abfrage erstellte Tabelle, wenn Sie eine INSERT-Abfrage gefolgt von einer SELECT-Abfrage verarbeiten, als "Table" bezeichnet, da es sich um die erste erstellte Tabelle handelt. Anwendungen, die Spalten-und Tabellennamen verwenden, sollten sicherstellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> mehrere <xref:System.Data.DataTable> Objekte enthält, deren Namen sich nur in Groß-/Kleinschreibung In solchen Fällen führt <xref:System.Data.Common.DbDataAdapter.Fill%2A> einen Vergleich durch, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle, wenn keine genaue Übereinstimmung vorliegt. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird und die <xref:System.Data.DataSet> nur eine <xref:System.Data.DataTable> enthält, deren Name sich nur in der Groß-/Kleinschreibung unterscheidet, wird diese <xref:System.Data.DataTable> aktualisiert. In diesem Szenario wird beim Vergleich die Groß-/Kleinschreibung nicht beachtet. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Wenn beim Auffüllen der Datentabellen ein Fehler oder eine Ausnahme aufgetreten ist, verbleiben die Zeilen, die vor dem Auftreten des Fehlers hinzugefügt wurden, in den Datentabellen. Der restliche Vorgang wird abgebrochen.  
  
 Wenn die SELECT-Anweisung zum Auffüllen der <xref:System.Data.DataTable> Objekten mehrere Ergebnisse zurückgibt, wie z. b. eine Batch SQL-Anweisung, beachten Sie Folgendes:  
  
-   Wenn Sie mehrere Ergebnisse aus einer Batch SQL-Anweisung verarbeiten, gilt `maxRecords` nur für das erste Ergebnis. Das gleiche gilt für Zeilen, die die in Kapitel unterteilten Ergebnisse (.NET Framework Datenanbieter nur für OLE DB) enthalten. Das Ergebnis der obersten Ebene wird durch `maxRecords`eingeschränkt, aber alle untergeordneten Zeilen werden hinzugefügt.  
  
-   Wenn eines der Ergebnisse einen Fehler enthält, werden alle nachfolgenden Ergebnisse übersprungen.  
  
> [!NOTE]
>  Der `DataSet` enthält nicht mehr als die Anzahl der Datensätze, die durch `maxRecords`angegeben werden. Allerdings wird das gesamte Resultset, das von der Abfrage generiert wird, weiterhin vom Server zurückgegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.  
  
 - oder -  
  
 Die connection ist ungültig.</exception>
        <exception cref="T:System.InvalidCastException">Die Verbindung konnte nicht gefunden werden.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="startRecord" />-Parameter ist kleiner als 0.  
  
- oder - 
Der <paramref name="maxRecords" />-Parameter ist kleiner als 0.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass Sie die <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />-Methode der Basisklasse aufzurufen.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, das mit Datensätzen und bei Bedarf mit einem Schema gefüllt wird.</param>
        <param name="startRecord">Die nullbasierte Datensatznummer, bei der begonnen wird.</param>
        <param name="maxRecords">Die maximale Anzahl der abzurufenden Datensätze.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <param name="command">Die SQL-SELECT-Anweisung, mit der Zeilen aus der Datenquelle abgerufen werden.</param>
        <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Aktualisiert Zeilen in einem angegebenen Bereich im <see cref="T:System.Data.DataSet" /> oder fügt Zeilen hinzu, um Übereinstimmung mit den Zeilen in der Datenquelle herzustellen, die den Namen des <see cref="T:System.Data.DataSet" />, den Namen der Quelltabelle, die Befehlszeichenfolge und das Befehlsverhalten verwenden.</summary>
        <returns>Die Anzahl der Zeilen, die dem <see cref="T:System.Data.DataSet" /> erfolgreich hinzufügt bzw. darin aktualisiert wurden. Dies schließt keine Zeilen ein, die von Anweisungen betroffen sind, die keine Zeilen zurückgeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode ruft Zeilen aus der Datenquelle mithilfe der SELECT-Anweisung ab, die durch eine zugeordnete <xref:System.Data.IDbDataAdapter.SelectCommand%2A> Eigenschaft angegeben wird. Das Verbindungs Objekt, das der SELECT-Anweisung zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die Verbindung geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird, bleibt Sie geöffnet.  
  
 Der <xref:System.Data.Common.DbDataAdapter.Fill%2A> Vorgang fügt die Zeilen dann den Ziel <xref:System.Data.DataTable> Objekten im <xref:System.Data.DataSet>hinzu und erstellt die <xref:System.Data.DataTable> Objekte, wenn Sie nicht bereits vorhanden sind. Beim Erstellen von <xref:System.Data.DataTable> Objekten erstellt der <xref:System.Data.Common.DbDataAdapter.Fill%2A> Vorgang normalerweise nur Spaltennamen-Metadaten. Wenn die <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>-Eigenschaft jedoch auf `AddWithKey`festgelegt ist, werden auch die entsprechenden Primärschlüssel und Einschränkungen erstellt.  
  
 Wenn <xref:System.Data.Common.DbDataAdapter> beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten gefunden werden, werden die Namen für die nachfolgenden Spalten mithilfe des Musters "*ColumnName*1", "*ColumnName*2", "*ColumnName*3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn der <xref:System.Data.DataSet> werden mehrere Resultsets in eine separate Tabelle eingefügt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Anwendungen, die Spalten-und Tabellennamen verwenden, sollten sicherstellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> mehrere <xref:System.Data.DataTable> Objekte enthält, deren Namen sich nur in Groß-/Kleinschreibung In solchen Fällen führt <xref:System.Data.Common.DbDataAdapter.Fill%2A> einen Vergleich durch, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle, wenn keine genaue Übereinstimmung vorliegt. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Fill%2A> aufgerufen wird und die <xref:System.Data.DataSet> nur eine <xref:System.Data.DataTable> enthält, deren Name sich nur in der Groß-/Kleinschreibung unterscheidet, wird diese <xref:System.Data.DataTable> aktualisiert. In diesem Szenario wird beim Vergleich die Groß-/Kleinschreibung nicht beachtet. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode kann mehrmals für denselben <xref:System.Data.DataTable>verwendet werden. Wenn ein Primärschlüssel vorhanden ist, werden eingehende Zeilen mit übereinstimmenden Zeilen zusammengeführt, die bereits vorhanden sind. Wenn kein Primärschlüssel vorhanden ist, werden eingehende Zeilen an den <xref:System.Data.DataTable>angefügt.  
  
 Wenn vom `SelectCommand` die Ergebnisse eines OUTER JOIN zurückgegeben werden, wird vom `DataAdapter` kein <xref:System.Data.DataTable.PrimaryKey%2A> -Wert für die resultierende <xref:System.Data.DataTable>festgelegt. Sie müssen den Primärschlüssel explizit definieren, um sicherzustellen, dass doppelte Zeilen ordnungsgemäß aufgelöst werden. Weitere Informationen finden Sie unter [Definieren von primär Schlüsseln](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, ruft die Implementierung von <xref:System.Data.Common.DbDataAdapter.Fill%2A> und <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für einen .NET Framework Datenanbieter Schema Informationen nur für das erste Ergebnis ab.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="startRecord" />-Parameter ist kleiner als 0.  
  
- oder - 
Der <paramref name="maxRecords" />-Parameter ist kleiner als 0.</exception>
        <block subset="none" type="overrides"><para>Diese Überladung der <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />-Methode ist geschützt und wurde für die Verwendung durch einen .NET Framework Datenanbieter konzipiert.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.FillCommandBehavior : System.Data.CommandBehavior with get, set" Usage="System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Verhalten des Befehls für das Füllen des Datenadapters ab oder dieses legt.</summary>
        <value>Das <see cref="T:System.Data.CommandBehavior" /> des Befehls für das Füllen des Datenadapters.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillError">
      <MemberSignature Language="C#" Value="public event System.Data.FillErrorEventHandler FillError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.FillErrorEventHandler FillError" />
      <MemberSignature Language="DocId" Value="E:System.Data.Common.DbDataAdapter.FillError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FillError As FillErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::FillErrorEventHandler ^ FillError;" />
      <MemberSignature Language="F#" Value="member this.FillError : System.Data.FillErrorEventHandler " Usage="member this.FillError : System.Data.FillErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbDataAdapter_FillError")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.FillErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wird zurückgegeben, wenn während eines Füllvorgangs ein Fehler auftritt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt einem <see cref="T:System.Data.DataTable" /> eine <see cref="T:System.Data.DataSet" /> hinzu und konfiguriert das Schema so, dass es dem Schema in der Datenquelle entspricht.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, in das das Schema eingefügt werden soll.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte, die angeben, wie das Schema eingefügt wird.</param>
        <summary>Fügt eine <see cref="T:System.Data.DataTable" /> namens „Tabelle“ zum angegebenen <see cref="T:System.Data.DataSet" /> hinzu und konfiguriert das Schema auf der Grundlage des angegebenen <see cref="T:System.Data.SchemaType" /> so, dass es mit dem Schema in der Datenquelle übereinstimmt.</summary>
        <returns>Ein Verweis auf eine Auflistung von <see cref="T:System.Data.DataTable" />-Objekten, die dem <see cref="T:System.Data.DataSet" /> hinzugefügt wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft die Schema Informationen mithilfe des-<xref:System.Data.IDbDataAdapter.SelectCommand%2A>aus der Datenquelle ab.  
  
 Ein <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vorgang fügt dem Ziel <xref:System.Data.DataSet>eine <xref:System.Data.DataTable> hinzu. Anschließend werden dem <xref:System.Data.DataColumnCollection> der <xref:System.Data.DataTable>Spalten hinzugefügt, und die folgenden <xref:System.Data.DataColumn> Eigenschaften werden konfiguriert, wenn Sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Sie müssen <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separat festlegen.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> konfiguriert auch die Eigenschaften <xref:System.Data.DataTable.PrimaryKey%2A> und <xref:System.Data.DataTable.Constraints%2A> gemäß den folgenden Regeln:  
  
-   Wenn eine oder mehrere Primärschlüssel Spalten von der <xref:System.Data.IDbDataAdapter.SelectCommand%2A>zurückgegeben werden, werden Sie als Primärschlüssel Spalten für die <xref:System.Data.DataTable>verwendet.  
  
-   Wenn keine Primärschlüssel Spalten zurückgegeben werden, aber eindeutige Spalten sind, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn, und nur wenn, wenn alle eindeutigen Spalten keine NULL-Werte zulassen. Wenn eine der Spalten NULL-Werte zulässt, wird der <xref:System.Data.ConstraintCollection>ein <xref:System.Data.UniqueConstraint> hinzugefügt, die <xref:System.Data.DataTable.PrimaryKey%2A>-Eigenschaft ist jedoch nicht festgelegt.  
  
-   Wenn sowohl Primärschlüssel Spalten als auch eindeutige Spalten zurückgegeben werden, werden die Primärschlüssel Spalten als Primärschlüssel Spalten für die <xref:System.Data.DataTable>verwendet.  
  
 Beachten Sie, dass der <xref:System.Data.ConstraintCollection> Primärschlüssel und UNIQUE-Einschränkungen gemäß den vorangehenden Regeln hinzugefügt werden, andere Einschränkungs Typen jedoch nicht hinzugefügt werden.  
  
 Wenn ein eindeutiger gruppierter Index für eine Spalte oder Spalten in einer SQL Server Tabelle definiert ist und die PRIMARY KEY-Einschränkung für einen separaten Satz von Spalten definiert ist, werden die Namen der Spalten im gruppierten Index zurückgegeben. Um die Namen oder Namen der Primärschlüssel Spalten zurückzugeben, verwenden Sie einen Abfrage Hinweis mit der SELECT-Anweisung, die den Namen des Primärschlüssel Indexes angibt. Weitere Informationen zum Angeben von Abfrage hinweisen finden Sie unter [Query Hint (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Primärschlüssel Informationen werden während <xref:System.Data.Common.DbDataAdapter.Fill%2A> verwendet, um Zeilen zu suchen und zu ersetzen, deren Schlüssel Spalten einander entsprechen. Wenn dies nicht das gewünschte Verhalten ist, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, ohne Schema Informationen anzufordern.  
  
 Wenn <xref:System.Data.IDataAdapter> beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten gefunden werden, werden die Namen für die nachfolgenden Spalten mithilfe des Musters "*ColumnName*1", "*ColumnName*2", "*ColumnName*3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn der <xref:System.Data.DataSet> werden mehrere Resultsets in eine separate Tabelle eingefügt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Anwendungen, die Spalten-und Tabellennamen verwenden, sollten sicherstellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 Das <xref:System.Data.IDbConnection>-Objekt, das dem SELECT-Befehl zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet werden. Wenn die <xref:System.Data.IDbConnection> geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird, bleibt sie offen.  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, werden bei der Implementierung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework Datenanbieter für OLE DB Schema Informationen nur für das erste Ergebnis abgerufen. Um Schema Informationen für mehrere Ergebnisse abzurufen, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, wobei die <xref:System.Data.MissingSchemaAction> auf `AddWithKey`festgelegt ist.  
  
 Bei der Verwendung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> fügt der .NET Framework-Datenanbieter für SQL Server eine FOR BROWSE-Klausel an die ausgeführte Anweisung an. Der Benutzer muss mögliche Nebeneffekte beachten, z. B. Beeinträchtigungen bei der Verwendung von SET FMTONLY ON-Anweisungen. Weitere Informationen finden Sie unter [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse (<xref:System.Data.SqlClient.SqlDataAdapter>) verwendet, um eine <xref:System.Data.DataSet> mit dem Schema zu füllen, und es wird ein <xref:System.Data.DataSet>zurückgegeben.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">Die <see cref="T:System.Data.DataTable" />, die mit dem Schema aus der Datenquelle gefüllt werden soll.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte.</param>
        <summary>Konfiguriert das Schema der angegebenen <see cref="T:System.Data.DataTable" /> auf der Grundlage des angegebenen <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>Eine <see cref="T:System.Data.DataTable" />, die die von der Datenquelle zurückgegebenen Schemainformationen enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>-Methode ruft das Schema mithilfe der <xref:System.Data.IDbDataAdapter.SelectCommand%2A>aus der Datenquelle ab. Das Verbindungs Objekt, das dem <xref:System.Data.IDbDataAdapter.SelectCommand%2A> zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die Verbindung geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird, bleibt Sie geöffnet.  
  
 Ein <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vorgang gibt eine <xref:System.Data.DataTable>zurück. Anschließend werden dem <xref:System.Data.DataColumnCollection> der <xref:System.Data.DataTable>Spalten hinzugefügt, und die folgenden <xref:System.Data.DataColumn> Eigenschaften werden konfiguriert, wenn Sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Sie müssen <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separat festlegen.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> konfiguriert auch die Eigenschaften <xref:System.Data.DataTable.PrimaryKey%2A> und <xref:System.Data.DataTable.Constraints%2A> gemäß den folgenden Regeln:  
  
-   Wenn eine <xref:System.Data.DataTable.PrimaryKey%2A> bereits für die `DataTable`definiert wurde oder die `DataTable` Daten enthält, wird die `PrimaryKey` Eigenschaft nicht festgelegt.  
  
-   Wenn eine oder mehrere Primärschlüssel Spalten von der <xref:System.Data.IDbDataAdapter.SelectCommand%2A>zurückgegeben werden, werden Sie als Primärschlüssel Spalten für die `DataTable`verwendet.  
  
-   Wenn keine Primärschlüssel Spalten zurückgegeben werden, aber eindeutige Spalten sind, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn, und nur wenn, wenn alle eindeutigen Spalten keine NULL-Werte zulassen. Wenn eine der Spalten NULL-Werte zulässt, wird der <xref:System.Data.ConstraintCollection>ein <xref:System.Data.UniqueConstraint> hinzugefügt, die `PrimaryKey`-Eigenschaft ist jedoch nicht festgelegt.  
  
-   Wenn sowohl Primärschlüssel Spalten als auch eindeutige Spalten zurückgegeben werden, werden die Primärschlüssel Spalten als Primärschlüssel Spalten für die `DataTable`verwendet.  
  
 Beachten Sie, dass der <xref:System.Data.ConstraintCollection> Primärschlüssel und UNIQUE-Einschränkungen gemäß den vorangehenden Regeln hinzugefügt werden, andere Einschränkungs Typen jedoch nicht hinzugefügt werden. Dieser Prozess erfordert möglicherweise mehrere Roundtrips zum Server.  
  
 Wenn ein eindeutiger gruppierter Index für eine Spalte oder Spalten in einer SQL Server Tabelle definiert ist und die PRIMARY KEY-Einschränkung für einen separaten Satz von Spalten definiert ist, werden die Namen der Spalten im gruppierten Index zurückgegeben. Um die Namen oder Namen der Primärschlüssel Spalten zurückzugeben, verwenden Sie einen Abfrage Hinweis mit der SELECT-Anweisung, die den Namen des Primärschlüssel Indexes angibt. Weitere Informationen zum Angeben von Abfrage hinweisen finden Sie unter [Query Hint (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Wenn <xref:System.Data.Common.DbDataAdapter> beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten gefunden werden, werden die Namen für die nachfolgenden Spalten mithilfe des Musters "*ColumnName*1", "*ColumnName*2", "*ColumnName*3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn der <xref:System.Data.DataSet> werden mehrere Resultsets in eine separate Tabelle eingefügt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Anwendungen, die Spalten-und Tabellennamen verwenden, sollten sicherstellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> gibt keine Zeilen zurück. Verwenden Sie die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode, um einer <xref:System.Data.DataTable>Zeilen hinzuzufügen.  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, werden bei der Implementierung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework Datenanbieter für OLE DB Schema Informationen nur für das erste Ergebnis abgerufen. Um Schema Informationen für mehrere Ergebnisse abzurufen, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, wobei die <xref:System.Data.MissingSchemaAction> auf `AddWithKey`festgelegt ist.  
  
 Bei der Verwendung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> fügt der .NET Framework-Datenanbieter für SQL Server eine FOR BROWSE-Klausel an die ausgeführte Anweisung an. Der Benutzer muss mögliche Nebeneffekte beachten, z. B. Beeinträchtigungen bei der Verwendung von SET FMTONLY ON-Anweisungen. Weitere Informationen finden Sie unter [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse (<xref:System.Data.SqlClient.SqlDataAdapter>) verwendet, um eine <xref:System.Data.DataSet> mit dem Schema zu füllen, und es wird ein <xref:System.Data.DataTable>zurückgegeben.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * string -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Ein <see cref="T:System.Data.DataSet" />, in das das Schema eingefügt werden soll.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte, die angeben, wie das Schema eingefügt wird.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <summary>Fügt dem angegebenen <see cref="T:System.Data.DataTable" /> eine <see cref="T:System.Data.DataSet" /> hinzu und konfiguriert das Schema auf der Grundlage des angegebenen <see cref="T:System.Data.SchemaType" /> und der angegebenen <see cref="T:System.Data.DataTable" /> so, dass es mit dem Schema in der Datenquelle übereinstimmt.</summary>
        <returns>Ein Verweis auf eine Auflistung von <see cref="T:System.Data.DataTable" />-Objekten, die dem <see cref="T:System.Data.DataSet" /> hinzugefügt wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft die Schema Informationen mithilfe des-<xref:System.Data.IDbDataAdapter.SelectCommand%2A>aus der Datenquelle ab.  
  
 Ein <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vorgang fügt dem Ziel <xref:System.Data.DataSet>eine <xref:System.Data.DataTable> hinzu. Anschließend werden dem <xref:System.Data.DataColumnCollection> der <xref:System.Data.DataTable>Spalten hinzugefügt, und die folgenden <xref:System.Data.DataColumn> Eigenschaften werden konfiguriert, wenn Sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Sie müssen <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separat festlegen.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> konfiguriert auch die Eigenschaften <xref:System.Data.DataTable.PrimaryKey%2A> und <xref:System.Data.DataTable.Constraints%2A> gemäß den folgenden Regeln:  
  
-   Wenn eine oder mehrere Primärschlüssel Spalten von der <xref:System.Data.IDbDataAdapter.SelectCommand%2A>zurückgegeben werden, werden Sie als Primärschlüssel Spalten für die <xref:System.Data.DataTable>verwendet.  
  
-   Wenn keine Primärschlüssel Spalten zurückgegeben werden, aber eindeutige Spalten sind, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn, und nur wenn, wenn alle eindeutigen Spalten keine NULL-Werte zulassen. Wenn eine der Spalten NULL-Werte zulässt, wird der <xref:System.Data.ConstraintCollection>ein <xref:System.Data.UniqueConstraint> hinzugefügt, die <xref:System.Data.DataTable.PrimaryKey%2A>-Eigenschaft ist jedoch nicht festgelegt.  
  
-   Wenn sowohl Primärschlüssel Spalten als auch eindeutige Spalten zurückgegeben werden, werden die Primärschlüssel Spalten als Primärschlüssel Spalten für die <xref:System.Data.DataTable>verwendet.  
  
 Beachten Sie, dass der <xref:System.Data.ConstraintCollection> Primärschlüssel und UNIQUE-Einschränkungen gemäß den vorangehenden Regeln hinzugefügt werden, andere Einschränkungs Typen jedoch nicht hinzugefügt werden.  
  
 Wenn ein eindeutiger gruppierter Index für eine Spalte oder Spalten in einer SQL Server Tabelle definiert ist und die PRIMARY KEY-Einschränkung für einen separaten Satz von Spalten definiert ist, werden die Namen der Spalten im gruppierten Index zurückgegeben. Um die Namen oder Namen der Primärschlüssel Spalten zurückzugeben, verwenden Sie einen Abfrage Hinweis mit der SELECT-Anweisung, die den Namen des Primärschlüssel Indexes angibt. Weitere Informationen zum Angeben von Abfrage hinweisen finden Sie unter [Query Hint (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Primärschlüssel Informationen werden während <xref:System.Data.Common.DbDataAdapter.Fill%2A> verwendet, um Zeilen zu suchen und zu ersetzen, deren Schlüssel Spalten einander entsprechen. Wenn dies nicht das gewünschte Verhalten ist, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, ohne Schema Informationen anzufordern.  
  
 Wenn <xref:System.Data.Common.DbDataAdapter> beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten gefunden werden, werden die Namen für die nachfolgenden Spalten mithilfe des Musters "*ColumnName*1", "*ColumnName*2", "*ColumnName*3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn der <xref:System.Data.DataSet> werden mehrere Resultsets in eine separate Tabelle eingefügt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Anwendungen, die Spalten-und Tabellennamen verwenden, sollten sicherstellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 Die <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>-Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> mehrere <xref:System.Data.DataTable> Objekte enthält, deren Namen sich nur in Groß-/Kleinschreibung In solchen Fällen führt <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> einen Vergleich durch, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle, wenn keine genaue Übereinstimmung vorliegt. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird und die <xref:System.Data.DataSet> nur eine <xref:System.Data.DataTable> enthält, deren Name sich nur in der Groß-/Kleinschreibung unterscheidet, wird diese <xref:System.Data.DataTable> aktualisiert. In diesem Szenario wird beim Vergleich die Groß-/Kleinschreibung nicht beachtet. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Das <xref:System.Data.IDbConnection>-Objekt, das dem SELECT-Befehl zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet werden. Wenn die <xref:System.Data.IDbConnection> geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird, bleibt sie offen.  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, werden bei der Implementierung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework Datenanbieter für OLE DB Schema Informationen nur für das erste Ergebnis abgerufen. Um Schema Informationen für mehrere Ergebnisse abzurufen, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, wobei die <xref:System.Data.MissingSchemaAction> auf `AddWithKey`festgelegt ist.  
  
 Bei der Verwendung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> fügt der .NET Framework-Datenanbieter für SQL Server eine FOR BROWSE-Klausel an die ausgeführte Anweisung an. Der Benutzer muss mögliche Nebeneffekte beachten, z. B. Beeinträchtigungen bei der Verwendung von SET FMTONLY ON-Anweisungen. Weitere Informationen finden Sie unter [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse (<xref:System.Data.SqlClient.SqlDataAdapter>) verwendet, um eine <xref:System.Data.DataSet> mit dem Schema zu füllen, und es wird ein <xref:System.Data.DataSet>zurückgegeben.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Eine Quelltabelle, aus der das Schema abgerufen werden soll, konnte nicht gefunden werden.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Die <see cref="T:System.Data.DataTable" />, die mit dem Schema aus der Datenquelle gefüllt werden soll.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte.</param>
        <param name="command">Die SQL-SELECT-Anweisung, mit der Zeilen aus der Datenquelle abgerufen werden.</param>
        <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Konfiguriert das Schema der angegebenen <see cref="T:System.Data.DataTable" /> auf der Grundlage des angegebenen <see cref="T:System.Data.SchemaType" />, der angegebenen Befehlszeichenfolge und der angegebenen <see cref="T:System.Data.CommandBehavior" />-Werte.</summary>
        <returns>Ein <see cref="T:System.Data.DataTable" />-Objekt, das aus der Datenquelle zurückgegebene Schemainformationen enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>-Methode ruft das Schema mithilfe der <xref:System.Data.IDbDataAdapter.SelectCommand%2A>aus der Datenquelle ab. Das Verbindungs Objekt, das dem <xref:System.Data.IDbDataAdapter.SelectCommand%2A> zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die Verbindung geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird, bleibt Sie geöffnet.  
  
 Ein <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vorgang fügt dem Ziel <xref:System.Data.DataSet>eine <xref:System.Data.DataTable> hinzu. Anschließend werden dem <xref:System.Data.DataColumnCollection> der <xref:System.Data.DataTable>Spalten hinzugefügt, und die folgenden <xref:System.Data.DataColumn> Eigenschaften werden konfiguriert, wenn Sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Sie müssen <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separat festlegen.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> konfiguriert auch die Eigenschaften <xref:System.Data.DataTable.PrimaryKey%2A> und <xref:System.Data.DataTable.Constraints%2A> gemäß den folgenden Regeln:  
  
-   Wenn eine oder mehrere Primärschlüssel Spalten von der <xref:System.Data.IDbDataAdapter.SelectCommand%2A>zurückgegeben werden, werden Sie als Primärschlüssel Spalten für die <xref:System.Data.DataTable>verwendet.  
  
-   Wenn keine Primärschlüssel Spalten zurückgegeben werden, aber eindeutige Spalten sind, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn, und nur wenn, wenn alle eindeutigen Spalten keine NULL-Werte zulassen. Wenn eine der Spalten NULL-Werte zulässt, wird der <xref:System.Data.ConstraintCollection>ein <xref:System.Data.UniqueConstraint> hinzugefügt, die <xref:System.Data.DataTable.PrimaryKey%2A>-Eigenschaft ist jedoch nicht festgelegt.  
  
-   Wenn sowohl Primärschlüssel Spalten als auch eindeutige Spalten zurückgegeben werden, werden die Primärschlüssel Spalten als Primärschlüssel Spalten für die <xref:System.Data.DataTable>verwendet.  
  
 Beachten Sie, dass der <xref:System.Data.ConstraintCollection> Primärschlüssel und UNIQUE-Einschränkungen gemäß den vorangehenden Regeln hinzugefügt werden, andere Einschränkungs Typen jedoch nicht hinzugefügt werden.  
  
 Wenn ein eindeutiger gruppierter Index für eine Spalte oder Spalten in einer SQL Server Tabelle definiert ist und die PRIMARY KEY-Einschränkung für einen separaten Satz von Spalten definiert ist, werden die Namen der Spalten im gruppierten Index zurückgegeben. Um die Namen oder Namen der Primärschlüssel Spalten zurückzugeben, verwenden Sie einen Abfrage Hinweis mit der SELECT-Anweisung, die den Namen des Primärschlüssel Indexes angibt. Weitere Informationen zum Angeben von Abfrage hinweisen finden Sie unter [Query Hint (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Wenn <xref:System.Data.IDataAdapter> beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten gefunden werden, werden die Namen für die nachfolgenden Spalten mithilfe des Musters "*ColumnName*1", "*ColumnName*2", "*ColumnName*3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn der <xref:System.Data.DataSet> werden mehrere Resultsets in eine separate Tabelle eingefügt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Anwendungen, die Spalten-und Tabellennamen verwenden, sollten sicherstellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> gibt keine Zeilen zurück. Verwenden Sie die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode, um einer <xref:System.Data.DataTable>Zeilen hinzuzufügen.  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, werden bei der Implementierung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework Datenanbieter für OLE DB Schema Informationen nur für das erste Ergebnis abgerufen. Um Schema Informationen für mehrere Ergebnisse abzurufen, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, wobei die <xref:System.Data.MissingSchemaAction> auf `AddWithKey`festgelegt ist.  
  
 Bei der Verwendung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> fügt der .NET Framework-Datenanbieter für SQL Server eine FOR BROWSE-Klausel an die ausgeführte Anweisung an. Der Benutzer muss mögliche Nebeneffekte beachten, z. B. Beeinträchtigungen bei der Verwendung von SET FMTONLY ON-Anweisungen. Weitere Informationen finden Sie unter [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Diese Implementierung der <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />-Methode ist geschützt und wurde für die Verwendung durch einen .NET Framework Datenanbieter konzipiert.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * System.Data.IDbCommand * string * System.Data.CommandBehavior -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, command, srcTable, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Die <see cref="T:System.Data.DataSet" />, die mit dem Schema aus der Datenquelle gefüllt werden soll.</param>
        <param name="schemaType">Einer der <see cref="T:System.Data.SchemaType" />-Werte.</param>
        <param name="command">Die SQL-SELECT-Anweisung, mit der Zeilen aus der Datenquelle abgerufen werden.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Fügt dem angegebenen <see cref="T:System.Data.DataTable" /> eine <see cref="T:System.Data.DataSet" /> mit dem Namen "Table" hinzu und konfiguriert das Schema anhand des angegebenen <see cref="T:System.Data.SchemaType" /> so, dass es dem Schema in der Datenquelle entspricht.</summary>
        <returns>Ein Array von <see cref="T:System.Data.DataTable" />-Objekten, die aus der Datenquelle zurückgegebene Schemainformationen enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>-Methode ruft das Schema mithilfe der <xref:System.Data.IDbDataAdapter.SelectCommand%2A>aus der Datenquelle ab. Das Verbindungs Objekt, das dem <xref:System.Data.IDbDataAdapter.SelectCommand%2A> zugeordnet ist, muss gültig sein, aber es muss nicht geöffnet sein. Wenn die Verbindung geschlossen wird, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird, wird Sie geöffnet, um Daten abzurufen und dann geschlossen zu werden. Wenn die Verbindung geöffnet ist, bevor <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird, bleibt Sie geöffnet.  
  
 Ein <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vorgang fügt dem Ziel <xref:System.Data.DataSet>eine <xref:System.Data.DataTable> hinzu. Anschließend werden dem <xref:System.Data.DataColumnCollection> der <xref:System.Data.DataTable>Spalten hinzugefügt, und die folgenden <xref:System.Data.DataColumn> Eigenschaften werden konfiguriert, wenn Sie in der Datenquelle vorhanden sind:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Sie müssen <xref:System.Data.DataColumn.AutoIncrementStep%2A> und <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separat festlegen.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> konfiguriert auch die Eigenschaften <xref:System.Data.DataTable.PrimaryKey%2A> und <xref:System.Data.DataTable.Constraints%2A> gemäß den folgenden Regeln:  
  
-   Wenn eine oder mehrere Primärschlüssel Spalten von der <xref:System.Data.IDbDataAdapter.SelectCommand%2A>zurückgegeben werden, werden Sie als Primärschlüssel Spalten für die <xref:System.Data.DataTable>verwendet.  
  
-   Wenn keine Primärschlüssel Spalten zurückgegeben werden, aber eindeutige Spalten sind, werden die eindeutigen Spalten als Primärschlüssel verwendet, wenn, und nur wenn, wenn alle eindeutigen Spalten keine NULL-Werte zulassen. Wenn eine der Spalten NULL-Werte zulässt, wird der <xref:System.Data.ConstraintCollection>ein <xref:System.Data.UniqueConstraint> hinzugefügt, die <xref:System.Data.DataTable.PrimaryKey%2A>-Eigenschaft ist jedoch nicht festgelegt.  
  
-   Wenn sowohl Primärschlüssel Spalten als auch eindeutige Spalten zurückgegeben werden, werden die Primärschlüssel Spalten als Primärschlüssel Spalten für die <xref:System.Data.DataTable>verwendet.  
  
 Beachten Sie, dass der <xref:System.Data.ConstraintCollection> Primärschlüssel und UNIQUE-Einschränkungen gemäß den vorangehenden Regeln hinzugefügt werden, andere Einschränkungs Typen jedoch nicht hinzugefügt werden.  
  
 Wenn ein eindeutiger gruppierter Index für eine Spalte oder Spalten in einer SQL Server Tabelle definiert ist und die PRIMARY KEY-Einschränkung für einen separaten Satz von Spalten definiert ist, werden die Namen der Spalten im gruppierten Index zurückgegeben. Um die Namen oder Namen der Primärschlüssel Spalten zurückzugeben, verwenden Sie einen Abfrage Hinweis mit der SELECT-Anweisung, die den Namen des Primärschlüssel Indexes angibt. Weitere Informationen zum Angeben von Abfrage hinweisen finden Sie unter [Query Hint (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Wenn <xref:System.Data.IDataAdapter> beim Auffüllen eines <xref:System.Data.DataTable>doppelte Spalten gefunden werden, werden die Namen für die nachfolgenden Spalten mithilfe des Musters "*ColumnName*1", "*ColumnName*2", "*ColumnName*3" usw. generiert. Wenn die eingehenden Daten unbenannte Spalten enthalten, werden sie platziert, der <xref:System.Data.DataSet> gemäß dem Muster "Column1", "Column2" usw. Wenn der <xref:System.Data.DataSet> werden mehrere Resultsets in eine separate Tabelle eingefügt. Zusätzliche Resultsets werden benannt, indem ganzzahlige Werte an den angegebenen Tabellennamen angehängt werden (z. b. "Table", "table1", "table2" usw.). Anwendungen, die Spalten-und Tabellennamen verwenden, sollten sicherstellen, dass keine Konflikte mit diesen Benennungs Mustern auftreten.  
  
 Die <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>-Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> mehrere <xref:System.Data.DataTable> Objekte enthält, deren Namen sich nur in Groß-/Kleinschreibung In solchen Fällen führt <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> einen Vergleich durch, um die entsprechende Tabelle zu suchen, und erstellt eine neue Tabelle, wenn keine genaue Übereinstimmung vorliegt. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> aufgerufen wird und die <xref:System.Data.DataSet> nur eine <xref:System.Data.DataTable> enthält, deren Name sich nur in der Groß-/Kleinschreibung unterscheidet, wird diese <xref:System.Data.DataTable> aktualisiert. In diesem Szenario wird beim Vergleich die Groß-/Kleinschreibung nicht beachtet. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> gibt keine Zeilen zurück. Verwenden Sie die <xref:System.Data.Common.DbDataAdapter.Fill%2A>-Methode, um einer <xref:System.Data.DataTable>Zeilen hinzuzufügen.  
  
> [!NOTE]
>  Bei der Verarbeitung von Batch-SQL-Anweisungen, die mehrere Ergebnisse zurückgeben, werden bei der Implementierung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> für die .NET Framework Datenanbieter für OLE DB Schema Informationen nur für das erste Ergebnis abgerufen. Um Schema Informationen für mehrere Ergebnisse abzurufen, verwenden Sie <xref:System.Data.Common.DbDataAdapter.Fill%2A>, wobei die <xref:System.Data.MissingSchemaAction> auf `AddWithKey`festgelegt ist.  
  
 Bei der Verwendung von <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> fügt der .NET Framework-Datenanbieter für SQL Server eine FOR BROWSE-Klausel an die ausgeführte Anweisung an. Der Benutzer muss mögliche Nebeneffekte beachten, z. B. Beeinträchtigungen bei der Verwendung von SET FMTONLY ON-Anweisungen. Weitere Informationen finden Sie unter [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Diese Implementierung der <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />-Methode ist geschützt und wurde für die Verwendung durch einen .NET Framework Datenanbieter konzipiert.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedParameter : int * int -&gt; System.Data.IDataParameter&#xA;override this.GetBatchedParameter : int * int -&gt; System.Data.IDataParameter" Usage="dbDataAdapter.GetBatchedParameter (commandIdentifier, parameterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameterIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Der Index des Befehls, dessen Parameter abgerufen werden soll.</param>
        <param name="parameterIndex">Der Index des Parameter im Befehl.</param>
        <summary>Gibt einen <see cref="T:System.Data.IDataParameter" /> von einem der Befehle im aktuellen Batch zurück.</summary>
        <returns>Die angegebene <see cref="T:System.Data.IDataParameter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>löst diese Methode <xref:System.NotSupportedException>aus. Klassen, die von Erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um Unterstützung für Batches bereitzustellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Der Adapter unterstützt keine Batches.</exception>
        <block subset="none" type="overrides"><para>Diese Methode ist geschützt und ist für die Verwendung durch einen .NET Framework Datenanbieter konzipiert.  
  
Wenn eine Klasse, die von <see cref="T:System.Data.Common.DbDataAdapter" /> erbt, Batches unterstützt, überschreibt diese Klasse diese Methode, damit Benutzer einen Batch ausführen können. Eine-Implementierung verwendet die <paramref name="commandIdentifier" />, die bereitgestellt werden, um den angeforderten Befehl zu suchen, und verwendet dann die bereitgestellten <paramref name="parameterIndex" />, um nach dem angeforderten Parameter Beispielsweise gibt die <paramref name="commandIdentifier" /> 0 und eine <paramref name="parameterIndex" /> 0 den ersten Parameter des ersten Befehls im Batch zurück.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedRecordsAffected : int * int * Exception -&gt; bool&#xA;override this.GetBatchedRecordsAffected : int * int * Exception -&gt; bool" Usage="dbDataAdapter.GetBatchedRecordsAffected (commandIdentifier, recordsAffected, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="recordsAffected" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="error" Type="System.Exception" RefType="out" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Die nullbasierte Ordnungszahl der Spalte des einzelnen Befehls im Batch.</param>
        <param name="recordsAffected">Die Anzahl der Zeilen im Datenspeicher, auf die sich der angegebene Befehl im Batch auswirkt.</param>
        <param name="error">Eine <see cref="T:System.Exception" />, die während der Ausführung des angegebenen Befehls ausgelöst wird. Gibt <see langword="null" /> (<see langword="Nothing" /> in Visual Basic) zurück, wenn keine Ausnahme ausgelöst wird.</param>
        <summary>Gibt Informationen über einen einzelnen Updateversuch innerhalb eines größeren Updates im Batchmodus zurück.</summary>
        <returns>Informationen über einen einzelnen Updateversuch innerhalb eines größeren Updates im Batchmodus.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Datenanbieter, die eine Batch Aktualisierungs Logik unterstützen, müssen eine Reihe von virtuellen Methoden in der <xref:System.Data.Common.DbDataAdapter>-Klasse überschreiben. `GetBatchedRecordsAffected` stellt eine dieser virtuellen Methoden dar. Die `DbDataAdapter`-Klasse basiert auf `GetBatchedRecordsAffected`, um den Erfolg oder Misserfolg einzelner Update Versuche innerhalb eines Batches zu ermitteln, damit jede entsprechende <xref:System.Data.DataRow> entsprechend gekennzeichnet werden kann.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="override this.GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="dbDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die Parameter ab, die vom Benutzer beim Ausführen einer SQL-SELECT-Anweisung festgelegt wurden.</summary>
        <returns>Ein Array von <see cref="T:System.Data.IDataParameter" />-Objekten, das die vom Benutzer festgelegten Parameter enthält.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberSignature Language="F#" Value="abstract member InitializeBatching : unit -&gt; unit&#xA;override this.InitializeBatching : unit -&gt; unit" Usage="dbDataAdapter.InitializeBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert die Batchverarbeitung für den <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>löst diese Methode <xref:System.NotSupportedException>aus. Klassen, die von Erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um Unterstützung für Batches bereitzustellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Der Adapter unterstützt keine Batches.</exception>
        <block subset="none" type="overrides"><para>Diese Methode ist geschützt und ist für die Verwendung durch einen .NET Framework Datenanbieter konzipiert.  
  
Wenn eine Klasse, die von <see cref="T:System.Data.Common.DbDataAdapter" /> erbt, Batches unterstützt, überschreibt diese Klasse diese Methode. Diese Methode bietet der-Klasse die Möglichkeit, alle Ressourcen zu initialisieren, die zur Unterstützung der Batch Verarbeitung benötigt werden. Beispielsweise kann eine-Klasse eine Datenstruktur zuordnen, die den Satz von Befehlen im Batch enthält.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Befehl ab, der zum Einfügen neuer Datensätze in der Datenquelle verwendet wird, oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, der während der Ausführung von <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in die Datenquelle einzufügen, die neuen Zeilen im Dataset entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft während <xref:System.Data.Common.DbDataAdapter.Update%2A>nicht festgelegt ist und Primärschlüssel Informationen in der <xref:System.Data.DataSet>vorhanden sind, wird die <xref:System.Data.IDbDataAdapter.InsertCommand%2A> automatisch generiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse <xref:System.Data.OleDb.OleDbDataAdapter> erstellt und einige ihrer Eigenschaften festgelegt.  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Bearbeiten von Daten (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnFillError">
      <MemberSignature Language="C#" Value="protected virtual void OnFillError (System.Data.FillErrorEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFillError(class System.Data.FillErrorEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnFillError(System.Data.FillErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFillError (value As FillErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFillError(System::Data::FillErrorEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnFillError : System.Data.FillErrorEventArgs -&gt; unit&#xA;override this.OnFillError : System.Data.FillErrorEventArgs -&gt; unit" Usage="dbDataAdapter.OnFillError value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.FillErrorEventArgs" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="value">Die Daten für das Ereignis.</param>
        <summary>Löst das Ereignis <see cref="E:System.Data.Common.DataAdapter.FillError" /> aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit&#xA;override this.OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub OnRowUpdated (value As RowUpdatedEventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Ein <see cref="T:System.Data.Common.RowUpdatedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see langword="RowUpdated" />-Ereignis eines .NET Framework-Datenanbieters aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Eine Übersicht finden Sie unter [behandeln und Auswerfen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass Sie die <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />-Methode der Basisklasse aufzurufen.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit&#xA;override this.OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected abstract void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub OnRowUpdating (value As RowUpdatingEventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Ein <see cref="T:System.Data.Common.RowUpdatingEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see langword="RowUpdating" />-Ereignis eines .NET Framework-Datenanbieters aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Eine Übersicht finden Sie unter [behandeln und Auswerfen von Ereignissen](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass Sie die <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />-Methode der Basisklasse aufzurufen.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Befehl ab, mit dem Datensätze in der Datenquelle ausgewählt werden, oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, der während der Ausführung von <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze aus der Datenquelle zur Platzierung im Dataset auszuwählen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse <xref:System.Data.OleDb.OleDbDataAdapter> erstellt und einige ihrer Eigenschaften festgelegt.  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Bearbeiten von Daten (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung zum Löschen von Datensätzen aus dem Dataset ab oder legt sie fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, das während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in der Datenquelle zu löschen, die gelöschten Zeilen im DataSet entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellen-Memberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.Common.DbDataAdapter>-Instanz in eine <xref:System.Data.IDbDataAdapter>-Schnittstelle umgewandelt wird.  
  
 Weitere Informationen finden Sie unter <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung ab, die zum Einfügen neuer Datensätze in der Datenquelle verwendet wird, oder legt sie fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, das während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in die Datenquelle einzufügen, die neuen Zeilen im Dataset entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellen-Memberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.Common.DbDataAdapter>-Instanz in eine <xref:System.Data.IDbDataAdapter>-Schnittstelle umgewandelt wird.  
  
 Weitere Informationen finden Sie unter <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung ab, mit der Datensätze in der Datenquelle ausgewählt werden, oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, der während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze aus der Datenquelle zur Platzierung im Dataset auszuwählen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellen-Memberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.Common.DbDataAdapter>-Instanz in eine <xref:System.Data.IDbDataAdapter>-Schnittstelle umgewandelt wird.  
  
 Weitere Informationen finden Sie unter <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine SQL-Anweisung ab, die zum Aktualisieren von Datensätzen in der Datenquelle verwendet wird, oder legt sie fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, das während der Ausführung von <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in der Datenquelle zu aktualisieren, die geänderten Zeilen im Dataset entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellen-Memberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.Common.DbDataAdapter>-Instanz in eine <xref:System.Data.IDbDataAdapter>-Schnittstelle umgewandelt wird.  
  
 Weitere Informationen finden Sie unter <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("use 'protected DbDataAdapter(DbDataAdapter)' ctor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues Objekt, das eine Kopie der aktuellen Instanz darstellt.</summary>
        <returns>Ein neues Objekt, das eine Kopie dieser Instanz ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellen-Memberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Data.Common.DbDataAdapter>-Instanz in eine <xref:System.ICloneable>-Schnittstelle umgewandelt wird.  
  
 Weitere Informationen finden Sie unter <xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberSignature Language="F#" Value="abstract member TerminateBatching : unit -&gt; unit&#xA;override this.TerminateBatching : unit -&gt; unit" Usage="dbDataAdapter.TerminateBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet die Batchverarbeitung für den <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>löst diese Methode <xref:System.NotSupportedException>aus. Klassen, die von Erben <xref:System.Data.Common.DbDataAdapter> überschreiben diese Methode, um Unterstützung für Batches bereitzustellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Der Adapter unterstützt keine Batches.</exception>
        <block subset="none" type="overrides"><para>Diese Methode ist geschützt und ist für die Verwendung durch einen .NET Framework Datenanbieter konzipiert.  
  
Wenn eine Klasse, die von <see cref="T:System.Data.Common.DbDataAdapter" /> erbt, Batches unterstützt, überschreibt diese Klasse diese Methode. Diese Methode gibt der-Klasse die Möglichkeit, alle Ressourcen freizugeben, die für die Unterstützung der Batch Verarbeitung reserviert werden. Beispielsweise kann die-Klasse die Datenstruktur, die die Befehle im Batch enthält, nicht mehr zuordnen.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktualisiert die Werte in der Datenbank, indem für jede eingefügte, aktualisierte oder gelöschte Zeile im  <see cref="T:System.Data.DataSet" /> die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung ausgeführt werden.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] -&gt; int" Usage="dbDataAdapter.Update dataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">Ein Array von <see cref="T:System.Data.DataRow" />-Objekten, mit denen die Datenquelle aktualisiert wird.</param>
        <summary>Aktualisiert die Werte in der Datenbank, indem für jede eingefügte, aktualisierte oder gelöschte Zeile im angegebenen Array in <see cref="T:System.Data.DataSet" /> die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung ausgeführt werden.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode aufruft, wird die <xref:System.Data.DataRow.RowState%2A>-Eigenschaft vom <xref:System.Data.Common.DbDataAdapter> überprüft, und die erforderlichen INSERT-, Update-oder DELETE-Anweisungen werden iterativ für jede Zeile ausgeführt, basierend auf der Reihenfolge der im <xref:System.Data.DataSet>konfigurierten Indizes. Beispielsweise kann <xref:System.Data.Common.DbDataAdapter.Update%2A> eine DELETE-Anweisung, gefolgt von einer INSERT-Anweisung, und dann eine weitere DELETE-Anweisung aufgrund der Reihenfolge der Zeilen in der <xref:System.Data.DataTable>ausführen.  
  
 Beachten Sie, dass diese Anweisungen nicht als Batch Prozess ausgeführt werden. jede Zeile wird einzeln aktualisiert. Eine Anwendung kann die <xref:System.Data.DataSet.GetChanges%2A>-Methode in Situationen, in denen Sie die Reihenfolge der Anweisungstypen steuern müssen (z. b. vor Updates einfügen). Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Wenn INSERT-, Update-oder DELETE-Anweisungen nicht angegeben wurden, generiert die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode eine Ausnahme. Sie können jedoch eine <xref:System.Data.SqlClient.SqlCommandBuilder>-oder <xref:System.Data.OleDb.OleDbCommandBuilder>-Objekt erstellen, um automatisch SQL-Anweisungen für Aktualisierungen in einer Tabelle zu generieren, wenn Sie die `SelectCommand`-Eigenschaft eines .NET Framework Datenanbieters festlegen. Anschließend werden alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen, vom **CommandBuilder**generiert. Diese Generierungs Logik erfordert, dass Schlüssel Spalten Informationen im <xref:System.Data.DataSet>vorhanden sind. Weitere Informationen finden Sie [unter Erstellen von Befehlen mit CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode ruft Zeilen aus der Tabelle ab, die in der ersten Zuordnung aufgeführt ist, bevor ein Update durchgeführt wird. Der <xref:System.Data.Common.DbDataAdapter.Update%2A> aktualisiert dann die Zeile mit dem Wert der <xref:System.Data.IDbCommand.UpdatedRowSource%2A>-Eigenschaft. Alle zurückgegebenen zusätzlichen Zeilen werden ignoriert.  
  
 Nachdem alle Daten wieder in den <xref:System.Data.DataSet>geladen wurden, wird das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis ausgelöst, sodass der Benutzer die abgeglichen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter, die vom Befehl zurückgegeben werden, überprüfen kann. Nachdem eine Zeile erfolgreich aktualisiert wurde, werden die Änderungen an dieser Zeile akzeptiert.  
  
 Wenn Sie <xref:System.Data.Common.DbDataAdapter.Update%2A>verwenden, sieht die Reihenfolge der Ausführung wie folgt aus:  
  
1.  Die Werte in den <xref:System.Data.DataRow> werden in die Parameterwerte verschoben.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl wird ausgeführt.  
  
4.  Wenn der Befehl auf `FirstReturnedRecord`festgelegt ist, wird das erste zurückgegebene Ergebnis in die <xref:System.Data.DataRow>eingefügt.  
  
5.  Wenn Ausgabeparameter vorhanden sind, werden Sie in der <xref:System.Data.DataRow>platziert.  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jedem der <xref:System.Data.Common.DbDataAdapter> zugeordneten Befehl ist in der Regel eine Parameter Auflistung zugeordnet. Parameter werden der aktuellen Zeile über die Eigenschaften `SourceColumn` und `SourceVersion` der `Parameter` Klasse eines .NET Framework Datenanbieters zugeordnet. `SourceColumn` verweist auf eine <xref:System.Data.DataTable> Spalte, auf die der <xref:System.Data.Common.DbDataAdapter> verweist, um Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn` verweist auf den Namen der nicht zugeordneten Spalte, bevor Tabellen Zuordnungen angewendet wurden. Wenn `SourceColumn` auf eine nicht vorhandene Spalte verweist, hängt die ausgeführte Aktion von einem der folgenden <xref:System.Data.MissingMappingAction> Werte ab.  
  
|Enumerationswert|Ausgeführte Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Quell Spaltennamen und Tabellennamen in der <xref:System.Data.DataSet>, wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Eine <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt werden, ist eine fehlende Zuordnung für einen Eingabeparameter in der Regel das Ergebnis eines Fehlers.|  
|`MissingMappingAction.Error`|Eine <xref:System.SystemException> wird generiert.|  
  
 Die `SourceColumn`-Eigenschaft wird auch verwendet, um den Wert für die Ausgabe-oder Eingabe-/Ausgabeparameter wieder dem `DataSet`zuzuordnen. Eine Ausnahme wird generiert, wenn Sie auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion`-Eigenschaft der `Parameter`-Klasse eines .NET Framework Datenanbieters bestimmt, ob die ursprüngliche, aktuelle oder vorgeschlagene Version des Spaltenwerts verwendet werden soll. Diese Funktion wird häufig verwendet, um ursprüngliche Werte in die WHERE-Klausel einer Update-Anweisung einzuschließen, um auf Verletzungen der vollständigen Parallelität zu prüfen.  
  
> [!NOTE]
>  Wenn beim Aktualisieren einer Zeile ein Fehler auftritt, wird eine Ausnahme ausgelöst, und die Ausführung des Updates wird nicht mehr unterstützt. Um den Aktualisierungs Vorgang fortzusetzen, ohne beim Auftreten eines Fehlers Ausnahmen zu erzeugen, legen Sie die <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>-Eigenschaft auf `true` fest, bevor Sie <xref:System.Data.Common.DbDataAdapter.Update%2A>aufrufen. Sie können auch im `RowUpdated`-Ereignis eines DataAdapter auf zeilenweise auf Fehler reagieren. Wenn Sie den Aktualisierungs Vorgang fortsetzen möchten, ohne eine Ausnahme innerhalb des `RowUpdated` Ereignisses zu erzeugen, legen Sie die <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>-Eigenschaft des <xref:System.Data.Common.RowUpdatedEventArgs> auf <xref:System.Data.UpdateStatus.Continue>fest.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse (<xref:System.Data.OleDb.OleDbDataAdapter>) verwendet, um die Datenquelle zu aktualisieren.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.SystemException">Es ist keine zu aktualisierende <see cref="T:System.Data.DataRow" /> vorhanden.  
  
- oder - 
Es ist keine zu aktualisierende <see cref="T:System.Data.DataTable" /> vorhanden.  
  
- oder - 
Es ist kein <see cref="T:System.Data.DataSet" /> vorhanden, das als Quelle verwendet werden kann.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Bearbeiten von Daten (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Die <see cref="T:System.Data.DataSet" />, mit der die Datenquelle aktualisiert wird.</param>
        <summary>Aktualisiert die Werte in der Datenbank, indem für jede eingefügte, aktualisierte oder gelöschte Zeile im angegebenen <see cref="T:System.Data.DataSet" /> die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung ausgeführt werden.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode aufruft, wird die <xref:System.Data.DataRow.RowState%2A>-Eigenschaft vom <xref:System.Data.Common.DbDataAdapter> überprüft, und die erforderlichen INSERT-, Update-oder DELETE-Anweisungen werden iterativ für jede Zeile ausgeführt, basierend auf der Reihenfolge der im <xref:System.Data.DataSet>konfigurierten Indizes. Beispielsweise kann <xref:System.Data.Common.DbDataAdapter.Update%2A> eine DELETE-Anweisung, gefolgt von einer INSERT-Anweisung, und dann eine weitere DELETE-Anweisung aufgrund der Reihenfolge der Zeilen in der <xref:System.Data.DataTable>ausführen.  
  
 Beachten Sie, dass diese Anweisungen nicht als Batch Prozess ausgeführt werden. jede Zeile wird einzeln aktualisiert. Eine Anwendung kann die <xref:System.Data.DataSet.GetChanges%2A>-Methode in Situationen, in denen Sie die Reihenfolge der Anweisungstypen steuern müssen (z. b. vor Updates einfügen). Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Wenn INSERT-, Update-oder DELETE-Anweisungen nicht angegeben wurden, generiert die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode eine Ausnahme. Sie können jedoch eine <xref:System.Data.SqlClient.SqlCommandBuilder>-oder <xref:System.Data.OleDb.OleDbCommandBuilder>-Objekt erstellen, um automatisch SQL-Anweisungen für Aktualisierungen in einer Tabelle zu generieren, wenn Sie die `SelectCommand`-Eigenschaft eines .NET Framework Datenanbieters festlegen. Anschließend werden alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen, vom **CommandBuilder**generiert. Diese Generierungs Logik erfordert, dass Schlüssel Spalten Informationen im <xref:System.Data.DataSet>vorhanden sind. Weitere Informationen finden Sie [unter Erstellen von Befehlen mit CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode ruft Zeilen aus der Tabelle ab, die in der ersten Zuordnung aufgeführt ist, bevor ein Update durchgeführt wird. Der <xref:System.Data.Common.DbDataAdapter.Update%2A> aktualisiert dann die Zeile mit dem Wert der <xref:System.Data.IDbCommand.UpdatedRowSource%2A>-Eigenschaft. Alle zurückgegebenen zusätzlichen Zeilen werden ignoriert.  
  
 Nachdem alle Daten wieder in den <xref:System.Data.DataSet>geladen wurden, wird das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis ausgelöst, sodass der Benutzer die abgeglichen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter, die vom Befehl zurückgegeben werden, überprüfen kann. Nachdem eine Zeile erfolgreich aktualisiert wurde, werden die Änderungen an dieser Zeile akzeptiert.  
  
 Wenn Sie <xref:System.Data.Common.DbDataAdapter.Update%2A>verwenden, sieht die Reihenfolge der Ausführung wie folgt aus:  
  
1.  Die Werte in den <xref:System.Data.DataRow> werden in die Parameterwerte verschoben.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl wird ausgeführt.  
  
4.  Wenn der Befehl auf `FirstReturnedRecord`festgelegt ist, wird das erste zurückgegebene Ergebnis in die <xref:System.Data.DataRow>eingefügt.  
  
5.  Wenn Ausgabeparameter vorhanden sind, werden Sie in der <xref:System.Data.DataRow>platziert.  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jedem der <xref:System.Data.Common.DbDataAdapter> zugeordneten Befehl ist in der Regel eine Parameter Auflistung zugeordnet. Parameter werden der aktuellen Zeile über die Eigenschaften `SourceColumn` und `SourceVersion` der `Parameter` Klasse eines .NET Framework Datenanbieters zugeordnet. `SourceColumn` verweist auf eine <xref:System.Data.DataTable> Spalte, auf die der <xref:System.Data.Common.DbDataAdapter> verweist, um Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn` verweist auf den Namen der nicht zugeordneten Spalte, bevor Tabellen Zuordnungen angewendet wurden. Wenn `SourceColumn` auf eine nicht vorhandene Spalte verweist, hängt die ausgeführte Aktion von einem der folgenden <xref:System.Data.MissingMappingAction> Werte ab.  
  
|Enumerationswert|Ausgeführte Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Quell Spaltennamen und Tabellennamen in der <xref:System.Data.DataSet>, wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Eine <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt werden, ist eine fehlende Zuordnung für einen Eingabeparameter in der Regel das Ergebnis eines Fehlers.|  
|`MissingMappingAction.Error`|Eine <xref:System.SystemException> wird generiert.|  
  
 Die `SourceColumn`-Eigenschaft wird auch verwendet, um den Wert für die Ausgabe-oder Eingabe-/Ausgabeparameter wieder dem `DataSet`zuzuordnen. Eine Ausnahme wird generiert, wenn Sie auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion`-Eigenschaft der `Parameter`-Klasse eines .NET Framework Datenanbieters bestimmt, ob die ursprüngliche, aktuelle oder vorgeschlagene Version des Spaltenwerts verwendet werden soll. Diese Funktion wird häufig verwendet, um ursprüngliche Werte in die WHERE-Klausel einer Update-Anweisung einzuschließen, um auf Verletzungen der vollständigen Parallelität zu prüfen.  
  
> [!NOTE]
>  Wenn beim Aktualisieren einer Zeile ein Fehler auftritt, wird eine Ausnahme ausgelöst, und die Ausführung des Updates wird nicht mehr unterstützt. Um den Aktualisierungs Vorgang fortzusetzen, ohne beim Auftreten eines Fehlers Ausnahmen zu erzeugen, legen Sie die <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>-Eigenschaft auf `true` fest, bevor Sie <xref:System.Data.Common.DbDataAdapter.Update%2A>aufrufen. Sie können auch im `RowUpdated`-Ereignis eines DataAdapter auf zeilenweise auf Fehler reagieren. Wenn Sie den Aktualisierungs Vorgang fortsetzen möchten, ohne eine Ausnahme innerhalb des `RowUpdated` Ereignisses zu erzeugen, legen Sie die <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>-Eigenschaft des <xref:System.Data.Common.RowUpdatedEventArgs> auf <xref:System.Data.UpdateStatus.Continue>fest.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse (<xref:System.Data.OleDb.OleDbDataAdapter>) verwendet, um die Datenquelle zu aktualisieren.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Bearbeiten von Daten (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Update dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Die <see cref="T:System.Data.DataTable" />, mit der die Datenquelle aktualisiert wird.</param>
        <summary>Aktualisiert die Werte in der Datenbank, indem für jede eingefügte, aktualisierte oder gelöschte Zeile im angegebenen <see cref="T:System.Data.DataTable" /> die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung ausgeführt werden.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataTable" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode aufruft, wird die <xref:System.Data.DataRow.RowState%2A>-Eigenschaft vom <xref:System.Data.Common.DbDataAdapter> überprüft, und die erforderlichen INSERT-, Update-oder DELETE-Anweisungen werden iterativ für jede Zeile ausgeführt, basierend auf der Reihenfolge der im <xref:System.Data.DataSet>konfigurierten Indizes. Beispielsweise kann <xref:System.Data.Common.DbDataAdapter.Update%2A> eine DELETE-Anweisung, gefolgt von einer INSERT-Anweisung, und dann eine weitere DELETE-Anweisung aufgrund der Reihenfolge der Zeilen in der <xref:System.Data.DataTable>ausführen.  
  
 Beachten Sie, dass diese Anweisungen nicht als Batch Prozess ausgeführt werden. jede Zeile wird einzeln aktualisiert. Eine Anwendung kann die <xref:System.Data.DataSet.GetChanges%2A>-Methode in Situationen, in denen Sie die Reihenfolge der Anweisungstypen steuern müssen (z. b. vor Updates einfügen). Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Wenn INSERT-, Update-oder DELETE-Anweisungen nicht angegeben wurden, generiert die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode eine Ausnahme. Sie können jedoch eine <xref:System.Data.SqlClient.SqlCommandBuilder>-oder <xref:System.Data.OleDb.OleDbCommandBuilder>-Objekt erstellen, um automatisch SQL-Anweisungen für Aktualisierungen in einer Tabelle zu generieren, wenn Sie die `SelectCommand`-Eigenschaft eines .NET Framework Datenanbieters festlegen. Anschließend werden alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen, vom **CommandBuilder**generiert. Diese Generierungs Logik erfordert, dass Schlüssel Spalten Informationen im <xref:System.Data.DataSet>vorhanden sind. Weitere Informationen finden Sie [unter Erstellen von Befehlen mit CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode ruft Zeilen aus der Tabelle ab, die in der ersten Zuordnung aufgeführt ist, bevor ein Update durchgeführt wird. Der <xref:System.Data.Common.DbDataAdapter.Update%2A> aktualisiert dann die Zeile mit dem Wert der <xref:System.Data.IDbCommand.UpdatedRowSource%2A>-Eigenschaft. Alle zurückgegebenen zusätzlichen Zeilen werden ignoriert.  
  
 Nachdem alle Daten wieder in den <xref:System.Data.DataSet>geladen wurden, wird das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis ausgelöst, sodass der Benutzer die abgeglichen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter, die vom Befehl zurückgegeben werden, überprüfen kann. Nachdem eine Zeile erfolgreich aktualisiert wurde, werden die Änderungen an dieser Zeile akzeptiert.  
  
 Wenn Sie <xref:System.Data.Common.DbDataAdapter.Update%2A>verwenden, sieht die Reihenfolge der Ausführung wie folgt aus:  
  
1.  Die Werte in den <xref:System.Data.DataRow> werden in die Parameterwerte verschoben.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl wird ausgeführt.  
  
4.  Wenn der Befehl auf `FirstReturnedRecord`festgelegt ist, wird das erste zurückgegebene Ergebnis in die <xref:System.Data.DataRow>eingefügt.  
  
5.  Wenn Ausgabeparameter vorhanden sind, werden Sie in der <xref:System.Data.DataRow>platziert.  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jedem der <xref:System.Data.Common.DbDataAdapter> zugeordneten Befehl ist in der Regel eine Parameter Auflistung zugeordnet. Parameter werden der aktuellen Zeile über die Eigenschaften `SourceColumn` und `SourceVersion` der `Parameter` Klasse eines .NET Framework Datenanbieters zugeordnet. `SourceColumn` verweist auf eine <xref:System.Data.DataTable> Spalte, auf die der <xref:System.Data.Common.DbDataAdapter> verweist, um Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn` verweist auf den Namen der nicht zugeordneten Spalte, bevor Tabellen Zuordnungen angewendet wurden. Wenn `SourceColumn` auf eine nicht vorhandene Spalte verweist, hängt die ausgeführte Aktion von einem der folgenden <xref:System.Data.MissingMappingAction> Werte ab.  
  
|Enumerationswert|Ausgeführte Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Quell Spaltennamen und Tabellennamen in der <xref:System.Data.DataSet>, wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Eine <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt werden, ist eine fehlende Zuordnung für einen Eingabeparameter in der Regel das Ergebnis eines Fehlers.|  
|`MissingMappingAction.Error`|Eine <xref:System.SystemException> wird generiert.|  
  
 Die `SourceColumn`-Eigenschaft wird auch verwendet, um den Wert für die Ausgabe-oder Eingabe-/Ausgabeparameter wieder dem `DataSet`zuzuordnen. Eine Ausnahme wird generiert, wenn Sie auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion`-Eigenschaft der `Parameter`-Klasse eines .NET Framework Datenanbieters bestimmt, ob die ursprüngliche, aktuelle oder vorgeschlagene Version des Spaltenwerts verwendet werden soll. Diese Funktion wird häufig verwendet, um ursprüngliche Werte in die WHERE-Klausel einer Update-Anweisung einzuschließen, um auf Verletzungen der vollständigen Parallelität zu prüfen.  
  
> [!NOTE]
>  Wenn beim Aktualisieren einer Zeile ein Fehler auftritt, wird eine Ausnahme ausgelöst, und die Ausführung des Updates wird nicht mehr unterstützt. Um den Aktualisierungs Vorgang fortzusetzen, ohne beim Auftreten eines Fehlers Ausnahmen zu erzeugen, legen Sie die <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>-Eigenschaft auf `true` fest, bevor Sie <xref:System.Data.Common.DbDataAdapter.Update%2A>aufrufen. Sie können auch im `RowUpdated`-Ereignis eines DataAdapter auf zeilenweise auf Fehler reagieren. Wenn Sie den Aktualisierungs Vorgang fortsetzen möchten, ohne eine Ausnahme innerhalb des `RowUpdated` Ereignisses zu erzeugen, legen Sie die <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>-Eigenschaft des <xref:System.Data.Common.RowUpdatedEventArgs> auf <xref:System.Data.UpdateStatus.Continue>fest.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse (<xref:System.Data.OleDb.OleDbDataAdapter>) verwendet, um die Datenquelle zu aktualisieren.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.SystemException">Es ist keine zu aktualisierende <see cref="T:System.Data.DataRow" /> vorhanden.  
  
- oder - 
Es ist keine zu aktualisierende <see cref="T:System.Data.DataTable" /> vorhanden.  
  
- oder - 
Es ist kein <see cref="T:System.Data.DataSet" /> vorhanden, das als Quelle verwendet werden kann.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Bearbeiten von Daten (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] * System.Data.Common.DataTableMapping -&gt; int" Usage="dbDataAdapter.Update (dataRows, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">Ein Array von <see cref="T:System.Data.DataRow" />-Objekten, mit denen die Datenquelle aktualisiert wird.</param>
        <param name="tableMapping">Die zu verwendende <see cref="P:System.Data.IDataAdapter.TableMappings" />-Auflistung.</param>
        <summary>Aktualisiert die Werte in der Datenbank, indem für jede eingefügte, aktualisierte oder gelöschte Zeile im angegebenen Array von <see cref="T:System.Data.DataSet" />-Objekten die INSERT-Anweisung, die UPDATE-Anweisung bzw. die DELETE-Anweisung ausgeführt werden.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode aufruft, wird die <xref:System.Data.DataRow.RowState%2A>-Eigenschaft vom <xref:System.Data.Common.DbDataAdapter> überprüft, und die erforderlichen INSERT-, Update-oder DELETE-Anweisungen werden iterativ für jede Zeile ausgeführt, basierend auf der Reihenfolge der im <xref:System.Data.DataSet>konfigurierten Indizes. Beispielsweise kann <xref:System.Data.Common.DbDataAdapter.Update%2A> eine DELETE-Anweisung, gefolgt von einer INSERT-Anweisung, und dann eine weitere DELETE-Anweisung aufgrund der Reihenfolge der Zeilen in der <xref:System.Data.DataTable>ausführen.  
  
 Beachten Sie, dass diese Anweisungen nicht als Batch Prozess ausgeführt werden. jede Zeile wird einzeln aktualisiert. Eine Anwendung kann die <xref:System.Data.DataSet.GetChanges%2A>-Methode in Situationen, in denen Sie die Reihenfolge der Anweisungstypen steuern müssen (z. b. vor Updates einfügen). Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Wenn INSERT-, Update-oder DELETE-Anweisungen nicht angegeben wurden, generiert die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode eine Ausnahme. Sie können jedoch eine <xref:System.Data.SqlClient.SqlCommandBuilder>-oder <xref:System.Data.OleDb.OleDbCommandBuilder>-Objekt erstellen, um automatisch SQL-Anweisungen für Aktualisierungen in einer Tabelle zu generieren, wenn Sie die `SelectCommand`-Eigenschaft eines .NET Framework Datenanbieters festlegen. Anschließend werden alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen, vom **CommandBuilder**generiert. Diese Generierungs Logik erfordert, dass Schlüssel Spalten Informationen im <xref:System.Data.DataSet>vorhanden sind. Weitere Informationen finden Sie [unter Erstellen von Befehlen mit CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode ruft Zeilen aus der Tabelle ab, die in der ersten Zuordnung aufgeführt ist, bevor ein Update durchgeführt wird. Der <xref:System.Data.Common.DbDataAdapter.Update%2A> aktualisiert dann die Zeile mit dem Wert der <xref:System.Data.IDbCommand.UpdatedRowSource%2A>-Eigenschaft. Alle zurückgegebenen zusätzlichen Zeilen werden ignoriert.  
  
 Nachdem alle Daten wieder in den <xref:System.Data.DataSet>geladen wurden, wird das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis ausgelöst, sodass der Benutzer die abgeglichen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter, die vom Befehl zurückgegeben werden, überprüfen kann. Nachdem eine Zeile erfolgreich aktualisiert wurde, werden die Änderungen an dieser Zeile akzeptiert.  
  
 Wenn Sie <xref:System.Data.Common.DbDataAdapter.Update%2A>verwenden, sieht die Reihenfolge der Ausführung wie folgt aus:  
  
1.  Die Werte in den <xref:System.Data.DataRow> werden in die Parameterwerte verschoben.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl wird ausgeführt.  
  
4.  Wenn der Befehl auf `FirstReturnedRecord`festgelegt ist, wird das erste zurückgegebene Ergebnis in die <xref:System.Data.DataRow>eingefügt.  
  
5.  Wenn Ausgabeparameter vorhanden sind, werden Sie in der <xref:System.Data.DataRow>platziert.  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jedem der <xref:System.Data.Common.DbDataAdapter> zugeordneten Befehl ist in der Regel eine Parameter Auflistung zugeordnet. Parameter werden der aktuellen Zeile über die Eigenschaften `SourceColumn` und `SourceVersion` der `Parameter` Klasse eines .NET Framework Datenanbieters zugeordnet. `SourceColumn` verweist auf eine <xref:System.Data.DataTable> Spalte, auf die der <xref:System.Data.Common.DbDataAdapter> verweist, um Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn` verweist auf den Namen der nicht zugeordneten Spalte, bevor Tabellen Zuordnungen angewendet wurden. Wenn `SourceColumn` auf eine nicht vorhandene Spalte verweist, hängt die ausgeführte Aktion von einem der folgenden <xref:System.Data.MissingMappingAction> Werte ab.  
  
|Enumerationswert|Ausgeführte Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Quell Spaltennamen und Tabellennamen in der <xref:System.Data.DataSet>, wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Eine <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt werden, ist eine fehlende Zuordnung für einen Eingabeparameter in der Regel das Ergebnis eines Fehlers.|  
|`MissingMappingAction.Error`|Eine <xref:System.SystemException> wird generiert.|  
  
 Die `SourceColumn`-Eigenschaft wird auch verwendet, um den Wert für die Ausgabe-oder Eingabe-/Ausgabeparameter wieder dem `DataSet`zuzuordnen. Eine Ausnahme wird generiert, wenn Sie auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion`-Eigenschaft der `Parameter`-Klasse eines .NET Framework Datenanbieters bestimmt, ob die ursprüngliche, aktuelle oder vorgeschlagene Version des Spaltenwerts verwendet werden soll. Diese Funktion wird häufig verwendet, um ursprüngliche Werte in die WHERE-Klausel einer Update-Anweisung einzuschließen, um auf Verletzungen der vollständigen Parallelität zu prüfen.  
  
> [!NOTE]
>  Wenn beim Aktualisieren einer Zeile ein Fehler auftritt, wird eine Ausnahme ausgelöst, und die Ausführung des Updates wird nicht mehr unterstützt. Um den Aktualisierungs Vorgang fortzusetzen, ohne beim Auftreten eines Fehlers Ausnahmen zu erzeugen, legen Sie die <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>-Eigenschaft auf `true` fest, bevor Sie <xref:System.Data.Common.DbDataAdapter.Update%2A>aufrufen. Sie können auch im `RowUpdated`-Ereignis eines DataAdapter auf zeilenweise auf Fehler reagieren. Wenn Sie den Aktualisierungs Vorgang fortsetzen möchten, ohne eine Ausnahme innerhalb des `RowUpdated` Ereignisses zu erzeugen, legen Sie die <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>-Eigenschaft des <xref:System.Data.Common.RowUpdatedEventArgs> auf <xref:System.Data.UpdateStatus.Continue>fest.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.SystemException">Es ist keine zu aktualisierende <see cref="T:System.Data.DataRow" /> vorhanden.  
  
- oder - 
Es ist keine zu aktualisierende <see cref="T:System.Data.DataTable" /> vorhanden.  
  
- oder - 
Es ist kein <see cref="T:System.Data.DataSet" /> vorhanden, das als Quelle verwendet werden kann.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Bearbeiten von Daten (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Update (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Das zum Aktualisieren der Datenquelle zu verwendende <see cref="T:System.Data.DataSet" />.</param>
        <param name="srcTable">Der Name der Quelltabelle, die für die Tabellenzuordnung verwendet werden soll.</param>
        <summary>Aktualisiert die Werte in der Datenbank, indem es die jeweiligen Anweisungen „Einfügen“, „Aktualisieren“ oder „Löschen“ für jede eingefügte, aktualisierte oder gelöschte Zeile in dem <see cref="T:System.Data.DataSet" /> mit dem angegebenen <see cref="T:System.Data.DataTable" />-Namen ausführt.</summary>
        <returns>Die Anzahl der erfolgreich aktualisierten Zeilen im <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Anwendung die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode aufruft, wird die <xref:System.Data.DataRow.RowState%2A>-Eigenschaft vom <xref:System.Data.Common.DbDataAdapter> überprüft, und die erforderlichen INSERT-, Update-oder DELETE-Anweisungen werden iterativ für jede Zeile ausgeführt, basierend auf der Reihenfolge der im <xref:System.Data.DataSet>konfigurierten Indizes. Beispielsweise kann <xref:System.Data.Common.DbDataAdapter.Update%2A> eine DELETE-Anweisung, gefolgt von einer INSERT-Anweisung, und dann eine weitere DELETE-Anweisung aufgrund der Reihenfolge der Zeilen in der <xref:System.Data.DataTable>ausführen.  
  
 Beachten Sie, dass diese Anweisungen nicht als Batch Prozess ausgeführt werden. jede Zeile wird einzeln aktualisiert. Eine Anwendung kann die <xref:System.Data.DataSet.GetChanges%2A>-Methode in Situationen, in denen Sie die Reihenfolge der Anweisungstypen steuern müssen (z. b. vor Update einfügen). Weitere Informationen finden Sie unter [Aktualisieren von Datenquellen mit DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Wenn INSERT-, Update-oder DELETE-Anweisungen nicht angegeben wurden, generiert die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode eine Ausnahme. Sie können jedoch eine <xref:System.Data.SqlClient.SqlCommandBuilder>-oder <xref:System.Data.OleDb.OleDbCommandBuilder>-Objekt erstellen, um automatisch SQL-Anweisungen für Aktualisierungen in einer Tabelle zu generieren, wenn Sie die `SelectCommand`-Eigenschaft eines .NET Framework Datenanbieters festlegen. Anschließend werden alle zusätzlichen SQL-Anweisungen, die Sie nicht festlegen, vom **CommandBuilder**generiert. Diese Generierungs Logik erfordert, dass Schlüssel Spalten Informationen im <xref:System.Data.DataSet>vorhanden sind. Weitere Informationen finden Sie [unter Erstellen von Befehlen mit CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode unterstützt Szenarien, in denen die <xref:System.Data.DataSet> mehrere <xref:System.Data.DataTable> Objekte enthält, deren Namen sich nur in Groß-/Kleinschreibung Wenn mehrere Tabellen mit demselben Namen, aber unterschiedlichen groß-und Kleinbuchstaben in einer `DataSet`vorhanden sind, führt <xref:System.Data.Common.DbDataAdapter.Update%2A> einen Vergleich unter Beachtung der Groß-/Kleinschreibung aus, um die entsprechende Tabelle zu suchen, und generiert eine Ausnahme, wenn keine genaue Übereinstimmung Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 Wenn <xref:System.Data.Common.DbDataAdapter.Update%2A> aufgerufen wird und die <xref:System.Data.DataSet> nur eine <xref:System.Data.DataTable> enthält, deren Name sich nur in der Groß-/Kleinschreibung unterscheidet, wird diese <xref:System.Data.DataTable> aktualisiert. In diesem Szenario wird beim Vergleich die Groß-/Kleinschreibung nicht beachtet. Der folgende C# Code veranschaulicht dieses Verhalten.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Die <xref:System.Data.Common.DbDataAdapter.Update%2A>-Methode ruft Zeilen aus der Tabelle ab, die in der ersten Zuordnung aufgeführt ist, bevor ein Update durchgeführt wird. Der <xref:System.Data.Common.DbDataAdapter.Update%2A> aktualisiert dann die Zeile mit dem Wert der <xref:System.Data.IDbCommand.UpdatedRowSource%2A>-Eigenschaft. Alle zurückgegebenen zusätzlichen Zeilen werden ignoriert.  
  
 Nachdem alle Daten wieder in den <xref:System.Data.DataSet>geladen wurden, wird das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis ausgelöst, sodass der Benutzer die abgeglichen <xref:System.Data.DataSet> Zeile und alle Ausgabeparameter, die vom Befehl zurückgegeben werden, überprüfen kann. Nachdem eine Zeile erfolgreich aktualisiert wurde, werden die Änderungen an dieser Zeile akzeptiert.  
  
 Wenn Sie <xref:System.Data.Common.DbDataAdapter.Update%2A>verwenden, sieht die Reihenfolge der Ausführung wie folgt aus:  
  
1.  Die Werte in den <xref:System.Data.DataRow> werden in die Parameterwerte verschoben.  
  
2.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>-Ereignis wird ausgelöst.  
  
3.  Der Befehl wird ausgeführt.  
  
4.  Wenn der Befehl auf `FirstReturnedRecord`festgelegt ist, wird das erste zurückgegebene Ergebnis in die <xref:System.Data.DataRow>eingefügt.  
  
5.  Wenn Ausgabeparameter vorhanden sind, werden Sie in der <xref:System.Data.DataRow>platziert.  
  
6.  Das <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>-Ereignis wird ausgelöst.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> wird aufgerufen.  
  
 Jedem der <xref:System.Data.Common.DbDataAdapter> zugeordneten Befehl ist in der Regel eine Parameter Auflistung zugeordnet. Parameter werden der aktuellen Zeile über die Eigenschaften `SourceColumn` und `SourceVersion` der `Parameter` Klasse eines .NET Framework Datenanbieters zugeordnet. `SourceColumn` verweist auf eine <xref:System.Data.DataTable> Spalte, auf die der <xref:System.Data.Common.DbDataAdapter> verweist, um Parameterwerte für die aktuelle Zeile abzurufen.  
  
 `SourceColumn` verweist auf den Namen der nicht zugeordneten Spalte, bevor Tabellen Zuordnungen angewendet wurden. Wenn `SourceColumn` auf eine nicht vorhandene Spalte verweist, hängt die ausgeführte Aktion von einem der folgenden <xref:System.Data.MissingMappingAction> Werte ab.  
  
|Enumerationswert|Ausgeführte Aktion|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Verwenden Sie die Quell Spaltennamen und Tabellennamen in der <xref:System.Data.DataSet>, wenn keine Zuordnung vorhanden ist.|  
|`MissingMappingAction.Ignore`|Eine <xref:System.SystemException> wird generiert. Wenn die Zuordnungen explizit festgelegt werden, ist eine fehlende Zuordnung für einen Eingabeparameter in der Regel das Ergebnis eines Fehlers.|  
|`MissingMappingAction.Error`|Eine <xref:System.SystemException> wird generiert.|  
  
 Die `SourceColumn`-Eigenschaft wird auch verwendet, um den Wert für die Ausgabe-oder Eingabe-/Ausgabeparameter wieder dem `DataSet`zuzuordnen. Eine Ausnahme wird generiert, wenn Sie auf eine nicht vorhandene Spalte verweist.  
  
 Die `SourceVersion`-Eigenschaft der `Parameter`-Klasse eines .NET Framework Datenanbieters bestimmt, ob die ursprüngliche, aktuelle oder vorgeschlagene Version des Spaltenwerts verwendet werden soll. Diese Funktion wird häufig verwendet, um ursprüngliche Werte in die WHERE-Klausel einer Update-Anweisung einzuschließen, um auf Verletzungen der vollständigen Parallelität zu prüfen.  
  
> [!NOTE]
>  Wenn beim Aktualisieren einer Zeile ein Fehler auftritt, wird eine Ausnahme ausgelöst, und die Ausführung des Updates wird nicht mehr unterstützt. Um den Aktualisierungs Vorgang fortzusetzen, ohne beim Auftreten eines Fehlers Ausnahmen zu erzeugen, legen Sie die <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>-Eigenschaft auf `true` fest, bevor Sie <xref:System.Data.Common.DbDataAdapter.Update%2A>aufrufen. Sie können auch im `RowUpdated`-Ereignis eines DataAdapter auf zeilenweise auf Fehler reagieren. Wenn Sie den Aktualisierungs Vorgang fortsetzen möchten, ohne eine Ausnahme innerhalb des `RowUpdated` Ereignisses zu erzeugen, legen Sie die <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>-Eigenschaft des <xref:System.Data.Common.RowUpdatedEventArgs> auf <xref:System.Data.UpdateStatus.Continue>fest.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse (<xref:System.Data.OleDb.OleDbDataAdapter>) verwendet, um die Datenquelle zu aktualisieren.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Die Quelltabelle ist ungültig.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Der Versuch, eine INSERT-Anweisung, UPDATE-Anweisung oder DELETE-Anweisung auszuführen, ergab 0 (null) betroffene Datensätze.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Bearbeiten von Daten (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateBatchSize : int with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, mit dem die Batchverarbeitung aktiviert bzw. deaktiviert wird, und gibt die Anzahl der Befehle an, die pro Batch ausgeführt werden können.</summary>
        <value>Die Anzahl der Zeilen, die pro Batch verarbeitet werden.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Effekt 
 </description></listheader><item><term> 0 
 </term><description> Es gibt keine Beschränkung für die Batchgröße.  
  
 </description></item><item><term> 1 
 </term><description> Deaktiviert die Batchaktualisierung.  
  
 </description></item><item><term> &gt; 1 
 </term><description> Änderungen werden mit Batches von <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />-Operationen gleichzeitig übertragen.  
  
 </description></item></list>  

 Wenn Sie diesen Wert auf einen anderen Wert als 1 festlegen, muss für alle Befehle, die dem <see cref="T:System.Data.Common.DbDataAdapter" /> zugeordnet sind, die <see cref="P:System.Data.IDbCommand.UpdatedRowSource" />-Eigenschaft auf **None** oder **OutputParameters**festgelegt sein. Andernfalls wird eine Ausnahme ausgelöst.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A>-Eigenschaft, um eine Datenquelle mit Änderungen aus einem <xref:System.Data.DataSet>zu aktualisieren. Wenn der Datenanbieter die Batch Verarbeitung unterstützt, kann dies die Anwendungsleistung erhöhen, indem die Anzahl der Roundtrips zum Server reduziert wird. In ADO.NET 2,0 wird diese Eigenschaft für die .NET-Datenanbieter für SQL Server (SqlClient) und Oracle (OracleClient) unterstützt.  
  
 Die Ausführung eines extrem großen Batches könnte die Leistung verringern. Daher sollten Sie die Einstellung für eine optimale Batchgröße vor der Implementierung Ihrer Anwendung austesten.  
  
 Eine <xref:System.ArgumentOutOfRangeException> wird ausgelöst, wenn der Wert auf eine Zahl kleiner als 0 (null) festgelegt ist.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Bearbeiten von Daten (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Befehl ab, mit dem Datensätze in der Datenquelle aktualisiert werden, oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Data.IDbCommand" />, der während der Ausführung von <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> verwendet wird, um Datensätze in der Datenquelle zu aktualisieren, die geänderten Zeilen im Dataset entsprechen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft während <xref:System.Data.Common.DbDataAdapter.Update%2A>nicht festgelegt ist und Primärschlüssel Informationen in der <xref:System.Data.DataSet>vorhanden sind, wird die <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> automatisch generiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die abgeleitete-Klasse <xref:System.Data.OleDb.OleDbDataAdapter> erstellt und einige ihrer Eigenschaften festgelegt.  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Bearbeiten von Daten (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Übersicht über ADO.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>

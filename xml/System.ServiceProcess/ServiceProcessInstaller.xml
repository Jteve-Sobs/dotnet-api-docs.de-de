<Type Name="ServiceProcessInstaller" FullName="System.ServiceProcess.ServiceProcessInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="74aad05220b8b9baafe094a36186017d9fb3b424" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39778087" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProcessInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceProcessInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProcessInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProcessInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceProcessInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Installiert eine ausführbare Datei, die Klassen enthält, die <see cref="T:System.ServiceProcess.ServiceBase" /> erweitern. Diese Klasse wird von Installationsprogrammen, z. B. von InstallUtil.exe, beim Installieren einer Dienstanwendung aufgerufen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceProcess.ServiceProcessInstaller> funktioniert in eine ausführbare Datei für alle Dienste. Es wird vom Installationsprogramm zum Schreiben von Registrierungswerten für Dienste, die Sie installieren möchten.  
  
 Um einen Dienst zu installieren, erstellen Sie eine Installer-Klasse, die von erbt <xref:System.Configuration.Install.Installer>, und legen Sie die <xref:System.ComponentModel.RunInstallerAttribute> für die Klasse, um `true`. Instanziieren Sie innerhalb Ihres Projekts eine <xref:System.ServiceProcess.ServiceProcessInstaller> Instanz pro-dienstanwendung, und eine <xref:System.ServiceProcess.ServiceInstaller> Instanz für jeden Dienst in der Anwendung. Fügen Sie abschließend die <xref:System.ServiceProcess.ServiceProcessInstaller> Instanz und die <xref:System.ServiceProcess.ServiceInstaller> Instanzen der Installer-Klasse.  
  
 Wenn InstallUtil.exe ausgeführt wird, sieht das Dienstprogramm für Klassen in der Assembly des Diensts mit der <xref:System.ComponentModel.RunInstallerAttribute> festgelegt `true`. Die Dienstassembly Klassen hinzuzufügen, indem Sie sie zum Hinzufügen der <xref:System.Configuration.Install.Installer.Installers%2A> Projektinstallationsprogramms zugeordnete Auflistung. Wenn <xref:System.ComponentModel.RunInstallerAttribute> ist `false`, Installationsdienstprogramm ignoriert das Projektinstallationsprogramm.  
  
 Für eine Instanz von <xref:System.ServiceProcess.ServiceProcessInstaller>, enthalten Eigenschaften, die Sie ändern können, gibt an, dass eine dienstanwendung unter einem anderen Konto als dem angemeldeten Benutzer ausgeführt. Sie können angeben, dass eine bestimmte <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> und <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> Paar unter dem der Dienst ausgeführt werden soll, oder Sie können <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> um anzugeben, dass der Dienst unter dem Systemkonto des Computers, eine lokale oder NETZWERKDIENST-Konto oder ein Benutzerkonto ausgeführt werden.  
  
> [!NOTE]
>  Systemkonto des Computers ist nicht identisch mit dem Administratorkonto an.  
  
 Normalerweise Sie die Methoden nicht aufrufen, auf <xref:System.ServiceProcess.ServiceInstaller> innerhalb des Codes, werden sie in der Regel nur vom Installationsdienstprogramm aufgerufen. Das Installationsprogramm automatisch Ruft die <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> und <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> Methoden während der Installation. Fehler behoben, bei Bedarf durch den Aufruf <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (oder <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) für alle zuvor installierten Komponenten.  
  
 Einer Anwendung die Installationsroutine verwaltet automatisch Informationen über die Komponenten bereits installiert haben, Verwenden des Projektinstallationsprogramms <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Diese Statusinformationen werden fortlaufend aktualisiert, während die <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und alle <xref:System.ServiceProcess.ServiceInstaller> Instanz, die vom Hilfsprogramm installiert ist. Es ist normalerweise nicht für Ihren Code so ändern Sie diese Zustandsinformationen zu explizit erforderlich.  
  
 Instanziieren einer <xref:System.ServiceProcess.ServiceProcessInstaller> bewirkt, dass der Konstruktor der Basisklasse <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, aufgerufen werden.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein Projektinstallationsprogramm Namen MyProjectInstaller erstellt, die von erbt <xref:System.Configuration.Install.Installer>. Es wird vorausgesetzt, es ist eine ausführbare Datei, die zwei Dienste: "Hallo Welt-Dienst 1" enthält und "Hello-World-Dienst 2". Innerhalb des Konstruktors für MyProjectInstaller (dieser wird vom Installationsdienstprogramm aufgerufen werden), <xref:System.ServiceProcess.ServiceInstaller> Objekte werden für jeden Dienst erstellt und ein <xref:System.ServiceProcess.ServiceProcessInstaller> für die ausführbare Datei erstellt wird. Damit das Installationsprogramm MyProjectInstaller als gültiges Installationsprogramm erkennt die <xref:System.ComponentModel.RunInstallerAttribute> -Attributsatz auf `true`.  
  
 Optionale Eigenschaften werden für die Prozess- und die Service-Installationsprogramme festlegen, bevor die Installationsprogramme hinzugefügt werden die <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung. Bei der Installation auf MyProjectInstaller zugreift, die Objekte hinzugefügt, um die <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung durch einen Aufruf von <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> wiederum installiert werden soll. Während des Prozesses verwaltet das Installationsprogramm Zustandsinformationen, die angibt, welche Objekte installiert wurden, damit im Falle eines Fehlers bei Installation im Gegenzug jedes Objekt zurückgezogen werden kann.  
  
 Normalerweise würde Projektinstallationsprogramm-Klasse nicht explizit instanziiert. Sie erstellen und Hinzufügen der <xref:System.ComponentModel.RunInstallerAttribute>, aber das Installationsprogramm direkt aufgerufen und damit die Klasse instanziiert.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
    <altmember cref="P:System.Configuration.Install.Installer.Installers" />
    <altmember cref="T:System.ServiceProcess.ServiceAccount" />
    <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProcessInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProcessInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceAccount Account" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberSignature Language="VB.NET" Value="Public Property Account As ServiceAccount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceAccount Account { System::ServiceProcess::ServiceAccount get(); void set(System::ServiceProcess::ServiceAccount value); };" />
      <MemberSignature Language="F#" Value="member this.Account : System.ServiceProcess.ServiceAccount with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ des Kontos ab, unter dem die Dienstanwendung ausgeführt wird, oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.ServiceProcess.ServiceAccount" />, der den Typ des Kontos definiert, unter dem das System diesen Dienst ausführt. Der Standardwert ist <see langword="User" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> -Eigenschaft ist `User`, <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> und <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> Eigenschaften werden verwendet, um ein Konto zu definieren, unter dem die dienstanwendung ausgeführt wird.  
  
 Die <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> und <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> Paar kann der Dienst unter einem anderen Konto als dem Systemkonto ausgeführt werden. Dies z. B. kann der Dienst beim Neustart des Computers, automatisch gestartet wird, wenn kein Benutzer angemeldet ist. Wenn Sie entweder die <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> oder <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> keinen Wert angeben und <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> zu `User`, Sie werden für einen gültigen Benutzernamen und Kennwort bei der Installation aufgefordert.  
  
 Sie können auch angeben, der ausgeführt wird, unter dem lokalen Systemkonto oder als lokaler Dienst oder Netzwerkdienst. Finden Sie unter den <xref:System.ServiceProcess.ServiceAccount> Enumeration für Informationen zu den Arten von Konten.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="T:System.ServiceProcess.ServiceAccount" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceProcessInstaller.CopyFromComponent comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">Die <see cref="T:System.ComponentModel.IComponent" />, die den Dienstprozess darstellt.</param>
        <summary>Implementiert die <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />-Methode der Basisklasse ohne das für die <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />-Klasse spezifische Verhalten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sollte nicht in Ihrem Code aufgerufen werden. Die Methode der Basisklasse auf <xref:System.Configuration.Install.ComponentInstaller> ist `abstract`, sodass sie hier für die abgeleitete Klasse implementiert. Allerdings besteht keine <xref:System.ServiceProcess.ServiceProcessInstaller> mandantenklassen geltenden schemaanpassungen-Verarbeitung in die Implementierung der Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public override string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HelpText : string" Usage="System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Hilfetext ab, der zu den Installationsoptionen für Dienste angezeigt wird.</summary>
        <value>Hilfetext, der die Schritte zum Festlegen des Benutzernamens und Kennwortes beschreibt, wenn der Dienst unter einem bestimmten Konto ausgeführt werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Text kann verwendet werden, wenn ein Dienst manuell gestartet wird. Gibt an, die dem Benutzer Informationen zu Benutzername und Kennwort eingeben.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">Ein <see cref="T:System.Collections.IDictionary" /> mit Kontextinformationen für die Installation.</param>
        <summary>Schreibt Dienstanwendungsinformationen in die Registrierung. Diese Methode ist für die Verwendung durch Installationstools bestimmt, die die entsprechenden Methoden automatisch aufrufen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise Sie die Methoden nicht aufrufen, auf <xref:System.ServiceProcess.ServiceProcessInstaller> innerhalb des Codes, werden sie in der Regel nur vom Installationsdienstprogramm aufgerufen. Das Installationsprogramm automatisch Ruft die <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> Methode während der Installation. Fehler behoben, bei Bedarf durch den Aufruf <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> für alle zuvor installierten Komponenten. Diese Methode wird die Installation an der Basisklasse <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=nameWithType> Methode.  
  
 Normalerweise werden Sie nicht die Methoden aufrufen, auf <xref:System.ServiceProcess.ServiceInstaller> innerhalb des Codes, werden sie in der Regel nur vom Installationsdienstprogramm aufgerufen. Das Installationsprogramm automatisch Ruft die <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> und <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> Methoden während der Installation. Fehler behoben, bei Bedarf durch den Aufruf <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (oder <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) für alle zuvor installierten Komponenten  
  
 Einer Anwendung die Installationsroutine verwaltet automatisch Informationen über die Komponenten bereits installiert haben, Verwenden des Projektinstallationsprogramms <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Der übergebenen Zustandsinformationen, <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> als die `stateSaver` -Parameter wird fortlaufend aktualisiert, während die <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und alle <xref:System.ServiceProcess.ServiceInstaller> Instanz, die vom Hilfsprogramm installiert ist. Es ist normalerweise nicht für Ihren Code so ändern Sie diese Zustandsinformationen zu explizit erforderlich.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> übergeben an die aufrufende Methode von Basisklassenmethoden ausgelösten Ausnahmen oder <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> -Ereignishandler.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stateSaver" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Password : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das zugeordnete Kennwort des Benutzerkontos ab, unter dem die Dienstanwendung ausgeführt wird, oder legt dieses fest.</summary>
        <value>Das zugeordnete Kennwort des Benutzerkontos, unter dem die Dienstanwendung ausgeführt wird. Der Standardwert ist eine leere Zeichenfolge (""). Die Eigenschaft ist nicht öffentlich und wird nicht serialisiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> und <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> Paar kann der Dienst unter einem anderen Konto als dem Systemkonto ausgeführt werden. Dies z. B. kann der Dienst beim Neustart des Computers, automatisch gestartet wird, wenn kein Benutzer angemeldet ist.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> und <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> insofern sie nicht serialisiert oder werden, um den Installationsstatus gespeichert auf sichere Weise behandelt werden (des Projektinstallationsprogramms <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) oder einem anderen Speicherort mit öffentlichem Zugriff.  
  
 Festlegen der <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> und <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> kann ein Konto bei der Installation automatisch mit dem Dienst zugeordnet werden soll. Wenn Sie entweder die <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> oder <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> keinen Wert angeben und <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> zu `User`, Sie werden für einen gültigen Benutzernamen und Kennwort bei der Installation aufgefordert.  
  
 Eine weitere Möglichkeit zum Ausführen eines Dienstes unter einem anderen Konto ist die Verwendung von Systemkonto des Computers. Dieses Konto, das sich von dem Administratorkonto ist, ist kein Kennwort erforderlich. Berechtigungen für das Systemkonto können die von der derzeit angemeldete Benutzer überschreiten. Unter dem Systemkonto ausgeführt wird, statt ein Benutzerkontos Probleme, die vom Benutzer eine Berechtigung fehlen vermeidet, muss der Dienst  
  
 Wenn <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> ist jeder Wert außer `User`, das angegebene Konto (lokal oder Netzwerkdienst oder lokales System) wird verwendet, auch wenn die <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> und <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> Eigenschaften aufgefüllt werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Ein <see cref="T:System.Collections.IDictionary" /> mit Kontextinformationen für die Installation.</param>
        <summary>Führt ein Rollback der Informationen über Dienstanwendungen durch, die bei der Installation in die Registrierung geschrieben wurden. Diese Methode ist nur für die Verwendung durch Installationstools vorgesehen, die die entsprechenden Methoden automatisch verarbeiten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise Sie die Methoden nicht aufrufen, auf <xref:System.ServiceProcess.ServiceProcessInstaller> innerhalb des Codes, werden sie in der Regel nur vom Installationsdienstprogramm aufgerufen. Das Installationsprogramm automatisch Ruft die <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> Methode während der Installation. Fehler behoben, bei Bedarf durch den Aufruf <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> auf das Objekt, das die Ausnahme generiert hat.  
  
 Einer Anwendung die Installationsroutine verwaltet automatisch Informationen über die Komponenten bereits installiert haben, Verwenden des Projektinstallationsprogramms <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Der übergebenen Zustandsinformationen, <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> als die `savedState` -Parameter wird fortlaufend aktualisiert, während die <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und alle <xref:System.ServiceProcess.ServiceInstaller> Instanz, die vom Hilfsprogramm installiert ist. Es ist normalerweise nicht für Ihren Code so ändern Sie diese Zustandsinformationen zu explizit erforderlich.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> übergeben an die aufrufende Methode von Basisklassenmethoden ausgelösten Ausnahmen oder <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> -Ereignishandler.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="savedState" /> ist <see langword="null" />.  
  
- oder -  
<paramref name="savedState" /> ist beschädigt oder nicht vorhanden.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Username : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Benutzerkonto ab, unter dem die Dienstanwendung ausgeführt wird, oder legt dieses fest.</summary>
        <value>Das Konto, unter dem der Dienst ausgeführt werden soll. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> und <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> Paar kann der Dienst unter einem anderen Konto als dem Systemkonto ausgeführt werden. Dies z. B. kann der Dienst beim Neustart des Computers, automatisch gestartet wird, wenn kein Benutzer angemeldet ist.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> und <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> insofern sie nicht serialisiert oder werden, um den Installationsstatus gespeichert auf sichere Weise behandelt werden (des Projektinstallationsprogramms <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) oder einem anderen Speicherort mit öffentlichem Zugriff.  
  
 Festlegen der <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> und <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> kann ein Konto bei der Installation automatisch mit dem Dienst zugeordnet werden soll. Wenn Sie entweder die <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> oder <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> keinen Wert angeben und <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> zu `User`, Sie werden für einen gültigen Benutzernamen und Kennwort bei der Installation aufgefordert.  
  
 Eine weitere Möglichkeit zum Ausführen eines Dienstes unter einem anderen Konto ist die Verwendung von Systemkonto des Computers. Dieses Konto, das sich von dem Administratorkonto ist, ist kein Kennwort erforderlich. Berechtigungen für das Systemkonto können die von der derzeit angemeldete Benutzer überschreiten. Unter dem Systemkonto ausgeführt wird, statt ein Benutzerkontos Probleme, die vom Benutzer eine Berechtigung fehlen vermeidet, muss der Dienst  
  
 Wenn <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> ist jeder Wert außer `User`, das angegebene Konto (lokal oder Netzwerkdienst oder lokales System) wird verwendet, auch wenn die <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> und <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> Eigenschaften aufgefüllt werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
  </Members>
</Type>
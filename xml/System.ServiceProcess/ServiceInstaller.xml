<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="14a7817974ce9d1165d554af807dcafa580677b8" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37611980" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Installs a class that extends <see cref="T:System.ServiceProcess.ServiceBase" /> to implement a service. This class is called by the install utility when installing a service application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceProcess.ServiceInstaller> funktioniert speziell für den Dienst, mit denen sie zugeordnet ist. Es wird vom Installationsprogramm zum Schreiben von Registrierungswerten für den Dienst in einen Unterschlüssel des Registrierungsschlüssels HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services. Der Dienst wird durch ServiceName innerhalb dieser Unterschlüssel identifiziert. Außerdem enthält der Unterschlüssel der Name der ausführbaren Datei oder DLL-Datei, die der Dienst angehört.  
  
 Um einen Dienst zu installieren, erstellen Sie eine Installer-Klasse, die von erbt die <xref:System.Configuration.Install.Installer> Klasse, und legen die <xref:System.ComponentModel.RunInstallerAttribute> Attribut für die Klasse `true`. Erstellen Sie innerhalb Ihres Projekts eine <xref:System.ServiceProcess.ServiceProcessInstaller> Instanz pro-dienstanwendung, und eine <xref:System.ServiceProcess.ServiceInstaller> Instanz für jeden Dienst in der Anwendung. In Ihrem Projekt Installer-Klassenkonstruktor, legen Sie die Installationseigenschaften für den Dienst mithilfe der <xref:System.ServiceProcess.ServiceProcessInstaller> und <xref:System.ServiceProcess.ServiceInstaller> Instanzen aus, und fügen Sie die Instanzen der <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung.  
  
> [!NOTE]
>  Es wird empfohlen, dass Sie den Konstruktor verwenden, für das Hinzufügen von Instanzen des Installationsprogramms; Allerdings hinzugefügt werden sollen die <xref:System.Configuration.Install.Installer.Installers%2A> Sammlung in der <xref:System.ServiceProcess.ServiceInstaller.Install%2A> -Methode, achten Sie darauf, dass Sie dieselben Elemente hinzufügen der Sammlung in der <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methode.  
  
 Für alle Klassen, die von der <xref:System.Configuration.Install.Installer> Klasse, die den Status des der <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung muss identisch sein der <xref:System.ServiceProcess.ServiceInstaller.Install%2A> und <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methoden. Allerdings können Sie vermeiden, die Wartung der Auflistung über den <xref:System.ServiceProcess.ServiceInstaller.Install%2A> und <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methoden auf, wenn Sie Instanzen des Installationsprogramms hinzufügen der <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung im Klassenkonstruktor individuelles Installationsprogramm erstellt. Wenn das Installationsprogramm aufgerufen wird, sucht es nach der <xref:System.ComponentModel.RunInstallerAttribute> Attribut. Wenn das Attribut ist `true`, das Hilfsprogramm installiert alle Dienste, die hinzugefügt wurden, die <xref:System.Configuration.Install.Installer.Installers%2A> -Auflistung, die dem Projektinstallationsprogramm zugeordnet wurden. Wenn <xref:System.ComponentModel.RunInstallerAttribute> ist `false` oder ist nicht vorhanden ist, wird vom Installationsdienstprogramm ignoriert das Projektinstallationsprogramm.  
  
 Die <xref:System.ServiceProcess.ServiceProcessInstaller> mit Ihrem Projekt installiert Informationen, die in allen verknüpften <xref:System.ServiceProcess.ServiceInstaller> Instanzen im Projekt. Wenn dieser Dienst nichts, die sie von anderen Diensten im Projekt Installation trennt verfügt, wird dieser Dienst spezifischen Informationen von dieser Methode installiert.  
  
> [!NOTE]
>  Ist es entscheidend, die die <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> identisch sein, an die <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> die Sie von abgeleiteten Klasse <xref:System.ServiceProcess.ServiceBase>. Normalerweise wird der Wert, der die <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> Eigenschaft für den Dienst innerhalb der Main()-Funktion der dienstanwendung ausführbaren Datei festgelegt wird. Der Dienststeuerungs-Manager verwendet die <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> Eigenschaft, um den Dienst in diese ausführbare Datei zu suchen.  
  
 Können Sie andere Eigenschaften ändern, auf die <xref:System.ServiceProcess.ServiceInstaller> entweder vor oder nach dem Hinzufügen zu den <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung von Projektinstallationsprogramms. Z. B. eines Diensts <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> kann festgelegt werden, starten Sie den Dienst automatisch beim Neustart oder ein Benutzer den Dienst manuell starten.  
  
 Normalerweise werden Sie nicht die Methoden aufrufen, auf <xref:System.ServiceProcess.ServiceInstaller> innerhalb des Codes, werden sie in der Regel nur vom Installationsdienstprogramm aufgerufen. Das Installationsprogramm automatisch Ruft die <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> und <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> Methoden während der Installation. Fehler behoben, bei Bedarf durch den Aufruf <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (oder <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) für alle zuvor installierten Komponenten.  
  
 Ruft das Installationsprogramm <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> zum Entfernen des Objekts.  
  
 Einer Anwendung die Installationsroutine verwaltet automatisch Informationen über die Komponenten bereits installiert haben, Verwenden des Projektinstallationsprogramms <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Diese Statusinformationen werden fortlaufend aktualisiert, während die <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz, und jedes <xref:System.ServiceProcess.ServiceInstaller> Instanz, die vom Hilfsprogramm installiert ist. Es ist normalerweise nicht erforderlich für Ihren Code, Zustandsinformationen zu explizit zu ändern.  
  
 Wenn die Installation ausgeführt wird, erstellt es automatisch eine <xref:System.Diagnostics.EventLogInstaller> So installieren Sie die Ereignisprotokoll-Quelle zugeordnet der <xref:System.ServiceProcess.ServiceBase> abgeleitete Klasse. Die <xref:System.Diagnostics.EventLog.Log%2A> -Eigenschaft für diese Quelle wird festgelegt, indem die <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Konstruktor in Anwendungsprotokoll des Computers. Beim Festlegen der <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> von der <xref:System.ServiceProcess.ServiceInstaller> (, identisch sein sollte die <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> des Diensts), wird die <xref:System.Diagnostics.EventLog.Source%2A> automatisch auf den gleichen Wert festgelegt ist. In ein Installationsfehler ist die Installation der Quelle Rollback, zusammen mit bereits installierten Diensten.  
  
 Die <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methode versucht, den Dienst zu beenden, wenn er ausgeführt wird. Gibt an, ob dies oder nicht erfolgreich ist <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> macht die Änderungen durch <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. Wenn eine neue Quelle für die ereignisprotokollierung erstellt wurde, wird die Quelle gelöscht.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein Projektinstallationsprogramm namens `MyProjectInstaller`, erbt von <xref:System.Configuration.Install.Installer>. Es wird vorausgesetzt, es ist eine ausführbare Datei, die zwei Dienste: "Hallo Welt-Dienst 1" enthält und "Hello-World-Dienst 2". Innerhalb des Konstruktors für `MyProjectInstaller` (die würde aufgerufen werden vom Installationsprogramm), <xref:System.ServiceProcess.ServiceInstaller> Objekte werden erstellt, für beide Dienste sind, sowie einen <xref:System.ServiceProcess.ServiceProcessInstaller> für die ausführbare Datei erstellt wird. Damit das Installationsprogramm erkennt `MyProjectInstaller` als gültiges Installationsprogramm, das <xref:System.ComponentModel.RunInstallerAttribute> -Attributsatz auf `true`.  
  
 Optionale Eigenschaften werden für die Prozess- und die Service-Installationsprogramme festlegen, bevor die Installationsprogramme hinzugefügt werden die <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung. Wenn das Installationsprogramm auf zugreift `MyProjectInstaller`, die Objekte, die hinzugefügt, die <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung durch einen Aufruf von <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> wiederum installiert werden soll. Während des Prozesses verwaltet das Installationsprogramm Zustandsinformationen, die angibt, welche Objekte installiert wurden, damit die jeweils wiederum kann gesichert werden Wenn ein Installationsfehler auftritt.  
  
 Sie würden eine Instanz des Projektinstallationsprogramm-Klasse in der Regel nicht explizit erstellen. Sie erstellen und Hinzufügen der <xref:System.ComponentModel.RunInstallerAttribute> -Attribut auf die Syntax, aber es ist das Install-Hilfsprogramm, die tatsächlich aufruft, und damit die Klasse instanziiert.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceInstaller" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um einen Dienst zu installieren, erstellen Sie eine Installer-Klasse, die von erbt die <xref:System.Configuration.Install.Installer> Klasse, und legen die <xref:System.ComponentModel.RunInstallerAttribute> Attribut für die Klasse `true`. Erstellen Sie innerhalb Ihres Projekts eine <xref:System.ServiceProcess.ServiceProcessInstaller> Instanz pro-dienstanwendung, und eine <xref:System.ServiceProcess.ServiceInstaller> Instanz für jeden Dienst in der Anwendung. In Ihrem Projekt Installer-Klassenkonstruktor, legen Sie die Installationseigenschaften für den Dienst mithilfe der <xref:System.ServiceProcess.ServiceProcessInstaller> und <xref:System.ServiceProcess.ServiceInstaller> Instanzen aus, und fügen Sie die Instanzen der <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung.  
  
 Die <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Konstruktor generiert automatisch ein Ereignisprotokoll, deren Quelle <xref:System.Diagnostics.EventLog.Log%2A> -Eigenschaftensatz auf Anwendungsprotokoll des Computers, und ein <xref:System.Diagnostics.EventLogInstaller>. Beim Festlegen der <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> von der <xref:System.ServiceProcess.ServiceInstaller>, identisch sein sollte die <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> des Diensts, der <xref:System.Diagnostics.EventLog.Source%2A> Eigenschaft des Ereignisprotokolls wird automatisch auf den gleichen Wert festgelegt. Die Quelle wird im Falle eines Fehlers bei Installation automatisch gelöscht.  
  
 Die <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Konstruktor legt die <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> Eigenschaft `ServiceStartMode.Manual` um anzugeben, dass ein Benutzer den Dienst zu starten. Sie können die Eigenschaft zurücksetzen `ServiceStartMode.Automatic` um anzugeben, dass der Dienst gestartet wird, wenn der Computer neu startet.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> from which to copy.</param>
        <summary>Copies properties from an instance of <see cref="T:System.ServiceProcess.ServiceBase" /> to this installer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird nur selten im Code aufgerufen werden. <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> wird in der Regel nur von Designern aufgerufen werden.  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> Speichert den Dienstnamen, der die `component` Parameter, um die <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> von der <xref:System.ServiceProcess.ServiceInstaller> Instanz. (Da der Parameter eine Instanz einer Klasse sein muss, die von abgeleitet <xref:System.ServiceProcess.ServiceBase>, `component` wird garantiert ein <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> Eigenschaft.)  
  
> [!NOTE]
>  Wenn Sie Visual Studio-Designer verwenden, wird diese Methode aufgerufen, zur Entwurfszeit, wenn der Benutzer klickt `Add Installer` auf eine Komponente, die diese Klasse als Installationsprogramm angegeben. Das Installationsprogramm hat alle Informationen wie möglich aus der aktuellen Komponente und speichert sie für die Verwendung bei der Installation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The component you are associating with this installer does not inherit from <see cref="T:System.ServiceProcess.ServiceBase" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the service should be delayed from starting until other automatically started services are running.</summary>
        <value>
          <see langword="true" /> Starten Sie auf die automatische Verzögerung des Diensts; andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> Eigenschaft kann für jeden Dienst angewendet werden, aber es wird ignoriert, es sei denn, der Startmodus des Diensts ist <xref:System.ServiceProcess.ServiceStartMode.Automatic>. Die Einstellung wird wirksam, das nächste Mal, die das System neu gestartet wird. Der Dienststeuerungs-Manager ist nicht mit eine bestimmten Startzeit für den Dienst sichergestellt.  
  
 Ein verzögerter automatischer Start-Service darf nicht Mitglied einer Gruppe sortieren Auslastung sein, aber sie können sich je nach einem anderen Dienst für den automatischen Start. Wenn eine Anwendung einen verzögerten automatischen Start-Dienst aufruft, bevor sie geladen wird, schlägt der Aufruf fehl.  
  
 Beim Festlegen dieser Eigenschaft auf Betriebssystemen, die nicht verzögerten automatischen Start unterstützen, hat keine Auswirkungen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the description for the service.</summary>
        <value>Die Beschreibung des Dienstes. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.ServiceProcess.ServiceInstaller.Description%2A> Eigenschaft, um den Zweck der installierte Dienst für den Benutzer angeben. Der Benutzer kann in Anwendungen, die Details für die installierten Dienste anzeigen, die Beschreibung des Diensts anzeigen.  
  
 Z. B. mithilfe von Windows XP, oder Sie können die Beschreibung des Diensts mit dem Dienststeuerungs-Befehlszeilenprogramm (Sc.exe) anzeigen, sehen Sie die Beschreibung des Diensts in der **Services** Knoten die **Computerverwaltung ** Konsole.  
  
   
  
## Examples  
 Das folgende Codebeispiel legt die Eigenschaften für eine neue Windows-dienstanwendung fest. Im Beispiel wird der Dienstname, zusammen mit den Anzeigenamen und eine Beschreibung an. Nach dem Zuweisen der Eigenschaften für den Dienst an, das Beispiel fügt die <xref:System.ServiceProcess.ServiceInstaller> -Objekt an die <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung.  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the friendly name that identifies the service to the user.</summary>
        <value>Der Name, der Verbindung mit dem Dienst, der häufig für interaktive Tools verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> wird verwendet, z. B. in der Dienststeuerungs-Manager einen Benutzer lesbaren beschreibenden Namen für den Dienst bereitstellen. Die <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> ist ein Registrierungswert, aber niemals als ein Registrierungsschlüssel verwendet. Aus diesem Grund Einschränkungen für die <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Eigenschaftswert gelten nicht. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> wird als den Registrierungsschlüssel HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services verwendet werden, damit er beschränkt ist.  
  
 Der Anzeigename ist nie vom Installationsdienstprogramm verwendet, um den Dienst zu identifizieren, daher gibt es keine Einschränkungen für die Wahl des Namens, wie bei der <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
        <summary>Installs the service by writing service application information to the registry. This method is meant to be used by installation tools, which process the appropriate methods automatically.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise werden Sie nicht die Methoden aufrufen, auf <xref:System.ServiceProcess.ServiceInstaller> innerhalb des Codes, werden sie in der Regel nur vom Installationsdienstprogramm aufgerufen. Das Installationsprogramm automatisch Ruft die <xref:System.ServiceProcess.ServiceInstaller.Install%2A> Methode während der Installation. Fehler behoben, bei Bedarf durch den Aufruf <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> auf das Objekt, das die Ausnahme generiert hat.  
  
 Einer Anwendung die Installationsroutine verwaltet automatisch Informationen über die Komponenten, die mithilfe des Projektinstallationsprogramms bereits installiert wurden, <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Der übergebenen Zustandsinformationen, <xref:System.ServiceProcess.ServiceInstaller.Install%2A> als die `stateSaver` -Parameter wird fortlaufend aktualisiert, während die <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und alle <xref:System.ServiceProcess.ServiceInstaller> Instanz, die vom Hilfsprogramm installiert ist. Es ist normalerweise nicht für Ihren Code so ändern Sie diese Zustandsinformationen zu explizit erforderlich.  
  
 Die <xref:System.ServiceProcess.ServiceProcessInstaller> mit Ihrem Projekt installiert Informationen, die in allen verknüpften <xref:System.ServiceProcess.ServiceInstaller> Instanzen im Projekt. Wenn dieser Dienst nichts, die sie von anderen Diensten im Projekt Installation trennt verfügt, wird dieser Dienst spezifischen Informationen von dieser Methode installiert.  
  
 Um einen Dienst zu installieren, erstellen Sie eine Installer-Klasse, die von erbt die <xref:System.Configuration.Install.Installer> Klasse, und legen die <xref:System.ComponentModel.RunInstallerAttribute> Attribut für die Klasse `true`. Erstellen Sie innerhalb Ihres Projekts eine <xref:System.ServiceProcess.ServiceProcessInstaller> Instanz pro-dienstanwendung, und eine <xref:System.ServiceProcess.ServiceInstaller> Instanz für jeden Dienst in der Anwendung. In Ihrem Projekt Installer-Klassenkonstruktor, legen Sie die Installationseigenschaften für den Dienst mithilfe der <xref:System.ServiceProcess.ServiceProcessInstaller> und <xref:System.ServiceProcess.ServiceInstaller> Instanzen aus, und fügen Sie die Instanzen der <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung.  
  
> [!NOTE]
>  Es wird empfohlen, dass Sie den Konstruktor verwenden, für das Hinzufügen von Instanzen des Installationsprogramms; Allerdings hinzugefügt werden sollen die <xref:System.Configuration.Install.Installer.Installers%2A> Sammlung in der <xref:System.ServiceProcess.ServiceInstaller.Install%2A> -Methode, achten Sie darauf, dass Sie dieselben Elemente hinzufügen der Sammlung in der <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methode.  
  
 Für alle Klassen, die von der <xref:System.Configuration.Install.Installer> Klasse, die den Status des der <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung muss identisch sein der <xref:System.ServiceProcess.ServiceInstaller.Install%2A> und <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methoden. Allerdings können Sie vermeiden, die Wartung der Auflistung über den <xref:System.ServiceProcess.ServiceInstaller.Install%2A> und <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methoden auf, wenn Sie Instanzen des Installationsprogramms hinzufügen der <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung im Klassenkonstruktor individuelles Installationsprogramm erstellt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The installation does not contain a <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> for the executable.  -or-  The file name for the assembly is <see langword="null" /> or an empty string.  -or-  The service name is invalid.  -or-  The Service Control Manager could not be opened.</exception>
        <exception cref="T:System.ArgumentException">The display name for the service is more than 255 characters in length.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The system could not generate a handle to the service.  -or-  A service with that name is already installed.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">A <see cref="T:System.Configuration.Install.ComponentInstaller" /> to which you are comparing the current installer.</param>
        <summary>Indicates whether two installers would install the same service.</summary>
        <returns>
          <see langword="true" /> if calling <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> on both of these installers would result in installing the same service; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> Gibt an, z. B., ob zwei Installationsprogramme den gleichen Dienst unter demselben Benutzerkonto installieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
        <summary>Rolls back service application information written to the registry by the installation procedure. This method is meant to be used by installation tools, which process the appropriate methods automatically.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise werden Sie nicht die Methoden aufrufen, auf <xref:System.ServiceProcess.ServiceInstaller> innerhalb des Codes, werden sie in der Regel nur vom Installationsdienstprogramm aufgerufen. Das Installationsprogramm automatisch Ruft die <xref:System.ServiceProcess.ServiceInstaller.Install%2A> Methode während der Installation. Fehler behoben, bei Bedarf durch den Aufruf <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> auf das Objekt, das die Ausnahme generiert hat.  
  
 Einer Anwendung die Installationsroutine verwaltet automatisch Informationen über die Komponenten bereits installiert haben, Verwenden des Projektinstallationsprogramms <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Der übergebenen Zustandsinformationen, <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> als die `savedState` -Parameter wird fortlaufend aktualisiert, während die <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und alle <xref:System.ServiceProcess.ServiceInstaller> Instanz, die vom Hilfsprogramm installiert ist. Es ist normalerweise nicht für Ihren Code so ändern Sie diese Zustandsinformationen zu explizit erforderlich.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the name used by the system to identify this service. This property must be identical to the <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> of the service you want to install.</summary>
        <value>Der Name des Diensts, der installiert werden. Dieser Wert muss festgelegt werden, bevor Sie das Installationsprogramm zur Installation des Diensts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ist es entscheidend, die die <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> identisch sein, an die <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> die Sie von abgeleiteten Klasse <xref:System.ServiceProcess.ServiceBase>. Normalerweise wird der Wert, der die <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> Eigenschaft für den Dienst innerhalb der Main()-Funktion der dienstanwendung ausführbaren Datei festgelegt wird. Der Dienststeuerungs-Manager verwendet die <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> Eigenschaft, um den Dienst in diese ausführbare Datei zu suchen.  
  
 Beim Festlegen der <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> von das Dienstinstallationsprogramm den <xref:System.Diagnostics.EventLog.Source%2A> des zugeordneten-Ereignisprotokolls auf den gleichen Wert festgelegt ist. Dadurch kann der Dienst automatisch Befehle (z. B. starten und beenden) Dienstaufrufe in das Anwendungsprotokoll auf dem Computer anmelden.  
  
> [!NOTE]
>  Wenn eine Quelle mit dem gleichen Namen bereits auf dem Computer, aber in ein anderes Protokoll als Anwendungsprotokoll vorhanden ist, wird eine Ausnahme ausgelöst werden. Wenn die Quelle vorhanden ist und das Anwendungsprotokoll zugeordnet ist, diese Quelle wird verwendet, um den Befehl ruft mit dem Dienst zu melden und keine Ausnahme ausgelöst wird.  
  
 Die <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> nicht `null` oder der Länge Null haben. Die maximale Größe beträgt 256 Zeichen. Darüber hinaus kann keine enthalten Schrägstriche, '/' oder '\\", oder Zeichen aus dem ASCII-Zeichensatz mit geringeren Wert als Dezimalwert 32.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> property is invalid.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the services that must be running for this service to run.</summary>
        <value>Ein Array von Diensten, die ausgeführt werden muss, bevor der diesem Installationsprogramm zugeordnete Dienst ausgeführt werden kann.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Dienst kann erfordern, andere Dienste ausgeführt werden, bevor er gestartet werden kann. Die Informationen in dieser Eigenschaft wird auf einen Schlüssel in der Registrierung geschrieben. Wenn der Benutzer (oder das System, bei der automatischen Start) versucht den Dienst ausgeführt, überprüft Service Control Manager (SCM) an, dass die Dienste im Array bereits gestartet wurde.  
  
 Wenn ein Dienst im Array nicht ausgeführt wird, versucht dienststeuerungs-Manager, um sie zu starten. Dazu gehören Dienste mit `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.  
  
 Wenn alle Dienste, von denen dieser Dienst abhängig ist, ein Fehler auftritt, starten, wird dieser Dienst nicht gestartet werden. Eine Ausnahme wird nicht ausgelöst, wenn das System nicht gestartet wird, da es ist keine Ausnahmebehandlung, die auf der Systemebene aus, um dies zu ermitteln. Entscheiden Sie, behandeln Fehler beim Starten des Diensts, und dies in Ihrem Code implementieren. In der Regel wird ein Dialogfeld für den Benutzer beim Start angezeigt, wenn ein Dienst nicht gestartet.  
  
 Wenn der Dienst nicht gestartet wird, wird ein Eintrag in das Anwendungsereignisprotokoll geschrieben.  
  
 Die Dienste, von denen dieser Dienst abhängt, müssen in die ausführbare Datei nicht.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates how and when this service is started.</summary>
        <value>Ein <see cref="T:System.ServiceProcess.ServiceStartMode" /> die darstellt, wie der Dienst wird gestartet. Der Standardwert ist <see langword="Manual" />, der angibt, dass der Dienst nach dem Neustart nicht automatisch gestartet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie die <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> angeben, dass der Dienst nach dem Neustart automatisch gestartet werden, oder, dass ein Benutzer den Dienst manuell starten muss. Ein Dienst kann auch deaktiviert werden gibt an, dass sie, entweder manuell oder programmgesteuert nicht gestartet werden kann, bis es aktiviert ist.  
  
 Sie können nicht geändert werden <xref:System.ServiceProcess.ServiceInstaller> Eigenschaftswerte nach der Installation. So ändern Sie die <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, Sie müssen entweder deinstallieren und installieren den Dienst oder ändern Sie die Einstellung mithilfe der Dienststeuerungs-Manager manuell.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The start mode is not a value of the <see cref="T:System.ServiceProcess.ServiceStartMode" /> enumeration.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
        <summary>Uninstalls the service by removing information about it from the registry.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deinstallieren Sie zuerst versucht, den Dienst zu beenden, bevor Sie es deinstallieren. Wenn der Dienst kann nicht beendet werden, wird keine Ausnahme erfasst und die Methode wird durch das Entfernen des Diensts weiter.  
  
 Normalerweise werden Sie nicht die Methoden aufrufen, auf <xref:System.ServiceProcess.ServiceInstaller> innerhalb des Codes, werden sie in der Regel nur vom Installationsdienstprogramm aufgerufen. InstallUtil verwendet wird, deinstallieren die Dienste als auch installieren. Deinstallieren von nimmt der Aufruf über die Befehlszeile einen Schalter.  
  
 Deinstallieren Sie eine Anwendung die Routine verwaltet Informationen zu den Komponenten automatisch deinstalliert wird, Verwenden des Projektinstallationsprogramms <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Der übergebenen Zustandsinformationen, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> als die `savedState` -Parameter wird fortlaufend aktualisiert, während die <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und alle <xref:System.ServiceProcess.ServiceInstaller> Instanz, die vom Hilfsprogramm installiert ist. Es ist normalerweise nicht für Ihren Code so ändern Sie diese Zustandsinformationen zu explizit erforderlich.  
  
 Für alle Klassen, die von der <xref:System.Configuration.Install.Installer> Klasse, die den Status des der <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung muss identisch sein der <xref:System.ServiceProcess.ServiceInstaller.Install%2A> und <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methoden. Allerdings können Sie vermeiden, die Wartung der Auflistung über den <xref:System.ServiceProcess.ServiceInstaller.Install%2A> und <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methoden auf, wenn Sie Instanzen des Installationsprogramms hinzufügen der <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung im Klassenkonstruktor individuelles Installationsprogramm erstellt.  
  
 Es gibt kein Rollback für die Deinstallation, damit ein Dienst nicht deinstalliert werden, dadurch nicht die anderen Dienste (in der Regel innerhalb des gleichen Installationsprojekts) deinstalliert wird beeinträchtigt wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">The Service Control Manager could not be opened.  -or-  The system could not get a handle to the service.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>
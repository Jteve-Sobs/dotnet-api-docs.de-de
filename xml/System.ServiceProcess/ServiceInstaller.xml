<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f78cfc1db066c8be4b05abe7cd28e7e8d7b4c12a" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86827173" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Installiert eine Klasse, die <see cref="T:System.ServiceProcess.ServiceBase" /> für die Implementierung eines Dienstes erweitert. Diese Klasse wird vom Installationsdienstprogramm beim Installieren einer Dienstanwendung aufgerufen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der funktioniert <xref:System.ServiceProcess.ServiceInstaller> speziell für den Dienst, dem er zugeordnet ist. Er wird vom Installationsprogramm verwendet, um dem Dienst zugeordnete Registrierungs Werte einem Unterschlüssel im Registrierungsschlüssel HKEY_LOCAL_MACHINE \system\currentcontrolset\services zu schreiben. Der Dienst wird durch seinen Dienstnamen in diesem Unterschlüssel identifiziert. Der Unterschlüssel enthält auch den Namen der ausführbaren Datei oder DLL-Datei, zu der der Dienst gehört.  
  
 Um einen Dienst zu installieren, erstellen Sie eine projektinstallerklasse, die von der <xref:System.Configuration.Install.Installer> -Klasse erbt, und legen Sie das- <xref:System.ComponentModel.RunInstallerAttribute> Attribut für die-Klasse auf fest `true` . Erstellen Sie in Ihrem Projekt eine <xref:System.ServiceProcess.ServiceProcessInstaller> Instanz pro Dienst Anwendung und eine <xref:System.ServiceProcess.ServiceInstaller> Instanz für jeden Dienst in der Anwendung. Legen Sie in Ihrem projekttinstallationskonstruktor die Installations Eigenschaften für den Dienst mithilfe der <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und der- <xref:System.ServiceProcess.ServiceInstaller> Instanz fest, und fügen Sie die-Instanzen der-Auflistung hinzu <xref:System.Configuration.Install.Installer.Installers%2A> .  
  
> [!NOTE]
>  Es wird empfohlen, dass Sie den-Konstruktor zum Hinzufügen von Installer-Instanzen verwenden. Wenn Sie jedoch der-Auflistung in der-Methode hinzufügen müssen, achten Sie darauf, dass Sie <xref:System.Configuration.Install.Installer.Installers%2A> <xref:System.ServiceProcess.ServiceInstaller.Install%2A> die gleichen Ergänzungen der-Auflistung in der- <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methode ausführen.  
  
 Für alle Klassen, die von der <xref:System.Configuration.Install.Installer> -Klasse abgeleitet werden, muss der Status der Auflistung <xref:System.Configuration.Install.Installer.Installers%2A> in den <xref:System.ServiceProcess.ServiceInstaller.Install%2A> Methoden und identisch sein <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> . Allerdings können Sie die Wartung der Auflistung <xref:System.ServiceProcess.ServiceInstaller.Install%2A> in den Methoden und vermeiden, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Wenn Sie der Auflistung <xref:System.Configuration.Install.Installer.Installers%2A> in Ihrem benutzerdefinierten installerklassenkonstruktor Installations Instanzen hinzufügen. Wenn das Installations Hilfsprogramm aufgerufen wird, sucht es nach dem- <xref:System.ComponentModel.RunInstallerAttribute> Attribut. Wenn das-Attribut ist `true` , installiert das-Hilfsprogramm alle Dienste, die der-Auflistung hinzugefügt wurden, die dem <xref:System.Configuration.Install.Installer.Installers%2A> Projekt Installationsprogramm zugeordnet wurden. Wenn <xref:System.ComponentModel.RunInstallerAttribute> ist `false` oder nicht vorhanden ist, ignoriert das Installations Dienstprogramm das Projekt Installationsprogramm.  
  
 Der <xref:System.ServiceProcess.ServiceProcessInstaller> , der der Projekt Installationsklasse zugeordnet ist, installiert Informationen, die allen <xref:System.ServiceProcess.ServiceInstaller> Instanzen im Projekt gemeinsam sind. Wenn für diesen Dienst etwas von den anderen Diensten im Installationsprojekt getrennt ist, werden diese Dienst spezifischen Informationen von dieser Methode installiert.  
  
> [!NOTE]
>  Es ist von entscheidender Bedeutung, dass <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> identisch mit der der Klasse ist, die <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> Sie von abgeleitet haben <xref:System.ServiceProcess.ServiceBase> . Normalerweise wird der Wert der <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> -Eigenschaft für den Dienst innerhalb der Main ()-Funktion der ausführbaren Datei der Dienst Anwendung festgelegt. Der Dienststeuerungs-Manager verwendet die- <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> Eigenschaft, um den Dienst innerhalb dieser ausführbaren Datei zu suchen.  
  
 Sie können andere Eigenschaften von <xref:System.ServiceProcess.ServiceInstaller> entweder vor oder nach dem Hinzufügen zur-Auflistung <xref:System.Configuration.Install.Installer.Installers%2A> Ihres projektinstallers ändern. Beispielsweise kann ein Dienst so <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> festgelegt werden, dass der Dienst beim Neustart automatisch gestartet wird, oder ein Benutzer muss den Dienst manuell starten.  
  
 Normalerweise werden Sie die Methoden nicht <xref:System.ServiceProcess.ServiceInstaller> innerhalb Ihres Codes aufrufen. Sie werden in der Regel nur vom Installations Dienstprogramm aufgerufen. Das Installationsprogramm ruft <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> während des Installationsvorgangs automatisch die-Methode und die- <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> Methode auf. Sie werden ggf. Fehler durch Aufrufen von <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (oder <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType> ) für alle zuvor installierten Komponenten gesichert.  
  
 Vom Installationsprogramm wird aufgerufen <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> , um das Objekt zu entfernen.  
  
 Mit der Installationsroutine einer Anwendung werden Informationen zu den bereits installierten Komponenten automatisch verwaltet. dabei werden die-Installationsdateien des Projekts verwendet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> . Diese Zustandsinformationen werden fortlaufend als <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz aktualisiert, und jede <xref:System.ServiceProcess.ServiceInstaller> Instanz wird vom-Hilfsprogramm installiert. Es ist in der Regel nicht erforderlich, dass der Code Zustandsinformationen explizit ändert.  
  
 Wenn die Installation durchgeführt wird, wird automatisch ein erstellt, <xref:System.Diagnostics.EventLogInstaller> um die Ereignisprotokoll Quelle zu installieren, die der <xref:System.ServiceProcess.ServiceBase> abgeleiteten Klasse zugeordnet ist. Die <xref:System.Diagnostics.EventLog.Log%2A> -Eigenschaft für diese Quelle wird vom <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> -Konstruktor auf das Anwendungsprotokoll des Computers festgelegt. Wenn Sie die <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> der <xref:System.ServiceProcess.ServiceInstaller> (die mit dem <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> des-Dienstanbieter identisch sein sollte) festlegen, <xref:System.Diagnostics.EventLog.Source%2A> wird automatisch auf denselben Wert festgelegt. Bei einem Installationsfehler wird die Quell Installation zusammen mit den zuvor installierten Diensten rückgängig gemacht.  
  
 Die- <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methode versucht, den Dienst anzuhalten, wenn er ausgeführt wird. Gibt an, ob dies erfolgreich ist oder nicht, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> die von vorgenommenen Änderungen werden von <xref:System.ServiceProcess.ServiceInstaller.Install%2A> Wenn für die Ereignisprotokollierung eine neue Quelle erstellt wurde, wird die Quelle gelöscht.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Projekt-Installer namens erstellt, `MyProjectInstaller` der von erbt <xref:System.Configuration.Install.Installer> . Es wird davon ausgegangen, dass es eine ausführbare Dienst Datei gibt, die zwei Dienste enthält: "Hello-World Service 1" und "Hello-World Service 2". Innerhalb des Konstruktors für `MyProjectInstaller` (der vom Installations Dienstprogramm aufgerufen wird) <xref:System.ServiceProcess.ServiceInstaller> werden-Objekte für jeden dieser Dienste erstellt, und <xref:System.ServiceProcess.ServiceProcessInstaller> für die ausführbare Datei wird ein erstellt. Damit das Installations Dienstprogramm `MyProjectInstaller` als gültiges Installationsprogramm erkannt wird, <xref:System.ComponentModel.RunInstallerAttribute> wird das-Attribut auf festgelegt `true` .  
  
 Optionale Eigenschaften werden für das prozessinstallations Programm und die Dienst Installationsprogramme festgelegt, bevor die Installationsprogramme der Auflistung hinzugefügt werden <xref:System.Configuration.Install.Installer.Installers%2A> . Wenn das Installations Hilfsprogramm zugreift `MyProjectInstaller` , werden die Objekte, die der Auflistung <xref:System.Configuration.Install.Installer.Installers%2A> durch einen-Aufrufvorgang hinzugefügt werden, <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> nacheinander installiert. Während des Vorgangs verwaltet das Installationsprogramm Zustandsinformationen, die angeben, welche Objekte installiert wurden. jede kann bei einem Installationsfehler wiederum gesichert werden.  
  
 Normalerweise würden Sie keine Instanz der projektinstallerklasse explizit erstellen. Sie würden Sie erstellen und der Syntax das-Attribut hinzufügen <xref:System.ComponentModel.RunInstallerAttribute> , aber es ist das Installations Dienstprogramm, das tatsächlich aufruft und daher die-Klasse instanziiert.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ServiceProcess.ServiceInstaller" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um einen Dienst zu installieren, erstellen Sie eine projektinstallerklasse, die von der <xref:System.Configuration.Install.Installer> -Klasse erbt, und legen Sie das- <xref:System.ComponentModel.RunInstallerAttribute> Attribut für die-Klasse auf fest `true` . Erstellen Sie in Ihrem Projekt eine <xref:System.ServiceProcess.ServiceProcessInstaller> Instanz pro Dienst Anwendung und eine <xref:System.ServiceProcess.ServiceInstaller> Instanz für jeden Dienst in der Anwendung. Legen Sie in Ihrem projekttinstallationskonstruktor die Installations Eigenschaften für den Dienst mithilfe der <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und der- <xref:System.ServiceProcess.ServiceInstaller> Instanz fest, und fügen Sie die-Instanzen der-Auflistung hinzu <xref:System.Configuration.Install.Installer.Installers%2A> .  
  
 Der <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Konstruktor generiert automatisch eine Ereignisprotokoll Quelle <xref:System.Diagnostics.EventLog.Log%2A> , deren-Eigenschaft auf das Anwendungsprotokoll des Computers und einen festgelegt ist <xref:System.Diagnostics.EventLogInstaller> . Wenn Sie die <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> der- <xref:System.ServiceProcess.ServiceInstaller> Eigenschaft festlegen, die mit dem des- <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> Dienstanbieter identisch sein soll, wird die- <xref:System.Diagnostics.EventLog.Source%2A> Eigenschaft des Ereignis Protokolls automatisch auf denselben Wert festgelegt. Die Quelle wird im Falle eines Installations Fehlers automatisch gelöscht.  
  
 Der- <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Konstruktor legt die- <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> Eigenschaft auf fest, `ServiceStartMode.Manual` um anzugeben, dass ein Benutzer den Dienst startet. Sie können die-Eigenschaft auf Zurücksetzen, `ServiceStartMode.Automatic` um anzugeben, dass der Dienst gestartet wird, wenn der Computer neu gestartet wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">Die <see cref="T:System.ComponentModel.IComponent" />, aus der kopiert werden soll.</param>
        <summary>Kopiert Eigenschaften aus einer Instanz von <see cref="T:System.ServiceProcess.ServiceBase" /> in dieses Installationsprogramm.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird nur selten innerhalb Ihres Codes aufgerufen. <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>wird in der Regel nur von Designern aufgerufen.  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>speichert den Dienstnamen des `component` Parameters in der <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> der- <xref:System.ServiceProcess.ServiceInstaller> Instanz. (Da der-Parameter eine Instanz einer Klasse sein muss, die von abgeleitet wird <xref:System.ServiceProcess.ServiceBase> , `component` verfügt über eine- <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> Eigenschaft.)  
  
> [!NOTE]
>  Wenn Sie den Visual Studio-Designer verwenden, wird diese Methode zur Entwurfszeit aufgerufen, wenn der Benutzer `Add Installer` auf eine Komponente klickt, von der diese Klasse als Installer angegeben wurde. Das Installationsprogramm übernimmt alle Informationen, die es aus der Live Komponente haben kann, und speichert es zur Verwendung zur Installationszeit.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Komponente, die Sie mit diesem Installationsprogramm verknüpft haben, erbt nicht von <see cref="T:System.ServiceProcess.ServiceBase" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Start des Diensts verzögert werden soll, bis andere automatisch gestartete Dienste ausgeführt werden, oder legt ihn fest.</summary>
        <value><see langword="true" />, um den automatischen Start des Diensts zu verzögern, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> Eigenschaft kann auf jeden Dienst angewendet werden, Sie wird jedoch ignoriert, es sei denn, der Start Modus des dienstangs ist <xref:System.ServiceProcess.ServiceStartMode.Automatic> . Wenn das System das nächste Mal neu gestartet wird, wird die Einstellung wirksam. Der Dienststeuerungs-Manager garantiert keine bestimmte Startzeit für den Dienst.  
  
 Ein verzögerter automatischer Start Dienst kann nicht Mitglied einer Gruppe für die Lade Reihenfolge sein, aber er kann von einem anderen automatischen Start Dienst abhängen. Wenn eine Anwendung einen verzögerten automatischen Start Dienst aufruft, bevor Sie geladen wird, schlägt der Aufruf fehl.  
  
 Unter Betriebssystemen, die verzögerten automatischen Start nicht unterstützen, hat das Festlegen dieser Eigenschaft keine Auswirkung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Beschreibung des Dienstes ab oder legt diese fest.</summary>
        <value>Die Beschreibung des Dienstes. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die- <xref:System.ServiceProcess.ServiceInstaller.Description%2A> Eigenschaft, um den Zweck des installierten Dienstanbieter für den Benutzer zu beschreiben. Der Benutzer kann die Dienst Beschreibung in Anwendungen anzeigen, in denen Details zu den installierten Diensten angezeigt werden.  
  
 Beispielsweise können Sie mithilfe von Windows XP die Dienst Beschreibung mit dem Dienststeuerungs-Befehlszeilen Dienstprogramm (Sc.exe) anzeigen, oder Sie können die Dienst Beschreibung innerhalb des Knotens **Dienste** der **Computer Verwaltungs** Konsole anzeigen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die Installations Eigenschaften für eine neue Windows-Dienst Anwendung festgelegt. Im Beispiel wird der Dienst Name zusammen mit dem anzeigen Amen und der Beschreibung festgelegt. Nachdem Sie die Installations Eigenschaften für den Dienst zugewiesen haben, wird das-Objekt in diesem Beispiel der-Auflistung hinzugefügt <xref:System.ServiceProcess.ServiceInstaller> <xref:System.Configuration.Install.Installer.Installers%2A> .  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den angezeigten Namen an, der den Dienst für den Benutzer identifiziert.</summary>
        <value>Der dem Dienst zugeordnete Name, der häufig für interaktive Tools verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>Wird beispielsweise im Dienststeuerungs-Manager verwendet, um einen Benutzer lesbaren beschreibenden Namen für den Dienst bereitzustellen. Bei <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> handelt es sich um einen Registrierungs Wert, der jedoch nie als Registrierungsschlüssel verwendet wird. Daher gelten keine Einschränkungen für den <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Eigenschafts Wert. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>wird als HKEY_LOCAL_MACHINES \system\currentcontrolset\services-Registrierungsschlüssel verwendet, sodass er eingeschränkt ist.  
  
 Der Anzeige Name wird nie vom Installations Dienstprogramm verwendet, um den Dienst zu identifizieren. Daher gibt es keine Einschränkungen bezüglich der Auswahl des Namens, wie es bei der-Eigenschaft der Fall ist <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> .  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">Ein <see cref="T:System.Collections.IDictionary" /> mit Kontextinformationen für die Installation.</param>
        <summary>Installiert den Dienst, indem Dienstanwendungsdaten in die Registrierung geschrieben werden. Diese Methode ist nur für die Verwendung durch Installationstools vorgesehen, die die entsprechenden Methoden automatisch verarbeiten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise werden Sie die Methoden nicht <xref:System.ServiceProcess.ServiceInstaller> innerhalb Ihres Codes aufrufen. Sie werden in der Regel nur vom Installations Dienstprogramm aufgerufen. Das Installationsprogramm ruft während der Installation automatisch die- <xref:System.ServiceProcess.ServiceInstaller.Install%2A> Methode auf. Es sichert ggf. Fehler, indem <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> für das Objekt aufgerufen wird, das die Ausnahme generiert hat.  
  
 Mit der Installationsroutine einer Anwendung werden automatisch Informationen zu den Komponenten, die bereits installiert wurden, mithilfe der Projekt Installationsprogramme verwaltet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> . Diese Zustandsinformationen, <xref:System.ServiceProcess.ServiceInstaller.Install%2A> die als `stateSaver` -Parameter übergeben werden, werden fortlaufend aktualisiert, wenn die <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und jede <xref:System.ServiceProcess.ServiceInstaller> Instanz vom-Hilfsprogramm installiert wird. Es ist in der Regel nicht erforderlich, dass Ihr Code diese Zustandsinformationen explizit ändert.  
  
 Der <xref:System.ServiceProcess.ServiceProcessInstaller> , der der Projekt Installationsklasse zugeordnet ist, installiert Informationen, die allen <xref:System.ServiceProcess.ServiceInstaller> Instanzen im Projekt gemeinsam sind. Wenn für diesen Dienst etwas von den anderen Diensten im Installationsprojekt getrennt ist, werden diese Dienst spezifischen Informationen von dieser Methode installiert.  
  
 Um einen Dienst zu installieren, erstellen Sie eine projektinstallerklasse, die von der <xref:System.Configuration.Install.Installer> -Klasse erbt, und legen Sie das- <xref:System.ComponentModel.RunInstallerAttribute> Attribut für die-Klasse auf fest `true` . Erstellen Sie in Ihrem Projekt eine <xref:System.ServiceProcess.ServiceProcessInstaller> Instanz pro Dienst Anwendung und eine <xref:System.ServiceProcess.ServiceInstaller> Instanz für jeden Dienst in der Anwendung. Legen Sie in Ihrem projekttinstallationskonstruktor die Installations Eigenschaften für den Dienst mithilfe der <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und der- <xref:System.ServiceProcess.ServiceInstaller> Instanz fest, und fügen Sie die-Instanzen der-Auflistung hinzu <xref:System.Configuration.Install.Installer.Installers%2A> .  
  
> [!NOTE]
>  Es wird empfohlen, dass Sie den-Konstruktor zum Hinzufügen von Installer-Instanzen verwenden. Wenn Sie jedoch der-Auflistung in der-Methode hinzufügen müssen, achten Sie darauf, dass Sie <xref:System.Configuration.Install.Installer.Installers%2A> <xref:System.ServiceProcess.ServiceInstaller.Install%2A> die gleichen Ergänzungen der-Auflistung in der- <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Methode ausführen.  
  
 Für alle Klassen, die von der <xref:System.Configuration.Install.Installer> -Klasse abgeleitet werden, muss der Status der Auflistung <xref:System.Configuration.Install.Installer.Installers%2A> in den <xref:System.ServiceProcess.ServiceInstaller.Install%2A> Methoden und identisch sein <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> . Allerdings können Sie die Wartung der Auflistung <xref:System.ServiceProcess.ServiceInstaller.Install%2A> in den Methoden und vermeiden, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Wenn Sie der Auflistung <xref:System.Configuration.Install.Installer.Installers%2A> in Ihrem benutzerdefinierten installerklassenkonstruktor Installations Instanzen hinzufügen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Installation enthält keinen <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> für die ausführbare Datei.  
  
Oder 
Der Dateiname für die Assembly ist <see langword="null" /> oder eine leere Zeichenfolge.  
  
Oder 
Der Dienstname ist ungültig.  
  
Oder 
Der Dienststeuerungs-Manager konnte nicht geöffnet werden.</exception>
        <exception cref="T:System.ArgumentException">Der Anzeigename für den Dienst ist über 255 Zeichen lang.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Das System konnte kein Handle für den Dienst generieren.  
  
 Oder  
  
 Ein Dienst mit diesem Namen ist bereits installiert.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">Ein <see cref="T:System.Configuration.Install.ComponentInstaller" />, mit dem das aktuelle Installationsprogramm verglichen wird.</param>
        <summary>Gibt an, ob zwei Installationsprogramme den gleichen Dienst installieren.</summary>
        <returns><see langword="true" />, wenn der Aufruf von <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> für beide Installationsprogramme zur Installation desselben Dienstes führen würden, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A>gibt beispielsweise an, ob zwei Installationsprogramme denselben Dienst unter demselben Benutzerkonto installieren würden.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Ein <see cref="T:System.Collections.IDictionary" /> mit Kontextinformationen für die Installation.</param>
        <summary>Führt ein Rollback der Informationen über Dienstanwendungen durch, die bei der Installation in die Registrierung geschrieben wurden. Diese Methode ist nur für die Verwendung durch Installationstools vorgesehen, die die entsprechenden Methoden automatisch verarbeiten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise werden Sie die Methoden nicht <xref:System.ServiceProcess.ServiceInstaller> innerhalb Ihres Codes aufrufen. Sie werden in der Regel nur vom Installations Dienstprogramm aufgerufen. Das Installationsprogramm ruft <xref:System.ServiceProcess.ServiceInstaller.Install%2A> während des Installationsvorgangs automatisch die-Methode auf. Es sichert ggf. Fehler, indem <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> für das Objekt aufgerufen wird, das die Ausnahme generiert hat.  
  
 Mit der Installationsroutine einer Anwendung werden Informationen zu den bereits installierten Komponenten automatisch verwaltet. dabei werden die-Installationsdateien des Projekts verwendet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> . Diese Zustandsinformationen, <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> die als `savedState` -Parameter übergeben werden, werden fortlaufend aktualisiert, wenn die <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und jede <xref:System.ServiceProcess.ServiceInstaller> Instanz vom-Hilfsprogramm installiert wird. Es ist in der Regel nicht erforderlich, dass Ihr Code diese Zustandsinformationen explizit ändert.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Namen an, mit dem das System diesen Dienst identifiziert. Diese Eigenschaft muss mit dem <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> des zu installierenden Dienstes übereinstimmen.</summary>
        <value>Der Name des zu installierenden Dienstes. Dieser Wert muss festgelegt werden, bevor das Installationsprogramm den Dienst installiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es ist von entscheidender Bedeutung, dass <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> identisch mit der der Klasse ist, die <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> Sie von abgeleitet haben <xref:System.ServiceProcess.ServiceBase> . Normalerweise wird der Wert der <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> -Eigenschaft für den Dienst innerhalb der Main ()-Funktion der ausführbaren Datei der Dienst Anwendung festgelegt. Der Dienststeuerungs-Manager verwendet die- <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> Eigenschaft, um den Dienst innerhalb dieser ausführbaren Datei zu suchen.  
  
 Wenn Sie für das <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Dienst Installationsprogramm festlegen, <xref:System.Diagnostics.EventLog.Source%2A> wird der des zugeordneten Ereignis Protokolls auf denselben Wert festgelegt. Dadurch kann der Dienst automatisch Dienst Befehle (z. b. Start-und Start Aufrufe) des Anwendungs Protokolls auf dem Computer protokollieren.  
  
> [!NOTE]
>  Wenn eine Quelle mit demselben Namen bereits auf dem Computer vorhanden ist, aber in einem anderen Protokoll als dem Anwendungsprotokoll, wird eine Ausnahme ausgelöst. Wenn die Quelle vorhanden ist und dem Anwendungsprotokoll zugeordnet ist, wird diese Quelle zum Melden von Befehls aufrufen an den Dienst verwendet, und es wird keine Ausnahme ausgelöst.  
  
 Der darf <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> nicht `null` oder die Länge 0 (null) aufweisen. Die maximale Größe beträgt 256 Zeichen. Sie darf auch keine vorwärts-oder rückwärts Schrägstriche, '/' oder ' \\ ', oder Zeichen aus dem ASCII-Zeichensatz mit einem Wert kleiner als Dezimalwert 32 enthalten.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Wert der <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />-Eigenschaft ist ungültig.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, welche Dienste ausgeführt werden müssen, damit dieser Dienst ausgeführt werden kann.</summary>
        <value>Ein Array von Diensten, die ausgeführt werden müssen, bevor der diesem Installationsprogramm zugeordnete Dienst ausgeführt werden kann.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Dienst kann erfordern, dass andere Dienste ausgeführt werden, bevor er gestartet werden kann. Die Informationen aus dieser Eigenschaft werden in einen Schlüssel in der Registrierung geschrieben. Wenn der Benutzer (oder das System im Fall eines automatischen Starts) versucht, den Dienst auszuführen, wird vom Dienststeuerungs-Manager (Service Control Manager, SCM) überprüft, ob alle Dienste im Array bereits gestartet wurden.  
  
 Wenn ein Dienst im Array nicht ausgeführt wird, versucht der SCM, Sie zu starten. Dies schließt Dienste mit ein `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> .  
  
 Wenn ein Dienst, von dem dieser Dienst abhängt, nicht gestartet werden kann, wird dieser Dienst nicht gestartet. Eine Ausnahme wird nicht ausgelöst, wenn das System nicht gestartet wurde, weil auf der Systemebene keine Ausnahmebehandlung vorhanden ist, um dies zu erkennen. Entscheiden Sie, wie Dienst Start Fehler behandelt und in Ihrem Code implementiert werden. In der Regel wird dem Benutzer beim Start ein Dialogfeld angezeigt, wenn ein Dienst nicht gestartet werden kann.  
  
 Wenn der Dienst nicht gestartet wird, wird ein Eintrag in das Anwendungs Ereignisprotokoll geschrieben.  
  
 Die Dienste, von denen dieser Dienst abhängt, müssen sich nicht in derselben ausführbaren Datei befinden.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, wie und wann dieser Dienst gestartet wird.</summary>
        <value>Ein <see cref="T:System.ServiceProcess.ServiceStartMode" />, der die Art und Weise des Dienststarts darstellt. Die Standardeinstellung <see langword="Manual" /> gibt an, dass der Dienst nach einem Neustart des Computers nicht automatisch gestartet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie den Wert fest, <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> um anzugeben, dass der Dienst nach dem Neustart automatisch gestartet werden soll oder ob der Dienst manuell von einem Benutzer gestartet werden muss. Ein Dienst kann auch deaktiviert werden. er gibt an, dass er entweder manuell oder Programm gesteuert gestartet werden kann, bis er aktiviert ist.  
  
 Eigenschaftswerte können nach der Installation nicht mehr geändert werden <xref:System.ServiceProcess.ServiceInstaller> . Um das zu ändern <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> , müssen Sie entweder den Dienst deinstallieren und neu installieren oder die Einstellung manuell mithilfe des Dienststeuerungs-Managers ändern.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Der Startmodus ist kein Wert der <see cref="T:System.ServiceProcess.ServiceStartMode" />-Enumeration.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Ein <see cref="T:System.Collections.IDictionary" /> mit Kontextinformationen für die Installation.</param>
        <summary>Deinstalliert den Dienst, indem die entsprechenden Daten aus der Registrierung entfernt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deinstallieren Sie zuerst den Dienst, bevor Sie ihn deinstallieren. Wenn der Dienst nicht beendet werden kann, wird keine Ausnahme abgefangen, und die Methode wird mit dem Entfernen des Dienstanbieter fortgesetzt.  
  
 Normalerweise werden Sie die Methoden nicht <xref:System.ServiceProcess.ServiceInstaller> innerhalb Ihres Codes aufrufen. Sie werden in der Regel nur vom Installations Dienstprogramm aufgerufen. Mit Installutil werden Dienste deinstalliert und installiert. beim Deinstallieren von wird ein Switch in den Befehlszeilen aufzurufen.  
  
 Mit der Deinstallations Routine einer Anwendung werden automatisch Informationen zu den Komponenten, die deinstalliert werden, mithilfe des Projekt Installationsprogramms verwaltet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> . Diese Zustandsinformationen, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> die als `savedState` -Parameter übergeben werden, werden fortlaufend aktualisiert, wenn die <xref:System.ServiceProcess.ServiceProcessInstaller> -Instanz und jede <xref:System.ServiceProcess.ServiceInstaller> Instanz vom-Hilfsprogramm installiert wird. Es ist in der Regel nicht erforderlich, dass Ihr Code diese Zustandsinformationen explizit ändert.  
  
 Für alle Klassen, die von der <xref:System.Configuration.Install.Installer> -Klasse abgeleitet werden, muss der Status der Auflistung <xref:System.Configuration.Install.Installer.Installers%2A> in den <xref:System.ServiceProcess.ServiceInstaller.Install%2A> Methoden und identisch sein <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> . Allerdings können Sie die Wartung der Auflistung <xref:System.ServiceProcess.ServiceInstaller.Install%2A> in den Methoden und vermeiden, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Wenn Sie der Auflistung <xref:System.Configuration.Install.Installer.Installers%2A> in Ihrem benutzerdefinierten installerklassenkonstruktor Installations Instanzen hinzufügen.  
  
 Es ist kein Rollback-Mechanismus für die Deinstallation vorhanden. Wenn also ein Dienst nicht deinstalliert werden kann, wirkt sich dies nicht auf die anderen Dienste (normalerweise innerhalb desselben Installations Projekts) aus, die deinstalliert werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Der Dienststeuerungs-Manager konnte nicht geöffnet werden.  
  
 Oder  
  
 Das System konnte kein Handle für den Dienst abrufen.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>

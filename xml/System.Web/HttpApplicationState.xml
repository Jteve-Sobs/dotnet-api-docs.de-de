<Type Name="HttpApplicationState" FullName="System.Web.HttpApplicationState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3603468bab32eb171edb6e9cf60c0e4f7aa77d97" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69386122" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpApplicationState : System.Collections.Specialized.NameObjectCollectionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpApplicationState extends System.Collections.Specialized.NameObjectCollectionBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpApplicationState" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpApplicationState&#xA;Inherits NameObjectCollectionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpApplicationState sealed : System::Collections::Specialized::NameObjectCollectionBase" />
  <TypeSignature Language="F#" Value="type HttpApplicationState = class&#xA;    inherit NameObjectCollectionBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.Specialized.NameObjectCollectionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht es, in einer ASP.NET-Anwendung globale Informationen über mehrere Sitzungen und Anforderungen hinweg freizugeben.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine ASP.NET-Anwendung ist die Summe aller Dateien, Seiten, Handler, Module und Codes innerhalb des Bereichs eines virtuellen Verzeichnisses und seiner Unterverzeichnisse auf einem einzelnen Webserver.  
  
 Eine einzelne Instanz einer- <xref:System.Web.HttpApplicationState> Klasse wird erstellt, wenn ein Client zum ersten Mal eine URL-Ressource innerhalb eines bestimmten virtuellen Verzeichnisses der ASP.NET-Anwendung anfordert. Für jede ASP.NET-Anwendung auf einem Webserver wird eine separate einzelne Instanz erstellt. Ein Verweis auf jede Instanz wird dann über das <xref:System.Web.HttpContext.Application%2A> systeminterne-Objekt verfügbar gemacht.  
  
 Der Anwendungs Status wird nicht für eine Webfarm (in der eine Anwendung auf mehreren Servern gehostet wird) oder für einen Webgarten (in dem eine Anwendung über mehrere Prozesse auf demselben Computer gehostet wird) freigegeben.  
  
 ]]></format>
    </remarks>
    <threadsafe>Dieser Typ ist threadsicher.</threadsafe>
    <altmember cref="T:System.Web.HttpContext" />
    <altmember cref="T:System.Web.HttpApplication" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.Add : string * obj -&gt; unit" Usage="httpApplicationState.Add (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Objekts, das der Auflistung hinzugefügt werden soll.</param>
        <param name="value">Der Wert des Objekts.</param>
        <summary>Fügt der <see cref="T:System.Web.HttpApplicationState" />-Auflistung ein neues Objekt hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel werden der Anwendungs Auflistung zwei Anwendungsvariablen mit dem Namen MyAppVar1 und MyAppVar2 hinzugefügt.  
  
 [!code-csharp[Classic HttpApplicationState.Add Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Add Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllKeys">
      <MemberSignature Language="C#" Value="public string[] AllKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AllKeys" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.AllKeys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllKeys As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AllKeys { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AllKeys : string[]" Usage="System.Web.HttpApplicationState.AllKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zugriffstasten in der <see cref="T:System.Web.HttpApplicationState" />-Auflistung ab.</summary>
        <value>Ein Zeichenfolgenarray von <see cref="T:System.Web.HttpApplicationState" />-Objektnamen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Zeichen folgen Array mit allen Objektnamen in der Anwendungs Zustands Auflistung gefüllt.  
  
 [!code-csharp[Classic HttpApplicationState.AllKeys Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.AllKeys Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.AllKeys Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.AllKeys Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="httpApplicationState.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Objekte aus einer <see cref="T:System.Web.HttpApplicationState" />-Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel werden alle <xref:System.Web.HttpApplicationState> Variablen aus der Auflistung entfernt.  
  
 [!code-csharp[Classic HttpApplicationState.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contents">
      <MemberSignature Language="C#" Value="public System.Web.HttpApplicationState Contents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpApplicationState Contents" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Contents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Contents As HttpApplicationState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpApplicationState ^ Contents { System::Web::HttpApplicationState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Contents : System.Web.HttpApplicationState" Usage="System.Web.HttpApplicationState.Contents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpApplicationState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf das <see cref="T:System.Web.HttpApplicationState" />-Objekt ab.</summary>
        <value>Ruft einen Verweis auf das <see cref="T:System.Web.HttpApplicationState" />-Objekt ab.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft bietet Kompatibilität mit früheren Versionen von ASP.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein neues <xref:System.Web.HttpApplicationState> -Objekt erstellt, das für den Zugriff auf die Objektnamen in der Anwendungs Zustands Auflistung verwendet wird.  
  
 [!code-csharp[Classic HttpApplicationState.Contents Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Contents Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Contents Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Contents Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public override int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.HttpApplicationState.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Objekte in der <see cref="T:System.Web.HttpApplicationState" />-Auflistung ab.</summary>
        <value>Die Anzahl der Elementobjekte in der Auflistung. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel wird nur ausgeführt, wenn die Anzahl der-Objekte in der-Auflistung fünf überschreitet.  
  
 [!code-csharp[Classic HttpApplicationState.Count Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Count Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Get">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.HttpApplicationState" />-Objekt anhand des Namens oder Indexes ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public object Get (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Get(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Get(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Get(int index);" />
      <MemberSignature Language="F#" Value="member this.Get : int -&gt; obj" Usage="httpApplicationState.Get index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der Index des Anwendungszustandsobjekts.</param>
        <summary>Ruft ein <see cref="T:System.Web.HttpApplicationState" />-Objekt anhand des numerischen Indexes ab.</summary>
        <returns>Das Objekt, auf das mit <paramref name="index" /> verwiesen wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird das erste-Objekt (Index = 0) aus <xref:System.Web.HttpApplicationState> der-Auflistung des <xref:System.Web.HttpContext.Application%2A> systeminternen-Objekts zurückgegeben und in eine neue Objekt Variable kopiert.  
  
 [!code-csharp[Classic HttpApplicationState.Get1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Get1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Get1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Get1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public object Get (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Get(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Get(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Get : string -&gt; obj" Usage="httpApplicationState.Get name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Objekts.</param>
        <summary>Ruft ein <see cref="T:System.Web.HttpApplicationState" />-Objekt anhand des Namens ab.</summary>
        <returns>Das Objekt, auf das mit <paramref name="name" /> verwiesen wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im folgenden Beispiel wird ein Objekt mit dem Namen MyAppVar1 <xref:System.Web.HttpApplicationState> aus der-Auflistung <xref:System.Web.HttpContext.Application%2A> des systeminternen-Objekts zurückgegeben und in eine neue Objekt Variable kopiert.  
  
```vb  
Dim MyObject As Object  
MyObject = Application.Get("MyAppVar1")  
```  
  
```csharp  
Object MyObject;  
MyObject = Application.Get("MyAppVar1");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public string GetKey (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetKey(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.GetKey(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKey (index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetKey(int index);" />
      <MemberSignature Language="F#" Value="member this.GetKey : int -&gt; string" Usage="httpApplicationState.GetKey index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der Index des Anwendungszustandsobjekts.</param>
        <summary>Ruft einen <see cref="T:System.Web.HttpApplicationState" />-Objektnamen anhand des Indexes ab.</summary>
        <returns>Der Name, unter dem das Anwendungszustandsobjekt gespeichert wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel werden die Namen aller-Objekte in der Anwendungs Zustands Auflistung zurückgegeben und die Namen in einem Zeichen folgen Array gespeichert.  
  
 [!code-csharp[Classic HttpApplicationState.GetKey Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.GetKey Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.GetKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.GetKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erhält den Zugriff auf ein Objekt in einer <see cref="T:System.Web.HttpApplicationState" />-Auflistung. Diese Eigenschaft ist überladen, um den Zugriff auf Objekte über ihren Namen oder numerischen Index zu ermöglichen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj" Usage="System.Web.HttpApplicationState.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der numerische Index des Objekts in der Auflistung.</param>
        <summary>Ruft ein einzelnes <see cref="T:System.Web.HttpApplicationState" />-Objekt anhand des Indexes ab.</summary>
        <value>Das Objekt, auf das mit <paramref name="index" /> verwiesen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird das erste-Objekt (Index = 0) aus <xref:System.Web.HttpApplicationState> der-Auflistung des <xref:System.Web.HttpContext.Application%2A> systeminternen-Objekts zurückgegeben und in eine neue Objekt Variable kopiert.  
  
 [!code-csharp[Classic HttpApplicationState.this1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.this1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.this1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.this1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ name); void set(System::String ^ name, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="System.Web.HttpApplicationState.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Objekts in der Auflistung.</param>
        <summary>Ruft den Wert eines einzelnen <see cref="T:System.Web.HttpApplicationState" />-Objekts anhand des Namens ab.</summary>
        <value>Das Objekt, auf das mit <paramref name="name" /> verwiesen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Objekt mit `MyAppVar1` dem Namen <xref:System.Web.HttpApplicationState> aus der-Auflistung <xref:System.Web.HttpContext.Application%2A> des systeminternen-Objekts zurückgegeben und in eine neue Objekt Variable kopiert.  
  
 [!code-csharp[Classic HttpApplicationState.this Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.this Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.this Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.this Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public void Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Lock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Lock" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Lock();" />
      <MemberSignature Language="F#" Value="member this.Lock : unit -&gt; unit" Usage="httpApplicationState.Lock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sperrt den Zugriff auf eine <see cref="T:System.Web.HttpApplicationState" />-Variable, um die Zugriffssynchronisierung zu erleichtern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.HttpApplicationState> -Klasse führt automatische Sperren und Entsperrung <xref:System.Web.HttpApplicationState.AllKeys%2A> mit <xref:System.Web.HttpApplicationState.Count%2A> den <xref:System.Web.HttpApplicationState.GetKey%2A> <xref:System.Web.HttpApplicationState.Get%2A> <xref:System.Web.HttpApplicationState.Remove%2A> <xref:System.Web.HttpApplicationState.Clear%2A> Eigenschaftenund<xref:System.Web.HttpApplicationState.Add%2A>und,,,, undaus.<xref:System.Web.HttpApplicationState.RemoveAt%2A> <xref:System.Web.HttpApplicationState.Set%2A> -Methoden. Wenn Sie jedoch über eine <xref:System.Web.HttpApplicationState.Lock%2A> Reihe <xref:System.Web.HttpApplicationState.UnLock%2A> von Vorgängen verfügen, ist es möglicherweise effizienter, die-Methode und die-Methode zu verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Web.HttpApplicationState.Lock%2A> -Methode <xref:System.Web.HttpApplicationState.UnLock%2A> und die-Methode verwendet, um zu verhindern, dass andere Sitzungen den Wert von zwei Anwendungsvariablen ändern, bis Sie von der lokalen Sitzung geändert wurden.  
  
 [!code-csharp[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpApplicationState.UnLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="httpApplicationState.Remove name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Objekts, das aus der Auflistung entfernt werden soll.</param>
        <summary>Entfernt das benannte Objekt aus einer <see cref="T:System.Web.HttpApplicationState" />-Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird eine Anwendungs Zustands Variable aus der-Auflistung entfernt.  
  
 [!code-csharp[Classic HttpApplicationState.Remove Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Remove Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Remove Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Remove Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : unit -&gt; unit" Usage="httpApplicationState.RemoveAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Objekte aus einer <see cref="T:System.Web.HttpApplicationState" />-Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpApplicationState.RemoveAll%2A>ist ein interner- <xref:System.Web.HttpApplicationState.Clear%2A>Aufruf.  
  
   
  
## Examples  
 Im folgenden Beispiel werden alle <xref:System.Web.HttpApplicationState> Variablen aus der Auflistung entfernt.  
  
 [!code-csharp[Classic HttpApplicationState.RemoveAll Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.RemoveAll Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.RemoveAll Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.RemoveAll Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="httpApplicationState.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Die Position des zu entfernenden Elements in der Auflistung.</param>
        <summary>Entfernt ein <see cref="T:System.Web.HttpApplicationState" />-Objekt anhand des Indexes aus der Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zwei Anwendungsvariablen in die-Auflistung eingefügt werden. anschließend <xref:System.Web.HttpApplicationState.RemoveAt%2A> wird die-Methode verwendet, um die erste <xref:System.Web.HttpApplicationState> Variable in einem benutzerdefinierten-Objekt zu entfernen.  
  
 [!code-aspx-csharp[HttpApplicationStateRemoveAt#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpApplicationStateRemoveAt/CS/httpapplicationstate_removeatcs.aspx#1)]
 [!code-aspx-vb[HttpApplicationStateRemoveAt#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpApplicationStateRemoveAt/VB/httpapplicationstate_removeatvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.Set(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Set(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.Set : string * obj -&gt; unit" Usage="httpApplicationState.Set (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des zu aktualisierenden Objekts.</param>
        <param name="value">Der aktualisierte Wert des Objekts.</param>
        <summary>Aktualisiert den Wert eines Objekts in einer <see cref="T:System.Web.HttpApplicationState" />-Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird der Wert einer vorhandenen Anwendungs Zustandsvariablen aktualisiert.  
  
 [!code-csharp[Classic HttpApplicationState.Set Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Set Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Set Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Set Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticObjects">
      <MemberSignature Language="C#" Value="public System.Web.HttpStaticObjectsCollection StaticObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpStaticObjectsCollection StaticObjects" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpApplicationState.StaticObjects" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StaticObjects As HttpStaticObjectsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpStaticObjectsCollection ^ StaticObjects { System::Web::HttpStaticObjectsCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StaticObjects : System.Web.HttpStaticObjectsCollection" Usage="System.Web.HttpApplicationState.StaticObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpStaticObjectsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft alle durch ein <see langword="&lt;object&gt;" />-Tag deklarierten Objekte ab, wobei der Gültigkeitsbereich innerhalb der ASP.NET-Anwendung auf "Application" festgelegt wird.</summary>
        <value>Eine Auflistung von Objekten auf der Seite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungs Objekte werden in der Datei Global. asax innerhalb der `<object runat="server" scope="Application"> </object>` Tags definiert.  
  
   
  
## Examples  
 Im folgenden Beispiel werden alle Anwendungs Objekte in eine <xref:System.Web.HttpStaticObjectsCollection> Variable abgerufen und nur dann eine Routine ausgeführt, wenn die Anzahl von-Objekten größer als 0 (null) ist.  
  
 [!code-csharp[Classic HttpApplicationState.StaticObjects Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.StaticObjects Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.StaticObjects Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.StaticObjects Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnLock">
      <MemberSignature Language="C#" Value="public void UnLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpApplicationState.UnLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnLock();" />
      <MemberSignature Language="F#" Value="member this.UnLock : unit -&gt; unit" Usage="httpApplicationState.UnLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Hebt die Zugriffsperre einer <see cref="T:System.Web.HttpApplicationState" />-Variablen auf, um die Zugriffssynchronisierung zu erleichtern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.HttpApplicationState> -Klasse führt automatische Sperren und Entsperrung <xref:System.Web.HttpApplicationState.AllKeys%2A> mit <xref:System.Web.HttpApplicationState.Count%2A> den <xref:System.Web.HttpApplicationState.GetKey%2A> <xref:System.Web.HttpApplicationState.Get%2A> <xref:System.Web.HttpApplicationState.Remove%2A> <xref:System.Web.HttpApplicationState.Clear%2A> Eigenschaftenund<xref:System.Web.HttpApplicationState.Add%2A>und,,,, undaus.<xref:System.Web.HttpApplicationState.RemoveAt%2A> <xref:System.Web.HttpApplicationState.Set%2A> -Methoden. Wenn Sie jedoch über eine <xref:System.Web.HttpApplicationState.Lock%2A> Reihe <xref:System.Web.HttpApplicationState.UnLock%2A> von Vorgängen verfügen, ist es möglicherweise effizienter, die-Methode und die-Methode zu verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Web.HttpApplicationState.Lock%2A> -Methode <xref:System.Web.HttpApplicationState.UnLock%2A> und die-Methode verwendet, um zu verhindern, dass andere Sitzungen den Wert von zwei Anwendungsvariablen ändern, bis Sie von der lokalen Sitzung geändert wurden.  
  
 [!code-csharp[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/CS/source.cs#1)]
 [!code-vb[Classic HttpApplicationState.Lock Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpApplicationState.Lock Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpApplicationState.Lock" />
      </Docs>
    </Member>
  </Members>
</Type>

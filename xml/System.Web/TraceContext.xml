<Type Name="TraceContext" FullName="System.Web.TraceContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5a676c9418adeb67ed27710abb8d80b7ea86eef9" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83962638" /></Metadata><TypeSignature Language="C#" Value="public sealed class TraceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TraceContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.TraceContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TraceContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraceContext sealed" />
  <TypeSignature Language="F#" Value="type TraceContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Erfasst und präsentiert Ausführungsdetails über eine Webanforderung. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Klasse verwenden, um Nachrichten an bestimmte Ablauf Verfolgungs Kategorien anzufügen. Wenn Sie z. b. eine Instanz der- <xref:System.Web.UI.WebControls.Calendar> Klasse für Ihre Anwendung erstellen, können Sie die Ablauf Verfolgungs Meldung "beginnend mit Rendering" in eine renderingprozedur und "das Erhöhen des OnChange-Ereignisses" in einer Ereignishandlerprozedur einschließen.  
  
 Sie können auch die- <xref:System.Web.TraceContext> Klasse verwenden, um am Ende der Anforderungs Ausführung für die benutzerdefinierte Verarbeitung einen Satz von Ablauf Verfolgungs Datensätzen abzurufen. Weitere Informationen finden Sie unter [Übersicht über die ASP.net](https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100))-Ablauf Verfolgung.  
  
 Legen Sie zum Aktivieren der Ablauf Verfolgung das- `Trace` Attribut in der [@ Page](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ydy4x04a(v=vs.100)) -Direktive oder die- <xref:System.Web.TraceContext.IsEnabled%2A> Eigenschaft auf fest `true` . Wenn die Ablauf Verfolgung aktiviert ist und der vom Benutzer bereitgestellte Ablauf Verfolgungs Inhalt angezeigt wird, enthält die- <xref:System.Web.UI.Page> Klasse automatisch Leistungsdaten, Informationen zur Steuerungsstruktur und Zustands Verwaltung für jede Anforderung.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.TraceContextEventArgs" />
    <altmember cref="T:System.Web.TraceContextEventHandler" />
    <altmember cref="T:System.Web.TraceContextRecord" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">Übersicht über die ASP.NET-Ablaufverfolgung</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraceContext (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.#ctor(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraceContext(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Web.TraceContext : System.Web.HttpContext -&gt; System.Web.TraceContext" Usage="new System.Web.TraceContext context" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Web.HttpContext" />, der Informationen über die aktuelle Webanforderung enthält.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.TraceContext" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.HttpContext" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">Übersicht über die ASP.NET-Ablaufverfolgung</related>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.TraceContext.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Web.TraceContext.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Wert ab, der angibt, ob die Ablaufverfolgung für die aktuelle Webanforderung aktiviert ist, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Ablaufverfolgung aktiviert ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie dieses Flag, um zu überprüfen, ob Ihre Seite oder Anwendung Ablauf Verfolgungs Informationen ausgeben soll, bevor Daten in das Ablauf Verfolgungs Protokoll geschrieben werden.  
  
 Der Wert der <xref:System.Web.TraceContext.IsEnabled%2A> -Eigenschaft hängt von den Einstellungen im unter Abschnitt des `system.web` Konfigurations Abschnitts und dem Wert des- `trace` Attributs der-Direktive ab. Die in der Page-Direktive festgelegte Ablauf Verfolgungs Option hat Vorrang vor der in der Konfigurationsdatei festgelegten Option. Das programmgesteuerte Festlegen des <xref:System.Web.TraceContext.IsEnabled%2A> Werts hat Vorrang vor dem Attribut "page Directive" und der Konfigurationseinstellung.  
  
> [!NOTE]
>  Wenn Sie die- <xref:System.Web.TraceContext.IsEnabled%2A> Eigenschaft `true` für eine gesamte Anwendung auf festlegen, müssen Sie diese Eigenschaft `false` für jede Seite in der Anwendung, für die Sie keine Ablauf Verfolgungs Informationen anzeigen möchten, explizit auf festlegen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie bestimmen können, ob die Ablauf Verfolgung für eine Seite aktiviert ist. Der Code durchläuft die Zeilen in einem DataSet und schreibt Ablauf Verfolgungs Anweisungen für jede Zeile in diesem DataSet.  
  
 [!code-csharp[Classic TraceContext.IsEnabled Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic TraceContext.IsEnabled Example/CS/source.cs#1)]
 [!code-vb[Classic TraceContext.IsEnabled Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic TraceContext.IsEnabled Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">Übersicht über die ASP.NET-Ablaufverfolgung</related>
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/trace-debug/trace-element">&lt;Trace- &gt; Element</related>
      </Docs>
    </Member>
    <Member MemberName="TraceFinished">
      <MemberSignature Language="C#" Value="public event System.Web.TraceContextEventHandler TraceFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.TraceContextEventHandler TraceFinished" />
      <MemberSignature Language="DocId" Value="E:System.Web.TraceContext.TraceFinished" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TraceFinished As TraceContextEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::TraceContextEventHandler ^ TraceFinished;" />
      <MemberSignature Language="F#" Value="member this.TraceFinished : System.Web.TraceContextEventHandler " Usage="member this.TraceFinished : System.Web.TraceContextEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.TraceContextEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wird vom <see cref="T:System.Web.TraceContext" />-Objekt ausgelöst, um die Ablaufverfolgungsmeldungen nach dem Erfassen aller Anforderungsinformationen verfügbar zu machen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das- <xref:System.Web.TraceContext.TraceFinished> Ereignis wird während der `EndRequest` Verarbeitung der HTTP-Anforderung ausgelöst. Sie wird von einem- <xref:System.Web.TraceContext> Objekt ausgelöst, nachdem alle Anforderungs Informationen gesammelt wurden, um die Auflistung von <xref:System.Web.TraceContextRecord> Nachrichten für registrierte Delegaten verfügbar zu machen <xref:System.Web.TraceContextEventHandler> .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie ein registrieren können <xref:System.Web.TraceContextEventHandler> , um das-Ereignis zu behandeln <xref:System.Web.TraceContext.TraceFinished> . In diesem Beispiel durchläuft der Delegat die Ablauf Verfolgungs Meldungen und schreibt Sie in den Antwortstream. Sie können jedoch dieselben Informationen in eine Datenbank oder einen Consumer des Profil Erstellungs Tools schreiben.  
  
 [!code-aspx-csharp[System.Web.Trace_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_3/CS/form3cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_3/VB/form3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.TraceContextEventHandler" />
        <altmember cref="T:System.Web.TraceContextEventArgs" />
        <altmember cref="T:System.Web.TraceContextRecord" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">Übersicht über die ASP.NET-Ablaufverfolgung</related>
      </Docs>
    </Member>
    <Member MemberName="TraceMode">
      <MemberSignature Language="C#" Value="public System.Web.TraceMode TraceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.TraceMode TraceMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.TraceContext.TraceMode" />
      <MemberSignature Language="VB.NET" Value="Public Property TraceMode As TraceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::TraceMode TraceMode { System::Web::TraceMode get(); void set(System::Web::TraceMode value); };" />
      <MemberSignature Language="F#" Value="member this.TraceMode : System.Web.TraceMode with get, set" Usage="System.Web.TraceContext.TraceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.TraceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Sortierreihenfolge ab, in der Ablaufverfolgungsanweisungen an einen anfordernden Browser ausgegeben werden sollen, oder legt diese fest.</summary>
        <value>Einer der <see cref="T:System.Web.TraceMode" />-Enumerationswerte. Die Standardeinstellung wird durch das <see langword="traceMode" />-Attribut im <see langword="trace" />-Abschnitt einer Konfigurationsdatei festgelegt, deren Standardwert <see langword="SortByTime" /> ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ablauf Verfolgungs Meldungen können in der Reihenfolge sortiert werden, in der Sie verarbeitet wurden, oder alphabetisch nach benutzerdefinierter Kategorie.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie die Ablauf Verfolgungs Anweisungen einer Seite alphabetisch nach den Kategorien sortieren können, die Sie den-Anweisungen zugewiesen haben.  
  
 [!code-aspx-csharp[Classic TraceContext.TraceMode Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic TraceContext.TraceMode Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic TraceContext.TraceMode Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic TraceContext.TraceMode Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der ausgewählte Wert ist keiner der <see cref="T:System.Web.TraceMode" />-Enumerationswerte.</exception>
        <altmember cref="T:System.Web.UI.Page" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">Übersicht über die ASP.NET-Ablaufverfolgung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Warn">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt Ablaufverfolgungsinformationen in das Ablaufverfolgungsprotokoll. Im Gegensatz zu <see cref="M:System.Web.TraceContext.Write(System.String)" /> werden alle Warnungen im Protokoll mit rotem Text angezeigt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Warn">
      <MemberSignature Language="C#" Value="public void Warn (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warn(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Warn(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Warn (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warn(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Warn : string -&gt; unit" Usage="traceContext.Warn message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die in das Protokoll zu schreibende Ablaufverfolgungsmeldung.</param>
        <summary>Schreibt eine Ablaufverfolgungsmeldung in das Ablaufverfolgungsprotokoll. Alle Warnungen werden im Protokoll mit rotem Text angezeigt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes Mal <xref:System.Web.TraceContext.Warn%2A> , wenn die-Methode aufgerufen wird, wird der Messages-Auflistung eine Ablauf <xref:System.Web.TraceContext> Verfolgungs Meldung hinzugefügt <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> , auf die Sie zugreifen können, wenn Sie das- <xref:System.Web.TraceContext.TraceFinished> Ereignis behandeln. Die Meldung wird mit der <xref:System.Web.TraceContextRecord.IsWarning%2A> -Eigenschaft hinzugefügt, `true` und die-Eigenschaft ist <xref:System.Web.TraceContextRecord.ErrorInfo%2A> auf festgelegt `null` .  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">Übersicht über die ASP.NET-Ablaufverfolgung</related>
      </Docs>
    </Member>
    <Member MemberName="Warn">
      <MemberSignature Language="C#" Value="public void Warn (string category, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warn(string category, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Warn(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Warn (category As String, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warn(System::String ^ category, System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Warn : string * string -&gt; unit" Usage="traceContext.Warn (category, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">Die Ablaufverfolgungskategorie, die die Meldung empfängt.</param>
        <param name="message">Die in das Protokoll zu schreibende Ablaufverfolgungsmeldung.</param>
        <summary>Schreibt Ablaufverfolgungsinformationen, einschließlich aller benutzerdefinierten Kategorien und Ablaufverfolgungsmeldungen, in das Ablaufverfolgungsprotokoll. Alle Warnungen werden im Protokoll mit rotem Text angezeigt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes Mal <xref:System.Web.TraceContext.Warn%2A> , wenn die-Methode aufgerufen wird, wird der Messages-Auflistung eine Ablauf <xref:System.Web.TraceContext> Verfolgungs Meldung hinzugefügt <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> , auf die Sie zugreifen können, wenn Sie das- <xref:System.Web.TraceContext.TraceFinished> Ereignis behandeln. Die Meldung wird mit der <xref:System.Web.TraceContextRecord.IsWarning%2A> -Eigenschaft hinzugefügt, `true` und die-Eigenschaft ist <xref:System.Web.TraceContextRecord.ErrorInfo%2A> auf festgelegt `null` .  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">Übersicht über die ASP.NET-Ablaufverfolgung</related>
      </Docs>
    </Member>
    <Member MemberName="Warn">
      <MemberSignature Language="C#" Value="public void Warn (string category, string message, Exception errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warn(string category, string message, class System.Exception errorInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Warn(System.String,System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Warn (category As String, message As String, errorInfo As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warn(System::String ^ category, System::String ^ message, Exception ^ errorInfo);" />
      <MemberSignature Language="F#" Value="member this.Warn : string * string * Exception -&gt; unit" Usage="traceContext.Warn (category, message, errorInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="errorInfo" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="category">Die Ablaufverfolgungskategorie, die die Meldung empfängt.</param>
        <param name="message">Die in das Protokoll zu schreibende Ablaufverfolgungsmeldung.</param>
        <param name="errorInfo">Eine <see cref="T:System.Exception" />, die Informationen über den Fehler enthält.</param>
        <summary>Schreibt Ablaufverfolgungsinformationen, einschließlich aller benutzerdefinierten Kategorien, Ablaufverfolgungsmeldungen und Fehlerinformationen, in das Ablaufverfolgungsprotokoll. Alle Warnungen werden im Protokoll mit rotem Text angezeigt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes Mal <xref:System.Web.TraceContext.Warn%2A> , wenn die-Methode aufgerufen wird, wird der Messages-Auflistung eine Ablauf <xref:System.Web.TraceContext> Verfolgungs Meldung hinzugefügt <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> , auf die Sie zugreifen können, wenn Sie das- <xref:System.Web.TraceContext.TraceFinished> Ereignis behandeln. Die Meldung wird mit der <xref:System.Web.TraceContextRecord.IsWarning%2A> auf festgelegten-Eigenschaft hinzugefügt `true` , und die- <xref:System.Web.TraceContextRecord.ErrorInfo%2A> Eigenschaft wird auf das-Objekt festgelegt, das vom-Parameter übergeben wird `errorInfo` .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die-Methode aufgerufen wird <xref:System.Web.TraceContext.Write%2A> , um eine Fehler Ablauf Verfolgungs Meldung in das Ablauf Verfolgungs Protokoll zu schreiben. In diesem Beispiel werden unterschiedliche Ausnahmen als Fehler und Warnungen verfolgt. Wenn die Seite eine auslöst <xref:System.ArgumentException> , wird eine Warnmeldung mit der- <xref:System.Web.TraceContext.Warn%2A> Methode geschrieben. Wenn die Seite eine auslöst <xref:System.InvalidOperationException> , schreibt Sie mithilfe der-Methode eine Fehlermeldung <xref:System.Web.TraceContext.Write%2A> .  
  
 [!code-aspx-csharp[System.Web.Trace_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_4/CS/form4cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_4/VB/form4vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">Übersicht über die ASP.NET-Ablaufverfolgung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt Ablaufverfolgungsinformationen in das Ablaufverfolgungsprotokoll.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Write : string -&gt; unit" Usage="traceContext.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die in das Protokoll zu schreibende Ablaufverfolgungsmeldung.</param>
        <summary>Schreibt eine Ablaufverfolgungsmeldung in das Ablaufverfolgungsprotokoll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes Mal <xref:System.Web.TraceContext.Write%2A> , wenn die-Methode aufgerufen wird, wird der Messages-Auflistung eine Ablauf <xref:System.Web.TraceContext> Verfolgungs Meldung hinzugefügt <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> , auf die Sie zugreifen können, wenn Sie das- <xref:System.Web.TraceContext.TraceFinished> Ereignis behandeln. Die Meldung wird mit der <xref:System.Web.TraceContextRecord.IsWarning%2A> -Eigenschaft hinzugefügt, `false` und die-Eigenschaft ist <xref:System.Web.TraceContextRecord.ErrorInfo%2A> auf festgelegt `null` .  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">Übersicht über die ASP.NET-Ablaufverfolgung</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string category, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string category, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (category As String, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ category, System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Write : string * string -&gt; unit" Usage="traceContext.Write (category, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">Die Ablaufverfolgungskategorie, die die Meldung empfängt.</param>
        <param name="message">Die in das Protokoll zu schreibende Ablaufverfolgungsmeldung.</param>
        <summary>Schreibt Ablaufverfolgungsinformationen, einschließlich einer Meldung und aller benutzerdefinierten Kategorien, in das Ablaufverfolgungsprotokoll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes Mal <xref:System.Web.TraceContext.Write%2A> , wenn die-Methode aufgerufen wird, wird der Messages-Auflistung eine Ablauf <xref:System.Web.TraceContext> Verfolgungs Meldung hinzugefügt <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> , auf die Sie zugreifen können, wenn Sie das- <xref:System.Web.TraceContext.TraceFinished> Ereignis behandeln. Die Meldung wird mit der <xref:System.Web.TraceContextRecord.IsWarning%2A> -Eigenschaft hinzugefügt, `false` und die-Eigenschaft ist <xref:System.Web.TraceContextRecord.ErrorInfo%2A> auf festgelegt `null` .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die-Methode aufgerufen wird <xref:System.Web.TraceContext.Write%2A> , um eine Fehler Ablauf Verfolgungs Meldung in das Ablauf Verfolgungs Protokoll zu schreiben. In diesem Beispiel durchläuft der Delegat die Ablauf Verfolgungs Meldungen und schreibt Sie als HTML-Tabelle. Sie können jedoch dieselben Informationen in eine Datenbank oder einen Consumer des Profil Erstellungs Tools schreiben.  
  
 [!code-aspx-csharp[System.Web.Trace_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_5/CS/form5cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_5/VB/form5vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">Übersicht über die ASP.NET-Ablaufverfolgung</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string category, string message, Exception errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string category, string message, class System.Exception errorInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Write(System.String,System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (category As String, message As String, errorInfo As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ category, System::String ^ message, Exception ^ errorInfo);" />
      <MemberSignature Language="F#" Value="member this.Write : string * string * Exception -&gt; unit" Usage="traceContext.Write (category, message, errorInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="errorInfo" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="category">Die Ablaufverfolgungskategorie, die die Meldung empfängt.</param>
        <param name="message">Die in das Protokoll zu schreibende Ablaufverfolgungsmeldung.</param>
        <param name="errorInfo">Eine <see cref="T:System.Exception" />, die Informationen über den Fehler enthält.</param>
        <summary>Schreibt Ablaufverfolgungsinformationen, einschließlich aller benutzerdefinierten Kategorien, Ablaufverfolgungsmeldungen und Fehlerinformationen, in das Ablaufverfolgungsprotokoll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes Mal <xref:System.Web.TraceContext.Write%2A> , wenn die-Methode aufgerufen wird, wird der Messages-Auflistung eine Ablauf <xref:System.Web.TraceContext> Verfolgungs Meldung hinzugefügt <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> , auf die Sie zugreifen können, wenn Sie das- <xref:System.Web.TraceContext.TraceFinished> Ereignis behandeln. Die Meldung wird mit der <xref:System.Web.TraceContextRecord.IsWarning%2A> auf festgelegten-Eigenschaft hinzugefügt `false` , und die- <xref:System.Web.TraceContextRecord.ErrorInfo%2A> Eigenschaft wird auf das-Objekt festgelegt, das vom-Parameter übergeben wird `errorInfo` .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die-Methode aufgerufen wird <xref:System.Web.TraceContext.Write%2A> , um eine Fehler Ablauf Verfolgungs Meldung in das Ablauf Verfolgungs Protokoll zu schreiben. In diesem Beispiel werden unterschiedliche Ausnahmen als Fehler und Warnungen verfolgt. Wenn die Seite eine auslöst <xref:System.ArgumentException> , wird eine Warnmeldung mit der- <xref:System.Web.TraceContext.Warn%2A> Methode geschrieben. Wenn die Seite eine auslöst <xref:System.InvalidOperationException> , schreibt Sie mithilfe der-Methode eine Fehlermeldung <xref:System.Web.TraceContext.Write%2A> .  
  
 [!code-aspx-csharp[System.Web.Trace_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_4/CS/form4cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_4/VB/form4vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">Übersicht über die ASP.NET-Ablaufverfolgung</related>
      </Docs>
    </Member>
  </Members>
</Type>

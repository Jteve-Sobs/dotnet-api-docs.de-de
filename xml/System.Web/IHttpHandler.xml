<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e5655ad9711abf55e5f8999628a276496ace8de" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70729585" /></Metadata><TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <TypeSignature Language="F#" Value="type IHttpHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiert den Vertrag, den ASP.NET zum synchronen Verarbeiten von HTTP-Webanforderungen mit benutzerdefinierten HTTP-Handlern implementiert.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können benutzerdefinierte HTTP-Handler schreiben, um bestimmte, vordefinierte Typen von HTTP-Anforderungen in jeder Common Language Specification (CLS) kompatiblen Sprache zu verarbeiten. Der ausführbare Code, `HttpHandler` der in den Klassen definiert ist, und nicht herkömmliche ASP-oder ASP.NET-Webseiten, antwortet auf diese speziellen Anforderungen. HTTP-Handler bieten Ihnen die Möglichkeit, mit den Anforderungs-und Antwort Diensten auf niedriger Ebene des IIS-Webservers zu interagieren und Funktionen ähnlich wie ISAPI-Erweiterungen bereitzustellen, aber mit einem einfacheren Programmiermodell.  
  
 Wenn Ihr Handler auf Sitzungs Zustands Werte zugreift, muss er die <xref:System.Web.SessionState.IRequiresSessionState> -Schnittstelle implementieren (eine markerschnittstelle ohne Methoden).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob eine weitere Anforderung die <see cref="T:System.Web.IHttpHandler" />-Instanz verwenden kann.</summary>
        <value><see langword="true" />, wenn die <see cref="T:System.Web.IHttpHandler" />-Instanz wiederverwendet werden kann, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.IHttpHandler.IsReusable%2A> Sie legen die-Eigenschaft explizit `true` auf `false` oder durch den von Ihnen bereitgestellten Code <xref:System.Web.IHttpHandler.IsReusable%2A> fest, der den-Eigenschafts Accessor (Getter) überschreibt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden vier Textzeilen als Antwort auf eine Client Anforderung für eine Seite mit dem Namen "Handler. aspx" in den HTTP-Ausgabestream geschrieben. Alle Anforderungen für Handler. aspx werden von der `MyHttpHandler` -Klasse im-Namespace `HandlerExample` gewartet, der in der Assembly HandlerTest. dll enthalten ist.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="iHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Web.HttpContext" />-Objekt, das Verweise auf die systeminternen Serverobjekte bereitstellt (z. B. <see langword="Request" />, <see langword="Response" />, <see langword="Session" /> und <see langword="Server" />), die für die Bearbeitung von HTTP-Anforderungen verwendet werden.</param>
        <summary>Ermöglicht die Verarbeitung von HTTP-Webanforderungen durch einen benutzerdefinierten <see langword="HttpHandler" />, der die <see cref="T:System.Web.IHttpHandler" />-Schnittstelle implementiert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Platzieren Sie den `HttpHandler` benutzerdefinierten Code <xref:System.Web.IHttpHandler.ProcessRequest%2A> in der virtuellen Methode, wie im Abschnitt " [Beispiele](#examples) " gezeigt.
  
   
  
## Examples  
 Im folgenden Codebeispiel werden vier Textzeilen als Antwort auf eine Client Anforderung für eine Seite mit dem Namen "Handler. aspx" in den HTTP-Ausgabestream geschrieben. Alle Anforderungen für Handler. aspx werden von der `MyHttpHandler` -Klasse im-Namespace `HandlerExample` gewartet, der in der Assembly HandlerTest. dll enthalten ist.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

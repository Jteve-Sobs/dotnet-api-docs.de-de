<Type Name="MuxLogger" FullName="Microsoft.Build.Utilities.MuxLogger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c037fb8f480f5c1333bda7055a455b07d7bee02a" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86341928" /></Metadata><TypeSignature Language="C#" Value="public class MuxLogger : Microsoft.Build.Framework.INodeLogger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MuxLogger extends System.Object implements class Microsoft.Build.Framework.ILogger, class Microsoft.Build.Framework.INodeLogger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Utilities.MuxLogger" />
  <TypeSignature Language="VB.NET" Value="Public Class MuxLogger&#xA;Implements INodeLogger" />
  <TypeSignature Language="C++ CLI" Value="public ref class MuxLogger : Microsoft::Build::Framework::INodeLogger" />
  <TypeSignature Language="F#" Value="type MuxLogger = class&#xA;    interface INodeLogger&#xA;    interface ILogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.ILogger</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.INodeLogger</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Dies ist eine Multiplexing-Protokollierung. Der Zweck dieser Protokollierung besteht darin, die Registrierung und Registrierung mehrerer Protokollierungen während des Builds zu ermöglichen. Dies dient zur Unterstützung des VS-IDE-Szenarios, in dem Protokollierungen für die Buildanforderung jedes Projekt Systems registriert und deren Registrierung aufgehoben werden. Dies bedeutet, dass ein physischer Build mehrere logische Builds aufweisen kann, die jeweils über einen eigenen Satz von Protokollierungen verfügen. 
            
Der Mux-Logger registriert sich selbst beim Build-Manager als reguläre zentrale/l-Protokollierungs Protokollierung. Er ist verantwortlich für den Empfang von Nachrichten vom Build-Manager und die Weiterleitung an die richtige Protokollierung basierend auf dem logischen Build, von dem die Nachricht stammt.
            
Anforderungen: 1) die Multiplexing-Protokollierung wird am Anfang des buildbuilds alle Protokollierungen registriert, die registriert wurden, bevor der Build-Manager tatsächlich gestartet wurde. das Ereignis "Build Started" wird zur gleichen Zeit wie bei der Mux-Protokollierung protokolliert. alle Protokollierungen, die nach dem Start des Build-Managers registriert wurden, erhalten ein synthesiertes Build Started-Ereignis. Das Ereignis kann nicht zwischengespeichert werden, da der Zeitstempel des Build Started-Ereignisses bestimmt wird, wenn das Ereignis erstellt wird. das Zwischenspeichern des Ereignisses würde zu falschen Buildzeiten in den Protokollierungen, die für die MUX registriert sind.
                    
2) die MUX-Protokollierung wird vom Build-Manager initialisiert.
Die MUX überwacht alle Ereignisse auf der Ereignis Quelle vom Build-Manager und leitet Ereignisse ordnungsgemäß an die registrierten Protokollierungen weiter.
                
3) der Mux-Logger wird heruntergefahren, wenn der Build abgeschlossen ist. Zu diesem Zeitpunkt wird die Registrierung aller an ihn angefügten Protokollierungen aufgehoben.
                
4) die MUX-Protokollierung protokolliert das Buildereignis-Ereignis, wenn das Projekt fertiggestellt wird, das für das erste Projekt gestartet wurde.
               
Registrieren von Protokollierungen: 
Die Multiplexing-Protokollierung funktioniert wie folgt: eine Protokollierung wird mit einer Übermittlungs-ID an die MUX-Register Protokollierungs Methode übergeben, die zum Weiterleiten einer Nachricht an die korrekte Protokollierung verwendet wird.
Es wird eine neue Ereignis Quelle erstellt, sodass die über gegebene Protokollierung bei dieser Ereignis Quelle registriert werden kann, wenn das Build Started-Ereignis bereits protokolliert wurde. die MUX-Protokollierung erstellt dann ein neues BUILDSTARTEDEVENT und sendet diese an die Ereignis Quelle.
                
Unregisterloggers: Wenn eine buildübermittlung abgeschlossen ist, wird die unregisterloggers-Methode mit der Übermittlungs-ID aufgerufen.
An diesem Punkt suchen wir den Erfolgsstatus des Projekts "abgeschlossene Ereignisse" für die Übermittlungs-ID und protokollieren ein Ereignis zum Abschluss des Builds in der Protokollierung.
Die Ereignis Quelle wird bereinigt.  Dies ist möglicherweise interessant, da die Aufhebung der Registrierung von einem anderen Thread als dem, der die Protokollierung durchführt, stammt.
Dies kann ein Synchronisierungs Problem verursachen, wenn die Aufhebung der Registrierung aufgerufen wird, während Ereignisse protokolliert werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `MuxLogger` Funktionen sind in der Regel wie folgt:  
  
-   Der `MuxLogger` wird am Anfang des buildbuilds von Build Manager registriert.  
  
     Alle Protokollierungen, die vor dem BuildManager registriert werden, starten das Build-Started-Ereignis zur gleichen Zeit wie die `MuxLogger` .  
  
     Alle Protokollierungen, die nach dem BuildManager registriert werden, starten den Build und erhalten ein Ereignis, das von einem Build gestartet wurde. Das Ereignis kann nicht zwischengespeichert werden, da der Zeitstempel des Build-Started-Ereignisses bestimmt wird, wenn das Ereignis erstellt wird, und das Zwischenspeichern des Ereignisses würde zu falschen Buildzeiten in den Protokollierungen, die für registriert sind `MuxLogger` .  
  
-   Der `MuxLogger` wird vom Build-Manager initialisiert.  
  
     Der überwacht `MuxLogger` alle Ereignisse in der Ereignis Quelle vom Build-Manager und leitet Ereignisse ordnungsgemäß an die registrierten Protokollierungen weiter.  
  
-   Das `MuxLogger` wird heruntergefahren, wenn der Build abgeschlossen ist. Zu diesem Zeitpunkt wird die Registrierung aller an ihn angefügten Protokollierungen aufgehoben.  
  
-   Das `MuxLogger` protokolliert das Build-abgeschlossene Ereignis, wenn für jede Protokollierung das Projekt fertiggestellte Ereignis für das erste Project-Started-Ereignis angezeigt wird.  
  
 Die `MuxLogger` Protokollierung wird wie folgt registriert:  
  
1.  Die Protokollierung wird `MuxLogger.RegisterLogger` mit einer Übermittlungs-ID an die-Methode übergeben, die zum Weiterleiten einer Nachricht an die Protokollierung verwendet wird.  
  
2.  Der `MuxLogger` registriert die Protokollierung bei der `MuxLogger` Ereignis Quelle.  
  
3.  Wenn das Build-Started-Ereignis bereits protokolliert wurde, `MuxLogger` erstellt das ein neues Build-Started-Ereignis und sendet es an die Ereignis Quelle der Protokollierung.  
  
 Die `MuxLogger` Registrierung der Protokollierung wird auf folgende Weise aufgehoben:  
  
1.  Wenn eine buildübermittlung abgeschlossen ist, `MuxLogger.UnregisterLogger` wird die-Methode mit der Übermittlungs-ID für die Protokollierung aufgerufen.  
  
2.  Der `MuxLogger` sucht den Erfolgsstatus des Projekts, das abgeschlossen wurde, für die Übermittlungs-ID und protokolliert ein Build-abgeschlossene Ereignis für die Protokollierung.  
  
3.  Bereinigt `MuxLogger` die Ereignis Quelle.  
  
     Beachten Sie, dass die Aufhebung der Registrierung von einem anderen Thread als dem Protokollierungs Thread stammt und ein Synchronisierungs Problem auftreten kann, wenn die Aufhebung der Registrierung aufgerufen wird, während Ereignisse protokolliert werden.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MuxLogger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MuxLogger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Konstruktor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeEvaluationMetaprojects">
      <MemberSignature Language="C#" Value="public bool IncludeEvaluationMetaprojects { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeEvaluationMetaprojects" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.MuxLogger.IncludeEvaluationMetaprojects" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeEvaluationMetaprojects As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeEvaluationMetaprojects { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeEvaluationMetaprojects : bool with get, set" Usage="Microsoft.Build.Utilities.MuxLogger.IncludeEvaluationMetaprojects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sollen Auswertungsereignisse generierte Metaprojekte einschließen?</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeEvaluationProfiles">
      <MemberSignature Language="C#" Value="public bool IncludeEvaluationProfiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeEvaluationProfiles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.MuxLogger.IncludeEvaluationProfiles" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeEvaluationProfiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeEvaluationProfiles { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeEvaluationProfiles : bool with get, set" Usage="Microsoft.Build.Utilities.MuxLogger.IncludeEvaluationProfiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sollen Auswertungsereignisse Informationen zur Profilerstellung enthalten?</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeTaskInputs">
      <MemberSignature Language="C#" Value="public bool IncludeTaskInputs { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeTaskInputs" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.MuxLogger.IncludeTaskInputs" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeTaskInputs As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeTaskInputs { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeTaskInputs : bool with get, set" Usage="Microsoft.Build.Utilities.MuxLogger.IncludeTaskInputs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sollen Taskereignisse Taskeingaben einschließen?</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Initialize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert die <see langword="MuxLogger" />-Instanz.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (Microsoft.Build.Framework.IEventSource eventSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class Microsoft.Build.Framework.IEventSource eventSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.Initialize(Microsoft.Build.Framework.IEventSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (eventSource As IEventSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(Microsoft::Build::Framework::IEventSource ^ eventSource);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : Microsoft.Build.Framework.IEventSource -&gt; unit&#xA;override this.Initialize : Microsoft.Build.Framework.IEventSource -&gt; unit" Usage="muxLogger.Initialize eventSource" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Build.Framework.ILogger.Initialize(Microsoft.Build.Framework.IEventSource)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="Microsoft.Build.Framework.IEventSource" />
      </Parameters>
      <Docs>
        <param name="eventSource">Die Ereignisquelle.</param>
        <summary>Initialisiert die Protokollierung.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (Microsoft.Build.Framework.IEventSource eventSource, int maxNodeCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class Microsoft.Build.Framework.IEventSource eventSource, int32 maxNodeCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (eventSource As IEventSource, maxNodeCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(Microsoft::Build::Framework::IEventSource ^ eventSource, int maxNodeCount);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : Microsoft.Build.Framework.IEventSource * int -&gt; unit&#xA;override this.Initialize : Microsoft.Build.Framework.IEventSource * int -&gt; unit" Usage="muxLogger.Initialize (eventSource, maxNodeCount)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Build.Framework.INodeLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="Microsoft.Build.Framework.IEventSource" />
        <Parameter Name="maxNodeCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="eventSource">Die Ereignisquelle.</param>
        <param name="maxNodeCount">Die maximale Anzahl von Knoten.</param>
        <summary>Initialisiert die Protokollierung.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public string Parameters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Parameters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.MuxLogger.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public Property Parameters As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Parameters { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Parameters : string with get, set" Usage="Microsoft.Build.Utilities.MuxLogger.Parameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Build.Framework.ILogger.Parameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Erforderlich für iloggerinterface</summary>
        <value>Das Parameter Attribut.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterLogger">
      <MemberSignature Language="C#" Value="public void RegisterLogger (int submissionId, Microsoft.Build.Framework.ILogger logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterLogger(int32 submissionId, class Microsoft.Build.Framework.ILogger logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.RegisterLogger(System.Int32,Microsoft.Build.Framework.ILogger)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterLogger (submissionId As Integer, logger As ILogger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterLogger(int submissionId, Microsoft::Build::Framework::ILogger ^ logger);" />
      <MemberSignature Language="F#" Value="member this.RegisterLogger : int * Microsoft.Build.Framework.ILogger -&gt; unit" Usage="muxLogger.RegisterLogger (submissionId, logger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="submissionId" Type="System.Int32" />
        <Parameter Name="logger" Type="Microsoft.Build.Framework.ILogger" />
      </Parameters>
      <Docs>
        <param name="submissionId">Die Übermittlungs-ID der Protokollierung, die registriert wird.</param>
        <param name="logger">Die zu registrierende Protokollierung.</param>
        <summary>Diese Methode registriert eine Protokollierung für die MUX-Protokollierung und gibt dann ein Build Started-Ereignis aus, wenn das Build Started-Ereignis bereits protokolliert wurde.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit&#xA;override this.Shutdown : unit -&gt; unit" Usage="muxLogger.Shutdown " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Build.Framework.ILogger.Shutdown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Herunterfahren der Mux-Protokollierung und Löschen eines beliebigen Zustands</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterLoggers">
      <MemberSignature Language="C#" Value="public bool UnregisterLoggers (int submissionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool UnregisterLoggers(int32 submissionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.UnregisterLoggers(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UnregisterLoggers (submissionId As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool UnregisterLoggers(int submissionId);" />
      <MemberSignature Language="F#" Value="member this.UnregisterLoggers : int -&gt; bool" Usage="muxLogger.UnregisterLoggers submissionId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="submissionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="submissionId">Die Übermittlungs-ID der zu entfernenden Protokollierung.</param>
        <summary>Hebt die Registrierung aller Protokollierungen für eine angegebene Übermittlungs-ID auf.</summary>
        <returns><see langword="true" />, wenn die Methode die Protokollierung erfolgreich entfernt hat, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Verbosity">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Framework.LoggerVerbosity Verbosity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Build.Framework.LoggerVerbosity Verbosity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.MuxLogger.Verbosity" />
      <MemberSignature Language="VB.NET" Value="Public Property Verbosity As LoggerVerbosity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Build::Framework::LoggerVerbosity Verbosity { Microsoft::Build::Framework::LoggerVerbosity get(); void set(Microsoft::Build::Framework::LoggerVerbosity value); };" />
      <MemberSignature Language="F#" Value="member this.Verbosity : Microsoft.Build.Framework.LoggerVerbosity with get, set" Usage="Microsoft.Build.Utilities.MuxLogger.Verbosity" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Build.Framework.ILogger.Verbosity</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.Core</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.LoggerVerbosity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Erforderlich für die ILogger-Schnittstelle</summary>
        <value>Das verbosity-Attribut.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

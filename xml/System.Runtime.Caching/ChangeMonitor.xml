<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7f673552db74d3ed1ff4f6fe8dcc10612167e5c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36542104" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="6e3d1-101">Stellt eine Basisklasse für einen abgeleiteten benutzerdefinierten Typ bereit, der Wechsel in den Zustand der Daten überwacht, auf den ein Cacheelement angewiesen ist.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6e3d1-101">Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e3d1-102">Die <xref:System.Runtime.Caching.ChangeMonitor> Klasse dient als Basisklasse für abgeleitete Monitor-Klassen, die für bestimmte Cache-Implementierungen spezialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-102">The <xref:System.Runtime.Caching.ChangeMonitor> class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</span></span> <span data-ttu-id="6e3d1-103">Ein <xref:System.Runtime.Caching.ChangeMonitor> Instanz überwacht Änderungen in den Zustand der Daten, die ein Element im Cache abhängig.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-103">A <xref:System.Runtime.Caching.ChangeMonitor> instance monitors changes in the state of data which a cache item depends on.</span></span> <span data-ttu-id="6e3d1-104">Beispielsweise kann für das Element eine Datei oder der Entität sein, deren Inhalt zwischengespeichert werden.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-104">For example, the item can be a file or data entity whose contents are cached.</span></span> <span data-ttu-id="6e3d1-105">Wenn die Datei oder eine Entität aktualisiert wird, muss auch der zugeordnete Cacheeintrag geändert werden.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-105">If the file or data entity is updated, the associated cache entry must be changed also.</span></span> <span data-ttu-id="6e3d1-106">Allgemeine Elemente, die überwacht werden können, enthalten Datenentitäten (z. B. Datenbankfelder, Werte, Zeilen oder Tabellen), ein anderer Cacheeintrag, und Dateien und Attribute der Datei.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-106">Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</span></span>  
  
 <span data-ttu-id="6e3d1-107">Eine Änderung der Abhängigkeit ist eine Änderung in den Zustand einer Abhängigkeit.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-107">A dependency change is a change in the state of a dependency.</span></span> <span data-ttu-id="6e3d1-108">In einer typischen Cacheimplementierung nachdem eine <xref:System.Runtime.Caching.ChangeMonitor> Instanz benachrichtigt den Cache, der eine Abhängigkeit geändert hat, die vom Cache durchgeführt, der die erforderlichen Aktion, z. B. den eingefügten Cacheeintrag für ungültig zu erklären.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-108">In a typical cache implementation, after a <xref:System.Runtime.Caching.ChangeMonitor> instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</span></span>  
  
 <span data-ttu-id="6e3d1-109">Abgeleitete <xref:System.Runtime.Caching.ChangeMonitor> Klassen können zum Überwachen von Änderungen an der Abhängigkeit für spezifische andere Datenspeicher angepasst werden.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-109">Derived <xref:System.Runtime.Caching.ChangeMonitor> classes can be customized to monitor dependency changes for specific different data stores.</span></span> <span data-ttu-id="6e3d1-110">Es gibt z. B. cacheimplementierungen für ein Dateisystem, physischen Speicher oder einer Datenbank.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-110">For example, there are cache implementations for a file system, physical memory, or a database.</span></span> <span data-ttu-id="6e3d1-111">Die <xref:System.Runtime.Caching.ChangeMonitor> Klasse überprüft die Änderungen, die außerhalb des Caches auf, und klicken Sie dann gewarnt, Cache, der Änderungen vorgenommen wurden.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-111">The <xref:System.Runtime.Caching.ChangeMonitor> class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</span></span>  
  
 <span data-ttu-id="6e3d1-112">Die [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] beinhaltet die folgenden Klassen, die von abgeleitet <xref:System.Runtime.Caching.ChangeMonitor> Klasse:</span><span class="sxs-lookup"><span data-stu-id="6e3d1-112">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] includes the following classes that derive from <xref:System.Runtime.Caching.ChangeMonitor> class:</span></span>  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 <span data-ttu-id="6e3d1-113">Jede dieser Klassen funktioniert mit verschiedenen Typen von Abhängigkeiten.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-113">Each of these classes works with different types of dependencies.</span></span> <span data-ttu-id="6e3d1-114">Z. B. die abgeleiteten <xref:System.Runtime.Caching.FileChangeMonitor> Klasse überwacht die Änderungen an einen Cache für die Dateisystemdaten (Dateien und Ordner), von denen das Element im Cache abhängig.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-114">For example, the derived <xref:System.Runtime.Caching.FileChangeMonitor> class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="6e3d1-115">Dieser Typ ist threadsicher.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6e3d1-115">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <span data-ttu-id="6e3d1-116">
        <para>Bei der Erstellung einer benutzerdefiniertes Cacheimplementierung oder abgeleiteten Typs überwachen Änderung müssen Sie bestimmte Richtlinien beachtet. Die folgende Liste enthält die folgenden Richtlinien. Weitere Informationen finden Sie in der Dokumentation für die einzelnen Methoden oder Eigenschaften.  – Der Konstruktor einer abgeleiteten Klasse muss festgelegt die <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> -Eigenschaft, mit der Überwachung beginnen, und rufen <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> -Methode auf, bevor die Methode zurückgibt. Wenn ein Konstruktor ein Fehler, während der Konstruktionen auftritt und aufweisen muss, um Ressourcen zu entfernen, wird der Konstruktor kann nur Aufrufen der <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> überladen werden, nachdem die <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> Methode wird aufgerufen, da die <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> Überladung löst eine <see cref="T:System.InvalidOperationException" /> Ausnahme, wenn die Initialisierung nicht abgeschlossen ist.  – Wenn es sich bei Auftreten von Änderungen in die Daten, die überwacht werden, bevor die Initialisierung abgeschlossen, muss beim Aufruf des Konstruktors der <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> Methode vor dem Aufruf der <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> Methode.  – Hinter einem abgeleiteten <see cref="T:System.Runtime.Caching.ChangeMonitor" /> Typ instanziiert wird, müssen Sie den Monitor einfügen, in ein benutzerdefiniertes <see cref="T:System.Runtime.Caching.ObjectCache" /> Implementierung. Oder wenn Sie mit dem Monitor für die Änderung abgeschlossen haben, rufen Sie die <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> Methode.  – Nach dem ein <see cref="T:System.Runtime.Caching.ChangeMonitor" /> Instanz eingelegt ist eine <see cref="T:System.Runtime.Caching.ObjectCache" /> -Implementierung der <see cref="T:System.Runtime.Caching.ObjectCache" /> Instanz erforderlich, dass die änderungsüberwachung freigegeben wird. Auch wenn die Einfügemarke ungültig ist und bewirkt, dass eine Ausnahme aus, die <see cref="T:System.Runtime.Caching.ObjectCache" /> Implementierung aufrufen, muss die <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> überladen.  : Nachdem Sie eine abgeleitete änderungsüberwachung in einem Cache eingefügt wird die <see cref="T:System.Runtime.Caching.ObjectCache" /> Implementierung aufrufen muss <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, durch Übergeben einer <see cref="T:System.Runtime.Caching.OnChangedCallback" /> Objekt. Die <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> Methode kann nur einmal aufgerufen werden. Wenn eine Änderung der Abhängigkeit bereits aufgetreten ist, die <see cref="T:System.Runtime.Caching.OnChangedCallback" /> Instanz wird sofort aufgerufen, wenn <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> aufgerufen wird. Andernfalls die <see cref="T:System.Runtime.Caching.OnChangedCallback" /> Instanz wird nur einmal aufgerufen werden. Diesmal ein Aufruf wird entweder bei der <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> Methode wird aufgerufen, da die <see cref="T:System.Runtime.Caching.ChangeMonitor" /> eine Änderung erkannt oder wenn die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> Methode wird aufgerufen, auf die <see cref="T:System.Runtime.Caching.ChangeMonitor" />, welches Ereignis zuerst eintritt.  – Die <see cref="T:System.Runtime.Caching.OnChangedCallback" /> -Instanz, die vom bereitgestellten ein <see cref="T:System.Runtime.Caching.ObjectCache" /> Implementierung sollten entfernen Sie den zugehörigen Cache-Eintrag, und geben Sie einen Grund, indem die <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> Enumeration.  -Ein <see cref="T:System.Runtime.Caching.ChangeMonitor" /> Instanz Aufrufen der <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> Methode entweder bevor eine Cacheimplementierung aufgerufen hat <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> Methode oder nach. Wenn die <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> Methode wird aufgerufen, bevor <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> aufgerufen wird, wird die Basis <see cref="T:System.Runtime.Caching.ChangeMonitor" /> Implementierung benachrichtigt den Cache, der dieses Problem aufgetreten ist, und löst den Rückruf übergeben werden soll <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> direkt beim <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> aufgerufen wird. Zustandsdaten, die an die <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> Methode durch die änderungsüberwachung gespeichert und später übergeben die <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> Methode bei der <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> -Methode wird aufgerufen.  -Eine änderungsüberwachung muss implementieren die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> Methode. Weitere Informationen finden Sie unter den <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> Dokumentation der Methode.  – Die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> Überladung aufgerufen werden, um das Löschen der <see cref="T:System.Runtime.Caching.ChangeMonitor" /> Instanz. Die Regeln zum Aufrufen von Dispose lauten wie folgt:-bevor ein Element in den Cache eingefügt wird, ist es die Verantwortung des Aufrufers, Verwerfen einer <see cref="T:System.Runtime.Caching.ChangeMonitor" /> Instanz.  – Nachdem Element im Cache und die <see cref="T:System.Runtime.Caching.ChangeMonitor" /> auf einen Cache-Instanzen, die ihm zugeordneten übergeben werden, die Cache-Implementierung muss sicherstellen, dass, die die <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> -Methode aufgerufen wird, selbst wenn der Vorgang schlägt fehl.  – Nach einem Element und die zugehörigen <see cref="T:System.Runtime.Caching.ChangeMonitor" /> Instanzen werden mit einem Cache übergeben, die der Aufrufer muss die Abhängigkeit nicht freigeben, da bei der <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> -Methode aufgerufen wird, der Aufruf wird behandelt, als ob die Abhängigkeit geändert hat. Daher die <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> Methode wird automatisch aufgerufen.  – Unter Berücksichtigung dieser Regeln, die <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> muss in einem der folgenden Methoden aufgerufen werden:-Benutzer aufrufen müssen die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> -methodenüberladung, wenn sie nicht der abgeleiteten Änderungsüberwachungsinstanz in einem Cache einfügen möchten.  – Wenn versucht wird, dass die Implementierung der Änderungsüberwachungsinstanz in den Objektcache ein einzufügen, aber der einfügen ein Fehler auftritt, wird der Cache-Implementierung verantwortlich für das Aufrufen der <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> überladen. Wenn der Versuch der Einfügung eine Ausnahme verursacht hat, muss die Cacheimplementierung alle zugehörigen Abhängigkeiten freigeben.  – Wenn der Cacheeintrag entfernt wird, muss die Cacheimplementierung die Abhängigkeit auch freigeben.  : Die interne Implementierung der der <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> Methodenaufrufe automatisch die <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> -Methode auf, nachdem sie einen Rückruf aufruft, ist über registriert <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.  <block subset="none" type="note"><para> Dieser automatischen Aufruf der Dispose-Methode, bei der das Auslösen von Ereignissen tritt nur auf, wenn die Initialisierung der <see cref="T:System.Runtime.Caching.ChangeMonitor" /> Instanz wurde bereits abgeschlossen.  </para></block>  Wenn eine abgeleitete änderungsüberwachung-Konstruktor aufruft der <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> -Methode, wenn der Zustand des Monitors Änderung bereits geändert hat (d. h. der Zustand, der bereits Änderungen überwacht wird, wenn der Konstruktor noch aktiv ist) und dann die <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> wird Löschen Sie automatisch die änderungsüberwachung.  – Die <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> -Eigenschaftensatz auf <see langword="true" /> nach der <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> Methode wird aufgerufen, durch die abgeleiteten Änderungsüberwachungsinstanz, unabhängig davon, ob eine <see cref="T:System.Runtime.Caching.OnChangedCallback" /> Objekt festgelegt wurde durch einen Aufruf von der <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> Methode oder nicht.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="6e3d1-116">
          <para>If you create a custom cache implementation or a derived change monitor type, you must follow certain guidelines. The following list summarizes these guidelines. For more information, see the documentation for individual methods or properties.  -   The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the method returns. If a constructor encounters an error during constructions and must have to dispose of resources, the constructor can only call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called because the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload will throw an <see cref="T:System.InvalidOperationException" /> exception if initialization is not completed.  -   If changes occur in the data that is being monitored before initialization is complete, the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.  -   After a derived <see cref="T:System.Runtime.Caching.ChangeMonitor" /> type is instantiated, you must insert the monitor into a custom <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation. Or if you are finished using the change monitor, call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.  -   After a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance is inserted into a <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation, the <see cref="T:System.Runtime.Caching.ObjectCache" /> instance require that the change monitor is disposed. Even if the insertion is invalid and causes an exception, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.  -   After a derived change monitor is inserted into a cache, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, by passing a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object. The <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method can be called only one time. If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called. Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called only one time. This one time call occurs either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called because the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance detected a change, or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called on the <see cref="T:System.Runtime.Caching.ChangeMonitor" />, whichever occurs first.  -   The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance that is provided by an <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation should remove the associated cache entry and specify a reason by using the <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumeration.  -   A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method either before a cache implementation has called <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or after. If the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called before <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called, the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementation will notify the cache that this has occurred and will trigger the callback to be passed to <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is invoked. Any state data that is passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is saved by the change monitor and subsequently passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method when the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method is invoked.  -   A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method. For more information, see the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method documentation.  -   The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload must be called to dispose of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance. The rules for calling Dispose are as follows:  -   Before an item is inserted into the cache, it is the responsibility of caller to dispose of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.  -   Once cache item and the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances that are associated with it are passed to a cache, the cache implementer must make sure that that the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, even if the insert fails.  -   After an item and its associated <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances are passed to a cache, the caller must not dispose the dependency because when the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, the call is treated as if the dependency has changed. As a result, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is automatically invoked.  -   Taking these rules into consideration, the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method must be called in one of the following ways:  -   Users must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload if they decide not to insert the derived change-monitor instance into a cache.  -   If the implementation tries to insert the change-monitor instance into an object cache but the insertion fails, the cache implementation is responsible for calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload. When the insertion attempt causes an exception, the cache implementation must dispose of any associated dependencies.  -   If the cache entry is removed, the cache implementation must also dispose of the dependency.  -   The internal implementation of the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method automatically calls the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method after it calls a callback that is registered through <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.  <block subset="none" type="note"><para> This automatic call to the dispose method during the event firing only occurs if the initialization of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance was previously completed.  </para></block>  When a derived change monitor's constructor calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method, if the state of the change monitor has already changed (that is, the state that is monitored already changed when the constructor was still active) then the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method will automatically dispose of the change monitor.  -   The <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> property is set to <see langword="true" /> after the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called by the derived change-monitor instance, regardless of whether a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object has been set by a call to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or not.</para>
        </span>
      </span>
    </block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6e3d1-117">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.Caching.ChangeMonitor" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-117">Initializes a new instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
          <span data-ttu-id="6e3d1-118">Dieser Konstruktor wird von Konstruktoren in abgeleiteten Klassen aufgerufen, um die Basisklasse zu initialisieren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-118">This constructor is called from constructors in derived classes to initialize the base class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e3d1-119">Die <xref:System.Runtime.Caching.ChangeMonitor> -Klasse verfügt über einen Standardkonstruktor.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-119">The <xref:System.Runtime.Caching.ChangeMonitor> class has a default constructor.</span></span> <span data-ttu-id="6e3d1-120">Jedoch Klassen, die von der Basisklasse erben <xref:System.Runtime.Caching.ChangeMonitor> Klasse und definieren Sie benutzerdefinierte änderungsüberwachung Verhalten durchzuführenden Initialisierung im Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-120">However, classes that inherit from the base <xref:System.Runtime.Caching.ChangeMonitor> class and define custom change-monitoring behavior must perform initialization in the constructor.</span></span> <span data-ttu-id="6e3d1-121">Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Vererber.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-121">For more information, see the Notes for Inheritors section.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="6e3d1-122">
            <para>Muss der Konstruktor einer abgeleiteten Klasse festgelegt. die <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> -Eigenschaft, mit der Überwachung beginnen, und rufen die <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> -Klasse vor dem zurückgeben. Wenn eine Abhängigkeit ändert vor der Initialisierung ist abgeschlossen (z. B. wenn ein abhängiger Cacheschlüssel nicht im Cache gefunden wird), den Konstruktor aufrufen muss die <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> Methode vor dem Aufrufen der <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> Methode. In diesem Fall kann Konstruktor aufrufen der <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> Methode erst nach der <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> -Methode aufgerufen wird, da die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> Methode löst eine Ausnahme aus, wenn die Initialisierung nicht abgeschlossen ist.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-122">
              <para>The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> class before it returns. If a dependency changes before initialization is complete (for example, if a dependent cache key is not found in the cache), the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before it calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method. In this case, constructor can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6e3d1-123">Gibt alle von der aktuellen Instanz der <see cref="T:System.Runtime.Caching.ChangeMonitor" />-Klasse verwendeten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-123">Releases all resources used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e3d1-124">Die <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Methode wird verwendet, um die Version der <xref:System.Runtime.Caching.ChangeMonitor> -Instanz und die zugehörigen Ressourcen.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-124">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is used to release the <xref:System.Runtime.Caching.ChangeMonitor> instance and related resources.</span></span> <span data-ttu-id="6e3d1-125">Die öffentliche <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Methode wird aufgerufen, um den Freigabeprozess mit Schlüssel Lebenszyklusereignisse von abgeleiteten Änderungsüberwachungsklassen (z. B. Initialisierung) zu koordinieren und Freigeben der <xref:System.Runtime.Caching.ChangeMonitor> Instanz, sodass die Instanz die Garbage Collection durchgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-125">The public <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is invoked to coordinate the disposal process with key life-cycle events of derived change-monitor classes (such as initialization), and to release the <xref:System.Runtime.Caching.ChangeMonitor> instance so that the instance can be garbage collected.</span></span> <span data-ttu-id="6e3d1-126">Die <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Methode wird implementiert von abgeleiteten Änderungsüberwachungsklassen ihre verwalteten und nicht verwalteten Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-126">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is implemented by derived change-monitor classes to dispose of their managed and unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6e3d1-127">Gibt alle von der aktuellen Instanz der <see cref="T:System.Runtime.Caching.ChangeMonitor" />-Klasse verwendeten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-127">Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e3d1-128">Die <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Methode ruft die <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> -Methode der abgeleiteten Klassen nur einmal beim ersten Aufruf ist.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-128">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method invokes the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method of derived classes only one time, the first time it is called.</span></span> <span data-ttu-id="6e3d1-129">Nachfolgende Aufrufe der <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Methode haben keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-129">Subsequent calls to the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method have no effect.</span></span> <span data-ttu-id="6e3d1-130">Nachdem die Methode aufgerufen wurde, die <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> -Eigenschaftensatz auf `true`.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-130">After the method has been called, the <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="6e3d1-131">Die <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Überladung aufgerufen werden, um das Löschen einer <xref:System.Runtime.Caching.ChangeMonitor> Instanz.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-131">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload must be called to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="6e3d1-132">Im folgenden finden die Regeln zum Aufrufen der Dispose-Methode:</span><span class="sxs-lookup"><span data-stu-id="6e3d1-132">The following are the rules for calling the dispose method:</span></span>  
  
-   <span data-ttu-id="6e3d1-133">Bevor ein Element in den Cache eingefügt wird, ist es der Verantwortung des Aufrufers, Verwerfen einer <xref:System.Runtime.Caching.ChangeMonitor> Instanz.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-133">Before an item is inserted into the cache, it is the caller's responsibility to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
-   <span data-ttu-id="6e3d1-134">Nach Element im Cache und die <xref:System.Runtime.Caching.ChangeMonitor> -Instanzen, die ihm zugeordneten übergeben werden, auf einen Cache, der Cache-Implementierung, die sicherstellen muss, dass <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> aufgerufen wird, selbst wenn der Vorgang schlägt fehl.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-134">Once cache item and the <xref:System.Runtime.Caching.ChangeMonitor> instances that are associated with it are passed to a cache, the cache implementer that must make sure that <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> is called, even if the insert fails.</span></span>  
  
-   <span data-ttu-id="6e3d1-135">Nach einem Element und die zugehörigen <xref:System.Runtime.Caching.ChangeMonitor> Instanzen werden mit einem Cache übergeben, die der Aufrufer muss die Abhängigkeit nicht freigeben, da bei der <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> -Methode aufgerufen wird, der Aufruf wird behandelt, als ob die Abhängigkeit geändert hat.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-135">After an item and its associated <xref:System.Runtime.Caching.ChangeMonitor> instances are passed to a cache, the caller must not dispose the dependency because when the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is called, the call is treated as if the dependency has changed.</span></span> <span data-ttu-id="6e3d1-136">Daher die <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methode wird automatisch aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-136">As a result, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is automatically invoked.</span></span>  
  
-   <span data-ttu-id="6e3d1-137">Diese Regeln zu berücksichtigen, dass die <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> muss in einem der folgenden Methoden aufgerufen werden:</span><span class="sxs-lookup"><span data-stu-id="6e3d1-137">Taking these rules into consideration, the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method must be called in one of the following ways:</span></span>  
  
    -   <span data-ttu-id="6e3d1-138">Benutzer müssen aufrufen, die <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> -methodenüberladung, wenn sie nicht der abgeleiteten Änderungsüberwachungsinstanz in einem Cache einfügen möchten.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-138">Users must call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
    -   <span data-ttu-id="6e3d1-139">Die Cacheimplementierung ist verantwortlich für das Aufrufen der <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Überladung, wenn versucht wird, dass die Implementierung der Änderungsüberwachungsinstanz in den Objektcache ein einzufügen, jedoch schlägt der Vorgang fehl.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-139">The cache implementation is responsible for calling the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</span></span> <span data-ttu-id="6e3d1-140">Wenn der Versuch der Einfügung eine Ausnahme verursacht hat, muss die Cacheimplementierung alle zugehörigen Abhängigkeiten freigeben.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-140">When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</span></span>  
  
    -   <span data-ttu-id="6e3d1-141">Wenn der Cacheeintrag entfernt wird, muss die Abhängigkeit von der Cacheimplementierung auch freigeben.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-141">If the cache entry is removed, the cache implementation must also dispose the dependency.</span></span>  
  
 <span data-ttu-id="6e3d1-142">Die interne Implementierung der der <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methodenaufrufe automatisch die <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> -Methode auf, nachdem sie einen Rückruf aufruft, ist über registriert der <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-142">The internal implementation of the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method after it calls a callback that is registered through the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e3d1-143">Diese automatische Dispose bei den Auslösen von Ereignissen tritt nur auf, wenn die Initialisierung der <xref:System.Runtime.Caching.ChangeMonitor> Instanz bereits abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-143">This automatic dispose during the event firing only occurs if the initialization of the <xref:System.Runtime.Caching.ChangeMonitor> instance previously completed.</span></span>  
  
 <span data-ttu-id="6e3d1-144">Wenn eine abgeleitete änderungsüberwachung Konstruktor ruft die <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> -Methode, wenn der Zustand des Monitors Änderung bereits geändert hat (d. h. der Zustand, der überwacht wird bereits geändert, wenn der Konstruktor noch aktiv ist) klicken Sie dann <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> wird Löschen Sie automatisch die änderungsüberwachung.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-144">When a derived change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method will automatically dispose the change monitor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e3d1-145">Benutzer dürfen nicht aufrufen. die <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-145">Users should not call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="6e3d1-146">Sie können keine jedoch verhindern, dass Benutzer Aufrufen der Methode.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-146">However, you cannot prevent users from calling the method.</span></span> <span data-ttu-id="6e3d1-147">Aus diesem Grund, falls dies der Fall, die <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> -Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-147">Therefore, if they do, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked.</span></span> <span data-ttu-id="6e3d1-148">In diesem Fall wird der Cacheeintrag benachrichtigt, als ob die Abhängigkeit geändert hat.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-148">In that case, the cache entry is notified as if the dependency has changed.</span></span>  
  
 <span data-ttu-id="6e3d1-149">Um zu verhindern, dass abgeleitete Klassen überschreiben <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Methode, die Methode ist es sich nicht um eine explizite schnittstellenimplementierung.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-149">To prevent derived classes from overriding <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method, the method is not an explicit interface implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6e3d1-150">Die Initialisierung ist in der abgeleiteten Änderungsüberwachungsklasse nicht vollständig, die die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />-Basismethode aufrief.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-150">Initialization is not complete in the derived change-monitor class that called the base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span>
          </span>
        </exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="6e3d1-151">
            <see langword="true" />, um verwaltete und nicht verwaltete Ressourcen sowie Verweise auf eine <see cref="T:System.Runtime.Caching.ChangeMonitor" />-Instanz freizugeben, <see langword="false" />, um nur nicht verwaltete Ressourcen freizugeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-151">
              <see langword="true" /> to release managed and unmanaged resources and any references to a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
          <span data-ttu-id="6e3d1-152">Wenn <see langword="false" /> übergeben wird, wird die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />-Methode von einem <see langword="finalizer" />-Thread aufgerufen, und alle externen verwalteten Verweise sind wahrscheinlich nicht mehr gültig, da sie bereits von der Garbage Collection freigegeben wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-152">When <see langword="false" /> is passed, the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method is called by a <see langword="finalizer" /> thread and any external managed references are likely no longer valid because they have already been garbage collected.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6e3d1-153">Gibt alle verwalteten und nicht verwalteten Ressourcen und alle Verweise auf die <see cref="T:System.Runtime.Caching.ChangeMonitor" />-Instanz frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-153">Releases all managed and unmanaged resources and any references to the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span>
          </span>
          <span data-ttu-id="6e3d1-154">Diese Überladung muss von abgeleiteten Änderungsüberwachungsklassen implementiert werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-154">This overload must be implemented by derived change-monitor classes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e3d1-155">Wenn der Wert des `disposing` Wert `true`, alle verwaltete und nicht verwaltete Ressourcen freigegeben, und alle Verweise auf dieses Objekt werden freigegeben, sodass die abgeleiteten Änderungsüberwachungsinstanz Garbage Collection bereinigt werden kann.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-155">When the value of `disposing` value is `true`, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</span></span> <span data-ttu-id="6e3d1-156">Es ist sichergestellt, dass die Basis <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Methode ruft die implementierte <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Methode nur einmal.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-156">It is guaranteed that the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method will invoke the implemented <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method only one time.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="6e3d1-157">
            <para>Eine änderungsüberwachung implementieren muss die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> -Überladung verwenden, um alle freigeben verwaltet und nicht verwaltete Ressourcen bei der der Wert des <paramref name="disposing" /> ist <see langword="true" />. Die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> methodenüberladung mit einem <paramref name="disposing" /> Wert <see langword="true" /> wird aufgerufen, nur einmal, d. h., wenn die Instanz zum ersten Mal freigegeben wird. Rufen Sie eine änderungsüberwachung muss nicht die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> direkt überladen werden. Eine abgeleitete änderungsüberwachung kann den öffentlichen parameterlosen Aufrufen <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> Methode auf der Basis <see cref="T:System.Runtime.Caching.ChangeMonitor" /> Klasse.  Alternativ kann eine änderungsüberwachung eine Finalizer-Methode implementieren. In diesem Fall kann der Finalizer Aufrufen der <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> Methode und übergeben sie einen <paramref name="disposing" /> Wert <see langword="false" />. Dies ist jedoch normalerweise nicht erforderlich. Überwachung für Änderungen an der Abhängigkeit erfolgt in der Regel von einem Dienst, der einen Verweis auf die Änderungsüberwachungsinstanz verwaltet. Der Verweis wird verhindert, dass die Instanz von der Garbage Collection und aus diesem Grund stellt eine Finalizer-Methode nicht erforderlich. Um Speicherverluste zu vermeiden, wenn eine Abhängigkeit geändert wird, die <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> Methode entfernt die Änderungsüberwachungsinstanz (es sei denn, die Initialisierung nicht abgeschlossen wurde).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-157">
              <para>A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload to release all managed and unmanaged resources when the value of <paramref name="disposing" /> is <see langword="true" />. The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method overload that has a <paramref name="disposing" /> value of <see langword="true" /> is called only one time, namely, when the instance is disposed for the first time. A change monitor must not call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload directly. A derived change monitor can call the public parameter-less <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method on the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.  Alternatively, a change monitor can implement a finalizer method. In that case, the finalizer can invoke the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method and pass it a <paramref name="disposing" /> value of <see langword="false" />. However, this is usually unnecessary. Monitoring for dependency changes is typically performed by a service that maintains a reference to the change-monitor instance. The reference prevents the instance from being garbage collected, and therefore makes a finalizer method unnecessary. To avoid memory leaks, when a dependency changes, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method disposes the change-monitor instance (unless initialization has not finished).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6e3d1-158">Ruft einen Wert ab, der angibt, dass der von der <see cref="T:System.Runtime.Caching.ChangeMonitor" />-Klasse überwachte Zustand geändert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-158">Gets a value that indicates that the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class has changed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6e3d1-159">
            <see langword="true" />, wenn der von der <see cref="T:System.Runtime.Caching.ChangeMonitor" />-Instanz überwachte Zustand geändert wurde, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-159">
              <see langword="true" /> if the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance has changed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e3d1-160">Sehen Sie den Wert dieser Eigenschaft in einer abgeleiteten <xref:System.Runtime.Caching.ChangeMonitor> Klasse, um festzustellen, ob eine Abhängigkeit geändert hat.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-160">You can check the value of this property in a derived <xref:System.Runtime.Caching.ChangeMonitor> class to see whether a dependency has changed.</span></span>  
  
 <span data-ttu-id="6e3d1-161">Der Wert wird festgelegt, um `true` Wenn eine Abhängigkeit geändert wird (das heißt, wenn die <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methode wird aufgerufen).</span><span class="sxs-lookup"><span data-stu-id="6e3d1-161">The value is set to `true` when a dependency change occurs (that is, when the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called).</span></span> <span data-ttu-id="6e3d1-162">Nach der <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methode wird aufgerufen, von der abgeleiteten Klasse den Wert des der <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> Eigenschaft `true`, unabhängig davon, ob eine <xref:System.Runtime.Caching.OnChangedCallback> Instanz wurde durch einen Aufruf von benachrichtigt die <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-162">After the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called by the derived class, the value of the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property will be `true`, regardless of whether a <xref:System.Runtime.Caching.OnChangedCallback> instance has been notified by a call to the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e3d1-163">Aufrufer können überprüfen, die <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> Eigenschaft, um festzustellen, ob eine Abhängigkeit geändert hat.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-163">Callers can check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property to see whether a dependency has changed.</span></span> <span data-ttu-id="6e3d1-164">In einer Umgebung mit mehreren Threads ein einfacherer und mehr verwaltbaren Ansatz ist jedoch zum Einfügen von Daten in einem Cache-Implementierung ohne Überprüfung der <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-164">However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property.</span></span> <span data-ttu-id="6e3d1-165">Cache-Implementierungen müssen überprüfen, die <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> -Eigenschaft für Sie und dürfen keine führen eine Einfügung oder set-Vorgang, wenn eine oder mehrere zugeordnete Abhängigkeiten bereits geändert haben.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-165">Cache implementations must check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6e3d1-166">Wird vom Konstruktor abgeleiteter Klassen aufgerufen, um anzugeben, dass die Initialisierung abgeschlossen ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-166">Called from the constructor of derived classes to indicate that initialization is finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e3d1-167">Wenn eine Abhängigkeit ändert, bevor die Initialisierung abgeschlossen ist, in einer abgeleiteten Klasse ist, rufen der Konstruktor der abgeleiteten Klasse die <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-167">If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span>  
  
 <span data-ttu-id="6e3d1-168">Wenn die <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methode wird aufgerufen, die <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> Eigenschaft wird automatisch festgelegt, um `true` durch die änderungsüberwachung.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-168">When the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked, the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is automatically set to `true` by the change monitor.</span></span> <span data-ttu-id="6e3d1-169">Wenn daher die änderungsüberwachung-Konstruktor ruft die <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> -Methode der Basisklasse wird automatisch aufgerufen. die <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-169">As a result, when the change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, the base class will automatically call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="6e3d1-170">Wenn die Initialisierung abgeschlossen ist, wird die <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> -Methode verwirft automatisch die abgeleiteten Änderungsüberwachungsinstanz.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-170">If initialization is complete, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically disposes the derived change-monitor instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="6e3d1-171">
            <para>Rufen Sie der Konstruktor einer abgeleiteten Klasse muss die grundlegende <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> -Methode auf, bevor Sie den Konstruktor zurück. Der Konstruktor einer abgeleiteten Klasse aufrufen, kann die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> Methode erst nach <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> aufgerufen wurde, da die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> Methode löst eine Ausnahme aus, wenn die Initialisierung nicht abgeschlossen ist.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-171">
              <para>The constructor of a derived class must call the base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the constructor returns. The constructor of a derived class can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6e3d1-172">Ruft einen Wert ab, der angibt, dass die abgeleitete Instanz einer <see cref="T:System.Runtime.Caching.ChangeMonitor" />-Klasse freigegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-172">Gets a value that indicates that the derived instance of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class is disposed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6e3d1-173">
            <see langword="true" />, wenn die Instanz freigegeben wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-173">
              <see langword="true" /> if the instance is disposed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e3d1-174">Die Eigenschaft wird festgelegt, um `true` nach der Basis <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Methodenaufrufe der <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> -Methode in einer abgeleiteten Klasse, die Instanz zu verwerfen.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-174">The property is set to `true` after the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method in a derived class to dispose of the instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">
          <span data-ttu-id="6e3d1-175">Ein Verweis auf eine Methode, die aufgerufen wird, wenn eine Abhängigkeit geändert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-175">A reference to a method that is invoked when a dependency has changed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6e3d1-176">Wird von Cacheimplementierungen aufgerufen, um einen Rückruf zu registrieren und über den <see cref="T:System.Runtime.Caching.ObjectCache" />-Delegaten eine <see cref="T:System.Runtime.Caching.OnChangedCallback" />-Instanz zu benachrichtigen, wenn sich eine Abhängigkeit geändert hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-176">Called by Cache implementers to register a callback and notify an <see cref="T:System.Runtime.Caching.ObjectCache" /> instance through the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegate when a dependency has changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e3d1-177">Cacheimplementierungen verwenden Sie diese Methode, bis zu eine änderungsüberwachung zu sich selbst verknüpfen.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-177">Cache implementers use this method to wire themselves up to a change monitor.</span></span> <span data-ttu-id="6e3d1-178">Wenn Sie ordnen Sie eine oder mehrere Monitore mit das Element im Cache ändern möchten, übergeben Sie einen <xref:System.Runtime.Caching.CacheItemPolicy> Instanz mit einer aufgefüllten Änderung Monitore-Eigenschaft, die das Element im Cache.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-178">If you associate one or more change monitors with the cache item, you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance with a populated change monitors property to the cache item.</span></span> <span data-ttu-id="6e3d1-179">Ein Cache-Implementierung unterstützt Monitore ändern ist verantwortlich für das Durchlaufen der <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> -Eigenschaft, und registrieren Sie die <xref:System.Runtime.Caching.OnChangedCallback> Delegaten mit jedem Ändern der überwachen, die es findet.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-179">A cache implementer that supports change monitors is responsible for iterating over the <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> property and register the <xref:System.Runtime.Caching.OnChangedCallback> delegates with each change monitor that it finds.</span></span>  
  
 <span data-ttu-id="6e3d1-180">Da die <xref:System.Runtime.Caching.OnChangedCallback> -Delegat ist einen optionale State-Parameter, die eine konkrete Implementierung von Monitor kann optionale Zustandsinformationen übergeben.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-180">Because the <xref:System.Runtime.Caching.OnChangedCallback> delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</span></span> <span data-ttu-id="6e3d1-181">Die Cache-Implementierung wird bestimmt, ob es sich bei explizite Abhängigkeit für den Typ des Zustands, der eine benutzerdefinierte änderungsüberwachung als Teil des Rückrufs übergeben, die ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-181">The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6e3d1-182">Die Basis-Cache-Erweiterbarkeits-API sind keine Anforderungen für explizite Abhängigkeit für den Typ des Zustands.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-182">The base cache extensibility API has no requirement for explicit dependency on the type of state.</span></span>  
  
 <span data-ttu-id="6e3d1-183">Die Implementierung der <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Methode ermittelt automatisch, ob der Zustand des Monitors bereits zum Zeitpunkt geändert hat <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-183">The implementation of the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method automatically determines whether the state of the monitor has already changed at the time <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called.</span></span> <span data-ttu-id="6e3d1-184">Wenn die <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> -Eigenschaft ist `true`, und klicken Sie dann die Methode automatisch Ruft die <xref:System.Runtime.Caching.OnChangedCallback> -Ereignishandler, der registriert wurde die <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-184">If the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is `true`, then the method automatically calls the <xref:System.Runtime.Caching.OnChangedCallback> event handler, that was registered, through the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span> <span data-ttu-id="6e3d1-185">Dies tritt auf, da es möglich ist, ab dem Zeitpunkt eine Cacheimplementierung eine änderungsüberwachung, mit der Zeit erstellt, eine Cacheimplementierung Ruft den Monitor, und verbindet sich bis zu, der zugrunde liegenden überwachte Zustand geändert hat.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-185">This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</span></span> <span data-ttu-id="6e3d1-186">Wenn der Status bereits klicken Sie dann das Objekt geändert hat, die an die <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methode `null`.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-186">If the state has already changed then the object that is passed to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is `null`.</span></span>  
  
 <span data-ttu-id="6e3d1-187">Die <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Methode kann nur einmal aufgerufen werden, und löst eine Ausnahme bei nachfolgenden Aufrufen.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-187">The <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method can be invoked only one time, and will throw an exception on subsequent calls.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6e3d1-188">Die Rückrufmethode wurde bereits aufgerufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-188">The callback method has already been invoked.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6e3d1-189">
            <paramref name="onChangedCallback" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-189">
              <paramref name="onChangedCallback" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="6e3d1-190">
            <para>1.  Rufen Sie die <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> Methode, um alle Änderungen an der Abhängigkeit benachrichtigt zu werden. Wenn eine Änderung der Abhängigkeit bereits aufgetreten ist, die <see cref="T:System.Runtime.Caching.OnChangedCallback" /> Instanz wird aufgerufen, wenn <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> aufgerufen wird. Andernfalls die <see cref="T:System.Runtime.Caching.OnChangedCallback" /> Instanz wird aufgerufen, wenn Sie einmal, wenn entweder die <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> Methode wird aufgerufen, oder wenn die <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> -Methode aufgerufen wird, welches Ereignis zuerst eintritt. Die <see cref="T:System.Runtime.Caching.OnChangedCallback" /> -Instanz, von der Cacheimplementierung bereitgestellt sollten den Cacheeintrag zu entfernen und gegebenenfalls durch den Aufrufer Cache wird ausgelöst, die notwendige Änderung oder Update-Ereignis an den ursprünglichen Aufrufer des Cache.  2.  Die Cacheimplementierung muss den Cacheeintrag zu entfernen, der eine Änderung der Abhängigkeitseigenschaft zugeordnet ist.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-190">
              <para>1.  You must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method to be notified of any dependency changes. If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called. Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called one time, either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, whichever occurs first. The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance provided by the cache implementation should remove the cache entry and if it is requested by the cache caller, raise the necessary change or update event back to the original cache caller.  2.  The object cache implementation must remove the cache entry that is associated with a dependency change.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="6e3d1-191">Die Daten für das Change-Ereignis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-191">The data for the change event.</span>
          </span>
          <span data-ttu-id="6e3d1-192">Dieser Wert kann <see langword="null" /> sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-192">This value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6e3d1-193">Wird von abgeleiteten Klassen aufgerufen, um das Ereignis auszulösen, wenn sich eine Abhängigkeit ändert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-193">Called by derived classes to raise the event when a dependency changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e3d1-194">In der Regel die <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methode wird aufgerufen, wenn Änderungen an der Abhängigkeit auftreten.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-194">Typically, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called when dependency changes occur.</span></span> <span data-ttu-id="6e3d1-195">Die <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methode wird auch aufgerufen werden, wenn eine Änderungsüberwachungsinstanz freigegeben wird, aber die Freigabe tritt nur dann, wenn der Rückruf noch nicht aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-195">The <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</span></span>  
  
 <span data-ttu-id="6e3d1-196">Wenn die <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methode wird aufgerufen, bevor die <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> -Methode aufgerufen wird, werden die Daten aus dem Aufruf der <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Methode wird von der Cacheimplementierung gespeichert.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-196">If the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called before the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called, the state data from the call to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is saved by the cache implementation.</span></span> <span data-ttu-id="6e3d1-197">Darüber hinaus wird der Rückruf, der die <xref:System.Runtime.Caching.OnChangedCallback> Methode wird sofort aufgerufen, wenn die <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> -Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-197">Also, the callback to the <xref:System.Runtime.Caching.OnChangedCallback> method is invoked immediately when the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6e3d1-198">Ruft einen Wert ab, der die <see cref="T:System.Runtime.Caching.ChangeMonitor" />-Klasseninstanz darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-198">Gets a value that represents the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6e3d1-199">Der Bezeichner für eine Änderungsüberwachungsinstanz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-199">The identifier for a change-monitor instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e3d1-200">Die <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> Eigenschaftswert in der Regel besteht aus Abhängigkeit, kombiniert mit Zeichenfolgendaten eindeutig Bezeichner die Daten, die überwacht wird eine <xref:System.Runtime.Caching.ChangeMonitor> Instanz.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-200">The <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="6e3d1-201">Der Wert des der <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> Eigenschaft ist eine Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-201">The value of the <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property is a string.</span></span> <span data-ttu-id="6e3d1-202">Der Wert der Zeichenfolge wird verwendet, die eindeutige ID des Zuweisen der <xref:System.Runtime.Caching.ChangeMonitor> Instanz.</span><span class="sxs-lookup"><span data-stu-id="6e3d1-202">The value of the string is used to assign the unique ID of the <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="6e3d1-203">
            <para>Durch Überschreiben der Eigenschaft, können Sie eine benutzerdefinierte Implementierung für den Zeichenfolgenwert der Eigenschaft definieren, um eine eindeutige ID zugewiesen</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-203">
              <para>By overriding the property, you can define a custom implementation for the string value of the property in order to assign it a unique ID.</para>
            </span>
          </span>
        </block>
        <block subset="none" type="overrides">
          <span data-ttu-id="6e3d1-204">
            <para>In abgeleiteten Klassen müssen Sie den Wert der Eigenschaft im Konstruktor festlegen.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6e3d1-204">
              <para>In derived classes, you must set the value of the property in the constructor.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>
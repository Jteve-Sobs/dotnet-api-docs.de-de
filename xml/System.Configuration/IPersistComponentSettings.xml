<Type Name="IPersistComponentSettings" FullName="System.Configuration.IPersistComponentSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5677725efafffdc6505a5ad61b0bbab74e1352a8" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37687449" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPersistComponentSettings" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersistComponentSettings" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IPersistComponentSettings" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersistComponentSettings" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersistComponentSettings" />
  <TypeSignature Language="F#" Value="type IPersistComponentSettings = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiert Standardfunktionen für Steuerelemente oder Bibliotheken, die Anwendungseinstellungen speichern oder abrufen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können in der Regel anwendungsunterstützung für die Einstellungen für eine Anwendung hinzufügen, erstellen Sie eine Wrapperklasse für Einstellungen, die von abgeleitet ist <xref:System.Configuration.ApplicationSettingsBase>, und fügen dann spezielle Eigenschaften dieser Klasse hinzu. Allerdings ist dieser Ansatz nicht ausreichend Anwendungseinstellungen für ein Steuerelement gekapselt, damit von den Details des Containers geschützt ist. Die <xref:System.Configuration.IPersistComponentSettings> Schnittstelle stellt eine Anwendung mit einer standard-Schnittstelle für die Kommunikation der Anwendung Einstellungen Status änderungsanforderungen auf ein Steuerelement, Komponente oder Bibliothek-Modul bereit. Design-Time-Tools, die auch für diese Schnittstelle zum Verwalten von Steuerelementen und Komponenten ordnungsgemäß abhängig sind.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
  </Docs>
  <Members>
    <Member MemberName="LoadComponentSettings">
      <MemberSignature Language="C#" Value="public void LoadComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member LoadComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.LoadComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest die Anwendungseinstellungen des Steuerelements in die entsprechenden Eigenschaften und aktualisiert den Zustand des Steuerelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Allgemeinen die <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> Methode führt zwei grundlegende Vorgänge:  
  
-   Es bewirkt, dass jede Anwendungsinstanz-Einstellungen enthalten das Steuerelement, um die Werte der Eigenschaften seiner Anwendungseinstellungen, in der Regel durch den Aufruf zu aktualisieren sind ihre <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> Methoden.  
  
-   Je nach Bedarf aktualisiert er die allgemeinen Eigenschaften, die auf diesen Einstellungen neu geladene Eigenschaften abhängig sind. Wenn die Einstellungsklasse enthalten z. B. eine `location` Einstellungseigenschaft <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> sollten sicherstellen, dass des Steuerelements <xref:System.Windows.Forms.Control.Location%2A> Eigenschaft wird diese Einstellung neu geladene entsprechend aktualisiert.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
      </Docs>
    </Member>
    <Member MemberName="ResetComponentSettings">
      <MemberSignature Language="C#" Value="public void ResetComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member ResetComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.ResetComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt die Eigenschaften der Anwendungseinstellungen des Steuerelements auf die Standardwerte zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Implementierung der <xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A> Methodenaufrufe in der Regel die <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> Methode für jede Instanz einer Anwendung Settings-Klasse, die sie enthält.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="SaveComponentSettings">
      <MemberSignature Language="C#" Value="public void SaveComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member SaveComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.SaveComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Behält die Eigenschaften der Anwendungseinstellungen des Steuerelements bei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> Methode schreibt die Werte der Eigenschaften der Anwendungseinstellungen des Steuerelements mit dem zugeordneten Datenspeicher. Die Daten speichern und Serialisierung Technik die Methode verwendet richtet sich nach der Einstellungsanbieter jede Settings-Klasse über die <xref:System.Configuration.SettingsProviderAttribute>. Sie können die Auswahl des Einstellungsanbieters überschreiben, indem die <xref:System.Configuration.ISettingsProviderService> Schnittstelle.  
  
> [!NOTE]
>  Wenn die <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> Eigenschaft `true`, sollte das Steuerelement aufrufen <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> in einem eigenen <xref:System.Windows.Forms.Control.Dispose%2A> Methode, damit die Daten des Steuerelements Konfiguration automatisch vor dem Beenden der Anwendung gespeichert ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="T:System.Configuration.SettingsProvider" />
        <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
      </Docs>
    </Member>
    <Member MemberName="SaveSettings">
      <MemberSignature Language="C#" Value="public bool SaveSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveSettings" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveSettings As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveSettings { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveSettings : bool with get, set" Usage="System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Steuerelement die Eigenschaften seiner Anwendungseinstellungen automatisch beibehalten soll, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn das Steuerelement automatisch seinen Zustand beibehalten soll, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Steuerelement Konfigurationsdaten enthält, in der Regel bleiben diese Daten als Reaktion auf ein expliziter Aufruf an die <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> Methode oder manchmal implizit beim des Steuerelements <xref:System.Windows.Forms.Control.Dispose%2A> -Methode wird aufgerufen. Die <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> Eigenschaft bestimmt, ob ein Steuerelement automatisch seine Konfigurationsdaten beibehalten, wenn er verworfen wird.  
  
 Der Standardwert von <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> hängt von der Implementierung des Steuerelements. Die Dokumentation für das Steuerelement sollte angeben, ob sie Einstellungen für Anwendungen verwendet, welche Daten persistent gespeichert werden und welche standardmäßig den Wert der <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> -Eigenschaft ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, den richtigen Weg für ein Steuerelement für die Überprüfung des Werts der <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> Eigenschaft, bevor versucht wird, die Konfigurationsdaten automatisch beibehalten.  
  
 `protected override void Dispose( bool disposing ) {`  
  
 `if(disposing) {`  
  
 `try {`  
  
 `if (SaveSettings) {`  
  
 `SaveComponentSettings();`  
  
 `}`  
  
 `}`  
  
 `finally {`  
  
 `//...`  
  
 `}`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.SettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="SettingsKey">
      <MemberSignature Language="C#" Value="public string SettingsKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SettingsKey" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SettingsKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SettingsKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SettingsKey : string with get, set" Usage="System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert des Schlüssels der Anwendungseinstellungen für die aktuelle Instanz des Steuerelements ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.String" />, der den Schlüssel der Einstellungen der aktuellen Instanz des Steuerelements enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> Eigenschaft, um Gruppen von Eigenschaften der Anwendungseinstellungen zu unterscheiden, wenn mehrere Instanzen der gleichen Wrapperklasse vorhanden sind. Z. B. wenn ein Steuerelement über eine zugeordnete Wrapperklasse enthält, führt klicken Sie dann mehrere Instanzen desselben Steuerelements platzieren, in der gleichen Anwendung in der Regel mehrere Instanzen der Wrapperklasse. Eine Einstellungsschlüssel ist erforderlich, nur, wenn die Konfigurationsdaten in einer Basis pro Instanz unterschiedlich ist. Beispiel: die Position der dynamisch positionierte Steuerelemente.  
  
 Die folgenden allgemeinen Regeln gelten für die Verwendung von <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>:  
  
-   Ein Steuerelement, wie jede Klasse darf null oder mehr Anwendungseinstellungsklassen, abgeleitet <xref:System.Configuration.ApplicationSettingsBase>. Jede Settings-Klasse verfügt über eine eigene <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> -Eigenschaft, wodurch eindeutig zu, mehrere Instanzen dieser Klasse machen.  
  
-   Ein Steuerelement sollten Daten pro Instanz und die freigegebenen Daten in den für verschiedene Einstellungenklassen trennen.  
  
-   Für ein Steuerelement mit Konfigurationsdaten pro Instanz die `get` Accessor die <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> Eigenschaft standardmäßig sollte die <xref:System.Windows.Forms.Control.Name%2A> des Steuerelements. In den meisten Fällen ist der Name des Steuerelements in einer Anwendung eindeutig. Wenn das Steuerelement enthält, nur freigegebene Konfigurationsdaten `get` sollte standardmäßig `null`.  
  
-   Die `set` Accessor für diese Eigenschaft sollte implementiert werden, um für Einstellungenklassen, pro Instanz und die freigegebene Konfigurationsdaten zu unterscheiden. Für jede Settings-Klasse, die pro Instanz, Daten enthält `set` sollten nur Pass-Through an die <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> Eigenschaft der Settings-Klasse. Für für Einstellungenklassen mit freigegebenen Daten `set` soll keine Aktion für die Settings-Klasse.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
      </Docs>
    </Member>
  </Members>
</Type>
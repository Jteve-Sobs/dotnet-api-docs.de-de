<Type Name="SettingsProvider" FullName="System.Configuration.SettingsProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="31d8c24177faf87f120fc44d8de7e00562ab630f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39824625" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SettingsProvider : System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SettingsProvider extends System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.SettingsProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SettingsProvider&#xA;Inherits ProviderBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class SettingsProvider abstract : System::Configuration::Provider::ProviderBase" />
  <TypeSignature Language="F#" Value="type SettingsProvider = class&#xA;    inherit ProviderBase" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Provider.ProviderBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fungiert als Basisklasse zum Ableiten benutzerdefinierter Einstellungsanbieter in der Anwendungseinstellungsarchitektur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Einstellungsanbieter definiert den Mechanismus zum Speichern von Konfigurationsdaten in die Architektur der Anwendungseinstellungen verwendet werden. Das .NET Framework enthält einen einzelnen Standardeinstellungsanbieter <xref:System.Configuration.LocalFileSettingsProvider>, der Konfigurationsdaten auf dem lokalen Dateisystem gespeichert. Allerdings können Sie alternative Speichermechanismen erstellen, durch das Ableiten von der abstrakten <xref:System.Configuration.SettingsProvider> Klasse. Richtet sich der Anbieter, der eine Wrapperklasse verwendet werden, indem die Wrapperklasse, mit der <xref:System.Configuration.SettingsProviderAttribute>. Wenn dieses Attribut nicht den Standardwert angegeben ist, <xref:System.Configuration.LocalFileSettingsProvider>, verwendet wird.  
  
 Wenn Sie mindestens einen benutzerdefinierten Einstellungsanbieter verwenden, erstellen, müssen Sie Implementierungen für die drei Methoden dieser Klasse angeben: <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>, <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> und <xref:System.Configuration.SettingsProvider.ApplicationName%2A>.  
  
 Bei Clientanwendungen, können Sie mehr als standardisierte Funktionen zu einem benutzerdefinierten Anbieter hinzufügen, indem Sie implementieren die <xref:System.Configuration.IApplicationSettingsProvider> Schnittstelle. Diese Schnittstelle spiegelt Methoden finden Sie in der <xref:System.Configuration.ApplicationSettingsBase> -Klasse, die hauptsächlich die versionsunterstützung ermöglicht es.  
  
 In der Regel sollten Sie die Anbieter von Anwendungseinstellungen werden im Einzelinstanzformat um Storage Ressourcenkonflikte zu vermeiden entwerfen. Anbieter sollte auch threadsicher sein, da sie gleichzeitig von mehreren Wrapper-Instanzen in einer einzelnen Anwendungsdomäne oder aus mehreren Anwendungen in verschiedenen Domänen aufgerufen werden können.  
  
 Ein Einstellungsanbieter muss mindestens drei Attribute erkennen –<xref:System.Configuration.ApplicationScopedSettingAttribute>, <xref:System.Configuration.UserScopedSettingAttribute>, und <xref:System.Configuration.DefaultSettingValueAttribute>. Eine vollständige Liste der Attribute, die auf die Anwendungseinstellungen angewendet werden können, finden Sie unter [Attribute für Anwendungseinstellungen](~/docs/framework/winforms/advanced/application-settings-attributes.md). Ein benutzerdefinierter Einstellungsanbieter sollten Attribute, die auf Eigenschaften angewendet werden, auf folgende Weise beheben:  
  
1.  Wenn der Anbieter die Anforderung, die durch das Attribut impliziert erfüllen kann, sollten natürlich es dies tun.  
  
2.  Wenn der Anbieter die Anforderung nicht erfüllen kann, sollten sie automatisch ignorieren.  
  
3.  Wenn zwei oder mehr Eigenschaften in Konflikt stehen; z. B. eine Eigenschaft wird mit beiden <xref:System.Configuration.ApplicationScopedSettingAttribute> und <xref:System.Configuration.UserScopedSettingAttribute>; der Anbieter sollte Auslösen einer <xref:System.Configuration.ConfigurationException>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.IApplicationSettingsProvider" />
    <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
    <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
    <altmember cref="T:System.Configuration.ConfigurationException" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SettingsProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SettingsProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SettingsProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine Instanz der <see cref="T:System.Configuration.SettingsProvider" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist dieser geschützten Standardkonstruktor für diese abstrakte Klasse. Abgeleitete benutzerdefinierte Einstellungsanbieter sind nicht erforderlich, um die expliziten Konstruktor bereitstellen, da die <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> Methode in der Regel führt die gesamte Initialisierung.  
  
 Client-Code ist in der Regel nicht direkt einen Einstellungsanbieter instanziiert werden. Stattdessen verwenden Sie das folgende Verfahren, um ein Einstellungsanbieter für eine bestimmte Eigenschaft zu suchen:  
  
1.  Rufen Sie die <xref:System.ComponentModel.Component.GetService%2A> Methode auf dem aktuellen <xref:System.ComponentModel.Component> oder <xref:System.ComponentModel.ISite> zur Rückgabe eines Verweises auf den aktuellen <xref:System.Configuration.ISettingsProviderService>.  
  
2.  Rufen Sie die <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A> Methode der <xref:System.Configuration.ISettingsProviderService> abgerufen, die im ersten Schritt den Einstellungsanbieter zurückgegeben.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
        <altmember cref="M:System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)" />
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public abstract string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.SettingsProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Configuration.SettingsProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der aktuell ausgeführten Anwendung ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.String" /> , enthält der verkürzten Namen der Anwendung, der keinen vollständigen Pfad oder Erweiterung, z. B., <c>SimpleAppSettings</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.SettingsProvider.ApplicationName%2A> und <xref:System.Configuration.Provider.ProviderBase.Name%2A> Eigenschaften – Hilfe zur an um entsprechend benannte Eigenschaften in verschiedenen Anwendungen zu unterscheiden.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Provider.ProviderBase.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValues">
      <MemberSignature Language="C#" Value="public abstract System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Configuration.SettingsPropertyValueCollection GetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetPropertyValues (context As SettingsContext, collection As SettingsPropertyCollection) As SettingsPropertyValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Configuration::SettingsPropertyValueCollection ^ GetPropertyValues(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyCollection ^ collection);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyValues : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyCollection -&gt; System.Configuration.SettingsPropertyValueCollection" Usage="settingsProvider.GetPropertyValues (context, collection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValueCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="collection" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der die aktuelle Anwendungsverwendung beschreibt.</param>
        <param name="collection">Eine <see cref="T:System.Configuration.SettingsPropertyCollection" />, die die Einstellungseigenschaftengruppe enthält, deren Werte abgerufen werden sollen.</param>
        <summary>Gibt die Auflistung der Einstellungseigenschaftswerte für die angegebene Anwendungsinstanz und Einstellungseigenschaftengruppe zurück.</summary>
        <returns>Eine <see cref="T:System.Configuration.SettingsPropertyValueCollection" />, die Werte für die angegebene Einstellungseigenschaftengruppe enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A> Methode muss implementiert werden, um besondere Einstellungen zu behandeln, die mit markierten <xref:System.Configuration.SpecialSettingAttribute>sowie Anwendungs- und benutzereinstellungen abstimmen.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
        <altmember cref="T:System.Configuration.SpecialSettingAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValues">
      <MemberSignature Language="C#" Value="public abstract void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyValueCollection collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetPropertyValues (context As SettingsContext, collection As SettingsPropertyValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetPropertyValues(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyValueCollection ^ collection);" />
      <MemberSignature Language="F#" Value="abstract member SetPropertyValues : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyValueCollection -&gt; unit" Usage="settingsProvider.SetPropertyValues (context, collection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="collection" Type="System.Configuration.SettingsPropertyValueCollection" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der die aktuelle Anwendungsverwendung beschreibt.</param>
        <param name="collection">Eine <see cref="T:System.Configuration.SettingsPropertyValueCollection" />, die die Gruppe der festzulegenden Eigenschafteneinstellungen darstellt.</param>
        <summary>Legt die Werte der angegebenen Gruppe von Eigenschafteneinstellungen fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.ApplicationSettingsBase> enthält die <xref:System.Configuration.ApplicationSettingsBase.Save%2A> -Methode, die aufgerufen wird, um die Werte aller Eigenschaften Einstellungen beizubehalten. Diese Methode durchläuft alle Einstellungen Anbieter zugeordnete seine Eigenschaften und Aufrufe der <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> Methode für die einzelnen <xref:System.Configuration.SettingsProvider> zum Ausführen des Vorgangs für die Serialisierung.  
  
 Die <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> Methode sollte unter Berücksichtigung von Sicherheitsaspekten implementiert werden:  
  
-   Nur voll vertrauenswürdiger Code sollte beim Aktualisieren der Anwendungseinstellungen gestattet sein. Teilweise vertrauenswürdiger Code darf nur Anwendungseinstellungen aktualisieren. Nicht vertrauenswürdiger Code ist in der Regel beim Aktualisieren der Anwendungseinstellungen nicht zulässig.  
  
-   Verwendungskontingente sollten zum Schutz gegen ressourcenangriffe berücksichtigt werden, um von teilweise vertrauenswürdigen Anwendungen.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="LocalFileSettingsProvider" FullName="System.Configuration.LocalFileSettingsProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="00b14d65fd8d3912b84629b5c369a2933a0eb961" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30380054" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LocalFileSettingsProvider : System.Configuration.SettingsProvider, System.Configuration.IApplicationSettingsProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LocalFileSettingsProvider extends System.Configuration.SettingsProvider implements class System.Configuration.IApplicationSettingsProvider" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.LocalFileSettingsProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class LocalFileSettingsProvider&#xA;Inherits SettingsProvider&#xA;Implements IApplicationSettingsProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class LocalFileSettingsProvider : System::Configuration::SettingsProvider, System::Configuration::IApplicationSettingsProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.SettingsProvider</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Configuration.IApplicationSettingsProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt Dauerhaftigkeit Klassen für Anwendungseinstellungsklassen bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einstellungsanbieter definieren einen Mechanismus zum Speichern von Konfigurationsdaten in die Architektur der Anwendungseinstellungen verwendet. Die [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] enthält einen einzelnen Standardeinstellungsanbieter <xref:System.Configuration.LocalFileSettingsProvider>, der Konfigurationsdaten im lokalen Dateisystem gespeichert. Ein Anwendungseinstellungseigenschaft oder eine Gruppe von Eigenschaften werden zu einem Anbieter-spezifischen Einstellungen, durch die Verwendung der zugehörigen der <xref:System.Configuration.SettingsProviderAttribute>.  
  
 Die Client-Anwendung in der Regel nicht explizit auf diese Klasse zugreifen; Stattdessen ruft die Architektur der Anwendungseinstellungen automatisch die entsprechenden Einstellungsanbieter aus, wenn seine Dienste erforderlich sind. Z. B. viele der Elemente der <xref:System.Configuration.ApplicationSettingsBase> ihre Arbeit an den entsprechenden Einstellungsanbieter delegieren.  
  
 <xref:System.Configuration.LocalFileSettingsProvider> Beibehalten von Einstellungen auf Konfigurationsdateien mit der Erweiterung `.config`. Der Inhalt der Konfigurationsdateien werden als XML-Dokumente strukturiert. Je nachdem, ob die Einstellung des auf der Anwendungsebene oder Benutzerebene festgelegt ist, befindet sich die Konfigurationsdaten werden als Elemente innerhalb einer `<applicationSettings>` oder ein `<userSettings>` Abschnittsgruppe bzw. Jede dieser Abschnittsgruppen wird dargestellt, von einer entsprechenden <xref:System.Configuration.AppSettingsSection> oder <xref:System.Configuration.ClientSettingsSection>zugeordnet. Jedes Abschnittsobjekt gehört und durch einen Konfigurationsabschnittshandler, also ein Objekt des Typs verwaltet <xref:System.Configuration.IConfigurationSectionHandler>.  
  
 Anwendungsspezifische Einstellungen und die Standardeinstellungen im Gültigkeitsbereich des Benutzers werden in einer Datei namens gespeichert `application.exe.config`, die im selben Verzeichnis wie die ausführbare Datei erstellt wird. Anwendungskonfigurationseinstellungen sind schreibgeschützt. Bestimmte Benutzerdaten befindet sich in einer Datei namens `user.config`, gespeichert, die im Basisverzeichnis des Benutzers. Wenn servergespeicherte Profile aktiviert sind, könnte zwei Versionen der Benutzerkonfigurationsdatei vorhanden sein. In diesem Fall haben die Einträge in der servergespeicherten Version Vorrang vor doppelte Einträge in der Konfigurationsdatei des lokalen Benutzers.  
  
 Weitere Informationen zu Anwendungseinstellungen finden Sie unter [Anwendung Einstellungen für Windows Forms](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
    <altmember cref="T:System.Configuration.ApplicationScopedSettingAttribute" />
    <altmember cref="T:System.Configuration.UserScopedSettingAttribute" />
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
    <altmember cref="T:System.Configuration.ClientSettingsSection" />
    <altmember cref="T:System.Configuration.IConfigurationSectionHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LocalFileSettingsProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LocalFileSettingsProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Configuration.LocalFileSettingsProvider" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardkonstruktor legt die <xref:System.Configuration.LocalFileSettingsProvider.ApplicationName%2A> Eigenschaft <xref:System.String.Empty>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.LocalFileSettingsProvider.ApplicationName" />
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public override string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.LocalFileSettingsProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der aktuell ausgeführten Anwendung ab oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die den Anzeigenamen der Anwendung enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.LocalFileSettingsProvider.ApplicationName%2A> und <xref:System.Configuration.Provider.ProviderBase.Name%2A> Eigenschaften – Hilfe zur auf um entsprechend benannten Festlegen von Eigenschaften in verschiedenen Anwendungen zu unterscheiden.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Provider.ProviderBase.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetPreviousVersion">
      <MemberSignature Language="C#" Value="public System.Configuration.SettingsPropertyValue GetPreviousVersion (System.Configuration.SettingsContext context, System.Configuration.SettingsProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Configuration.SettingsPropertyValue GetPreviousVersion(class System.Configuration.SettingsContext context, class System.Configuration.SettingsProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreviousVersion (context As SettingsContext, property As SettingsProperty) As SettingsPropertyValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Configuration::SettingsPropertyValue ^ GetPreviousVersion(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsProperty ^ property);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="property" Type="System.Configuration.SettingsProperty" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der beschreibt, wo die Anwendungseinstellungseigenschaft verwendet wird.</param>
        <param name="property">Die <see cref="T:System.Configuration.SettingsProperty" />, deren Wert zurückgegeben werden soll.</param>
        <summary>Gibt den Wert der benannten Einstellungseigenschaft für die vorherige Version derselben Anwendung zurück.</summary>
        <returns>Ein <see cref="T:System.Configuration.SettingsPropertyValue" />, der die Anwendungseinstellung darstellt, sofern gefunden; andernfalls <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion%2A> -Methode werden häufig in Verbindung mit der <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> Methode, wenn die Anwendungseinstellungen für die während der Installations einer neuen Version einer Anwendung zu migrieren. Weitere Informationen finden Sie unter der Methode <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)" />
        <altmember cref="T:System.Configuration.IApplicationSettingsProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValues">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Configuration.SettingsPropertyValueCollection GetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPropertyValues (context As SettingsContext, properties As SettingsPropertyCollection) As SettingsPropertyValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Configuration::SettingsPropertyValueCollection ^ GetPropertyValues(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyCollection ^ properties);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValueCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="properties" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der die aktuelle Anwendungsverwendung beschreibt.</param>
        <param name="properties">Eine <see cref="T:System.Configuration.SettingsPropertyCollection" />, die die Einstellungseigenschaftengruppe enthält, deren Werte abgerufen werden sollen.</param>
        <summary>Gibt die Auflistung der Einstellungseigenschaftswerte für die angegebene Anwendungsinstanz und Einstellungseigenschaftengruppe zurück.</summary>
        <returns>Eine <see cref="T:System.Configuration.SettingsPropertyValueCollection" />, die Werte für die angegebene Einstellungseigenschaftengruppe enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.LocalFileSettingsProvider.GetPropertyValues%2A> -Methode verwaltet auch den besonderen Anwendungseinstellungstyp <xref:System.Configuration.SpecialSetting.ConnectionString>. Verbindungszeichenfolgen werden in einem speziellen Abschnitt der Konfigurationsdatei, die vom Element getrennt gespeichert `<connectionstrings>`.  
  
> [!CAUTION]
>  <xref:System.Configuration.LocalFileSettingsProvider> ist keine Verschlüsselung verwenden, um alle Einstellungen beizubehalten. Speichern Sie deshalb nicht als nur-Text-Kennwörter oder andere vertrauliche Informationen, die diesen Anbieter verwenden, ohne zusätzliche Vorsichtsmaßnahmen, z. B. separate Verschlüsselung der Informationen innerhalb der Konfigurationsdatei. Weitere Informationen finden Sie unter [Verschlüsseln von Informationen mithilfe von geschützten Konfiguration](http://msdn.microsoft.com/library/51cdfe5b-9d82-458c-94ff-c551c4f38ed1).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine die Benutzer betreffende Einstellung wurde gefunden, die aktuelle Konfiguration unterstützt aber nur die Anwendung betreffende Einstellungen.</exception>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
        <altmember cref="T:System.Configuration.SpecialSettingAttribute" />
        <altmember cref="P:System.Configuration.SettingsPropertyValue.IsDirty" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize (name As String, values As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">Der Anzeigename des Anbieters.</param>
        <param name="values">Eine Auflistung der Name-Wert-Paare, die in der Konfiguration für diesen Anbieter die anbieterspezifischen Attribute darstellen.</param>
        <summary>Initialisiert den Anbieter.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Configuration.SettingsContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset(class System.Configuration.SettingsContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (context As SettingsContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset(System::Configuration::SettingsContext ^ context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der die aktuelle Anwendungsverwendung beschreibt.</param>
        <summary>Setzt alle mit der angegebenen Anwendung verbundenen Anwendungseinstellungseigenschaften auf ihre Standardwerte zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.LocalFileSettingsProvider.Reset%2A> Methode werden die gespeicherten Werte der Einstellungen der Anwendungsgruppe wiederhergestellt. Die Aktion der <xref:System.Configuration.LocalFileSettingsProvider.Reset%2A> hängt vom Umfang der Anwendungseinstellungseigenschaft:  
  
-   Anwendungsspezifische Einstellungen sind nicht betroffen.  
  
-   Benutzerspezifische Einstellungen werden auf die Standardwerte, die als nur-Lese Einträge in der Anwendungskonfigurationsdatei gespeichert werden zurückgesetzt `application.exe.config`. Jede Anwendung Einstellungswerte als servergespeichertes Profil hat Vorrang vor allen in das lokale Profil gefundene doppelte Werte, wenn servergespeicherte Profile verwendet werden, ist.  
  
 Beachten Sie, dass wenn servergespeicherte Profile verwendet werden, treten möglicherweise zwei `user.config` Dateien, eine für die lokalen Einstellungen und eine für das servergespeicherte Profil.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine die Benutzer betreffende Einstellung wurde gefunden, die aktuelle Konfiguration unterstützt aber nur die Anwendung betreffende Einstellungen.</exception>
        <altmember cref="T:System.Configuration.IApplicationSettingsProvider" />
        <altmember cref="T:System.Configuration.DefaultSettingValueAttribute" />
        <altmember cref="T:System.Configuration.SettingsManageability" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValues">
      <MemberSignature Language="C#" Value="public override void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyValueCollection values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetPropertyValues (context As SettingsContext, values As SettingsPropertyValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetPropertyValues(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyValueCollection ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="values" Type="System.Configuration.SettingsPropertyValueCollection" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der die aktuelle Anwendungsverwendung beschreibt.</param>
        <param name="values">Eine <see cref="T:System.Configuration.SettingsPropertyValueCollection" />, die die Gruppe der festzulegenden Eigenschafteneinstellungen darstellt.</param>
        <summary>Legt die Werte der angegebenen Gruppe von Eigenschafteneinstellungen fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Einstellungswrapperklasse abgeleitet <xref:System.Configuration.ApplicationSettingsBase>, enthält die <xref:System.Configuration.ApplicationSettingsBase.Save%2A> -Methode, die aufgerufen wird, um die Werte aller Einstellungseigenschaften beizubehalten. Diese Methode durchläuft alle Einstellungen Anbieter zugeordnete seine Eigenschaften und Aufrufe der <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> Methode für die einzelnen <xref:System.Configuration.SettingsProvider> zum Ausführen des Vorgangs für die Serialisierung.  
  
 <xref:System.Configuration.LocalFileSettingsProvider.SetPropertyValues%2A> einzeln serialisiert jeden benutzerspezifische Anwendungseinstellungseigenschaft an die entsprechende Anwendung, die in der entsprechenden Einstellung `user.config` Konfigurationsdatei.  
  
 Wird standardmäßig die <xref:System.Configuration.LocalFileSettingsProvider.SetPropertyValues%2A> Methode verwendet die folgenden logische Reihenfolge der Serialisierungsschema je nach Typ der Einstellungseigenschaft bestimmen:  
  
1.  Wenn der Typ eines zugeordneten <xref:System.ComponentModel.TypeConverter> mit einem <xref:System.ComponentModel.TypeConverter.ConvertToString%2A> methodenimplementierung, diese Konvertierung wird verwendet.  
  
2.  XML-Serialisierung verwendet wird.  
  
 Sie können jedoch einen bevorzugten Serialisierungsmechanismus angeben, mit der <xref:System.Configuration.SettingsSerializeAsAttribute>. <xref:System.Configuration.LocalFileSettingsProvider> unterstützt keine binäre Serialisierung in [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)].  
  
 Wenn eine Eigenschaft benutzerspezifische Einstellungen wieder explizit auf den Standardwert festgelegt ist, wird die lokale Datei Einstellungsanbieter den Eintrag für die zugeordnete Einstellung aus der Konfigurationsdatei für den Benutzer entfernt. Der nächste Lesezugriff für diese Eigenschaft wird einfach den Standardwert verwendet.  
  
> [!CAUTION]
>  <xref:System.Configuration.LocalFileSettingsProvider> ist keine Verschlüsselung verwenden, um alle Einstellungen beizubehalten. Speichern Sie deshalb nicht als nur-Text-Kennwörter oder andere vertrauliche Informationen, die diesen Anbieter verwenden, ohne zusätzliche Vorsichtsmaßnahmen, z. B. separate Verschlüsselung der Informationen innerhalb der Konfigurationsdatei. Weitere Informationen finden Sie unter [Verschlüsseln von Informationen mithilfe von geschützten Konfiguration](http://msdn.microsoft.com/library/51cdfe5b-9d82-458c-94ff-c551c4f38ed1).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine die Benutzer betreffende Einstellung wurde gefunden, die aktuelle Konfiguration unterstützt aber nur die Anwendung betreffende Einstellungen.  
  
 - oder -   
  
 Beim Speichern der Einstellungen in der Konfigurationsdatei ist ein allgemeiner Fehler aufgetreten.</exception>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
        <altmember cref="T:System.ComponentModel.TypeConverter" />
        <altmember cref="T:System.Configuration.SettingsSerializeAsAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Upgrade">
      <MemberSignature Language="C#" Value="public void Upgrade (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Upgrade(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Upgrade (context As SettingsContext, properties As SettingsPropertyCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Upgrade(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyCollection ^ properties);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="properties" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der die aktuelle Anwendungsverwendung beschreibt.</param>
        <param name="properties">Eine <see cref="T:System.Configuration.SettingsPropertyCollection" />, die die Einstellungseigenschaftengruppe enthält, deren Werte abgerufen werden sollen.</param>
        <summary>Versucht, frühere, den Benutzer betreffende Einstellungen aus einer früheren Version derselben Anwendung zu migrieren.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.LocalFileSettingsProvider> migriert die lokale und Roamingprofile in separaten Vorgängen.  
  
 Die <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> Methode unterdrückt wird, für jede Einstellung, die Anwendung verfügt über die <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> angewendet werden, oder die gesamte Einstellungswrapperklasse, abgeleitet <xref:System.Configuration.ApplicationSettingsBase>.  
  
 Auf diese Weise dieser Methode aufrufen hängt vom Typ der Anwendung, die aktualisiert werden:  
  
-   Jede Version von einem [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung in einem eigenen isolierten Installationsverzeichnis gespeichert ist. Nachdem eine neue Version des eine [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung installiert ist, und wenn die neue Version zuerst ausgeführt wird, wird automatisch interner Logik Aufrufen <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> alle allgemeine Anwendungseigenschaften auf die neue Version zu migrieren. Weitere Informationen finden Sie unter [ClickOnce und Anwendungseinstellungen](http://msdn.microsoft.com/library/891caba6-faef-4a3c-8f71-60e6fadb60eb).  
  
-   Standard-Windows Forms und konsolenanwendungen müssen manuell aufrufen <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A>, weil nicht Allgemein, automatische dabei zu bestimmen, wann eine solche Anwendung zuerst ausgeführt wird. Die zwei allgemeinen Verfahren sind entweder über das Installationsprogramm oder aus der Anwendung selbst, mit einer beibehaltenen Eigenschaft mit Namen häufig wie etwa `IsFirstRun`.  
  
 Beachten Sie, dass die neuere Version Migrieren von Anwendungseinstellungen, es muss auch laden, und lesen die ältere Version von den Anwendungseinstellungen. Daher muss sie mit der neuen und früheren Versionen der Anwendung kompatibel Wrapperklassen enthalten.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine die Benutzer betreffende Einstellung wurde gefunden, die aktuelle Konfiguration unterstützt aber nur die Anwendung betreffende Einstellungen.  
  
 - oder -   
  
 Auf die vorherige Version der Konfigurationsdatei konnte nicht zugegriffen werden.</exception>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)" />
        <altmember cref="T:System.Configuration.IApplicationSettingsProvider" />
        <altmember cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="LocalFileSettingsProvider" FullName="System.Configuration.LocalFileSettingsProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3aa435fff853654c718bfa236672c3bfa1e986ac" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69129250" /></Metadata><TypeSignature Language="C#" Value="public class LocalFileSettingsProvider : System.Configuration.SettingsProvider, System.Configuration.IApplicationSettingsProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LocalFileSettingsProvider extends System.Configuration.SettingsProvider implements class System.Configuration.IApplicationSettingsProvider" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.LocalFileSettingsProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class LocalFileSettingsProvider&#xA;Inherits SettingsProvider&#xA;Implements IApplicationSettingsProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class LocalFileSettingsProvider : System::Configuration::SettingsProvider, System::Configuration::IApplicationSettingsProvider" />
  <TypeSignature Language="F#" Value="type LocalFileSettingsProvider = class&#xA;    inherit SettingsProvider&#xA;    interface IApplicationSettingsProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.SettingsProvider</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Configuration.IApplicationSettingsProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt Dauerhaftigkeit Klassen für Anwendungseinstellungsklassen bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einstellungs Anbieter definieren einen Mechanismus zum Speichern von Konfigurationsdaten, die in der Architektur der Anwendungseinstellungen verwendet werden. Der [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] enthält einen einzelnen Standard Einstellungs <xref:System.Configuration.LocalFileSettingsProvider>Anbieter,, der Konfigurationsdaten im lokalen Dateisystem speichert. Eine Anwendungs Einstellungs Eigenschaft oder eine Gruppe von Eigenschaften wird einem bestimmten Einstellungs Anbieter durch die Verwendung von <xref:System.Configuration.SettingsProviderAttribute>zugeordnet.  
  
 In der Regel greift das Client Programm nicht explizit auf diese Klasse zu. Stattdessen ruft die Architektur der Anwendungseinstellungen automatisch den entsprechenden Einstellungs Anbieter auf, wenn die zugehörigen Dienste erforderlich sind. Beispielsweise <xref:System.Configuration.ApplicationSettingsBase> delegieren viele der Mitglieder ihrer Arbeit an den zugeordneten Einstellungs Anbieter.  
  
 <xref:System.Configuration.LocalFileSettingsProvider>Speichert Einstellungen für Konfigurationsdateien mit der Erweiterung `.config`. Der Inhalt von Konfigurationsdateien ist als XML-Dokumente strukturiert. Je nachdem, ob die Einstellung des auf der Anwendungsebene oder Benutzerebene festgelegt ist, befindet sich die Konfigurationsdaten werden als Elemente innerhalb einer `<applicationSettings>` oder ein `<userSettings>` Abschnittsgruppe bzw. Jede dieser Abschnittsgruppen wird dargestellt, von einer entsprechenden <xref:System.Configuration.AppSettingsSection> oder <xref:System.Configuration.ClientSettingsSection>bzw. Jeder Abschnittsobjekt im Besitz und verwaltet einen Konfigurationsabschnittshandler, die ein Objekt des Typs ist <xref:System.Configuration.IConfigurationSectionHandler>.  
  
 Anwendungsspezifische Einstellungen und die Standardeinstellungen für benutzerspezifische Einstellungen werden in einer Datei mit dem Namen `application.exe.config`gespeichert, die im gleichen Verzeichnis wie die ausführbare Datei erstellt wird. Anwendungs Konfigurationseinstellungen sind schreibgeschützt. Bestimmte Benutzerdaten werden in einer Datei mit dem `user.config`Namen gespeichert, die im Basisverzeichnis des Benutzers gespeichert ist. Wenn Roamingprofile aktiviert sind, können zwei Versionen der Benutzer Konfigurationsdatei vorhanden sein. In diesem Fall haben die Einträge in der roamingversion Vorrang vor doppelten Einträgen in der lokalen Benutzer Konfigurationsdatei.  
  
 Weitere Informationen zu Anwendungseinstellungen finden Sie unter [Anwendungseinstellungen für Windows Forms](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
    <altmember cref="T:System.Configuration.ApplicationScopedSettingAttribute" />
    <altmember cref="T:System.Configuration.UserScopedSettingAttribute" />
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
    <altmember cref="T:System.Configuration.ClientSettingsSection" />
    <altmember cref="T:System.Configuration.IConfigurationSectionHandler" />
    <related type="Article" href="https://msdn.microsoft.com/library/c8eb2ad0-fac6-4ea2-9140-675a4a44d562">Architektur der Anwendungseinstellungen</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LocalFileSettingsProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LocalFileSettingsProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Configuration.LocalFileSettingsProvider" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dem Parameter losen Konstruktor wird die <xref:System.Configuration.LocalFileSettingsProvider.ApplicationName%2A> -Eigenschaft <xref:System.String.Empty>auf festgelegt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.LocalFileSettingsProvider.ApplicationName" />
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public override string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.LocalFileSettingsProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Configuration.LocalFileSettingsProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der aktuell ausgeführten Anwendung ab oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die den Anzeigenamen der Anwendung enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.LocalFileSettingsProvider.ApplicationName%2A> - <xref:System.Configuration.Provider.ProviderBase.Name%2A> Eigenschaft und die-Eigenschaft helfen, ähnlich benannte Einstellungs Eigenschaften in verschiedenen Anwendungen eindeutig zu machen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Provider.ProviderBase.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetPreviousVersion">
      <MemberSignature Language="C#" Value="public System.Configuration.SettingsPropertyValue GetPreviousVersion (System.Configuration.SettingsContext context, System.Configuration.SettingsProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Configuration.SettingsPropertyValue GetPreviousVersion(class System.Configuration.SettingsContext context, class System.Configuration.SettingsProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreviousVersion (context As SettingsContext, property As SettingsProperty) As SettingsPropertyValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Configuration::SettingsPropertyValue ^ GetPreviousVersion(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsProperty ^ property);" />
      <MemberSignature Language="F#" Value="abstract member GetPreviousVersion : System.Configuration.SettingsContext * System.Configuration.SettingsProperty -&gt; System.Configuration.SettingsPropertyValue&#xA;override this.GetPreviousVersion : System.Configuration.SettingsContext * System.Configuration.SettingsProperty -&gt; System.Configuration.SettingsPropertyValue" Usage="localFileSettingsProvider.GetPreviousVersion (context, property)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="property" Type="System.Configuration.SettingsProperty" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der beschreibt, wo die Anwendungseinstellungseigenschaft verwendet wird.</param>
        <param name="property">Die <see cref="T:System.Configuration.SettingsProperty" />, deren Wert zurückgegeben werden soll.</param>
        <summary>Gibt den Wert der benannten Einstellungseigenschaft für die vorherige Version derselben Anwendung zurück.</summary>
        <returns>Ein <see cref="T:System.Configuration.SettingsPropertyValue" />, der die Anwendungseinstellung darstellt, sofern gefunden; andernfalls <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion%2A> -Methode wird häufig in Verbindung mit der <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> -Methode verwendet, wenn Anwendungseinstellungen während der Installation einer neuen Version einer Anwendung migriert werden. Weitere Informationen finden Sie unter der Methode <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)" />
        <altmember cref="T:System.Configuration.IApplicationSettingsProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValues">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Configuration.SettingsPropertyValueCollection GetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPropertyValues (context As SettingsContext, properties As SettingsPropertyCollection) As SettingsPropertyValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Configuration::SettingsPropertyValueCollection ^ GetPropertyValues(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyCollection ^ properties);" />
      <MemberSignature Language="F#" Value="override this.GetPropertyValues : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyCollection -&gt; System.Configuration.SettingsPropertyValueCollection" Usage="localFileSettingsProvider.GetPropertyValues (context, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValueCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="properties" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der die aktuelle Anwendungsverwendung beschreibt.</param>
        <param name="properties">Eine <see cref="T:System.Configuration.SettingsPropertyCollection" />, die die Einstellungseigenschaftengruppe enthält, deren Werte abgerufen werden sollen.</param>
        <summary>Gibt die Auflistung der Einstellungseigenschaftswerte für die angegebene Anwendungsinstanz und Einstellungseigenschaftengruppe zurück.</summary>
        <returns>Eine <see cref="T:System.Configuration.SettingsPropertyValueCollection" />, die Werte für die angegebene Einstellungseigenschaftengruppe enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.LocalFileSettingsProvider.GetPropertyValues%2A> -Methode verwaltet auch den speziellen Typ <xref:System.Configuration.SpecialSetting.ConnectionString>der Anwendungseinstellungen. Verbindungs Zeichenfolgen werden in einem speziellen Abschnitt der Konfigurationsdatei gespeichert, die durch das `<connectionstrings>`-Element getrennt ist.  
  
> [!CAUTION]
>  <xref:System.Configuration.LocalFileSettingsProvider>verwendet keine Verschlüsselung, um Einstellungen beizubehalten. Speichern Sie daher keine nur-Text-Kenn Wörter oder andere vertrauliche Informationen mithilfe dieses Anbieters, ohne zusätzliche Vorkehrungen zu treffen, z. b. die getrennte Verschlüsselung der Informationen in der Konfigurationsdatei. Weitere Informationen finden Sie unter [Verschlüsseln von Konfigurationsinformationen mithilfe der geschützten Konfiguration](https://msdn.microsoft.com/library/51cdfe5b-9d82-458c-94ff-c551c4f38ed1).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine die Benutzer betreffende Einstellung wurde gefunden, die aktuelle Konfiguration unterstützt aber nur die Anwendung betreffende Einstellungen.</exception>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
        <altmember cref="T:System.Configuration.SpecialSettingAttribute" />
        <altmember cref="P:System.Configuration.SettingsPropertyValue.IsDirty" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize (name As String, values As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ values);" />
      <MemberSignature Language="F#" Value="override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="localFileSettingsProvider.Initialize (name, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">Der Anzeigename des Anbieters.</param>
        <param name="values">Eine Auflistung der Name-Wert-Paare, die in der Konfiguration für diesen Anbieter die anbieterspezifischen Attribute darstellen.</param>
        <summary>Initialisiert den Anbieter.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Configuration.SettingsContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset(class System.Configuration.SettingsContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (context As SettingsContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset(System::Configuration::SettingsContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member Reset : System.Configuration.SettingsContext -&gt; unit&#xA;override this.Reset : System.Configuration.SettingsContext -&gt; unit" Usage="localFileSettingsProvider.Reset context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der die aktuelle Anwendungsverwendung beschreibt.</param>
        <summary>Setzt alle mit der angegebenen Anwendung verbundenen Anwendungseinstellungseigenschaften auf ihre Standardwerte zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.LocalFileSettingsProvider.Reset%2A> -Methode stellt die gespeicherten Werte der angegebenen Anwendungs Einstellungs Gruppe wieder her. Die Aktion von <xref:System.Configuration.LocalFileSettingsProvider.Reset%2A> hängt vom Bereich der Anwendungs Einstellungs Eigenschaft ab:  
  
-   Anwendungsspezifische Einstellungen sind nicht betroffen.  
  
-   Benutzerspezifische Einstellungen werden auf die Standardwerte zurückgesetzt, die als schreibgeschützte Einträge in der Anwendungs Konfigurationsdatei `application.exe.config`gespeichert werden. Wenn Roamingprofile verwendet werden, haben alle Werte von Anwendungseinstellungen im Roamingprofil Vorrang vor Duplikaten, die im lokalen Profil gefunden werden.  
  
 Beachten Sie Folgendes: Wenn Roamingprofile verwendet werden, `user.config` können zwei Dateien vorhanden sein: einer für die lokalen Einstellungen und einer für das Roamingprofil.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine die Benutzer betreffende Einstellung wurde gefunden, die aktuelle Konfiguration unterstützt aber nur die Anwendung betreffende Einstellungen.</exception>
        <altmember cref="T:System.Configuration.IApplicationSettingsProvider" />
        <altmember cref="T:System.Configuration.DefaultSettingValueAttribute" />
        <altmember cref="T:System.Configuration.SettingsManageability" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValues">
      <MemberSignature Language="C#" Value="public override void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyValueCollection values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetPropertyValues (context As SettingsContext, values As SettingsPropertyValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetPropertyValues(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyValueCollection ^ values);" />
      <MemberSignature Language="F#" Value="override this.SetPropertyValues : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyValueCollection -&gt; unit" Usage="localFileSettingsProvider.SetPropertyValues (context, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="values" Type="System.Configuration.SettingsPropertyValueCollection" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der die aktuelle Anwendungsverwendung beschreibt.</param>
        <param name="values">Eine <see cref="T:System.Configuration.SettingsPropertyValueCollection" />, die die Gruppe der festzulegenden Eigenschafteneinstellungen darstellt.</param>
        <summary>Legt die Werte der angegebenen Gruppe von Eigenschafteneinstellungen fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine von <xref:System.Configuration.ApplicationSettingsBase>abgeleitete Einstellungs Wrapper Klasse enthält die <xref:System.Configuration.ApplicationSettingsBase.Save%2A> -Methode, die aufgerufen wird, um die Werte aller Einstellungs Eigenschaften beizubehalten. Diese Methode listet alle Einstellungs Anbieter auf, die Ihren Einstellungs Eigenschaften zugeordnet sind, und ruft die <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> -Methode für jedes <xref:System.Configuration.SettingsProvider> -Element auf, um die tatsächliche Serialisierung auszuführen.  
  
 <xref:System.Configuration.LocalFileSettingsProvider.SetPropertyValues%2A>jede benutzerspezifische Anwendungs Einstellungs Eigenschaft wird einzeln in die entsprechende Anwendungs Einstellung in der entsprechenden `user.config` Konfigurationsdatei serialisiert.  
  
 Standardmäßig verwendet die <xref:System.Configuration.LocalFileSettingsProvider.SetPropertyValues%2A> -Methode die folgende logische Sequenz, um das Serialisierungsschema abhängig vom Typ der Settings-Eigenschaft zu bestimmen:  
  
1.  Wenn dem Typ ein zugeordnet ist <xref:System.ComponentModel.TypeConverter> , der <xref:System.ComponentModel.TypeConverter.ConvertToString%2A> einer Methoden Implementierung zugeordnet ist, wird diese Konvertierung verwendet.  
  
2.  Die XML-Serialisierung wird verwendet.  
  
 Sie können jedoch einen bevorzugten Serialisierungsmechanismus mithilfe <xref:System.Configuration.SettingsSerializeAsAttribute>von angeben. <xref:System.Configuration.LocalFileSettingsProvider>unterstützt die binäre Serialisierung in [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]nicht.  
  
 Wenn die Eigenschaft für benutzerspezifische Einstellungen explizit auf den Standardwert zurückgesetzt wird, entfernt der Anbieter für lokale Datei Einstellungen den Eintrag für die zugehörige Einstellung aus der Benutzer Konfigurationsdatei. Beim nächsten Lesezugriff für diese Eigenschaft wird einfach der Standardwert verwendet.  
  
> [!CAUTION]
>  <xref:System.Configuration.LocalFileSettingsProvider>verwendet keine Verschlüsselung, um Einstellungen beizubehalten. Speichern Sie daher keine nur-Text-Kenn Wörter oder andere vertrauliche Informationen mithilfe dieses Anbieters, ohne zusätzliche Vorkehrungen zu treffen, z. b. die getrennte Verschlüsselung der Informationen in der Konfigurationsdatei. Weitere Informationen finden Sie unter [Verschlüsseln von Konfigurationsinformationen mithilfe der geschützten Konfiguration](https://msdn.microsoft.com/library/51cdfe5b-9d82-458c-94ff-c551c4f38ed1).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine die Benutzer betreffende Einstellung wurde gefunden, die aktuelle Konfiguration unterstützt aber nur die Anwendung betreffende Einstellungen.  
  
 - oder -  
  
 Beim Speichern der Einstellungen in der Konfigurationsdatei ist ein allgemeiner Fehler aufgetreten.</exception>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
        <altmember cref="T:System.ComponentModel.TypeConverter" />
        <altmember cref="T:System.Configuration.SettingsSerializeAsAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Upgrade">
      <MemberSignature Language="C#" Value="public void Upgrade (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Upgrade(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Upgrade (context As SettingsContext, properties As SettingsPropertyCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Upgrade(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyCollection ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member Upgrade : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyCollection -&gt; unit&#xA;override this.Upgrade : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyCollection -&gt; unit" Usage="localFileSettingsProvider.Upgrade (context, properties)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="properties" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" />, der die aktuelle Anwendungsverwendung beschreibt.</param>
        <param name="properties">Eine <see cref="T:System.Configuration.SettingsPropertyCollection" />, die die Einstellungseigenschaftengruppe enthält, deren Werte abgerufen werden sollen.</param>
        <summary>Versucht, frühere, den Benutzer betreffende Einstellungen aus einer früheren Version derselben Anwendung zu migrieren.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.LocalFileSettingsProvider>migriert die lokalen und Roamingeinstellungen in separaten Vorgängen.  
  
 Die <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> -Methode wird für jede Anwendungs Einstellung unterdrückt, <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> für die der angewendet wurde, oder für die gesamte, von <xref:System.Configuration.ApplicationSettingsBase>abgeleitete Einstellungs Wrapper Klasse.  
  
 Wie diese Methode aufgerufen wird, hängt vom Typ der Anwendung ab, für die ein Upgrade durchgeführt wird:  
  
-   Jede Version einer [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] -Anwendung wird in einem eigenen isolierten Installationsverzeichnis gespeichert. Nachdem eine neue Version [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] einer-Anwendung installiert wurde und die neue Version zum ersten Mal ausgeführt wird, ruft <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> die interne Logik automatisch auf, um alle gängigen Anwendungseinstellungen zur neuen Version zu migrieren. Weitere Informationen finden Sie unter [ClickOnce und Anwendungseinstellungen](https://msdn.microsoft.com/library/891caba6-faef-4a3c-8f71-60e6fadb60eb).  
  
-   Standard Windows Forms und Konsolen Anwendungen müssen manuell aufgerufen <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A>werden, da es keine allgemeine, automatische Methode gibt, um zu bestimmen, wann eine solche Anwendung zum ersten Mal ausgeführt wird. Die beiden gängigen Methoden hierfür sind entweder vom Installationsprogramm oder von der Anwendung selbst, indem eine persistente Eigenschaft verwendet wird, die häufig wie `IsFirstRun`folgt benannt ist.  
  
 Beachten Sie, dass es für die neuere Version zum Migrieren von Anwendungseinstellungen in der Lage sein muss, auch die ältere Version der Anwendungseinstellungen zu laden und zu lesen. Daher muss Sie Wrapper Klassen enthalten, die sowohl mit der neuen als auch mit früheren Versionen der Anwendung kompatibel sind.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine die Benutzer betreffende Einstellung wurde gefunden, die aktuelle Konfiguration unterstützt aber nur die Anwendung betreffende Einstellungen.  
  
 - oder -  
  
 Auf die vorherige Version der Konfigurationsdatei konnte nicht zugegriffen werden.</exception>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)" />
        <altmember cref="T:System.Configuration.IApplicationSettingsProvider" />
        <altmember cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>

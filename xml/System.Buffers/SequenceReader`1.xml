<Type Name="SequenceReader&lt;T&gt;" FullName="System.Buffers.SequenceReader&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="52286dcb0528dde165978b86874283690a627d6c" /><Meta Name="ms.sourcegitcommit" Value="2b0967e04b047f6709322418d97215dfcef6a938" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/20/2019" /><Meta Name="ms.locfileid" Value="74235629" /></Metadata><TypeSignature Language="C#" Value="public struct SequenceReader&lt;T&gt; where T : struct" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SequenceReader`1&lt;struct .ctor (class System.ValueType, class System.IEquatable`1&lt;!T&gt;) T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.SequenceReader`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure SequenceReader(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA; where T : value classpublic value class SequenceReader" />
  <TypeSignature Language="F#" Value="type SequenceReader&lt;'T (requires 'T : struct)&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
        <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">Der Typ der schreibgeschützten Sequenz.</typeparam>
    <summary>Stellt Methoden zum Lesen von Binär-und Textdaten aus <see cref="T:System.Buffers.ReadOnlySequence`1" /> mit dem Fokus auf die Leistung und minimale oder keine Heapzuteilungen bereit</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SequenceReader (System.Buffers.ReadOnlySequence&lt;T&gt; sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt; sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.#ctor(System.Buffers.ReadOnlySequence{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sequence As ReadOnlySequence(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SequenceReader(System::Buffers::ReadOnlySequence&lt;T&gt; sequence);" />
      <MemberSignature Language="F#" Value="new System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt; : System.Buffers.ReadOnlySequence&lt;'T (requires 'T : struct)&gt; -&gt; System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;" Usage="new System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt; sequence" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="sequence">Die schreibgeschützte Sequenz, über die der <see cref="T:System.Buffers.SequenceReader`1" /> erstellt werden soll.</param>
        <summary>Erstellt einen <see cref="T:System.Buffers.SequenceReader`1" /> über eine angegebene <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Advance">
      <MemberSignature Language="C#" Value="public void Advance (long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Advance(int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.Advance(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Advance (count As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Advance(long count);" />
      <MemberSignature Language="F#" Value="member this.Advance : int64 -&gt; unit" Usage="sequenceReader.Advance count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="count">Die Anzahl der Elemente, um die vorgerückt wird.</param>
        <summary>Verschiebt den Reader eine angegebene Anzahl von Elementen nach vorn.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePast">
      <MemberSignature Language="C#" Value="public long AdvancePast (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePast(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePast(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePast (value As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePast(T value);" />
      <MemberSignature Language="F#" Value="member this.AdvancePast : 'T -&gt; int64" Usage="sequenceReader.AdvancePast value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">Der Wert um, den sich der Reader vorbeibewegt.</param>
        <summary>Bewegt sich an aufeinander folgenden Instanzen des angegebenen <paramref name="value" /> vorbei.</summary>
        <returns>Die Anzahl der Positionen, um die der Reader vorgerückt ist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(valuetype System.ReadOnlySpan`1&lt;!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (values As ReadOnlySpan(Of T)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; int64" Usage="sequenceReader.AdvancePastAny values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="values">Die zu überspringenden Werte.</param>
        <summary>Überspringt aufeinander folgende Instanzen beliebiger der angegebenen <paramref name="values" />.</summary>
        <returns>Die Anzahl der Positionen, um die der Reader vorgerückt ist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0">Der erste zu überspringende Wert.</param>
        <param name="value1">Der zweite zu überspringende Wert.</param>
        <summary>Bewegt sich an aufeinander folgenden Instanzen eines beliebigen von zwei angegebenen Werten vorbei.</summary>
        <returns>Die Anzahl der Positionen, um die der Reader vorgerückt ist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1, T value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1, !T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T, value2 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0">Der erste zu überspringende Wert.</param>
        <param name="value1">Der zweite zu überspringende Wert.</param>
        <param name="value2">Der dritte zu überspringende Wert.</param>
        <summary>Bewegt sich an aufeinander folgenden Instanzen beliebiger von drei angegebenen Werten vorbei.</summary>
        <returns>Die Anzahl der Positionen, um die der Reader vorgerückt ist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1, T value2, T value3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1, !T value2, !T value3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T, value2 As T, value3 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1, T value2, T value3);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T * 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1, value2, value3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
        <Parameter Name="value3" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0">Der erste zu überspringende Wert.</param>
        <param name="value1">Der zweite zu überspringende Wert.</param>
        <param name="value2">Der dritte zu überspringende Wert.</param>
        <param name="value3">Der vierte zu überspringende Wert.</param>
        <summary>Bewegt sich an aufeinander folgenden Instanzen beliebiger von vier angegebenen Werten vorbei.</summary>
        <returns>Die Anzahl der Positionen, um die der Reader vorgerückt ist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Consumed">
      <MemberSignature Language="C#" Value="public long Consumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Consumed" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Consumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Consumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumed : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Consumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Gesamtzahl der vom Reader verarbeiteten <typeparamref name="T" />-Werte ab.</summary>
        <value>Die Gesamtanzahl der vom Reader verarbeiteten Werte.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; CurrentSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;!T&gt; CurrentSpan" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.CurrentSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentSpan As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;T&gt; CurrentSpan { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentSpan : ReadOnlySpan&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.CurrentSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine <see cref="T:System.Span`1" /> ab, die das aktuelle Segment in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> enthält.</summary>
        <value>Eine Spanne, die das aktuelle Segment in der Sequenz enthält.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentSpanIndex">
      <MemberSignature Language="C#" Value="public int CurrentSpanIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentSpanIndex" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.CurrentSpanIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentSpanIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentSpanIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentSpanIndex : int" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.CurrentSpanIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Index in der <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> ab.</summary>
        <value>Der Index in der <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public bool End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool End" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.End" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property End As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool End { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.End : bool" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.End" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob keine Daten mehr in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> vorhanden sind.</summary>
        <value><see langword="true" />, wenn der <see cref="P:System.Buffers.SequenceReader`1.Sequence" />keine weiteren Daten enthält. Andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNext">
      <MemberSignature Language="C#" Value="public bool IsNext (ReadOnlySpan&lt;T&gt; next, bool advancePast = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNext(valuetype System.ReadOnlySpan`1&lt;!T&gt; next, bool advancePast) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNext (next As ReadOnlySpan(Of T), Optional advancePast As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNext : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.IsNext (next, advancePast)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePast" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="next">Die Spanne, mit der die nächsten Elemente verglichen werden.</param>
        <param name="advancePast"><see langword="true" /> zum Vorbeibewegen an den <paramref name="next" />-Werten, wenn sie gefunden werden; sonst <see langword="false" />.</param>
        <summary>Überprüft, ob die in einer schreibgeschützten Spanne angegebenen Werte die nächsten in der Sequenz sind.</summary>
        <returns><see langword="true" />, wenn die Werte in der Sequenz als nächstes kommen; sonst <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNext">
      <MemberSignature Language="C#" Value="public bool IsNext (T next, bool advancePast = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNext(!T next, bool advancePast) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.IsNext(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNext (next As T, Optional advancePast As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNext : 'T * bool -&gt; bool" Usage="sequenceReader.IsNext (next, advancePast)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="T" />
        <Parameter Name="advancePast" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="next">Der Wert, mit dem die nächsten Elemente verglichen werden.</param>
        <param name="advancePast"><see langword="true" /> zum Vorbeibewegen an den <paramref name="next" />-Werten, wenn sie gefunden werden; sonst <see langword="false" />.</param>
        <summary>Überprüft, ob ein angegebener Wert der nächste in der Sequenz ist.</summary>
        <returns><see langword="true" />, wenn die Werte in der Sequenz als nächstes kommen; sonst <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Elemente in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> des Readers ab.</summary>
        <value>Die Anzahl der Elemente in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" />des Readers.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aktuelle Position in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> ab.</summary>
        <value>Die aktuelle Position in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public long Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Remaining As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Remaining { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die verbleibenden Elemente in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> des Readers ab.</summary>
        <value>Die restlichen Elemente im <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> des Readers</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind (long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind(int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.Rewind(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rewind (count As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rewind(long count);" />
      <MemberSignature Language="F#" Value="member this.Rewind : int64 -&gt; unit" Usage="sequenceReader.Rewind count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="count">Die Anzahl von Elementen.</param>
        <summary>Verschiebt den Reader eine angegebene Anzahl von Elementen zurück.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" /> ist negativ oder größer als <see cref="P:System.Buffers.SequenceReader`1.Consumed" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Sequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;T&gt; Sequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt; Sequence" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Sequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sequence As ReadOnlySequence(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;T&gt; Sequence { System::Buffers::ReadOnlySequence&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Sequence : System.Buffers.ReadOnlySequence&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Sequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zugrunde liegende <see cref="T:System.Buffers.ReadOnlySequence`1" /> für den Reader ab.</summary>
        <value>Die zugrunde liegende schreibgeschützte Sequenz für den Reader.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdvanceTo">
      <MemberSignature Language="C#" Value="public bool TryAdvanceTo (T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAdvanceTo(!T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryAdvanceTo(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryAdvanceTo (delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryAdvanceTo : 'T * bool -&gt; bool" Usage="sequenceReader.TryAdvanceTo (delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="delimiter">Das Trennzeichen, das gesucht werden soll.</param>
        <param name="advancePastDelimiter"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</param>
        <summary>Sucht nach einem angegebenen Trennzeichen und bewegt sich optional an ihm vorbei, wenn es gefunden wird.</summary>
        <returns><see langword="true" />, wenn der angegebene <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdvanceToAny">
      <MemberSignature Language="C#" Value="public bool TryAdvanceToAny (ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAdvanceToAny(valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryAdvanceToAny(System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryAdvanceToAny (delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryAdvanceToAny : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryAdvanceToAny (delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="delimiters">Die Trennzeichen, die gesucht werden sollen.</param>
        <param name="advancePastDelimiter"><see langword="true" /> zum Vorbeibewegen an der ersten Instanz eines der angegebenen <paramref name="delimiters" />; <see langword="false" />, um sich nicht an dem Trennzeichen vorbei zu bewegen.</param>
        <summary>Sucht nach beliebigen einer Anzahl angegebener Trennzeichen und bewegt sich optional an dem ersten gefundenen vorbei.</summary>
        <returns><see langword="true" />, wenn ein beliebiges der angegebenen <paramref name="delimiters" /> gefunden wurde; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T (requires 'T : struct)&gt; -&gt; bool" Usage="sequenceReader.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">Zielspanne, in die kopiert werden soll.</param>
        <summary>Kopiert Daten von der aktuellen Position zur angegebenen Zielspanne, wenn genügend Daten vorhanden sind, um sie zu füllen.</summary>
        <returns><see langword="true" />, wenn genügend Daten vorhanden sind, um die <paramref name="destination" />-Spanne vollständig zu füllen; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Diese Methode kopiert nach Möglichkeit eine Fixed-Menge von Daten aus der Sequenz. Der Reader wird nicht in den vorausgeht. Um einen bestimmten Datenstrom nach vorne zu suchen, verwenden Sie <xref:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="member this.TryPeek : 'T -&gt; bool" Usage="sequenceReader.TryPeek value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Der nächste Wert, oder der Standardwert, wenn das Ende des Readers erreicht ist.</param>
        <summary>Schaut auf den nächsten Wert, ohne den Reader vorzurücken.</summary>
        <returns><see langword="true" />, wenn sich der Reader nicht am Ende befindet und der Schauvorgang erfolgreich war; <see langword="false" />, wenn sich der Reader am Ende befindet.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead">
      <MemberSignature Language="C#" Value="public bool TryRead (out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryRead([out] !T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryRead(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryRead (ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryRead([Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="member this.TryRead : 'T -&gt; bool" Usage="sequenceReader.TryRead value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Der nächste Wert, oder der Standardwert, wenn das Ende des Readers erreicht ist.</param>
        <summary>Liest den nächsten Wert und rückt den Reader vor.</summary>
        <returns><see langword="true" />, wenn sich der Reader nicht am Ende befindet und der Lesevorgang erfolgreich war; <see langword="false" />, wenn sich der Reader am Ende befindet.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, ReadOnlySpan&lt;T&gt; delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo : ReadOnlySequence * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence">Enthält die ggf. von der Methode gelesenen Daten.</param>
        <param name="delimiter">Eine schreibgeschützte Spanne, die mindestens ein Trennzeichen enthält.</param>
        <param name="advancePastDelimiter"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</param>
        <summary>Versucht, bis zur Übereinstimmung mit dem als schreibgeschützte Spanne angegebenen gesamten Trennzeichen Daten zu lesen.</summary>
        <returns><see langword="true" />, wenn der <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, !T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo : ReadOnlySequence * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence">Enthält die ggf. von der Methode gelesenen Daten.</param>
        <param name="delimiter">Das Trennzeichen, das gesucht werden soll.</param>
        <param name="advancePastDelimiter"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</param>
        <summary>Versucht, alles bis zum angegebenen <paramref name="delimiter" /> zu lesen.</summary>
        <returns><see langword="true" />, wenn der <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out ReadOnlySpan&lt;T&gt; span, T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, !T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef span As ReadOnlySpan(Of T), delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo : ReadOnlySpan * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (span, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span">Enthält die ggf. von der Methode gelesenen Daten.</param>
        <param name="delimiter">Das Trennzeichen, das gesucht werden soll.</param>
        <param name="advancePastDelimiter"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</param>
        <summary>Versucht, alles bis zum angegebenen <paramref name="delimiter" /> zu lesen.</summary>
        <returns><see langword="true" />, wenn der <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, T delimiter, T delimiterEscape, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, !T delimiter, !T delimiterEscape, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As T, delimiterEscape As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo : ReadOnlySequence * 'T * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, delimiterEscape, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="delimiterEscape" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence">Enthält die ggf. von der Methode gelesenen Daten.</param>
        <param name="delimiter">Das Trennzeichen, das gesucht werden soll.</param>
        <param name="delimiterEscape">Ein Wert, der angibt, dass ein unmittelbar nachfolgender <paramref name="delimiter" /> übersprungen werden soll.</param>
        <param name="advancePastDelimiter"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</param>
        <summary>Versucht, alles bis zum angegebenen <paramref name="delimiter" /> zu lesen, wobei Trennzeichen ignoriert werden, denen <paramref name="delimiterEscape" /> vorangestellt ist.</summary>
        <returns><see langword="true" />, wenn der <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out ReadOnlySpan&lt;T&gt; span, T delimiter, T delimiterEscape, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, !T delimiter, !T delimiterEscape, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef span As ReadOnlySpan(Of T), delimiter As T, delimiterEscape As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo : ReadOnlySpan * 'T * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (span, delimiter, delimiterEscape, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="delimiterEscape" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span">Enthält die ggf. von der Methode gelesenen Daten.</param>
        <param name="delimiter">Das Trennzeichen, das gesucht werden soll.</param>
        <param name="delimiterEscape">Ein Wert, der angibt, dass ein unmittelbar nachfolgender <paramref name="delimiter" /> übersprungen werden soll.</param>
        <param name="advancePastDelimiter"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</param>
        <summary>Versucht, alles bis zum angegebenen <paramref name="delimiter" /> zu lesen, wobei Trennzeichen ignoriert werden, denen <paramref name="delimiterEscape" /> vorangestellt ist.</summary>
        <returns><see langword="true" />, wenn der <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadToAny">
      <MemberSignature Language="C#" Value="public bool TryReadToAny (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadToAny([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadToAny(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadToAny (ByRef sequence As ReadOnlySequence(Of T), delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadToAny : ReadOnlySequence * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadToAny (sequence, delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence">Enthält die ggf. von der Methode gelesenen Daten.</param>
        <param name="delimiters">Die Trennzeichen, die gesucht werden sollen.</param>
        <param name="advancePastDelimiter"><see langword="true" /> zum Vorbeibewegen an der ersten gefundenen Instanz eines beliebigen der angegebenen <paramref name="delimiters" />; andernfalls <see langword="false" />.</param>
        <summary>Versucht, alles bis zu einem der angegebenen <paramref name="delimiters" /> zu lesen.</summary>
        <returns><see langword="true" />, falls beliebige der <paramref name="delimiters" /> gefunden wurden; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadToAny">
      <MemberSignature Language="C#" Value="public bool TryReadToAny (out ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadToAny([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadToAny(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadToAny (ByRef span As ReadOnlySpan(Of T), delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadToAny : ReadOnlySpan * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadToAny (span, delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span">Enthält die ggf. von der Methode gelesenen Daten.</param>
        <param name="delimiters">Die Trennzeichen, die gesucht werden sollen.</param>
        <param name="advancePastDelimiter"><see langword="true" /> zum Vorbeibewegen an der ersten gefundenen Instanz eines beliebigen der angegebenen <paramref name="delimiters" />; andernfalls <see langword="false" />.</param>
        <summary>Versucht, alles bis zu einem der angegebenen <paramref name="delimiters" /> zu lesen.</summary>
        <returns><see langword="true" />, falls beliebige der <paramref name="delimiters" /> gefunden wurden; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnreadSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; UnreadSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;!T&gt; UnreadSpan" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.UnreadSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnreadSpan As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;T&gt; UnreadSpan { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.UnreadSpan : ReadOnlySpan&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.UnreadSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den ungelesenen Teil der <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> ab.</summary>
        <value>Der ungelesene Teil der <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

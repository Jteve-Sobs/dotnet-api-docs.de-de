<Type Name="SequenceReader&lt;T&gt;" FullName="System.Buffers.SequenceReader&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d8f1defb21ea3259144de4fb6f6b91fd3df25a29" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70331271" /></Metadata><TypeSignature Language="C#" Value="public struct SequenceReader&lt;T&gt; where T : struct" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SequenceReader`1&lt;struct .ctor (class System.ValueType, class System.IEquatable`1&lt;!T&gt;) T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.SequenceReader`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure SequenceReader(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA; where T : value classpublic value class SequenceReader" />
  <TypeSignature Language="F#" Value="type SequenceReader&lt;'T (requires 'T : struct)&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
        <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="77c49-101">Der Typ der schreibgeschützten Sequenz.</span><span class="sxs-lookup"><span data-stu-id="77c49-101">The type of the read-only sequence.</span></span></typeparam>
    <summary><span data-ttu-id="77c49-102">Stellt Methoden zum Lesen von Binär-und Textdaten aus <see cref="T:System.Buffers.ReadOnlySequence`1" /> mit dem Fokus auf die Leistung und minimale oder keine Heapzuteilungen bereit</span><span class="sxs-lookup"><span data-stu-id="77c49-102">Provides methods for reading binary and text data out of a <see cref="T:System.Buffers.ReadOnlySequence`1" /> with a focus on performance and minimal or zero heap allocations.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SequenceReader (System.Buffers.ReadOnlySequence&lt;T&gt; sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt; sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.#ctor(System.Buffers.ReadOnlySequence{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sequence As ReadOnlySequence(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SequenceReader(System::Buffers::ReadOnlySequence&lt;T&gt; sequence);" />
      <MemberSignature Language="F#" Value="new System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt; : System.Buffers.ReadOnlySequence&lt;'T (requires 'T : struct)&gt; -&gt; System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;" Usage="new System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt; sequence" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="77c49-103">Die schreibgeschützte Sequenz, über die der <see cref="T:System.Buffers.SequenceReader`1" /> erstellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="77c49-103">The read-only sequence over which to create the <see cref="T:System.Buffers.SequenceReader`1" />.</span></span></param>
        <summary><span data-ttu-id="77c49-104">Erstellt einen <see cref="T:System.Buffers.SequenceReader`1" /> über eine angegebene <see cref="T:System.Buffers.ReadOnlySequence`1" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-104">Creates a <see cref="T:System.Buffers.SequenceReader`1" /> over a given <see cref="T:System.Buffers.ReadOnlySequence`1" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Advance">
      <MemberSignature Language="C#" Value="public void Advance (long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Advance(int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.Advance(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Advance (count As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Advance(long count);" />
      <MemberSignature Language="F#" Value="member this.Advance : int64 -&gt; unit" Usage="sequenceReader.Advance count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="count"><span data-ttu-id="77c49-105">Die Anzahl der Elemente, um die vorgerückt wird.</span><span class="sxs-lookup"><span data-stu-id="77c49-105">The number of items to advance.</span></span></param>
        <summary><span data-ttu-id="77c49-106">Verschiebt den Reader eine angegebene Anzahl von Elementen nach vorn.</span><span class="sxs-lookup"><span data-stu-id="77c49-106">Moves the reader ahead a specified number of items.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePast">
      <MemberSignature Language="C#" Value="public long AdvancePast (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePast(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePast(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePast (value As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePast(T value);" />
      <MemberSignature Language="F#" Value="member this.AdvancePast : 'T -&gt; int64" Usage="sequenceReader.AdvancePast value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="77c49-107">Der Wert um, den sich der Reader vorbeibewegt.</span><span class="sxs-lookup"><span data-stu-id="77c49-107">The value past which the reader is to advance.</span></span></param>
        <summary><span data-ttu-id="77c49-108">Bewegt sich an aufeinander folgenden Instanzen des angegebenen <paramref name="value" /> vorbei.</span><span class="sxs-lookup"><span data-stu-id="77c49-108">Advances past consecutive instances of the given <paramref name="value" />.</span></span></summary>
        <returns><span data-ttu-id="77c49-109">Die Anzahl der Positionen, um die der Reader vorgerückt ist.</span><span class="sxs-lookup"><span data-stu-id="77c49-109">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(valuetype System.ReadOnlySpan`1&lt;!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (values As ReadOnlySpan(Of T)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; int64" Usage="sequenceReader.AdvancePastAny values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="77c49-110">Die zu überspringenden Werte.</span><span class="sxs-lookup"><span data-stu-id="77c49-110">The values to be skipped.</span></span></param>
        <summary><span data-ttu-id="77c49-111">Überspringt aufeinander folgende Instanzen beliebiger der angegebenen <paramref name="values" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-111">Skips consecutive instances of any of the specified <paramref name="values" />.</span></span></summary>
        <returns><span data-ttu-id="77c49-112">Die Anzahl der Positionen, um die der Reader vorgerückt ist.</span><span class="sxs-lookup"><span data-stu-id="77c49-112">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0"><span data-ttu-id="77c49-113">Der erste zu überspringende Wert.</span><span class="sxs-lookup"><span data-stu-id="77c49-113">The first value to skip.</span></span></param>
        <param name="value1"><span data-ttu-id="77c49-114">Der zweite zu überspringende Wert.</span><span class="sxs-lookup"><span data-stu-id="77c49-114">The second value to skip.</span></span></param>
        <summary><span data-ttu-id="77c49-115">Bewegt sich an aufeinander folgenden Instanzen eines beliebigen von zwei angegebenen Werten vorbei.</span><span class="sxs-lookup"><span data-stu-id="77c49-115">Advances past consecutive instances of either of two specified values.</span></span></summary>
        <returns><span data-ttu-id="77c49-116">Die Anzahl der Positionen, um die der Reader vorgerückt ist.</span><span class="sxs-lookup"><span data-stu-id="77c49-116">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1, T value2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1, !T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T, value2 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0"><span data-ttu-id="77c49-117">Der erste zu überspringende Wert.</span><span class="sxs-lookup"><span data-stu-id="77c49-117">The first value to skip.</span></span></param>
        <param name="value1"><span data-ttu-id="77c49-118">Der zweite zu überspringende Wert.</span><span class="sxs-lookup"><span data-stu-id="77c49-118">The second value to skip.</span></span></param>
        <param name="value2"><span data-ttu-id="77c49-119">Der dritte zu überspringende Wert.</span><span class="sxs-lookup"><span data-stu-id="77c49-119">The third value to skip.</span></span></param>
        <summary><span data-ttu-id="77c49-120">Bewegt sich an aufeinander folgenden Instanzen beliebiger von drei angegebenen Werten vorbei.</span><span class="sxs-lookup"><span data-stu-id="77c49-120">Advances past consecutive instances of any of three specified values.</span></span></summary>
        <returns><span data-ttu-id="77c49-121">Die Anzahl der Positionen, um die der Reader vorgerückt ist.</span><span class="sxs-lookup"><span data-stu-id="77c49-121">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancePastAny">
      <MemberSignature Language="C#" Value="public long AdvancePastAny (T value0, T value1, T value2, T value3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AdvancePastAny(!T value0, !T value1, !T value2, !T value3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancePastAny (value0 As T, value1 As T, value2 As T, value3 As T) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AdvancePastAny(T value0, T value1, T value2, T value3);" />
      <MemberSignature Language="F#" Value="member this.AdvancePastAny : 'T * 'T * 'T * 'T -&gt; int64" Usage="sequenceReader.AdvancePastAny (value0, value1, value2, value3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
        <Parameter Name="value3" Type="T" />
      </Parameters>
      <Docs>
        <param name="value0"><span data-ttu-id="77c49-122">Der erste zu überspringende Wert.</span><span class="sxs-lookup"><span data-stu-id="77c49-122">The first value to skip.</span></span></param>
        <param name="value1"><span data-ttu-id="77c49-123">Der zweite zu überspringende Wert.</span><span class="sxs-lookup"><span data-stu-id="77c49-123">The second value to skip.</span></span></param>
        <param name="value2"><span data-ttu-id="77c49-124">Der dritte zu überspringende Wert.</span><span class="sxs-lookup"><span data-stu-id="77c49-124">The third value to skip.</span></span></param>
        <param name="value3"><span data-ttu-id="77c49-125">Der vierte zu überspringende Wert.</span><span class="sxs-lookup"><span data-stu-id="77c49-125">The fourth value to skip.</span></span></param>
        <summary><span data-ttu-id="77c49-126">Bewegt sich an aufeinander folgenden Instanzen beliebiger von vier angegebenen Werten vorbei.</span><span class="sxs-lookup"><span data-stu-id="77c49-126">Advances past consecutive instances of any of four specified values.</span></span></summary>
        <returns><span data-ttu-id="77c49-127">Die Anzahl der Positionen, um die der Reader vorgerückt ist.</span><span class="sxs-lookup"><span data-stu-id="77c49-127">The number of positions the reader has advanced.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Consumed">
      <MemberSignature Language="C#" Value="public long Consumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Consumed" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Consumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Consumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumed : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Consumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77c49-128">Ruft die Gesamtzahl der vom Reader verarbeiteten <typeparamref name="T" />-Werte ab.</span><span class="sxs-lookup"><span data-stu-id="77c49-128">Gets the total number of <typeparamref name="T" /> values processed by the reader.</span></span></summary>
        <value><span data-ttu-id="77c49-129">Die Gesamtanzahl der vom Reader verarbeiteten Werte.</span><span class="sxs-lookup"><span data-stu-id="77c49-129">The total number of values processed by the reader.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; CurrentSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;!T&gt; CurrentSpan" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.CurrentSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentSpan As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;T&gt; CurrentSpan { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentSpan : ReadOnlySpan&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.CurrentSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77c49-130">Ruft eine <see cref="T:System.Span`1" /> ab, die das aktuelle Segment in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> enthält.</span><span class="sxs-lookup"><span data-stu-id="77c49-130">Gets a <see cref="T:System.Span`1" /> that contains the current segment in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="77c49-131">Eine Spanne, die das aktuelle Segment in der Sequenz enthält.</span><span class="sxs-lookup"><span data-stu-id="77c49-131">A span that contains the current segment in the sequence.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentSpanIndex">
      <MemberSignature Language="C#" Value="public int CurrentSpanIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentSpanIndex" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.CurrentSpanIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentSpanIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentSpanIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentSpanIndex : int" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.CurrentSpanIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77c49-132">Ruft den Index in der <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> ab.</span><span class="sxs-lookup"><span data-stu-id="77c49-132">Gets the index in the <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span></span></summary>
        <value><span data-ttu-id="77c49-133">Der Index in der <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-133">The index in the <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public bool End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool End" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.End" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property End As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool End { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.End : bool" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.End" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77c49-134">Ruft einen Wert ab, der angibt, ob keine Daten mehr in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="77c49-134">Gets a value that indicates whether there is no more data in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="77c49-135"><see langword="true" /><see cref="P:System.Buffers.SequenceReader`1.Sequence" /> ,<see langword="false" />wenn keine weiteren Daten in der vorhanden sind, andernfalls.</span><span class="sxs-lookup"><span data-stu-id="77c49-135"><see langword="true" /> when there is no more data in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNext">
      <MemberSignature Language="C#" Value="public bool IsNext (ReadOnlySpan&lt;T&gt; next, bool advancePast = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNext(valuetype System.ReadOnlySpan`1&lt;!T&gt; next, bool advancePast) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNext (next As ReadOnlySpan(Of T), Optional advancePast As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNext : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.IsNext (next, advancePast)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePast" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="next"><span data-ttu-id="77c49-136">Die Spanne, mit der die nächsten Elemente verglichen werden.</span><span class="sxs-lookup"><span data-stu-id="77c49-136">The span to compare the next items to.</span></span></param>
        <param name="advancePast"><span data-ttu-id="77c49-137"><see langword="true" /> zum Vorbeibewegen an den <paramref name="next" />-Werten, wenn sie gefunden werden; sonst <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-137"><see langword="true" /> to move past the <paramref name="next" /> values if they are found; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="77c49-138">Überprüft, ob die in einer schreibgeschützten Spanne angegebenen Werte die nächsten in der Sequenz sind.</span><span class="sxs-lookup"><span data-stu-id="77c49-138">Checks whether the values specified in a read-only span are next in the sequence.</span></span></summary>
        <returns><span data-ttu-id="77c49-139"><see langword="true" />, wenn die Werte in der Sequenz als nächstes kommen; sonst <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-139"><see langword="true" /> if the values are next in sequence; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNext">
      <MemberSignature Language="C#" Value="public bool IsNext (T next, bool advancePast = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNext(!T next, bool advancePast) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.IsNext(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNext (next As T, Optional advancePast As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNext : 'T * bool -&gt; bool" Usage="sequenceReader.IsNext (next, advancePast)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="T" />
        <Parameter Name="advancePast" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="next"><span data-ttu-id="77c49-140">Der Wert, mit dem die nächsten Elemente verglichen werden.</span><span class="sxs-lookup"><span data-stu-id="77c49-140">The value to compare the next items to.</span></span></param>
        <param name="advancePast"><span data-ttu-id="77c49-141"><see langword="true" /> zum Vorbeibewegen an den <paramref name="next" />-Werten, wenn sie gefunden werden; sonst <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-141"><see langword="true" /> to move past the <paramref name="next" /> values if they are found; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="77c49-142">Überprüft, ob ein angegebener Wert der nächste in der Sequenz ist.</span><span class="sxs-lookup"><span data-stu-id="77c49-142">Checks whether a specified value is next in the sequence.</span></span></summary>
        <returns><span data-ttu-id="77c49-143"><see langword="true" />, wenn die Werte in der Sequenz als nächstes kommen; sonst <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-143"><see langword="true" /> if the values are next in sequence; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77c49-144">Ruft die Anzahl der Elemente in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> des Readers ab.</span><span class="sxs-lookup"><span data-stu-id="77c49-144">Gets the count of items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="77c49-145">Die Anzahl der Elemente in der des Readers <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-145">The count of items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77c49-146">Ruft die aktuelle Position in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> ab.</span><span class="sxs-lookup"><span data-stu-id="77c49-146">Gets the current position in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="77c49-147">Die aktuelle Position in <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-147">The current position in the <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public long Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Remaining As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Remaining { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int64" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77c49-148">Ruft die verbleibenden Elemente in der <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> des Readers ab.</span><span class="sxs-lookup"><span data-stu-id="77c49-148">Gets  the remaining items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</span></span></summary>
        <value><span data-ttu-id="77c49-149">Die restlichen Elemente im Reader<see cref="P:System.Buffers.SequenceReader`1.Sequence" /></span><span class="sxs-lookup"><span data-stu-id="77c49-149">The remaining items in the reader's <see cref="P:System.Buffers.SequenceReader`1.Sequence" /></span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind (long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind(int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.Rewind(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rewind (count As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rewind(long count);" />
      <MemberSignature Language="F#" Value="member this.Rewind : int64 -&gt; unit" Usage="sequenceReader.Rewind count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="count"><span data-ttu-id="77c49-150">Eine -Anzahl von Elementen.</span><span class="sxs-lookup"><span data-stu-id="77c49-150">The number of items.</span></span></param>
        <summary><span data-ttu-id="77c49-151">Verschiebt den Reader eine angegebene Anzahl von Elementen zurück.</span><span class="sxs-lookup"><span data-stu-id="77c49-151">Moves the reader back the specified number of items.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="77c49-152"><paramref name="count" /> ist negativ oder größer als <see cref="P:System.Buffers.SequenceReader`1.Consumed" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-152"><paramref name="count" /> is negative or greater than <see cref="P:System.Buffers.SequenceReader`1.Consumed" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;T&gt; Sequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt; Sequence" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.Sequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sequence As ReadOnlySequence(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;T&gt; Sequence { System::Buffers::ReadOnlySequence&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Sequence : System.Buffers.ReadOnlySequence&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.Sequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77c49-153">Ruft die zugrunde liegende <see cref="T:System.Buffers.ReadOnlySequence`1" /> für den Reader ab.</span><span class="sxs-lookup"><span data-stu-id="77c49-153">Gets the underlying <see cref="T:System.Buffers.ReadOnlySequence`1" /> for the reader.</span></span></summary>
        <value><span data-ttu-id="77c49-154">Die zugrunde liegende schreibgeschützte Sequenz für den Reader.</span><span class="sxs-lookup"><span data-stu-id="77c49-154">The underlying read-only sequence for the reader.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdvanceTo">
      <MemberSignature Language="C#" Value="public bool TryAdvanceTo (T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAdvanceTo(!T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryAdvanceTo(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryAdvanceTo (delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryAdvanceTo : 'T * bool -&gt; bool" Usage="sequenceReader.TryAdvanceTo (delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="delimiter"><span data-ttu-id="77c49-155">Das Trennzeichen, das gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="77c49-155">The delimiter to search for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="77c49-156"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-156"><see langword="true" /> to move past the <paramref name="delimiter" /> if it is found; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="77c49-157">Sucht nach einem angegebenen Trennzeichen und bewegt sich optional an ihm vorbei, wenn es gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="77c49-157">Searches for a specified delimiter and optionally advances past it if it is found.</span></span></summary>
        <returns><span data-ttu-id="77c49-158"><see langword="true" />, wenn der angegebene <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-158"><see langword="true" /> if the given <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdvanceToAny">
      <MemberSignature Language="C#" Value="public bool TryAdvanceToAny (ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAdvanceToAny(valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryAdvanceToAny(System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryAdvanceToAny (delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryAdvanceToAny : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryAdvanceToAny (delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="delimiters"><span data-ttu-id="77c49-159">Die Trennzeichen, die gesucht werden sollen.</span><span class="sxs-lookup"><span data-stu-id="77c49-159">The delimiters to search for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="77c49-160"><see langword="true" /> zum Vorbeibewegen an der ersten Instanz eines der angegebenen <paramref name="delimiters" />; <see lanword="false" />, um sich nicht an dem Trennzeichen vorbei zu bewegen.</span><span class="sxs-lookup"><span data-stu-id="77c49-160"><see langword="true" /> to move past the first instance of any of the given <paramref name="delimiters" />; <see lanword="false" /> to not move past the delimiter.</span></span></param>
        <summary><span data-ttu-id="77c49-161">Sucht nach beliebigen einer Anzahl angegebener Trennzeichen und bewegt sich optional an dem ersten gefundenen vorbei.</span><span class="sxs-lookup"><span data-stu-id="77c49-161">Searches for any of a number of specified delimiters and optionally advances past the first one to be found.</span></span></summary>
        <returns><span data-ttu-id="77c49-162"><see langword="true" />, wenn ein beliebiges der angegebenen <paramref name="delimiters" /> gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-162"><see langword="true" /> if any of the given <paramref name="delimiters" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T (requires 'T : struct)&gt; -&gt; bool" Usage="sequenceReader.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="77c49-163">Zielspanne, in die kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="77c49-163">Destination span to copy to.</span></span></param>
        <summary><span data-ttu-id="77c49-164">Kopiert Daten von der aktuellen Position zur angegebenen Zielspanne, wenn genügend Daten vorhanden sind, um sie zu füllen.</span><span class="sxs-lookup"><span data-stu-id="77c49-164">Copies data from the current position to the given destination span if there is enough data to fill it.</span></span></summary>
        <returns><span data-ttu-id="77c49-165"><see langword="true" />, wenn genügend Daten vorhanden sind, um die <paramref name="destination" />-Spanne vollständig zu füllen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-165"><see langword="true" /> if there is enough data to completely fill the <paramref name="destination" /> span; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="77c49-166">Diese Methode kopiert nach Möglichkeit eine Fixed-Menge von Daten aus der Sequenz.</span><span class="sxs-lookup"><span data-stu-id="77c49-166">This method copies a fixed amount of data out of the sequence if possible.</span></span> <span data-ttu-id="77c49-167">Der Reader wird nicht in den vorausgeht.</span><span class="sxs-lookup"><span data-stu-id="77c49-167">It does not advance the reader.</span></span> <span data-ttu-id="77c49-168">Verwenden <xref:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)>Sie, um einen bestimmten Datenstrom nach vorne zu suchen.</span><span class="sxs-lookup"><span data-stu-id="77c49-168">To look ahead for a specific stream of data, use  <xref:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="member this.TryPeek : 'T -&gt; bool" Usage="sequenceReader.TryPeek value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="77c49-169">Der nächste Wert, oder der Standardwert, wenn das Ende des Readers erreicht ist.</span><span class="sxs-lookup"><span data-stu-id="77c49-169">The next value, or the default value if at the end of the reader.</span></span></param>
        <summary><span data-ttu-id="77c49-170">Schaut auf den nächsten Wert, ohne den Reader vorzurücken.</span><span class="sxs-lookup"><span data-stu-id="77c49-170">Peeks at the next value without advancing the reader.</span></span></summary>
        <returns><span data-ttu-id="77c49-171"><see langword="true" />, wenn sich der Reader nicht am Ende befindet und der Schauvorgang erfolgreich war; <see langword="false" />, wenn sich der Reader am Ende befindet.</span><span class="sxs-lookup"><span data-stu-id="77c49-171"><see langword="true" /> if the reader is not at its end and the peek operation succeeded; <see langword="false" /> if at the end of the reader.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead">
      <MemberSignature Language="C#" Value="public bool TryRead (out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryRead([out] !T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryRead(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryRead (ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryRead([Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="member this.TryRead : 'T -&gt; bool" Usage="sequenceReader.TryRead value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="77c49-172">Der nächste Wert, oder der Standardwert, wenn das Ende des Readers erreicht ist.</span><span class="sxs-lookup"><span data-stu-id="77c49-172">The next value, or the default value if at the end of the reader.</span></span></param>
        <summary><span data-ttu-id="77c49-173">Liest den nächsten Wert und rückt den Reader vor.</span><span class="sxs-lookup"><span data-stu-id="77c49-173">Reads the next value and advance the reader.</span></span></summary>
        <returns><span data-ttu-id="77c49-174"><see langword="true" />, wenn sich der Reader nicht am Ende befindet und der Lesevorgang erfolgreich war; <see langword="false" />, wenn sich der Reader am Ende befindet.</span><span class="sxs-lookup"><span data-stu-id="77c49-174"><see langword="true" /> if the reader is not at its end and the read operation succeeded; <see langword="false" /> if at the end of the reader.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, ReadOnlySpan&lt;T&gt; delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo : ReadOnlySequence * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="77c49-175">Enthält die ggf. von der Methode gelesenen Daten.</span><span class="sxs-lookup"><span data-stu-id="77c49-175">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="77c49-176">Eine schreibgeschützte Spanne, die mindestens ein Trennzeichen enthält.</span><span class="sxs-lookup"><span data-stu-id="77c49-176">A read-only span that contains one or more delimiters.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="77c49-177"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-177"><see langword="true" /> to move past the <paramref name="delimiter" /> if found; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="77c49-178">Versucht, bis zur Übereinstimmung mit dem als schreibgeschützte Spanne angegebenen gesamten Trennzeichen Daten zu lesen.</span><span class="sxs-lookup"><span data-stu-id="77c49-178">Tries to read data until the entire delimiter specified as a read-only span matches.</span></span></summary>
        <returns><span data-ttu-id="77c49-179"><see langword="true" />, wenn der <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-179"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, !T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo : ReadOnlySequence * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="77c49-180">Enthält die ggf. von der Methode gelesenen Daten.</span><span class="sxs-lookup"><span data-stu-id="77c49-180">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="77c49-181">Das Trennzeichen, das gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="77c49-181">The delimiter to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="77c49-182"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-182"><see langword="true" /> to move past the <paramref name="delimiter" /> if found; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="77c49-183">Versucht, alles bis zum angegebenen <paramref name="delimiter" /> zu lesen.</span><span class="sxs-lookup"><span data-stu-id="77c49-183">Tries to read everything up to the given <paramref name="delimiter" />.</span></span></summary>
        <returns><span data-ttu-id="77c49-184"><see langword="true" />, wenn der <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-184"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out ReadOnlySpan&lt;T&gt; span, T delimiter, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, !T delimiter, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef span As ReadOnlySpan(Of T), delimiter As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo : ReadOnlySpan * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (span, delimiter, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="77c49-185">Enthält die ggf. von der Methode gelesenen Daten.</span><span class="sxs-lookup"><span data-stu-id="77c49-185">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="77c49-186">Das Trennzeichen, das gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="77c49-186">The delimiter to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="77c49-187"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-187"><see langword="true" /> to move past the <paramref name="delimiter" /> if found; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="77c49-188">Versucht, alles bis zum angegebenen <paramref name="delimiter" /> zu lesen.</span><span class="sxs-lookup"><span data-stu-id="77c49-188">Tries to read everything up to the given <paramref name="delimiter" />.</span></span></summary>
        <returns><span data-ttu-id="77c49-189"><see langword="true" />, wenn der <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-189"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, T delimiter, T delimiterEscape, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, !T delimiter, !T delimiterEscape, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef sequence As ReadOnlySequence(Of T), delimiter As T, delimiterEscape As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo : ReadOnlySequence * 'T * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (sequence, delimiter, delimiterEscape, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="delimiterEscape" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="77c49-190">Enthält die ggf. von der Methode gelesenen Daten.</span><span class="sxs-lookup"><span data-stu-id="77c49-190">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="77c49-191">Das Trennzeichen, das gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="77c49-191">The delimiter to look for.</span></span></param>
        <param name="delimiterEscape"><span data-ttu-id="77c49-192">Ein Wert, der angibt, dass ein unmittelbar nachfolgender <paramref name="delimiter" /> übersprungen werden soll.</span><span class="sxs-lookup"><span data-stu-id="77c49-192">A value that indicates that an immediately following <paramref name="delimiter" /> is to be skipped.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="77c49-193"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-193"><see langword="true" /> to move past the <paramref name="delimiter" /> if found; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="77c49-194">Versucht, alles bis zum angegebenen <paramref name="delimiter" /> zu lesen, wobei Trennzeichen ignoriert werden, denen <paramref name="delimiterEscape" /> vorangestellt ist.</span><span class="sxs-lookup"><span data-stu-id="77c49-194">Tries to read everything up to the given <paramref name="delimiter" />, ignoring delimiters that are preceded by <paramref name="delimiterEscape" />.</span></span></summary>
        <returns><span data-ttu-id="77c49-195"><see langword="true" />, wenn der <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-195"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadTo">
      <MemberSignature Language="C#" Value="public bool TryReadTo (out ReadOnlySpan&lt;T&gt; span, T delimiter, T delimiterEscape, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTo([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, !T delimiter, !T delimiterEscape, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTo (ByRef span As ReadOnlySpan(Of T), delimiter As T, delimiterEscape As T, Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadTo : ReadOnlySpan * 'T * 'T * bool -&gt; bool" Usage="sequenceReader.TryReadTo (span, delimiter, delimiterEscape, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiter" Type="T" />
        <Parameter Name="delimiterEscape" Type="T" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="77c49-196">Enthält die ggf. von der Methode gelesenen Daten.</span><span class="sxs-lookup"><span data-stu-id="77c49-196">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiter"><span data-ttu-id="77c49-197">Das Trennzeichen, das gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="77c49-197">The delimiter to look for.</span></span></param>
        <param name="delimiterEscape"><span data-ttu-id="77c49-198">Ein Wert, der angibt, dass ein unmittelbar nachfolgender <paramref name="delimiter" /> übersprungen werden soll.</span><span class="sxs-lookup"><span data-stu-id="77c49-198">A value that indicates that an immediately following <paramref name="delimiter" /> is to be skipped.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="77c49-199"><see langword="true" /> zum Vorbeibewegen am <paramref name="delimiter" />, wenn er gefunden wird; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-199"><see langword="true" /> to move past the <paramref name="delimiter" /> if found; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="77c49-200">Versucht, alles bis zum angegebenen <paramref name="delimiter" /> zu lesen, wobei Trennzeichen ignoriert werden, denen <paramref name="delimiterEscape" /> vorangestellt ist.</span><span class="sxs-lookup"><span data-stu-id="77c49-200">Tries to read everything up to the given <paramref name="delimiter" />, ignoring delimiters that are preceded by <paramref name="delimiterEscape" />.</span></span></summary>
        <returns><span data-ttu-id="77c49-201"><see langword="true" />, wenn der <paramref name="delimiter" /> gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-201"><see langword="true" /> if the <paramref name="delimiter" /> was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadToAny">
      <MemberSignature Language="C#" Value="public bool TryReadToAny (out System.Buffers.ReadOnlySequence&lt;T&gt; sequence, ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadToAny([out] valuetype System.Buffers.ReadOnlySequence`1&lt;!T&gt;&amp; sequence, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadToAny(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadToAny (ByRef sequence As ReadOnlySequence(Of T), delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadToAny : ReadOnlySequence * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadToAny (sequence, delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sequence"><span data-ttu-id="77c49-202">Enthält die ggf. von der Methode gelesenen Daten.</span><span class="sxs-lookup"><span data-stu-id="77c49-202">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiters"><span data-ttu-id="77c49-203">Die Trennzeichen, die gesucht werden sollen.</span><span class="sxs-lookup"><span data-stu-id="77c49-203">The delimiters to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="77c49-204"><see langword="true" /> zum Vorbeibewegen an der ersten gefundenen Instanz eines beliebigen der angegebenen <paramref name="delimiters" />; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-204"><see langword="true" /> to move past the first found instance of any of the given <paramref name="delimiters" />; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="77c49-205">Versucht, alles bis zu einem der angegebenen <paramref name="delimiters" /> zu lesen.</span><span class="sxs-lookup"><span data-stu-id="77c49-205">Tries to read everything up to any of the specified <paramref name="delimiters" />.</span></span></summary>
        <returns><span data-ttu-id="77c49-206"><see langword="true" />, falls beliebige der <paramref name="delimiters" /> gefunden wurden; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-206"><see langword="true" /> if any of the <paramref name="delimiters" /> were found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadToAny">
      <MemberSignature Language="C#" Value="public bool TryReadToAny (out ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; delimiters, bool advancePastDelimiter = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadToAny([out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span, valuetype System.ReadOnlySpan`1&lt;!T&gt; delimiters, bool advancePastDelimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.SequenceReader`1.TryReadToAny(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadToAny (ByRef span As ReadOnlySpan(Of T), delimiters As ReadOnlySpan(Of T), Optional advancePastDelimiter As Boolean = true) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadToAny : ReadOnlySpan * ReadOnlySpan&lt;'T (requires 'T : struct)&gt; * bool -&gt; bool" Usage="sequenceReader.TryReadToAny (span, delimiters, advancePastDelimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out" />
        <Parameter Name="delimiters" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="advancePastDelimiter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="77c49-207">Enthält die ggf. von der Methode gelesenen Daten.</span><span class="sxs-lookup"><span data-stu-id="77c49-207">When the method returns, contains the data read, if any.</span></span></param>
        <param name="delimiters"><span data-ttu-id="77c49-208">Die Trennzeichen, die gesucht werden sollen.</span><span class="sxs-lookup"><span data-stu-id="77c49-208">The delimiters to look for.</span></span></param>
        <param name="advancePastDelimiter"><span data-ttu-id="77c49-209"><see langword="true" /> zum Vorbeibewegen an der ersten gefundenen Instanz eines beliebigen der angegebenen <paramref name="delimiters" />; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-209"><see langword="true" /> to move past the first found instance of any of the given <paramref name="delimiters" />; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="77c49-210">Versucht, alles bis zu einem der angegebenen <paramref name="delimiters" /> zu lesen.</span><span class="sxs-lookup"><span data-stu-id="77c49-210">Tries to read everything up to any of the specified <paramref name="delimiters" />.</span></span></summary>
        <returns><span data-ttu-id="77c49-211"><see langword="true" />, falls beliebige der <paramref name="delimiters" /> gefunden wurden; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="77c49-211"><see langword="true" /> if any of the <paramref name="delimiters" /> were found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnreadSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; UnreadSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;!T&gt; UnreadSpan" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.SequenceReader`1.UnreadSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnreadSpan As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;T&gt; UnreadSpan { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.UnreadSpan : ReadOnlySpan&lt;'T (requires 'T : struct)&gt;" Usage="System.Buffers.SequenceReader&lt;'T (requires 'T : struct)&gt;.UnreadSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="77c49-212">Ruft den ungelesenen Teil der <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> ab.</span><span class="sxs-lookup"><span data-stu-id="77c49-212">Gets the unread portion of the <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span></span></summary>
        <value><span data-ttu-id="77c49-213">Der ungelesene Teil <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />von.</span><span class="sxs-lookup"><span data-stu-id="77c49-213">The unread portion of the <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

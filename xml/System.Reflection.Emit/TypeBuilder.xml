<Type Name="TypeBuilder" FullName="System.Reflection.Emit.TypeBuilder">
  <TypeSignature Language="C#" Value="public sealed class TypeBuilder : System.Reflection.TypeInfo, System.Runtime.InteropServices._TypeBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit TypeBuilder extends System.Reflection.TypeInfo implements class System.Runtime.InteropServices._TypeBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.TypeBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeBuilder&#xA;Inherits TypeInfo&#xA;Implements _TypeBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeBuilder sealed : System::Reflection::TypeInfo, System::Runtime::InteropServices::_TypeBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.TypeInfo</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-2.0">System.Type</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._TypeBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._TypeBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="86906-101">Definiert und erstellt zur Laufzeit neue Instanzen von Klassen.</span><span class="sxs-lookup"><span data-stu-id="86906-101">Defines and creates new instances of classes during run time.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-102"><xref:System.Reflection.Emit.TypeBuilder> die Stammklasse dient zum Steuern der Erstellung von dynamischen Klassen in der Laufzeit verwendet.</span><span class="sxs-lookup"><span data-stu-id="86906-102"><xref:System.Reflection.Emit.TypeBuilder> is the root class used to control the creation of dynamic classes in the runtime.</span></span> <span data-ttu-id="86906-103">Er bietet einen Satz von Routinen, die zum Definieren von Klassen, Methoden und Felder hinzufügen und erstellen Sie die Klasse innerhalb eines Moduls verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="86906-103">It provides a set of routines that are used to define classes, add methods and fields, and create the class inside a module.</span></span> <span data-ttu-id="86906-104">Ein neues <xref:System.Reflection.Emit.TypeBuilder> können aus einem dynamischen Modul erstellt werden, durch Aufrufen der <xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=nameWithType> Methode, die zurückgibt ein <xref:System.Reflection.Emit.TypeBuilder> Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-104">A new <xref:System.Reflection.Emit.TypeBuilder> can be created from a dynamic module by calling the <xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=nameWithType> method, which returns a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="86906-105">Reflektionsausgabe bietet die folgenden Optionen zum Definieren der Typen:</span><span class="sxs-lookup"><span data-stu-id="86906-105">Reflection emit provides the following options for defining types:</span></span>  
  
-   <span data-ttu-id="86906-106">Definieren Sie eine Klasse oder Schnittstelle mit dem angegebenen Namen.</span><span class="sxs-lookup"><span data-stu-id="86906-106">Define a class or interface with the given name.</span></span>  
  
-   <span data-ttu-id="86906-107">Definieren Sie eine Klasse oder Schnittstelle mit dem angegebenen Namen und Attributen.</span><span class="sxs-lookup"><span data-stu-id="86906-107">Define a class or interface with the given name and attributes.</span></span>  
  
-   <span data-ttu-id="86906-108">Definieren Sie eine Klasse mit dem angegebenen Namen, die Attribute und die Basisklasse.</span><span class="sxs-lookup"><span data-stu-id="86906-108">Define a class with the given name, attributes, and base class.</span></span>  
  
-   <span data-ttu-id="86906-109">Definieren Sie eine Klasse mit dem angegebenen Namen, Attribute, Basisklasse und die Gruppe von Schnittstellen, die die Klasse implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-109">Define a class with the given name, attributes, base class, and the set of interfaces that the class implements.</span></span>  
  
-   <span data-ttu-id="86906-110">Definieren Sie eine Klasse mit dem angegebenen Namen, Attribute, Basisklasse und Komprimierungsgröße.</span><span class="sxs-lookup"><span data-stu-id="86906-110">Define a class with the given name, attributes, base class, and packing size.</span></span>  
  
-   <span data-ttu-id="86906-111">Definieren Sie eine Klasse mit dem angegebenen Namen, Attribute, Basisklasse und die Klassengröße als Ganzes.</span><span class="sxs-lookup"><span data-stu-id="86906-111">Define a class with the given name, attributes, base class, and the class size as a whole.</span></span>  
  
-   <span data-ttu-id="86906-112">Definieren Sie eine Klasse mit dem angegebenen Namen, Attribute, Basisklasse, Komprimierungsgröße und die Klassengröße als Ganzes.</span><span class="sxs-lookup"><span data-stu-id="86906-112">Define a class with the given name, attributes, base class, packing size, and the class size as a whole.</span></span>  
  
 <span data-ttu-id="86906-113">So erstellen ein Arraytyp, Zeigertyp oder Byref-Typ für einen unvollständigen Typ, der durch dargestellt wird eine <xref:System.Reflection.Emit.TypeBuilder> -Objekts die <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> -Methode, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> -Methode, oder <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> Methode bzw.</span><span class="sxs-lookup"><span data-stu-id="86906-113">To create an array type, pointer type, or byref type for an incomplete type that is represented by a <xref:System.Reflection.Emit.TypeBuilder> object, use the <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method, or <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="86906-114">Bevor ein Typ verwendet wird, die <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> -Methode muss aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="86906-114">Before a type is used, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> method must be called.</span></span> <span data-ttu-id="86906-115">**CreateType** schließt die Erstellung des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-115">**CreateType** completes the creation of the type.</span></span> <span data-ttu-id="86906-116">Nach dem Aufruf von **CreateType**, der Aufrufer kann den Typ instanziieren, indem Sie mit der <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> -Methode, und rufen Sie Member des Typs mit der <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-116">Following the call to **CreateType**, the caller can instantiate the type by using the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and invoke members of the type by using the <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="86906-117">Es ist ein Fehler zum Aufrufen von Methoden, die die Implementierung eines Typs nach dem Ändern **CreateType** aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-117">It is an error to invoke methods that change the implementation of a type after **CreateType** has been called.</span></span> <span data-ttu-id="86906-118">Beispielsweise löst die common Language Runtime eine Ausnahme aus, wenn der Aufrufer versucht, eine neue Elemente hinzufügen.</span><span class="sxs-lookup"><span data-stu-id="86906-118">For example, the common language runtime throws an exception if the caller tries to add new members to a type.</span></span>  
  
 <span data-ttu-id="86906-119">Ein Klasseninitialisierer wird erstellt, indem Sie mit der <xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-119">A class initializer is created by using the <xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="86906-120">**DefineTypeInitializer** gibt eine <xref:System.Reflection.Emit.ConstructorBuilder> Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-120">**DefineTypeInitializer** returns a <xref:System.Reflection.Emit.ConstructorBuilder> object.</span></span>  
  
 <span data-ttu-id="86906-121">Geschachtelte Typen werden durch einen Aufruf der definiert die <xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=nameWithType> Methoden.</span><span class="sxs-lookup"><span data-stu-id="86906-121">Nested types are defined by calling one of the <xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=nameWithType> methods.</span></span>  
  
## <a name="attributes"></a><span data-ttu-id="86906-122">Attribute</span><span class="sxs-lookup"><span data-stu-id="86906-122">Attributes</span></span>  
 <span data-ttu-id="86906-123">Die <xref:System.Reflection.Emit.TypeBuilder> -Klasse verwendet die <xref:System.Reflection.TypeAttributes> Enumeration genauer die Merkmale des zu erstellenden Typs anzugeben:</span><span class="sxs-lookup"><span data-stu-id="86906-123">The <xref:System.Reflection.Emit.TypeBuilder> class uses the <xref:System.Reflection.TypeAttributes> enumeration to further specify the characteristics of the type to be created:</span></span>  
  
-   <span data-ttu-id="86906-124">Schnittstellen werden angegeben, mit der <xref:System.Reflection.TypeAttributes.Interface?displayProperty=nameWithType> und <xref:System.Reflection.TypeAttributes.Abstract?displayProperty=nameWithType> Attribute.</span><span class="sxs-lookup"><span data-stu-id="86906-124">Interfaces are specified using the <xref:System.Reflection.TypeAttributes.Interface?displayProperty=nameWithType> and <xref:System.Reflection.TypeAttributes.Abstract?displayProperty=nameWithType> attributes.</span></span>  
  
-   <span data-ttu-id="86906-125">Konkrete Klassen (Klassen, die nicht erweitert werden) werden angegeben, mit der <xref:System.Reflection.TypeAttributes.Sealed?displayProperty=nameWithType> Attribut.</span><span class="sxs-lookup"><span data-stu-id="86906-125">Concrete classes (classes that cannot be extended) are specified using the <xref:System.Reflection.TypeAttributes.Sealed?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="86906-126">Mehrere Attribute bestimmen typsichtbarkeit.</span><span class="sxs-lookup"><span data-stu-id="86906-126">Several attributes determine type visibility.</span></span> <span data-ttu-id="86906-127">Siehe dazu die Beschreibung der <xref:System.Reflection.TypeAttributes> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="86906-127">See the description of the <xref:System.Reflection.TypeAttributes> enumeration.</span></span>  
  
-   <span data-ttu-id="86906-128">Wenn <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> angegeben ist, wird das Ladeprogramm Layout der Felder in der Reihenfolge, die sie aus den Metadaten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="86906-128">If <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is specified, the class loader lays out fields in the order they are read from metadata.</span></span> <span data-ttu-id="86906-129">Das Klassenladeprogramm der hält der angegebene Komprimierungsgröße, ignoriert jedoch die angegebenen Feldoffsets.</span><span class="sxs-lookup"><span data-stu-id="86906-129">The class loader considers the specified packing size but ignores any specified field offsets.</span></span> <span data-ttu-id="86906-130">Die Metadaten behält die Reihenfolge, in der die Felddefinitionen ausgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="86906-130">The metadata preserves the order in which the field definitions are emitted.</span></span> <span data-ttu-id="86906-131">Sogar über eine Zusammenführung wird die Metadaten die Felddefinitionen nicht neu anordnen.</span><span class="sxs-lookup"><span data-stu-id="86906-131">Even across a merge, the metadata will not reorder the field definitions.</span></span> <span data-ttu-id="86906-132">Das Ladeprogramm berücksichtigt nur, wenn das angegebene Feld Offsets <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="86906-132">The loader will honor the specified field offsets only if <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is specified.</span></span>  
  
## <a name="known-issues"></a><span data-ttu-id="86906-133">Bekannte Probleme</span><span class="sxs-lookup"><span data-stu-id="86906-133">Known Issues</span></span>  
  
-   <span data-ttu-id="86906-134">Reflektionsausgabe überprüft nicht, ob eine nicht abstrakte Klasse, die eine Schnittstelle implementiert, alle in der Schnittstelle deklarierten Methoden implementiert hat.</span><span class="sxs-lookup"><span data-stu-id="86906-134">Reflection emit does not verify whether a non-abstract class that implements an interface has implemented all the methods declared in the interface.</span></span> <span data-ttu-id="86906-135">Jedoch, wenn die Klasse nicht alle in einer Schnittstelle deklarierten Methoden implementiert, wird die Common Language Runtime nicht die Klasse geladen.</span><span class="sxs-lookup"><span data-stu-id="86906-135">However, if the class does not implement all the methods declared in an interface, the runtime does not load the class.</span></span>  
  
-   <span data-ttu-id="86906-136">Obwohl <xref:System.Reflection.Emit.TypeBuilder> stammt aus <xref:System.Type>, einige der abstrakten Methoden definiert, der <xref:System.Type> Klasse sind nicht vollständig implementiert der <xref:System.Reflection.Emit.TypeBuilder> Klasse.</span><span class="sxs-lookup"><span data-stu-id="86906-136">Although <xref:System.Reflection.Emit.TypeBuilder> is derived from <xref:System.Type>, some of the abstract methods defined in the <xref:System.Type> class are not fully implemented in the <xref:System.Reflection.Emit.TypeBuilder> class.</span></span> <span data-ttu-id="86906-137">Aufrufe dieser <xref:System.Reflection.Emit.TypeBuilder> Methoden lösen eine <xref:System.NotSupportedException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="86906-137">Calls to these <xref:System.Reflection.Emit.TypeBuilder> methods throw a <xref:System.NotSupportedException> exception.</span></span> <span data-ttu-id="86906-138">Die gewünschte Funktionalität erhalten Sie durch Abrufen des erstellten Typs mithilfe der <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und Reflektieren des abgerufenen Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-138">The desired functionality can be obtained by retrieving the created type using the <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and reflecting on the retrieved type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-139">Dieser Abschnitt enthält zwei Codebeispiele.</span><span class="sxs-lookup"><span data-stu-id="86906-139">This section contains two code examples.</span></span> <span data-ttu-id="86906-140">Im erste Beispiel wird gezeigt, wie einen dynamischen Typ mit einem Feld, Konstruktor Eigenschaft und Methode erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="86906-140">The first example shows how to create a dynamic type with a field, constructor, property, and method.</span></span> <span data-ttu-id="86906-141">Im zweite Beispiel erstellt eine Methode dynamisch aus den Benutzereingaben.</span><span class="sxs-lookup"><span data-stu-id="86906-141">The second example builds a method dynamically from user input.</span></span>  
  
 <span data-ttu-id="86906-142">**Beispiel einer**</span><span class="sxs-lookup"><span data-stu-id="86906-142">**Example one**</span></span>  
  
 <span data-ttu-id="86906-143">Im folgenden Codebeispiel wird veranschaulicht, wie eine dynamische Assembly mit einem Modul definiert.</span><span class="sxs-lookup"><span data-stu-id="86906-143">The following code example shows how to define a dynamic assembly with one module.</span></span> <span data-ttu-id="86906-144">Das Modul in der Beispielassembly enthält einen Typ `MyDynamicType`, verfügt über ein privates Feld, eine Eigenschaft, die ermittelt und definiert das private Feld, Konstruktoren, die das private Feld zu initialisieren und eine Methode, die eine vom Benutzer angegebene Zahl von privaten Feld multipliziert. Wert und gibt das Ergebnis zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-144">The module in the example assembly contains one type, `MyDynamicType`, which has a private field, a property that gets and sets the private field, constructors that initialize the private field, and a method that multiplies a user-supplied number by the private field value and returns the result.</span></span>  
  
 <span data-ttu-id="86906-145">Die <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> Feld wird angegeben, wenn die Assembly erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="86906-145">The <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> field is specified when the assembly is created.</span></span> <span data-ttu-id="86906-146">Der Assemblycode wird sofort verwendet werden soll, und die Assembly wird auch gespeichert, damit es mit geprüft werden auf den Datenträger [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) oder in einem anderen Programm verwendet.</span><span class="sxs-lookup"><span data-stu-id="86906-146">The assembly code is used immediately, and the assembly is also saved to disk so that it can be examined with [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) or used in another program.</span></span>  
  
 [!code-cpp[AssemblyBuilderClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilderClass/cpp/24895.cpp#1)]
 [!code-csharp[AssemblyBuilderClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilderClass/cs/24895.cs#1)]
 [!code-vb[AssemblyBuilderClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilderClass/vb/24895.vb#1)]  
  
 <span data-ttu-id="86906-147">**Beispiel 2**</span><span class="sxs-lookup"><span data-stu-id="86906-147">**Example two**</span></span>  
  
 <span data-ttu-id="86906-148">Im folgenden Codebeispiel wird veranschaulicht, wie einen dynamischen Typ zu erstellen, indem Sie mithilfe von `TypeBuilder`.</span><span class="sxs-lookup"><span data-stu-id="86906-148">The following code sample demonstrates how to build a dynamic type by using `TypeBuilder`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDeclarativeSecurity">
      <MemberSignature Language="C#" Value="public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddDeclarativeSecurity(valuetype System.Security.Permissions.SecurityAction action, class System.Security.PermissionSet pset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddDeclarativeSecurity (action As SecurityAction, pset As PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet ^ pset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Security.Permissions.SecurityAction" />
        <Parameter Name="pset" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="86906-149">Die auszuführende Sicherheitsaktion (z. B. Demand, Assert usw.).</span><span class="sxs-lookup"><span data-stu-id="86906-149">The security action to be taken such as Demand, Assert, and so on.</span></span></param>
        <param name="pset"><span data-ttu-id="86906-150">Der Berechtigungssatz, für den die Aktion gilt.</span><span class="sxs-lookup"><span data-stu-id="86906-150">The set of permissions the action applies to.</span></span></param>
        <summary><span data-ttu-id="86906-151">Fügt diesem Typ deklarative Sicherheit hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-151">Adds declarative security to this type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-152">`AddDeclarativeSecurity` kann mehrmals aufgerufen werden mit jedem Aufruf eine Sicherheitsaktion (z. B. Demand, Assert oder DENY-Anweisung) und einen Satz von Berechtigungen, die für die Aktion gelten angeben.</span><span class="sxs-lookup"><span data-stu-id="86906-152">`AddDeclarativeSecurity` may be called several times with each call specifying a security action (such as Demand, Assert, or Deny) and a set of permissions that apply to the action.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-153">In der .NET Framework-Versionen 1.0, 1.1 und 2.0 sind die Attribute für deklarative Sicherheit auf einen Typ angewendet werden, mithilfe dieser Methode in das alte Format der XML-Metadaten gespeichert.</span><span class="sxs-lookup"><span data-stu-id="86906-153">In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a type by using this method are stored in the old XML metadata format.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-154">Das folgende Beispiel veranschaulicht die Verwendung von der `AddDeclarativeSecurity` Methode, um eine sicherheitsforderung für hinzuzufügen <xref:System.Security.Permissions.SecurityPermission> mit der <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> Flag zu einem dynamischen Typ mit dem Namen `MyDynamicClass`, in einer Assembly mit dem Namen EmittedExample.dll.</span><span class="sxs-lookup"><span data-stu-id="86906-154">The following example demonstrates the use of the `AddDeclarativeSecurity` method to add a security demand for <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag to a dynamic type named `MyDynamicClass`, in an assembly named EmittedExample.dll.</span></span> <span data-ttu-id="86906-155">Das Beispiel führt die Konsolenausgabe; Nachdem Sie es ausführen, können Sie [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) EmittedExample.dll untersuchen.</span><span class="sxs-lookup"><span data-stu-id="86906-155">The example produces no console output; after you run it, you can use [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine EmittedExample.dll.</span></span> <span data-ttu-id="86906-156">In `MyDynamicClass`öffnen die `.class public auto ansi` Anweisung, um die deklarative Berechtigung finden Sie unter.</span><span class="sxs-lookup"><span data-stu-id="86906-156">In `MyDynamicClass`, open the `.class public auto ansi` statement to see the declarative permission.</span></span>  
  
 [!code-cpp[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/CPP/typebuilder_adddeclarativesecurity.cpp#1)]
 [!code-csharp[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/CS/typebuilder_adddeclarativesecurity.cs#1)]
 [!code-vb[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/VB/typebuilder_adddeclarativesecurity.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="86906-157">Die <paramref name="action" /> ist ungültig (<see langword="RequestMinimum" />, <see langword="RequestOptional" /> und <see langword="RequestRefuse" /> sind ungültig).</span><span class="sxs-lookup"><span data-stu-id="86906-157">The <paramref name="action" /> is invalid (<see langword="RequestMinimum" />, <see langword="RequestOptional" />, and <see langword="RequestRefuse" /> are invalid).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-158">Der enthaltende Typ wurde mithilfe von <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-158">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="86906-159">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-159">-or-</span></span>  
  
 <span data-ttu-id="86906-160">Der Berechtigungssatz <paramref name="pset" /> enthält eine Aktion, die bereits durch <see langword="AddDeclarativeSecurity" /> hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-160">The permission set <paramref name="pset" /> contains an action that was added earlier by <see langword="AddDeclarativeSecurity" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-161"><paramref name="pset" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-161"><paramref name="pset" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddInterfaceImplementation">
      <MemberSignature Language="C#" Value="public void AddInterfaceImplementation (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddInterfaceImplementation(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddInterfaceImplementation (interfaceType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddInterfaceImplementation(Type ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="86906-162">Die Schnittstelle, die dieser Typ implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-162">The interface that this type implements.</span></span></param>
        <summary><span data-ttu-id="86906-163">Fügt eine Schnittstelle hinzu, die dieser Typ implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-163">Adds an interface that this type implements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="86906-164">Das folgende Codebeispiel veranschaulicht die Implementierung einer Schnittstelle in einer dynamisch erstellten Typ mit `AddInterfaceImplementation`.</span><span class="sxs-lookup"><span data-stu-id="86906-164">The following code sample demonstrates the implementation of an interface on a dynamically created type using `AddInterfaceImplementation`.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#3](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#3)]
 [!code-csharp[TypeBuilder_Sample_4#3](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#3)]
 [!code-vb[TypeBuilder_Sample_4#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-165"><paramref name="interfaceType" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-165"><paramref name="interfaceType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-166">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-166">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-167">Ruft die dynamische Assembly ab, die diese Typdefinition enthält.</span><span class="sxs-lookup"><span data-stu-id="86906-167">Retrieves the dynamic assembly that contains this type definition.</span></span></summary>
        <value><span data-ttu-id="86906-168">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-168">Read-only.</span></span> <span data-ttu-id="86906-169">Ruft die dynamische Assembly ab, die diese Typdefinition enthält.</span><span class="sxs-lookup"><span data-stu-id="86906-169">Retrieves the dynamic assembly that contains this type definition.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public override string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-170">Gibt den vollständigen Name des Typs zurück, der durch den Anzeigenamen der Assembly gekennzeichnet ist.</span><span class="sxs-lookup"><span data-stu-id="86906-170">Returns the full name of this type qualified by the display name of the assembly.</span></span></summary>
        <value><span data-ttu-id="86906-171">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-171">Read-only.</span></span> <span data-ttu-id="86906-172">Der vollständige Name des Typs, der durch den Anzeigenamen der Assembly gekennzeichnet ist.</span><span class="sxs-lookup"><span data-stu-id="86906-172">The full name of this type qualified by the display name of the assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-173">Das Format der zurückgegebenen Zeichenfolge ist die Verkettung von den vollständigen Namen des Typs (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) und den Anzeigenamen der Assembly (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=nameWithType>), getrennt durch ein Komma und ein Leerzeichen.</span><span class="sxs-lookup"><span data-stu-id="86906-173">The format of the returned string is the concatenation of the full name of the type (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) and the display name of the assembly (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=nameWithType>), separated by a comma and a space.</span></span>  
  
 <span data-ttu-id="86906-174">Finden Sie unter <xref:System.Reflection.AssemblyName> eine Beschreibung des Formats des Anzeigenamens einer Assembly.</span><span class="sxs-lookup"><span data-stu-id="86906-174">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="86906-175">Versionsinformationen</span><span class="sxs-lookup"><span data-stu-id="86906-175">Version Information</span></span>  
 <span data-ttu-id="86906-176">In der .NET Framework-Versionen 1.0 und 1.1 enthalten der Wert dieser Eigenschaft nicht die Kultur oder den öffentlichen Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="86906-176">In the .NET Framework versions 1.0 and 1.1, the value of this property does not include the culture or public key.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public override Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ BaseType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-177">Ruft den Basistyp dieses Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-177">Retrieves the base type of this type.</span></span></summary>
        <value><span data-ttu-id="86906-178">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-178">Read-only.</span></span> <span data-ttu-id="86906-179">Ruft den Basistyp dieses Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-179">Retrieves the base type of this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public override bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateType">
      <MemberSignature Language="C#" Value="public Type CreateType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type CreateType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.CreateType" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ CreateType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-180">Erstellt ein <see cref="T:System.Type" />-Objekt für die Klasse.</span><span class="sxs-lookup"><span data-stu-id="86906-180">Creates a <see cref="T:System.Type" /> object for the class.</span></span> <span data-ttu-id="86906-181">Nachdem die Felder und Methoden für die Klasse definiert sind, wird <see langword="CreateType" /> aufgerufen, um das <see langword="Type" />-Objekt der Klasse zu laden.</span><span class="sxs-lookup"><span data-stu-id="86906-181">After defining fields and methods on the class, <see langword="CreateType" /> is called in order to load its <see langword="Type" /> object.</span></span></summary>
        <returns><span data-ttu-id="86906-182">Gibt das neue <see cref="T:System.Type" />-Objekt für diese Klasse zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-182">Returns the new <see cref="T:System.Type" /> object for this class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-183">Wenn dieser Typ ein geschachtelter Typ ist der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode muss für den einschließenden Typ aufgerufen werden, bevor sie auf den geschachtelten Typ aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="86906-183">If this type is a nested type, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method must be called on the enclosing type before it is called on the nested type.</span></span>  
  
 <span data-ttu-id="86906-184">Wenn der aktuelle Typ ein unvollständiger Typ abgeleitet oder unvollständige Schnittstellen implementiert, rufen Sie die <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode für den übergeordneten Typ und die Schnittstellentypen vor dem Aufrufen dieser für den aktuellen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-184">If the current type derives from an incomplete type or implements incomplete interfaces, call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the parent type and the interface types before calling it on the current type.</span></span>  
  
 <span data-ttu-id="86906-185">Wenn der einschließende Typ ein Feld enthält, die ein Werttyp, der als ein geschachtelter Typ (z. B. ein Feld, das eine Enumeration, die als ein geschachtelter Typ definiert ist) definiert ist Aufrufen der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode des einschließenden Typs generiert einen <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> Ereignis.</span><span class="sxs-lookup"><span data-stu-id="86906-185">If the enclosing type contains a field that is a value type defined as a nested type (for example, a field that is an enumeration defined as a nested type), calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the enclosing type will generate a <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="86906-186">Dies ist, da das Ladeprogramm die Größe des einschließenden Typs nicht, bis zum Abschluss des geschachtelten Typs bestimmen kann.</span><span class="sxs-lookup"><span data-stu-id="86906-186">This is because the loader cannot determine the size of the enclosing type until the nested type has been completed.</span></span> <span data-ttu-id="86906-187">Der Aufrufer sollte definieren Sie einen Ereignishandler für das <xref:System.AppDomain.TypeResolve> Ereignis zum Abschließen der Definition des geschachtelten Typs durch den Aufruf <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> auf die <xref:System.Reflection.Emit.TypeBuilder> Objekt, das den geschachtelten Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-187">The caller should define a handler for the <xref:System.AppDomain.TypeResolve> event to complete the definition of the nested type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> on the <xref:System.Reflection.Emit.TypeBuilder> object that represents the nested type.</span></span> <span data-ttu-id="86906-188">Das Codebeispiel in diesem Thema zeigt, wie ein solcher Ereignishandler zu definieren.</span><span class="sxs-lookup"><span data-stu-id="86906-188">The code example for this topic shows how to define such an event handler.</span></span>  
  
 <span data-ttu-id="86906-189">Ein Typ wird nur einmal erstellt, unabhängig davon, wie oft die <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="86906-189">A type is created only once, no matter how many times the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span> <span data-ttu-id="86906-190">Alle Aufruf zurück, die die gleiche <xref:System.Type> Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-190">All calls return the same <xref:System.Type> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-191">Im folgenden Codebeispiel wird veranschaulicht, wie definiert einen Ereignishandler für die <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> -Ereignis für den Aufruf der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> Methode für einen geschachtelten Typ bei einer <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> für den einschließenden Typ aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="86906-191">The following code example shows how to define an event handler for the <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> event, in order to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on a nested type during a <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> call on the enclosing type.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/CPP/nestedenum.cpp#1)]
 [!code-csharp[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/CS/nestedenum.cs#1)]
 [!code-vb[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/VB/nestedenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-192">Der einschließende Typ wurde nicht erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-192">The enclosing type has not been created.</span></span>  
  
 <span data-ttu-id="86906-193">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-193">-or-</span></span>  
  
 <span data-ttu-id="86906-194">Dieser Typ ist nicht abstrakt und enthält eine abstrakte Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-194">This type is non-abstract and contains an abstract method.</span></span>  
  
 <span data-ttu-id="86906-195">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-195">-or-</span></span>  
  
 <span data-ttu-id="86906-196">Dieser Typ ist weder eine abstrakte Klasse noch eine Schnittstelle und hat eine Methode ohne Methodenkörper.</span><span class="sxs-lookup"><span data-stu-id="86906-196">This type is not an abstract class or an interface and has a method without a method body.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-197">Der Typ enthält ungültigen MSIL-Code (Microsoft Intermediate Language).</span><span class="sxs-lookup"><span data-stu-id="86906-197">The type contains invalid Microsoft intermediate language (MSIL) code.</span></span>  
  
 <span data-ttu-id="86906-198">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-198">-or-</span></span>  
  
 <span data-ttu-id="86906-199">Das Verzweigungsziel ist mit einem Offset von 1 Byte angegeben, die Entfernung des Ziels von der Verzweigung ist jedoch größer als 127 Bytes.</span><span class="sxs-lookup"><span data-stu-id="86906-199">The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="86906-200">Der Typ kann nicht geladen werden.</span><span class="sxs-lookup"><span data-stu-id="86906-200">The type cannot be loaded.</span></span> <span data-ttu-id="86906-201">Er enthält beispielsweise eine <see langword="static" />-Methode, die die Aufrufkonvention <see cref="F:System.Reflection.CallingConventions.HasThis" /> hat.</span><span class="sxs-lookup"><span data-stu-id="86906-201">For example, it contains a <see langword="static" /> method that has the calling convention <see cref="F:System.Reflection.CallingConventions.HasThis" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTypeInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeInfo CreateTypeInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.TypeInfo CreateTypeInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTypeInfo () As TypeInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::TypeInfo ^ CreateTypeInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-202">Ruft ein <see cref="T:System.Reflection.TypeInfo" />-Objekt ab, das diesen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-202">Gets a <see cref="T:System.Reflection.TypeInfo" /> object that represents this type.</span></span></summary>
        <returns><span data-ttu-id="86906-203">Ein Objekt, das diesen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-203">An object that represents this type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-204">Ruft die Methode ab, die den aktuellen generischen Typparameter deklariert hat.</span><span class="sxs-lookup"><span data-stu-id="86906-204">Gets the method that declared the current generic type parameter.</span></span></summary>
        <value><span data-ttu-id="86906-205">Eine <see cref="T:System.Reflection.MethodBase" /> zur Darstellung der Methode, die den aktuellen Typ deklariert hat, wenn der aktuelle Typ ein generischer Typparameter ist, andernfalls <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-205">A <see cref="T:System.Reflection.MethodBase" /> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="86906-206">Wenn Code ausgeben, wird durch ein generischen Typparameter dargestellt eine <xref:System.Reflection.Emit.GenericTypeParameterBuilder> Objekt und keine <xref:System.Reflection.Emit.TypeBuilder> Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-206">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-207">Gibt den Typ zurück, der diesen Typ deklariert hat.</span><span class="sxs-lookup"><span data-stu-id="86906-207">Returns the type that declared this type.</span></span></summary>
        <value><span data-ttu-id="86906-208">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-208">Read-only.</span></span> <span data-ttu-id="86906-209">Der Typ, der diesen Typ deklariert hat.</span><span class="sxs-lookup"><span data-stu-id="86906-209">The type that declared this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineConstructor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-210">Fügt dem dynamischen Typ einen neuen Konstruktor hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-210">Adds a new constructor to the dynamic type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineConstructor(valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineConstructor (attributes As MethodAttributes, callingConvention As CallingConventions, parameterTypes As Type()) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineConstructor(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="86906-211">Die Attribute des Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="86906-211">The attributes of the constructor.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86906-212">Die Aufrufkonvention des Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="86906-212">The calling convention of the constructor.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-213">Die Parametertypen des Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="86906-213">The parameter types of the constructor.</span></span></param>
        <summary><span data-ttu-id="86906-214">Fügt dem Typ einen neuen Konstruktor mit den angegebenen Attributen und der Signatur hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-214">Adds a new constructor to the type, with the given attributes and signature.</span></span></summary>
        <returns><span data-ttu-id="86906-215">Der definierte Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="86906-215">The defined constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-216">Wenn Sie keinen Konstruktor für den dynamischen Typ definieren, ein Standardkonstruktor wird automatisch bereitgestellt, und er ruft den Standardkonstruktor der Basisklasse.</span><span class="sxs-lookup"><span data-stu-id="86906-216">If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.</span></span>  
  
 <span data-ttu-id="86906-217">Wenn Sie einen Konstruktor für den dynamischen Typ definieren, wird ein Standardkonstruktor nicht bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="86906-217">If you define a constructor for your dynamic type, a default constructor is not provided.</span></span> <span data-ttu-id="86906-218">Sie haben die folgenden Optionen für die Bereitstellung eines Standardkonstruktors zusätzlich zu den Konstruktor aus, den Sie definiert:</span><span class="sxs-lookup"><span data-stu-id="86906-218">You have the following options for providing a default constructor in addition to the constructor you defined:</span></span>  
  
-   <span data-ttu-id="86906-219">Wenn Sie einen Standardkonstruktor möchten, der einfach den Standardkonstruktor der Basisklasse aufruft, können Sie die <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A> Methode zum Erstellen einer (und optional Beschränken des Zugriffs auf diese).</span><span class="sxs-lookup"><span data-stu-id="86906-219">If you want a default constructor that simply calls the default constructor of the base class, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A> method to create one (and optionally restrict access to it).</span></span> <span data-ttu-id="86906-220">Stellen Sie eine Implementierung für diesen Standardkonstruktor nicht.</span><span class="sxs-lookup"><span data-stu-id="86906-220">Do not provide an implementation for this default constructor.</span></span> <span data-ttu-id="86906-221">Wenn Sie dies tun, wird eine Ausnahme ausgelöst, wenn Sie versuchen, den Konstruktor zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="86906-221">If you do, an exception is thrown when you try to use the constructor.</span></span> <span data-ttu-id="86906-222">Es werden keine Ausnahmen ausgelöst, wenn die <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="86906-222">No exception is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span>  
  
-   <span data-ttu-id="86906-223">Wenn Sie möchten einen Standardkonstruktor, der nicht mehr als einfach den Standardkonstruktor der Basisklasse aufrufen, oder einen anderen Konstruktor aufruft, etwas anderes die Basisklasse oder, die vollständig ist, müssen Sie die <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=nameWithType> Methode, erstellen und eine eigene Implementierung bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="86906-223">If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=nameWithType> method to create one, and provide your own implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-224">Das folgende Codebeispiel veranschaulicht die Verwendung von `DefineConstructor` bestimmten Signatur und ihrer Attribute des Konstruktors für einen dynamischen Typ festgelegt und Zurückgeben eines entsprechenden <xref:System.Reflection.Emit.ConstructorBuilder> für MSIL Auffüllung.</span><span class="sxs-lookup"><span data-stu-id="86906-224">The following code sample demonstrates the use of `DefineConstructor` to set a constructor's particular signature and attributes on a dynamic type and return a corresponding <xref:System.Reflection.Emit.ConstructorBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#2)]
 [!code-csharp[TypeBuilder_Sample_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#2)]
 [!code-vb[TypeBuilder_Sample_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-225">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-225">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineConstructor(valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type[] parameterTypes, class System.Type[][] requiredCustomModifiers, class System.Type[][] optionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineConstructor (attributes As MethodAttributes, callingConvention As CallingConventions, parameterTypes As Type(), requiredCustomModifiers As Type()(), optionalCustomModifiers As Type()()) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineConstructor(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ requiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ optionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="requiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="optionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="86906-226">Die Attribute des Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="86906-226">The attributes of the constructor.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86906-227">Die Aufrufkonvention des Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="86906-227">The calling convention of the constructor.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-228">Die Parametertypen des Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="86906-228">The parameter types of the constructor.</span></span></param>
        <param name="requiredCustomModifiers"><span data-ttu-id="86906-229">Ein Array mit Arrays von Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-229">An array of arrays of types.</span></span> <span data-ttu-id="86906-230">Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="86906-230">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="86906-231">Wenn ein bestimmter Parameter keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an.</span><span class="sxs-lookup"><span data-stu-id="86906-231">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="86906-232">Wenn keiner der Parameter erforderliche benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</span><span class="sxs-lookup"><span data-stu-id="86906-232">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="optionalCustomModifiers"><span data-ttu-id="86906-233">Ein Array mit Arrays von Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-233">An array of arrays of types.</span></span> <span data-ttu-id="86906-234">Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="86906-234">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="86906-235">Wenn ein bestimmter Parameter keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an.</span><span class="sxs-lookup"><span data-stu-id="86906-235">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="86906-236">Wenn keiner der Parameter optionale benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</span><span class="sxs-lookup"><span data-stu-id="86906-236">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="86906-237">Fügt dem Typ einen neuen Konstruktor mit den angegebenen Attributen, der angegebenen Signatur und den angegebenen benutzerdefinierten Modifizierern hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-237">Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="86906-238">Der definierte Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="86906-238">The defined constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-239">Diese Überladung wird für Designer von verwalteten Compilern bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="86906-239">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-240">Weitere Informationen zu benutzerdefinierten Modifizierer finden Sie in der ECMA Partition II-Metadaten-Dokumentation.</span><span class="sxs-lookup"><span data-stu-id="86906-240">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="86906-241">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](http://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](http://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="86906-241">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-242">Die Größe von <paramref name="requiredCustomModifiers" /> oder <paramref name="optionalCustomModifiers" /> entspricht nicht die Größe von <paramref name="parameterTypes" />.</span><span class="sxs-lookup"><span data-stu-id="86906-242">The size of <paramref name="requiredCustomModifiers" /> or <paramref name="optionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-243">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-243">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="86906-244">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-244">-or-</span></span>  
  
 <span data-ttu-id="86906-245">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-245">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDefaultConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor (System.Reflection.MethodAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor(valuetype System.Reflection.MethodAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDefaultConstructor (attributes As MethodAttributes) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineDefaultConstructor(System::Reflection::MethodAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="86906-246">Ein <see langword="MethodAttributes" />-Objekt, das die auf den Konstruktor anzuwendenden Attribute darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-246">A <see langword="MethodAttributes" /> object representing the attributes to be applied to the constructor.</span></span></param>
        <summary><span data-ttu-id="86906-247">Definiert den Standardkonstruktor.</span><span class="sxs-lookup"><span data-stu-id="86906-247">Defines the default constructor.</span></span> <span data-ttu-id="86906-248">Der hier definierte Konstruktor ruft einfach den Standardkonstruktor des übergeordneten Elements auf.</span><span class="sxs-lookup"><span data-stu-id="86906-248">The constructor defined here will simply call the default constructor of the parent.</span></span></summary>
        <returns><span data-ttu-id="86906-249">Gibt den Konstruktor zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-249">Returns the constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-250">Da der Standardkonstruktor automatisch definiert wird, ist es notwendig, diese Methode nur in den folgenden Situationen:</span><span class="sxs-lookup"><span data-stu-id="86906-250">Because the default constructor is automatically defined, it is necessary to call this method only in the following situations:</span></span>  
  
-   <span data-ttu-id="86906-251">Sie haben einen anderen Konstruktor definiert, und möchten auch einen Standardkonstruktor, der einfach den Basisklassenkonstruktor aufruft.</span><span class="sxs-lookup"><span data-stu-id="86906-251">You have defined another constructor and you also want a default constructor that simply calls the base class constructor.</span></span>  
  
-   <span data-ttu-id="86906-252">Anders als die Attribute des Standardkonstruktors auf einen anderen Wert festlegen möchten <xref:System.Reflection.MethodAttributes.PrivateScope>, <xref:System.Reflection.MethodAttributes.Public>, <xref:System.Reflection.MethodAttributes.HideBySig>, <xref:System.Reflection.MethodAttributes.SpecialName>, und <xref:System.Reflection.MethodAttributes.RTSpecialName>.</span><span class="sxs-lookup"><span data-stu-id="86906-252">You want to set the attributes on the default constructor to something other than <xref:System.Reflection.MethodAttributes.PrivateScope>, <xref:System.Reflection.MethodAttributes.Public>, <xref:System.Reflection.MethodAttributes.HideBySig>, <xref:System.Reflection.MethodAttributes.SpecialName>, and <xref:System.Reflection.MethodAttributes.RTSpecialName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-253">Das folgende Codebeispiel veranschaulicht die Verwendung von `DefineConstructor` bestimmten Signatur und ihrer Attribute des Konstruktors für einen dynamischen Typ festgelegt und Zurückgeben eines entsprechenden <xref:System.Reflection.Emit.ConstructorBuilder> für MSIL Auffüllung.</span><span class="sxs-lookup"><span data-stu-id="86906-253">The following code sample demonstrates the use of `DefineConstructor` to set a constructor's particular signature and attributes on a dynamic type and return a corresponding <xref:System.Reflection.Emit.ConstructorBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#2)]
 [!code-csharp[TypeBuilder_Sample_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#2)]
 [!code-vb[TypeBuilder_Sample_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-254">Der übergeordnete Typ (Basistyp) weist keinen Standardkonstruktor auf.</span><span class="sxs-lookup"><span data-stu-id="86906-254">The parent type (base type) does not have a default constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-255">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-255">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="86906-256">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-256">-or-</span></span>  
  
 <span data-ttu-id="86906-257">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-257">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.EventBuilder DefineEvent (string name, System.Reflection.EventAttributes attributes, Type eventtype);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.EventBuilder DefineEvent(string name, valuetype System.Reflection.EventAttributes attributes, class System.Type eventtype) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineEvent (name As String, attributes As EventAttributes, eventtype As Type) As EventBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::EventBuilder ^ DefineEvent(System::String ^ name, System::Reflection::EventAttributes attributes, Type ^ eventtype);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.EventBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.EventAttributes" />
        <Parameter Name="eventtype" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-258">Der Name des Ereignisses.</span><span class="sxs-lookup"><span data-stu-id="86906-258">The name of the event.</span></span> <span data-ttu-id="86906-259"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-259"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-260">Die Attribute des Ereignisses.</span><span class="sxs-lookup"><span data-stu-id="86906-260">The attributes of the event.</span></span></param>
        <param name="eventtype"><span data-ttu-id="86906-261">Der Typ des Ereignisses.</span><span class="sxs-lookup"><span data-stu-id="86906-261">The type of the event.</span></span></param>
        <summary><span data-ttu-id="86906-262">Fügt dem Typ ein neues Ereignis hinzu, das den angegebenen Namen, die angegebenen Attribute und den angegebenen Ereignistyp hat.</span><span class="sxs-lookup"><span data-stu-id="86906-262">Adds a new event to the type, with the given name, attributes and event type.</span></span></summary>
        <returns><span data-ttu-id="86906-263">Das definierte Ereignis.</span><span class="sxs-lookup"><span data-stu-id="86906-263">The defined event.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-264">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-264">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-265"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-265"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86906-266">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-266">-or-</span></span>  
  
 <span data-ttu-id="86906-267"><paramref name="eventtype" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-267"><paramref name="eventtype" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-268">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-268">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineField">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-269">Fügt ein neues Feld zum dynamischen Typ hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-269">Adds a new field to the dynamic type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineField">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineField(string fieldName, class System.Type type, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineField(System::String ^ fieldName, Type ^ type, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="fieldName"><span data-ttu-id="86906-270">Der Name des Felds.</span><span class="sxs-lookup"><span data-stu-id="86906-270">The name of the field.</span></span> <span data-ttu-id="86906-271"><c>fieldName</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-271"><c>fieldName</c> cannot contain embedded nulls.</span></span></param>
        <param name="type"><span data-ttu-id="86906-272">Der Typ des Felds.</span><span class="sxs-lookup"><span data-stu-id="86906-272">The type of the field</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-273">Die Attribute des Felds.</span><span class="sxs-lookup"><span data-stu-id="86906-273">The attributes of the field.</span></span></param>
        <summary><span data-ttu-id="86906-274">Fügt ein neues Feld mit dem angegebenen Namen, den angegebenen Attribute und dem angegebenen Feldtyp zum Typ hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-274">Adds a new field to the type, with the given name, attributes, and field type.</span></span></summary>
        <returns><span data-ttu-id="86906-275">Das definierte Feld.</span><span class="sxs-lookup"><span data-stu-id="86906-275">The defined field.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-276">Die Länge von <paramref name="fieldName" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-276">The length of <paramref name="fieldName" /> is zero.</span></span>  
  
 <span data-ttu-id="86906-277">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-277">-or-</span></span>  
  
 <span data-ttu-id="86906-278"><paramref name="type" /> ist „System.Void“.</span><span class="sxs-lookup"><span data-stu-id="86906-278"><paramref name="type" /> is System.Void.</span></span>  
  
 <span data-ttu-id="86906-279">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-279">-or-</span></span>  
  
 <span data-ttu-id="86906-280">Für die übergeordnete Klasse dieses Felds wurde eine Gesamtgröße angegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-280">A total size was specified for the parent class of this field.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-281"><paramref name="fieldName" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-281"><paramref name="fieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-282">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-282">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineField">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineField(string fieldName, class System.Type type, class System.Type[] requiredCustomModifiers, class System.Type[] optionalCustomModifiers, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineField(System::String ^ fieldName, Type ^ type, cli::array &lt;Type ^&gt; ^ requiredCustomModifiers, cli::array &lt;Type ^&gt; ^ optionalCustomModifiers, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="requiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="optionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="fieldName"><span data-ttu-id="86906-283">Der Name des Felds.</span><span class="sxs-lookup"><span data-stu-id="86906-283">The name of the field.</span></span> <span data-ttu-id="86906-284"><c>fieldName</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-284"><c>fieldName</c> cannot contain embedded nulls.</span></span></param>
        <param name="type"><span data-ttu-id="86906-285">Der Typ des Felds.</span><span class="sxs-lookup"><span data-stu-id="86906-285">The type of the field</span></span></param>
        <param name="requiredCustomModifiers"><span data-ttu-id="86906-286">Gibt ein Array von Typen zurück, das die erforderlichen benutzerdefinierten Modifizierer für das Feld darstellt, z. B. <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span><span class="sxs-lookup"><span data-stu-id="86906-286">An array of types representing the required custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span></span></param>
        <param name="optionalCustomModifiers"><span data-ttu-id="86906-287">Gibt ein Array von Typen zurück, das die optionalen benutzerdefinierten Modifizierer für das Feld darstellt, z. B. <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span><span class="sxs-lookup"><span data-stu-id="86906-287">An array of types representing the optional custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-288">Die Attribute des Felds.</span><span class="sxs-lookup"><span data-stu-id="86906-288">The attributes of the field.</span></span></param>
        <summary><span data-ttu-id="86906-289">Fügt ein neues Feld mit dem angegebenen Namen, den Attributen, dem Feldtyp und den benutzerdefinierten Modifizierern zum Typ hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-289">Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="86906-290">Das definierte Feld.</span><span class="sxs-lookup"><span data-stu-id="86906-290">The defined field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-291">Diese Überladung wird für Designer von verwalteten Compilern bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="86906-291">This overload is provided for designers of managed compilers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-292">Die Länge von <paramref name="fieldName" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-292">The length of <paramref name="fieldName" /> is zero.</span></span>  
  
 <span data-ttu-id="86906-293">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-293">-or-</span></span>  
  
 <span data-ttu-id="86906-294"><paramref name="type" /> ist „System.Void“.</span><span class="sxs-lookup"><span data-stu-id="86906-294"><paramref name="type" /> is System.Void.</span></span>  
  
 <span data-ttu-id="86906-295">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-295">-or-</span></span>  
  
 <span data-ttu-id="86906-296">Für die übergeordnete Klasse dieses Felds wurde eine Gesamtgröße angegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-296">A total size was specified for the parent class of this field.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-297"><paramref name="fieldName" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-297"><paramref name="fieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-298">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-298">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineGenericParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (params string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(string[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineGenericParameters (ParamArray names As String()) As GenericTypeParameterBuilder()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::Emit::GenericTypeParameterBuilder ^&gt; ^ DefineGenericParameters(... cli::array &lt;System::String ^&gt; ^ names);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.GenericTypeParameterBuilder[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names"><span data-ttu-id="86906-299">Ein Array von Namen für die generischen Typparameter.</span><span class="sxs-lookup"><span data-stu-id="86906-299">An array of names for the generic type parameters.</span></span></param>
        <summary><span data-ttu-id="86906-300">Definiert die generischen Typparameter für den aktuellen Typ, gibt dabei deren Zahl und deren Namen an und gibt ein Array von <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />-Objekten zurück, das dazu verwendet werden kann, deren Einschränkungen festzulegen.</span><span class="sxs-lookup"><span data-stu-id="86906-300">Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to set their constraints.</span></span></summary>
        <returns><span data-ttu-id="86906-301">Ein Array von <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />-Objekten, das dazu verwendet werden kann, die Einschränkungen der generischen Typparameter für den aktuellen Typ zu definieren.</span><span class="sxs-lookup"><span data-stu-id="86906-301">An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to define the constraints of the generic type parameters for the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-302">Beim Aufrufen dieser Methode wird der aktuelle Typ einen generischen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-302">Calling this method makes the current type a generic type.</span></span> <span data-ttu-id="86906-303">Wenn die Methode erneut auf den gleichen Typ aufgerufen wird eine <xref:System.InvalidOperationException> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="86906-303">If the method is called again on the same type, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-304">Im folgenden Codebeispiel wird ein generischer Typ mit zwei Typparametern erstellt und speichert sie in der Assembly GenericEmitExample1.dll gespeichert werden.</span><span class="sxs-lookup"><span data-stu-id="86906-304">The following code example creates a generic type with two type parameters and saves them in the assembly GenericEmitExample1.dll.</span></span> <span data-ttu-id="86906-305">Sie können die [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) So zeigen Sie die generierten Typen an.</span><span class="sxs-lookup"><span data-stu-id="86906-305">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types.</span></span> <span data-ttu-id="86906-306">Eine ausführlichere Erläuterung der Schritte sind für einen dynamischen generischen Typ definieren, finden Sie unter [wie: Definieren eines generischen Typs mit Reflektionsausgabe](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="86906-306">For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]
 [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]
 [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-307">Es wurden bereits generische Typparameter für diesen Typ definiert.</span><span class="sxs-lookup"><span data-stu-id="86906-307">Generic type parameters have already been defined for this type.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-308"><paramref name="names" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-308"><paramref name="names" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86906-309">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-309">-or-</span></span>  
  
 <span data-ttu-id="86906-310">Ein Element von <paramref name="names" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-310">An element of <paramref name="names" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86906-311"><paramref name="names" /> ist ein leeres Array.</span><span class="sxs-lookup"><span data-stu-id="86906-311"><paramref name="names" /> is an empty array.</span></span></exception>
        <altmember cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="DefineInitializedData">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineInitializedData (string name, byte[] data, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineInitializedData(string name, unsigned int8[] data, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineInitializedData (name As String, data As Byte(), attributes As FieldAttributes) As FieldBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineInitializedData(System::String ^ name, cli::array &lt;System::Byte&gt; ^ data, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-312">Der Name, der zum Verweisen auf die Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="86906-312">The name used to refer to the data.</span></span> <span data-ttu-id="86906-313"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-313"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="data"><span data-ttu-id="86906-314">Das Daten-BLOB.</span><span class="sxs-lookup"><span data-stu-id="86906-314">The blob of data.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-315">Die Attribute für das Feld.</span><span class="sxs-lookup"><span data-stu-id="86906-315">The attributes for the field.</span></span></param>
        <summary><span data-ttu-id="86906-316">Definiert das initialisierte Datenfeld im ".sdata"-Abschnitt der portierbaren ausführbaren Datei (Portable Executable, PE).</span><span class="sxs-lookup"><span data-stu-id="86906-316">Defines initialized data field in the .sdata section of the portable executable (PE) file.</span></span></summary>
        <returns><span data-ttu-id="86906-317">Ein Feld zum Verweisen auf die Daten.</span><span class="sxs-lookup"><span data-stu-id="86906-317">A field to reference the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-318">Das Feld, das Sie mit dieser Methode erstellen, werden `static`, selbst wenn Sie nicht einschließen, `FieldAttributes.Static` in der `attributes` Parameter.</span><span class="sxs-lookup"><span data-stu-id="86906-318">The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-319">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-319">Length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="86906-320">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-320">-or-</span></span>  
  
 <span data-ttu-id="86906-321">Die Größe der Daten ist kleiner oder gleich 0 (null) bzw. größer oder gleich 0x3f0000.</span><span class="sxs-lookup"><span data-stu-id="86906-321">The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-322"><paramref name="name" /> oder <paramref name="data" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-322"><paramref name="name" /> or <paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="86906-323"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde bereits zuvor aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="86906-323"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been previously called.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-324">Fügt dem Typ eine Methode hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-324">Adds a method to the type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-325">Der Name der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-325">The name of the method.</span></span> <span data-ttu-id="86906-326"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-326"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-327">Die Attribute der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-327">The attributes of the method.</span></span></param>
        <summary><span data-ttu-id="86906-328">Fügt eine neue Methode zum Typ mit dem angegebenen Namen und den Methodenattributen hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-328">Adds a new method to the type, with the specified name and method attributes.</span></span></summary>
        <returns><span data-ttu-id="86906-329">Ein <see cref="T:System.Reflection.Emit.MethodBuilder" />, der die neu definierte Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-329">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-330">Verwenden Sie diese methodenüberladung, wenn Sie nicht die Signatur der Methode zum Zeitpunkt kennen Sie die Methode definieren.</span><span class="sxs-lookup"><span data-stu-id="86906-330">Use this method overload when you do not know the method signature at the time you define the method.</span></span> <span data-ttu-id="86906-331">Beispielsweise könnte die Parametertypen und den Rückgabetyp einer generischen Methode durch generische Typparameter der Methode, die angegeben werden definiert werden muss, nachdem der Typ die Methode hinzugefügt wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-331">For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type.</span></span> <span data-ttu-id="86906-332">Die Parameter und Rückgabetyp der Methode festgelegt werden können später mithilfe der <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-332">The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="86906-333">Diese methodenüberladung definiert eine Methode mit <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="86906-333">This method overload defines a method with <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span> <span data-ttu-id="86906-334">Wenn Sie eine Methode ohne eine Signatur, mit einer anderen Aufrufkonvention definieren verwenden die <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> -methodenüberladung.</span><span class="sxs-lookup"><span data-stu-id="86906-334">If you need to define a method without a signature, with a different calling convention, use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-335">Das folgende Codebeispiel definiert eine generische Methode mit dem Namen `DemoMethod` , dessen Parametertyp und den Rückgabetyp von ihren generischen Typparametern angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="86906-335">The following code example defines a generic method named `DemoMethod` whose parameter type and return type are specified by its generic type parameters.</span></span> <span data-ttu-id="86906-336">Die Methode definiert ist ohne eine Signatur, die herkömmliche Aufrufkonventionen verwenden.</span><span class="sxs-lookup"><span data-stu-id="86906-336">The method is defined without a signature, using the standard calling convention.</span></span> <span data-ttu-id="86906-337">Die <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> Methode wird verwendet, damit `DemoMethod` einer generischen Methode und die neu definierte Typparameter werden für die Signatur verwendet und Rückgabetyp.</span><span class="sxs-lookup"><span data-stu-id="86906-337">The <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method is used to make `DemoMethod` a generic method, and the newly defined type parameters are then used for the signature and return type.</span></span>  
  
 <span data-ttu-id="86906-338">Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-338">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#4](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#4)]
 [!code-csharp[GenericMethodBuilder#4](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#4)]
 [!code-vb[GenericMethodBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#4)]  
[!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]
[!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]
[!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  
[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]
[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]
[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-339">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-339">The length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="86906-340">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-340">-or-</span></span>  
  
 <span data-ttu-id="86906-341">Der Typ des übergeordneten Elements dieser Methode ist eine Schnittstelle, und diese Methode ist nicht virtuell (<see langword="Overridable" /> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="86906-341">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-342"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-342"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-343">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-343">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="86906-344">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-344">-or-</span></span>  
  
 <span data-ttu-id="86906-345">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-345">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-346">Der Name der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-346">The name of the method.</span></span> <span data-ttu-id="86906-347"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-347"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-348">Die Attribute der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-348">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86906-349">Die Aufrufkonvention der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-349">The calling convention of the method.</span></span></param>
        <summary><span data-ttu-id="86906-350">Fügt eine neue Methode zum Typ mit dem angegebenen Namen, den Methodenattributen und der Aufrufkonvention hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-350">Adds a new method to the type, with the specified name, method attributes, and calling convention.</span></span></summary>
        <returns><span data-ttu-id="86906-351">Ein <see cref="T:System.Reflection.Emit.MethodBuilder" />, der die neu definierte Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-351">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-352">Verwenden Sie diese methodenüberladung, wenn Sie nicht die Signatur der Methode zum Zeitpunkt kennen Sie die Methode definieren.</span><span class="sxs-lookup"><span data-stu-id="86906-352">Use this method overload when you do not know the method signature at the time you define the method.</span></span> <span data-ttu-id="86906-353">Beispielsweise könnte die Parametertypen und den Rückgabetyp einer generischen Methode durch generische Typparameter der Methode, die angegeben werden definiert werden muss, nachdem der Typ die Methode hinzugefügt wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-353">For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type.</span></span> <span data-ttu-id="86906-354">Die Parameter und Rückgabetyp der Methode festgelegt werden können später mithilfe der <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-354">The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-355">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-355">The length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="86906-356">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-356">-or-</span></span>  
  
 <span data-ttu-id="86906-357">Der Typ des übergeordneten Elements dieser Methode ist eine Schnittstelle, und diese Methode ist nicht virtuell (<see langword="Overridable" /> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="86906-357">The type of the parent of this method is an interface and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-358"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-358"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-359">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-359">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="86906-360">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-360">-or-</span></span>  
  
 <span data-ttu-id="86906-361">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-361">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, returnType As Type, parameterTypes As Type()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-362">Der Name der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-362">The name of the method.</span></span> <span data-ttu-id="86906-363"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-363"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-364">Die Attribute der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-364">The attributes of the method.</span></span></param>
        <param name="returnType"><span data-ttu-id="86906-365">Der Rückgabetyp der Methode</span><span class="sxs-lookup"><span data-stu-id="86906-365">The return type of the method.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-366">Die Typen der Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-366">The types of the parameters of the method.</span></span></param>
        <summary><span data-ttu-id="86906-367">Fügt eine neue Methode zum Typ mit dem angegebenen Namen, den Methodenattributen und der Methodensignatur hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-367">Adds a new method to the type, with the specified name, method attributes, and method signature.</span></span></summary>
        <returns><span data-ttu-id="86906-368">Die definierte Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-368">The defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="86906-369">Das folgende Codebeispiel veranschaulicht die Verwendung von `DefineMethod` bestimmten Signatur und ihrer Attribute des Konstruktors für einen dynamischen Typ festlegen und zum Zurückgeben eines entsprechenden <xref:System.Reflection.Emit.MethodBuilder> für MSIL Auffüllung.</span><span class="sxs-lookup"><span data-stu-id="86906-369">The following code sample demonstrates the use of `DefineMethod` to set a constructor's particular signature and attributes on a dynamic type and to return a corresponding <xref:System.Reflection.Emit.MethodBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CPP/typebuilder_definenestedtype1.cpp#2)]
 [!code-csharp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CS/typebuilder_definenestedtype1.cs#2)]
 [!code-vb[TypeBuilder_DefineNestedType1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/VB/typebuilder_definenestedtype1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-370">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-370">The length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="86906-371">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-371">-or-</span></span>  
  
 <span data-ttu-id="86906-372">Der Typ des übergeordneten Elements dieser Methode ist eine Schnittstelle, und diese Methode ist nicht virtuell (<see langword="Overridable" /> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="86906-372">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-373"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-373"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-374">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-374">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="86906-375">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-375">-or-</span></span>  
  
 <span data-ttu-id="86906-376">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-376">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-377">Der Name der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-377">The name of the method.</span></span> <span data-ttu-id="86906-378"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-378"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-379">Die Attribute der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-379">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86906-380">Die Aufrufkonvention der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-380">The calling convention of the method.</span></span></param>
        <param name="returnType"><span data-ttu-id="86906-381">Der Rückgabetyp der Methode</span><span class="sxs-lookup"><span data-stu-id="86906-381">The return type of the method.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-382">Die Typen der Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-382">The types of the parameters of the method.</span></span></param>
        <summary><span data-ttu-id="86906-383">Fügt eine neue Methode zum Typ mit dem angegebenen Namen, den Methodenattributen, der Aufrufkonvention und der Methodensignatur hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-383">Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.</span></span></summary>
        <returns><span data-ttu-id="86906-384">Ein <see cref="T:System.Reflection.Emit.MethodBuilder" />, der die neu definierte Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-384">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="86906-385">Das folgende Codebeispiel veranschaulicht die Verwendung von `DefineMethod` bestimmten Signatur und ihrer Attribute des Konstruktors für einen dynamischen Typ festlegen und zum Zurückgeben eines entsprechenden <xref:System.Reflection.Emit.MethodBuilder> für MSIL Auffüllung.</span><span class="sxs-lookup"><span data-stu-id="86906-385">The following code sample demonstrates the use of `DefineMethod` to set a constructor's particular signature and attributes on a dynamic type and to return a corresponding <xref:System.Reflection.Emit.MethodBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CPP/typebuilder_definenestedtype1.cpp#2)]
 [!code-csharp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CS/typebuilder_definenestedtype1.cs#2)]
 [!code-vb[TypeBuilder_DefineNestedType1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/VB/typebuilder_definenestedtype1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-386">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-386">The length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="86906-387">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-387">-or-</span></span>  
  
 <span data-ttu-id="86906-388">Der Typ des übergeordneten Elements dieser Methode ist eine Schnittstelle, und diese Methode ist nicht virtuell (<see langword="Overridable" /> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="86906-388">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-389"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-389"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-390">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-390">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="86906-391">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-391">-or-</span></span>  
  
 <span data-ttu-id="86906-392">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-392">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-393">Der Name der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-393">The name of the method.</span></span> <span data-ttu-id="86906-394"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-394"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-395">Die Attribute der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-395">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86906-396">Die Aufrufkonvention der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-396">The calling convention of the method.</span></span></param>
        <param name="returnType"><span data-ttu-id="86906-397">Der Rückgabetyp der Methode</span><span class="sxs-lookup"><span data-stu-id="86906-397">The return type of the method.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="86906-398">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Methode darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-398">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="86906-399">Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</span><span class="sxs-lookup"><span data-stu-id="86906-399">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="86906-400">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Methode darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-400">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="86906-401">Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</span><span class="sxs-lookup"><span data-stu-id="86906-401">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-402">Die Typen der Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-402">The types of the parameters of the method.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="86906-403">Ein Array mit Arrays von Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-403">An array of arrays of types.</span></span> <span data-ttu-id="86906-404">Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="86906-404">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="86906-405">Wenn ein bestimmter Parameter keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an.</span><span class="sxs-lookup"><span data-stu-id="86906-405">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="86906-406">Wenn keiner der Parameter erforderliche benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</span><span class="sxs-lookup"><span data-stu-id="86906-406">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="86906-407">Ein Array mit Arrays von Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-407">An array of arrays of types.</span></span> <span data-ttu-id="86906-408">Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="86906-408">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="86906-409">Wenn ein bestimmter Parameter keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an.</span><span class="sxs-lookup"><span data-stu-id="86906-409">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="86906-410">Wenn keiner der Parameter optionale benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</span><span class="sxs-lookup"><span data-stu-id="86906-410">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="86906-411">Fügt eine neue Methode zum Typ mit dem angegebenen Namen, den Methodenattributen, der Aufrufkonvention, der Methodensignatur und den benutzerdefinierten Modifizierern hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-411">Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="86906-412">Ein <see cref="T:System.Reflection.Emit.MethodBuilder" />-Objekt, das die neu hinzugefügte Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-412">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> object representing the newly added method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-413">Verwenden Sie diese Überladung, wenn Sie benutzerdefinierte Modifizierer angeben müssen.</span><span class="sxs-lookup"><span data-stu-id="86906-413">Use this overload if you need to specify custom modifiers.</span></span> <span data-ttu-id="86906-414">Wenn Sie benutzerdefinierten Modifizierer, nachdem die Methode erstellt wurde, wie angeben müssen, z. B. mit einer generischen Methode, deren Parametertypen, indem die generischen Typparameter angegeben werden, Sie können die <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29> oder <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> -methodenüberladungen, um zu definieren die Methode und anschließend mithilfe der <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> -Methode definieren Sie den Parameter und zurückgeben Typen mit benutzerdefinierten Modifizierer hat.</span><span class="sxs-lookup"><span data-stu-id="86906-414">If you need to specify custom modifiers after the method has been created, as you would, for example, with a generic method whose parameter types are specified by its generic type parameters, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29> or <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overloads to define the method and then use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method to define the parameter and return types with custom modifiers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-415">Weitere Informationen zu benutzerdefinierten Modifizierer finden Sie in der ECMA Partition II-Metadaten-Dokumentation.</span><span class="sxs-lookup"><span data-stu-id="86906-415">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="86906-416">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](http://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](http://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="86906-416">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-417">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-417">The length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="86906-418">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-418">-or-</span></span>  
  
 <span data-ttu-id="86906-419">Der Typ des übergeordneten Elements dieser Methode ist eine Schnittstelle, und diese Methode ist nicht virtuell (<see langword="Overridable" /> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="86906-419">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span>  
  
 <span data-ttu-id="86906-420">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-420">-or-</span></span>  
  
 <span data-ttu-id="86906-421">Die Größe von <paramref name="parameterTypeRequiredCustomModifiers" /> oder <paramref name="parameterTypeOptionalCustomModifiers" /> entspricht nicht der Größe von <paramref name="parameterTypes" />.</span><span class="sxs-lookup"><span data-stu-id="86906-421">The size of <paramref name="parameterTypeRequiredCustomModifiers" /> or <paramref name="parameterTypeOptionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-422"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-422"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-423">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-423">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="86906-424">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-424">-or-</span></span>  
  
 <span data-ttu-id="86906-425">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-425">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethodOverride">
      <MemberSignature Language="C#" Value="public void DefineMethodOverride (System.Reflection.MethodInfo methodInfoBody, System.Reflection.MethodInfo methodInfoDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineMethodOverride(class System.Reflection.MethodInfo methodInfoBody, class System.Reflection.MethodInfo methodInfoDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineMethodOverride (methodInfoBody As MethodInfo, methodInfoDeclaration As MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineMethodOverride(System::Reflection::MethodInfo ^ methodInfoBody, System::Reflection::MethodInfo ^ methodInfoDeclaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfoBody" Type="System.Reflection.MethodInfo" />
        <Parameter Name="methodInfoDeclaration" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfoBody"><span data-ttu-id="86906-426">Der zu verwendende Methodentext.</span><span class="sxs-lookup"><span data-stu-id="86906-426">The method body to be used.</span></span> <span data-ttu-id="86906-427">Dies sollte ein <see langword="MethodBuilder" />-Objekt sein.</span><span class="sxs-lookup"><span data-stu-id="86906-427">This should be a <see langword="MethodBuilder" /> object.</span></span></param>
        <param name="methodInfoDeclaration"><span data-ttu-id="86906-428">Die Methode, deren Deklaration verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-428">The method whose declaration is to be used.</span></span></param>
        <summary><span data-ttu-id="86906-429">Gibt einen bestimmten Methodentext an, der eine bestimmte Methodendeklaration, möglicherweise mit einem anderen Namen, implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-429">Specifies a given method body that implements a given method declaration, potentially with a different name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-430">Verwenden Sie diese Methode nicht zum Ausgeben von methodenüberschreibungen oder schnittstellenimplementierungen.</span><span class="sxs-lookup"><span data-stu-id="86906-430">Do not use this method to emit method overrides or interface implementations.</span></span> <span data-ttu-id="86906-431">Um eine Methode einer Basisklasse zu überschreiben oder eine Methode einer Schnittstelle zu implementieren, geben Sie eine Methode mit demselben Namen und derselben Signatur einfach als die Methode, die außer Kraft gesetzt werden, oder implementieren fest, wie im Codebeispiel wird veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="86906-431">To override a method of a base class or to implement a method of an interface, simply emit a method with the same name and signature as the method to be overridden or implemented, as demonstrated in the code example.</span></span>  
  
 <span data-ttu-id="86906-432">Die <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> Methode wird verwendet, wenn ein Methodentext und eine Methodendeklaration unterschiedliche Namen aufweisen.</span><span class="sxs-lookup"><span data-stu-id="86906-432">The <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is used when a method body and a method declaration have different names.</span></span> <span data-ttu-id="86906-433">Beispielsweise kann eine Klasse eine Methode der Basisklasse überschreiben und auch bieten eine separate Implementierung für einen Schnittstellenmember mit dem gleichen Namen wie im Codebeispiel wird veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="86906-433">For example, a class might override a base class method and also provide a separate implementation for an interface member with the same name, as demonstrated in the code example.</span></span>  
  
 <span data-ttu-id="86906-434">`DefineMethodOverride` definiert eine `methodimpl`, die besteht aus einem Paar von Metadatentoken.</span><span class="sxs-lookup"><span data-stu-id="86906-434">`DefineMethodOverride` defines a `methodimpl`, which consists of a pair of metadata tokens.</span></span> <span data-ttu-id="86906-435">Ein Token zeigt auf eine Implementierung und der andere token verweist auf eine Deklaration, die der Text implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-435">One token points to an implementation, and the other token points to a declaration that the body implements.</span></span> <span data-ttu-id="86906-436">Der Text für den Typ der Methode "Impl" definiert ist, auf definiert sein, und der Text muss virtuell sein (`Overridable` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="86906-436">The body must be defined on the type the method impl is defined on, and the body must be virtual (`Overridable` in Visual Basic).</span></span> <span data-ttu-id="86906-437">Die Deklaration kann an eine Methode, die für eine Schnittstelle implementiert wird, indem Sie den Typ, einer Methode in einer abgeleiteten Klasse oder eine im Typ definierte Methode definierten vorgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="86906-437">The declaration can be made to a method defined on an interface implemented by the type, a method on a derived class, or a method defined in the type.</span></span> <span data-ttu-id="86906-438">Wenn die Deklaration nur für eine Schnittstelle ist, ist der Slot für die Schnittstelle geändert.</span><span class="sxs-lookup"><span data-stu-id="86906-438">If the declaration is on an interface only, the slot defined for the interface is altered.</span></span> <span data-ttu-id="86906-439">Wenn die Deklaration einer Methode in einem Basistyp erfolgt, Slot des für die Methode überschrieben wird, und auch alle Duplikate für die überschriebene Methode ersetzt werden.</span><span class="sxs-lookup"><span data-stu-id="86906-439">If the declaration is made to a method on a base type, the slot for the method is overridden and any duplicates for the overridden method are also replaced.</span></span> <span data-ttu-id="86906-440">Die überschriebene Methode darf nicht die tatsächlichen Methode sein, die deklariert wird.</span><span class="sxs-lookup"><span data-stu-id="86906-440">The overridden method cannot be the actual method that is declared.</span></span> <span data-ttu-id="86906-441">Wenn die Methode für den gleichen Typ ist, der Slot ersetzt, und alle Duplikate für die ersetzten Methoden überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="86906-441">If the method is on the same type, the slot is replaced and any duplicates for the replaced methods are overridden.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-442">Weitere Informationen zur Methode Impls finden Sie unter `MethodImpl` in der ECMA Partition II-Metadaten-Dokumentation.</span><span class="sxs-lookup"><span data-stu-id="86906-442">For more information about method impls, see `MethodImpl` in the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="86906-443">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](http://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](http://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="86906-443">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="86906-444">Nach der <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> -Methode aufgerufen wird, werden einige Funktionen von `methodInfoBody` kann nicht geändert werden.</span><span class="sxs-lookup"><span data-stu-id="86906-444">After the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is called, some features of `methodInfoBody` cannot be changed.</span></span> <span data-ttu-id="86906-445">Sie können z. B. ein Attribut auf einen generischen Typparameter anwenden `methodInfoBody` mithilfe der <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-445">For example, you cannot apply an attribute to a generic type parameter of `methodInfoBody` by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method.</span></span> <span data-ttu-id="86906-446">Wenn Sie verwenden, müssen die <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> -Methode dazu nach allen Eigenschaften des `methodInfoBody` definiert wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-446">If you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method, do so after all characteristics of `methodInfoBody` have been defined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-447">Das folgende Codebeispiel enthält eine Schnittstelle `I` mit einer Methode `M()`, eine Basisklasse `A` , implementiert die Schnittstelle und eine abgeleitete Klasse `C` überschreibt die basisklassenimplementierung der `M()` sowie Stellt eine separate explizite Implementierung der `I.M()`.</span><span class="sxs-lookup"><span data-stu-id="86906-447">The following code example contains an interface `I` with a method `M()`, a base class `A` that implements the interface, and a derived class `C` that overrides the base class implementation of `M()` and also provides a separate explicit implementation of `I.M()`.</span></span>  
  
 <span data-ttu-id="86906-448">Die `main()` Methode des Codebeispiels wird veranschaulicht, wie zum Ausgeben von der abgeleiteten Klasse `C`.</span><span class="sxs-lookup"><span data-stu-id="86906-448">The `main()` method of the code example shows how to emit the derived class `C`.</span></span> <span data-ttu-id="86906-449">Die Außerkraftsetzung der `A.M()` erfolgt einfach durch Ausgeben einer Methode `M()` mit derselben Signatur.</span><span class="sxs-lookup"><span data-stu-id="86906-449">The override of `A.M()` is accomplished simply by emitting a method `M()` with the same signature.</span></span> <span data-ttu-id="86906-450">Allerdings auf einer separaten Implementierung der `I.M()`, müssen Sie einen Methodentext definieren und verwenden Sie dann die <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> Methode, um diese Methodentext mit zuzuordnen eine <xref:System.Reflection.MethodInfo> darstellt `I.M()`.</span><span class="sxs-lookup"><span data-stu-id="86906-450">However, to provide a separate implementation of `I.M()`, you must define a method body and then use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method to associate that method body with a <xref:System.Reflection.MethodInfo> representing `I.M()`.</span></span> <span data-ttu-id="86906-451">Der Name des Methodentextes spielt keine Rolle.</span><span class="sxs-lookup"><span data-stu-id="86906-451">The name of the method body does not matter.</span></span>  
  
 <span data-ttu-id="86906-452">Das Codebeispiel erstellt eine Instanz der ausgegebenen-Klasse.</span><span class="sxs-lookup"><span data-stu-id="86906-452">The code example creates an instance of the emitted class.</span></span> <span data-ttu-id="86906-453">Er erhält eine <xref:System.Reflection.MethodInfo> -Objekt für `I.M()`, und verwendet es die ausgegebene aufrufen ist die explizite schnittstellenimplementierung.</span><span class="sxs-lookup"><span data-stu-id="86906-453">It obtains a <xref:System.Reflection.MethodInfo> object for `I.M()`, and uses it to invoke the emitted class's explicit interface implementation.</span></span> <span data-ttu-id="86906-454">Er dann erhält ein <xref:System.Reflection.MethodInfo> -Objekt für `A.M()`, und verwendet, um das Aufrufen dieser Methode die ausgegebene Klasse überschrieben.</span><span class="sxs-lookup"><span data-stu-id="86906-454">It then obtains a <xref:System.Reflection.MethodInfo> object for `A.M()`, and uses it to invoke the emitted class's override of that method.</span></span>  
  
 [!code-cpp[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/cpp/source.cpp#1)]
 [!code-csharp[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/cs/source.cs#1)]
 [!code-vb[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86906-455"><paramref name="methodInfoBody" /> gehört nicht zu dieser Klasse.</span><span class="sxs-lookup"><span data-stu-id="86906-455"><paramref name="methodInfoBody" /> does not belong to this class.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-456"><paramref name="methodInfoBody" /> oder <paramref name="methodInfoDeclaration" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-456"><paramref name="methodInfoBody" /> or <paramref name="methodInfoDeclaration" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-457">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-457">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="86906-458">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-458">-or-</span></span>  
  
 <span data-ttu-id="86906-459">Der deklarierende Typ des <paramref name="methodInfoBody" /> ist nicht der von diesem <see cref="T:System.Reflection.Emit.TypeBuilder" /> dargestellte Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-459">The declaring type of <paramref name="methodInfoBody" /> is not the type represented by this <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineNestedType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-460">Definiert einen geschachtelten Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-460">Defines a nested type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-461">Der Kurzname des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-461">The short name of the type.</span></span> <span data-ttu-id="86906-462"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-462"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <summary><span data-ttu-id="86906-463">Definiert einen geschachtelten Typ anhand des Namens.</span><span class="sxs-lookup"><span data-stu-id="86906-463">Defines a nested type, given its name.</span></span></summary>
        <returns><span data-ttu-id="86906-464">Der definierte geschachtelte Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-464">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-465">Diese Methode kann verwendet werden, zum Erstellen von geschachtelten Typen auch nach der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode für den einschließenden Typ aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-465">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="86906-466">Der geschachtelte Typ muss abgeschlossen sein, bevor Sie ihn mit spiegeln können <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, oder <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="86906-466">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="86906-467">Siehe die Beschreibung der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> für die Reihenfolge, in dem geschachtelte und schachteln Typen abgeschlossen werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-467">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="86906-468">Ein doppelter Name ist nicht notwendigerweise erstellt, wenn `name` identisch mit dem Namen von einem zuvor definierten Typ oder ein geschachtelter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="86906-468">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="86906-469">Um Duplikate zu sein, müssen den vollständigen Namen identisch, einschließlich des Namespace und alle schachteln Typen sein.</span><span class="sxs-lookup"><span data-stu-id="86906-469">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-470">Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.</span><span class="sxs-lookup"><span data-stu-id="86906-470">Length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="86906-471">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-471">-or-</span></span>  
  
 <span data-ttu-id="86906-472">Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-472">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-473"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-473"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-474">Der Kurzname des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-474">The short name of the type.</span></span> <span data-ttu-id="86906-475"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-475"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="86906-476">Die Attribute des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-476">The attributes of the type.</span></span></param>
        <summary><span data-ttu-id="86906-477">Definiert einen geschachtelten Typ, wozu dessen Name und Attribute angegeben sind.</span><span class="sxs-lookup"><span data-stu-id="86906-477">Defines a nested type, given its name and attributes.</span></span></summary>
        <returns><span data-ttu-id="86906-478">Der definierte geschachtelte Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-478">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-479">Diese Methode kann verwendet werden, zum Erstellen von geschachtelten Typen auch nach der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode für den einschließenden Typ aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-479">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="86906-480">Der geschachtelte Typ muss abgeschlossen sein, bevor Sie ihn mit spiegeln können <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, oder <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="86906-480">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="86906-481">Siehe die Beschreibung der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> für die Reihenfolge, in dem geschachtelte und schachteln Typen abgeschlossen werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-481">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="86906-482">Ein doppelter Name ist nicht notwendigerweise erstellt, wenn `name` identisch mit dem Namen von einem zuvor definierten Typ oder ein geschachtelter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="86906-482">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="86906-483">Um Duplikate zu sein, müssen den vollständigen Namen identisch, einschließlich des Namespace und alle schachteln Typen sein.</span><span class="sxs-lookup"><span data-stu-id="86906-483">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-484">Das geschachtelte Attribut ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-484">The nested attribute is not specified.</span></span>  
  
 <span data-ttu-id="86906-485">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-485">-or-</span></span>  
  
 <span data-ttu-id="86906-486">Dieser Typ ist versiegelt.</span><span class="sxs-lookup"><span data-stu-id="86906-486">This type is sealed.</span></span>  
  
 <span data-ttu-id="86906-487">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-487">-or-</span></span>  
  
 <span data-ttu-id="86906-488">Dieser Typ ist ein Array.</span><span class="sxs-lookup"><span data-stu-id="86906-488">This type is an array.</span></span>  
  
 <span data-ttu-id="86906-489">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-489">-or-</span></span>  
  
 <span data-ttu-id="86906-490">Dieser Typ ist eine Schnittstelle, aber der geschachtelte Typ ist keine Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="86906-490">This type is an interface, but the nested type is not an interface.</span></span>  
  
 <span data-ttu-id="86906-491">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-491">-or-</span></span>  
  
 <span data-ttu-id="86906-492">Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.</span><span class="sxs-lookup"><span data-stu-id="86906-492">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="86906-493">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-493">-or-</span></span>  
  
 <span data-ttu-id="86906-494">Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-494">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-495"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-495"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-496">Der Kurzname des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-496">The short name of the type.</span></span> <span data-ttu-id="86906-497"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-497"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="86906-498">Die Attribute des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-498">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="86906-499">Der Typ, den der geschachtelte Typ erweitert.</span><span class="sxs-lookup"><span data-stu-id="86906-499">The type that the nested type extends.</span></span></param>
        <summary><span data-ttu-id="86906-500">Definiert einen geschachtelten Typ bei gegebenem Namen, Attributen und erweitertem Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-500">Defines a nested type, given its name, attributes, and the type that it extends.</span></span></summary>
        <returns><span data-ttu-id="86906-501">Der definierte geschachtelte Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-501">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-502">Diese Methode kann verwendet werden, zum Erstellen von geschachtelten Typen auch nach der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode für den einschließenden Typ aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-502">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="86906-503">Der geschachtelte Typ muss abgeschlossen sein, bevor Sie ihn mit spiegeln können <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, oder <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="86906-503">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="86906-504">Siehe die Beschreibung der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> für die Reihenfolge, in dem geschachtelte und schachteln Typen abgeschlossen werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-504">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="86906-505">Ein doppelter Name ist nicht notwendigerweise erstellt, wenn `name` identisch mit dem Namen von einem zuvor definierten Typ oder ein geschachtelter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="86906-505">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="86906-506">Um Duplikate zu sein, müssen den vollständigen Namen identisch, einschließlich des Namespace und alle schachteln Typen sein.</span><span class="sxs-lookup"><span data-stu-id="86906-506">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-507">Das geschachtelte Attribut ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-507">The nested attribute is not specified.</span></span>  
  
 <span data-ttu-id="86906-508">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-508">-or-</span></span>  
  
 <span data-ttu-id="86906-509">Dieser Typ ist versiegelt.</span><span class="sxs-lookup"><span data-stu-id="86906-509">This type is sealed.</span></span>  
  
 <span data-ttu-id="86906-510">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-510">-or-</span></span>  
  
 <span data-ttu-id="86906-511">Dieser Typ ist ein Array.</span><span class="sxs-lookup"><span data-stu-id="86906-511">This type is an array.</span></span>  
  
 <span data-ttu-id="86906-512">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-512">-or-</span></span>  
  
 <span data-ttu-id="86906-513">Dieser Typ ist eine Schnittstelle, aber der geschachtelte Typ ist keine Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="86906-513">This type is an interface, but the nested type is not an interface.</span></span>  
  
 <span data-ttu-id="86906-514">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-514">-or-</span></span>  
  
 <span data-ttu-id="86906-515">Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.</span><span class="sxs-lookup"><span data-stu-id="86906-515">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="86906-516">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-516">-or-</span></span>  
  
 <span data-ttu-id="86906-517">Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-517">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-518"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-518"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, int typeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, int32 typeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, typeSize As Integer) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, int typeSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="typeSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-519">Der Kurzname des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-519">The short name of the type.</span></span> <span data-ttu-id="86906-520"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-520"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="86906-521">Die Attribute des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-521">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="86906-522">Der Typ, den der geschachtelte Typ erweitert.</span><span class="sxs-lookup"><span data-stu-id="86906-522">The type that the nested type extends.</span></span></param>
        <param name="typeSize"><span data-ttu-id="86906-523">Die Gesamtgröße des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-523">The total size of the type.</span></span></param>
        <summary><span data-ttu-id="86906-524">Definiert einen geschachtelten Typ bei gegebenem Namen, Attributen, Gesamtgröße des Typs und erweitertem Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-524">Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.</span></span></summary>
        <returns><span data-ttu-id="86906-525">Der definierte geschachtelte Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-525">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-526">Diese Methode kann verwendet werden, zum Erstellen von geschachtelten Typen auch nach der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode für den einschließenden Typ aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-526">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="86906-527">Der geschachtelte Typ muss abgeschlossen sein, bevor Sie ihn mit spiegeln können <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, oder <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="86906-527">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="86906-528">Siehe die Beschreibung der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> für die Reihenfolge, in dem geschachtelte und schachteln Typen abgeschlossen werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-528">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="86906-529">Ein doppelter Name ist nicht notwendigerweise erstellt, wenn `name` identisch mit dem Namen von einem zuvor definierten Typ oder ein geschachtelter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="86906-529">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="86906-530">Um Duplikate zu sein, müssen den vollständigen Namen identisch, einschließlich des Namespace und alle schachteln Typen sein.</span><span class="sxs-lookup"><span data-stu-id="86906-530">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-531">Das geschachtelte Attribut ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-531">The nested attribute is not specified.</span></span>  
  
 <span data-ttu-id="86906-532">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-532">-or-</span></span>  
  
 <span data-ttu-id="86906-533">Dieser Typ ist versiegelt.</span><span class="sxs-lookup"><span data-stu-id="86906-533">This type is sealed.</span></span>  
  
 <span data-ttu-id="86906-534">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-534">-or-</span></span>  
  
 <span data-ttu-id="86906-535">Dieser Typ ist ein Array.</span><span class="sxs-lookup"><span data-stu-id="86906-535">This type is an array.</span></span>  
  
 <span data-ttu-id="86906-536">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-536">-or-</span></span>  
  
 <span data-ttu-id="86906-537">Dieser Typ ist eine Schnittstelle, aber der geschachtelte Typ ist keine Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="86906-537">This type is an interface, but the nested type is not an interface.</span></span>  
  
 <span data-ttu-id="86906-538">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-538">-or-</span></span>  
  
 <span data-ttu-id="86906-539">Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.</span><span class="sxs-lookup"><span data-stu-id="86906-539">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="86906-540">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-540">-or-</span></span>  
  
 <span data-ttu-id="86906-541">Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-541">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-542"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-542"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, valuetype System.Reflection.Emit.PackingSize packSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, packSize As PackingSize) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, System::Reflection::Emit::PackingSize packSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="packSize" Type="System.Reflection.Emit.PackingSize" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-543">Der Kurzname des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-543">The short name of the type.</span></span> <span data-ttu-id="86906-544"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-544"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="86906-545">Die Attribute des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-545">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="86906-546">Der Typ, den der geschachtelte Typ erweitert.</span><span class="sxs-lookup"><span data-stu-id="86906-546">The type that the nested type extends.</span></span></param>
        <param name="packSize"><span data-ttu-id="86906-547">Die Komprimierungsgröße des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-547">The packing size of the type.</span></span></param>
        <summary><span data-ttu-id="86906-548">Definiert einen geschachtelten Typ bei gegebenem Namen, Attributen, erweitertem Typ und Komprimierungsgröße.</span><span class="sxs-lookup"><span data-stu-id="86906-548">Defines a nested type, given its name, attributes, the type that it extends, and the packing size.</span></span></summary>
        <returns><span data-ttu-id="86906-549">Der definierte geschachtelte Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-549">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-550">Diese Methode kann verwendet werden, zum Erstellen von geschachtelten Typen auch nach der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode für den einschließenden Typ aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-550">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="86906-551">Der geschachtelte Typ muss abgeschlossen sein, bevor Sie ihn mit spiegeln können <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, oder <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="86906-551">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="86906-552">Siehe die Beschreibung der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> für die Reihenfolge, in dem geschachtelte und schachteln Typen abgeschlossen werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-552">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="86906-553">Ein doppelter Name ist nicht notwendigerweise erstellt, wenn `name` identisch mit dem Namen von einem zuvor definierten Typ oder ein geschachtelter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="86906-553">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="86906-554">Um Duplikate zu sein, müssen den vollständigen Namen identisch, einschließlich des Namespace und alle schachteln Typen sein.</span><span class="sxs-lookup"><span data-stu-id="86906-554">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-555">Das geschachtelte Attribut ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-555">The nested attribute is not specified.</span></span>  
  
 <span data-ttu-id="86906-556">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-556">-or-</span></span>  
  
 <span data-ttu-id="86906-557">Dieser Typ ist versiegelt.</span><span class="sxs-lookup"><span data-stu-id="86906-557">This type is sealed.</span></span>  
  
 <span data-ttu-id="86906-558">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-558">-or-</span></span>  
  
 <span data-ttu-id="86906-559">Dieser Typ ist ein Array.</span><span class="sxs-lookup"><span data-stu-id="86906-559">This type is an array.</span></span>  
  
 <span data-ttu-id="86906-560">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-560">-or-</span></span>  
  
 <span data-ttu-id="86906-561">Dieser Typ ist eine Schnittstelle, aber der geschachtelte Typ ist keine Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="86906-561">This type is an interface, but the nested type is not an interface.</span></span>  
  
 <span data-ttu-id="86906-562">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-562">-or-</span></span>  
  
 <span data-ttu-id="86906-563">Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.</span><span class="sxs-lookup"><span data-stu-id="86906-563">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="86906-564">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-564">-or-</span></span>  
  
 <span data-ttu-id="86906-565">Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-565">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-566"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-566"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, Type[] interfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, class System.Type[] interfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, interfaces As Type()) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, cli::array &lt;Type ^&gt; ^ interfaces);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="interfaces" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-567">Der Kurzname des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-567">The short name of the type.</span></span> <span data-ttu-id="86906-568"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-568"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="86906-569">Die Attribute des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-569">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="86906-570">Der Typ, den der geschachtelte Typ erweitert.</span><span class="sxs-lookup"><span data-stu-id="86906-570">The type that the nested type extends.</span></span></param>
        <param name="interfaces"><span data-ttu-id="86906-571">Die vom geschachtelte Typ implementierten Schnittstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-571">The interfaces that the nested type implements.</span></span></param>
        <summary><span data-ttu-id="86906-572">Definiert einen geschachtelten Typ mit seinem Namen, den Attributen, dem erweiterten Typ und den implementierten Schnittstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-572">Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.</span></span></summary>
        <returns><span data-ttu-id="86906-573">Der definierte geschachtelte Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-573">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-574">Diese Methode kann verwendet werden, zum Erstellen von geschachtelten Typen auch nach der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode für den einschließenden Typ aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-574">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="86906-575">Der geschachtelte Typ muss abgeschlossen sein, bevor Sie ihn mit spiegeln können <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, oder <xref:System.Type.GetNestedTypes%2A>.</span><span class="sxs-lookup"><span data-stu-id="86906-575">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="86906-576">Siehe die Beschreibung der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> für die Reihenfolge, in dem geschachtelte und schachteln Typen abgeschlossen werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-576">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="86906-577">Ein doppelter Name ist nicht notwendigerweise erstellt, wenn `name` identisch mit dem Namen von einem zuvor definierten Typ oder ein geschachtelter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="86906-577">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="86906-578">Um Duplikate zu sein, müssen den vollständigen Namen identisch, einschließlich des Namespace und alle schachteln Typen sein.</span><span class="sxs-lookup"><span data-stu-id="86906-578">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-579">Das geschachtelte Attribut ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-579">The nested attribute is not specified.</span></span>  
  
 <span data-ttu-id="86906-580">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-580">-or-</span></span>  
  
 <span data-ttu-id="86906-581">Dieser Typ ist versiegelt.</span><span class="sxs-lookup"><span data-stu-id="86906-581">This type is sealed.</span></span>  
  
 <span data-ttu-id="86906-582">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-582">-or-</span></span>  
  
 <span data-ttu-id="86906-583">Dieser Typ ist ein Array.</span><span class="sxs-lookup"><span data-stu-id="86906-583">This type is an array.</span></span>  
  
 <span data-ttu-id="86906-584">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-584">-or-</span></span>  
  
 <span data-ttu-id="86906-585">Dieser Typ ist eine Schnittstelle, aber der geschachtelte Typ ist keine Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="86906-585">This type is an interface, but the nested type is not an interface.</span></span>  
  
 <span data-ttu-id="86906-586">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-586">-or-</span></span>  
  
 <span data-ttu-id="86906-587">Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.</span><span class="sxs-lookup"><span data-stu-id="86906-587">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
 <span data-ttu-id="86906-588">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-588">-or-</span></span>  
  
 <span data-ttu-id="86906-589">Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-589">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-590"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-590"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86906-591">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-591">-or-</span></span>  
  
 <span data-ttu-id="86906-592">Ein Element des <paramref name="interfaces" />-Arrays ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-592">An element of the <paramref name="interfaces" /> array is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize, int typeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, valuetype System.Reflection.Emit.PackingSize packSize, int32 typeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, packSize As PackingSize, typeSize As Integer) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, System::Reflection::Emit::PackingSize packSize, int typeSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="packSize" Type="System.Reflection.Emit.PackingSize" />
        <Parameter Name="typeSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-593">Der Kurzname des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-593">The short name of the type.</span></span> <span data-ttu-id="86906-594"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-594"><c>name</c> cannot contain embedded null values.</span></span></param>
        <param name="attr"><span data-ttu-id="86906-595">Die Attribute des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-595">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="86906-596">Der Typ, den der geschachtelte Typ erweitert.</span><span class="sxs-lookup"><span data-stu-id="86906-596">The type that the nested type extends.</span></span></param>
        <param name="packSize"><span data-ttu-id="86906-597">Die Komprimierungsgröße des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-597">The packing size of the type.</span></span></param>
        <param name="typeSize"><span data-ttu-id="86906-598">Die Gesamtgröße des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-598">The total size of the type.</span></span></param>
        <summary><span data-ttu-id="86906-599">Definiert einen geschachtelten Typ bei gegebenem Namen, Attributen, Größe und erweitertem Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-599">Defines a nested type, given its name, attributes, size, and the type that it extends.</span></span></summary>
        <returns><span data-ttu-id="86906-600">Der definierte geschachtelte Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-600">The defined nested type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefinePInvokeMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-601">Definiert eine <see langword="PInvoke" />-Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-601">Defines a <see langword="PInvoke" /> method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-602">Der Name der <see langword="PInvoke" />-Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-602">The name of the <see langword="PInvoke" /> method.</span></span> <span data-ttu-id="86906-603"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-603"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="dllName"><span data-ttu-id="86906-604">Der Name der DLL, in der die <see langword="PInvoke" />-Methode definiert ist.</span><span class="sxs-lookup"><span data-stu-id="86906-604">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-605">Die Attribute der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-605">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86906-606">Die Aufrufkonvention der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-606">The method's calling convention.</span></span></param>
        <param name="returnType"><span data-ttu-id="86906-607">Der Rückgabetyp der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-607">The method's return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-608">Die Typen der Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-608">The types of the method's parameters.</span></span></param>
        <param name="nativeCallConv"><span data-ttu-id="86906-609">Die systemeigene Aufrufkonvention.</span><span class="sxs-lookup"><span data-stu-id="86906-609">The native calling convention.</span></span></param>
        <param name="nativeCharSet"><span data-ttu-id="86906-610">Der systemeigene Zeichensatz der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-610">The method's native character set.</span></span></param>
        <summary><span data-ttu-id="86906-611">Definiert eine <see langword="PInvoke" />-Methode anhand der Angaben für den Namen, den Namen der DLL, in der die Methode definiert ist, für die Attribute der Methode, die Aufrufkonvention der Methode, den Rückgabetyp der Methode, die Parametertypen der Methode und die <see langword="PInvoke" />-Flags.</span><span class="sxs-lookup"><span data-stu-id="86906-611">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <see langword="PInvoke" /> flags.</span></span></summary>
        <returns><span data-ttu-id="86906-612">Die definierte <see langword="PInvoke" />-Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-612">The defined <see langword="PInvoke" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-613">Einige DLL-Importattribute (siehe die Beschreibung der <xref:System.Runtime.InteropServices.DllImportAttribute>) kann nicht als Argumente für diese Methode angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="86906-613">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="86906-614">Z. B. import die DLL-Attribut <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> muss hinzugefügt werden, nachdem die `PInvoke` Methode erstellt wird, wenn die Methode einen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="86906-614">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="86906-615">Im Beispiel veranschaulicht dies.</span><span class="sxs-lookup"><span data-stu-id="86906-615">The example shows how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-616">Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> Methode zum Erstellen einer `PInvoke` -Methode und zum Hinzufügen der <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> -Kennzeichen an die die Methodenimplementierungsflags nach der Erstellung der <xref:System.Reflection.Emit.MethodBuilder>, mithilfe der <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> und <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType>Methoden.</span><span class="sxs-lookup"><span data-stu-id="86906-616">The following example demonstrates how to use the <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="86906-617">Um einen Rückgabewert ungleich 0 (null) zu erhalten, fügen Sie der <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> Flag.</span><span class="sxs-lookup"><span data-stu-id="86906-617">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="86906-618">Das Beispiel erstellt eine dynamische Assembly mit einem dynamischen Modul und eines einzelnen Typs `MyType`, enthält die `PInvoke` Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-618">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="86906-619">Die `PInvoke` Methode darstellt, die Win32 `GetTickCount` Funktion.</span><span class="sxs-lookup"><span data-stu-id="86906-619">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
 <span data-ttu-id="86906-620">Wenn das Beispiel ausgeführt wird, führt die `PInvoke` Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-620">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="86906-621">Es speichert auch die dynamische Assembly als PInvokeTest.dll gespeichert.</span><span class="sxs-lookup"><span data-stu-id="86906-621">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="86906-622">Können Sie die [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Untersuchen der `MyType` Klasse und die `static` (`Shared` in Visual Basic) `PInvoke` Methode, die es enthält.</span><span class="sxs-lookup"><span data-stu-id="86906-622">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="86906-623">Sie können ein Visual Basic- oder C#-Programm, die statische verwendet, Kompilieren `MyType.GetTickCount` Methode, indem Sie z. B. einen Verweis auf die DLL beim Ausführen von csc.exe oder vbc.exe; z. B. `/r:PInvokeTest.dll`.</span><span class="sxs-lookup"><span data-stu-id="86906-623">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-624">Die Methode ist nicht statisch.</span><span class="sxs-lookup"><span data-stu-id="86906-624">The method is not static.</span></span>  
  
 <span data-ttu-id="86906-625">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-625">-or-</span></span>  
  
 <span data-ttu-id="86906-626">Der übergeordnete Typ ist eine Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="86906-626">The parent type is an interface.</span></span>  
  
 <span data-ttu-id="86906-627">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-627">-or-</span></span>  
  
 <span data-ttu-id="86906-628">Die Methode ist abstrakt.</span><span class="sxs-lookup"><span data-stu-id="86906-628">The method is abstract.</span></span>  
  
 <span data-ttu-id="86906-629">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-629">-or-</span></span>  
  
 <span data-ttu-id="86906-630">Die Methode wurde bereits definiert.</span><span class="sxs-lookup"><span data-stu-id="86906-630">The method was previously defined.</span></span>  
  
 <span data-ttu-id="86906-631">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-631">-or-</span></span>  
  
 <span data-ttu-id="86906-632">Die Länge von <paramref name="name" /> oder <paramref name="dllName" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-632">The length of <paramref name="name" /> or <paramref name="dllName" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-633"><paramref name="name" /> oder <paramref name="dllName" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-633"><paramref name="name" /> or <paramref name="dllName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-634">Der enthaltende Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-634">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::String ^ entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="entryName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-635">Der Name der <see langword="PInvoke" />-Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-635">The name of the <see langword="PInvoke" /> method.</span></span> <span data-ttu-id="86906-636"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-636"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="dllName"><span data-ttu-id="86906-637">Der Name der DLL, in der die <see langword="PInvoke" />-Methode definiert ist.</span><span class="sxs-lookup"><span data-stu-id="86906-637">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span></span></param>
        <param name="entryName"><span data-ttu-id="86906-638">Der Name des Einstiegspunkts in die DLL.</span><span class="sxs-lookup"><span data-stu-id="86906-638">The name of the entry point in the DLL.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-639">Die Attribute der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-639">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86906-640">Die Aufrufkonvention der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-640">The method's calling convention.</span></span></param>
        <param name="returnType"><span data-ttu-id="86906-641">Der Rückgabetyp der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-641">The method's return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-642">Die Typen der Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-642">The types of the method's parameters.</span></span></param>
        <param name="nativeCallConv"><span data-ttu-id="86906-643">Die systemeigene Aufrufkonvention.</span><span class="sxs-lookup"><span data-stu-id="86906-643">The native calling convention.</span></span></param>
        <param name="nativeCharSet"><span data-ttu-id="86906-644">Der systemeigene Zeichensatz der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-644">The method's native character set.</span></span></param>
        <summary><span data-ttu-id="86906-645">Definiert eine <see langword="PInvoke" />-Methode anhand der Angaben für den Namen, den Namen der DLL, in der die Methode definiert ist, für den Namen des Einstiegspunkts, die Attribute der Methode, die Aufrufkonvention der Methode, den Rückgabetyp der Methode, die Parametertypen der Methode und die <see langword="PInvoke" />-Flags.</span><span class="sxs-lookup"><span data-stu-id="86906-645">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <see langword="PInvoke" /> flags.</span></span></summary>
        <returns><span data-ttu-id="86906-646">Die definierte <see langword="PInvoke" />-Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-646">The defined <see langword="PInvoke" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-647">Einige DLL-Importattribute (siehe die Beschreibung der <xref:System.Runtime.InteropServices.DllImportAttribute>) kann nicht als Argumente für diese Methode angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="86906-647">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="86906-648">Z. B. import die DLL-Attribut <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> muss hinzugefügt werden, nachdem die `PInvoke` Methode erstellt wird, wenn die Methode einen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="86906-648">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="86906-649">Im Beispiel veranschaulicht dies.</span><span class="sxs-lookup"><span data-stu-id="86906-649">The example shows how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-650">Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> Methode zum Erstellen einer `PInvoke` -Methode und zum Hinzufügen der <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> -Kennzeichen an die die Methodenimplementierungsflags nach der Erstellung der <xref:System.Reflection.Emit.MethodBuilder>, mithilfe der <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> und <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> Methoden.</span><span class="sxs-lookup"><span data-stu-id="86906-650">The following code example demonstrates how to use the <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="86906-651">Um einen Rückgabewert ungleich 0 (null) zu erhalten, fügen Sie der <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> Flag.</span><span class="sxs-lookup"><span data-stu-id="86906-651">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="86906-652">Das Beispiel erstellt eine dynamische Assembly mit einem dynamischen Modul und eines einzelnen Typs `MyType`, enthält die `PInvoke` Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-652">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="86906-653">Die `PInvoke` Methode darstellt, die Win32 `GetTickCount` Funktion.</span><span class="sxs-lookup"><span data-stu-id="86906-653">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
 <span data-ttu-id="86906-654">Wenn das Beispiel ausgeführt wird, führt die `PInvoke` Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-654">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="86906-655">Es speichert auch die dynamische Assembly als PInvokeTest.dll gespeichert.</span><span class="sxs-lookup"><span data-stu-id="86906-655">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="86906-656">Können Sie die [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Untersuchen der `MyType` Klasse und die `static` (`Shared` in Visual Basic) `PInvoke` Methode, die es enthält.</span><span class="sxs-lookup"><span data-stu-id="86906-656">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="86906-657">Sie können ein Visual Basic- oder C#-Programm, die statische verwendet, Kompilieren `MyType.GetTickCount` Methode, indem Sie z. B. einen Verweis auf die DLL beim Ausführen von csc.exe oder vbc.exe; z. B. `/r:PInvokeTest.dll`.</span><span class="sxs-lookup"><span data-stu-id="86906-657">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-658">Die Methode ist nicht statisch.</span><span class="sxs-lookup"><span data-stu-id="86906-658">The method is not static.</span></span>  
  
 <span data-ttu-id="86906-659">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-659">-or-</span></span>  
  
 <span data-ttu-id="86906-660">Der übergeordnete Typ ist eine Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="86906-660">The parent type is an interface.</span></span>  
  
 <span data-ttu-id="86906-661">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-661">-or-</span></span>  
  
 <span data-ttu-id="86906-662">Die Methode ist abstrakt.</span><span class="sxs-lookup"><span data-stu-id="86906-662">The method is abstract.</span></span>  
  
 <span data-ttu-id="86906-663">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-663">-or-</span></span>  
  
 <span data-ttu-id="86906-664">Die Methode wurde bereits definiert.</span><span class="sxs-lookup"><span data-stu-id="86906-664">The method was previously defined.</span></span>  
  
 <span data-ttu-id="86906-665">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-665">-or-</span></span>  
  
 <span data-ttu-id="86906-666">Die Länge von <paramref name="name" />, <paramref name="dllName" /> oder <paramref name="entryName" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-666">The length of <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-667"><paramref name="name" />, <paramref name="dllName" /> oder <paramref name="entryName" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-667"><paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-668">Der enthaltende Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-668">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::String ^ entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="entryName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-669">Der Name der <see langword="PInvoke" />-Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-669">The name of the <see langword="PInvoke" /> method.</span></span> <span data-ttu-id="86906-670"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-670"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="dllName"><span data-ttu-id="86906-671">Der Name der DLL, in der die <see langword="PInvoke" />-Methode definiert ist.</span><span class="sxs-lookup"><span data-stu-id="86906-671">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span></span></param>
        <param name="entryName"><span data-ttu-id="86906-672">Der Name des Einstiegspunkts in die DLL.</span><span class="sxs-lookup"><span data-stu-id="86906-672">The name of the entry point in the DLL.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-673">Die Attribute der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-673">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86906-674">Die Aufrufkonvention der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-674">The method's calling convention.</span></span></param>
        <param name="returnType"><span data-ttu-id="86906-675">Der Rückgabetyp der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-675">The method's return type.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="86906-676">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Methode darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-676">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="86906-677">Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</span><span class="sxs-lookup"><span data-stu-id="86906-677">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="86906-678">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Methode darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-678">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="86906-679">Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</span><span class="sxs-lookup"><span data-stu-id="86906-679">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-680">Die Typen der Parameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-680">The types of the method's parameters.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="86906-681">Ein Array mit Arrays von Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-681">An array of arrays of types.</span></span> <span data-ttu-id="86906-682">Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="86906-682">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="86906-683">Wenn ein bestimmter Parameter keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an.</span><span class="sxs-lookup"><span data-stu-id="86906-683">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="86906-684">Wenn keiner der Parameter erforderliche benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</span><span class="sxs-lookup"><span data-stu-id="86906-684">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="86906-685">Ein Array mit Arrays von Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-685">An array of arrays of types.</span></span> <span data-ttu-id="86906-686">Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="86906-686">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="86906-687">Wenn ein bestimmter Parameter keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an.</span><span class="sxs-lookup"><span data-stu-id="86906-687">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="86906-688">Wenn keiner der Parameter optionale benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</span><span class="sxs-lookup"><span data-stu-id="86906-688">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="nativeCallConv"><span data-ttu-id="86906-689">Die systemeigene Aufrufkonvention.</span><span class="sxs-lookup"><span data-stu-id="86906-689">The native calling convention.</span></span></param>
        <param name="nativeCharSet"><span data-ttu-id="86906-690">Der systemeigene Zeichensatz der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-690">The method's native character set.</span></span></param>
        <summary><span data-ttu-id="86906-691">Definiert eine <see langword="PInvoke" />-Methode anhand der Angaben für den Namen, den Namen der DLL, in der die Methode definiert ist, den Namen des Einstiegspunkts, die Attribute der Methode, die Aufrufkonvention der Methode, den Rückgabetyp der Methode, die Parametertypen der Methode, die <see langword="PInvoke" />-Flags, die benutzerdefinierten Modifizierer für die Parameter und den Rückgabetyp.</span><span class="sxs-lookup"><span data-stu-id="86906-691">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the <see langword="PInvoke" /> flags, and custom modifiers for the parameters and return type.</span></span></summary>
        <returns><span data-ttu-id="86906-692">Ein <see cref="T:System.Reflection.Emit.MethodBuilder" />, der die definierte <see langword="PInvoke" />-Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-692">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the defined <see langword="PInvoke" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-693">Einige DLL-Importattribute (siehe die Beschreibung der <xref:System.Runtime.InteropServices.DllImportAttribute>) kann nicht als Argumente für diese Methode angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="86906-693">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="86906-694">Z. B. import die DLL-Attribut <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> muss hinzugefügt werden, nachdem die `PInvoke` Methode erstellt wird, wenn die Methode einen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="86906-694">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="86906-695">Im Beispiel veranschaulicht dies.</span><span class="sxs-lookup"><span data-stu-id="86906-695">The example shows how to do this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-696">Weitere Informationen zu benutzerdefinierten Modifizierer finden Sie in der ECMA Partition II-Metadaten-Dokumentation.</span><span class="sxs-lookup"><span data-stu-id="86906-696">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="86906-697">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](http://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](http://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="86906-697">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-698">Im folgenden Codebeispiel wird veranschaulicht, wie mithilfe der [\], Typ\[\], Typ\[\], Typ\[\]\[\], Typ\[ \] \<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A > Methode zum Erstellen einer `PInvoke` -Methode und zum Hinzufügen der <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> -Kennzeichen an die die Methodenimplementierungsflags nach der Erstellung der <xref:System.Reflection.Emit.MethodBuilder>, mithilfe der <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> und <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> Methoden.</span><span class="sxs-lookup"><span data-stu-id="86906-698">The following code example demonstrates how to use the [\], Type\[\], Type\[\], Type\[\]\[\], Type\[\]\<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="86906-699">Das Beispiel erstellt eine dynamische Assembly mit einem dynamischen Modul und eines einzelnen Typs `MyType`, enthält die `PInvoke` Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-699">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="86906-700">Die `PInvoke` Methode darstellt, die Win32 `GetTickCount` Funktion.</span><span class="sxs-lookup"><span data-stu-id="86906-700">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="86906-701">Um einen Rückgabewert ungleich 0 (null) zu erhalten, fügen Sie der <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> Flag.</span><span class="sxs-lookup"><span data-stu-id="86906-701">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-702">Das Beispiel verwendet eine Überladung, die keine benutzerdefinierten Modifizierer angibt.</span><span class="sxs-lookup"><span data-stu-id="86906-702">The example uses an overload that does not specify custom modifiers.</span></span> <span data-ttu-id="86906-703">Ändern Sie den Beispielcode, um stattdessen verwenden Sie diese methodenüberladung zum Angeben von benutzerdefinierten Modifizierer.</span><span class="sxs-lookup"><span data-stu-id="86906-703">To specify custom modifiers, change the example code to use this method overload instead.</span></span>  
  
 <span data-ttu-id="86906-704">Wenn das Beispiel ausgeführt wird, führt die `PInvoke` Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-704">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="86906-705">Es speichert auch die dynamische Assembly als PInvokeTest.dll gespeichert.</span><span class="sxs-lookup"><span data-stu-id="86906-705">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="86906-706">Können Sie die [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Untersuchen der `MyType` Klasse und die `static` (`Shared` in Visual Basic) `PInvoke` Methode, die es enthält.</span><span class="sxs-lookup"><span data-stu-id="86906-706">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="86906-707">Sie können ein Visual Basic- oder C#-Programm, die statische verwendet, Kompilieren `MyType.GetTickCount` Methode, indem Sie z. B. einen Verweis auf die DLL beim Ausführen von csc.exe oder vbc.exe; z. B. `/r:PInvokeTest.dll`.</span><span class="sxs-lookup"><span data-stu-id="86906-707">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-708">Die Methode ist nicht statisch.</span><span class="sxs-lookup"><span data-stu-id="86906-708">The method is not static.</span></span>  
  
 <span data-ttu-id="86906-709">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-709">-or-</span></span>  
  
 <span data-ttu-id="86906-710">Der übergeordnete Typ ist eine Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="86906-710">The parent type is an interface.</span></span>  
  
 <span data-ttu-id="86906-711">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-711">-or-</span></span>  
  
 <span data-ttu-id="86906-712">Die Methode ist abstrakt.</span><span class="sxs-lookup"><span data-stu-id="86906-712">The method is abstract.</span></span>  
  
 <span data-ttu-id="86906-713">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-713">-or-</span></span>  
  
 <span data-ttu-id="86906-714">Die Methode wurde bereits definiert.</span><span class="sxs-lookup"><span data-stu-id="86906-714">The method was previously defined.</span></span>  
  
 <span data-ttu-id="86906-715">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-715">-or-</span></span>  
  
 <span data-ttu-id="86906-716">Die Länge von <paramref name="name" />, <paramref name="dllName" /> oder <paramref name="entryName" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-716">The length of <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is zero.</span></span>  
  
 <span data-ttu-id="86906-717">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-717">-or-</span></span>  
  
 <span data-ttu-id="86906-718">Die Größe von <paramref name="parameterTypeRequiredCustomModifiers" /> oder <paramref name="parameterTypeOptionalCustomModifiers" /> entspricht nicht die Größe von <paramref name="parameterTypes" />.</span><span class="sxs-lookup"><span data-stu-id="86906-718">The size of <paramref name="parameterTypeRequiredCustomModifiers" /> or <paramref name="parameterTypeOptionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-719"><paramref name="name" />, <paramref name="dllName" /> oder <paramref name="entryName" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-719"><paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-720">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-720">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="86906-721">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-721">-or-</span></span>  
  
 <span data-ttu-id="86906-722">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-722">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineProperty">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-723">Fügt der Abfrage eine neue Sortiereigenschaft hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-723">Adds a new property to the type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, returnType As Type, parameterTypes As Type()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-724">Den Namen der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-724">The name of the property.</span></span> <span data-ttu-id="86906-725"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-725"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-726">Die Attribute der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-726">The attributes of the property.</span></span></param>
        <param name="returnType"><span data-ttu-id="86906-727">Der Rückgabetyp der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-727">The return type of the property.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-728">Die Typen der Parameter der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-728">The types of the parameters of the property.</span></span></param>
        <summary><span data-ttu-id="86906-729">Fügt dem Typ eine neue Eigenschaft mit dem angegebenen Namen und der angegebenen Eigenschaftensignatur hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-729">Adds a new property to the type, with the given name and property signature.</span></span></summary>
        <returns><span data-ttu-id="86906-730">Die definierte Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-730">The defined property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="86906-731">Im folgenden Codebeispiel wird veranschaulicht, wie eine dynamische Eigenschaft definieren sowie das Abrufen einer <xref:System.Reflection.Emit.PropertyBuilder> für Spezifikation.</span><span class="sxs-lookup"><span data-stu-id="86906-731">The following code sample demonstrates how to define a dynamic property and obtain a <xref:System.Reflection.Emit.PropertyBuilder> for specification.</span></span> <span data-ttu-id="86906-732">Beachten Sie, dass eine `PropertyBuilder` benötigen auch eine entsprechende <xref:System.Reflection.Emit.MethodBuilder>, wird die IL-Logik für die Eigenschaft gespeichert.</span><span class="sxs-lookup"><span data-stu-id="86906-732">Note that a `PropertyBuilder` must also have a corresponding <xref:System.Reflection.Emit.MethodBuilder>, which will house the IL logic for the property.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-733">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-733">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-734"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-734"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86906-735">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-735">-or-</span></span>  
  
 <span data-ttu-id="86906-736">Ein Element des <paramref name="parameterTypes" />-Arrays ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-736">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-737">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-737">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-738">Den Namen der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-738">The name of the property.</span></span> <span data-ttu-id="86906-739"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-739"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-740">Die Attribute der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-740">The attributes of the property.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86906-741">Die Aufrufkonvention der Eigenschaftsaccessoren.</span><span class="sxs-lookup"><span data-stu-id="86906-741">The calling convention of the property accessors.</span></span></param>
        <param name="returnType"><span data-ttu-id="86906-742">Der Rückgabetyp der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-742">The return type of the property.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-743">Die Typen der Parameter der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-743">The types of the parameters of the property.</span></span></param>
        <summary><span data-ttu-id="86906-744">Fügt dem Typ eine neue Eigenschaft mit den Angaben für den Namen und die Signatur der Eigenschaften hinzu.</span><span class="sxs-lookup"><span data-stu-id="86906-744">Adds a new property to the type, with the given name, attributes, calling convention, and property signature.</span></span></summary>
        <returns><span data-ttu-id="86906-745">Die definierte Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-745">The defined property.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-746">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-746">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-747"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-747"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86906-748">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-748">-or-</span></span>  
  
 <span data-ttu-id="86906-749">Ein Element des <paramref name="parameterTypes" />-Arrays ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-749">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-750">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-750">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-751">Den Namen der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-751">The name of the property.</span></span> <span data-ttu-id="86906-752"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-752"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-753">Die Attribute der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-753">The attributes of the property.</span></span></param>
        <param name="returnType"><span data-ttu-id="86906-754">Der Rückgabetyp der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-754">The return type of the property.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="86906-755">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Eigenschaft darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-755">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="86906-756">Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an. </span><span class="sxs-lookup"><span data-stu-id="86906-756">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="86906-757">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Eigenschaft darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-757">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="86906-758">Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an. </span><span class="sxs-lookup"><span data-stu-id="86906-758">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-759">Die Typen der Parameter der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-759">The types of the parameters of the property.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="86906-760">Ein Array mit Arrays von Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-760">An array of arrays of types.</span></span> <span data-ttu-id="86906-761">Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="86906-761">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="86906-762">Wenn ein bestimmter Parameter keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an.</span><span class="sxs-lookup"><span data-stu-id="86906-762">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="86906-763">Wenn keiner der Parameter erforderliche benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</span><span class="sxs-lookup"><span data-stu-id="86906-763">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="86906-764">Ein Array mit Arrays von Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-764">An array of arrays of types.</span></span> <span data-ttu-id="86906-765">Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="86906-765">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="86906-766">Wenn ein bestimmter Parameter keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an.</span><span class="sxs-lookup"><span data-stu-id="86906-766">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="86906-767">Wenn keiner der Parameter optionale benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</span><span class="sxs-lookup"><span data-stu-id="86906-767">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="86906-768">Fügt dem Typ eine neue Eigenschaft hinzu, die den angegebenen Namen, die angegebene Eigenschaftensignatur und die angegebenen benutzerdefinierten Modifizierer hat.</span><span class="sxs-lookup"><span data-stu-id="86906-768">Adds a new property to the type, with the given name, property signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="86906-769">Die definierte Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-769">The defined property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-770">Diese Überladung wird für Designer von verwalteten Compilern bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="86906-770">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-771">Weitere Informationen zu benutzerdefinierten Modifizierer finden Sie in der ECMA Partition II-Metadaten-Dokumentation.</span><span class="sxs-lookup"><span data-stu-id="86906-771">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="86906-772">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](http://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](http://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="86906-772">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-773">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-773">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-774"><paramref name="name" /> ist gleich <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-774"><paramref name="name" /> is <see langword="null" /></span></span>  
  
 <span data-ttu-id="86906-775">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-775">-or-</span></span>  
  
 <span data-ttu-id="86906-776">Irgendeines der Elemente des <paramref name="parameterTypes" />-Arrays ist gleich <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-776">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" /></span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-777">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-777">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, callingConvention As CallingConventions, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-778">Den Namen der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-778">The name of the property.</span></span> <span data-ttu-id="86906-779"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-779"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-780">Die Attribute der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-780">The attributes of the property.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86906-781">Die Aufrufkonvention der Eigenschaftsaccessoren.</span><span class="sxs-lookup"><span data-stu-id="86906-781">The calling convention of the property accessors.</span></span></param>
        <param name="returnType"><span data-ttu-id="86906-782">Der Rückgabetyp der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-782">The return type of the property.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="86906-783">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Eigenschaft darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-783">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="86906-784">Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an. </span><span class="sxs-lookup"><span data-stu-id="86906-784">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="86906-785">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Eigenschaft darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-785">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="86906-786">Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an. </span><span class="sxs-lookup"><span data-stu-id="86906-786">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86906-787">Die Typen der Parameter der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-787">The types of the parameters of the property.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="86906-788">Ein Array mit Arrays von Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-788">An array of arrays of types.</span></span> <span data-ttu-id="86906-789">Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="86906-789">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="86906-790">Wenn ein bestimmter Parameter keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an.</span><span class="sxs-lookup"><span data-stu-id="86906-790">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="86906-791">Wenn keiner der Parameter erforderliche benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</span><span class="sxs-lookup"><span data-stu-id="86906-791">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="86906-792">Ein Array mit Arrays von Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-792">An array of arrays of types.</span></span> <span data-ttu-id="86906-793">Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span><span class="sxs-lookup"><span data-stu-id="86906-793">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="86906-794">Wenn ein bestimmter Parameter keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an.</span><span class="sxs-lookup"><span data-stu-id="86906-794">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="86906-795">Wenn keiner der Parameter optionale benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</span><span class="sxs-lookup"><span data-stu-id="86906-795">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="86906-796">Fügt dem Typ eine neue Eigenschaft hinzu, die den angegebenen Namen, die angegebene Aufrufkonvention, die angegebene Eigenschaftensignatur und die angegebenen benutzerdefinierten Modifizierer hat.</span><span class="sxs-lookup"><span data-stu-id="86906-796">Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="86906-797">Die definierte Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-797">The defined property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-798">Diese Überladung wird für Designer von verwalteten Compilern bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="86906-798">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-799">Weitere Informationen zu benutzerdefinierten Modifizierer finden Sie in der ECMA Partition II-Metadaten-Dokumentation.</span><span class="sxs-lookup"><span data-stu-id="86906-799">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="86906-800">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](http://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](http://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="86906-800">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="86906-801">Diese methodenüberladung wird eingeführt, der [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher.</span><span class="sxs-lookup"><span data-stu-id="86906-801">This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-802">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-802">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-803"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-803"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86906-804">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-804">-or-</span></span>  
  
 <span data-ttu-id="86906-805">Ein Element des <paramref name="parameterTypes" />-Arrays ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-805">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-806">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-806">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineTypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineTypeInitializer () As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineTypeInitializer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-807">Definiert den Initialisierer für diesen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-807">Defines the initializer for this type.</span></span></summary>
        <returns><span data-ttu-id="86906-808">Gibt einen Typinitialisierer zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-808">Returns a type initializer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-809">Der erstellte Initialisierer ist immer öffentlich.</span><span class="sxs-lookup"><span data-stu-id="86906-809">The initializer created is always public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-810">Im folgenden Codebeispiel wird veranschaulicht, wie eine Initialisierung Konstruktor mit `DefineTypeInitializer`.</span><span class="sxs-lookup"><span data-stu-id="86906-810">The following code sample demonstrates how to create an initialization constructor using `DefineTypeInitializer`.</span></span>  
  
 [!code-cpp[TypeBuilder_Properties1#3](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Properties1/CPP/typebuilder_properties.cpp#3)]
 [!code-csharp[TypeBuilder_Properties1#3](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Properties1/CS/typebuilder_properties.cs#3)]
 [!code-vb[TypeBuilder_Properties1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Properties1/VB/typebuilder_properties.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-811">Der enthaltende Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-811">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineUninitializedData">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineUninitializedData (string name, int size, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineUninitializedData(string name, int32 size, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineUninitializedData (name As String, size As Integer, attributes As FieldAttributes) As FieldBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineUninitializedData(System::String ^ name, int size, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-812">Der Name, der zum Verweisen auf die Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="86906-812">The name used to refer to the data.</span></span> <span data-ttu-id="86906-813"><c>name</c> darf keine eingebetteten NULL-Werte enthalten.</span><span class="sxs-lookup"><span data-stu-id="86906-813"><c>name</c> cannot contain embedded nulls.</span></span></param>
        <param name="size"><span data-ttu-id="86906-814">Die Größe des Datenfelds.</span><span class="sxs-lookup"><span data-stu-id="86906-814">The size of the data field.</span></span></param>
        <param name="attributes"><span data-ttu-id="86906-815">Die Attribute für das Feld.</span><span class="sxs-lookup"><span data-stu-id="86906-815">The attributes for the field.</span></span></param>
        <summary><span data-ttu-id="86906-816">Definiert das initialisierte Datenfeld im <see langword=".sdata" />-Abschnitt der portierbaren ausführbaren Datei (Portable Executable, PE).</span><span class="sxs-lookup"><span data-stu-id="86906-816">Defines an uninitialized data field in the <see langword=".sdata" /> section of the portable executable (PE) file.</span></span></summary>
        <returns><span data-ttu-id="86906-817">Ein Feld zum Verweisen auf die Daten.</span><span class="sxs-lookup"><span data-stu-id="86906-817">A field to reference the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-818">Das Feld, das Sie mit dieser Methode erstellen, werden `static`, selbst wenn Sie nicht einschließen, `FieldAttributes.Static` in der `attributes` Parameter.</span><span class="sxs-lookup"><span data-stu-id="86906-818">The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-819">Das folgende Codebeispiel veranschaulicht die Verwendung von `DefineUninitializedData` initialisierte Datenfeld in einem dynamischen Typ zu erstellen:</span><span class="sxs-lookup"><span data-stu-id="86906-819">The following code sample demonstrates the use of `DefineUninitializedData` to create an uninitialized data field in a dynamic type:</span></span>  
  
 [!code-cpp[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/CPP/typebuilder_defineuninitializeddata.cpp#1)]
 [!code-csharp[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/CS/typebuilder_defineuninitializeddata.cs#1)]
 [!code-vb[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/VB/typebuilder_defineuninitializeddata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-820">Die Länge von <paramref name="name" /> ist 0 (null).</span><span class="sxs-lookup"><span data-stu-id="86906-820">Length of <paramref name="name" /> is zero.</span></span>  
  
 <span data-ttu-id="86906-821">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-821">-or-</span></span>  
  
 <span data-ttu-id="86906-822"><paramref name="size" /> ist kleiner gleich 0 oder größer gleich 0x003f0000.</span><span class="sxs-lookup"><span data-stu-id="86906-822"><paramref name="size" /> is less than or equal to zero, or greater than or equal to 0x003f0000.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-823"><paramref name="name" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-823"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-824">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-824">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-825">Ruft den vollständigen Pfad dieses Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-825">Retrieves the full path of this type.</span></span></summary>
        <value><span data-ttu-id="86906-826">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-826">Read-only.</span></span> <span data-ttu-id="86906-827">Ruft den vollständigen Pfad dieses Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-827">Retrieves the full path of this type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-828">Das zurückgegebene Format ist "einschließenderTypVollständigerName + geschachtelterTypname" für geschachtelte Typen und "Typname" für den nicht geschachtelten Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-828">The returned format is "enclosingTypeFullName+nestedTypeName" for nested types and "typeName" for non-nested types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-829">Ruft einen Wert ab, der die Kovarianz und die speziellen Einschränkungen des aktuellen generischen Typparameters angibt.</span><span class="sxs-lookup"><span data-stu-id="86906-829">Gets a value that indicates the covariance and special constraints of the current generic type parameter.</span></span></summary>
        <value><span data-ttu-id="86906-830">Eine bitweise Kombination von <see cref="T:System.Reflection.GenericParameterAttributes" />-Werten, die die Kovarianz und die speziellen Einschränkungen des aktuellen generischen Typparameters beschreiben.</span><span class="sxs-lookup"><span data-stu-id="86906-830">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="86906-831">Wenn Code ausgeben, wird durch ein generischen Typparameter dargestellt eine <xref:System.Reflection.Emit.GenericTypeParameterBuilder> Objekt und keine <xref:System.Reflection.Emit.TypeBuilder> Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-831">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public override int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-832">Ruft die Position eines Typparameters in der Typparameterliste des generischen Typs ab, der den Parameter deklariert hat.</span><span class="sxs-lookup"><span data-stu-id="86906-832">Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.</span></span></summary>
        <value><span data-ttu-id="86906-833">Die Position des Typparameters in der Typparameterliste des generischen Typs, der den Parameter deklariert hat, wenn das aktuelle <see cref="T:System.Reflection.Emit.TypeBuilder" />-Objekt einen generischen Typparameter darstellt, andernfalls nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="86906-833">If the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="86906-834">Wenn Code ausgeben, wird durch ein generischen Typparameter dargestellt eine <xref:System.Reflection.Emit.GenericTypeParameterBuilder> Objekt und keine <xref:System.Reflection.Emit.TypeBuilder> Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-834">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="86906-835">Wenn die aktuelle <xref:System.Reflection.Emit.TypeBuilder> stellt keinen generischen Typparameter dar. der Wert dieser Eigenschaft ist nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="86906-835">If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent a generic type parameter, the value of this property is undefined.</span></span> <span data-ttu-id="86906-836">Verwenden der <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> -Eigenschaft können Sie bestimmen, ob die aktuelle <xref:System.Reflection.Emit.TypeBuilder> einen generischen Typparameter darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-836">Use the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property to determine whether the current <xref:System.Reflection.Emit.TypeBuilder> represents a generic type parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public override Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public override int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetArrayRank();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public static System.Reflection.ConstructorInfo GetConstructor (Type type, System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.ConstructorInfo GetConstructor(class System.Type type, class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::ConstructorInfo ^ GetConstructor(Type ^ type, System::Reflection::ConstructorInfo ^ constructor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="86906-837">Der konstruierte generische Typ, dessen Konstruktor zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="86906-837">The constructed generic type whose constructor is returned.</span></span></param>
        <param name="constructor"><span data-ttu-id="86906-838">Ein Konstruktor für die generische Typdefinition von <c>type</c>, die angibt, welcher Konstruktor von <c>type</c> zurückgegeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-838">A constructor on the generic type definition of <c>type</c>, which specifies which constructor of <c>type</c> to return.</span></span></param>
        <summary><span data-ttu-id="86906-839">Gibt den Konstruktor des angegebenen konstruierten generischen Typs zurück, der dem angegebenen Konstruktor der generischen Typdefinition entspricht.</span><span class="sxs-lookup"><span data-stu-id="86906-839">Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.</span></span></summary>
        <returns><span data-ttu-id="86906-840">Ein <see cref="T:System.Reflection.ConstructorInfo" />-Objekt, das den Konstruktor von <paramref name="type" /> entsprechend <paramref name="constructor" /> darstellt und einen Konstruktor angibt, der zur generischen Typdefinition von <paramref name="type" /> gehört.</span><span class="sxs-lookup"><span data-stu-id="86906-840">A <see cref="T:System.Reflection.ConstructorInfo" /> object that represents the constructor of <paramref name="type" /> corresponding to <paramref name="constructor" />, which specifies a constructor belonging to the generic type definition of <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-841">Die <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> Methode bietet eine Möglichkeit zum Abrufen einer <xref:System.Reflection.ConstructorInfo> Objekt, das einen Konstruktor, der einen konstruierten generischen Typ darstellt, dessen Definition eines generischen Typs wird durch, eine <xref:System.Reflection.Emit.TypeBuilder> Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-841">The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method provides a way to get a <xref:System.Reflection.ConstructorInfo> object that represents a constructor of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="86906-842">Nehmen wir beispielsweise an, Sie haben eine <xref:System.Reflection.Emit.TypeBuilder> -Objekt, das den Typ darstellt, `G<T>` in C#-Syntax (`G(Of T)` in Visual Basic `generic <T> ref class G` in C++) und ein <xref:System.Reflection.Emit.ConstructorBuilder> Objekt, das einen Konstruktor darstellt `G<T>`.</span><span class="sxs-lookup"><span data-stu-id="86906-842">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.ConstructorBuilder> object that represents a constructor of `G<T>`.</span></span> <span data-ttu-id="86906-843">Nehmen wir an, die `G<T>` verfügt über eine generische Methode mit Typparameter `U` , erstellt eine Instanz des konstruierten Typs `G<U>`.</span><span class="sxs-lookup"><span data-stu-id="86906-843">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>`.</span></span> <span data-ttu-id="86906-844">Der Code zum Erstellen einer Instanz des konstruierten Typs ausgeben zu können, müssen Sie eine <xref:System.Reflection.ConstructorInfo> Objekt, das den Konstruktor dieses darstellt konstruierter Typ – also erstellt, die eine Instanz des `G<U>`.</span><span class="sxs-lookup"><span data-stu-id="86906-844">In order to emit the code to create an instance of the constructed type, you need a <xref:System.Reflection.ConstructorInfo> object that represents the constructor of this constructed type — in other words, that creates an instance of `G<U>`.</span></span> <span data-ttu-id="86906-845">Zu diesem Zweck rufen Sie zuerst die <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> Methode für die <xref:System.Reflection.Emit.TypeBuilder> -Objekt angeben der <xref:System.Reflection.Emit.GenericTypeParameterBuilder> Objekt, das darstellt `U` als Typargument.</span><span class="sxs-lookup"><span data-stu-id="86906-845">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="86906-846">Rufen Sie anschließend die <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> bei dem Rückgabewert der Methode der <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> Methode als Parameter `type` und <xref:System.Reflection.Emit.ConstructorBuilder> -Objekt, das den Konstruktor darstellt `G<U>` als Parameter `constructor`.</span><span class="sxs-lookup"><span data-stu-id="86906-846">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.ConstructorBuilder> object that represents the constructor of `G<U>` as parameter `constructor`.</span></span> <span data-ttu-id="86906-847">Der Rückgabewert ist der <xref:System.Reflection.ConstructorInfo> müssen Sie die Ausgabe des Funktionsaufrufs-Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-847">The return value is the <xref:System.Reflection.ConstructorInfo> object you need to emit the function call.</span></span> <span data-ttu-id="86906-848">Im Codebeispiel wird dieses Szenario veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="86906-848">The code example demonstrates this scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-849">Das folgende Codebeispiel enthält Quellcode für eine generische Klasse namens `Sample` , die über einen Typparameter, der mit dem Namen verfügt `T`.</span><span class="sxs-lookup"><span data-stu-id="86906-849">The following code example contains source code for a generic class named `Sample` that has a type parameter named `T`.</span></span> <span data-ttu-id="86906-850">Die Klasse verfügt über ein Feld mit dem Namen `Field`, des Typs `T`, und eine generische Methode mit dem Namen `GM` des eigenen Typparameters mit dem Namen `U`.</span><span class="sxs-lookup"><span data-stu-id="86906-850">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="86906-851">Methode `GM` erstellt eine Instanz des `Sample`, Ersetzen des eigenen Typparameters `U` für den Typparameter von `Sample`, und speichert dessen Eingabeparameter in `Field`.</span><span class="sxs-lookup"><span data-stu-id="86906-851">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="86906-852">Dieser Code wird kompiliert, aber nicht verwendet. sehen Sie es mit der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) und vergleichen Sie sie mit der Code ausgegeben, die von Klasse `Example`.</span><span class="sxs-lookup"><span data-stu-id="86906-852">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="86906-853">Der Code in der Klasse `Example` veranschaulicht die Verwendung von der <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> Methode, um generische Code ausgeben.</span><span class="sxs-lookup"><span data-stu-id="86906-853">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method to emit generic code.</span></span> <span data-ttu-id="86906-854">Die `Main` -Methode der Klasse `Example` erstellt eine dynamische Assembly mit einer Klasse mit dem Namen `Sample` und verwendet die <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> Methode, um es generische machen, indem Sie einen Typparameter, der mit dem Namen `T`.</span><span class="sxs-lookup"><span data-stu-id="86906-854">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample` and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="86906-855">Einen Standardkonstruktor und ein Feld mit dem Namen `Field`, des Typs `T`, Klasse hinzugefügt werden `Sample`.</span><span class="sxs-lookup"><span data-stu-id="86906-855">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="86906-856">Eine Methode `GM` hinzugefügt und in einer generischen Methode umgewandelt werden, mithilfe der <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-856">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="86906-857">Der Typparameter der `GM` lautet `U`.</span><span class="sxs-lookup"><span data-stu-id="86906-857">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="86906-858">Nach dem Definieren des Typparameters die Signatur der `GM` hinzugefügt wird, mithilfe der <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-858">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="86906-859">Es gibt keinen Rückgabetyp und keine erforderlichen oder benutzerdefinierten Modifizierer, d. h. alle Parameter dieser Methode sind `null` außer `parameterTypes`; `parameterTypes` legt den Typ der einzige Parameter von der Methode, um `U`, generischen Typparameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-859">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="86906-860">Der Text der Methode erstellt eine Instanz des konstruierten Typs `Sample<U>` (`Sample(Of U)` in Visual Basic), weist der Methodenparameter, damit `Field`, und gibt dann den Wert des `Field`.</span><span class="sxs-lookup"><span data-stu-id="86906-860">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="86906-861">Die <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> Methode dient zum Erstellen einer <xref:System.Reflection.ConstructorInfo> , die den Standardkonstruktor des konstruierten generischen Typs darstellt `Sample<U>` in der <xref:System.Reflection.Emit.OpCodes.Newobj?displayProperty=nameWithType> -Anweisung, die die Instanz erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-861">The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method is used to create a <xref:System.Reflection.ConstructorInfo> that represents the default constructor of the constructed generic type `Sample<U>` in the <xref:System.Reflection.Emit.OpCodes.Newobj?displayProperty=nameWithType> instruction that creates the instance.</span></span>  
  
 <span data-ttu-id="86906-862">Ein dummy-Typ wird definiert, um die Einstiegspunktmethode halten `Main`.</span><span class="sxs-lookup"><span data-stu-id="86906-862">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="86906-863">Im Text des `Main`, die statische `GM` Methode wird aufgerufen, für den konstruierten generischen Typ `Sample<int>` (`Sample(Of Integer)` in Visual Basic), mit dem Typ <xref:System.String> ersetzt `U`.</span><span class="sxs-lookup"><span data-stu-id="86906-863">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span>  
  
 <span data-ttu-id="86906-864">Wenn das Codebeispiel ausgeführt wird, speichert es die ausgegebene Assembly als TypeBuilderGetFieldExample.exe.</span><span class="sxs-lookup"><span data-stu-id="86906-864">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="86906-865">Sie können TypeBuilderGetFieldExample.exe ausführen, und Sie können die [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) zum Vergleichen des ausgegebenen Codes durch den Code für die `Sample` -Klasse, die in das Codebeispiel selbst kompiliert wird.</span><span class="sxs-lookup"><span data-stu-id="86906-865">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86906-866"><paramref name="type" /> stellt keinen generischen Typ dar.</span><span class="sxs-lookup"><span data-stu-id="86906-866"><paramref name="type" /> does not represent a generic type.</span></span>  
  
 <span data-ttu-id="86906-867">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-867">-or-</span></span>  
  
 <span data-ttu-id="86906-868"><paramref name="type" /> ist nicht vom Typ <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="86906-868"><paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="86906-869">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-869">-or-</span></span>  
  
 <span data-ttu-id="86906-870">Der deklarierende Typ von <paramref name="constructor" /> ist keine generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="86906-870">The declaring type of <paramref name="constructor" /> is not a generic type definition.</span></span>  
  
 <span data-ttu-id="86906-871">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-871">-or-</span></span>  
  
 <span data-ttu-id="86906-872">Der deklarierende Typ von <paramref name="constructor" /> ist nicht die generische Typdefinition von <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="86906-872">The declaring type of <paramref name="constructor" /> is not the generic type definition of <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="86906-873">Hierbei muss es sich um ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> handeln, wie bei <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</span><span class="sxs-lookup"><span data-stu-id="86906-873">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="86906-874">Gibt, wie angegeben, ein Array von <see cref="T:System.Reflection.ConstructorInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Konstruktoren darstellen, die für diese Klasse definiert sind.</span><span class="sxs-lookup"><span data-stu-id="86906-874">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the public and non-public constructors defined for this class, as specified.</span></span></summary>
        <returns><span data-ttu-id="86906-875">Gibt ein Array von <see cref="T:System.Reflection.ConstructorInfo" />-Objekten zurück, die die angegebenen für diese Klasse definierten Konstruktoren darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-875">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the specified constructors defined for this class.</span></span> <span data-ttu-id="86906-876">Wenn keine Konstruktoren definiert sind, wird ein leeres Array zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-876">If no constructors are defined, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-877">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-877">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-878">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-878">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-879">Gibt die für diesen Typ definierten benutzerdefinierten Attribute zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-879">Returns the custom attributes defined for this type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="86906-880">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-880">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="86906-881">Gibt alle für diesen Typ definierten benutzerdefinierten Attribute zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-881">Returns all the custom attributes defined for this type.</span></span></summary>
        <returns><span data-ttu-id="86906-882">Gibt ein Objektarray zurück, das alle benutzerdefinierten Attribute dieses Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-882">Returns an array of objects representing all the custom attributes of this type.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-883">Diese Methode wird bei unvollständigen Typen derzeit nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-883">This method is not currently supported for incomplete types.</span></span> <span data-ttu-id="86906-884">Rufen Sie den Typ mithilfe von <see cref="M:System.Type.GetType" /> ab, und rufen Sie <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> für den zurückgegebenen <see cref="T:System.Type" /> auf.</span><span class="sxs-lookup"><span data-stu-id="86906-884">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="86906-885">Der Typ des zu suchenden Attributs.</span><span class="sxs-lookup"><span data-stu-id="86906-885">The type of attribute to search for.</span></span> <span data-ttu-id="86906-886">Nur Attribute, die diesem Typ zugeordnet werden können, werden zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-886">Only attributes that are assignable to this type are returned.</span></span></param>
        <param name="inherit"><span data-ttu-id="86906-887">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-887">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="86906-888">Gibt alle benutzerdefinierten Attribute des aktuellen Typs zurück, die einem angegebenen Typ zugewiesen werden können.</span><span class="sxs-lookup"><span data-stu-id="86906-888">Returns all the custom attributes of the current type that are assignable to a specified type.</span></span></summary>
        <returns><span data-ttu-id="86906-889">Ein Array benutzerdefinierter Attribute, die für den aktuellen Typ definiert sind.</span><span class="sxs-lookup"><span data-stu-id="86906-889">An array of custom attributes defined on the current type.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-890">Diese Methode wird für unvollständige Typen derzeit nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-890">This method is not currently supported for incomplete types.</span></span> <span data-ttu-id="86906-891">Rufen Sie den Typ mithilfe von <see cref="M:System.Type.GetType" /> ab, und rufen Sie <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> für den zurückgegebenen <see cref="T:System.Type" /> auf.</span><span class="sxs-lookup"><span data-stu-id="86906-891">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-892"><paramref name="attributeType" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-892"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-893">Der Typ muss ein vom zugrunde liegenden Laufzeitsystem bereitgestellter Typ sein.</span><span class="sxs-lookup"><span data-stu-id="86906-893">The type must be a type provided by the underlying runtime system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public override Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetElementType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-894">Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="86906-894">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="86906-895">Diese Methode wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-895">This method is not supported.</span></span> <span data-ttu-id="86906-896">Es wird kein Wert zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-896">No value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-897">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-897">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-898">Diese Methode wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-898">This method is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-899">Der Name des Ereignisses, nach dem gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-899">The name of the event to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="86906-900">Eine bitweise Kombination von <see cref="T:System.Reflection.BindingFlags" />-Werten, die die Suche einschränkt.</span><span class="sxs-lookup"><span data-stu-id="86906-900">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limits the search.</span></span></param>
        <summary><span data-ttu-id="86906-901">Gibt das Ereignis mit dem angegebenen Namen zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-901">Returns the event with the specified name.</span></span></summary>
        <returns><span data-ttu-id="86906-902">Ein <see cref="T:System.Reflection.EventInfo" />-Objekt, das das von dem Typ mit dem angegebenen Namen deklarierte oder geerbte Ereignis darstellt, oder <see langword="null" />, wenn keine Übereinstimmungen gefunden wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-902">An <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name, or <see langword="null" /> if there are no matches.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-903">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-903">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-904">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-904">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-905">Gibt die vom aktuellen <see cref="T:System.Reflection.Emit.TypeBuilder" /> definierten Ereignisse zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-905">Returns the events defined by the current <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-906">Gibt die öffentlichen Ereignisse zurück, die von diesem Typ deklariert oder geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-906">Returns the public events declared or inherited by this type.</span></span></summary>
        <returns><span data-ttu-id="86906-907">Gibt ein Array von <see cref="T:System.Reflection.EventInfo" />-Objekten zurück, die die von diesem Typ deklarierten oder geerbten öffentlichen Ereignisse darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-907">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public events declared or inherited by this type.</span></span> <span data-ttu-id="86906-908">Wenn keine öffentlichen Ereignisse vorhanden sind, wird ein leeres Array zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-908">An empty array is returned if there are no public events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-909">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A> oder <xref:System.Reflection.Assembly.GetType%2A> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-909">Retrieve the type using <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-910">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-910">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="86906-911">Eine bitweise Kombination von <see cref="T:System.Reflection.BindingFlags" />-Werten, die die Suche einschränkt.</span><span class="sxs-lookup"><span data-stu-id="86906-911">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limits the search.</span></span></param>
        <summary><span data-ttu-id="86906-912">Gibt die öffentlichen und nicht öffentlichen Ereignisse zurück, die von diesem Typ deklariert werden.</span><span class="sxs-lookup"><span data-stu-id="86906-912">Returns the public and non-public events that are declared by this type.</span></span></summary>
        <returns><span data-ttu-id="86906-913">Gibt ein Array von <see cref="T:System.Reflection.EventInfo" />-Objekten zurück, die die von diesem Typ deklarierten oder geerbten Ereignisse darstellen, die den angegebenen Bindungsflags entsprechen.</span><span class="sxs-lookup"><span data-stu-id="86906-913">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the events declared or inherited by this type that match the specified binding flags.</span></span> <span data-ttu-id="86906-914">Wenn keine übereinstimmenden Ereignisse vorhanden sind, wird ein leeres Array zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-914">An empty array is returned if there are no matching events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-915">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-915">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-916">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-916">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-917">Gibt ein vom aktuellen <see cref="T:System.Reflection.Emit.TypeBuilder" /> definiertes Feld zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-917">Returns a field defined by the current <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-918">Der Name des abzurufenden Felds.</span><span class="sxs-lookup"><span data-stu-id="86906-918">The name of the field to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="86906-919">Hierbei muss es sich um ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> handeln, wie bei <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</span><span class="sxs-lookup"><span data-stu-id="86906-919">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="86906-920">Gibt das vom angegebenen Namen angegebene Feld zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-920">Returns the field specified by the given name.</span></span></summary>
        <returns><span data-ttu-id="86906-921">Gibt das <see cref="T:System.Reflection.FieldInfo" />-Objekt zurück, das das Feld darstellt, das von diesem Typ mit dem angegebenen Namen und dem öffentlichen oder nicht öffentlichen Modifizierer deklariert oder geerbt wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-921">Returns the <see cref="T:System.Reflection.FieldInfo" /> object representing the field declared or inherited by this type with the specified name and public or non-public modifier.</span></span> <span data-ttu-id="86906-922">Wenn keine Übereinstimmungen vorhanden sind, wird <see langword="null" /> zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-922">If there are no matches then <see langword="null" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-923">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-923">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-924">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-924">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetField (Type type, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetField(class System.Type type, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::FieldInfo ^ GetField(Type ^ type, System::Reflection::FieldInfo ^ field);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="86906-925">Der konstruierte generische Typ, dessen Feld zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="86906-925">The constructed generic type whose field is returned.</span></span></param>
        <param name="field"><span data-ttu-id="86906-926">Ein Feld zur generischen Typdefinition von <c>type</c>, das angibt, welches Feld von <c>type</c> zurückgegeben werden muss.</span><span class="sxs-lookup"><span data-stu-id="86906-926">A field on the generic type definition of <c>type</c>, which specifies which field of <c>type</c> to return.</span></span></param>
        <summary><span data-ttu-id="86906-927">Gibt das Feld des angegebenen konstruierten generischen Typs zurück, der dem angegebenen Feld der generischen Typdefinition entspricht.</span><span class="sxs-lookup"><span data-stu-id="86906-927">Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.</span></span></summary>
        <returns><span data-ttu-id="86906-928">Ein <see cref="T:System.Reflection.FieldInfo" />-Objekt, das das Feld von <paramref name="type" /> darstellt, das <paramref name="field" /> entspricht, welches ein Feld angibt, das zur generischen Typdefinition von <paramref name="type" /> gehört.</span><span class="sxs-lookup"><span data-stu-id="86906-928">A <see cref="T:System.Reflection.FieldInfo" /> object that represents the field of <paramref name="type" /> corresponding to <paramref name="field" />, which specifies a field belonging to the generic type definition of <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-929">Die <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> Methode bietet eine Möglichkeit zum Abrufen einer <xref:System.Reflection.FieldInfo> Objekt, das ein Feld eines konstruierten generischen Typs darstellt, dessen Definition eines generischen Typs wird durch, eine <xref:System.Reflection.Emit.TypeBuilder> Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-929">The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method provides a way to get a <xref:System.Reflection.FieldInfo> object that represents a field of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="86906-930">Nehmen wir beispielsweise an, Sie haben eine <xref:System.Reflection.Emit.TypeBuilder> -Objekt, das den Typ darstellt, `G<T>` in C#-Syntax (`G(Of T)` in Visual Basic `generic <T> ref class G` in C++) und ein <xref:System.Reflection.Emit.FieldBuilder> -Objekt, das ein Feld darstellt `public T F` in C#-Syntax (`Public F As T`in Visual Basic `public: T F` in C++), wird durch definiert `G<T>`.</span><span class="sxs-lookup"><span data-stu-id="86906-930">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.FieldBuilder> object that represents a field `public T F` in C# syntax (`Public F As T` in Visual Basic, `public: T F` in C++) that is defined by `G<T>`.</span></span> <span data-ttu-id="86906-931">Nehmen wir an, die `G<T>` verfügt über eine generische Methode mit Typparameter `U` , erstellt eine Instanz des konstruierten Typs `G<U>` und Aufrufe Feld `F` für diese Instanz.</span><span class="sxs-lookup"><span data-stu-id="86906-931">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls field `F` on that instance.</span></span> <span data-ttu-id="86906-932">Damit des Funktionsaufrufs zu öffnen, müssen Sie eine <xref:System.Reflection.FieldInfo> Objekt, das darstellt `F` auf den konstruierten Typ – anders gesagt, ist vom Typ `U` anstatt Typ `T`.</span><span class="sxs-lookup"><span data-stu-id="86906-932">In order to emit the function call, you need a <xref:System.Reflection.FieldInfo> object that represents `F` on the constructed type — in other words, that is of type `U` rather than type `T`.</span></span> <span data-ttu-id="86906-933">Zu diesem Zweck rufen Sie zuerst die <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> Methode für die <xref:System.Reflection.Emit.TypeBuilder> -Objekt angeben der <xref:System.Reflection.Emit.GenericTypeParameterBuilder> Objekt, das darstellt `U` als Typargument.</span><span class="sxs-lookup"><span data-stu-id="86906-933">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="86906-934">Rufen Sie anschließend die <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> bei dem Rückgabewert der Methode der <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> Methode als Parameter `type` und <xref:System.Reflection.Emit.FieldBuilder> Objekt, das darstellt `F` als Parameter `field`.</span><span class="sxs-lookup"><span data-stu-id="86906-934">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.FieldBuilder> object that represents `F` as parameter `field`.</span></span> <span data-ttu-id="86906-935">Der Rückgabewert ist der <xref:System.Reflection.FieldInfo> müssen Sie die Ausgabe des Funktionsaufrufs-Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-935">The return value is the <xref:System.Reflection.FieldInfo> object you need to emit the function call.</span></span> <span data-ttu-id="86906-936">Im Codebeispiel wird dieses Szenario veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="86906-936">The code example demonstrates this scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-937">Das folgende Codebeispiel enthält Quellcode für eine generische Klasse namens Beispiel, das einen Typparameter, der mit dem Namen `T`.</span><span class="sxs-lookup"><span data-stu-id="86906-937">The following code example contains source code for a generic class named Sample that has a type parameter named `T`.</span></span> <span data-ttu-id="86906-938">Die Klasse verfügt über ein Feld mit dem Namen `Field`, des Typs `T`, und eine generische Methode mit dem Namen `GM` des eigenen Typparameters mit dem Namen `U`.</span><span class="sxs-lookup"><span data-stu-id="86906-938">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="86906-939">Methode `GM` erstellt eine Instanz des `Sample`, Ersetzen des eigenen Typparameters `U` für den Typparameter von `Sample`, und speichert dessen Eingabeparameter in `Field`.</span><span class="sxs-lookup"><span data-stu-id="86906-939">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="86906-940">Dieser Code wird kompiliert, aber nicht verwendet. sehen Sie es mit der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) und vergleichen Sie sie mit der Code ausgegeben, die von Klasse `Example`.</span><span class="sxs-lookup"><span data-stu-id="86906-940">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="86906-941">Der Code in der Klasse `Example` veranschaulicht die Verwendung von der <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> Methode, um generische Code ausgeben.</span><span class="sxs-lookup"><span data-stu-id="86906-941">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method to emit generic code.</span></span> <span data-ttu-id="86906-942">Die `Main` -Methode der Klasse `Example` erstellt eine dynamische Assembly mit einer Klasse mit dem Namen `Sample`, und verwendet die <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> Methode, um es generische machen, indem Sie einen Typparameter, der mit dem Namen `T`.</span><span class="sxs-lookup"><span data-stu-id="86906-942">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample`, and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="86906-943">Einen Standardkonstruktor und ein Feld mit dem Namen `Field`, des Typs `T`, Klasse hinzugefügt werden `Sample`.</span><span class="sxs-lookup"><span data-stu-id="86906-943">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="86906-944">Eine Methode `GM` hinzugefügt und in einer generischen Methode umgewandelt werden, mithilfe der <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-944">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="86906-945">Der Typparameter der `GM` lautet `U`.</span><span class="sxs-lookup"><span data-stu-id="86906-945">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="86906-946">Nach dem Definieren des Typparameters die Signatur der `GM` hinzugefügt wird, mithilfe der <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-946">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="86906-947">Es gibt keinen Rückgabetyp und keine erforderlichen oder benutzerdefinierten Modifizierer, d. h. alle Parameter dieser Methode sind `null` außer `parameterTypes`; `parameterTypes` legt den Typ der einzige Parameter von der Methode, um `U`, generischen Typparameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-947">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="86906-948">Der Text der Methode erstellt eine Instanz des konstruierten Typs `Sample<U>` (`Sample(Of U)` in Visual Basic), weist der Methodenparameter, damit `Field`, und gibt dann den Wert des `Field`.</span><span class="sxs-lookup"><span data-stu-id="86906-948">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="86906-949">Die <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> Methode dient zum Erstellen einer <xref:System.Reflection.FieldInfo> , die das Feld des konstruierten generischen Typs darstellt `Sample<U>` in der <xref:System.Reflection.Emit.OpCodes.Stfld?displayProperty=nameWithType> und <xref:System.Reflection.Emit.OpCodes.Ldfld?displayProperty=nameWithType> Anweisungen.</span><span class="sxs-lookup"><span data-stu-id="86906-949">The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method is used to create a <xref:System.Reflection.FieldInfo> that represents the field of the constructed generic type `Sample<U>` in the <xref:System.Reflection.Emit.OpCodes.Stfld?displayProperty=nameWithType> and <xref:System.Reflection.Emit.OpCodes.Ldfld?displayProperty=nameWithType> instructions.</span></span>  
  
 <span data-ttu-id="86906-950">Ein dummy-Typ wird definiert, um die Einstiegspunktmethode halten `Main`.</span><span class="sxs-lookup"><span data-stu-id="86906-950">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="86906-951">Im Text des `Main`, die statische `GM` Methode wird aufgerufen, für den konstruierten generischen Typ `Sample<int>` (`Sample(Of Integer)` in Visual Basic), mit dem Typ <xref:System.String> ersetzt `U`.</span><span class="sxs-lookup"><span data-stu-id="86906-951">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span>  
  
 <span data-ttu-id="86906-952">Wenn das Codebeispiel ausgeführt wird, speichert es die ausgegebene Assembly als TypeBuilderGetFieldExample.exe.</span><span class="sxs-lookup"><span data-stu-id="86906-952">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="86906-953">Sie können TypeBuilderGetFieldExample.exe ausführen, und Sie können die [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) zum Vergleichen des ausgegebenen Codes durch den Code für die `Sample` -Klasse, die in das Codebeispiel selbst kompiliert wird.</span><span class="sxs-lookup"><span data-stu-id="86906-953">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86906-954"><paramref name="type" /> stellt keinen generischen Typ dar.</span><span class="sxs-lookup"><span data-stu-id="86906-954"><paramref name="type" /> does not represent a generic type.</span></span>  
  
 <span data-ttu-id="86906-955">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-955">-or-</span></span>  
  
 <span data-ttu-id="86906-956"><paramref name="type" /> ist nicht vom Typ <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="86906-956"><paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="86906-957">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-957">-or-</span></span>  
  
 <span data-ttu-id="86906-958">Der deklarierende Typ von <paramref name="field" /> ist keine generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="86906-958">The declaring type of <paramref name="field" /> is not a generic type definition.</span></span>  
  
 <span data-ttu-id="86906-959">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-959">-or-</span></span>  
  
 <span data-ttu-id="86906-960">Der deklarierende Typ von <paramref name="field" /> ist nicht die generische Typdefinition von <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="86906-960">The declaring type of <paramref name="field" /> is not the generic type definition of <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="86906-961">Hierbei muss es sich um ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> handeln: <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</span><span class="sxs-lookup"><span data-stu-id="86906-961">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="86906-962">Gibt die öffentlichen und nicht öffentlichen Felder zurück, die von diesem Typ deklariert werden.</span><span class="sxs-lookup"><span data-stu-id="86906-962">Returns the public and non-public fields that are declared by this type.</span></span></summary>
        <returns><span data-ttu-id="86906-963">Gibt ein Array von <see cref="T:System.Reflection.FieldInfo" />-Objekten zurück, die die von diesem Typ deklarierten oder geerbten öffentlichen und nicht öffentlichen Felder darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-963">Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the public and non-public fields declared or inherited by this type.</span></span> <span data-ttu-id="86906-964">Wenn keine Felder vorhanden sind, wird ein leeres Array zurückgegeben, wie angegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-964">An empty array is returned if there are no fields, as specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-965">Die <xref:System.Reflection.Emit.TypeBuilder.GetFields%2A> Methode gibt keinen zurück Felder in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="86906-965">The <xref:System.Reflection.Emit.TypeBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="86906-966">Der Code muss nicht auf die Reihenfolge, in der Felder zurückgegeben werden, abhängen, da dieser Reihenfolge variieren kann.</span><span class="sxs-lookup"><span data-stu-id="86906-966">Your code must not depend on the order in which fields are returned, because that order can vary.</span></span>  
  
 <span data-ttu-id="86906-967">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-967">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-968">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-968">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-969">Gibt ein Array von <see cref="T:System.Type" />-Objekten zurück, die die Typargumente eines generischen Typs oder die Typargumente einer generischen Typdefinition darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-969">Returns an array of <see cref="T:System.Type" /> objects representing the type arguments of a generic type or the type parameters of a generic type definition.</span></span></summary>
        <returns><span data-ttu-id="86906-970">Ein Array von <see cref="T:System.Type" />-Objekten.</span><span class="sxs-lookup"><span data-stu-id="86906-970">An array of <see cref="T:System.Type" /> objects.</span></span> <span data-ttu-id="86906-971">Die Elemente des Arrays stellen die Typargumente eines generischen Typs oder die Typparameter einer generischen Typdefinition dar.</span><span class="sxs-lookup"><span data-stu-id="86906-971">The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-972">Die Elemente des zurückgegebenen Arrays sind in der Reihenfolge, in der sie in der Liste mit Typparametern für die generische Typdefinition angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="86906-972">The elements of the returned array are in the order in which they appear in the list of type parameters for the generic type definition.</span></span>  
  
 <span data-ttu-id="86906-973">Ein <xref:System.Reflection.Emit.TypeBuilder> -Objekt eine generische Typdefinition darstellt, wenn die <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> -Methode wurde verwendet, um generische Typparameter.</span><span class="sxs-lookup"><span data-stu-id="86906-973">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="86906-974">Diese Methode ruft die <xref:System.Reflection.Emit.GenericTypeParameterBuilder> Objekte, die die generischen Typparameter darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-974">This method retrieves the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects that represent the generic type parameters.</span></span>  
  
 <span data-ttu-id="86906-975">Weitere Informationen zu generischen Typen in der Reflektion und eine Liste der invarianten Bedingungen für Begriffe, die in generischen Reflektion, finden Sie unter der <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-975">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericArguments" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetGenericTypeDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-976">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das eine generische Typdefinition darstellt, aus der der aktuelle Typ abgerufen werden kann.</span><span class="sxs-lookup"><span data-stu-id="86906-976">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current type can be obtained.</span></span></summary>
        <returns><span data-ttu-id="86906-977">Ein <see cref="T:System.Type" />-Objekt, das eine generische Typdefinition darstellt, aus der der aktuelle Typ abgerufen werden kann.</span><span class="sxs-lookup"><span data-stu-id="86906-977">A <see cref="T:System.Type" /> object representing a generic type definition from which the current type can be obtained.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-978">Beim Aufrufen der <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> Methode auf eine <xref:System.Reflection.Emit.TypeBuilder> Objekt, für das die <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> -Eigenschaft gibt `true`, die <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> Eigenschaft gibt die aktuelle Instanz zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-978">If you call the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> object for which the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property returns `true`, the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> property returns the current instance.</span></span> <span data-ttu-id="86906-979">Ein <xref:System.Reflection.Emit.TypeBuilder> , stellt einen generischen Typ ist immer eine generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="86906-979">A <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type is always a generic type definition.</span></span>  
  
 <span data-ttu-id="86906-980">Bei Verwendung der <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> Methode zum Erstellen eines generischen Typs aus eine <xref:System.Reflection.Emit.TypeBuilder> -Objekt, das eine generische Typdefinition darstellt, mit der <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=nameWithType> Methode für den konstruierten Typ erhält wieder die <xref:System.Reflection.Emit.TypeBuilder> Objekt, das den generischen Typ darstellt Definition.</span><span class="sxs-lookup"><span data-stu-id="86906-980">If you used the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method to construct a generic type from a <xref:System.Reflection.Emit.TypeBuilder> object that represents a generic type definition, using the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=nameWithType> method on the constructed type gets back the <xref:System.Reflection.Emit.TypeBuilder> object that represents the generic type definition.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-981">Der aktuelle Typ ist nicht generisch.</span><span class="sxs-lookup"><span data-stu-id="86906-981">The current type is not generic.</span></span> <span data-ttu-id="86906-982">Das heißt, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> gibt <see langword="false" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-982">That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> returns <see langword="false" />.</span></span></exception>
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public override Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-983">Der Name der Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="86906-983">The name of the interface.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="86906-984">Wenn <see langword="true" />, wird bei der Suche die Groß- und Kleinschreibung nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="86906-984">If <see langword="true" />, the search is case-insensitive.</span></span> <span data-ttu-id="86906-985">Wenn <see langword="false" />, wird bei der Suche die Groß- und Kleinschreibung berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="86906-985">If <see langword="false" />, the search is case-sensitive.</span></span></param>
        <summary><span data-ttu-id="86906-986">Gibt die von dieser Klasse (direkt oder indirekt) implementierte Schnittstelle mit dem vollqualifizierten Namen zurück, der dem angegebenen Namen der Schnittstelle entspricht.</span><span class="sxs-lookup"><span data-stu-id="86906-986">Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.</span></span></summary>
        <returns><span data-ttu-id="86906-987">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das die implementierte Schnittstelle darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-987">Returns a <see cref="T:System.Type" /> object representing the implemented interface.</span></span> <span data-ttu-id="86906-988">Gibt NULL zurück, wenn kein mit der Schnittstelle übereinstimmender Name gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="86906-988">Returns null if no interface matching name is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-989">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-989">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-990">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-990">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="86906-991">Der <see cref="T:System.Type" /> der Schnittstelle, für den die Zuordnung abgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-991">The <see cref="T:System.Type" /> of the interface for which the mapping is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="86906-992">Gibt eine Schnittstellenzuordnung für die angeforderte Schnittstelle zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-992">Returns an interface mapping for the requested interface.</span></span></summary>
        <returns><span data-ttu-id="86906-993">Gibt die angeforderte Schnittstellenzuordnung zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-993">Returns the requested interface mapping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-994">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-994">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-995">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-995">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public override Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-996">Gibt ein Array aller für diesen Typ und die zugehörigen Basistypen implementierten Schnittstellen zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-996">Returns an array of all the interfaces implemented on this type and its base types.</span></span></summary>
        <returns><span data-ttu-id="86906-997">Gibt ein Array von <see cref="T:System.Type" />-Objekten zurück, die die implementierten Schnittstellen darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-997">Returns an array of <see cref="T:System.Type" /> objects representing the implemented interfaces.</span></span> <span data-ttu-id="86906-998">Wenn keine definiert sind, wird ein leeres Array zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-998">If none are defined, an empty array is returned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-999">Der Name des Members.</span><span class="sxs-lookup"><span data-stu-id="86906-999">The name of the member.</span></span></param>
        <param name="type"><span data-ttu-id="86906-1000">Der Typ des zurückzugebenden Members.</span><span class="sxs-lookup"><span data-stu-id="86906-1000">The type of the member to return.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="86906-1001">Hierbei muss es sich um ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> handeln, wie bei <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</span><span class="sxs-lookup"><span data-stu-id="86906-1001">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="86906-1002">Gibt alle öffentlichen und nicht öffentlichen Member zurück, die gemäß Angabe von diesem Typ deklariert oder geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-1002">Returns all the public and non-public members declared or inherited by this type, as specified.</span></span></summary>
        <returns><span data-ttu-id="86906-1003">Gibt ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten zurück, die die für diesen Typ definierten öffentlichen und nicht öffentlichen Member darstellen, wenn <paramref name="nonPublic" /> verwendet wird. Andernfalls werden nur die öffentlichen Member zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1003">Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public members are returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1004">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-1004">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1005">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-1005">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="86906-1006">Hierbei muss es sich um ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> handeln, z. B. um <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</span><span class="sxs-lookup"><span data-stu-id="86906-1006">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="86906-1007">Gibt alle Member für die öffentlichen und nicht öffentlichen Member zurück, die von diesem Typ deklariert oder geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-1007">Returns the members for the public and non-public members declared or inherited by this type.</span></span></summary>
        <returns><span data-ttu-id="86906-1008">Gibt ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten zurück, die die von diesem Typ deklarierten oder geerbten öffentlichen und nicht öffentlichen Member darstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-1008">Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members declared or inherited by this type.</span></span> <span data-ttu-id="86906-1009">Wenn keine übereinstimmenden Member vorhanden sind, wird ein leeres Array zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1009">An empty array is returned if there are no matching members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1010">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-1010">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1011">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-1011">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public static System.Reflection.MethodInfo GetMethod (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodInfo GetMethod(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::MethodInfo ^ GetMethod(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="86906-1012">Der konstruierte generische Typ, dessen Methode zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="86906-1012">The constructed generic type whose method is returned.</span></span></param>
        <param name="method"><span data-ttu-id="86906-1013">Eine Methode für die generische Typdefinition von <c>type</c>, die angibt, welche Methode von <c>type</c> zurückgegeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-1013">A method on the generic type definition of <c>type</c>, which specifies which method of <c>type</c> to return.</span></span></param>
        <summary><span data-ttu-id="86906-1014">Gibt die Methode des angegebenen konstruierten generischen Typs zurück, der der angegebenen Methode der generischen Typdefinition entspricht.</span><span class="sxs-lookup"><span data-stu-id="86906-1014">Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.</span></span></summary>
        <returns><span data-ttu-id="86906-1015">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Methode von <paramref name="type" /> entsprechend <paramref name="method" /> darstellt und eine Methode angibt, die zur generischen Typdefinition von <paramref name="type" /> gehört.</span><span class="sxs-lookup"><span data-stu-id="86906-1015">A <see cref="T:System.Reflection.MethodInfo" /> object that represents the method of <paramref name="type" /> corresponding to <paramref name="method" />, which specifies a method belonging to the generic type definition of <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1016">Die <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> Methode bietet eine Möglichkeit zum Abrufen einer <xref:System.Reflection.MethodInfo> Objekt, das eine Methode einen konstruierten generischen Typ darstellt, dessen Definition eines generischen Typs wird durch, eine <xref:System.Reflection.Emit.TypeBuilder> Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-1016">The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method provides a way to get a <xref:System.Reflection.MethodInfo> object that represents a method of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="86906-1017">Nehmen wir beispielsweise an, Sie haben eine <xref:System.Reflection.Emit.TypeBuilder> -Objekt, das den Typ darstellt `G<T>` in C#-Syntax (`G(Of T)` in Visual Basic `generic <T> ref class G` in C++) und ein <xref:System.Reflection.Emit.MethodBuilder> Objekt zur Darstellung einer Methode `T M()` in C#-Syntax (`Function M() As T`in Visual Basic `T M()` in C++), wird durch definiert `G<T>`.</span><span class="sxs-lookup"><span data-stu-id="86906-1017">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.MethodBuilder> object that represents a method `T M()` in C# syntax (`Function M() As T` in Visual Basic, `T M()` in C++) that is defined by `G<T>`.</span></span> <span data-ttu-id="86906-1018">Nehmen wir an, die `G<T>` verfügt über eine generische Methode mit Typparameter `U` , erstellt eine Instanz des konstruierten Typs `G<U>` und Methodenaufrufe `M` für diese Instanz.</span><span class="sxs-lookup"><span data-stu-id="86906-1018">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls method `M` on that instance.</span></span> <span data-ttu-id="86906-1019">Des Funktionsaufrufs zu öffnen, müssen Sie eine <xref:System.Reflection.MethodInfo> Objekt, das darstellt `M` auf den konstruierten Typ – also Typ zurückgibt `U` anstatt Typ `T`.</span><span class="sxs-lookup"><span data-stu-id="86906-1019">In order to emit the function call, you need a <xref:System.Reflection.MethodInfo> object that represents `M` on the constructed type — in other words, that returns type `U` rather than type `T`.</span></span> <span data-ttu-id="86906-1020">Zu diesem Zweck rufen Sie zuerst die <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> Methode für die <xref:System.Reflection.Emit.TypeBuilder> -Objekt angeben der <xref:System.Reflection.Emit.GenericTypeParameterBuilder> Objekt, das darstellt `U` als Typargument.</span><span class="sxs-lookup"><span data-stu-id="86906-1020">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="86906-1021">Rufen Sie anschließend die <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> bei dem Rückgabewert der Methode der <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> Methode als Parameter `type` und <xref:System.Reflection.Emit.MethodBuilder> Objekt, das darstellt `T M()` als Parameter `method`.</span><span class="sxs-lookup"><span data-stu-id="86906-1021">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.MethodBuilder> object that represents `T M()` as parameter `method`.</span></span> <span data-ttu-id="86906-1022">Der Rückgabewert ist der <xref:System.Reflection.MethodInfo> müssen Sie die Ausgabe des Funktionsaufrufs-Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-1022">The return value is the <xref:System.Reflection.MethodInfo> object you need to emit the function call.</span></span> <span data-ttu-id="86906-1023">Im Codebeispiel wird eines ähnliches Szenarios.</span><span class="sxs-lookup"><span data-stu-id="86906-1023">The code example demonstrates a scenario similar to this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-1024">Das folgende Codebeispiel enthält Quellcode für eine generische Klasse namens `Sample` , die über einen Typparameter, der mit dem Namen verfügt `T`.</span><span class="sxs-lookup"><span data-stu-id="86906-1024">The following code example contains source code for a generic class named `Sample` that has a type parameter named `T`.</span></span> <span data-ttu-id="86906-1025">Die Klasse verfügt über ein Feld mit dem Namen `Field`, des Typs `T`, und eine generische Methode mit dem Namen `GM` des eigenen Typparameters mit dem Namen `U`.</span><span class="sxs-lookup"><span data-stu-id="86906-1025">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="86906-1026">Methode `GM` erstellt eine Instanz des `Sample`, Ersetzen des eigenen Typparameters `U` für den Typparameter von `Sample`, und speichert dessen Eingabeparameter in `Field`.</span><span class="sxs-lookup"><span data-stu-id="86906-1026">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="86906-1027">Dieser Code wird kompiliert, aber nicht verwendet. sehen Sie es mit der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) und vergleichen Sie sie mit der Code ausgegeben, die von Klasse `Example`.</span><span class="sxs-lookup"><span data-stu-id="86906-1027">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="86906-1028">Der Code in der Klasse `Example` veranschaulicht die Verwendung von der <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> Methode, um generische Code ausgeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1028">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method to emit generic code.</span></span> <span data-ttu-id="86906-1029">Die `Main` -Methode der Klasse `Example` erstellt eine dynamische Assembly mit einer Klasse mit dem Namen `Sample` und verwendet die <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> Methode, um es generische machen, indem Sie einen Typparameter, der mit dem Namen `T`.</span><span class="sxs-lookup"><span data-stu-id="86906-1029">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample` and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="86906-1030">Einen Standardkonstruktor und ein Feld mit dem Namen `Field`, des Typs `T`, Klasse hinzugefügt werden `Sample`.</span><span class="sxs-lookup"><span data-stu-id="86906-1030">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="86906-1031">Eine Methode `GM` hinzugefügt und in einer generischen Methode umgewandelt werden, mithilfe der <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-1031">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="86906-1032">Der Typparameter der `GM` lautet `U`.</span><span class="sxs-lookup"><span data-stu-id="86906-1032">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="86906-1033">Nach dem Definieren des Typparameters die Signatur der `GM` hinzugefügt wird, mithilfe der <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-1033">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="86906-1034">Es gibt keinen Rückgabetyp und keine erforderlichen oder benutzerdefinierten Modifizierer, d. h. alle Parameter dieser Methode sind `null` außer `parameterTypes`; `parameterTypes` legt den Typ der einzige Parameter von der Methode, um `U`, generischen Typparameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-1034">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="86906-1035">Der Text der Methode erstellt eine Instanz des konstruierten Typs `Sample<U>` (`Sample(Of U)` in Visual Basic), weist der Methodenparameter, damit `Field`, und gibt dann den Wert des `Field`.</span><span class="sxs-lookup"><span data-stu-id="86906-1035">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="86906-1036">Ein dummy-Typ wird definiert, um die Einstiegspunktmethode halten `Main`.</span><span class="sxs-lookup"><span data-stu-id="86906-1036">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="86906-1037">Im Text des `Main`, die statische `GM` Methode wird aufgerufen, für den konstruierten generischen Typ `Sample<int>` (`Sample(Of Integer)` in Visual Basic), mit dem Typ <xref:System.String> ersetzt `U`.</span><span class="sxs-lookup"><span data-stu-id="86906-1037">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span> <span data-ttu-id="86906-1038">Die <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> Methode dient zum Erstellen einer <xref:System.Reflection.MethodInfo> für die statische `GM` Methode des konstruierten generischen Typs `Sample<U>`, und die <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> Methode dient dann zum Erstellen einer <xref:System.Reflection.MethodInfo> können, die in einem Methodenaufruf ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1038">The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method is used to create a <xref:System.Reflection.MethodInfo> for the static `GM` method of the constructed generic type `Sample<U>`, and the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> method is then used to create a <xref:System.Reflection.MethodInfo> that can emitted in a method call.</span></span>  
  
 <span data-ttu-id="86906-1039">Wenn das Codebeispiel ausgeführt wird, speichert es die ausgegebene Assembly als TypeBuilderGetFieldExample.exe.</span><span class="sxs-lookup"><span data-stu-id="86906-1039">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="86906-1040">Sie können TypeBuilderGetFieldExample.exe ausführen, und Sie können die [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) zum Vergleichen des ausgegebenen Codes durch den Code für die `Sample` -Klasse, die in das Codebeispiel selbst kompiliert wird.</span><span class="sxs-lookup"><span data-stu-id="86906-1040">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86906-1041"><paramref name="method" /> ist eine generische Methode, aber keine generische Methodendefinition.</span><span class="sxs-lookup"><span data-stu-id="86906-1041"><paramref name="method" /> is a generic method that is not a generic method definition.</span></span>  
  
 <span data-ttu-id="86906-1042">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-1042">-or-</span></span>  
  
 <span data-ttu-id="86906-1043"><paramref name="type" /> stellt keinen generischen Typ dar.</span><span class="sxs-lookup"><span data-stu-id="86906-1043"><paramref name="type" /> does not represent a generic type.</span></span>  
  
 <span data-ttu-id="86906-1044">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-1044">-or-</span></span>  
  
 <span data-ttu-id="86906-1045"><paramref name="type" /> ist nicht vom Typ <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1045"><paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
 <span data-ttu-id="86906-1046">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-1046">-or-</span></span>  
  
 <span data-ttu-id="86906-1047">Der deklarierende Typ von <paramref name="method" /> ist keine generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="86906-1047">The declaring type of <paramref name="method" /> is not a generic type definition.</span></span>  
  
 <span data-ttu-id="86906-1048">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-1048">-or-</span></span>  
  
 <span data-ttu-id="86906-1049">Der deklarierende Typ von <paramref name="method" /> ist nicht die generische Typdefinition von <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1049">The declaring type of <paramref name="method" /> is not the generic type definition of <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="86906-1050">Hierbei muss es sich um ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> handeln, wie bei <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</span><span class="sxs-lookup"><span data-stu-id="86906-1050">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="86906-1051">Gibt alle öffentlichen und nicht öffentlichen Methoden zurück, die gemäß Angabe von diesem Typ deklariert oder geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-1051">Returns all the public and non-public methods declared or inherited by this type, as specified.</span></span></summary>
        <returns><span data-ttu-id="86906-1052">Gibt ein Array von <see cref="T:System.Reflection.MethodInfo" />-Objekten zurück, die die für diesen Typ definierten öffentlichen und nicht öffentlichen Methoden darstellen, wenn <paramref name="nonPublic" /> verwendet wird. Andernfalls werden lediglich die öffentlichen Methoden zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1052">Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public methods are returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1053">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-1053">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1054">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-1054">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-1055">Der <see cref="T:System.String" />, der den Namen des abzurufenden geschachtelten Typs enthält.</span><span class="sxs-lookup"><span data-stu-id="86906-1055">The <see cref="T:System.String" /> containing the name of the nested type to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="86906-1056">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="86906-1056">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
 <span data-ttu-id="86906-1057">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-1057">-or-</span></span>  
  
 <span data-ttu-id="86906-1058">Null, um eine Suche nach öffentlichen Methoden mit Beachtung der Groß-/Kleinschreibung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="86906-1058">Zero, to conduct a case-sensitive search for public methods.</span></span></param>
        <summary><span data-ttu-id="86906-1059">Gibt die öffentlichen und nicht öffentlichen geschachtelten Typen zurück, die von diesem Typ deklariert werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1059">Returns the public and non-public nested types that are declared by this type.</span></span></summary>
        <returns><span data-ttu-id="86906-1060">Ein <see cref="T:System.Type" />-Objekt, das den geschachtelten Typ darstellt, der den angegebenen Anforderungen entspricht, sofern dieser gefunden wird. Andernfalls <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1060">A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1061">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-1061">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 <span data-ttu-id="86906-1062">Wenn dieser Typ abgeschlossen ist, z. B. wenn `CreateType` für diesen Typ aufgerufen wurde, aber es sind geschachtelte Typen, die nicht abgeschlossen ist, klicken Sie dann `GetNestedTypes` für die nur die geschachtelten Typen zurück `CreateType` aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-1062">If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1063">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-1063">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="86906-1064">Hierbei muss es sich um ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> handeln, wie bei <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</span><span class="sxs-lookup"><span data-stu-id="86906-1064">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="86906-1065">Gibt die öffentlichen und nicht öffentlichen geschachtelten Typen zurück, die von diesem Typ deklariert oder geerbt werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1065">Returns the public and non-public nested types that are declared or inherited by this type.</span></span></summary>
        <returns><span data-ttu-id="86906-1066">Ein Array von <see cref="T:System.Type" />-Objekten, die sämtliche im aktuellen <see cref="T:System.Type" /> geschachtelten Typen darstellen, die den angegebenen Bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="86906-1066">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
 <span data-ttu-id="86906-1067">Ein leeres Array vom Typ <see cref="T:System.Type" />, wenn im aktuellen <see cref="T:System.Type" /> keine Typen geschachtelt sind oder keiner der geschachtelten Typen den Bindungseinschränkungen entspricht.</span><span class="sxs-lookup"><span data-stu-id="86906-1067">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1068">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-1068">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 <span data-ttu-id="86906-1069">Wenn dieser Typ abgeschlossen ist, z. B. wenn `CreateType` für diesen Typ aufgerufen wurde, aber es sind geschachtelte Typen, die nicht abgeschlossen ist, klicken Sie dann `GetNestedTypes` für die nur die geschachtelten Typen zurück `CreateType` aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-1069">If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1070">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-1070">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="86906-1071">Dieses Aufrufattribut.</span><span class="sxs-lookup"><span data-stu-id="86906-1071">This invocation attribute.</span></span> <span data-ttu-id="86906-1072">Hierbei muss es sich um ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> handeln: <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</span><span class="sxs-lookup"><span data-stu-id="86906-1072">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="86906-1073">Gibt alle öffentlichen und nicht öffentlichen Eigenschaften zurück, die gemäß Angabe von diesem Typ deklariert oder geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-1073">Returns all the public and non-public properties declared or inherited by this type, as specified.</span></span></summary>
        <returns><span data-ttu-id="86906-1074">Gibt ein Array von <see langword="PropertyInfo" />-Objekten zurück, die die für diesen Typ definierten öffentlichen und nicht öffentlichen Eigenschaften darstellen, wenn <paramref name="nonPublic" /> verwendet wird. Andernfalls werden lediglich die öffentlichen Eigenschaften zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1074">Returns an array of <see langword="PropertyInfo" /> objects representing the public and non-public properties defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public properties are returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1075">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-1075">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1076">Diese Methode wird für unvollständige Typen nicht implementiert.</span><span class="sxs-lookup"><span data-stu-id="86906-1076">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public override Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GUID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Guid GUID { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1077">Ruft die GUID dieses Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-1077">Retrieves the GUID of this type.</span></span></summary>
        <value><span data-ttu-id="86906-1078">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1078">Read-only.</span></span> <span data-ttu-id="86906-1079">Ruft die GUID dieses Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-1079">Retrieves the GUID of this type</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1080">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-1080">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1081">Diese Methode wird für unvollständige Typen derzeit nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1081">This method is not currently supported for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool HasElementTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86906-1082">Der Name des aufzurufenden Members.</span><span class="sxs-lookup"><span data-stu-id="86906-1082">The name of the member to invoke.</span></span> <span data-ttu-id="86906-1083">Dies kann ein Konstruktor, eine Methode, eine Eigenschaft oder ein Feld sein.</span><span class="sxs-lookup"><span data-stu-id="86906-1083">This can be a constructor, method, property, or field.</span></span> <span data-ttu-id="86906-1084">Es muss ein geeignetes Aufrufattribut angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1084">A suitable invocation attribute must be specified.</span></span> <span data-ttu-id="86906-1085">Beachten Sie, dass es möglich ist, den Standardmember einer Klasse aufzurufen, indem Sie eine leere Zeichenfolge als Name des Members übergeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1085">Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="86906-1086">Das Attribut für den Aufruf.</span><span class="sxs-lookup"><span data-stu-id="86906-1086">The invocation attribute.</span></span> <span data-ttu-id="86906-1087">Hierbei muss es sich um ein Bitflag aus <see langword="BindingFlags" /> handeln.</span><span class="sxs-lookup"><span data-stu-id="86906-1087">This must be a bit flag from <see langword="BindingFlags" />.</span></span></param>
        <param name="binder"><span data-ttu-id="86906-1088">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <see langword="MemberInfo" />-Objekten über Reflektion ermöglicht.</span><span class="sxs-lookup"><span data-stu-id="86906-1088">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="86906-1089">Wenn der Binder <see langword="null" /> ist, wird der Standardbinder verwendet.</span><span class="sxs-lookup"><span data-stu-id="86906-1089">If binder is <see langword="null" />, the default binder is used.</span></span> <span data-ttu-id="86906-1090">Siehe <see cref="T:System.Reflection.Binder" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1090">See <see cref="T:System.Reflection.Binder" />.</span></span></param>
        <param name="target"><span data-ttu-id="86906-1091">Das Objekt, für das der angegebene Member aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-1091">The object on which to invoke the specified member.</span></span> <span data-ttu-id="86906-1092">Wenn der Member statisch ist, wird dieser Parameter ignoriert.</span><span class="sxs-lookup"><span data-stu-id="86906-1092">If the member is static, this parameter is ignored.</span></span></param>
        <param name="args"><span data-ttu-id="86906-1093">Eine Argumentliste.</span><span class="sxs-lookup"><span data-stu-id="86906-1093">An argument list.</span></span> <span data-ttu-id="86906-1094">Dies ist ein Array von Objekten, das die Anzahl, Reihenfolge und den Typ der Parameter des aufzurufenden Members enthält.</span><span class="sxs-lookup"><span data-stu-id="86906-1094">This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked.</span></span> <span data-ttu-id="86906-1095">Wenn keine Parameter vorhanden sind, muss dies gleich NULL sein.</span><span class="sxs-lookup"><span data-stu-id="86906-1095">If there are no parameters this should be null.</span></span></param>
        <param name="modifiers"><span data-ttu-id="86906-1096">Ein Array derselben Länge wie <c>args</c> mit Elementen, die die Attribute darstellen, die den Argumenten des aufzurufenden Members zugeordnet sind.</span><span class="sxs-lookup"><span data-stu-id="86906-1096">An array of the same length as <c>args</c> with elements that represent the attributes associated with the arguments of the member to be invoked.</span></span> <span data-ttu-id="86906-1097">Ein Parameter verfügt über Attribute, die ihm in den Metadaten zugeordnet werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1097">A parameter has attributes associated with it in the metadata.</span></span> <span data-ttu-id="86906-1098">Sie werden von verschiedenen Interoperabilitätsdiensten verwendet.</span><span class="sxs-lookup"><span data-stu-id="86906-1098">They are used by various interoperability services.</span></span> <span data-ttu-id="86906-1099">Weitere Informationen finden Sie in den Metadatenspezifikationen.</span><span class="sxs-lookup"><span data-stu-id="86906-1099">See the metadata specs for more details.</span></span></param>
        <param name="culture"><span data-ttu-id="86906-1100">Eine Instanz von <see langword="CultureInfo" /> für die Steuerung der Umwandlung von Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-1100">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="86906-1101">Wenn diese NULL ist, wird die <see langword="CultureInfo" /> für den aktuellen Thread verwendet.</span><span class="sxs-lookup"><span data-stu-id="86906-1101">If this is null, the <see langword="CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="86906-1102">(Dies ist z. B. erforderlich, um eine Zeichenfolge, die 1000 darstellt, in einen Double-Wert zu konvertieren, da 1000 in verschiedenen Kulturen unterschiedlich dargestellt wird.)</span><span class="sxs-lookup"><span data-stu-id="86906-1102">(Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)</span></span></param>
        <param name="namedParameters"><span data-ttu-id="86906-1103">Jeder Parameter im <c>namedParameters</c>-Array ruft den Wert im entsprechenden Element im <c>args</c>-Array ab.</span><span class="sxs-lookup"><span data-stu-id="86906-1103">Each parameter in the <c>namedParameters</c> array gets the value in the corresponding element in the <c>args</c> array.</span></span> <span data-ttu-id="86906-1104">Wenn die Länge von <c>args</c> größer als die Länge von <c>namedParameters</c> ist, werden die restlichen Argumentwerte in der Reihenfolge übergeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1104">If the length of <c>args</c> is greater than the length of <c>namedParameters</c>, the remaining argument values are passed in order.</span></span></param>
        <summary><span data-ttu-id="86906-1105">Ruft den angegebenen Member auf.</span><span class="sxs-lookup"><span data-stu-id="86906-1105">Invokes the specified member.</span></span> <span data-ttu-id="86906-1106">Die Methode, die aufgerufen werden soll, muss zugänglich sein und mit der angegebenen Argumentliste unter den Einschränkungen des angegebenen Binders und der Aufrufattribute die spezifischste Übereinstimmung bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="86906-1106">The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</span></span></summary>
        <returns><span data-ttu-id="86906-1107">Gibt den Rückgabewert des aufgerufenen Members zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-1107">Returns the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1108">Eine Methode wird aufgerufen, wenn die Anzahl von Parametern in der Deklaration der Methode der Anzahl der Argumente in der angegebenen Argumentliste entspricht und der Typ jedes Arguments vom Binder in den Typ des Parameters konvertiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="86906-1108">A method will be invoked if the number of parameters in the method declaration equals the number of arguments in the specified argument list, and the type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="86906-1109">Der Binder findet alle übereinstimmenden Methoden.</span><span class="sxs-lookup"><span data-stu-id="86906-1109">The binder will find all of the matching methods.</span></span> <span data-ttu-id="86906-1110">Diese Methoden werden basierend auf den Typ der Bindung angeforderte (BindingFlags.InvokeMethod, BindingFlags.GetProperties und So weiter.) gefunden werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1110">These methods are found based on the type of binding requested (BindingFlags.InvokeMethod, BindingFlags.GetProperties, and so on.).</span></span> <span data-ttu-id="86906-1111">Der Satz von Methoden wird durch den Namen, Anzahl von Argumenten und einen Satz von Suchabfragen in der Binder definierten gefiltert.</span><span class="sxs-lookup"><span data-stu-id="86906-1111">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span> <span data-ttu-id="86906-1112">Wenn die Methode ausgewählt wurde, wird sie aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1112">After the method is selected, it will be invoked.</span></span> <span data-ttu-id="86906-1113">Eingabehilfen ist an diesem Punkt aktiviert.</span><span class="sxs-lookup"><span data-stu-id="86906-1113">Accessibility is checked at that point.</span></span> <span data-ttu-id="86906-1114">Die Suche kann steuern, welchen Satz von Methoden werden basierend auf der Eingabehilfen-Attribut, das der Methode zugeordnet durchsucht.</span><span class="sxs-lookup"><span data-stu-id="86906-1114">The search can control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="86906-1115">Die `IBinder.BindToMethod` Methode ist verantwortlich für die Auswahl der Methode, die aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1115">The `IBinder.BindToMethod` method is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="86906-1116">Der Standardbinder wählt die spezifischste Übereinstimmung.</span><span class="sxs-lookup"><span data-stu-id="86906-1116">The default binder selects the most specific match.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-1117">Zugriffseinschränkungen für vollständig vertrauenswürdige Code ignoriert.</span><span class="sxs-lookup"><span data-stu-id="86906-1117">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="86906-1118">D. h. private Konstruktoren, Methoden, Felder und Eigenschaften zugegriffen werden können, und Sie aufgerufen wird, mithilfe von Reflektion im Code vollständig vertrauenswürdig ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1118">That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="86906-1119">Diese Methode wird zurzeit nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1119">This method is not currently supported.</span></span> <span data-ttu-id="86906-1120">Sie können den Typ mithilfe abrufen <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-1120">You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1121">Diese Methode wird für unvollständige Typen derzeit nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1121">This method is not currently supported for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected override bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsArrayImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAssignableFrom">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-1122">Bestimmt, ob ein angegebener Typ diesem Objekt zugewiesen werden kann.</span><span class="sxs-lookup"><span data-stu-id="86906-1122">Determines whether a specified type can be assigned to this object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Reflection.TypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(System::Reflection::TypeInfo ^ typeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Reflection.TypeInfo" />
      </Parameters>
      <Docs>
        <param name="typeInfo"><span data-ttu-id="86906-1123">Das zu überprüfende Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-1123">The object to test.</span></span></param>
        <summary><span data-ttu-id="86906-1124">Ruft einen Wert ab, der angibt, ob ein angegebenes <see cref="T:System.Reflection.TypeInfo" />-Objekt diesem Objekt zugewiesen werden kann.</span><span class="sxs-lookup"><span data-stu-id="86906-1124">Gets a value that indicates whether a specified <see cref="T:System.Reflection.TypeInfo" /> object can be assigned to this object.</span></span></summary>
        <returns>
          <span data-ttu-id="86906-1125"><see langword="true" />, wenn <paramref name="typeInfo" /> diesem Objekt zugewiesen werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1125"><see langword="true" /> if <paramref name="typeInfo" /> can be assigned to this object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(Type ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="86906-1126">Das zu überprüfende Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-1126">The object to test.</span></span></param>
        <summary><span data-ttu-id="86906-1127">Ruft einen Wert ab, der angibt, ob ein angegebener <see cref="T:System.Type" /> diesem Objekt zugewiesen werden kann</span><span class="sxs-lookup"><span data-stu-id="86906-1127">Gets a value that indicates whether a specified <see cref="T:System.Type" /> can be assigned to this object.</span></span></summary>
        <returns>
          <span data-ttu-id="86906-1128"><see langword="true" />, wenn der <paramref name="c" />-Parameter und der aktuelle Typ den gleichen Typ darstellen, wenn der aktuelle Typ in der Vererbungshierarchie von  <paramref name="c" /> enthalten ist oder wenn der aktuelle Typ eine Schnittstelle ist, die von <paramref name="c" /> unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="86906-1128"><see langword="true" /> if the <paramref name="c" /> parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of <paramref name="c" />, or if the current type is an interface that <paramref name="c" /> supports.</span></span> <span data-ttu-id="86906-1129"><see langword="false" />, wenn keine dieser Bedingungen gültig sind oder wenn <paramref name="c" /><see langword="null" /> ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1129"><see langword="false" /> if none of these conditions are valid, or if <paramref name="c" /> is <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected override bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsByRefImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public override bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected override bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsCOMObjectImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1130">Ruft einen Wert ab, der angibt, ob dieses Objekt einen konstruierten generischen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1130">Gets a value that indicates whether this object represents a constructed generic type.</span></span></summary>
        <value>
          <span data-ttu-id="86906-1131"><see langword="true" />, wenn dieses Objekt einen konstruierten generischen Typ darstellt, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1131"><see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCreated">
      <MemberSignature Language="C#" Value="public bool IsCreated ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsCreated() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsCreated" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCreated () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsCreated();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-1132">Gibt einen Wert zurück, der angibt, ob der aktuelle dynamische Typ erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-1132">Returns a value that indicates whether the current dynamic type has been created.</span></span></summary>
        <returns>
          <span data-ttu-id="86906-1133"><see langword="true" />, wenn die <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />-Methode aufgerufen wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1133"><see langword="true" /> if the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has been called; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1134">Nach der <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode aufgerufen wurde, den Typ von dargestellt die <xref:System.Reflection.Emit.TypeBuilder> -Objekts abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1134">After the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called, the type represented by the <xref:System.Reflection.Emit.TypeBuilder> object is complete.</span></span> <span data-ttu-id="86906-1135">Ausnahmen werden ausgelöst, auf alle weiteren Versuche, Mitglieder hinzufügen oder ändern andere Eigenschaften des Typs.</span><span class="sxs-lookup"><span data-stu-id="86906-1135">Exceptions are thrown on any further attempts to add members or change other characteristics of the type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="86906-1136">Der Typ des zu suchenden Attributs.</span><span class="sxs-lookup"><span data-stu-id="86906-1136">The type of attribute to search for.</span></span> <span data-ttu-id="86906-1137">Nur Attribute, die diesem Typ zugeordnet werden können, werden zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1137">Only attributes that are assignable to this type are returned.</span></span></param>
        <param name="inherit"><span data-ttu-id="86906-1138">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-1138">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="86906-1139">Bestimmt, ob ein benutzerdefiniertes Attribut auf den aktuellen Typ angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="86906-1139">Determines whether a custom attribute is applied to the current type.</span></span></summary>
        <returns>
          <span data-ttu-id="86906-1140"><see langword="true" />, wenn eine oder mehrere Instanzen von <paramref name="attributeType" /> oder ein von <paramref name="attributeType" /> abgeleitetes Attribut für diesen Typ definiert ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1140"><see langword="true" /> if one or more instances of <paramref name="attributeType" />, or an attribute derived from <paramref name="attributeType" />, is defined on this type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1141">Diese Methode wird für unvollständige generische Typparameter nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1141">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="86906-1142">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-1142">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1143">Diese Methode wird für unvollständige Typen derzeit nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1143">This method is not currently supported for incomplete types.</span></span> <span data-ttu-id="86906-1144">Rufen Sie den Typ mithilfe von <see cref="M:System.Type.GetType" /> ab, und rufen Sie <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> für den zurückgegebenen <see cref="T:System.Type" /> auf.</span><span class="sxs-lookup"><span data-stu-id="86906-1144">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86906-1145"><paramref name="attributeType" /> ist nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="86906-1145"><paramref name="attributeType" /> is not defined.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-1146"><paramref name="attributeType" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1146"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public override bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1147">Ruft einen Wert ab, der angibt, ob der aktuelle Typ ein generischer Typparameter ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1147">Gets a value indicating whether the current type is a generic type parameter.</span></span></summary>
        <value>
          <span data-ttu-id="86906-1148"><see langword="true" />, wenn das aktuelle <see cref="T:System.Reflection.Emit.TypeBuilder" />-Objekt einen generischen Typparameter darstellt, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1148"><see langword="true" /> if the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="86906-1149">Wenn Code ausgeben, wird durch ein generischen Typparameter dargestellt eine <xref:System.Reflection.Emit.GenericTypeParameterBuilder> Objekt und keine <xref:System.Reflection.Emit.TypeBuilder> Objekt.</span><span class="sxs-lookup"><span data-stu-id="86906-1149">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public override bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1150">Ruft einen Wert ab, der angibt, ob der aktuelle Typ ein generischer Typ ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1150">Gets a value indicating whether the current type is a generic type.</span></span></summary>
        <value>
          <span data-ttu-id="86906-1151"><see langword="true" />, wenn der durch das aktuelle <see cref="T:System.Reflection.Emit.TypeBuilder" />-Objekt dargestellte Typ generisch ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1151"><see langword="true" /> if the type represented by the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object is generic; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1152">Ein <xref:System.Reflection.Emit.TypeBuilder> -Objekt eine generische Typdefinition darstellt, wenn die <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> -Methode wurde verwendet, um generische Typparameter.</span><span class="sxs-lookup"><span data-stu-id="86906-1152">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="86906-1153">Eine Instanz von der <xref:System.Reflection.Emit.TypeBuilder> Klasse, die generisch ist, ist immer eine generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="86906-1153">An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.</span></span>  
  
 <span data-ttu-id="86906-1154">Weitere Informationen zu generischen Typen in der Reflektion und eine Liste der invarianten Bedingungen für Begriffe, die in generischen Reflektion, finden Sie unter der <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-1154">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1155">Ruft einen Wert ab, der angibt, ob der aktuelle <see cref="T:System.Reflection.Emit.TypeBuilder" /> eine generische Typdefinition darstellt, aus der andere generische Typen konstruiert werden können.</span><span class="sxs-lookup"><span data-stu-id="86906-1155">Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> represents a generic type definition from which other generic types can be constructed.</span></span></summary>
        <value>
          <span data-ttu-id="86906-1156"><see langword="true" />, wenn dieses <see cref="T:System.Reflection.Emit.TypeBuilder" />-Objekt eine generische Typdefinition darstellt, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1156"><see langword="true" /> if this <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type definition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1157">Ein <xref:System.Reflection.Emit.TypeBuilder> -Objekt eine generische Typdefinition darstellt, wenn die <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> -Methode wurde verwendet, um generische Typparameter.</span><span class="sxs-lookup"><span data-stu-id="86906-1157">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="86906-1158">Eine Instanz von der <xref:System.Reflection.Emit.TypeBuilder> Klasse, die generisch ist, ist immer eine generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="86906-1158">An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.</span></span>  
  
 <span data-ttu-id="86906-1159">Ein <xref:System.Reflection.Emit.TypeBuilder> kann verwendet werden, um generische Typdefinitionen erstellt, aber keine generische Typen konstruiert.</span><span class="sxs-lookup"><span data-stu-id="86906-1159">A <xref:System.Reflection.Emit.TypeBuilder> can be used to build generic type definitions, but not constructed generic types.</span></span> <span data-ttu-id="86906-1160">Um einen konstruierten generischen Typ zu erhalten, rufen die <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> Methode auf eine <xref:System.Reflection.Emit.TypeBuilder> , die Definition eines generischen Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1160">To get a constructed generic type, call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.</span></span>  
  
 <span data-ttu-id="86906-1161">Weitere Informationen zu generischen Typen in der Reflektion und eine Liste der invarianten Bedingungen für Begriffe, die in generischen Reflektion, finden Sie unter der <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="86906-1161">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPointerImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPrimitiveImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1162">Ruft einen Wert ab, der angibt, ob der aktuelle Typ sicherheitsrelevant ist und daher wichtige Vorgänge ausführen darf.</span><span class="sxs-lookup"><span data-stu-id="86906-1162">Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.</span></span></summary>
        <value>
          <span data-ttu-id="86906-1163"><see langword="true" />, wenn der aktuelle Typ sicherheitsrelevant oder sicherheitsrelevant und sicher zugänglich ist, <see langword="false" />, wenn er transparent ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1163"><see langword="true" /> if the current type is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1164">Die <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, und <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> Eigenschaften melden die Transparenzebene eines Typs an, wie von der common Language Runtime (CLR) bestimmt.</span><span class="sxs-lookup"><span data-stu-id="86906-1164">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="86906-1165">In der folgenden Tabelle werden die Kombinationen dieser Eigenschaften gezeigt:</span><span class="sxs-lookup"><span data-stu-id="86906-1165">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="86906-1166">Sicherheitsstufe</span><span class="sxs-lookup"><span data-stu-id="86906-1166">Security level</span></span>|<span data-ttu-id="86906-1167">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="86906-1167">IsSecurityCritical</span></span>|<span data-ttu-id="86906-1168">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="86906-1168">IsSecuritySafeCritical</span></span>|<span data-ttu-id="86906-1169">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="86906-1169">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="86906-1170">Kritisch</span><span class="sxs-lookup"><span data-stu-id="86906-1170">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="86906-1171">Sicherheitskritisch</span><span class="sxs-lookup"><span data-stu-id="86906-1171">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="86906-1172">Transparent</span><span class="sxs-lookup"><span data-stu-id="86906-1172">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="86906-1173">Ein Verwenden dieser Eigenschaften ist deutlich einfacher als das Untersuchen der Sicherheitsanmerkungen einer Assembly und der zugehörigen Typen, das Überprüfen der aktuellen Vertrauensebene und das Versuchen, die Laufzeitregeln zu duplizieren.</span><span class="sxs-lookup"><span data-stu-id="86906-1173">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="86906-1174">Die Common Language Runtime beginnt die Auswertung von Transparenzebenen in der Assembly.</span><span class="sxs-lookup"><span data-stu-id="86906-1174">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="86906-1175">Wenn die dynamische Assembly als sicherheitskritisch ist, z. B. die Anmerkungen auf Typen werden ignoriert, und alle Typen als sicherheitskritisch sind.</span><span class="sxs-lookup"><span data-stu-id="86906-1175">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="86906-1176">Standardmäßig erbt eine dynamische Assembly die Transparenz der Assembly, die ihn ausgibt.</span><span class="sxs-lookup"><span data-stu-id="86906-1176">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="86906-1177">Sie können diese Standardeinstellung überschreiben, indem Sie mit der <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, oder <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> methodenüberladung und Sicherheitsattribute angeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1177">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="86906-1178">Sie können keine Sicherheitsstufen erhöhen, auf diese Weise; Transparenter Code kann nicht, also sicherheitstransparent oder sicherheitsrelevant und sicher zugänglich Code ausgeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1178">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="86906-1179">Attribute müssen angegeben werden, wenn die dynamische Assembly erstellt wird, oder sie wirksam werden, bis die Assembly auf dem Datenträger gespeichert und erneut geladen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-1179">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-1180">Standard-Vererbung ist auf die Laufzeit Auswertung der Transparenz beschränkt.</span><span class="sxs-lookup"><span data-stu-id="86906-1180">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="86906-1181">Keine Attribute werden auf die dynamische Assembly angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1181">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="86906-1182">Wenn Sie Sicherheitsattribute hinzufügen möchten, müssen Sie sie selbst anwenden.</span><span class="sxs-lookup"><span data-stu-id="86906-1182">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="86906-1183">Weitere Informationen über die Reflektion ausgeben und Transparenz finden Sie unter [Sicherheitsaspekte bei der Reflektionsausgabe](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="86906-1183">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="86906-1184">Informationen zur Transparenz finden Sie unter [Sicherheitsänderungen](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="86906-1184">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1185">Der aktuelle dynamische Typ wurde nicht erstellt, indem die <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />-Methode aufgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-1185">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1186">Ruft einen Wert ab, der angibt, ob der aktuelle Typ sicherheitsgeschützt ist, d. h. ob er wichtige Vorgänge ausführen darf und ob von transparentem Code auf ihn zugegriffen werden kann.</span><span class="sxs-lookup"><span data-stu-id="86906-1186">Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value>
          <span data-ttu-id="86906-1187"><see langword="true" />, wenn der aktuelle Typ sicherheitsrelevant und sicher zugänglich ist, <see langword="false" />, wenn er sicherheitsrelevant oder transparent ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1187"><see langword="true" /> if the current type is security-safe-critical; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1188">Die <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, und <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> Eigenschaften melden die Transparenzebene eines Typs an, wie von der common Language Runtime (CLR) bestimmt.</span><span class="sxs-lookup"><span data-stu-id="86906-1188">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="86906-1189">In der folgenden Tabelle werden die Kombinationen dieser Eigenschaften gezeigt:</span><span class="sxs-lookup"><span data-stu-id="86906-1189">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="86906-1190">Sicherheitsstufe</span><span class="sxs-lookup"><span data-stu-id="86906-1190">Security level</span></span>|<span data-ttu-id="86906-1191">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="86906-1191">IsSecurityCritical</span></span>|<span data-ttu-id="86906-1192">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="86906-1192">IsSecuritySafeCritical</span></span>|<span data-ttu-id="86906-1193">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="86906-1193">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="86906-1194">Kritisch</span><span class="sxs-lookup"><span data-stu-id="86906-1194">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="86906-1195">Sicherheitskritisch</span><span class="sxs-lookup"><span data-stu-id="86906-1195">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="86906-1196">Transparent</span><span class="sxs-lookup"><span data-stu-id="86906-1196">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="86906-1197">Ein Verwenden dieser Eigenschaften ist deutlich einfacher als das Untersuchen der Sicherheitsanmerkungen einer Assembly und der zugehörigen Typen, das Überprüfen der aktuellen Vertrauensebene und das Versuchen, die Laufzeitregeln zu duplizieren.</span><span class="sxs-lookup"><span data-stu-id="86906-1197">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="86906-1198">Die Common Language Runtime beginnt die Auswertung von Transparenzebenen in der Assembly.</span><span class="sxs-lookup"><span data-stu-id="86906-1198">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="86906-1199">Wenn die dynamische Assembly als sicherheitskritisch ist, z. B. die Anmerkungen auf Typen werden ignoriert, und alle Typen als sicherheitskritisch sind.</span><span class="sxs-lookup"><span data-stu-id="86906-1199">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="86906-1200">Standardmäßig erbt eine dynamische Assembly die Transparenz der Assembly, die ihn ausgibt.</span><span class="sxs-lookup"><span data-stu-id="86906-1200">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="86906-1201">Sie können diese Standardeinstellung überschreiben, indem Sie mit der <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, oder <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> methodenüberladung und Sicherheitsattribute angeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1201">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="86906-1202">Sie können keine Sicherheitsstufen erhöhen, auf diese Weise; Transparenter Code kann nicht, also sicherheitstransparent oder sicherheitsrelevant und sicher zugänglich Code ausgeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1202">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="86906-1203">Attribute müssen angegeben werden, wenn die dynamische Assembly erstellt wird, oder sie wirksam werden, bis die Assembly auf dem Datenträger gespeichert und erneut geladen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-1203">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-1204">Standard-Vererbung ist auf die Laufzeit Auswertung der Transparenz beschränkt.</span><span class="sxs-lookup"><span data-stu-id="86906-1204">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="86906-1205">Keine Attribute werden auf die dynamische Assembly angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1205">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="86906-1206">Wenn Sie Sicherheitsattribute hinzufügen möchten, müssen Sie sie selbst anwenden.</span><span class="sxs-lookup"><span data-stu-id="86906-1206">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="86906-1207">Weitere Informationen über die Reflektion ausgeben und Transparenz finden Sie unter [Sicherheitsaspekte bei der Reflektionsausgabe](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="86906-1207">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="86906-1208">Informationen zur Transparenz finden Sie unter [Sicherheitsänderungen](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="86906-1208">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1209">Der aktuelle dynamische Typ wurde nicht erstellt, indem die <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />-Methode aufgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-1209">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1210">Ruft einen Wert ab, der angibt, ob der aktuelle Typ transparent ist und daher keine wichtigen Vorgänge ausführen kann.</span><span class="sxs-lookup"><span data-stu-id="86906-1210">Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.</span></span></summary>
        <value>
          <span data-ttu-id="86906-1211"><see langword="true" />, wenn der Typ sicherheitstransparent ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1211"><see langword="true" /> if the type is security-transparent; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1212">Die <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, und <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> Eigenschaften melden die Transparenzebene eines Typs an, wie von der common Language Runtime (CLR) bestimmt.</span><span class="sxs-lookup"><span data-stu-id="86906-1212">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="86906-1213">In der folgenden Tabelle werden die Kombinationen dieser Eigenschaften gezeigt:</span><span class="sxs-lookup"><span data-stu-id="86906-1213">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="86906-1214">Sicherheitsstufe</span><span class="sxs-lookup"><span data-stu-id="86906-1214">Security level</span></span>|<span data-ttu-id="86906-1215">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="86906-1215">IsSecurityCritical</span></span>|<span data-ttu-id="86906-1216">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="86906-1216">IsSecuritySafeCritical</span></span>|<span data-ttu-id="86906-1217">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="86906-1217">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="86906-1218">Kritisch</span><span class="sxs-lookup"><span data-stu-id="86906-1218">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="86906-1219">Sicherheitskritisch</span><span class="sxs-lookup"><span data-stu-id="86906-1219">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="86906-1220">Transparent</span><span class="sxs-lookup"><span data-stu-id="86906-1220">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="86906-1221">Ein Verwenden dieser Eigenschaften ist deutlich einfacher als das Untersuchen der Sicherheitsanmerkungen einer Assembly und der zugehörigen Typen, das Überprüfen der aktuellen Vertrauensebene und das Versuchen, die Laufzeitregeln zu duplizieren.</span><span class="sxs-lookup"><span data-stu-id="86906-1221">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="86906-1222">Die Common Language Runtime beginnt die Auswertung von Transparenzebenen in der Assembly.</span><span class="sxs-lookup"><span data-stu-id="86906-1222">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="86906-1223">Wenn die dynamische Assembly als sicherheitskritisch ist, z. B. die Anmerkungen auf Typen werden ignoriert, und alle Typen als sicherheitskritisch sind.</span><span class="sxs-lookup"><span data-stu-id="86906-1223">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="86906-1224">Standardmäßig erbt eine dynamische Assembly die Transparenz der Assembly, die ihn ausgibt.</span><span class="sxs-lookup"><span data-stu-id="86906-1224">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="86906-1225">Sie können diese Standardeinstellung überschreiben, indem Sie mit der <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, oder <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> methodenüberladung und Sicherheitsattribute angeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1225">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="86906-1226">Sie können keine Sicherheitsstufen erhöhen, auf diese Weise; Transparenter Code kann nicht, also sicherheitstransparent oder sicherheitsrelevant und sicher zugänglich Code ausgeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1226">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="86906-1227">Attribute müssen angegeben werden, wenn die dynamische Assembly erstellt wird, oder sie wirksam werden, bis die Assembly auf dem Datenträger gespeichert und erneut geladen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-1227">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-1228">Standard-Vererbung ist auf die Laufzeit Auswertung der Transparenz beschränkt.</span><span class="sxs-lookup"><span data-stu-id="86906-1228">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="86906-1229">Keine Attribute werden auf die dynamische Assembly angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1229">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="86906-1230">Wenn Sie Sicherheitsattribute hinzufügen möchten, müssen Sie sie selbst anwenden.</span><span class="sxs-lookup"><span data-stu-id="86906-1230">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="86906-1231">Weitere Informationen über die Reflektion ausgeben und Transparenz finden Sie unter [Sicherheitsaspekte bei der Reflektionsausgabe](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="86906-1231">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="86906-1232">Informationen zur Transparenz finden Sie unter [Sicherheitsänderungen](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="86906-1232">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1233">Der aktuelle dynamische Typ wurde nicht erstellt, indem die <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />-Methode aufgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="86906-1233">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public override bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public override bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubclassOf(Type ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="86906-1234">Ein zu überprüfender <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1234">A <see cref="T:System.Type" /> that is to be checked.</span></span></param>
        <summary><span data-ttu-id="86906-1235">Bestimmt, ob dieser Typ von einem angegebenen Typ abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1235">Determines whether this type is derived from a specified type.</span></span></summary>
        <returns><span data-ttu-id="86906-1236">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1236">Read-only.</span></span> <span data-ttu-id="86906-1237">Gibt <see langword="true" /> zurück, wenn dieser Typ derselbe Typ wie <paramref name="c" /> oder ein Untertyp von <paramref name="c" /> ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1237">Returns <see langword="true" /> if this type is the same as the type <paramref name="c" />, or is a subtype of type <paramref name="c" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public override bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsValueTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public override bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-1238">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das ein Array des aktuellen Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1238">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-1239">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das ein eindimensionales Array vom aktuellen Typ mit einer unteren Grenze von 0 (null) darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1239">Returns a <see cref="T:System.Type" /> object that represents a one-dimensional array of the current type, with a lower bound of zero.</span></span></summary>
        <returns><span data-ttu-id="86906-1240">Ein <see cref="T:System.Type" />-Objekt, das einen eindimensionalen Arraytyp, dessen Elementtyp dem aktuellen Typ entspricht, mit einer unteren Grenze von 0 (null) darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1240">A <see cref="T:System.Type" /> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1241">Die <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> Methode bietet eine Möglichkeit, einen Arraytyp mit jedem beliebigen Elementtyp, einschließlich generischer Typen zu generieren.</span><span class="sxs-lookup"><span data-stu-id="86906-1241">The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-1242">Das folgende Codebeispiel erstellt ein dynamisches Modul, ein abstrakter Datentyp mit dem Namen `Sample`, und eine abstrakte Methode, die mit dem Namen `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="86906-1242">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="86906-1243">`TestMethod` akzeptiert eine `ref` Parameter (`ByRef` in Visual Basic) vom Typ `Sample`, ein Zeiger auf den Typ `Sample`, und ein Array vom Typ `Sample`.</span><span class="sxs-lookup"><span data-stu-id="86906-1243">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="86906-1244">Es gibt ein zweidimensionales Array vom Typ `Sample`.</span><span class="sxs-lookup"><span data-stu-id="86906-1244">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="86906-1245">Im Codebeispiel wird das dynamische Modul auf den Datenträger gespeichert, sodass Sie prüfen können, mit der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span><span class="sxs-lookup"><span data-stu-id="86906-1245">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType(int rank);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank"><span data-ttu-id="86906-1246">Die Anzahl von Dimensionen für das Array.</span><span class="sxs-lookup"><span data-stu-id="86906-1246">The number of dimensions for the array.</span></span></param>
        <summary><span data-ttu-id="86906-1247">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das ein Array vom aktuellen Typ mit der angegebenen Anzahl von Dimensionen darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1247">Returns a <see cref="T:System.Type" /> object that represents an array of the current type, with the specified number of dimensions.</span></span></summary>
        <returns><span data-ttu-id="86906-1248">Ein <see cref="T:System.Type" />-Objekt, das ein eindimensionales Array des aktuellen Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1248">A <see cref="T:System.Type" /> object that represents a one-dimensional array of the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1249">Die <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> Methode bietet eine Möglichkeit, einen Arraytyp mit jedem beliebigen Elementtyp, einschließlich generischer Typen zu generieren.</span><span class="sxs-lookup"><span data-stu-id="86906-1249">The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-1250">Das folgende Codebeispiel erstellt ein dynamisches Modul, ein abstrakter Datentyp mit dem Namen `Sample`, und eine abstrakte Methode, die mit dem Namen `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="86906-1250">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="86906-1251">`TestMethod` akzeptiert eine `ref` Parameter (`ByRef` in Visual Basic) vom Typ `Sample`, ein Zeiger auf den Typ `Sample`, und ein Array vom Typ `Sample`.</span><span class="sxs-lookup"><span data-stu-id="86906-1251">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="86906-1252">Es gibt ein zweidimensionales Array vom Typ `Sample`.</span><span class="sxs-lookup"><span data-stu-id="86906-1252">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="86906-1253">Im Codebeispiel wird das dynamische Modul auf den Datenträger gespeichert, sodass Sie prüfen können, mit der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span><span class="sxs-lookup"><span data-stu-id="86906-1253">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="86906-1254"><paramref name="rank" /> ist keine gültige Arraydimension.</span><span class="sxs-lookup"><span data-stu-id="86906-1254"><paramref name="rank" /> is not a valid array dimension.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public override Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeByRefType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-1255">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das beim Übergeben als <see langword="ref" />-Parameter (<see langword="ByRef" /> in Visual Basic) den aktuellen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1255">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic).</span></span></summary>
        <returns><span data-ttu-id="86906-1256">Ein <see cref="T:System.Type" />-Objekt, das beim Übergeben als <see langword="ref" />-Parameter (<see langword="ByRef" /> in Visual Basic) den aktuellen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1256">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1257">Die <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> Methode bietet eine Möglichkeit zum Generieren von `ref` Typen (`ByRef` in Visual Basic) für Parameter aufgeführt sind.</span><span class="sxs-lookup"><span data-stu-id="86906-1257">The <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-1258">Mithilfe von Microsoft intermediate Language (MSIL)-Syntax, wenn die aktuelle <xref:System.Reflection.Emit.TypeBuilder> darstellt `MyType`, und klicken Sie dann der Typ, der von dieser Methode zurückgegebene wäre `MyType&`.</span><span class="sxs-lookup"><span data-stu-id="86906-1258">Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-1259">Das folgende Codebeispiel erstellt ein dynamisches Modul, ein abstrakter Datentyp mit dem Namen `Sample`, und eine abstrakte Methode, die mit dem Namen `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="86906-1259">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="86906-1260">`TestMethod` akzeptiert eine `ref` Parameter (`ByRef` in Visual Basic) vom Typ `Sample`, ein Zeiger auf den Typ `Sample`, und ein Array vom Typ `Sample`.</span><span class="sxs-lookup"><span data-stu-id="86906-1260">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="86906-1261">Es gibt ein zweidimensionales Array vom Typ `Sample`.</span><span class="sxs-lookup"><span data-stu-id="86906-1261">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="86906-1262">Im Codebeispiel wird das dynamische Modul auf den Datenträger gespeichert, sodass Sie prüfen können, mit der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span><span class="sxs-lookup"><span data-stu-id="86906-1262">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public override Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments"><span data-ttu-id="86906-1263">Ein Array von Typen, die die Typparameter der aktuellen generischen Typdefinition ersetzen sollen.</span><span class="sxs-lookup"><span data-stu-id="86906-1263">An array of types to be substituted for the type parameters of the current generic type definition.</span></span></param>
        <summary><span data-ttu-id="86906-1264">Ersetzt die Typparameter der aktuellen generischen Typdefinition durch die Elemente eines Arrays von Typen und gibt den resultierenden konstruierten Typ zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-1264">Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.</span></span></summary>
        <returns><span data-ttu-id="86906-1265">Ein <see cref="T:System.Type" />, der den konstruierten Typ darstellt, der durch Ersetzen der Typparameter des aktuellen generischen Typs durch die Elemente von <paramref name="typeArguments" /> erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-1265">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1266">Verwenden Sie diese Methode, wenn Sie den ausgegebene Code aus der Definition des aktuellen generischen Typs erstellter Typ erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1266">Use this method when your emitted code requires a type constructed from the current generic type definition.</span></span> <span data-ttu-id="86906-1267">Es ist nicht notwendig, rufen Sie die <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> Methode vor dem Aufruf der <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> Methode auf eine <xref:System.Reflection.Emit.TypeBuilder> , die Definition eines generischen Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1267">It is not necessary to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method before calling the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.</span></span> <span data-ttu-id="86906-1268">Wenn die aktuelle <xref:System.Reflection.Emit.TypeBuilder> stellt nicht die Definition eines generischen Typs dar. ein <xref:System.InvalidOperationException> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="86906-1268">If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent the definition of a generic type, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 <span data-ttu-id="86906-1269">Das Objekt, das durch diese Methode funktioniert als Platzhalter für einen konstruierten generischen Typ im ausgegebenen Code zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="86906-1269">The object returned by this method functions as a placeholder for a constructed generic type in your emitted code.</span></span> <span data-ttu-id="86906-1270">Dies ist eine Instanz einer Klasse abgeleitet <xref:System.Type> , dessen Funktionen beschränkt.</span><span class="sxs-lookup"><span data-stu-id="86906-1270">It is an instance of a class derived from <xref:System.Type> that has limited capabilities.</span></span> <span data-ttu-id="86906-1271">Insbesondere:</span><span class="sxs-lookup"><span data-stu-id="86906-1271">In particular:</span></span>  
  
-   <span data-ttu-id="86906-1272">Um die Methoden, Felder und Konstruktoren, die für diese generische Typen konstruiert abzurufen, verwenden die <xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>, <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>, und <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29> methodenüberladungen.</span><span class="sxs-lookup"><span data-stu-id="86906-1272">To get methods, fields, and constructors for these constructed generic types, use the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>, <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>, and <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29> method overloads.</span></span>  
  
-   <span data-ttu-id="86906-1273">Zwei Instanzen, die den gleichen konstruierten Typ darstellen vergleichen nicht als gleich.</span><span class="sxs-lookup"><span data-stu-id="86906-1273">Two instances that represent the same constructed type do not compare as equal.</span></span> <span data-ttu-id="86906-1274">Im folgenden Code beispielsweise `t1.Equals(t2)` gibt `false`:</span><span class="sxs-lookup"><span data-stu-id="86906-1274">For example, in the following code `t1.Equals(t2)` returns `false`:</span></span>  
  
 [!code-cpp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/vb/remarks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-1275">Der aktuelle Typ stellt keine Definition eines generischen Typs dar.</span><span class="sxs-lookup"><span data-stu-id="86906-1275">The current type does not represent the definition of a generic type.</span></span> <span data-ttu-id="86906-1276">Das heißt, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> gibt <see langword="false" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-1276">That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-1277"><paramref name="typeArguments" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1277"><paramref name="typeArguments" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86906-1278">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-1278">-or-</span></span>  
  
 <span data-ttu-id="86906-1279">Ein beliebiges Element von <paramref name="typeArguments" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1279">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86906-1280">Die <see cref="P:System.Type.Module" />-Eigenschaft eines beliebigen Elements von <paramref name="typeArguments" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1280">The <see cref="P:System.Type.Module" /> property of any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86906-1281">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-1281">-or-</span></span>  
  
 <span data-ttu-id="86906-1282">Die <see cref="P:System.Reflection.Module.Assembly" />-Eigenschaft des Moduls eines beliebigen Elements von <paramref name="typeArguments" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1282">The <see cref="P:System.Reflection.Module.Assembly" /> property of the module of any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public override Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakePointerType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-1283">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das den Typ eines nicht verwalteten Zeigers auf den aktuellen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1283">Returns a <see cref="T:System.Type" /> object that represents the type of an unmanaged pointer to the current type.</span></span></summary>
        <returns><span data-ttu-id="86906-1284">Ein <see cref="T:System.Type" />-Objekt, das den Typ eines nicht verwalteten Zeigers auf den aktuellen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1284">A <see cref="T:System.Type" /> object that represents the type of an unmanaged pointer to the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1285">Die <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> Methode bietet eine Möglichkeit zum Generieren von Zeigertypen für Parameterlisten.</span><span class="sxs-lookup"><span data-stu-id="86906-1285">The <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-1286">Mithilfe von Microsoft intermediate Language (MSIL)-Syntax, wenn die aktuelle <xref:System.Reflection.Emit.TypeBuilder> darstellt `MyType`, und klicken Sie dann der Typ, der von dieser Methode zurückgegebene wäre `MyType*`.</span><span class="sxs-lookup"><span data-stu-id="86906-1286">Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86906-1287">Das folgende Codebeispiel erstellt ein dynamisches Modul, ein abstrakter Datentyp mit dem Namen `Sample`, und eine abstrakte Methode, die mit dem Namen `TestMethod`.</span><span class="sxs-lookup"><span data-stu-id="86906-1287">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="86906-1288">`TestMethod` akzeptiert eine `ref` Parameter (`ByRef` in Visual Basic) vom Typ `Sample`, ein Zeiger auf den Typ `Sample`, und ein Array vom Typ `Sample`.</span><span class="sxs-lookup"><span data-stu-id="86906-1288">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="86906-1289">Es gibt ein zweidimensionales Array vom Typ `Sample`.</span><span class="sxs-lookup"><span data-stu-id="86906-1289">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="86906-1290">Im Codebeispiel wird das dynamische Modul auf den Datenträger gespeichert, sodass Sie prüfen können, mit der [Ildasm.exe (IL-Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span><span class="sxs-lookup"><span data-stu-id="86906-1290">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="Overload:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1291">Ruft das dynamische Modul ab, das diese Typdefinition enthält.</span><span class="sxs-lookup"><span data-stu-id="86906-1291">Retrieves the dynamic module that contains this type definition.</span></span></summary>
        <value><span data-ttu-id="86906-1292">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1292">Read-only.</span></span> <span data-ttu-id="86906-1293">Ruft das dynamische Modul ab, das diese Typdefinition enthält.</span><span class="sxs-lookup"><span data-stu-id="86906-1293">Retrieves the dynamic module that contains this type definition.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1294">Ruft den Namen dieses Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-1294">Retrieves the name of this type.</span></span></summary>
        <value><span data-ttu-id="86906-1295">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1295">Read-only.</span></span> <span data-ttu-id="86906-1296">Ruft den <see cref="T:System.String" />-Namen dieses Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-1296">Retrieves the <see cref="T:System.String" /> name of this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public override string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1297">Ruft den Namespace ab, in dem dieser <see langword="TypeBuilder" /> definiert ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1297">Retrieves the namespace where this <see langword="TypeBuilder" /> is defined.</span></span></summary>
        <value><span data-ttu-id="86906-1298">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1298">Read-only.</span></span> <span data-ttu-id="86906-1299">Ruft den Namespace ab, in dem dieser <see langword="TypeBuilder" /> definiert ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1299">Retrieves the namespace where this <see langword="TypeBuilder" /> is defined.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PackingSize">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PackingSize PackingSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Emit.PackingSize PackingSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.PackingSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackingSize As PackingSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::PackingSize PackingSize { System::Reflection::Emit::PackingSize get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PackingSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1300">Ruft die Komprimierungsgröße dieses Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-1300">Retrieves the packing size of this type.</span></span></summary>
        <value><span data-ttu-id="86906-1301">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1301">Read-only.</span></span> <span data-ttu-id="86906-1302">Ruft die Komprimierungsgröße dieses Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-1302">Retrieves the packing size of this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1303">Gibt den Typ zurück, mit dem dieser Typ abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-1303">Returns the type that was used to obtain this type.</span></span></summary>
        <value><span data-ttu-id="86906-1304">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1304">Read-only.</span></span> <span data-ttu-id="86906-1305">Der Typ, mit dem dieser Typ abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="86906-1305">The type that was used to obtain this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86906-1306">Legt ein benutzerdefiniertes Attribut fest.</span><span class="sxs-lookup"><span data-stu-id="86906-1306">Sets a custom attribute.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder"><span data-ttu-id="86906-1307">Eine Instanz einer Hilfsklasse zum Definieren des benutzerdefinierten Attributs.</span><span class="sxs-lookup"><span data-stu-id="86906-1307">An instance of a helper class to define the custom attribute.</span></span></param>
        <summary><span data-ttu-id="86906-1308">Legt ein benutzerdefiniertes Attribut mithilfe eines benutzerdefinierten Attribut-Generators fest.</span><span class="sxs-lookup"><span data-stu-id="86906-1308">Set a custom attribute using a custom attribute builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="86906-1309">Beginnend mit der [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], diese Member nicht mehr benötigt <xref:System.Security.Permissions.ReflectionPermission> mit der <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> Flag.</span><span class="sxs-lookup"><span data-stu-id="86906-1309">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="86906-1310">(Siehe [Sicherheitsaspekte bei der Reflektionsausgabe](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="86906-1310">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-1311"><paramref name="customBuilder" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1311"><paramref name="customBuilder" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-1312">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1312">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con"><span data-ttu-id="86906-1313">Der Konstruktor für das benutzerdefinierte Attribut.</span><span class="sxs-lookup"><span data-stu-id="86906-1313">The constructor for the custom attribute.</span></span></param>
        <param name="binaryAttribute"><span data-ttu-id="86906-1314">Ein Byte-BLOB, das die Attribute darstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1314">A byte blob representing the attributes.</span></span></param>
        <summary><span data-ttu-id="86906-1315">Legt ein benutzerdefiniertes Attribut mithilfe eines angegebenen benutzerdefinierten Attribut-BLOBs fest.</span><span class="sxs-lookup"><span data-stu-id="86906-1315">Sets a custom attribute using a specified custom attribute blob.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1316">Weitere Informationen zum Formatieren `binaryAttribute`, finden Sie in der Dokumentation der Common Language Infrastructure (CLI), insbesondere in "Partition II: Metadata Definition and Semantics".</span><span class="sxs-lookup"><span data-stu-id="86906-1316">For more information on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="86906-1317">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](http://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](http://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="86906-1317">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86906-1318">Beginnend mit der [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], diese Member nicht mehr benötigt <xref:System.Security.Permissions.ReflectionPermission> mit der <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> Flag.</span><span class="sxs-lookup"><span data-stu-id="86906-1318">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="86906-1319">(Siehe [Sicherheitsaspekte bei der Reflektionsausgabe](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="86906-1319">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86906-1320"><paramref name="con" /> oder <paramref name="binaryAttribute" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1320"><paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-1321">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1321">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetParent">
      <MemberSignature Language="C#" Value="public void SetParent (Type parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParent(class System.Type parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParent (parent As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParent(Type ^ parent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="86906-1322">Der neue Basistyp.</span><span class="sxs-lookup"><span data-stu-id="86906-1322">The new base type.</span></span></param>
        <summary><span data-ttu-id="86906-1323">Legt den Basistyp des Typs fest, der sich derzeit in Bearbeitung befindet.</span><span class="sxs-lookup"><span data-stu-id="86906-1323">Sets the base type of the type currently under construction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1324">Wenn `parent` ist `null`, <xref:System.Object> als Basistyp verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="86906-1324">If `parent` is `null`, <xref:System.Object> is used as the base type.</span></span>  
  
 <span data-ttu-id="86906-1325">In der .NET Framework-Versionen 1.0 und 1.1, wird keine Ausnahme ausgelöst, wenn `parent` ein Schnittstellentyp ist jedoch ein <xref:System.TypeLoadException> wird ausgelöst, wenn die <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> -Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="86906-1325">In the .NET Framework versions 1.0 and 1.1, no exception is thrown if `parent` is an interface type, but a <xref:System.TypeLoadException> is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span>  
  
 <span data-ttu-id="86906-1326">Die <xref:System.Reflection.Emit.TypeBuilder.SetParent%2A> Methode überprüft nicht für die meisten Ungültiger übergeordneter Typen.</span><span class="sxs-lookup"><span data-stu-id="86906-1326">The <xref:System.Reflection.Emit.TypeBuilder.SetParent%2A> method does not check for most invalid parent types.</span></span> <span data-ttu-id="86906-1327">Angenommen, sie lehnt keinen übergeordneter Typ, der über keinen Standardkonstruktor verfügt, wenn der aktuelle Typ verfügt über einen Standardkonstruktor und nicht versiegelte Typen lehnt nicht lehnt die <xref:System.Delegate> Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-1327">For example, it does not reject a parent type that has no default constructor when the current type has a default constructor, it does not reject sealed types, and it does not reject the <xref:System.Delegate> type.</span></span> <span data-ttu-id="86906-1328">In all diesen Fällen-Ausnahmen werden ausgelöst, durch die <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="86906-1328">In all these cases, exceptions are thrown by the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-1329">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1329">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="86906-1330">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-1330">-or-</span></span>  
  
 <span data-ttu-id="86906-1331"><paramref name="parent" /> ist <see langword="null" />, und die aktuelle Instanz stellt eine Schnittstelle dar, deren Attribute <see cref="F:System.Reflection.TypeAttributes.Abstract" /> nicht einbeziehen.</span><span class="sxs-lookup"><span data-stu-id="86906-1331"><paramref name="parent" /> is <see langword="null" />, and the current instance represents an interface whose attributes do not include <see cref="F:System.Reflection.TypeAttributes.Abstract" />.</span></span>  
  
 <span data-ttu-id="86906-1332">- oder - </span><span class="sxs-lookup"><span data-stu-id="86906-1332">-or-</span></span>  
  
 <span data-ttu-id="86906-1333">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86906-1333">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86906-1334"><paramref name="parent" /> ist eine Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="86906-1334"><paramref name="parent" /> is an interface.</span></span> <span data-ttu-id="86906-1335">Diese Ausnahmebedingung ist neu in .NET Framework, Version 2.0.</span><span class="sxs-lookup"><span data-stu-id="86906-1335">This exception condition is new in the .NET Framework version 2.0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Size { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1336">Ruft die Gesamtgröße eines Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-1336">Retrieves the total size of a type.</span></span></summary>
        <value><span data-ttu-id="86906-1337">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1337">Read-only.</span></span> <span data-ttu-id="86906-1338">Ruft die Gesamtgröße dieses Typs ab.</span><span class="sxs-lookup"><span data-stu-id="86906-1338">Retrieves this type’s total size.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _TypeBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_TypeBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="86906-1339">Für zukünftige Verwendung reserviert.</span><span class="sxs-lookup"><span data-stu-id="86906-1339">Reserved for future use.</span></span> <span data-ttu-id="86906-1340">Muss IID_NULL sein.</span><span class="sxs-lookup"><span data-stu-id="86906-1340">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="86906-1341">Das übergebene Array von zuzuordnenden Namen.</span><span class="sxs-lookup"><span data-stu-id="86906-1341">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="86906-1342">Die Anzahl der zuzuordnenden Namen.</span><span class="sxs-lookup"><span data-stu-id="86906-1342">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="86906-1343">Der Gebietsschemakontext, in dem die Namen interpretiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="86906-1343">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="86906-1344">Das vom Aufrufer zugewiesene Array, das die IDs entsprechend den Namen empfängt.</span><span class="sxs-lookup"><span data-stu-id="86906-1344">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="86906-1345">Ordnet eine Reihe von Namen einer entsprechenden Reihe von Dispatchbezeichnern zu.</span><span class="sxs-lookup"><span data-stu-id="86906-1345">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1346">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1346">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="86906-1347">Weitere Informationen zu `IDispatch::GetIDsOfNames`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="86906-1347">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="86906-1348">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1348">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _TypeBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_TypeBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="86906-1349">Die zurückzugebenden Typinformationen.</span><span class="sxs-lookup"><span data-stu-id="86906-1349">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="86906-1350">Der Gebietsschemabezeichner für die Typinformationen.</span><span class="sxs-lookup"><span data-stu-id="86906-1350">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="86906-1351">Empfängt einen Zeiger auf das angeforderte Objekt mit den Typinformationen.</span><span class="sxs-lookup"><span data-stu-id="86906-1351">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="86906-1352">Ruft die Typinformationen für ein Objekt ab, die dann zum Abrufen der Typinformationen für eine Schnittstelle verwendet werden können.</span><span class="sxs-lookup"><span data-stu-id="86906-1352">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1353">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1353">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="86906-1354">Weitere Informationen zu `IDispatch::GetTypeInfo`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="86906-1354">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="86906-1355">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1355">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _TypeBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_TypeBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="86906-1356">Zeigt auf einen Speicherort, der die Anzahl der Schnittstellen mit Typinformationen empfängt, die vom Objekt bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1356">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="86906-1357">Ruft die Anzahl der Schnittstellen mit Typinformationen ab, die von einem Objekt bereitgestellt werden (0 oder 1).</span><span class="sxs-lookup"><span data-stu-id="86906-1357">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1358">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1358">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="86906-1359">Weitere Informationen zu `IDispatch::GetTypeInfoCount`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="86906-1359">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="86906-1360">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1360">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _TypeBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _TypeBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_TypeBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="86906-1361">Bezeichnet den Member.</span><span class="sxs-lookup"><span data-stu-id="86906-1361">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="86906-1362">Für zukünftige Verwendung reserviert.</span><span class="sxs-lookup"><span data-stu-id="86906-1362">Reserved for future use.</span></span> <span data-ttu-id="86906-1363">Muss IID_NULL sein.</span><span class="sxs-lookup"><span data-stu-id="86906-1363">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="86906-1364">Der Gebietsschemakontext, in dem Argumente interpretiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="86906-1364">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="86906-1365">Flags, die den Kontext des Aufrufs beschreiben.</span><span class="sxs-lookup"><span data-stu-id="86906-1365">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="86906-1366">Ein Zeiger auf eine Struktur, die ein Array von Argumenten und ein Array von Argument-DISPIDs für benannte Argumente sowie Zähler für die Anzahl der Elemente in jedem Array enthält.</span><span class="sxs-lookup"><span data-stu-id="86906-1366">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="86906-1367">Ein Verweis auf den Speicherort, an dem das Ergebnis gespeichert werden soll.</span><span class="sxs-lookup"><span data-stu-id="86906-1367">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="86906-1368">Ein Zeiger auf eine Struktur mit Ausnahmeinformationen.</span><span class="sxs-lookup"><span data-stu-id="86906-1368">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="86906-1369">Der Index des ersten Arguments mit einem Fehler.</span><span class="sxs-lookup"><span data-stu-id="86906-1369">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="86906-1370">Stellt den Zugriff auf von einem Objekt verfügbar gemachte Eigenschaften und Methoden bereit.</span><span class="sxs-lookup"><span data-stu-id="86906-1370">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1371">Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="86906-1371">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="86906-1372">Weitere Informationen zu `IDispatch::Invoke`, finden Sie in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="86906-1372">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="86906-1373">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1373">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86906-1374">Gibt den Namen des Typs ohne den Namespace zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-1374">Returns the name of the type excluding the namespace.</span></span></summary>
        <returns><span data-ttu-id="86906-1375">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1375">Read-only.</span></span> <span data-ttu-id="86906-1376">Der Name des Typs ohne den Namespace.</span><span class="sxs-lookup"><span data-stu-id="86906-1376">The name of the type excluding the namespace.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public override RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1377">Wird in dynamischen Modulen nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1377">Not supported in dynamic modules.</span></span></summary>
        <value><span data-ttu-id="86906-1378">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1378">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86906-1379">Rufen Sie den Typ mithilfe <xref:System.Type.GetType%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> und mithilfe der Reflektion für den abgerufenen Typ.</span><span class="sxs-lookup"><span data-stu-id="86906-1379">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86906-1380">Wird in dynamischen Modulen nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1380">Not supported in dynamic modules.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeToken">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeToken TypeToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Emit.TypeToken TypeToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.TypeToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeToken As TypeToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::TypeToken TypeToken { System::Reflection::Emit::TypeToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1381">Gibt das Typtoken dieses Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-1381">Returns the type token of this type.</span></span></summary>
        <value><span data-ttu-id="86906-1382">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1382">Read-only.</span></span> <span data-ttu-id="86906-1383">Gibt das <see langword="TypeToken" /> dieses Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-1383">Returns the <see langword="TypeToken" /> of this type.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-1384">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</span><span class="sxs-lookup"><span data-stu-id="86906-1384">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public override Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86906-1385">Gibt den zugrunde liegenden Systemtyp für diesen <see langword="TypeBuilder" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-1385">Returns the underlying system type for this <see langword="TypeBuilder" />.</span></span></summary>
        <value><span data-ttu-id="86906-1386">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="86906-1386">Read-only.</span></span> <span data-ttu-id="86906-1387">Gibt den zugrunde liegenden Systemtyp zurück.</span><span class="sxs-lookup"><span data-stu-id="86906-1387">Returns the underlying system type.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86906-1388">Dieser Typ ist eine Enumeration, aber es ist kein zugrunde liegender Systemtyp vorhanden.</span><span class="sxs-lookup"><span data-stu-id="86906-1388">This type is an enumeration, but there is no underlying system type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnspecifiedTypeSize">
      <MemberSignature Language="C#" Value="public const int UnspecifiedTypeSize = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 UnspecifiedTypeSize = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize" />
      <MemberSignature Language="VB.NET" Value="Public Const UnspecifiedTypeSize As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int UnspecifiedTypeSize = 0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="86906-1389">Stellt dar, dass die Gesamtgröße für den Typ nicht angegeben ist.</span><span class="sxs-lookup"><span data-stu-id="86906-1389">Represents that total size for the type is not specified.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>